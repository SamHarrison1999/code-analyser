annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Using future annotations for forward compatibility and type hinting improvements,"[26486, 227, 6705, 19939, 25, 8554, 2003, 37647, 329, 2651, 17764, 290, 2099, 9254, 278, 8561]",0.5,7,best_practice,2,Using future annotations for forward compatibility and type hinting improvements,,0,# Licensed under the MIT License.,"[2, 49962, 739, 262, 17168, 13789, 13]"
‚úÖ Best Practice: Importing specific types from typing for better code clarity and type checking,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 3858, 422, 19720, 329, 1365, 2438, 16287, 290, 2099, 10627]",0.5,13,best_practice,4,Importing specific types from typing for better code clarity and type checking,,7,from __future__ import annotations,"[6738, 11593, 37443, 834, 1330, 37647]"
"‚úÖ Best Practice: Importing pandas for data manipulation, a common and efficient library for such tasks","[26486, 227, 6705, 19939, 25, 17267, 278, 19798, 292, 329, 1366, 17512, 11, 257, 2219, 290, 6942, 5888, 329, 884, 8861]",0.5,21,best_practice,6,"Importing pandas for data manipulation, a common and efficient library for such tasks",,13,"from typing import Generator, List, Optional","[6738, 19720, 1330, 35986, 11, 7343, 11, 32233]"
‚úÖ Best Practice: Importing specific functions for clarity and to avoid namespace pollution,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 329, 16287, 290, 284, 3368, 25745, 12231]",0.5,27,best_practice,8,Importing specific functions for clarity and to avoid namespace pollution,,21,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
‚úÖ Best Practice: Importing specific classes for clarity and to avoid namespace pollution,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 6097, 329, 16287, 290, 284, 3368, 25745, 12231]",0.5,47,best_practice,10,Importing specific classes for clarity and to avoid namespace pollution,,27,"from qlib.backtest import collect_data_loop, get_strategy_executor","[6738, 10662, 8019, 13, 1891, 9288, 1330, 2824, 62, 7890, 62, 26268, 11, 651, 62, 2536, 4338, 62, 18558, 38409]"
‚úÖ Best Practice: Importing specific classes for clarity and to avoid namespace pollution,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 6097, 329, 16287, 290, 284, 3368, 25745, 12231]",0.5,61,best_practice,12,Importing specific classes for clarity and to avoid namespace pollution,,47,from qlib.backtest.executor import NestedExecutor,"[6738, 10662, 8019, 13, 1891, 9288, 13, 18558, 38409, 1330, 399, 7287, 23002, 38409]"
‚úÖ Best Practice: Importing specific functions for clarity and to avoid namespace pollution,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 329, 16287, 290, 284, 3368, 25745, 12231]",0.5,75,best_practice,12,Importing specific functions for clarity and to avoid namespace pollution,,61,from qlib.backtest.executor import NestedExecutor,"[6738, 10662, 8019, 13, 1891, 9288, 13, 18558, 38409, 1330, 399, 7287, 23002, 38409]"
‚úÖ Best Practice: Importing specific classes for clarity and to avoid namespace pollution,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 6097, 329, 16287, 290, 284, 3368, 25745, 12231]",0.5,89,best_practice,12,Importing specific classes for clarity and to avoid namespace pollution,,75,from qlib.backtest.executor import NestedExecutor,"[6738, 10662, 8019, 13, 1891, 9288, 13, 18558, 38409, 1330, 399, 7287, 23002, 38409]"
‚úÖ Best Practice: Relative imports for modules within the same package for better modularity,"[26486, 227, 6705, 19939, 25, 45344, 17944, 329, 13103, 1626, 262, 976, 5301, 329, 1365, 26507, 414]",0.5,103,best_practice,12,Relative imports for modules within the same package for better modularity,,89,from qlib.backtest.executor import NestedExecutor,"[6738, 10662, 8019, 13, 1891, 9288, 13, 18558, 38409, 1330, 399, 7287, 23002, 38409]"
‚úÖ Best Practice: Relative imports for modules within the same package for better modularity,"[26486, 227, 6705, 19939, 25, 45344, 17944, 329, 13103, 1626, 262, 976, 5301, 329, 1365, 26507, 414]",0.5,110,best_practice,26,Relative imports for modules within the same package for better modularity,,103,    executor_config,"[220, 220, 220, 3121, 273, 62, 11250]"
"üß† ML Signal: Class docstring provides structured information about parameters, useful for ML models to understand code context.","[8582, 100, 254, 10373, 26484, 25, 5016, 2205, 8841, 3769, 20793, 1321, 546, 10007, 11, 4465, 329, 10373, 4981, 284, 1833, 2438, 4732, 13]",0.5,117,ml_signal,26,"Class docstring provides structured information about parameters, useful for ML models to understand code context.",,110,    executor_config,"[220, 220, 220, 3121, 273, 62, 11250]"
‚úÖ Best Practice: Docstring provides clear documentation of class purpose and parameters.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 10314, 286, 1398, 4007, 290, 10007, 13]",1.0,124,best_practice,26,Docstring provides clear documentation of class purpose and parameters.,,117,    executor_config,"[220, 220, 220, 3121, 273, 62, 11250]"
‚úÖ Best Practice: Call to superclass constructor ensures proper initialization of the base class.,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 23772, 19047, 1774, 37588, 286, 262, 2779, 1398, 13]",1.0,128,best_practice,34,Call to superclass constructor ensures proper initialization of the base class.,,124,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701, 13]",0.5,136,sast_risk,36,Use of assert for runtime checks can be disabled with optimization flags.,Low,128,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
üß† ML Signal: Use of time-based trade range could indicate time-sensitive trading strategies.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 640, 12, 3106, 3292, 2837, 714, 7603, 640, 12, 30176, 7313, 10064, 13]",1.0,153,ml_signal,44,Use of time-based trade range could indicate time-sensitive trading strategies.,,136,        super().__init__(initial=order),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 36733, 28, 2875, 8]"
‚úÖ Best Practice: Type hinting for _collect_data_loop improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 4808, 33327, 62, 7890, 62, 26268, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,189,best_practice,46,Type hinting for _collect_data_loop improves code readability and maintainability.,,153,"        assert order.start_time.date() == order.end_time.date(), ""Start date and end date must be the same.""","[220, 220, 220, 220, 220, 220, 220, 6818, 1502, 13, 9688, 62, 2435, 13, 4475, 3419, 6624, 1502, 13, 437, 62, 2435, 13, 4475, 22784, 366, 10434, 3128, 290, 886, 3128, 1276, 307, 262, 976, 526]"
üß† ML Signal: Resetting with various configurations suggests dynamic strategy adjustments.,"[8582, 100, 254, 10373, 26484, 25, 30027, 889, 351, 2972, 25412, 5644, 8925, 4811, 16895, 13]",1.0,225,ml_signal,46,Resetting with various configurations suggests dynamic strategy adjustments.,,189,"        assert order.start_time.date() == order.end_time.date(), ""Start date and end date must be the same.""","[220, 220, 220, 220, 220, 220, 220, 6818, 1502, 13, 9688, 62, 2435, 13, 4475, 3419, 6624, 1502, 13, 437, 62, 2435, 13, 4475, 22784, 366, 10434, 3128, 290, 886, 3128, 1276, 307, 262, 976, 526]"
‚úÖ Best Practice: Check if qlib_config is not None before calling init_qlib,"[26486, 227, 6705, 19939, 25, 6822, 611, 10662, 8019, 62, 11250, 318, 407, 6045, 878, 4585, 2315, 62, 80, 8019]",0.5,233,best_practice,55,Check if qlib_config is not None before calling init_qlib,,225,        },"[220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Usage of get_strategy_executor function with multiple parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 651, 62, 2536, 4338, 62, 18558, 38409, 2163, 351, 3294, 10007]",0.5,255,ml_signal,57,Usage of get_strategy_executor function with multiple parameters,,233,        self._collect_data_loop: Optional[Generator] = None,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 33327, 62, 7890, 62, 26268, 25, 32233, 58, 8645, 1352, 60, 796, 6045]"
"‚ö†Ô∏è SAST Risk (Low): Use of assert for type checking, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 2099, 10627, 11, 543, 460, 307, 10058, 287, 3227]",1.0,271,sast_risk,69,"Use of assert for type checking, which can be disabled in production",Low,255,        if qlib_config is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 10662, 8019, 62, 11250, 318, 407, 6045, 25]"
‚úÖ Best Practice: Initialize report_dict as an empty dictionary,"[26486, 227, 6705, 19939, 25, 20768, 1096, 989, 62, 11600, 355, 281, 6565, 22155]",0.5,292,best_practice,70,Initialize report_dict as an empty dictionary,,271,            init_qlib(qlib_config),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2315, 62, 80, 8019, 7, 80, 8019, 62, 11250, 8]"
‚úÖ Best Practice: Initialize decisions as an empty list,"[26486, 227, 6705, 19939, 25, 20768, 1096, 5370, 355, 281, 6565, 1351]",0.5,313,best_practice,70,Initialize decisions as an empty list,,292,            init_qlib(qlib_config),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2315, 62, 80, 8019, 7, 80, 8019, 62, 11250, 8]"
üß† ML Signal: Usage of collect_data_loop function with multiple parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2824, 62, 7890, 62, 26268, 2163, 351, 3294, 10007]",0.5,332,ml_signal,77,Usage of collect_data_loop function with multiple parameters,,313,"            benchmark=order.stock_id,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 18335, 28, 2875, 13, 13578, 62, 312, 11]"
"‚ö†Ô∏è SAST Risk (Low): Use of assert for type checking, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 2099, 10627, 11, 543, 460, 307, 10058, 287, 3227]",1.0,353,sast_risk,83,"Use of assert for type checking, which can be disabled in production",Low,332,"        assert isinstance(self._executor, NestedExecutor)","[220, 220, 220, 220, 220, 220, 220, 6818, 318, 39098, 7, 944, 13557, 18558, 38409, 11, 399, 7287, 23002, 38409, 8]"
üß† ML Signal: Calling step function with action=None,"[8582, 100, 254, 10373, 26484, 25, 32677, 2239, 2163, 351, 2223, 28, 14202]",0.5,369,ml_signal,85,Calling step function with action=None,,353,        self.report_dict: dict = {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 13116, 62, 11600, 25, 8633, 796, 23884]"
‚úÖ Best Practice: Assign order to self._order for later use,"[26486, 227, 6705, 19939, 25, 2195, 570, 1502, 284, 2116, 13557, 2875, 329, 1568, 779]",0.5,390,best_practice,87,Assign order to self._order for later use,,369,        self._collect_data_loop = collect_data_loop(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 33327, 62, 7890, 62, 26268, 796, 2824, 62, 7890, 62, 26268, 7]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,398,best_practice,81,Use of type hinting for return type improves code readability and maintainability.,,390,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Accessing dictionary with a key that might not exist can lead to KeyError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8798, 278, 22155, 351, 257, 1994, 326, 1244, 407, 2152, 460, 1085, 284, 7383, 12331, 13]",0.5,419,sast_risk,83,Accessing dictionary with a key that might not exist can lead to KeyError.,Low,398,"        assert isinstance(self._executor, NestedExecutor)","[220, 220, 220, 220, 220, 220, 220, 6818, 318, 39098, 7, 944, 13557, 18558, 38409, 11, 399, 7287, 23002, 38409, 8]"
‚úÖ Best Practice: Use of @property decorator for creating a read-only property.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 4441, 257, 1100, 12, 8807, 3119, 13]",0.5,435,best_practice,85,Use of @property decorator for creating a read-only property.,,419,        self.report_dict: dict = {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 13116, 62, 11600, 25, 8633, 796, 23884]"
‚úÖ Best Practice: Use of type hint for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,456,best_practice,83,Use of type hint for return value improves code readability and maintainability,,435,"        assert isinstance(self._executor, NestedExecutor)","[220, 220, 220, 220, 220, 220, 220, 6818, 318, 39098, 7, 944, 13557, 18558, 38409, 11, 399, 7287, 23002, 38409, 8]"
üß† ML Signal: Method chaining pattern with adapter design pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 351, 21302, 1486, 3912]",0.5,472,ml_signal,85,Method chaining pattern with adapter design pattern,,456,        self.report_dict: dict = {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 13116, 62, 11600, 25, 8633, 796, 23884]"
"‚ö†Ô∏è SAST Risk (Low): Use of assert statements can be disabled in production, leading to potential issues if _collect_data_loop is None.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 460, 307, 10058, 287, 3227, 11, 3756, 284, 2785, 2428, 611, 4808, 33327, 62, 7890, 62, 26268, 318, 6045, 13]",1.0,493,sast_risk,87,"Use of assert statements can be disabled in production, leading to potential issues if _collect_data_loop is None.",Low,472,        self._collect_data_loop = collect_data_loop(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 33327, 62, 7890, 62, 26268, 796, 2824, 62, 7890, 62, 26268, 7]"
üß† ML Signal: Use of generator pattern with next() and send() indicates advanced control flow.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 17301, 3912, 351, 1306, 3419, 290, 3758, 3419, 9217, 6190, 1630, 5202, 13]",1.0,512,ml_signal,89,Use of generator pattern with next() and send() indicates advanced control flow.,,493,"            end_time=order.date,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 28, 2875, 13, 4475, 11]"
üß† ML Signal: Appending to a list based on type check indicates dynamic data collection.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 284, 257, 1351, 1912, 319, 2099, 2198, 9217, 8925, 1366, 4947, 13]",1.0,533,ml_signal,92,Appending to a list based on type check indicates dynamic data collection.,,512,"            return_value=self.report_dict,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 62, 8367, 28, 944, 13, 13116, 62, 11600, 11]"
üß† ML Signal: Repeated use of generator pattern with next() and send().,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 779, 286, 17301, 3912, 351, 1306, 3419, 290, 3758, 22446]",1.0,533,ml_signal,95,Repeated use of generator pattern with next() and send().,,533,,[]
"‚ö†Ô∏è SAST Risk (Low): Use of assert statements can be disabled in production, leading to potential issues if obj is not SAOEStrategy.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 460, 307, 10058, 287, 3227, 11, 3756, 284, 2785, 2428, 611, 26181, 318, 407, 14719, 27799, 13290, 4338, 13]",1.0,548,sast_risk,96,"Use of assert statements can be disabled in production, leading to potential issues if obj is not SAOEStrategy.",Low,533,        self.step(action=None),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9662, 7, 2673, 28, 14202, 8]"
"‚ö†Ô∏è SAST Risk (Low): The use of assert for control flow can be disabled with optimized execution (-O), potentially bypassing this check.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 383, 779, 286, 6818, 329, 1630, 5202, 460, 307, 10058, 351, 23392, 9706, 13841, 46, 828, 6196, 17286, 278, 428, 2198, 13]",0.5,548,sast_risk,102,"The use of assert for control flow can be disabled with optimized execution (-O), potentially bypassing this check.",Low,548,,[]
üß† ML Signal: Usage of try-except block to handle StopIteration exception.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1949, 12, 16341, 2512, 284, 5412, 13707, 29993, 341, 6631, 13]",1.0,562,ml_signal,104,Usage of try-except block to handle StopIteration exception.,,548,    def twap_price(self) -> float:,"[220, 220, 220, 825, 665, 499, 62, 20888, 7, 944, 8, 4613, 12178, 25]"
"‚ö†Ô∏è SAST Risk (Low): The use of assert for control flow can be disabled with optimized execution (-O), potentially bypassing this check.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 383, 779, 286, 6818, 329, 1630, 5202, 460, 307, 10058, 351, 23392, 9706, 13841, 46, 828, 6196, 17286, 278, 428, 2198, 13]",0.5,580,sast_risk,109,"The use of assert for control flow can be disabled with optimized execution (-O), potentially bypassing this check.",Low,562,        assert self._collect_data_loop is not None,"[220, 220, 220, 220, 220, 220, 220, 6818, 2116, 13557, 33327, 62, 7890, 62, 26268, 318, 407, 6045]"
‚úÖ Best Practice: Type hinting for the return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,609,best_practice,108,Type hinting for the return value improves code readability and maintainability,,580,"        """"""Iterate the _collect_data_loop until we get the next yield SAOEStrategy.""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 29993, 378, 262, 4808, 33327, 62, 7890, 62, 26268, 1566, 356, 651, 262, 1306, 7800, 14719, 27799, 13290, 4338, 526, 15931]"
üß† ML Signal: Method chaining pattern with _get_adapter() and saoe_state,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 351, 4808, 1136, 62, 324, 3429, 3419, 290, 473, 2577, 62, 5219]",1.0,609,ml_signal,110,Method chaining pattern with _get_adapter() and saoe_state,,609,,[]
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,609,best_practice,110,Use of type hinting for return type improves code readability and maintainability,,609,,[]
üß† ML Signal: Method delegation to another object's method,"[8582, 100, 254, 10373, 26484, 25, 11789, 22635, 284, 1194, 2134, 338, 2446]",0.5,645,ml_signal,111,Method delegation to another object's method,,609,        obj = next(self._collect_data_loop) if action is None else self._collect_data_loop.send(action),"[220, 220, 220, 220, 220, 220, 220, 26181, 796, 1306, 7, 944, 13557, 33327, 62, 7890, 62, 26268, 8, 611, 2223, 318, 6045, 2073, 2116, 13557, 33327, 62, 7890, 62, 26268, 13, 21280, 7, 2673, 8]"

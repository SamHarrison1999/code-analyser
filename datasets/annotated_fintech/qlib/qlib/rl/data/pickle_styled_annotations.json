[
  {
    "line": 11,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of lru_cache to optimize repeated function calls by caching results.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      300,
      622,
      62,
      23870,
      284,
      27183,
      5100,
      2163,
      3848,
      416,
      40918,
      2482,
      13
    ],
    "label": "best_practice",
    "reason": "Use of lru_cache to optimize repeated function calls by caching results."
  },
  {
    "line": 13,
    "text": "See `PEP 574 <https://peps.python.org/pep-0574/>`__ for details.",
    "annotation": "\u2705 Best Practice: Use of pathlib for file path operations improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      6214,
      4600,
      47,
      8905,
      642,
      4524,
      1279,
      5450,
      1378,
      431,
      862,
      13,
      29412,
      13,
      2398,
      14,
      431,
      79,
      12,
      2713,
      4524,
      15913,
      63,
      834,
      329,
      3307,
      13
    ],
    "start_token": 0,
    "end_token": 27,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3108,
      8019,
      329,
      2393,
      3108,
      4560,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of pathlib for file path operations improves code readability and maintainability."
  },
  {
    "line": 22,
    "text": "from functools import lru_cache",
    "annotation": "\u2705 Best Practice: Use of Literal for type hinting improves code readability and reduces errors.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1257,
      310,
      10141,
      1330,
      300,
      622,
      62,
      23870
    ],
    "start_token": 27,
    "end_token": 36,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      25659,
      1691,
      329,
      2099,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      12850,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Literal for type hinting improves code readability and reduces errors."
  },
  {
    "line": 27,
    "text": "import numpy as np",
    "annotation": "\u2705 Best Practice: Consider using a more descriptive function name for clarity",
    "confidence": 0.5,
    "tokens": [
      11748,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 36,
    "end_token": 41,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      517,
      35644,
      2163,
      1438,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Consider using a more descriptive function name for clarity"
  },
  {
    "line": 29,
    "text": "from cachetools.keys import hashkey",
    "annotation": "\u2705 Best Practice: Use consistent ordering of return statements for readability",
    "confidence": 0.5,
    "tokens": [
      6738,
      40428,
      3202,
      10141,
      13,
      13083,
      1330,
      12234,
      2539
    ],
    "start_token": 41,
    "end_token": 50,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      6414,
      16216,
      286,
      1441,
      6299,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use consistent ordering of return statements for readability"
  },
  {
    "line": 49,
    "text": "            \"$close\",",
    "annotation": "\u2705 Best Practice: Use consistent ordering of return statements for readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17971,
      19836,
      1600
    ],
    "start_token": 50,
    "end_token": 64,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      6414,
      16216,
      286,
      1441,
      6299,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use consistent ordering of return statements for readability"
  },
  {
    "line": 52,
    "text": "            \"$ask\",",
    "annotation": "\u2705 Best Practice: Use consistent ordering of return statements for readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17971,
      2093,
      1600
    ],
    "start_token": 64,
    "end_token": 78,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      6414,
      16216,
      286,
      1441,
      6299,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use consistent ordering of return statements for readability"
  },
  {
    "line": 55,
    "text": "            \"$bidV1\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information disclosure if the exception message is exposed to users",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17971,
      14065,
      53,
      16,
      1600
    ],
    "start_token": 78,
    "end_token": 94,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      13019,
      611,
      262,
      6631,
      3275,
      318,
      7362,
      284,
      2985
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information disclosure if the exception message is exposed to users"
  },
  {
    "line": 52,
    "text": "            \"$ask\",",
    "annotation": "\u2705 Best Practice: Use of lru_cache to cache results and improve performance for repeated calls",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17971,
      2093,
      1600
    ],
    "start_token": 94,
    "end_token": 108,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      300,
      622,
      62,
      23870,
      284,
      12940,
      2482,
      290,
      2987,
      2854,
      329,
      5100,
      3848
    ],
    "label": "best_practice",
    "reason": "Use of lru_cache to cache results and improve performance for repeated calls"
  },
  {
    "line": 58,
    "text": "            \"$askV\",",
    "annotation": "\ud83e\udde0 ML Signal: Checking for file existence is a common pattern in file handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17971,
      2093,
      53,
      1600
    ],
    "start_token": 108,
    "end_token": 123,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      2393,
      6224,
      318,
      257,
      2219,
      3912,
      287,
      2393,
      9041
    ],
    "label": "ml_signal",
    "reason": "Checking for file existence is a common pattern in file handling"
  },
  {
    "line": 61,
    "text": "            \"$askV5\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic FileNotFoundError without logging the error",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17971,
      2093,
      53,
      20,
      1600
    ],
    "start_token": 123,
    "end_token": 139,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      9220,
      3673,
      21077,
      12331,
      1231,
      18931,
      262,
      4049
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic FileNotFoundError without logging the error"
  },
  {
    "line": 63,
    "text": "    if shape == 6:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic ValueError without logging the error",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      5485,
      6624,
      718,
      25
    ],
    "start_token": 139,
    "end_token": 147,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      11052,
      12331,
      1231,
      18931,
      262,
      4049
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic ValueError without logging the error"
  },
  {
    "line": 68,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of lru_cache to cache results and improve performance for repeated calls",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 147,
    "end_token": 147,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      300,
      622,
      62,
      23870,
      284,
      12940,
      2482,
      290,
      2987,
      2854,
      329,
      5100,
      3848
    ],
    "label": "best_practice",
    "reason": "Use of lru_cache to cache results and improve performance for repeated calls"
  },
  {
    "line": 65,
    "text": "    elif shape == 5:",
    "annotation": "\u2705 Best Practice: Type hint for the return value improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1288,
      361,
      5485,
      6624,
      642,
      25
    ],
    "start_token": 147,
    "end_token": 156,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      329,
      262,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hint for the return value improves code readability and maintainability"
  },
  {
    "line": 67,
    "text": "    raise ValueError(f\"Unrecognized data shape: {shape}\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of pandas to read pickle files, indicating data processing or analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      5298,
      11052,
      12331,
      7,
      69,
      1,
      3118,
      26243,
      1143,
      1366,
      5485,
      25,
      1391,
      43358,
      92,
      4943
    ],
    "start_token": 156,
    "end_token": 175,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19798,
      292,
      284,
      1100,
      2298,
      293,
      3696,
      11,
      12739,
      1366,
      7587,
      393,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of pandas to read pickle files, indicating data processing or analysis"
  },
  {
    "line": 69,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Capturing index names for later use, indicating data manipulation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 175,
    "end_token": 175,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6790,
      870,
      6376,
      3891,
      329,
      1568,
      779,
      11,
      12739,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Capturing index names for later use, indicating data manipulation"
  },
  {
    "line": 71,
    "text": "    suffix_list = [\".pkl\", \".pkl.backtest\"]",
    "annotation": "\ud83e\udde0 ML Signal: Resetting index, common in data preprocessing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      35488,
      62,
      4868,
      796,
      685,
      1911,
      79,
      41582,
      1600,
      27071,
      79,
      41582,
      13,
      1891,
      9288,
      8973
    ],
    "start_token": 175,
    "end_token": 194,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30027,
      889,
      6376,
      11,
      2219,
      287,
      1366,
      662,
      36948
    ],
    "label": "ml_signal",
    "reason": "Resetting index, common in data preprocessing"
  },
  {
    "line": 74,
    "text": "        path = filename_without_suffix.parent / (filename_without_suffix.name + suffix)",
    "annotation": "\ud83e\udde0 ML Signal: Checking for specific column names, indicating pattern-based data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3108,
      796,
      29472,
      62,
      19419,
      62,
      37333,
      844,
      13,
      8000,
      1220,
      357,
      34345,
      62,
      19419,
      62,
      37333,
      844,
      13,
      3672,
      1343,
      35488,
      8
    ],
    "start_token": 194,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      2176,
      5721,
      3891,
      11,
      12739,
      3912,
      12,
      3106,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Checking for specific column names, indicating pattern-based data processing"
  },
  {
    "line": 76,
    "text": "            paths.append(path)",
    "annotation": "\ud83e\udde0 ML Signal: Converting columns to datetime, a common preprocessing step in time series analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13532,
      13,
      33295,
      7,
      6978,
      8
    ],
    "start_token": 224,
    "end_token": 241,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      15180,
      284,
      4818,
      8079,
      11,
      257,
      2219,
      662,
      36948,
      2239,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Converting columns to datetime, a common preprocessing step in time series analysis"
  },
  {
    "line": 76,
    "text": "            paths.append(path)",
    "annotation": "\ud83e\udde0 ML Signal: Setting index back to original, indicating data transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13532,
      13,
      33295,
      7,
      6978,
      8
    ],
    "start_token": 241,
    "end_token": 258,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      6376,
      736,
      284,
      2656,
      11,
      12739,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Setting index back to original, indicating data transformation"
  },
  {
    "line": 76,
    "text": "            paths.append(path)",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13532,
      13,
      33295,
      7,
      6978,
      8
    ],
    "start_token": 258,
    "end_token": 275,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose"
  },
  {
    "line": 84,
    "text": "@lru_cache(maxsize=10)  # 10 * 40M = 400MB",
    "annotation": "\u2705 Best Practice: Use of super() to initialize the parent class",
    "confidence": 0.5,
    "tokens": [
      31,
      75,
      622,
      62,
      23870,
      7,
      9806,
      7857,
      28,
      940,
      8,
      220,
      1303,
      838,
      1635,
      2319,
      44,
      796,
      7337,
      10744
    ],
    "start_token": 275,
    "end_token": 295,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      41216,
      262,
      2560,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of super() to initialize the parent class"
  },
  {
    "line": 86,
    "text": "    df = pd.read_pickle(_find_pickle(filename_without_suffix))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for path traversal if data_dir is user-controlled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      961,
      62,
      27729,
      293,
      28264,
      19796,
      62,
      27729,
      293,
      7,
      34345,
      62,
      19419,
      62,
      37333,
      844,
      4008
    ],
    "start_token": 295,
    "end_token": 320,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      3108,
      33038,
      282,
      611,
      1366,
      62,
      15908,
      318,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for path traversal if data_dir is user-controlled"
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of pandas for data manipulation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 320,
    "end_token": 320,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19798,
      292,
      329,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Use of pandas for data manipulation"
  },
  {
    "line": 90,
    "text": "    for date_col_name in [\"date\", \"datetime\"]:",
    "annotation": "\ud83e\udde0 ML Signal: Storing data in a DataFrame for further analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      3128,
      62,
      4033,
      62,
      3672,
      287,
      14631,
      4475,
      1600,
      366,
      19608,
      8079,
      1,
      5974
    ],
    "start_token": 320,
    "end_token": 338,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1366,
      287,
      257,
      6060,
      19778,
      329,
      2252,
      3781
    ],
    "label": "ml_signal",
    "reason": "Storing data in a DataFrame for further analysis"
  },
  {
    "line": 92,
    "text": "            df[date_col_name] = pd.to_datetime(df[date_col_name])",
    "annotation": "\ud83e\udde0 ML Signal: Use of a specific deal price type for trading strategy",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      58,
      4475,
      62,
      4033,
      62,
      3672,
      60,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      7568,
      58,
      4475,
      62,
      4033,
      62,
      3672,
      12962
    ],
    "start_token": 338,
    "end_token": 374,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2176,
      1730,
      2756,
      2099,
      329,
      7313,
      4811
    ],
    "label": "ml_signal",
    "reason": "Use of a specific deal price type for trading strategy"
  },
  {
    "line": 94,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing order direction, which could influence trading decisions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 374,
    "end_token": 374,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1502,
      4571,
      11,
      543,
      714,
      4588,
      7313,
      5370
    ],
    "label": "ml_signal",
    "reason": "Storing order direction, which could influence trading decisions"
  },
  {
    "line": 90,
    "text": "    for date_col_name in [\"date\", \"datetime\"]:",
    "annotation": "\u2705 Best Practice: Use of __repr__ method to provide a string representation of the object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      3128,
      62,
      4033,
      62,
      3672,
      287,
      14631,
      4475,
      1600,
      366,
      19608,
      8079,
      1,
      5974
    ],
    "start_token": 374,
    "end_token": 392,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      260,
      1050,
      834,
      2446,
      284,
      2148,
      257,
      4731,
      10552,
      286,
      262,
      2134
    ],
    "label": "best_practice",
    "reason": "Use of __repr__ method to provide a string representation of the object"
  },
  {
    "line": 92,
    "text": "            df[date_col_name] = pd.to_datetime(df[date_col_name])",
    "annotation": "\u2705 Best Practice: Use of pd.option_context to temporarily set pandas options",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      58,
      4475,
      62,
      4033,
      62,
      3672,
      60,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      7568,
      58,
      4475,
      62,
      4033,
      62,
      3672,
      12962
    ],
    "start_token": 392,
    "end_token": 428,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      18076,
      62,
      22866,
      284,
      13413,
      900,
      19798,
      292,
      3689
    ],
    "label": "best_practice",
    "reason": "Use of pd.option_context to temporarily set pandas options"
  },
  {
    "line": 94,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for string formatting",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 428,
    "end_token": 428,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      4731,
      33313
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for string formatting"
  },
  {
    "line": 93,
    "text": "    df = df.set_index(index_cols)",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      47764,
      13,
      2617,
      62,
      9630,
      7,
      9630,
      62,
      4033,
      82,
      8
    ],
    "start_token": 428,
    "end_token": 444,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 95,
    "text": "    return df",
    "annotation": "\ud83e\udde0 ML Signal: Usage of __len__ indicates the object is expected to behave like a collection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      47764
    ],
    "start_token": 444,
    "end_token": 449,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11593,
      11925,
      834,
      9217,
      262,
      2134,
      318,
      2938,
      284,
      17438,
      588,
      257,
      4947
    ],
    "label": "ml_signal",
    "reason": "Usage of __len__ indicates the object is expected to behave like a collection"
  },
  {
    "line": 96,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes self.data is a collection; if not, this will raise an error",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 449,
    "end_token": 449,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      2116,
      13,
      7890,
      318,
      257,
      4947,
      26,
      611,
      407,
      11,
      428,
      481,
      5298,
      281,
      4049
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes self.data is a collection; if not, this will raise an error"
  },
  {
    "line": 98,
    "text": "class SimpleIntradayBacktestData(BaseIntradayBacktestData):",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on `deal_price_type` and `order_dir` indicates decision-making patterns.",
    "confidence": 1.0,
    "tokens": [
      4871,
      17427,
      5317,
      6335,
      323,
      7282,
      9288,
      6601,
      7,
      14881,
      5317,
      6335,
      323,
      7282,
      9288,
      6601,
      2599
    ],
    "start_token": 449,
    "end_token": 466,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      4600,
      31769,
      62,
      20888,
      62,
      4906,
      63,
      290,
      4600,
      2875,
      62,
      15908,
      63,
      9217,
      2551,
      12,
      8601,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on `deal_price_type` and `order_dir` indicates decision-making patterns."
  },
  {
    "line": 100,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for `None` value in `order_dir` leading to exception.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 466,
    "end_token": 466,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      4600,
      14202,
      63,
      1988,
      287,
      4600,
      2875,
      62,
      15908,
      63,
      3756,
      284,
      6631,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for `None` value in `order_dir` leading to exception."
  },
  {
    "line": 110,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of f-string with user-controlled `deal_price_type` could lead to information disclosure.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 466,
    "end_token": 466,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      277,
      12,
      8841,
      351,
      2836,
      12,
      14401,
      4600,
      31769,
      62,
      20888,
      62,
      4906,
      63,
      714,
      1085,
      284,
      1321,
      13019,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of f-string with user-controlled `deal_price_type` could lead to information disclosure."
  },
  {
    "line": 112,
    "text": "        backtest = backtest.loc[pd.IndexSlice[stock_id, :, date]]",
    "annotation": "\ud83e\udde0 ML Signal: Access pattern to `self.data` using dynamic column names.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      736,
      9288,
      796,
      736,
      9288,
      13,
      17946,
      58,
      30094,
      13,
      15732,
      11122,
      501,
      58,
      13578,
      62,
      312,
      11,
      1058,
      11,
      3128,
      11907
    ],
    "start_token": 466,
    "end_token": 495,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      3912,
      284,
      4600,
      944,
      13,
      7890,
      63,
      1262,
      8925,
      5721,
      3891,
      13
    ],
    "label": "ml_signal",
    "reason": "Access pattern to `self.data` using dynamic column names."
  },
  {
    "line": 119,
    "text": "        self.order_dir = order_dir",
    "annotation": "\u2705 Best Practice: Use of `replace` and `fillna` for handling missing data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2875,
      62,
      15908,
      796,
      1502,
      62,
      15908
    ],
    "start_token": 495,
    "end_token": 511,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4600,
      33491,
      63,
      290,
      4600,
      20797,
      2616,
      63,
      329,
      9041,
      4814,
      1366,
      13
    ],
    "label": "best_practice",
    "reason": "Use of `replace` and `fillna` for handling missing data."
  },
  {
    "line": 117,
    "text": "        self.data: pd.DataFrame = backtest",
    "annotation": "\u2705 Best Practice: Include type hints for method return type for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      7890,
      25,
      279,
      67,
      13,
      6601,
      19778,
      796,
      736,
      9288
    ],
    "start_token": 511,
    "end_token": 530,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2446,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for method return type for better readability and maintainability"
  },
  {
    "line": 120,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a specific column from a DataFrame, indicating a pattern of data manipulation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 530,
    "end_token": 530,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      2176,
      5721,
      422,
      257,
      6060,
      19778,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Accessing a specific column from a DataFrame, indicating a pattern of data manipulation"
  },
  {
    "line": 120,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 530,
    "end_token": 530,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 122,
    "text": "        with pd.option_context(\"memory_usage\", False, \"display.max_info_columns\", 1, \"display.large_repr\", \"info\"):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of type casting can indicate potential type mismatches",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      351,
      279,
      67,
      13,
      18076,
      62,
      22866,
      7203,
      31673,
      62,
      26060,
      1600,
      10352,
      11,
      366,
      13812,
      13,
      9806,
      62,
      10951,
      62,
      28665,
      82,
      1600,
      352,
      11,
      366,
      13812,
      13,
      11664,
      62,
      260,
      1050,
      1600,
      366,
      10951,
      1,
      2599
    ],
    "start_token": 530,
    "end_token": 575,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2099,
      13092,
      460,
      7603,
      2785,
      2099,
      32691,
      20981
    ],
    "label": "ml_signal",
    "reason": "Usage of type casting can indicate potential type mismatches"
  },
  {
    "line": 124,
    "text": "",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 575,
    "end_token": 575,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose."
  },
  {
    "line": 132,
    "text": "            if self.order_dir is None:",
    "annotation": "\u2705 Best Practice: Use of Path to handle file paths ensures cross-platform compatibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      2875,
      62,
      15908,
      318,
      6045,
      25
    ],
    "start_token": 575,
    "end_token": 595,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      284,
      5412,
      2393,
      13532,
      19047,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Path to handle file paths ensures cross-platform compatibility."
  },
  {
    "line": 134,
    "text": "            if self.order_dir == OrderDir.SELL:",
    "annotation": "\ud83e\udde0 ML Signal: Inferring column names based on feature dimension indicates dynamic data handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      2875,
      62,
      15908,
      6624,
      8284,
      35277,
      13,
      5188,
      3069,
      25
    ],
    "start_token": 595,
    "end_token": 619,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      554,
      2232,
      1806,
      5721,
      3891,
      1912,
      319,
      3895,
      15793,
      9217,
      8925,
      1366,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Inferring column names based on feature dimension indicates dynamic data handling."
  },
  {
    "line": 138,
    "text": "        elif self.deal_price_type == \"close\":",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for KeyError if stock_id or date is not in the index.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      2116,
      13,
      31769,
      62,
      20888,
      62,
      4906,
      6624,
      366,
      19836,
      1298
    ],
    "start_token": 619,
    "end_token": 639,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      7383,
      12331,
      611,
      4283,
      62,
      312,
      393,
      3128,
      318,
      407,
      287,
      262,
      6376,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for KeyError if stock_id or date is not in the index."
  },
  {
    "line": 139,
    "text": "            col = \"$close0\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): AssertionError could be raised if data shape is unexpected.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      951,
      796,
      17971,
      19836,
      15,
      1
    ],
    "start_token": 639,
    "end_token": 656,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      295,
      12331,
      714,
      307,
      4376,
      611,
      1366,
      5485,
      318,
      10059,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "AssertionError could be raised if data shape is unexpected."
  },
  {
    "line": 143,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of list comprehension for renaming columns is concise and readable.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 656,
    "end_token": 656,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1351,
      35915,
      329,
      8851,
      3723,
      15180,
      318,
      35327,
      290,
      31744,
      13
    ],
    "label": "best_practice",
    "reason": "Use of list comprehension for renaming columns is concise and readable."
  },
  {
    "line": 146,
    "text": "                fill_col = \"$ask0\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for KeyError if stock_id or date is not in the index.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6070,
      62,
      4033,
      796,
      17971,
      2093,
      15,
      1
    ],
    "start_token": 656,
    "end_token": 679,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      7383,
      12331,
      611,
      4283,
      62,
      312,
      393,
      3128,
      318,
      407,
      287,
      262,
      6376,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for KeyError if stock_id or date is not in the index."
  },
  {
    "line": 148,
    "text": "                fill_col = \"$bid0\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): AssertionError could be raised if data shape is unexpected.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6070,
      62,
      4033,
      796,
      17971,
      14065,
      15,
      1
    ],
    "start_token": 679,
    "end_token": 702,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      295,
      12331,
      714,
      307,
      4376,
      611,
      1366,
      5485,
      318,
      10059,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "AssertionError could be raised if data shape is unexpected."
  },
  {
    "line": 150,
    "text": "",
    "annotation": "\u2705 Best Practice: Reshaping numpy arrays for structured data processing.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 702,
    "end_token": 702,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1874,
      71,
      9269,
      299,
      32152,
      26515,
      329,
      20793,
      1366,
      7587,
      13
    ],
    "label": "best_practice",
    "reason": "Reshaping numpy arrays for structured data processing."
  },
  {
    "line": 153,
    "text": "    def get_volume(self) -> pd.Series:",
    "annotation": "\u2705 Best Practice: Creating DataFrames with explicit index and columns improves clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      29048,
      7,
      944,
      8,
      4613,
      279,
      67,
      13,
      27996,
      25
    ],
    "start_token": 702,
    "end_token": 718,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30481,
      6060,
      35439,
      351,
      7952,
      6376,
      290,
      15180,
      19575,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Creating DataFrames with explicit index and columns improves clarity."
  },
  {
    "line": 155,
    "text": "        return self.data[\"$volume0\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): AssertionError could be raised if data shape is unexpected.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      7890,
      14692,
      3,
      29048,
      15,
      8973
    ],
    "start_token": 718,
    "end_token": 734,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      295,
      12331,
      714,
      307,
      4376,
      611,
      1366,
      5485,
      318,
      10059,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "AssertionError could be raised if data shape is unexpected."
  },
  {
    "line": 160,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): AssertionError could be raised if data shape is unexpected.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 734,
    "end_token": 734,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      861,
      295,
      12331,
      714,
      307,
      4376,
      611,
      1366,
      5485,
      318,
      10059,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "AssertionError could be raised if data shape is unexpected."
  },
  {
    "line": 152,
    "text": "",
    "annotation": "\u2705 Best Practice: Using pd.option_context to temporarily set pandas options for a specific block of code",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 734,
    "end_token": 734,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      18076,
      62,
      22866,
      284,
      13413,
      900,
      19798,
      292,
      3689,
      329,
      257,
      2176,
      2512,
      286,
      2438
    ],
    "label": "best_practice",
    "reason": "Using pd.option_context to temporarily set pandas options for a specific block of code"
  },
  {
    "line": 153,
    "text": "    def get_volume(self) -> pd.Series:",
    "annotation": "\u2705 Best Practice: Using f-string for a more readable and efficient string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      29048,
      7,
      944,
      8,
      4613,
      279,
      67,
      13,
      27996,
      25
    ],
    "start_token": 734,
    "end_token": 750,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      277,
      12,
      8841,
      329,
      257,
      517,
      31744,
      290,
      6942,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Using f-string for a more readable and efficient string formatting"
  },
  {
    "line": 155,
    "text": "        return self.data[\"$volume0\"]",
    "annotation": "\ud83e\udde0 ML Signal: Use of lru_cache decorator indicates caching behavior which can be a pattern for ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      7890,
      14692,
      3,
      29048,
      15,
      8973
    ],
    "start_token": 750,
    "end_token": 766,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      300,
      622,
      62,
      23870,
      11705,
      1352,
      9217,
      40918,
      4069,
      543,
      460,
      307,
      257,
      3912,
      329,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Use of lru_cache decorator indicates caching behavior which can be a pattern for ML models"
  },
  {
    "line": 155,
    "text": "        return self.data[\"$volume0\"]",
    "annotation": "\u2705 Best Practice: Using lru_cache to optimize performance by caching results of expensive function calls",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      7890,
      14692,
      3,
      29048,
      15,
      8973
    ],
    "start_token": 766,
    "end_token": 782,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      300,
      622,
      62,
      23870,
      284,
      27183,
      2854,
      416,
      40918,
      2482,
      286,
      5789,
      2163,
      3848
    ],
    "label": "best_practice",
    "reason": "Using lru_cache to optimize performance by caching results of expensive function calls"
  },
  {
    "line": 155,
    "text": "        return self.data[\"$volume0\"]",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      7890,
      14692,
      3,
      29048,
      15,
      8973
    ],
    "start_token": 782,
    "end_token": 798,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters and return type for better readability and maintainability."
  },
  {
    "line": 162,
    "text": "    \"\"\"Subclass of IntradayProcessedData. Used to handle pickle-styled data.\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Function returns an instance of a specific class, indicating a pattern of object creation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      7004,
      4871,
      286,
      2558,
      6335,
      323,
      18709,
      276,
      6601,
      13,
      16718,
      284,
      5412,
      2298,
      293,
      12,
      34365,
      992,
      1366,
      526,
      15931
    ],
    "start_token": 798,
    "end_token": 823,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      5860,
      281,
      4554,
      286,
      257,
      2176,
      1398,
      11,
      12739,
      257,
      3912,
      286,
      2134,
      6282,
      13
    ],
    "label": "ml_signal",
    "reason": "Function returns an instance of a specific class, indicating a pattern of object creation."
  },
  {
    "line": 167,
    "text": "        stock_id: str,",
    "annotation": "\u2705 Best Practice: Using caching to improve performance by storing results of expensive function calls.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      312,
      25,
      965,
      11
    ],
    "start_token": 823,
    "end_token": 836,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      40918,
      284,
      2987,
      2854,
      416,
      23069,
      2482,
      286,
      5789,
      2163,
      3848,
      13
    ],
    "label": "best_practice",
    "reason": "Using caching to improve performance by storing results of expensive function calls."
  },
  {
    "line": 167,
    "text": "        stock_id: str,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the cached data does not contain sensitive information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      312,
      25,
      965,
      11
    ],
    "start_token": 836,
    "end_token": 849,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      39986,
      1366,
      857,
      407,
      3994,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the cached data does not contain sensitive information."
  },
  {
    "line": 167,
    "text": "        stock_id: str,",
    "annotation": "\u2705 Best Practice: LRUCache is used to limit memory usage by discarding least recently used items.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      312,
      25,
      965,
      11
    ],
    "start_token": 849,
    "end_token": 862,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      37491,
      9598,
      4891,
      318,
      973,
      284,
      4179,
      4088,
      8748,
      416,
      1221,
      13493,
      1551,
      2904,
      973,
      3709,
      13
    ],
    "label": "best_practice",
    "reason": "LRUCache is used to limit memory usage by discarding least recently used items."
  },
  {
    "line": 171,
    "text": "    ) -> None:",
    "annotation": "\u2705 Best Practice: Custom key function for caching to ensure uniqueness based on specific parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      6045,
      25
    ],
    "start_token": 862,
    "end_token": 869,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8562,
      1994,
      2163,
      329,
      40918,
      284,
      4155,
      49650,
      1912,
      319,
      2176,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Custom key function for caching to ensure uniqueness based on specific parameters."
  },
  {
    "line": 167,
    "text": "        stock_id: str,",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with multiple parameters indicating a complex operation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      312,
      25,
      965,
      11
    ],
    "start_token": 869,
    "end_token": 882,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      3294,
      10007,
      12739,
      257,
      3716,
      4905
    ],
    "label": "ml_signal",
    "reason": "Function signature with multiple parameters indicating a complex operation"
  },
  {
    "line": 167,
    "text": "        stock_id: str,",
    "annotation": "\u2705 Best Practice: Type hinting for parameters and return type improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      312,
      25,
      965,
      11
    ],
    "start_token": 882,
    "end_token": 895,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting for parameters and return type improves code readability and maintainability"
  },
  {
    "line": 176,
    "text": "        cnames = _infer_processed_data_column_names(feature_dim)",
    "annotation": "\ud83e\udde0 ML Signal: Direct instantiation and return of an object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      14933,
      796,
      4808,
      259,
      2232,
      62,
      14681,
      276,
      62,
      7890,
      62,
      28665,
      62,
      14933,
      7,
      30053,
      62,
      27740,
      8
    ],
    "start_token": 895,
    "end_token": 922,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4128,
      9113,
      3920,
      290,
      1441,
      286,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Direct instantiation and return of an object"
  },
  {
    "line": 177,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning an instance directly can improve code simplicity",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 922,
    "end_token": 922,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      281,
      4554,
      3264,
      460,
      2987,
      2438,
      21654
    ],
    "label": "best_practice",
    "reason": "Returning an instance directly can improve code simplicity"
  },
  {
    "line": 176,
    "text": "        cnames = _infer_processed_data_column_names(feature_dim)",
    "annotation": "\u2705 Best Practice: Class definition should include a docstring explaining its purpose and usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      14933,
      796,
      4808,
      259,
      2232,
      62,
      14681,
      276,
      62,
      7890,
      62,
      28665,
      62,
      14933,
      7,
      30053,
      62,
      27740,
      8
    ],
    "start_token": 922,
    "end_token": 949,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      2291,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should include a docstring explaining its purpose and usage."
  },
  {
    "line": 176,
    "text": "        cnames = _infer_processed_data_column_names(feature_dim)",
    "annotation": "\u2705 Best Practice: Use of type hint for data_dir improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      14933,
      796,
      4808,
      259,
      2232,
      62,
      14681,
      276,
      62,
      7890,
      62,
      28665,
      62,
      14933,
      7,
      30053,
      62,
      27740,
      8
    ],
    "start_token": 949,
    "end_token": 976,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1366,
      62,
      15908,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hint for data_dir improves code readability and maintainability"
  },
  {
    "line": 178,
    "text": "        time_length: int = len(time_index)",
    "annotation": "\u2705 Best Practice: Calling super().__init__() ensures proper initialization of the base class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      62,
      13664,
      25,
      493,
      796,
      18896,
      7,
      2435,
      62,
      9630,
      8
    ],
    "start_token": 976,
    "end_token": 995,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      2208,
      22446,
      834,
      15003,
      834,
      3419,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398
    ],
    "label": "best_practice",
    "reason": "Calling super().__init__() ensures proper initialization of the base class"
  },
  {
    "line": 179,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing a directory path in an instance variable is a common pattern",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 995,
    "end_token": 995,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      257,
      8619,
      3108,
      287,
      281,
      4554,
      7885,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Storing a directory path in an instance variable is a common pattern"
  },
  {
    "line": 179,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hints for parameters and return type improve code readability and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 995,
    "end_token": 995,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      20269,
      329,
      10007,
      290,
      1441,
      2099,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hints for parameters and return type improve code readability and maintainability"
  },
  {
    "line": 186,
    "text": "        except (IndexError, KeyError):",
    "annotation": "\ud83e\udde0 ML Signal: Function calls with specific parameters can indicate usage patterns for ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      357,
      15732,
      12331,
      11,
      7383,
      12331,
      2599
    ],
    "start_token": 995,
    "end_token": 1010,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      3848,
      351,
      2176,
      10007,
      460,
      7603,
      8748,
      7572,
      329,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Function calls with specific parameters can indicate usage patterns for ML models"
  },
  {
    "line": 186,
    "text": "        except (IndexError, KeyError):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of self indicates this function is a method of a class, which is useful for class-based pattern recognition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      357,
      15732,
      12331,
      11,
      7383,
      12331,
      2599
    ],
    "start_token": 1010,
    "end_token": 1025,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2116,
      9217,
      428,
      2163,
      318,
      257,
      2446,
      286,
      257,
      1398,
      11,
      543,
      318,
      4465,
      329,
      1398,
      12,
      3106,
      3912,
      9465
    ],
    "label": "ml_signal",
    "reason": "Usage of self indicates this function is a method of a class, which is useful for class-based pattern recognition"
  },
  {
    "line": 191,
    "text": "            proc_yesterday = proc.to_numpy()[time_length * feature_dim :].reshape((time_length, feature_dim))",
    "annotation": "\ud83e\udde0 ML Signal: Passing parameters to functions can be used to understand data flow and dependencies",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13834,
      62,
      8505,
      6432,
      796,
      13834,
      13,
      1462,
      62,
      77,
      32152,
      3419,
      58,
      2435,
      62,
      13664,
      1635,
      3895,
      62,
      27740,
      1058,
      4083,
      3447,
      1758,
      19510,
      2435,
      62,
      13664,
      11,
      3895,
      62,
      27740,
      4008
    ],
    "start_token": 1025,
    "end_token": 1069,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      46389,
      10007,
      284,
      5499,
      460,
      307,
      973,
      284,
      1833,
      1366,
      5202,
      290,
      20086
    ],
    "label": "ml_signal",
    "reason": "Passing parameters to functions can be used to understand data flow and dependencies"
  },
  {
    "line": 193,
    "text": "            proc_yesterday = pd.DataFrame(proc_yesterday, index=time_index, columns=cnames)",
    "annotation": "\u2705 Best Practice: Use of default arguments for start_time and end_time improves function flexibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13834,
      62,
      8505,
      6432,
      796,
      279,
      67,
      13,
      6601,
      19778,
      7,
      36942,
      62,
      8505,
      6432,
      11,
      6376,
      28,
      2435,
      62,
      9630,
      11,
      15180,
      28,
      66,
      14933,
      8
    ],
    "start_token": 1069,
    "end_token": 1107,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      7159,
      329,
      923,
      62,
      2435,
      290,
      886,
      62,
      2435,
      19575,
      2163,
      13688,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default arguments for start_time and end_time improves function flexibility."
  },
  {
    "line": 200,
    "text": "    def __repr__(self) -> str:",
    "annotation": "\u2705 Best Practice: Use of default values for start_time and end_time ensures they are always initialized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      260,
      1050,
      834,
      7,
      944,
      8,
      4613,
      965,
      25
    ],
    "start_token": 1107,
    "end_token": 1121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      3815,
      329,
      923,
      62,
      2435,
      290,
      886,
      62,
      2435,
      19047,
      484,
      389,
      1464,
      23224,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default values for start_time and end_time ensures they are always initialized."
  },
  {
    "line": 202,
    "text": "            return f\"{self.__class__.__name__}({self.today}, {self.yesterday})\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on order_path being a valid Path object.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      277,
      1,
      90,
      944,
      13,
      834,
      4871,
      834,
      13,
      834,
      3672,
      834,
      92,
      15090,
      944,
      13,
      40838,
      5512,
      1391,
      944,
      13,
      8505,
      6432,
      92,
      16725
    ],
    "start_token": 1121,
    "end_token": 1158,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      1502,
      62,
      6978,
      852,
      257,
      4938,
      10644,
      2134,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on order_path being a valid Path object."
  },
  {
    "line": 205,
    "text": "@lru_cache(maxsize=100)  # 100 * 50K = 5MB",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Unchecked use of pd.read_pickle can lead to code execution if the file is malicious.",
    "confidence": 0.5,
    "tokens": [
      31,
      75,
      622,
      62,
      23870,
      7,
      9806,
      7857,
      28,
      3064,
      8,
      220,
      1303,
      1802,
      1635,
      2026,
      42,
      796,
      642,
      10744
    ],
    "start_token": 1158,
    "end_token": 1178,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      791,
      26752,
      779,
      286,
      279,
      67,
      13,
      961,
      62,
      27729,
      293,
      460,
      1085,
      284,
      2438,
      9706,
      611,
      262,
      2393,
      318,
      17412,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Unchecked use of pd.read_pickle can lead to code execution if the file is malicious."
  },
  {
    "line": 210,
    "text": "    deal_price: DealPriceType = \"close\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Unchecked use of pd.read_pickle can lead to code execution if the file is malicious.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1730,
      62,
      20888,
      25,
      15138,
      18124,
      6030,
      796,
      366,
      19836,
      1600
    ],
    "start_token": 1178,
    "end_token": 1192,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      791,
      26752,
      779,
      286,
      279,
      67,
      13,
      961,
      62,
      27729,
      293,
      460,
      1085,
      284,
      2438,
      9706,
      611,
      262,
      2393,
      318,
      17412,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Unchecked use of pd.read_pickle can lead to code execution if the file is malicious."
  },
  {
    "line": 213,
    "text": "    return SimpleIntradayBacktestData(data_dir, stock_id, date, deal_price, order_dir)",
    "annotation": "\u2705 Best Practice: Use of pd.concat to combine DataFrames is efficient and clear.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      17427,
      5317,
      6335,
      323,
      7282,
      9288,
      6601,
      7,
      7890,
      62,
      15908,
      11,
      4283,
      62,
      312,
      11,
      3128,
      11,
      1730,
      62,
      20888,
      11,
      1502,
      62,
      15908,
      8
    ],
    "start_token": 1192,
    "end_token": 1222,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      1102,
      9246,
      284,
      12082,
      6060,
      35439,
      318,
      6942,
      290,
      1598,
      13
    ],
    "label": "best_practice",
    "reason": "Use of pd.concat to combine DataFrames is efficient and clear."
  },
  {
    "line": 215,
    "text": "",
    "annotation": "\u2705 Best Practice: Resetting index ensures DataFrame integrity after concatenation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1222,
    "end_token": 1222,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      6376,
      19047,
      6060,
      19778,
      11540,
      706,
      1673,
      36686,
      341,
      13
    ],
    "label": "best_practice",
    "reason": "Resetting index ensures DataFrame integrity after concatenation."
  },
  {
    "line": 217,
    "text": "    cache=cachetools.LRUCache(100),  # 100 * 50K = 5MB",
    "annotation": "\u2705 Best Practice: Renaming columns for consistency improves code readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      12940,
      28,
      66,
      330,
      3202,
      10141,
      13,
      35972,
      9598,
      4891,
      7,
      3064,
      828,
      220,
      1303,
      1802,
      1635,
      2026,
      42,
      796,
      642,
      10744
    ],
    "start_token": 1222,
    "end_token": 1247,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      3723,
      15180,
      329,
      15794,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Renaming columns for consistency improves code readability."
  },
  {
    "line": 217,
    "text": "    cache=cachetools.LRUCache(100),  # 100 * 50K = 5MB",
    "annotation": "\u2705 Best Practice: Converting to datetime ensures correct data type for time operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      12940,
      28,
      66,
      330,
      3202,
      10141,
      13,
      35972,
      9598,
      4891,
      7,
      3064,
      828,
      220,
      1303,
      1802,
      1635,
      2026,
      42,
      796,
      642,
      10744
    ],
    "start_token": 1247,
    "end_token": 1272,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      284,
      4818,
      8079,
      19047,
      3376,
      1366,
      2099,
      329,
      640,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Converting to datetime ensures correct data type for time operations."
  },
  {
    "line": 226,
    "text": ") -> BaseIntradayProcessedData:",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of creating Order objects from DataFrame rows.",
    "confidence": 1.0,
    "tokens": [
      8,
      4613,
      7308,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      25
    ],
    "start_token": 1272,
    "end_token": 1282,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4441,
      8284,
      5563,
      422,
      6060,
      19778,
      15274,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of creating Order objects from DataFrame rows."
  },
  {
    "line": 226,
    "text": ") -> BaseIntradayProcessedData:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes row[\"order_type\"] is always a valid integer.",
    "confidence": 0.5,
    "tokens": [
      8,
      4613,
      7308,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      25
    ],
    "start_token": 1282,
    "end_token": 1292,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      5752,
      14692,
      2875,
      62,
      4906,
      8973,
      318,
      1464,
      257,
      4938,
      18253,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes row[\"order_type\"] is always a valid integer."
  },
  {
    "line": 226,
    "text": ") -> BaseIntradayProcessedData:",
    "annotation": "\u2705 Best Practice: Use of replace to adjust datetime is clear and concise.",
    "confidence": 1.0,
    "tokens": [
      8,
      4613,
      7308,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      25
    ],
    "start_token": 1292,
    "end_token": 1302,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6330,
      284,
      4532,
      4818,
      8079,
      318,
      1598,
      290,
      35327,
      13
    ],
    "label": "best_practice",
    "reason": "Use of replace to adjust datetime is clear and concise."
  }
]
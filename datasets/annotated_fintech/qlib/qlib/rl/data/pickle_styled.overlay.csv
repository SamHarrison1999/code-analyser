annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of lru_cache to optimize repeated function calls by caching results.,"[26486, 227, 6705, 19939, 25, 5765, 286, 300, 622, 62, 23870, 284, 27183, 5100, 2163, 3848, 416, 40918, 2482, 13]",1.0,0,best_practice,11,Use of lru_cache to optimize repeated function calls by caching results.,,0,,[]
‚úÖ Best Practice: Use of pathlib for file path operations improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3108, 8019, 329, 2393, 3108, 4560, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,27,best_practice,13,Use of pathlib for file path operations improves code readability and maintainability.,,0,See `PEP 574 <https://peps.python.org/pep-0574/>`__ for details.,"[6214, 4600, 47, 8905, 642, 4524, 1279, 5450, 1378, 431, 862, 13, 29412, 13, 2398, 14, 431, 79, 12, 2713, 4524, 15913, 63, 834, 329, 3307, 13]"
‚úÖ Best Practice: Use of Literal for type hinting improves code readability and reduces errors.,"[26486, 227, 6705, 19939, 25, 5765, 286, 25659, 1691, 329, 2099, 9254, 278, 19575, 2438, 1100, 1799, 290, 12850, 8563, 13]",0.5,36,best_practice,22,Use of Literal for type hinting improves code readability and reduces errors.,,27,from functools import lru_cache,"[6738, 1257, 310, 10141, 1330, 300, 622, 62, 23870]"
‚úÖ Best Practice: Consider using a more descriptive function name for clarity,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 517, 35644, 2163, 1438, 329, 16287]",0.5,41,best_practice,27,Consider using a more descriptive function name for clarity,,36,import numpy as np,"[11748, 299, 32152, 355, 45941]"
‚úÖ Best Practice: Use consistent ordering of return statements for readability,"[26486, 227, 6705, 19939, 25, 5765, 6414, 16216, 286, 1441, 6299, 329, 1100, 1799]",0.5,50,best_practice,29,Use consistent ordering of return statements for readability,,41,from cachetools.keys import hashkey,"[6738, 40428, 3202, 10141, 13, 13083, 1330, 12234, 2539]"
‚úÖ Best Practice: Use consistent ordering of return statements for readability,"[26486, 227, 6705, 19939, 25, 5765, 6414, 16216, 286, 1441, 6299, 329, 1100, 1799]",0.5,64,best_practice,49,Use consistent ordering of return statements for readability,,50,"            ""$close"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17971, 19836, 1600]"
‚úÖ Best Practice: Use consistent ordering of return statements for readability,"[26486, 227, 6705, 19939, 25, 5765, 6414, 16216, 286, 1441, 6299, 329, 1100, 1799]",0.5,78,best_practice,52,Use consistent ordering of return statements for readability,,64,"            ""$ask"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17971, 2093, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure if the exception message is exposed to users,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 611, 262, 6631, 3275, 318, 7362, 284, 2985]",0.5,94,sast_risk,55,Potential information disclosure if the exception message is exposed to users,Low,78,"            ""$bidV1"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17971, 14065, 53, 16, 1600]"
‚úÖ Best Practice: Use of lru_cache to cache results and improve performance for repeated calls,"[26486, 227, 6705, 19939, 25, 5765, 286, 300, 622, 62, 23870, 284, 12940, 2482, 290, 2987, 2854, 329, 5100, 3848]",1.0,108,best_practice,52,Use of lru_cache to cache results and improve performance for repeated calls,,94,"            ""$ask"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17971, 2093, 1600]"
üß† ML Signal: Checking for file existence is a common pattern in file handling,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 2393, 6224, 318, 257, 2219, 3912, 287, 2393, 9041]",0.5,123,ml_signal,58,Checking for file existence is a common pattern in file handling,,108,"            ""$askV"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17971, 2093, 53, 1600]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic FileNotFoundError without logging the error,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 9220, 3673, 21077, 12331, 1231, 18931, 262, 4049]",1.0,139,sast_risk,61,Raising a generic FileNotFoundError without logging the error,Low,123,"            ""$askV5"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17971, 2093, 53, 20, 1600]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError without logging the error,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 1231, 18931, 262, 4049]",1.0,147,sast_risk,63,Raising a generic ValueError without logging the error,Low,139,    if shape == 6:,"[220, 220, 220, 611, 5485, 6624, 718, 25]"
‚úÖ Best Practice: Use of lru_cache to cache results and improve performance for repeated calls,"[26486, 227, 6705, 19939, 25, 5765, 286, 300, 622, 62, 23870, 284, 12940, 2482, 290, 2987, 2854, 329, 5100, 3848]",1.0,147,best_practice,68,Use of lru_cache to cache results and improve performance for repeated calls,,147,,[]
‚úÖ Best Practice: Type hint for the return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 329, 262, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,156,best_practice,65,Type hint for the return value improves code readability and maintainability,,147,    elif shape == 5:,"[220, 220, 220, 1288, 361, 5485, 6624, 642, 25]"
"üß† ML Signal: Use of pandas to read pickle files, indicating data processing or analysis","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 284, 1100, 2298, 293, 3696, 11, 12739, 1366, 7587, 393, 3781]",1.0,175,ml_signal,67,"Use of pandas to read pickle files, indicating data processing or analysis",,156,"    raise ValueError(f""Unrecognized data shape: {shape}"")","[220, 220, 220, 5298, 11052, 12331, 7, 69, 1, 3118, 26243, 1143, 1366, 5485, 25, 1391, 43358, 92, 4943]"
"üß† ML Signal: Capturing index names for later use, indicating data manipulation","[8582, 100, 254, 10373, 26484, 25, 6790, 870, 6376, 3891, 329, 1568, 779, 11, 12739, 1366, 17512]",1.0,175,ml_signal,69,"Capturing index names for later use, indicating data manipulation",,175,,[]
"üß† ML Signal: Resetting index, common in data preprocessing","[8582, 100, 254, 10373, 26484, 25, 30027, 889, 6376, 11, 2219, 287, 1366, 662, 36948]",1.0,194,ml_signal,71,"Resetting index, common in data preprocessing",,175,"    suffix_list = ["".pkl"", "".pkl.backtest""]","[220, 220, 220, 35488, 62, 4868, 796, 685, 1911, 79, 41582, 1600, 27071, 79, 41582, 13, 1891, 9288, 8973]"
"üß† ML Signal: Checking for specific column names, indicating pattern-based data processing","[8582, 100, 254, 10373, 26484, 25, 39432, 329, 2176, 5721, 3891, 11, 12739, 3912, 12, 3106, 1366, 7587]",1.0,224,ml_signal,74,"Checking for specific column names, indicating pattern-based data processing",,194,        path = filename_without_suffix.parent / (filename_without_suffix.name + suffix),"[220, 220, 220, 220, 220, 220, 220, 3108, 796, 29472, 62, 19419, 62, 37333, 844, 13, 8000, 1220, 357, 34345, 62, 19419, 62, 37333, 844, 13, 3672, 1343, 35488, 8]"
"üß† ML Signal: Converting columns to datetime, a common preprocessing step in time series analysis","[8582, 100, 254, 10373, 26484, 25, 35602, 889, 15180, 284, 4818, 8079, 11, 257, 2219, 662, 36948, 2239, 287, 640, 2168, 3781]",1.0,241,ml_signal,76,"Converting columns to datetime, a common preprocessing step in time series analysis",,224,            paths.append(path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13532, 13, 33295, 7, 6978, 8]"
"üß† ML Signal: Setting index back to original, indicating data transformation","[8582, 100, 254, 10373, 26484, 25, 25700, 6376, 736, 284, 2656, 11, 12739, 1366, 13389]",1.0,258,ml_signal,76,"Setting index back to original, indicating data transformation",,241,            paths.append(path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13532, 13, 33295, 7, 6978, 8]"
‚úÖ Best Practice: Class docstring provides a brief description of the class purpose,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007]",0.5,275,best_practice,76,Class docstring provides a brief description of the class purpose,,258,            paths.append(path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13532, 13, 33295, 7, 6978, 8]"
‚úÖ Best Practice: Use of super() to initialize the parent class,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 41216, 262, 2560, 1398]",0.5,295,best_practice,84,Use of super() to initialize the parent class,,275,@lru_cache(maxsize=10)  # 10 * 40M = 400MB,"[31, 75, 622, 62, 23870, 7, 9806, 7857, 28, 940, 8, 220, 1303, 838, 1635, 2319, 44, 796, 7337, 10744]"
‚ö†Ô∏è SAST Risk (Low): Potential for path traversal if data_dir is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3108, 33038, 282, 611, 1366, 62, 15908, 318, 2836, 12, 14401]",0.5,320,sast_risk,86,Potential for path traversal if data_dir is user-controlled,Low,295,    df = pd.read_pickle(_find_pickle(filename_without_suffix)),"[220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 27729, 293, 28264, 19796, 62, 27729, 293, 7, 34345, 62, 19419, 62, 37333, 844, 4008]"
üß† ML Signal: Use of pandas for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 329, 1366, 17512]",0.5,320,ml_signal,88,Use of pandas for data manipulation,,320,,[]
üß† ML Signal: Storing data in a DataFrame for further analysis,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 1366, 287, 257, 6060, 19778, 329, 2252, 3781]",0.5,338,ml_signal,90,Storing data in a DataFrame for further analysis,,320,"    for date_col_name in [""date"", ""datetime""]:","[220, 220, 220, 329, 3128, 62, 4033, 62, 3672, 287, 14631, 4475, 1600, 366, 19608, 8079, 1, 5974]"
üß† ML Signal: Use of a specific deal price type for trading strategy,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 1730, 2756, 2099, 329, 7313, 4811]",0.5,374,ml_signal,92,Use of a specific deal price type for trading strategy,,338,            df[date_col_name] = pd.to_datetime(df[date_col_name]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 4475, 62, 4033, 62, 3672, 60, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 58, 4475, 62, 4033, 62, 3672, 12962]"
"üß† ML Signal: Storing order direction, which could influence trading decisions","[8582, 100, 254, 10373, 26484, 25, 520, 3255, 1502, 4571, 11, 543, 714, 4588, 7313, 5370]",0.5,374,ml_signal,94,"Storing order direction, which could influence trading decisions",,374,,[]
‚úÖ Best Practice: Use of __repr__ method to provide a string representation of the object,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 260, 1050, 834, 2446, 284, 2148, 257, 4731, 10552, 286, 262, 2134]",1.0,392,best_practice,90,Use of __repr__ method to provide a string representation of the object,,374,"    for date_col_name in [""date"", ""datetime""]:","[220, 220, 220, 329, 3128, 62, 4033, 62, 3672, 287, 14631, 4475, 1600, 366, 19608, 8079, 1, 5974]"
‚úÖ Best Practice: Use of pd.option_context to temporarily set pandas options,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 18076, 62, 22866, 284, 13413, 900, 19798, 292, 3689]",1.0,428,best_practice,92,Use of pd.option_context to temporarily set pandas options,,392,            df[date_col_name] = pd.to_datetime(df[date_col_name]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 4475, 62, 4033, 62, 3672, 60, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 58, 4475, 62, 4033, 62, 3672, 12962]"
üß† ML Signal: Use of f-string for string formatting,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 4731, 33313]",1.0,428,ml_signal,94,Use of f-string for string formatting,,428,,[]
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,444,best_practice,93,Type hinting improves code readability and maintainability,,428,    df = df.set_index(index_cols),"[220, 220, 220, 47764, 796, 47764, 13, 2617, 62, 9630, 7, 9630, 62, 4033, 82, 8]"
üß† ML Signal: Usage of __len__ indicates the object is expected to behave like a collection,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11593, 11925, 834, 9217, 262, 2134, 318, 2938, 284, 17438, 588, 257, 4947]",0.5,449,ml_signal,95,Usage of __len__ indicates the object is expected to behave like a collection,,444,    return df,"[220, 220, 220, 1441, 47764]"
"‚ö†Ô∏è SAST Risk (Low): Assumes self.data is a collection; if not, this will raise an error","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 2116, 13, 7890, 318, 257, 4947, 26, 611, 407, 11, 428, 481, 5298, 281, 4049]",0.5,449,sast_risk,96,"Assumes self.data is a collection; if not, this will raise an error",Low,449,,[]
üß† ML Signal: Conditional logic based on `deal_price_type` and `order_dir` indicates decision-making patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 4600, 31769, 62, 20888, 62, 4906, 63, 290, 4600, 2875, 62, 15908, 63, 9217, 2551, 12, 8601, 7572, 13]",1.0,466,ml_signal,98,Conditional logic based on `deal_price_type` and `order_dir` indicates decision-making patterns.,,449,class SimpleIntradayBacktestData(BaseIntradayBacktestData):,"[4871, 17427, 5317, 6335, 323, 7282, 9288, 6601, 7, 14881, 5317, 6335, 323, 7282, 9288, 6601, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Potential for `None` value in `order_dir` leading to exception.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 4600, 14202, 63, 1988, 287, 4600, 2875, 62, 15908, 63, 3756, 284, 6631, 13]",1.0,466,sast_risk,100,Potential for `None` value in `order_dir` leading to exception.,Medium,466,,[]
‚ö†Ô∏è SAST Risk (Low): Use of f-string with user-controlled `deal_price_type` could lead to information disclosure.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 277, 12, 8841, 351, 2836, 12, 14401, 4600, 31769, 62, 20888, 62, 4906, 63, 714, 1085, 284, 1321, 13019, 13]",0.5,466,sast_risk,110,Use of f-string with user-controlled `deal_price_type` could lead to information disclosure.,Low,466,,[]
üß† ML Signal: Access pattern to `self.data` using dynamic column names.,"[8582, 100, 254, 10373, 26484, 25, 8798, 3912, 284, 4600, 944, 13, 7890, 63, 1262, 8925, 5721, 3891, 13]",1.0,495,ml_signal,112,Access pattern to `self.data` using dynamic column names.,,466,"        backtest = backtest.loc[pd.IndexSlice[stock_id, :, date]]","[220, 220, 220, 220, 220, 220, 220, 736, 9288, 796, 736, 9288, 13, 17946, 58, 30094, 13, 15732, 11122, 501, 58, 13578, 62, 312, 11, 1058, 11, 3128, 11907]"
‚úÖ Best Practice: Use of `replace` and `fillna` for handling missing data.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4600, 33491, 63, 290, 4600, 20797, 2616, 63, 329, 9041, 4814, 1366, 13]",1.0,511,best_practice,119,Use of `replace` and `fillna` for handling missing data.,,495,        self.order_dir = order_dir,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2875, 62, 15908, 796, 1502, 62, 15908]"
‚úÖ Best Practice: Include type hints for method return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2446, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,530,best_practice,117,Include type hints for method return type for better readability and maintainability,,511,        self.data: pd.DataFrame = backtest,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7890, 25, 279, 67, 13, 6601, 19778, 796, 736, 9288]"
"üß† ML Signal: Accessing a specific column from a DataFrame, indicating a pattern of data manipulation","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 2176, 5721, 422, 257, 6060, 19778, 11, 12739, 257, 3912, 286, 1366, 17512]",1.0,530,ml_signal,120,"Accessing a specific column from a DataFrame, indicating a pattern of data manipulation",,530,,[]
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,530,best_practice,120,Type hinting improves code readability and maintainability,,530,,[]
üß† ML Signal: Usage of type casting can indicate potential type mismatches,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2099, 13092, 460, 7603, 2785, 2099, 32691, 20981]",1.0,575,ml_signal,122,Usage of type casting can indicate potential type mismatches,,530,"        with pd.option_context(""memory_usage"", False, ""display.max_info_columns"", 1, ""display.large_repr"", ""info""):","[220, 220, 220, 220, 220, 220, 220, 351, 279, 67, 13, 18076, 62, 22866, 7203, 31673, 62, 26060, 1600, 10352, 11, 366, 13812, 13, 9806, 62, 10951, 62, 28665, 82, 1600, 352, 11, 366, 13812, 13, 11664, 62, 260, 1050, 1600, 366, 10951, 1, 2599]"
‚úÖ Best Practice: Class docstring provides a brief description of the class purpose.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007, 13]",1.0,575,best_practice,124,Class docstring provides a brief description of the class purpose.,,575,,[]
‚úÖ Best Practice: Use of Path to handle file paths ensures cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 284, 5412, 2393, 13532, 19047, 3272, 12, 24254, 17764, 13]",0.5,595,best_practice,132,Use of Path to handle file paths ensures cross-platform compatibility.,,575,            if self.order_dir is None:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 2875, 62, 15908, 318, 6045, 25]"
üß† ML Signal: Inferring column names based on feature dimension indicates dynamic data handling.,"[8582, 100, 254, 10373, 26484, 25, 554, 2232, 1806, 5721, 3891, 1912, 319, 3895, 15793, 9217, 8925, 1366, 9041, 13]",0.5,619,ml_signal,134,Inferring column names based on feature dimension indicates dynamic data handling.,,595,            if self.order_dir == OrderDir.SELL:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 2875, 62, 15908, 6624, 8284, 35277, 13, 5188, 3069, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential for KeyError if stock_id or date is not in the index.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 7383, 12331, 611, 4283, 62, 312, 393, 3128, 318, 407, 287, 262, 6376, 13]",0.5,639,sast_risk,138,Potential for KeyError if stock_id or date is not in the index.,Low,619,"        elif self.deal_price_type == ""close"":","[220, 220, 220, 220, 220, 220, 220, 1288, 361, 2116, 13, 31769, 62, 20888, 62, 4906, 6624, 366, 19836, 1298]"
‚ö†Ô∏è SAST Risk (Low): AssertionError could be raised if data shape is unexpected.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 12331, 714, 307, 4376, 611, 1366, 5485, 318, 10059, 13]",0.5,656,sast_risk,139,AssertionError could be raised if data shape is unexpected.,Low,639,"            col = ""$close0""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 951, 796, 17971, 19836, 15, 1]"
‚úÖ Best Practice: Use of list comprehension for renaming columns is concise and readable.,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 35915, 329, 8851, 3723, 15180, 318, 35327, 290, 31744, 13]",0.5,656,best_practice,143,Use of list comprehension for renaming columns is concise and readable.,,656,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for KeyError if stock_id or date is not in the index.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 7383, 12331, 611, 4283, 62, 312, 393, 3128, 318, 407, 287, 262, 6376, 13]",0.5,679,sast_risk,146,Potential for KeyError if stock_id or date is not in the index.,Low,656,"                fill_col = ""$ask0""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6070, 62, 4033, 796, 17971, 2093, 15, 1]"
‚ö†Ô∏è SAST Risk (Low): AssertionError could be raised if data shape is unexpected.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 12331, 714, 307, 4376, 611, 1366, 5485, 318, 10059, 13]",0.5,702,sast_risk,148,AssertionError could be raised if data shape is unexpected.,Low,679,"                fill_col = ""$bid0""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6070, 62, 4033, 796, 17971, 14065, 15, 1]"
‚úÖ Best Practice: Reshaping numpy arrays for structured data processing.,"[26486, 227, 6705, 19939, 25, 1874, 71, 9269, 299, 32152, 26515, 329, 20793, 1366, 7587, 13]",0.5,702,best_practice,150,Reshaping numpy arrays for structured data processing.,,702,,[]
‚úÖ Best Practice: Creating DataFrames with explicit index and columns improves clarity.,"[26486, 227, 6705, 19939, 25, 30481, 6060, 35439, 351, 7952, 6376, 290, 15180, 19575, 16287, 13]",0.5,718,best_practice,153,Creating DataFrames with explicit index and columns improves clarity.,,702,    def get_volume(self) -> pd.Series:,"[220, 220, 220, 825, 651, 62, 29048, 7, 944, 8, 4613, 279, 67, 13, 27996, 25]"
‚ö†Ô∏è SAST Risk (Low): AssertionError could be raised if data shape is unexpected.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 12331, 714, 307, 4376, 611, 1366, 5485, 318, 10059, 13]",0.5,734,sast_risk,155,AssertionError could be raised if data shape is unexpected.,Low,718,"        return self.data[""$volume0""]","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 7890, 14692, 3, 29048, 15, 8973]"
‚ö†Ô∏è SAST Risk (Low): AssertionError could be raised if data shape is unexpected.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 12331, 714, 307, 4376, 611, 1366, 5485, 318, 10059, 13]",0.5,734,sast_risk,160,AssertionError could be raised if data shape is unexpected.,Low,734,,[]
‚úÖ Best Practice: Using pd.option_context to temporarily set pandas options for a specific block of code,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 18076, 62, 22866, 284, 13413, 900, 19798, 292, 3689, 329, 257, 2176, 2512, 286, 2438]",1.0,734,best_practice,152,Using pd.option_context to temporarily set pandas options for a specific block of code,,734,,[]
‚úÖ Best Practice: Using f-string for a more readable and efficient string formatting,"[26486, 227, 6705, 19939, 25, 8554, 277, 12, 8841, 329, 257, 517, 31744, 290, 6942, 4731, 33313]",0.5,750,best_practice,153,Using f-string for a more readable and efficient string formatting,,734,    def get_volume(self) -> pd.Series:,"[220, 220, 220, 825, 651, 62, 29048, 7, 944, 8, 4613, 279, 67, 13, 27996, 25]"
üß† ML Signal: Use of lru_cache decorator indicates caching behavior which can be a pattern for ML models,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 300, 622, 62, 23870, 11705, 1352, 9217, 40918, 4069, 543, 460, 307, 257, 3912, 329, 10373, 4981]",0.5,766,ml_signal,155,Use of lru_cache decorator indicates caching behavior which can be a pattern for ML models,,750,"        return self.data[""$volume0""]","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 7890, 14692, 3, 29048, 15, 8973]"
‚úÖ Best Practice: Using lru_cache to optimize performance by caching results of expensive function calls,"[26486, 227, 6705, 19939, 25, 8554, 300, 622, 62, 23870, 284, 27183, 2854, 416, 40918, 2482, 286, 5789, 2163, 3848]",0.5,782,best_practice,155,Using lru_cache to optimize performance by caching results of expensive function calls,,766,"        return self.data[""$volume0""]","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 7890, 14692, 3, 29048, 15, 8973]"
‚úÖ Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,798,best_practice,155,Consider adding type hints for the function parameters and return type for better readability and maintainability.,,782,"        return self.data[""$volume0""]","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 7890, 14692, 3, 29048, 15, 8973]"
"üß† ML Signal: Function returns an instance of a specific class, indicating a pattern of object creation.","[8582, 100, 254, 10373, 26484, 25, 15553, 5860, 281, 4554, 286, 257, 2176, 1398, 11, 12739, 257, 3912, 286, 2134, 6282, 13]",0.5,823,ml_signal,162,"Function returns an instance of a specific class, indicating a pattern of object creation.",,798,"    """"""Subclass of IntradayProcessedData. Used to handle pickle-styled data.""""""","[220, 220, 220, 37227, 7004, 4871, 286, 2558, 6335, 323, 18709, 276, 6601, 13, 16718, 284, 5412, 2298, 293, 12, 34365, 992, 1366, 526, 15931]"
‚úÖ Best Practice: Using caching to improve performance by storing results of expensive function calls.,"[26486, 227, 6705, 19939, 25, 8554, 40918, 284, 2987, 2854, 416, 23069, 2482, 286, 5789, 2163, 3848, 13]",1.0,836,best_practice,167,Using caching to improve performance by storing results of expensive function calls.,,823,"        stock_id: str,","[220, 220, 220, 220, 220, 220, 220, 4283, 62, 312, 25, 965, 11]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the cached data does not contain sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 39986, 1366, 857, 407, 3994, 8564, 1321, 13]",0.5,849,sast_risk,167,Ensure that the cached data does not contain sensitive information.,Low,836,"        stock_id: str,","[220, 220, 220, 220, 220, 220, 220, 4283, 62, 312, 25, 965, 11]"
‚úÖ Best Practice: LRUCache is used to limit memory usage by discarding least recently used items.,"[26486, 227, 6705, 19939, 25, 37491, 9598, 4891, 318, 973, 284, 4179, 4088, 8748, 416, 1221, 13493, 1551, 2904, 973, 3709, 13]",1.0,862,best_practice,167,LRUCache is used to limit memory usage by discarding least recently used items.,,849,"        stock_id: str,","[220, 220, 220, 220, 220, 220, 220, 4283, 62, 312, 25, 965, 11]"
‚úÖ Best Practice: Custom key function for caching to ensure uniqueness based on specific parameters.,"[26486, 227, 6705, 19939, 25, 8562, 1994, 2163, 329, 40918, 284, 4155, 49650, 1912, 319, 2176, 10007, 13]",0.5,869,best_practice,171,Custom key function for caching to ensure uniqueness based on specific parameters.,,862,    ) -> None:,"[220, 220, 220, 1267, 4613, 6045, 25]"
üß† ML Signal: Function signature with multiple parameters indicating a complex operation,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 3294, 10007, 12739, 257, 3716, 4905]",0.5,882,ml_signal,167,Function signature with multiple parameters indicating a complex operation,,869,"        stock_id: str,","[220, 220, 220, 220, 220, 220, 220, 4283, 62, 312, 25, 965, 11]"
‚úÖ Best Practice: Type hinting for parameters and return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,895,best_practice,167,Type hinting for parameters and return type improves code readability and maintainability,,882,"        stock_id: str,","[220, 220, 220, 220, 220, 220, 220, 4283, 62, 312, 25, 965, 11]"
üß† ML Signal: Direct instantiation and return of an object,"[8582, 100, 254, 10373, 26484, 25, 4128, 9113, 3920, 290, 1441, 286, 281, 2134]",1.0,922,ml_signal,176,Direct instantiation and return of an object,,895,        cnames = _infer_processed_data_column_names(feature_dim),"[220, 220, 220, 220, 220, 220, 220, 269, 14933, 796, 4808, 259, 2232, 62, 14681, 276, 62, 7890, 62, 28665, 62, 14933, 7, 30053, 62, 27740, 8]"
‚úÖ Best Practice: Returning an instance directly can improve code simplicity,"[26486, 227, 6705, 19939, 25, 42882, 281, 4554, 3264, 460, 2987, 2438, 21654]",0.5,922,best_practice,177,Returning an instance directly can improve code simplicity,,922,,[]
‚úÖ Best Practice: Class definition should include a docstring explaining its purpose and usage.,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 11170, 663, 4007, 290, 8748, 13]",0.5,949,best_practice,176,Class definition should include a docstring explaining its purpose and usage.,,922,        cnames = _infer_processed_data_column_names(feature_dim),"[220, 220, 220, 220, 220, 220, 220, 269, 14933, 796, 4808, 259, 2232, 62, 14681, 276, 62, 7890, 62, 28665, 62, 14933, 7, 30053, 62, 27740, 8]"
‚úÖ Best Practice: Use of type hint for data_dir improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1366, 62, 15908, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,976,best_practice,176,Use of type hint for data_dir improves code readability and maintainability,,949,        cnames = _infer_processed_data_column_names(feature_dim),"[220, 220, 220, 220, 220, 220, 220, 269, 14933, 796, 4808, 259, 2232, 62, 14681, 276, 62, 7890, 62, 28665, 62, 14933, 7, 30053, 62, 27740, 8]"
‚úÖ Best Practice: Calling super().__init__() ensures proper initialization of the base class,"[26486, 227, 6705, 19939, 25, 32677, 2208, 22446, 834, 15003, 834, 3419, 19047, 1774, 37588, 286, 262, 2779, 1398]",1.0,995,best_practice,178,Calling super().__init__() ensures proper initialization of the base class,,976,        time_length: int = len(time_index),"[220, 220, 220, 220, 220, 220, 220, 640, 62, 13664, 25, 493, 796, 18896, 7, 2435, 62, 9630, 8]"
üß† ML Signal: Storing a directory path in an instance variable is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 257, 8619, 3108, 287, 281, 4554, 7885, 318, 257, 2219, 3912]",0.5,995,ml_signal,179,Storing a directory path in an instance variable is a common pattern,,995,,[]
‚úÖ Best Practice: Type hints for parameters and return type improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 20269, 329, 10007, 290, 1441, 2099, 2987, 2438, 1100, 1799, 290, 5529, 1799]",0.5,995,best_practice,179,Type hints for parameters and return type improve code readability and maintainability,,995,,[]
üß† ML Signal: Function calls with specific parameters can indicate usage patterns for ML models,"[8582, 100, 254, 10373, 26484, 25, 15553, 3848, 351, 2176, 10007, 460, 7603, 8748, 7572, 329, 10373, 4981]",0.5,1010,ml_signal,186,Function calls with specific parameters can indicate usage patterns for ML models,,995,"        except (IndexError, KeyError):","[220, 220, 220, 220, 220, 220, 220, 2845, 357, 15732, 12331, 11, 7383, 12331, 2599]"
"üß† ML Signal: Usage of self indicates this function is a method of a class, which is useful for class-based pattern recognition","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 9217, 428, 2163, 318, 257, 2446, 286, 257, 1398, 11, 543, 318, 4465, 329, 1398, 12, 3106, 3912, 9465]",0.5,1025,ml_signal,186,"Usage of self indicates this function is a method of a class, which is useful for class-based pattern recognition",,1010,"        except (IndexError, KeyError):","[220, 220, 220, 220, 220, 220, 220, 2845, 357, 15732, 12331, 11, 7383, 12331, 2599]"
üß† ML Signal: Passing parameters to functions can be used to understand data flow and dependencies,"[8582, 100, 254, 10373, 26484, 25, 46389, 10007, 284, 5499, 460, 307, 973, 284, 1833, 1366, 5202, 290, 20086]",0.5,1069,ml_signal,191,Passing parameters to functions can be used to understand data flow and dependencies,,1025,"            proc_yesterday = proc.to_numpy()[time_length * feature_dim :].reshape((time_length, feature_dim))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13834, 62, 8505, 6432, 796, 13834, 13, 1462, 62, 77, 32152, 3419, 58, 2435, 62, 13664, 1635, 3895, 62, 27740, 1058, 4083, 3447, 1758, 19510, 2435, 62, 13664, 11, 3895, 62, 27740, 4008]"
‚úÖ Best Practice: Use of default arguments for start_time and end_time improves function flexibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 7159, 329, 923, 62, 2435, 290, 886, 62, 2435, 19575, 2163, 13688, 13]",0.5,1107,best_practice,193,Use of default arguments for start_time and end_time improves function flexibility.,,1069,"            proc_yesterday = pd.DataFrame(proc_yesterday, index=time_index, columns=cnames)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13834, 62, 8505, 6432, 796, 279, 67, 13, 6601, 19778, 7, 36942, 62, 8505, 6432, 11, 6376, 28, 2435, 62, 9630, 11, 15180, 28, 66, 14933, 8]"
‚úÖ Best Practice: Use of default values for start_time and end_time ensures they are always initialized.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 3815, 329, 923, 62, 2435, 290, 886, 62, 2435, 19047, 484, 389, 1464, 23224, 13]",0.5,1121,best_practice,200,Use of default values for start_time and end_time ensures they are always initialized.,,1107,    def __repr__(self) -> str:,"[220, 220, 220, 825, 11593, 260, 1050, 834, 7, 944, 8, 4613, 965, 25]"
‚ö†Ô∏è SAST Risk (Low): No validation on order_path being a valid Path object.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 1502, 62, 6978, 852, 257, 4938, 10644, 2134, 13]",0.5,1158,sast_risk,202,No validation on order_path being a valid Path object.,Low,1121,"            return f""{self.__class__.__name__}({self.today}, {self.yesterday})""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 277, 1, 90, 944, 13, 834, 4871, 834, 13, 834, 3672, 834, 92, 15090, 944, 13, 40838, 5512, 1391, 944, 13, 8505, 6432, 92, 16725]"
‚ö†Ô∏è SAST Risk (Medium): Unchecked use of pd.read_pickle can lead to code execution if the file is malicious.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 791, 26752, 779, 286, 279, 67, 13, 961, 62, 27729, 293, 460, 1085, 284, 2438, 9706, 611, 262, 2393, 318, 17412, 13]",0.5,1178,sast_risk,205,Unchecked use of pd.read_pickle can lead to code execution if the file is malicious.,Medium,1158,@lru_cache(maxsize=100)  # 100 * 50K = 5MB,"[31, 75, 622, 62, 23870, 7, 9806, 7857, 28, 3064, 8, 220, 1303, 1802, 1635, 2026, 42, 796, 642, 10744]"
‚ö†Ô∏è SAST Risk (Medium): Unchecked use of pd.read_pickle can lead to code execution if the file is malicious.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 791, 26752, 779, 286, 279, 67, 13, 961, 62, 27729, 293, 460, 1085, 284, 2438, 9706, 611, 262, 2393, 318, 17412, 13]",0.5,1192,sast_risk,210,Unchecked use of pd.read_pickle can lead to code execution if the file is malicious.,Medium,1178,"    deal_price: DealPriceType = ""close"",","[220, 220, 220, 1730, 62, 20888, 25, 15138, 18124, 6030, 796, 366, 19836, 1600]"
‚úÖ Best Practice: Use of pd.concat to combine DataFrames is efficient and clear.,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 1102, 9246, 284, 12082, 6060, 35439, 318, 6942, 290, 1598, 13]",0.5,1222,best_practice,213,Use of pd.concat to combine DataFrames is efficient and clear.,,1192,"    return SimpleIntradayBacktestData(data_dir, stock_id, date, deal_price, order_dir)","[220, 220, 220, 1441, 17427, 5317, 6335, 323, 7282, 9288, 6601, 7, 7890, 62, 15908, 11, 4283, 62, 312, 11, 3128, 11, 1730, 62, 20888, 11, 1502, 62, 15908, 8]"
‚úÖ Best Practice: Resetting index ensures DataFrame integrity after concatenation.,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 19047, 6060, 19778, 11540, 706, 1673, 36686, 341, 13]",0.5,1222,best_practice,215,Resetting index ensures DataFrame integrity after concatenation.,,1222,,[]
‚úÖ Best Practice: Renaming columns for consistency improves code readability.,"[26486, 227, 6705, 19939, 25, 7152, 3723, 15180, 329, 15794, 19575, 2438, 1100, 1799, 13]",0.5,1247,best_practice,217,Renaming columns for consistency improves code readability.,,1222,"    cache=cachetools.LRUCache(100),  # 100 * 50K = 5MB","[220, 220, 220, 12940, 28, 66, 330, 3202, 10141, 13, 35972, 9598, 4891, 7, 3064, 828, 220, 1303, 1802, 1635, 2026, 42, 796, 642, 10744]"
‚úÖ Best Practice: Converting to datetime ensures correct data type for time operations.,"[26486, 227, 6705, 19939, 25, 35602, 889, 284, 4818, 8079, 19047, 3376, 1366, 2099, 329, 640, 4560, 13]",0.5,1272,best_practice,217,Converting to datetime ensures correct data type for time operations.,,1247,"    cache=cachetools.LRUCache(100),  # 100 * 50K = 5MB","[220, 220, 220, 12940, 28, 66, 330, 3202, 10141, 13, 35972, 9598, 4891, 7, 3064, 828, 220, 1303, 1802, 1635, 2026, 42, 796, 642, 10744]"
üß† ML Signal: Pattern of creating Order objects from DataFrame rows.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4441, 8284, 5563, 422, 6060, 19778, 15274, 13]",1.0,1282,ml_signal,226,Pattern of creating Order objects from DataFrame rows.,,1272,) -> BaseIntradayProcessedData:,"[8, 4613, 7308, 5317, 6335, 323, 18709, 276, 6601, 25]"
"‚ö†Ô∏è SAST Risk (Low): Assumes row[""order_type""] is always a valid integer.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 5752, 14692, 2875, 62, 4906, 8973, 318, 1464, 257, 4938, 18253, 13]",0.5,1292,sast_risk,226,"Assumes row[""order_type""] is always a valid integer.",Low,1282,) -> BaseIntradayProcessedData:,"[8, 4613, 7308, 5317, 6335, 323, 18709, 276, 6601, 25]"
‚úÖ Best Practice: Use of replace to adjust datetime is clear and concise.,"[26486, 227, 6705, 19939, 25, 5765, 286, 6330, 284, 4532, 4818, 8079, 318, 1598, 290, 35327, 13]",1.0,1302,best_practice,226,Use of replace to adjust datetime is clear and concise.,,1292,) -> BaseIntradayProcessedData:,"[8, 4613, 7308, 5317, 6335, 323, 18709, 276, 6601, 25]"

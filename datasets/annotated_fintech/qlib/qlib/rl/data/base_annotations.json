[
  {
    "line": 4,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing pandas indicates data manipulation or analysis tasks",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      19798,
      292,
      9217,
      1366,
      17512,
      393,
      3781,
      8861
    ],
    "label": "ml_signal",
    "reason": "Importing pandas indicates data manipulation or analysis tasks"
  },
  {
    "line": 11,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of @abstractmethod indicates this is an abstract class method, enforcing implementation in subclasses.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 0,
    "end_token": 4,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      397,
      8709,
      24396,
      9217,
      428,
      318,
      281,
      12531,
      1398,
      2446,
      11,
      26587,
      7822,
      287,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @abstractmethod indicates this is an abstract class method, enforcing implementation in subclasses."
  },
  {
    "line": 11,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Implementing __repr__ is recommended for better debugging and logging.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 4,
    "end_token": 8,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48282,
      278,
      11593,
      260,
      1050,
      834,
      318,
      7151,
      329,
      1365,
      28769,
      290,
      18931,
      13
    ],
    "label": "best_practice",
    "reason": "Implementing __repr__ is recommended for better debugging and logging."
  },
  {
    "line": 12,
    "text": "    Raw market data that is often used in backtesting (thus called BacktestData).",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising NotImplementedError in __repr__ can lead to issues if the method is called unexpectedly.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      16089,
      1910,
      1366,
      326,
      318,
      1690,
      973,
      287,
      736,
      33407,
      357,
      26239,
      1444,
      5157,
      9288,
      6601,
      737
    ],
    "start_token": 8,
    "end_token": 28,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      287,
      11593,
      260,
      1050,
      834,
      460,
      1085,
      284,
      2428,
      611,
      262,
      2446,
      318,
      1444,
      25884,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising NotImplementedError in __repr__ can lead to issues if the method is called unexpectedly."
  },
  {
    "line": 15,
    "text": "    data type.",
    "annotation": "\u2705 Best Practice: Using @abstractmethod indicates this method must be overridden in subclasses.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      2099,
      13
    ],
    "start_token": 28,
    "end_token": 34,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2488,
      397,
      8709,
      24396,
      9217,
      428,
      2446,
      1276,
      307,
      23170,
      4651,
      287,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Using @abstractmethod indicates this method must be overridden in subclasses."
  },
  {
    "line": 15,
    "text": "    data type.",
    "annotation": "\u2705 Best Practice: Raising NotImplementedError in abstract methods is a common pattern to indicate that subclasses should implement this method.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      2099,
      13
    ],
    "start_token": 34,
    "end_token": 40,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      287,
      12531,
      5050,
      318,
      257,
      2219,
      3912,
      284,
      7603,
      326,
      850,
      37724,
      815,
      3494,
      428,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Raising NotImplementedError in abstract methods is a common pattern to indicate that subclasses should implement this method."
  },
  {
    "line": 18,
    "text": "    @abstractmethod",
    "annotation": "\u2705 Best Practice: Using @abstractmethod decorator indicates that this method must be implemented by subclasses, enhancing code clarity and design.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      397,
      8709,
      24396
    ],
    "start_token": 40,
    "end_token": 47,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2488,
      397,
      8709,
      24396,
      11705,
      1352,
      9217,
      326,
      428,
      2446,
      1276,
      307,
      9177,
      416,
      850,
      37724,
      11,
      27496,
      2438,
      16287,
      290,
      1486,
      13
    ],
    "label": "best_practice",
    "reason": "Using @abstractmethod decorator indicates that this method must be implemented by subclasses, enhancing code clarity and design."
  },
  {
    "line": 18,
    "text": "    @abstractmethod",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which may lead to runtime errors if called.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      397,
      8709,
      24396
    ],
    "start_token": 47,
    "end_token": 54,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      743,
      1085,
      284,
      19124,
      8563,
      611,
      1444,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which may lead to runtime errors if called."
  },
  {
    "line": 21,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @abstractmethod decorator indicates this method should be implemented by subclasses.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 54,
    "end_token": 54,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      397,
      8709,
      24396,
      11705,
      1352,
      9217,
      428,
      2446,
      815,
      307,
      9177,
      416,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @abstractmethod decorator indicates this method should be implemented by subclasses."
  },
  {
    "line": 21,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @abstractmethod decorator indicates this method should be implemented by subclasses",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 54,
    "end_token": 54,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      397,
      8709,
      24396,
      11705,
      1352,
      9217,
      428,
      2446,
      815,
      307,
      9177,
      416,
      850,
      37724
    ],
    "label": "best_practice",
    "reason": "Use of @abstractmethod decorator indicates this method should be implemented by subclasses"
  },
  {
    "line": 23,
    "text": "    def __len__(self) -> int:",
    "annotation": "\u2705 Best Practice: Method signature includes type hinting for return type, improving code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      11925,
      834,
      7,
      944,
      8,
      4613,
      493,
      25
    ],
    "start_token": 54,
    "end_token": 67,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      9877,
      3407,
      2099,
      9254,
      278,
      329,
      1441,
      2099,
      11,
      10068,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Method signature includes type hinting for return type, improving code readability and maintainability."
  },
  {
    "line": 25,
    "text": "",
    "annotation": "\u2705 Best Practice: Raising NotImplementedError is a clear way to indicate that this method should be overridden in a subclass.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 67,
    "end_token": 67,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      318,
      257,
      1598,
      835,
      284,
      7603,
      326,
      428,
      2446,
      815,
      307,
      23170,
      4651,
      287,
      257,
      47611,
      13
    ],
    "label": "best_practice",
    "reason": "Raising NotImplementedError is a clear way to indicate that this method should be overridden in a subclass."
  },
  {
    "line": 25,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Class definition for processed market data, indicating usage in financial ML models",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 67,
    "end_token": 67,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      329,
      13686,
      1910,
      1366,
      11,
      12739,
      8748,
      287,
      3176,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Class definition for processed market data, indicating usage in financial ML models"
  },
  {
    "line": 31,
    "text": "    def get_volume(self) -> pd.Series:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Type hinting without import statement for pd.DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      29048,
      7,
      944,
      8,
      4613,
      279,
      67,
      13,
      27996,
      25
    ],
    "start_token": 67,
    "end_token": 83,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5994,
      9254,
      278,
      1231,
      1330,
      2643,
      329,
      279,
      67,
      13,
      6601,
      19778
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Type hinting without import statement for pd.DataFrame"
  },
  {
    "line": 31,
    "text": "    def get_volume(self) -> pd.Series:",
    "annotation": "\u2705 Best Practice: Use type hints for class attributes to improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      29048,
      7,
      944,
      8,
      4613,
      279,
      67,
      13,
      27996,
      25
    ],
    "start_token": 83,
    "end_token": 99,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2099,
      20269,
      329,
      1398,
      12608,
      284,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use type hints for class attributes to improve code readability and maintainability"
  },
  {
    "line": 36,
    "text": "        raise NotImplementedError",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Type hinting without import statement for pd.DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 99,
    "end_token": 112,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5994,
      9254,
      278,
      1231,
      1330,
      2643,
      329,
      279,
      67,
      13,
      6601,
      19778
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Type hinting without import statement for pd.DataFrame"
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\u2705 Best Practice: Use type hints for class attributes to improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 112,
    "end_token": 112,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2099,
      20269,
      329,
      1398,
      12608,
      284,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use type hints for class attributes to improve code readability and maintainability"
  },
  {
    "line": 38,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 112,
    "end_token": 112,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability"
  },
  {
    "line": 45,
    "text": "",
    "annotation": "\u2705 Best Practice: Raising NotImplementedError in abstract methods is a common pattern to indicate that subclasses should implement this method",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 112,
    "end_token": 112,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      287,
      12531,
      5050,
      318,
      257,
      2219,
      3912,
      284,
      7603,
      326,
      850,
      37724,
      815,
      3494,
      428,
      2446
    ],
    "label": "best_practice",
    "reason": "Raising NotImplementedError in abstract methods is a common pattern to indicate that subclasses should implement this method"
  }
]
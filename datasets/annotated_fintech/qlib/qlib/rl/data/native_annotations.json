[
  {
    "line": 12,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters and return type for better readability and maintainability."
  },
  {
    "line": 19,
    "text": "def get_ticks_slice(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Modifying the 'end' parameter directly can lead to unexpected side effects if 'end' is used elsewhere.",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      83,
      3378,
      62,
      48369,
      7
    ],
    "start_token": 0,
    "end_token": 8,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3401,
      4035,
      262,
      705,
      437,
      6,
      11507,
      3264,
      460,
      1085,
      284,
      10059,
      1735,
      3048,
      611,
      705,
      437,
      6,
      318,
      973,
      8057,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Modifying the 'end' parameter directly can lead to unexpected side effects if 'end' is used elsewhere."
  },
  {
    "line": 22,
    "text": "    end: pd.Timestamp,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of slice_indexer method indicates a pattern of slicing time series data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      886,
      25,
      279,
      67,
      13,
      14967,
      27823,
      11
    ],
    "start_token": 8,
    "end_token": 19,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      16416,
      62,
      9630,
      263,
      2446,
      9217,
      257,
      3912,
      286,
      49289,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of slice_indexer method indicates a pattern of slicing time series data."
  },
  {
    "line": 30,
    "text": "class IntradayBacktestData(BaseIntradayBacktestData):",
    "annotation": "\u2705 Best Practice: Use of type annotations for constructor parameters improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      4871,
      2558,
      6335,
      323,
      7282,
      9288,
      6601,
      7,
      14881,
      5317,
      6335,
      323,
      7282,
      9288,
      6601,
      2599
    ],
    "start_token": 19,
    "end_token": 35,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      37647,
      329,
      23772,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type annotations for constructor parameters improves code readability and maintainability."
  },
  {
    "line": 35,
    "text": "        order: Order,",
    "annotation": "\u2705 Best Practice: Storing parameters as instance variables for later use.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      25,
      8284,
      11
    ],
    "start_token": 35,
    "end_token": 46,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      10007,
      355,
      4554,
      9633,
      329,
      1568,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Storing parameters as instance variables for later use."
  },
  {
    "line": 36,
    "text": "        exchange: Exchange,",
    "annotation": "\ud83e\udde0 ML Signal: Accessing exchange data based on order details and time range.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5163,
      25,
      12516,
      11
    ],
    "start_token": 46,
    "end_token": 57,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      5163,
      1366,
      1912,
      319,
      1502,
      3307,
      290,
      640,
      2837,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing exchange data based on order details and time range."
  },
  {
    "line": 46,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of `cast` to ensure the expected type of the returned value.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 57,
    "end_token": 57,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4600,
      2701,
      63,
      284,
      4155,
      262,
      2938,
      2099,
      286,
      262,
      4504,
      1988,
      13
    ],
    "label": "best_practice",
    "reason": "Use of `cast` to ensure the expected type of the returned value."
  },
  {
    "line": 46,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing exchange data based on order details and time range.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 57,
    "end_token": 57,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      5163,
      1366,
      1912,
      319,
      1502,
      3307,
      290,
      640,
      2837,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing exchange data based on order details and time range."
  },
  {
    "line": 60,
    "text": "                self._order.stock_id,",
    "annotation": "\u2705 Best Practice: Use of `cast` to ensure the expected type of the returned value.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      2875,
      13,
      13578,
      62,
      312,
      11
    ],
    "start_token": 57,
    "end_token": 80,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4600,
      2701,
      63,
      284,
      4155,
      262,
      2938,
      2099,
      286,
      262,
      4504,
      1988,
      13
    ],
    "label": "best_practice",
    "reason": "Use of `cast` to ensure the expected type of the returned value."
  },
  {
    "line": 55,
    "text": "            ),",
    "annotation": "\u2705 Best Practice: Implementing __repr__ for better debugging and logging",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10612
    ],
    "start_token": 80,
    "end_token": 92,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48282,
      278,
      11593,
      260,
      1050,
      834,
      329,
      1365,
      28769,
      290,
      18931
    ],
    "label": "best_practice",
    "reason": "Implementing __repr__ for better debugging and logging"
  },
  {
    "line": 56,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-strings for string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 92,
    "end_token": 100,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      37336,
      329,
      4731,
      33313
    ],
    "label": "ml_signal",
    "reason": "Use of f-strings for string formatting"
  },
  {
    "line": 60,
    "text": "                self._order.stock_id,",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      2875,
      13,
      13578,
      62,
      312,
      11
    ],
    "start_token": 100,
    "end_token": 123,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 62,
    "text": "                self._end_time,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of __len__ indicates the object is expected to behave like a collection",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      437,
      62,
      2435,
      11
    ],
    "start_token": 123,
    "end_token": 144,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11593,
      11925,
      834,
      9217,
      262,
      2134,
      318,
      2938,
      284,
      17438,
      588,
      257,
      4947
    ],
    "label": "ml_signal",
    "reason": "Usage of __len__ indicates the object is expected to behave like a collection"
  },
  {
    "line": 62,
    "text": "                self._end_time,",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      437,
      62,
      2435,
      11
    ],
    "start_token": 144,
    "end_token": 165,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and return value"
  },
  {
    "line": 64,
    "text": "            ),",
    "annotation": "\u2705 Best Practice: Use of type hinting for return value improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10612
    ],
    "start_token": 165,
    "end_token": 177,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return value improves code readability and maintainability"
  },
  {
    "line": 64,
    "text": "            ),",
    "annotation": "\u2705 Best Practice: Include type hints for return values to improve code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10612
    ],
    "start_token": 177,
    "end_token": 189,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      1441,
      3815,
      284,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for return values to improve code readability and maintainability"
  },
  {
    "line": 66,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method returning an attribute, indicating a getter pattern",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 189,
    "end_token": 189,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      281,
      11688,
      11,
      12739,
      257,
      651,
      353,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method returning an attribute, indicating a getter pattern"
  },
  {
    "line": 66,
    "text": "",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose and usage of the function",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 189,
    "end_token": 189,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose and usage of the function"
  },
  {
    "line": 68,
    "text": "        return (",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension used to transform data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      357
    ],
    "start_token": 189,
    "end_token": 198,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      973,
      284,
      6121,
      1366
    ],
    "label": "ml_signal",
    "reason": "List comprehension used to transform data"
  },
  {
    "line": 69,
    "text": "            f\"Order: {self._order}, Exchange: {self._exchange}, \"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential performance issue with converting to list before comprehension",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      18743,
      25,
      1391,
      944,
      13557,
      2875,
      5512,
      12516,
      25,
      1391,
      944,
      13557,
      1069,
      3803,
      5512,
      366
    ],
    "start_token": 198,
    "end_token": 227,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2854,
      2071,
      351,
      23202,
      284,
      1351,
      878,
      35915
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential performance issue with converting to list before comprehension"
  },
  {
    "line": 70,
    "text": "            f\"Start time: {self._start_time}, End time: {self._end_time}\"",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      10434,
      640,
      25,
      1391,
      944,
      13557,
      9688,
      62,
      2435,
      5512,
      5268,
      640,
      25,
      1391,
      944,
      13557,
      437,
      62,
      2435,
      36786
    ],
    "start_token": 227,
    "end_token": 260,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose"
  },
  {
    "line": 70,
    "text": "            f\"Start time: {self._start_time}, End time: {self._end_time}\"",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      10434,
      640,
      25,
      1391,
      944,
      13557,
      9688,
      62,
      2435,
      5512,
      5268,
      640,
      25,
      1391,
      944,
      13557,
      437,
      62,
      2435,
      36786
    ],
    "start_token": 260,
    "end_token": 293,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type"
  },
  {
    "line": 72,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of instance variables from parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 293,
    "end_token": 293,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      4554,
      9633,
      422,
      10007
    ],
    "label": "ml_signal",
    "reason": "Initialization of instance variables from parameters"
  },
  {
    "line": 74,
    "text": "        return len(self._deal_price)",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of instance variables from parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      18896,
      7,
      944,
      13557,
      31769,
      62,
      20888,
      8
    ],
    "start_token": 293,
    "end_token": 309,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      4554,
      9633,
      422,
      10007
    ],
    "label": "ml_signal",
    "reason": "Initialization of instance variables from parameters"
  },
  {
    "line": 76,
    "text": "    def get_deal_price(self) -> pd.Series:",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of instance variables from parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      31769,
      62,
      20888,
      7,
      944,
      8,
      4613,
      279,
      67,
      13,
      27996,
      25
    ],
    "start_token": 309,
    "end_token": 327,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      4554,
      9633,
      422,
      10007
    ],
    "label": "ml_signal",
    "reason": "Initialization of instance variables from parameters"
  },
  {
    "line": 74,
    "text": "        return len(self._deal_price)",
    "annotation": "\u2705 Best Practice: Use of __repr__ method to provide a string representation of the object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      18896,
      7,
      944,
      13557,
      31769,
      62,
      20888,
      8
    ],
    "start_token": 327,
    "end_token": 343,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      260,
      1050,
      834,
      2446,
      284,
      2148,
      257,
      4731,
      10552,
      286,
      262,
      2134
    ],
    "label": "best_practice",
    "reason": "Use of __repr__ method to provide a string representation of the object"
  },
  {
    "line": 76,
    "text": "    def get_deal_price(self) -> pd.Series:",
    "annotation": "\u2705 Best Practice: Use of context manager to temporarily set pandas options",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      31769,
      62,
      20888,
      7,
      944,
      8,
      4613,
      279,
      67,
      13,
      27996,
      25
    ],
    "start_token": 343,
    "end_token": 361,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4732,
      4706,
      284,
      13413,
      900,
      19798,
      292,
      3689
    ],
    "label": "best_practice",
    "reason": "Use of context manager to temporarily set pandas options"
  },
  {
    "line": 78,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for string formatting",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 361,
    "end_token": 361,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      4731,
      33313
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for string formatting"
  },
  {
    "line": 77,
    "text": "        return self._deal_price",
    "annotation": "\u2705 Best Practice: Type hinting improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13557,
      31769,
      62,
      20888
    ],
    "start_token": 361,
    "end_token": 374,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Type hinting improves code readability and maintainability"
  },
  {
    "line": 79,
    "text": "    def get_volume(self) -> pd.Series:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of __len__ method indicates implementation of a container-like class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      29048,
      7,
      944,
      8,
      4613,
      279,
      67,
      13,
      27996,
      25
    ],
    "start_token": 374,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11593,
      11925,
      834,
      2446,
      9217,
      7822,
      286,
      257,
      9290,
      12,
      2339,
      1398
    ],
    "label": "ml_signal",
    "reason": "Usage of __len__ method indicates implementation of a container-like class"
  },
  {
    "line": 79,
    "text": "    def get_volume(self) -> pd.Series:",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose and usage of the function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      29048,
      7,
      944,
      8,
      4613,
      279,
      67,
      13,
      27996,
      25
    ],
    "start_token": 390,
    "end_token": 406,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose and usage of the function"
  },
  {
    "line": 81,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a DataFrame column by name, indicating a pattern of data manipulation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 406,
    "end_token": 406,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      6060,
      19778,
      5721,
      416,
      1438,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Accessing a DataFrame column by name, indicating a pattern of data manipulation"
  },
  {
    "line": 81,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hinting for return type improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 406,
    "end_token": 406,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return type improves code readability and maintainability"
  },
  {
    "line": 83,
    "text": "        return pd.DatetimeIndex([e[1] for e in list(self._exchange.quote_df.index)])",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a DataFrame column by name, indicating a common pattern in data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      27354,
      8079,
      15732,
      26933,
      68,
      58,
      16,
      60,
      329,
      304,
      287,
      1351,
      7,
      944,
      13557,
      1069,
      3803,
      13,
      22708,
      62,
      7568,
      13,
      9630,
      8,
      12962
    ],
    "start_token": 406,
    "end_token": 442,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      6060,
      19778,
      5721,
      416,
      1438,
      11,
      12739,
      257,
      2219,
      3912,
      287,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Accessing a DataFrame column by name, indicating a common pattern in data manipulation"
  },
  {
    "line": 84,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hinting for return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 442,
    "end_token": 442,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return type improves code readability and maintainability."
  },
  {
    "line": 84,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly casting the index to pd.DatetimeIndex ensures the expected type is returned.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 442,
    "end_token": 442,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      13092,
      262,
      6376,
      284,
      279,
      67,
      13,
      27354,
      8079,
      15732,
      19047,
      262,
      2938,
      2099,
      318,
      4504,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly casting the index to pd.DatetimeIndex ensures the expected type is returned."
  },
  {
    "line": 89,
    "text": "    def __init__(self, df: pd.DataFrame, price_column: str = \"$close0\", volume_column: str = \"$volume0\") -> None:",
    "annotation": "\u2705 Best Practice: Using LRUCache to limit cache size helps manage memory usage effectively.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      47764,
      25,
      279,
      67,
      13,
      6601,
      19778,
      11,
      2756,
      62,
      28665,
      25,
      965,
      796,
      17971,
      19836,
      15,
      1600,
      6115,
      62,
      28665,
      25,
      965,
      796,
      17971,
      29048,
      15,
      4943,
      4613,
      6045,
      25
    ],
    "start_token": 442,
    "end_token": 483,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      37491,
      9598,
      4891,
      284,
      4179,
      12940,
      2546,
      5419,
      6687,
      4088,
      8748,
      6840,
      13
    ],
    "label": "best_practice",
    "reason": "Using LRUCache to limit cache size helps manage memory usage effectively."
  },
  {
    "line": 89,
    "text": "    def __init__(self, df: pd.DataFrame, price_column: str = \"$close0\", volume_column: str = \"$volume0\") -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Use of caching pattern with LRUCache can indicate performance optimization behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      47764,
      25,
      279,
      67,
      13,
      6601,
      19778,
      11,
      2756,
      62,
      28665,
      25,
      965,
      796,
      17971,
      19836,
      15,
      1600,
      6115,
      62,
      28665,
      25,
      965,
      796,
      17971,
      29048,
      15,
      4943,
      4613,
      6045,
      25
    ],
    "start_token": 483,
    "end_token": 524,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      40918,
      3912,
      351,
      37491,
      9598,
      4891,
      460,
      7603,
      2854,
      23989,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of caching pattern with LRUCache can indicate performance optimization behavior."
  },
  {
    "line": 92,
    "text": "        self.volume_column = volume_column",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Lambda functions can sometimes obscure logic, making it harder to trace and debug.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      29048,
      62,
      28665,
      796,
      6115,
      62,
      28665
    ],
    "start_token": 524,
    "end_token": 540,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      21114,
      6814,
      5499,
      460,
      3360,
      18611,
      9156,
      11,
      1642,
      340,
      7069,
      284,
      12854,
      290,
      14257,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Lambda functions can sometimes obscure logic, making it harder to trace and debug."
  },
  {
    "line": 94,
    "text": "    def __repr__(self) -> str:",
    "annotation": "\ud83e\udde0 ML Signal: Custom cache key function indicates a pattern of optimizing cache hits.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      260,
      1050,
      834,
      7,
      944,
      8,
      4613,
      965,
      25
    ],
    "start_token": 540,
    "end_token": 554,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      12940,
      1994,
      2163,
      9217,
      257,
      3912,
      286,
      45780,
      12940,
      7127,
      13
    ],
    "label": "ml_signal",
    "reason": "Custom cache key function indicates a pattern of optimizing cache hits."
  },
  {
    "line": 89,
    "text": "    def __init__(self, df: pd.DataFrame, price_column: str = \"$close0\", volume_column: str = \"$volume0\") -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with specific parameter types and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      47764,
      25,
      279,
      67,
      13,
      6601,
      19778,
      11,
      2756,
      62,
      28665,
      25,
      965,
      796,
      17971,
      19836,
      15,
      1600,
      6115,
      62,
      28665,
      25,
      965,
      796,
      17971,
      29048,
      15,
      4943,
      4613,
      6045,
      25
    ],
    "start_token": 554,
    "end_token": 595,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      2176,
      11507,
      3858,
      290,
      1441,
      2099
    ],
    "label": "ml_signal",
    "reason": "Function signature with specific parameter types and return type"
  },
  {
    "line": 95,
    "text": "        with pd.option_context(\"memory_usage\", False, \"display.max_info_columns\", 1, \"display.large_repr\", \"info\"):",
    "annotation": "\u2705 Best Practice: Use of pd.DatetimeIndex for time-based indexing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      351,
      279,
      67,
      13,
      18076,
      62,
      22866,
      7203,
      31673,
      62,
      26060,
      1600,
      10352,
      11,
      366,
      13812,
      13,
      9806,
      62,
      10951,
      62,
      28665,
      82,
      1600,
      352,
      11,
      366,
      13812,
      13,
      11664,
      62,
      260,
      1050,
      1600,
      366,
      10951,
      1,
      2599
    ],
    "start_token": 595,
    "end_token": 640,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      27354,
      8079,
      15732,
      329,
      640,
      12,
      3106,
      6376,
      278
    ],
    "label": "best_practice",
    "reason": "Use of pd.DatetimeIndex for time-based indexing"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\u2705 Best Practice: Filtering index based on start_time",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 640,
    "end_token": 640,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7066,
      20212,
      6376,
      1912,
      319,
      923,
      62,
      2435
    ],
    "label": "best_practice",
    "reason": "Filtering index based on start_time"
  },
  {
    "line": 98,
    "text": "    def __len__(self) -> int:",
    "annotation": "\u2705 Best Practice: Filtering index based on end_time",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      11925,
      834,
      7,
      944,
      8,
      4613,
      493,
      25
    ],
    "start_token": 640,
    "end_token": 653,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7066,
      20212,
      6376,
      1912,
      319,
      886,
      62,
      2435
    ],
    "label": "best_practice",
    "reason": "Filtering index based on end_time"
  },
  {
    "line": 98,
    "text": "    def __len__(self) -> int:",
    "annotation": "\u2705 Best Practice: Use of isinstance to check type of trade_range",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      11925,
      834,
      7,
      944,
      8,
      4613,
      493,
      25
    ],
    "start_token": 653,
    "end_token": 666,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      318,
      39098,
      284,
      2198,
      2099,
      286,
      3292,
      62,
      9521
    ],
    "label": "best_practice",
    "reason": "Use of isinstance to check type of trade_range"
  },
  {
    "line": 105,
    "text": "        return self.df[self.volume_column]",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on type of trade_range",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      7568,
      58,
      944,
      13,
      29048,
      62,
      28665,
      60
    ],
    "start_token": 666,
    "end_token": 684,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      2099,
      286,
      3292,
      62,
      9521
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on type of trade_range"
  },
  {
    "line": 112,
    "text": "    cache=cachetools.LRUCache(100),",
    "annotation": "\ud83e\udde0 ML Signal: Handling different types of trade_range",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      12940,
      28,
      66,
      330,
      3202,
      10141,
      13,
      35972,
      9598,
      4891,
      7,
      3064,
      828
    ],
    "start_token": 684,
    "end_token": 700,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      1180,
      3858,
      286,
      3292,
      62,
      9521
    ],
    "label": "ml_signal",
    "reason": "Handling different types of trade_range"
  },
  {
    "line": 113,
    "text": "    key=lambda order, _, __: order.key_by_day,",
    "annotation": "\ud83e\udde0 ML Signal: Creation of IntradayBacktestData object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1994,
      28,
      50033,
      1502,
      11,
      4808,
      11,
      11593,
      25,
      1502,
      13,
      2539,
      62,
      1525,
      62,
      820,
      11
    ],
    "start_token": 700,
    "end_token": 720,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21582,
      286,
      2558,
      6335,
      323,
      7282,
      9288,
      6601,
      2134
    ],
    "label": "ml_signal",
    "reason": "Creation of IntradayBacktestData object"
  },
  {
    "line": 115,
    "text": "def load_backtest_data(",
    "annotation": "\u2705 Best Practice: Explicit return of the constructed object",
    "confidence": 0.5,
    "tokens": [
      4299,
      3440,
      62,
      1891,
      9288,
      62,
      7890,
      7
    ],
    "start_token": 720,
    "end_token": 728,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      1441,
      286,
      262,
      12006,
      2134
    ],
    "label": "best_practice",
    "reason": "Explicit return of the constructed object"
  },
  {
    "line": 115,
    "text": "def load_backtest_data(",
    "annotation": "\u2705 Best Practice: Class docstring provides a clear description of the class purpose.",
    "confidence": 1.0,
    "tokens": [
      4299,
      3440,
      62,
      1891,
      9288,
      62,
      7890,
      7
    ],
    "start_token": 728,
    "end_token": 736,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      1398,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a clear description of the class purpose."
  },
  {
    "line": 115,
    "text": "def load_backtest_data(",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      4299,
      3440,
      62,
      1891,
      9288,
      62,
      7890,
      7
    ],
    "start_token": 736,
    "end_token": 744,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability."
  },
  {
    "line": 126,
    "text": "            ticks_index,",
    "annotation": "\u2705 Best Practice: Use of type hint for return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36066,
      62,
      9630,
      11
    ],
    "start_token": 744,
    "end_token": 759,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hint for return type improves code readability and maintainability."
  },
  {
    "line": 126,
    "text": "            ticks_index,",
    "annotation": "\u2705 Best Practice: Resetting index to ensure a clean DataFrame state",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36066,
      62,
      9630,
      11
    ],
    "start_token": 759,
    "end_token": 774,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      6376,
      284,
      4155,
      257,
      3424,
      6060,
      19778,
      1181
    ],
    "label": "best_practice",
    "reason": "Resetting index to ensure a clean DataFrame state"
  },
  {
    "line": 129,
    "text": "            include_end=True,",
    "annotation": "\u2705 Best Practice: Dropping unnecessary columns to reduce DataFrame size",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2291,
      62,
      437,
      28,
      17821,
      11
    ],
    "start_token": 774,
    "end_token": 791,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      13114,
      15180,
      284,
      4646,
      6060,
      19778,
      2546
    ],
    "label": "best_practice",
    "reason": "Dropping unnecessary columns to reduce DataFrame size"
  },
  {
    "line": 131,
    "text": "    else:",
    "annotation": "\u2705 Best Practice: Setting 'datetime' as index for time-series operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 791,
    "end_token": 796,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      705,
      19608,
      8079,
      6,
      355,
      6376,
      329,
      640,
      12,
      25076,
      4560
    ],
    "label": "best_practice",
    "reason": "Setting 'datetime' as index for time-series operations"
  },
  {
    "line": 133,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential path traversal if 'data_dir' or 'stock_id' is user-controlled",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 796,
    "end_token": 796,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3108,
      33038,
      282,
      611,
      705,
      7890,
      62,
      15908,
      6,
      393,
      705,
      13578,
      62,
      312,
      6,
      318,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential path traversal if 'data_dir' or 'stock_id' is user-controlled"
  },
  {
    "line": 135,
    "text": "        order=order,",
    "annotation": "\u2705 Best Practice: Using replace to ensure time boundaries are set correctly",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1502,
      28,
      2875,
      11
    ],
    "start_token": 796,
    "end_token": 807,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      6330,
      284,
      4155,
      640,
      13215,
      389,
      900,
      9380
    ],
    "label": "best_practice",
    "reason": "Using replace to ensure time boundaries are set correctly"
  },
  {
    "line": 137,
    "text": "        ticks_index=ticks_index,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Untrusted deserialization can lead to code execution",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36066,
      62,
      9630,
      28,
      83,
      3378,
      62,
      9630,
      11
    ],
    "start_token": 807,
    "end_token": 823,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      26970,
      81,
      8459,
      748,
      48499,
      1634,
      460,
      1085,
      284,
      2438,
      9706
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Untrusted deserialization can lead to code execution"
  },
  {
    "line": 140,
    "text": "    return backtest_data",
    "annotation": "\ud83e\udde0 ML Signal: Fetching data within a specific time range, common in time-series analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      736,
      9288,
      62,
      7890
    ],
    "start_token": 823,
    "end_token": 831,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      1366,
      1626,
      257,
      2176,
      640,
      2837,
      11,
      2219,
      287,
      640,
      12,
      25076,
      3781
    ],
    "label": "ml_signal",
    "reason": "Fetching data within a specific time range, common in time-series analysis"
  },
  {
    "line": 143,
    "text": "class HandlerIntradayProcessedData(BaseIntradayProcessedData):",
    "annotation": "\ud83e\udde0 ML Signal: Handling data differently based on 'index_only' flag",
    "confidence": 0.5,
    "tokens": [
      4871,
      32412,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      7,
      14881,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      2599
    ],
    "start_token": 831,
    "end_token": 848,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      1366,
      10338,
      1912,
      319,
      705,
      9630,
      62,
      8807,
      6,
      6056
    ],
    "label": "ml_signal",
    "reason": "Handling data differently based on 'index_only' flag"
  },
  {
    "line": 143,
    "text": "class HandlerIntradayProcessedData(BaseIntradayProcessedData):",
    "annotation": "\ud83e\udde0 ML Signal: Selecting specific feature columns for processing",
    "confidence": 1.0,
    "tokens": [
      4871,
      32412,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      7,
      14881,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      2599
    ],
    "start_token": 848,
    "end_token": 865,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9683,
      278,
      2176,
      3895,
      15180,
      329,
      7587
    ],
    "label": "ml_signal",
    "reason": "Selecting specific feature columns for processing"
  },
  {
    "line": 142,
    "text": "",
    "annotation": "\u2705 Best Practice: Using pd.option_context to temporarily set pandas options for a specific block of code",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 865,
    "end_token": 865,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      279,
      67,
      13,
      18076,
      62,
      22866,
      284,
      13413,
      900,
      19798,
      292,
      3689,
      329,
      257,
      2176,
      2512,
      286,
      2438
    ],
    "label": "best_practice",
    "reason": "Using pd.option_context to temporarily set pandas options for a specific block of code"
  },
  {
    "line": 143,
    "text": "class HandlerIntradayProcessedData(BaseIntradayProcessedData):",
    "annotation": "\u2705 Best Practice: Using f-string for a more readable and efficient string representation",
    "confidence": 0.5,
    "tokens": [
      4871,
      32412,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      7,
      14881,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      2599
    ],
    "start_token": 865,
    "end_token": 882,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      277,
      12,
      8841,
      329,
      257,
      517,
      31744,
      290,
      6942,
      4731,
      10552
    ],
    "label": "best_practice",
    "reason": "Using f-string for a more readable and efficient string representation"
  },
  {
    "line": 143,
    "text": "class HandlerIntradayProcessedData(BaseIntradayProcessedData):",
    "annotation": "\ud83e\udde0 ML Signal: Use of cachetools.cached indicates caching behavior, which can be a feature for ML models",
    "confidence": 0.5,
    "tokens": [
      4871,
      32412,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      7,
      14881,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      2599
    ],
    "start_token": 882,
    "end_token": 899,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      40428,
      3202,
      10141,
      13,
      66,
      2317,
      9217,
      40918,
      4069,
      11,
      543,
      460,
      307,
      257,
      3895,
      329,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Use of cachetools.cached indicates caching behavior, which can be a feature for ML models"
  },
  {
    "line": 143,
    "text": "class HandlerIntradayProcessedData(BaseIntradayProcessedData):",
    "annotation": "\u2705 Best Practice: Using LRUCache to limit memory usage and improve performance",
    "confidence": 0.5,
    "tokens": [
      4871,
      32412,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      7,
      14881,
      5317,
      6335,
      323,
      18709,
      276,
      6601,
      2599
    ],
    "start_token": 899,
    "end_token": 916,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      37491,
      9598,
      4891,
      284,
      4179,
      4088,
      8748,
      290,
      2987,
      2854
    ],
    "label": "best_practice",
    "reason": "Using LRUCache to limit memory usage and improve performance"
  },
  {
    "line": 153,
    "text": "        backtest: bool = False,",
    "annotation": "\u2705 Best Practice: Using a lambda function to define a custom cache key",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      736,
      9288,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 916,
    "end_token": 930,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      37456,
      2163,
      284,
      8160,
      257,
      2183,
      12940,
      1994
    ],
    "label": "best_practice",
    "reason": "Using a lambda function to define a custom cache key"
  },
  {
    "line": 153,
    "text": "        backtest: bool = False,",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with multiple parameters, including booleans, which can indicate feature usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      736,
      9288,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 930,
    "end_token": 944,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      3294,
      10007,
      11,
      1390,
      1489,
      2305,
      504,
      11,
      543,
      460,
      7603,
      3895,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function signature with multiple parameters, including booleans, which can indicate feature usage patterns"
  },
  {
    "line": 153,
    "text": "        backtest: bool = False,",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      736,
      9288,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 944,
    "end_token": 958,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters for better readability and maintainability"
  },
  {
    "line": 165,
    "text": "            dataset = pickle.load(fstream)",
    "annotation": "\ud83e\udde0 ML Signal: Returning an instance of a class, which can indicate object-oriented usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      27039,
      796,
      2298,
      293,
      13,
      2220,
      7,
      69,
      5532,
      8
    ],
    "start_token": 958,
    "end_token": 979,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      281,
      4554,
      286,
      257,
      1398,
      11,
      543,
      460,
      7603,
      2134,
      12,
      17107,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Returning an instance of a class, which can indicate object-oriented usage patterns"
  },
  {
    "line": 166,
    "text": "        data = dataset.handler.fetch(pd.IndexSlice[stock_id, start_time:end_time], level=None)",
    "annotation": "\u2705 Best Practice: Class definition should include a docstring explaining its purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      27039,
      13,
      30281,
      13,
      69,
      7569,
      7,
      30094,
      13,
      15732,
      11122,
      501,
      58,
      13578,
      62,
      312,
      11,
      923,
      62,
      2435,
      25,
      437,
      62,
      2435,
      4357,
      1241,
      28,
      14202,
      8
    ],
    "start_token": 979,
    "end_token": 1017,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      2291,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should include a docstring explaining its purpose and usage."
  },
  {
    "line": 173,
    "text": "            self.yesterday = _drop_stock_id(data[feature_columns_yesterday])",
    "annotation": "\u2705 Best Practice: Call to super().__init__() ensures proper initialization of the base class.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      8505,
      6432,
      796,
      4808,
      14781,
      62,
      13578,
      62,
      312,
      7,
      7890,
      58,
      30053,
      62,
      28665,
      82,
      62,
      8505,
      6432,
      12962
    ],
    "start_token": 1017,
    "end_token": 1050,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      22446,
      834,
      15003,
      834,
      3419,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Call to super().__init__() ensures proper initialization of the base class."
  },
  {
    "line": 175,
    "text": "    def __repr__(self) -> str:",
    "annotation": "\u2705 Best Practice: Using Path from pathlib for file paths improves cross-platform compatibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      260,
      1050,
      834,
      7,
      944,
      8,
      4613,
      965,
      25
    ],
    "start_token": 1050,
    "end_token": 1064,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      10644,
      422,
      3108,
      8019,
      329,
      2393,
      13532,
      19575,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Using Path from pathlib for file paths improves cross-platform compatibility."
  },
  {
    "line": 177,
    "text": "            return f\"{self.__class__.__name__}({self.today}, {self.yesterday})\"",
    "annotation": "\ud83e\udde0 ML Signal: Storing feature columns indicates a pattern for feature selection in ML models.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      277,
      1,
      90,
      944,
      13,
      834,
      4871,
      834,
      13,
      834,
      3672,
      834,
      92,
      15090,
      944,
      13,
      40838,
      5512,
      1391,
      944,
      13,
      8505,
      6432,
      92,
      16725
    ],
    "start_token": 1064,
    "end_token": 1101,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      3895,
      15180,
      9217,
      257,
      3912,
      329,
      3895,
      6356,
      287,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing feature columns indicates a pattern for feature selection in ML models."
  },
  {
    "line": 178,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing feature columns indicates a pattern for feature selection in ML models.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1101,
    "end_token": 1101,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      3895,
      15180,
      9217,
      257,
      3912,
      329,
      3895,
      6356,
      287,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing feature columns indicates a pattern for feature selection in ML models."
  },
  {
    "line": 178,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: The 'backtest' flag suggests a pattern for model evaluation or simulation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1101,
    "end_token": 1101,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      705,
      1891,
      9288,
      6,
      6056,
      5644,
      257,
      3912,
      329,
      2746,
      12660,
      393,
      18640,
      13
    ],
    "label": "ml_signal",
    "reason": "The 'backtest' flag suggests a pattern for model evaluation or simulation."
  },
  {
    "line": 178,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with specific parameter types and return type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1101,
    "end_token": 1101,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      2176,
      11507,
      3858,
      290,
      1441,
      2099
    ],
    "label": "ml_signal",
    "reason": "Function signature with specific parameter types and return type"
  },
  {
    "line": 185,
    "text": "        backtest,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a specific data loading function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      736,
      9288,
      11
    ],
    "start_token": 1101,
    "end_token": 1111,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2176,
      1366,
      11046,
      2163
    ],
    "label": "ml_signal",
    "reason": "Usage of a specific data loading function"
  },
  {
    "line": 185,
    "text": "        backtest,",
    "annotation": "\u2705 Best Practice: Directly returning the result of a function call",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      736,
      9288,
      11
    ],
    "start_token": 1111,
    "end_token": 1121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4128,
      306,
      8024,
      262,
      1255,
      286,
      257,
      2163,
      869
    ],
    "label": "best_practice",
    "reason": "Directly returning the result of a function call"
  }
]
[
  {
    "line": 2,
    "text": "# Licensed under the MIT License.",
    "annotation": "\u2705 Best Practice: Ensures compatibility with future Python versions for type annotations.",
    "confidence": 1.0,
    "tokens": [
      2,
      49962,
      739,
      262,
      17168,
      13789,
      13
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48221,
      942,
      17764,
      351,
      2003,
      11361,
      6300,
      329,
      2099,
      37647,
      13
    ],
    "label": "best_practice",
    "reason": "Ensures compatibility with future Python versions for type annotations."
  },
  {
    "line": 5,
    "text": "",
    "annotation": "\u2705 Best Practice: Imports from typing module improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1846,
      3742,
      422,
      19720,
      8265,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Imports from typing module improve code readability and maintainability."
  },
  {
    "line": 8,
    "text": "from qlib.typehint import final",
    "annotation": "\u2705 Best Practice: Importing 'final' can be used to prevent further subclassing, improving code stability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      4906,
      71,
      600,
      1330,
      2457
    ],
    "start_token": 7,
    "end_token": 16,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      705,
      20311,
      6,
      460,
      307,
      973,
      284,
      2948,
      2252,
      47611,
      278,
      11,
      10068,
      2438,
      10159,
      13
    ],
    "label": "best_practice",
    "reason": "Importing 'final' can be used to prevent further subclassing, improving code stability."
  },
  {
    "line": 11,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicit relative import clarifies module structure and dependencies.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 16,
    "end_token": 16,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      3585,
      1330,
      10212,
      6945,
      8265,
      4645,
      290,
      20086,
      13
    ],
    "label": "best_practice",
    "reason": "Explicit relative import clarifies module structure and dependencies."
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\u2705 Best Practice: TYPE_CHECKING is used to avoid circular imports and improve performance during runtime.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 16,
    "end_token": 16,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      41876,
      62,
      50084,
      2751,
      318,
      973,
      284,
      3368,
      18620,
      17944,
      290,
      2987,
      2854,
      1141,
      19124,
      13
    ],
    "label": "best_practice",
    "reason": "TYPE_CHECKING is used to avoid circular imports and improve performance during runtime."
  },
  {
    "line": 16,
    "text": "__all__ = [\"AuxiliaryInfoCollector\"]",
    "annotation": "\u2705 Best Practice: Defines the public API of the module, improving code maintainability.",
    "confidence": 1.0,
    "tokens": [
      834,
      439,
      834,
      796,
      14631,
      32,
      2821,
      28129,
      12360,
      31337,
      273,
      8973
    ],
    "start_token": 16,
    "end_token": 28,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      1127,
      262,
      1171,
      7824,
      286,
      262,
      8265,
      11,
      10068,
      2438,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Defines the public API of the module, improving code maintainability."
  },
  {
    "line": 16,
    "text": "__all__ = [\"AuxiliaryInfoCollector\"]",
    "annotation": "\u2705 Best Practice: TypeVar is used for generic programming, enhancing code flexibility and reusability.",
    "confidence": 0.5,
    "tokens": [
      834,
      439,
      834,
      796,
      14631,
      32,
      2821,
      28129,
      12360,
      31337,
      273,
      8973
    ],
    "start_token": 28,
    "end_token": 40,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      19852,
      318,
      973,
      329,
      14276,
      8300,
      11,
      27496,
      2438,
      13688,
      290,
      302,
      385,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "TypeVar is used for generic programming, enhancing code flexibility and reusability."
  },
  {
    "line": 11,
    "text": "",
    "annotation": "\u2705 Best Practice: Type hinting for class attributes improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 40,
    "end_token": 40,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      278,
      329,
      1398,
      12608,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hinting for class attributes improves code readability and maintainability."
  },
  {
    "line": 13,
    "text": "    from .utils.env_wrapper import EnvWrapper",
    "annotation": "\u2705 Best Practice: Use of __call__ method makes the class instances callable, improving flexibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      422,
      764,
      26791,
      13,
      24330,
      62,
      48553,
      1330,
      2039,
      85,
      36918,
      2848
    ],
    "start_token": 40,
    "end_token": 55,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      13345,
      834,
      2446,
      1838,
      262,
      1398,
      10245,
      869,
      540,
      11,
      10068,
      13688,
      13
    ],
    "label": "best_practice",
    "reason": "Use of __call__ method makes the class instances callable, improving flexibility."
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method delegation pattern, where __call__ delegates to another method.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 55,
    "end_token": 55,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      22635,
      3912,
      11,
      810,
      11593,
      13345,
      834,
      15265,
      284,
      1194,
      2446,
      13
    ],
    "label": "ml_signal",
    "reason": "Method delegation pattern, where __call__ delegates to another method."
  },
  {
    "line": 16,
    "text": "__all__ = [\"AuxiliaryInfoCollector\"]",
    "annotation": "\u2705 Best Practice: Docstring provides clear documentation of method purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      834,
      439,
      834,
      796,
      14631,
      32,
      2821,
      28129,
      12360,
      31337,
      273,
      8973
    ],
    "start_token": 55,
    "end_token": 67,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      10314,
      286,
      2446,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear documentation of method purpose and parameters"
  },
  {
    "line": 26,
    "text": "    @final",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method raises NotImplementedError, indicating it must be overridden in subclasses",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      20311
    ],
    "start_token": 67,
    "end_token": 72,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      12073,
      1892,
      3546,
      1154,
      12061,
      12331,
      11,
      12739,
      340,
      1276,
      307,
      23170,
      4651,
      287,
      850,
      37724
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method raises NotImplementedError, indicating it must be overridden in subclasses"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",0.5,0,best_practice,9,Grouping imports from the same module together improves readability.,,0,,[]
‚úÖ Best Practice: Constants should be in uppercase to distinguish them from variables.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 287, 334, 39921, 589, 284, 15714, 606, 422, 9633, 13]",1.0,18,best_practice,17,Constants should be in uppercase to distinguish them from variables.,,0,from qlib.contrib.report.data.base import FeaAnalyser,"[6738, 10662, 8019, 13, 3642, 822, 13, 13116, 13, 7890, 13, 8692, 1330, 5452, 64, 2025, 26266, 263]"
‚úÖ Best Practice: Class docstring provides a brief description of the class purpose,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007]",1.0,25,best_practice,22,Class docstring provides a brief description of the class purpose,,18,import seaborn as sns,"[11748, 384, 397, 1211, 355, 3013, 82]"
"‚ö†Ô∏è SAST Risk (Low): No validation on dataset type, could lead to runtime errors if not a DataFrame","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 27039, 2099, 11, 714, 1085, 284, 19124, 8563, 611, 407, 257, 6060, 19778]",0.5,25,sast_risk,23,"No validation on dataset type, could lead to runtime errors if not a DataFrame",Low,25,,[]
‚ö†Ô∏è SAST Risk (Low): NotImplementedError might not be the most appropriate exception type,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1892, 3546, 1154, 12061, 12331, 1244, 407, 307, 262, 749, 5035, 6631, 2099]",0.5,25,sast_risk,25,NotImplementedError might not be the most appropriate exception type,Low,25,,[]
üß† ML Signal: Use of list comprehension to apply classes to a dataset,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 35915, 284, 4174, 6097, 284, 257, 27039]",0.5,38,ml_signal,27,Use of list comprehension to apply classes to a dataset,,25,class CombFeaAna(FeaAnalyser):,"[4871, 14336, 14304, 64, 2025, 64, 7, 14304, 64, 2025, 26266, 263, 2599]"
‚úÖ Best Practice: Explicitly calling the superclass's __init__ method,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 338, 11593, 15003, 834, 2446]",1.0,54,best_practice,29,Explicitly calling the superclass's __init__ method,,38,    Combine the sub feature analysers and plot then in a single graph,"[220, 220, 220, 29176, 262, 850, 3895, 11090, 364, 290, 7110, 788, 287, 257, 2060, 4823]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the function.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163, 13]",1.0,67,best_practice,27,Consider adding a docstring to describe the purpose and usage of the function.,,54,class CombFeaAna(FeaAnalyser):,"[4871, 14336, 14304, 64, 2025, 64, 7, 14304, 64, 2025, 26266, 263, 2599]"
üß† ML Signal: Usage of numpy's all function to check conditions across a list.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 299, 32152, 338, 477, 2163, 284, 2198, 3403, 1973, 257, 1351, 13]",1.0,83,ml_signal,29,Usage of numpy's all function to check conditions across a list.,,67,    Combine the sub feature analysers and plot then in a single graph,"[220, 220, 220, 29176, 262, 850, 3895, 11090, 364, 290, 7110, 788, 287, 257, 2060, 4823]"
‚úÖ Best Practice: Using list comprehension instead of map and lambda for better readability.,"[26486, 227, 6705, 19939, 25, 8554, 1351, 35915, 2427, 286, 3975, 290, 37456, 329, 1365, 1100, 1799, 13]",0.5,87,best_practice,30,Using list comprehension instead of map and lambda for better readability.,,83,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",1.0,91,best_practice,30,Include a docstring to describe the method's purpose,,87,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use of iter() to create an iterator for sub_fig_generator,"[26486, 227, 6705, 19939, 25, 5765, 286, 11629, 3419, 284, 2251, 281, 41313, 329, 850, 62, 5647, 62, 8612, 1352]",0.5,118,best_practice,32,Use of iter() to create an iterator for sub_fig_generator,,91,"    def __init__(self, dataset: pd.DataFrame, *fea_ana_cls):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 27039, 25, 279, 67, 13, 6601, 19778, 11, 1635, 5036, 64, 62, 2271, 62, 565, 82, 2599]"
üß† ML Signal: Iterating over dataset columns for plotting,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 27039, 15180, 329, 29353]",0.5,146,ml_signal,34,Iterating over dataset columns for plotting,,118,"            raise NotImplementedError(f""This type of input is not supported"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7, 69, 1, 1212, 2099, 286, 5128, 318, 407, 4855, 4943]"
‚úÖ Best Practice: Check if a column should be skipped,"[26486, 227, 6705, 19939, 25, 6822, 611, 257, 5721, 815, 307, 26684]",0.5,167,best_practice,36,Check if a column should be skipped,,146,        super().__init__(dataset=dataset),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 19608, 292, 316, 28, 19608, 292, 316, 8]"
‚úÖ Best Practice: Use of next() to get the next item from the iterator,"[26486, 227, 6705, 19939, 25, 5765, 286, 1306, 3419, 284, 651, 262, 1306, 2378, 422, 262, 41313]",0.5,177,best_practice,38,Use of next() to get the next item from the iterator,,167,"    def skip(self, col):","[220, 220, 220, 825, 14267, 7, 944, 11, 951, 2599]"
üß† ML Signal: Iterating over feature analysis list for plotting,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 3895, 3781, 1351, 329, 29353]",0.5,177,ml_signal,40,Iterating over feature analysis list for plotting,,177,,[]
‚úÖ Best Practice: Check if a feature analysis should be skipped,"[26486, 227, 6705, 19939, 25, 6822, 611, 257, 3895, 3781, 815, 307, 26684]",0.5,197,best_practice,42,Check if a feature analysis should be skipped,,177,"        """"""The statistics of features are finished in the underlying analysers""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 464, 7869, 286, 3033, 389, 5201, 287, 262, 10238, 11090, 364, 37811]"
üß† ML Signal: Plotting a single feature analysis,"[8582, 100, 254, 10373, 26484, 25, 28114, 889, 257, 2060, 3895, 3781]",0.5,214,ml_signal,44,Plotting a single feature analysis,,197,"    def plot_all(self, *args, **kwargs):","[220, 220, 220, 825, 7110, 62, 439, 7, 944, 11, 1635, 22046, 11, 12429, 46265, 22046, 2599]"
‚úÖ Best Practice: Clearing axis labels and titles for cleaner plots,"[26486, 227, 6705, 19939, 25, 3779, 1723, 16488, 14722, 290, 8714, 329, 21723, 21528]",0.5,214,best_practice,46,Clearing axis labels and titles for cleaner plots,,214,,[]
‚úÖ Best Practice: Setting the title for the first axis in the group,"[26486, 227, 6705, 19939, 25, 25700, 262, 3670, 329, 262, 717, 16488, 287, 262, 1448]",0.5,237,best_practice,49,Setting the title for the first axis in the group,,214,                axes = next(ax_gen),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 34197, 796, 1306, 7, 897, 62, 5235, 8]"
‚úÖ Best Practice: Class should have a docstring explaining its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 8748]",0.5,237,best_practice,43,Class should have a docstring explaining its purpose and usage,,237,,[]
üß† ML Signal: Checking if a column is of object type to decide processing steps,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 257, 5721, 318, 286, 2134, 2099, 284, 5409, 7587, 4831]",0.5,254,ml_signal,44,Checking if a column is of object type to decide processing steps,,237,"    def plot_all(self, *args, **kwargs):","[220, 220, 220, 825, 7110, 62, 439, 7, 944, 11, 1635, 22046, 11, 12429, 46265, 22046, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential information exposure through logging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 7111, 832, 18931]",1.0,254,sast_risk,46,Potential information exposure through logging,Low,254,,[]
"üß† ML Signal: Inheritance from a class, indicating a potential pattern of class extension","[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 257, 1398, 11, 12739, 257, 2785, 3912, 286, 1398, 7552]",0.5,273,ml_signal,48,"Inheritance from a class, indicating a potential pattern of class extension",,254,            if not self.skip(col):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13, 48267, 7, 4033, 2599]"
‚úÖ Best Practice: Use type hints for function parameters to improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 2099, 20269, 329, 2163, 10007, 284, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,306,best_practice,50,Use type hints for function parameters to improve code readability and maintainability.,,273,"                for fa, ax in zip(self._fea_ana_l, axes):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 24685, 11, 7877, 287, 19974, 7, 944, 13557, 5036, 64, 62, 2271, 62, 75, 11, 34197, 2599]"
‚úÖ Best Practice: Explicitly call the superclass's __init__ method to ensure proper initialization.,"[26486, 227, 6705, 19939, 25, 11884, 306, 869, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 284, 4155, 1774, 37588, 13]",0.5,339,best_practice,52,Explicitly call the superclass's __init__ method to ensure proper initialization.,,306,"                        fa.plot_single(col, ax)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24685, 13, 29487, 62, 29762, 7, 4033, 11, 7877, 8]"
üß† ML Signal: Iterating over dataset columns to calculate statistics,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 27039, 15180, 284, 15284, 7869]",1.0,364,ml_signal,55,Iterating over dataset columns to calculate statistics,,339,                axes[0].set_title(col),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 34197, 58, 15, 4083, 2617, 62, 7839, 7, 4033, 8]"
üß† ML Signal: Conditional logic to skip certain columns,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 14267, 1728, 15180]",1.0,364,ml_signal,57,Conditional logic to skip certain columns,,364,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if DT_COL_NAME is user-controlled and not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 24311, 62, 25154, 62, 20608, 318, 2836, 12, 14401, 290, 407, 31031]",1.0,374,sast_risk,59,Potential risk if DT_COL_NAME is user-controlled and not validated,Low,364,"    def skip(self, col):","[220, 220, 220, 825, 14267, 7, 944, 11, 951, 2599]"
‚úÖ Best Practice: Convert dictionary to DataFrame for better data manipulation,"[26486, 227, 6705, 19939, 25, 38240, 22155, 284, 6060, 19778, 329, 1365, 1366, 17512]",1.0,386,best_practice,61,Convert dictionary to DataFrame for better data manipulation,,374,        if is_obj:,"[220, 220, 220, 220, 220, 220, 220, 611, 318, 62, 26801, 25]"
‚ö†Ô∏è SAST Risk (Low): Division by zero risk if group size is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7458, 416, 6632, 2526, 611, 1448, 2546, 318, 6632]",0.5,386,sast_risk,64,Division by zero risk if group size is zero,Low,386,,[]
‚úÖ Best Practice: Calculate min and max for setting plot limits,"[26486, 227, 6705, 19939, 25, 27131, 378, 949, 290, 3509, 329, 4634, 7110, 7095]",1.0,397,best_practice,66,Calculate min and max for setting plot limits,,386,class ValueCNT(FeaAnalyser):,"[4871, 11052, 34, 11251, 7, 14304, 64, 2025, 26266, 263, 2599]"
‚úÖ Best Practice: Extend plot limits slightly for better visualization,"[26486, 227, 6705, 19939, 25, 46228, 7110, 7095, 4622, 329, 1365, 32704]",0.5,410,best_practice,68,Extend plot limits slightly for better visualization,,397,        self.ratio = ratio,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 10366, 952, 796, 8064]"
"üß† ML Signal: Method for plotting data, indicating usage of visualization libraries","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 29353, 1366, 11, 12739, 8748, 286, 32704, 12782]",0.5,421,ml_signal,63,"Method for plotting data, indicating usage of visualization libraries",,410,        return is_obj,"[220, 220, 220, 220, 220, 220, 220, 1441, 318, 62, 26801]"
‚úÖ Best Practice: Use of instance variable self._val_cnt suggests encapsulation and object-oriented design,"[26486, 227, 6705, 19939, 25, 5765, 286, 4554, 7885, 2116, 13557, 2100, 62, 66, 429, 5644, 32652, 1741, 290, 2134, 12, 17107, 1486]",0.5,421,best_practice,64,Use of instance variable self._val_cnt suggests encapsulation and object-oriented design,,421,,[]
‚úÖ Best Practice: Setting the x-label to an empty string for cleaner plots,"[26486, 227, 6705, 19939, 25, 25700, 262, 2124, 12, 18242, 284, 281, 6565, 4731, 329, 21723, 21528]",1.0,432,best_practice,66,Setting the x-label to an empty string for cleaner plots,,421,class ValueCNT(FeaAnalyser):,"[4871, 11052, 34, 11251, 7, 14304, 64, 2025, 26266, 263, 2599]"
"üß† ML Signal: Inheritance from a base class, indicating a pattern of extending functionality","[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 257, 2779, 1398, 11, 12739, 257, 3912, 286, 16610, 11244]",0.5,443,ml_signal,66,"Inheritance from a base class, indicating a pattern of extending functionality",,432,class ValueCNT(FeaAnalyser):,"[4871, 11052, 34, 11251, 7, 14304, 64, 2025, 26266, 263, 2599]"
üß† ML Signal: Method for plotting a single column from a dataset,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 29353, 257, 2060, 5721, 422, 257, 27039]",0.5,454,ml_signal,66,Method for plotting a single column from a dataset,,443,class ValueCNT(FeaAnalyser):,"[4871, 11052, 34, 11251, 7, 14304, 64, 2025, 26266, 263, 2599]"
üß† ML Signal: Use of seaborn for histogram plotting,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 384, 397, 1211, 329, 1554, 21857, 29353]",0.5,467,ml_signal,68,Use of seaborn for histogram plotting,,454,        self.ratio = ratio,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 10366, 952, 796, 8064]"
‚úÖ Best Practice: Clear x-label for cleaner plot presentation,"[26486, 227, 6705, 19939, 25, 11459, 2124, 12, 18242, 329, 21723, 7110, 10470]",0.5,467,best_practice,70,Clear x-label for cleaner plot presentation,,467,,[]
‚úÖ Best Practice: Set title to the column name for context,"[26486, 227, 6705, 19939, 25, 5345, 3670, 284, 262, 5721, 1438, 329, 4732]",0.5,482,best_practice,72,Set title to the column name for context,,467,        self._val_cnt = {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 2100, 62, 66, 429, 796, 23884]"
‚úÖ Best Practice: Use of 'super()' to call a method from the parent class,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 16668, 3419, 6, 284, 869, 257, 2446, 422, 262, 2560, 1398]",0.5,501,best_practice,74,Use of 'super()' to call a method from the parent class,,482,            if not super().skip(col):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 2208, 22446, 48267, 7, 4033, 2599]"
"‚ö†Ô∏è SAST Risk (Low): Use of deprecated 'np.int', consider using 'int' or 'np.int64'","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 39224, 705, 37659, 13, 600, 3256, 2074, 1262, 705, 600, 6, 393, 705, 37659, 13, 600, 2414, 6]",1.0,528,sast_risk,76,"Use of deprecated 'np.int', consider using 'int' or 'np.int64'",Low,501,        self._val_cnt = pd.DataFrame(self._val_cnt),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 2100, 62, 66, 429, 796, 279, 67, 13, 6601, 19778, 7, 944, 13557, 2100, 62, 66, 429, 8]"
"üß† ML Signal: Conversion of dictionary to DataFrame, indicating data transformation","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 22155, 284, 6060, 19778, 11, 12739, 1366, 13389]",0.5,582,ml_signal,78,"Conversion of dictionary to DataFrame, indicating data transformation",,528,"            self._val_cnt = self._val_cnt.div(self._dataset.groupby(DT_COL_NAME, group_keys=False).size(), axis=0)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 2100, 62, 66, 429, 796, 2116, 13557, 2100, 62, 66, 429, 13, 7146, 7, 944, 13557, 19608, 292, 316, 13, 8094, 1525, 7, 24544, 62, 25154, 62, 20608, 11, 1448, 62, 13083, 28, 25101, 737, 7857, 22784, 16488, 28, 15, 8]"
‚úÖ Best Practice: Method should have a docstring explaining its purpose and parameters,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 10007]",1.0,595,best_practice,77,Method should have a docstring explaining its purpose and parameters,,582,        if self.ratio:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 10366, 952, 25]"
üß† ML Signal: Usage of 'not in' to check for key existence in a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 1662, 287, 6, 284, 2198, 329, 1994, 6224, 287, 257, 22155]",0.5,595,ml_signal,79,Usage of 'not in' to check for key existence in a dictionary,,595,,[]
üß† ML Signal: Use of logical operators to combine conditions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12219, 12879, 284, 12082, 3403]",1.0,613,ml_signal,80,Use of logical operators to combine conditions,,595,        # TODO: transfer this feature to other analysers,"[220, 220, 220, 220, 220, 220, 220, 1303, 16926, 46, 25, 4351, 428, 3895, 284, 584, 11090, 364]"
"üß† ML Signal: Method for plotting data, indicating usage of visualization libraries","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 29353, 1366, 11, 12739, 8748, 286, 32704, 12782]",0.5,631,ml_signal,80,"Method for plotting data, indicating usage of visualization libraries",,613,        # TODO: transfer this feature to other analysers,"[220, 220, 220, 220, 220, 220, 220, 1303, 16926, 46, 25, 4351, 428, 3895, 284, 584, 11090, 364]"
‚úÖ Best Practice: Setting the x-label to an empty string for cleaner plots,"[26486, 227, 6705, 19939, 25, 25700, 262, 2124, 12, 18242, 284, 281, 6565, 4731, 329, 21723, 21528]",0.5,672,best_practice,82,Setting the x-label to an empty string for cleaner plots,,631,"        self.ylim = (ymin - 0.05 * (ymax - ymin), ymax + 0.05 * (ymax - ymin))","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 88, 2475, 796, 357, 88, 1084, 532, 657, 13, 2713, 1635, 357, 4948, 897, 532, 331, 1084, 828, 331, 9806, 1343, 657, 13, 2713, 1635, 357, 4948, 897, 532, 331, 1084, 4008]"
‚úÖ Best Practice: Class should have a docstring explaining its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 8748]",0.5,713,best_practice,82,Class should have a docstring explaining its purpose and usage,,672,"        self.ylim = (ymin - 0.05 * (ymax - ymin), ymax + 0.05 * (ymax - ymin))","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 88, 2475, 796, 357, 88, 1084, 532, 657, 13, 2713, 1635, 357, 4948, 897, 532, 331, 1084, 828, 331, 9806, 1343, 657, 13, 2713, 1635, 357, 4948, 897, 532, 331, 1084, 4008]"
"üß† ML Signal: Method name suggests statistical calculation, indicating a pattern of data analysis","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 13905, 17952, 11, 12739, 257, 3912, 286, 1366, 3781]",0.5,713,ml_signal,83,"Method name suggests statistical calculation, indicating a pattern of data analysis",,713,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for large data processing without error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1588, 1366, 7587, 1231, 4049, 9041]",0.5,747,sast_risk,85,Potential for large data processing without error handling,Low,713,"        self._val_cnt[col].plot(ax=ax, title=col, ylim=self.ylim)","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 2100, 62, 66, 429, 58, 4033, 4083, 29487, 7, 897, 28, 897, 11, 3670, 28, 4033, 11, 331, 2475, 28, 944, 13, 88, 2475, 8]"
üß† ML Signal: Use of isna() and groupby() indicates data cleaning and aggregation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2125, 64, 3419, 290, 1448, 1525, 3419, 9217, 1366, 12724, 290, 46500]",0.5,762,ml_signal,86,Use of isna() and groupby() indicates data cleaning and aggregation,,747,"        ax.set_xlabel("""")","[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 87, 18242, 7203, 4943]"
‚úÖ Best Practice: Consider adding error handling for dataset operations,"[26486, 227, 6705, 19939, 25, 12642, 4375, 4049, 9041, 329, 27039, 4560]",0.5,762,best_practice,87,Consider adding error handling for dataset operations,,762,,[]
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the function,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163]",0.5,796,best_practice,85,Consider adding a docstring to describe the purpose and usage of the function,,762,"        self._val_cnt[col].plot(ax=ax, title=col, ylim=self.ylim)","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 2100, 62, 66, 429, 58, 4033, 4083, 29487, 7, 897, 28, 897, 11, 3670, 28, 4033, 11, 331, 2475, 28, 944, 13, 88, 2475, 8]"
üß† ML Signal: Usage of 'not in' to check for key existence in a dictionary,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 1662, 287, 6, 284, 2198, 329, 1994, 6224, 287, 257, 22155]",1.0,796,ml_signal,87,Usage of 'not in' to check for key existence in a dictionary,,796,,[]
üß† ML Signal: Logical OR operation to combine conditions,"[8582, 100, 254, 10373, 26484, 25, 5972, 605, 6375, 4905, 284, 12082, 3403]",1.0,796,ml_signal,88,Logical OR operation to combine conditions,,796,,[]
‚úÖ Best Practice: Use parentheses for clarity in complex logical expressions,"[26486, 227, 6705, 19939, 25, 5765, 46672, 329, 16287, 287, 3716, 12219, 14700]",0.5,810,best_practice,89,Use parentheses for clarity in complex logical expressions,,796,class FeaDistAna(NumFeaAnalyser):,"[4871, 5452, 64, 20344, 2025, 64, 7, 33111, 14304, 64, 2025, 26266, 263, 2599]"
"üß† ML Signal: Method for plotting data, indicating usage of visualization libraries","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 29353, 1366, 11, 12739, 8748, 286, 32704, 12782]",0.5,810,ml_signal,88,"Method for plotting data, indicating usage of visualization libraries",,810,,[]
‚úÖ Best Practice: Accessing instance variable _nan_cnt suggests encapsulation of data,"[26486, 227, 6705, 19939, 25, 8798, 278, 4554, 7885, 4808, 12647, 62, 66, 429, 5644, 32652, 1741, 286, 1366]",1.0,824,best_practice,89,Accessing instance variable _nan_cnt suggests encapsulation of data,,810,class FeaDistAna(NumFeaAnalyser):,"[4871, 5452, 64, 20344, 2025, 64, 7, 33111, 14304, 64, 2025, 26266, 263, 2599]"
‚úÖ Best Practice: Setting the x-label to an empty string for cleaner plots,"[26486, 227, 6705, 19939, 25, 25700, 262, 2124, 12, 18242, 284, 281, 6565, 4731, 329, 21723, 21528]",1.0,858,best_practice,91,Setting the x-label to an empty string for cleaner plots,,824,"        sns.histplot(self._dataset[col], ax=ax, kde=False, bins=100)","[220, 220, 220, 220, 220, 220, 220, 3013, 82, 13, 10034, 29487, 7, 944, 13557, 19608, 292, 316, 58, 4033, 4357, 7877, 28, 897, 11, 479, 2934, 28, 25101, 11, 41701, 28, 3064, 8]"
üß† ML Signal: Method for calculating statistics on a dataset,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 26019, 7869, 319, 257, 27039]",1.0,892,ml_signal,91,Method for calculating statistics on a dataset,,858,"        sns.histplot(self._dataset[col], ax=ax, kde=False, bins=100)","[220, 220, 220, 220, 220, 220, 220, 3013, 82, 13, 10034, 29487, 7, 944, 13557, 19608, 292, 316, 58, 4033, 4357, 7877, 28, 897, 11, 479, 2934, 28, 25101, 11, 41701, 28, 3064, 8]"
üß† ML Signal: Counting NaN values in the dataset,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 11013, 45, 3815, 287, 262, 27039]",1.0,907,ml_signal,93,Counting NaN values in the dataset,,892,        ax.set_title(col),"[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 7839, 7, 4033, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for large memory usage with large datasets,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1588, 4088, 8748, 351, 1588, 40522]",1.0,907,sast_risk,94,Potential for large memory usage with large datasets,Low,907,,[]
üß† ML Signal: Counting total entries in the dataset,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 2472, 12784, 287, 262, 27039]",1.0,921,ml_signal,96,Counting total entries in the dataset,,907,class FeaInfAna(NumFeaAnalyser):,"[4871, 5452, 64, 18943, 2025, 64, 7, 33111, 14304, 64, 2025, 26266, 263, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential for large memory usage with large datasets,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1588, 4088, 8748, 351, 1588, 40522]",1.0,933,sast_risk,97,Potential for large memory usage with large datasets,Low,921,    def calc_stat_values(self):,"[220, 220, 220, 825, 42302, 62, 14269, 62, 27160, 7, 944, 2599]"
‚úÖ Best Practice: Method should have a docstring explaining its purpose and parameters,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 10007]",0.5,933,best_practice,94,Method should have a docstring explaining its purpose and parameters,,933,,[]
üß† ML Signal: Checking if a column is in a dictionary,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 257, 5721, 318, 287, 257, 22155]",0.5,947,ml_signal,96,Checking if a column is in a dictionary,,933,class FeaInfAna(NumFeaAnalyser):,"[4871, 5452, 64, 18943, 2025, 64, 7, 33111, 14304, 64, 2025, 26266, 263, 2599]"
üß† ML Signal: Using logical operators to combine conditions,"[8582, 100, 254, 10373, 26484, 25, 8554, 12219, 12879, 284, 12082, 3403]",0.5,959,ml_signal,97,Using logical operators to combine conditions,,947,    def calc_stat_values(self):,"[220, 220, 220, 825, 42302, 62, 14269, 62, 27160, 7, 944, 2599]"
üß† ML Signal: Usage of plotting function indicates data visualization behavior,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 29353, 2163, 9217, 1366, 32704, 4069]",1.0,971,ml_signal,97,Usage of plotting function indicates data visualization behavior,,959,    def calc_stat_values(self):,"[220, 220, 220, 825, 42302, 62, 14269, 62, 27160, 7, 944, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential for division by zero if self._total_cnt is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 7297, 416, 6632, 611, 2116, 13557, 23350, 62, 66, 429, 318, 6632]",1.0,986,sast_risk,98,Potential for division by zero if self._total_cnt is zero,Low,971,        self._inf_cnt = {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 10745, 62, 66, 429, 796, 23884]"
‚úÖ Best Practice: Setting xlabel to an empty string for cleaner plot presentation,"[26486, 227, 6705, 19939, 25, 25700, 2124, 18242, 284, 281, 6565, 4731, 329, 21723, 7110, 10470]",1.0,1005,best_practice,100,Setting xlabel to an empty string for cleaner plot presentation,,986,            if not super().skip(col):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 2208, 22446, 48267, 7, 4033, 2599]"
‚úÖ Best Practice: Class docstring provides a brief description of the class purpose,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4007]",1.0,1063,best_practice,101,Class docstring provides a brief description of the class purpose,,1005,"                self._inf_cnt[col] = item.apply(np.isinf).astype(np.int).groupby(DT_COL_NAME, group_keys=False).sum()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 10745, 62, 66, 429, 58, 4033, 60, 796, 2378, 13, 39014, 7, 37659, 13, 271, 10745, 737, 459, 2981, 7, 37659, 13, 600, 737, 8094, 1525, 7, 24544, 62, 25154, 62, 20608, 11, 1448, 62, 13083, 28, 25101, 737, 16345, 3419]"
üß† ML Signal: Method calculating statistical values from dataset,"[8582, 100, 254, 10373, 26484, 25, 11789, 26019, 13905, 3815, 422, 27039]",1.0,1121,ml_signal,101,Method calculating statistical values from dataset,,1063,"                self._inf_cnt[col] = item.apply(np.isinf).astype(np.int).groupby(DT_COL_NAME, group_keys=False).sum()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 10745, 62, 66, 429, 58, 4033, 60, 796, 2378, 13, 39014, 7, 37659, 13, 271, 10745, 737, 459, 2981, 7, 37659, 13, 600, 737, 8094, 1525, 7, 24544, 62, 25154, 62, 20608, 11, 1448, 62, 13083, 28, 25101, 737, 16345, 3419]"
üß† ML Signal: Usage of a method to calculate autocorrelation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 15284, 1960, 420, 273, 49501]",1.0,1121,ml_signal,103,Usage of a method to calculate autocorrelation,,1121,,[]
‚úÖ Best Practice: Converting correlation results to a DataFrame for easier manipulation,"[26486, 227, 6705, 19939, 25, 35602, 889, 16096, 2482, 284, 257, 6060, 19778, 329, 4577, 17512]",1.0,1156,best_practice,105,Converting correlation results to a DataFrame for easier manipulation,,1121,        return (col not in self._inf_cnt) or (self._inf_cnt[col].sum() == 0),"[220, 220, 220, 220, 220, 220, 220, 1441, 357, 4033, 407, 287, 2116, 13557, 10745, 62, 66, 429, 8, 393, 357, 944, 13557, 10745, 62, 66, 429, 58, 4033, 4083, 16345, 3419, 6624, 657, 8]"
‚úÖ Best Practice: Calculating min and max values for setting plot limits,"[26486, 227, 6705, 19939, 25, 27131, 803, 949, 290, 3509, 3815, 329, 4634, 7110, 7095]",1.0,1170,best_practice,107,Calculating min and max values for setting plot limits,,1156,"    def plot_single(self, col, ax):","[220, 220, 220, 825, 7110, 62, 29762, 7, 944, 11, 951, 11, 7877, 2599]"
‚úÖ Best Practice: Setting y-axis limits with a margin for better visualization,"[26486, 227, 6705, 19939, 25, 25700, 331, 12, 22704, 7095, 351, 257, 10330, 329, 1365, 32704]",1.0,1185,best_practice,109,Setting y-axis limits with a margin for better visualization,,1170,"        ax.set_xlabel("""")","[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 87, 18242, 7203, 4943]"
"üß† ML Signal: Method for plotting data, useful for understanding data visualization patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 29353, 1366, 11, 4465, 329, 4547, 1366, 32704, 7572]",1.0,1185,ml_signal,106,"Method for plotting data, useful for understanding data visualization patterns",,1185,,[]
"üß† ML Signal: Accessing a specific column for plotting, indicating feature importance","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 2176, 5721, 329, 29353, 11, 12739, 3895, 6817]",0.5,1211,ml_signal,108,"Accessing a specific column for plotting, indicating feature importance",,1185,"        self._inf_cnt[col].plot(ax=ax, title=col)","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 10745, 62, 66, 429, 58, 4033, 4083, 29487, 7, 897, 28, 897, 11, 3670, 28, 4033, 8]"
‚úÖ Best Practice: Setting x-label to an empty string for cleaner plots,"[26486, 227, 6705, 19939, 25, 25700, 2124, 12, 18242, 284, 281, 6565, 4731, 329, 21723, 21528]",1.0,1211,best_practice,110,Setting x-label to an empty string for cleaner plots,,1211,,[]
üß† ML Signal: Inheritance from NumFeaAnalyser indicates a pattern of extending functionality,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 31835, 14304, 64, 2025, 26266, 263, 9217, 257, 3912, 286, 16610, 11244]",0.5,1211,ml_signal,110,Inheritance from NumFeaAnalyser indicates a pattern of extending functionality,,1211,,[]
üß† ML Signal: Method usage pattern for calculating skewness,"[8582, 100, 254, 10373, 26484, 25, 11789, 8748, 3912, 329, 26019, 6146, 675, 408]",1.0,1211,ml_signal,111,Method usage pattern for calculating skewness,,1211,,[]
üß† ML Signal: Method usage pattern for calculating kurtosis,"[8582, 100, 254, 10373, 26484, 25, 11789, 8748, 3912, 329, 26019, 479, 3325, 5958]",1.0,1223,ml_signal,113,Method usage pattern for calculating kurtosis,,1211,    def calc_stat_values(self):,"[220, 220, 220, 825, 42302, 62, 14269, 62, 27160, 7, 944, 2599]"
"üß† ML Signal: Method for plotting data, useful for understanding data visualization patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 29353, 1366, 11, 4465, 329, 4547, 1366, 32704, 7572]",1.0,1263,ml_signal,114,"Method for plotting data, useful for understanding data visualization patterns",,1223,"        self._nan_cnt = self._dataset.isna().groupby(DT_COL_NAME, group_keys=False).sum()","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 12647, 62, 66, 429, 796, 2116, 13557, 19608, 292, 316, 13, 271, 2616, 22446, 8094, 1525, 7, 24544, 62, 25154, 62, 20608, 11, 1448, 62, 13083, 28, 25101, 737, 16345, 3419]"
‚úÖ Best Practice: Clear axis labels improve plot readability,"[26486, 227, 6705, 19939, 25, 11459, 16488, 14722, 2987, 7110, 1100, 1799]",1.0,1273,best_practice,116,Clear axis labels improve plot readability,,1263,"    def skip(self, col):","[220, 220, 220, 825, 14267, 7, 944, 11, 951, 2599]"
‚úÖ Best Practice: Clear axis labels improve plot readability,"[26486, 227, 6705, 19939, 25, 11459, 16488, 14722, 2987, 7110, 1100, 1799]",1.0,1273,best_practice,118,Clear axis labels improve plot readability,,1273,,[]
‚úÖ Best Practice: Use of twin axes for different data series,"[26486, 227, 6705, 19939, 25, 5765, 286, 15203, 34197, 329, 1180, 1366, 2168]",1.0,1288,best_practice,121,Use of twin axes for different data series,,1273,"        ax.set_xlabel("""")","[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 87, 18242, 7203, 4943]"
‚úÖ Best Practice: Clear axis labels improve plot readability,"[26486, 227, 6705, 19939, 25, 11459, 16488, 14722, 2987, 7110, 1100, 1799]",1.0,1304,best_practice,124,Clear axis labels improve plot readability,,1288,class FeaNanAnaRatio(FeaAnalyser):,"[4871, 5452, 64, 45, 272, 2025, 64, 29665, 952, 7, 14304, 64, 2025, 26266, 263, 2599]"
‚úÖ Best Practice: Clear axis labels improve plot readability,"[26486, 227, 6705, 19939, 25, 11459, 16488, 14722, 2987, 7110, 1100, 1799]",1.0,1344,best_practice,126,Clear axis labels improve plot readability,,1304,"        self._nan_cnt = self._dataset.isna().groupby(DT_COL_NAME, group_keys=False).sum()","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 12647, 62, 66, 429, 796, 2116, 13557, 19608, 292, 316, 13, 271, 2616, 22446, 8094, 1525, 7, 24544, 62, 25154, 62, 20608, 11, 1448, 62, 13083, 28, 25101, 737, 16345, 3419]"
‚úÖ Best Practice: Disabling grid for secondary axis to reduce clutter,"[26486, 227, 6705, 19939, 25, 3167, 11716, 10706, 329, 9233, 16488, 284, 4646, 45343]",1.0,1344,best_practice,128,Disabling grid for secondary axis to reduce clutter,,1344,,[]
‚úÖ Best Practice: Hiding the first legend to combine legends later,"[26486, 227, 6705, 19939, 25, 367, 2530, 262, 717, 8177, 284, 12082, 24901, 1568]",0.5,1358,best_practice,132,Hiding the first legend to combine legends later,,1344,"    def plot_single(self, col, ax):","[220, 220, 220, 825, 7110, 62, 29762, 7, 944, 11, 951, 11, 7877, 2599]"
‚úÖ Best Practice: Combining legends from both axes for clarity,"[26486, 227, 6705, 19939, 25, 14336, 3191, 24901, 422, 1111, 34197, 329, 16287]",0.5,1373,best_practice,134,Combining legends from both axes for clarity,,1358,"        ax.set_xlabel("""")","[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 87, 18242, 7203, 4943]"
‚úÖ Best Practice: Setting a title for the plot for context,"[26486, 227, 6705, 19939, 25, 25700, 257, 3670, 329, 262, 7110, 329, 4732]",1.0,1373,best_practice,136,Setting a title for the plot for context,,1373,,[]
‚úÖ Best Practice: Method name should be descriptive of its functionality,"[26486, 227, 6705, 19939, 25, 11789, 1438, 815, 307, 35644, 286, 663, 11244]",0.5,1383,best_practice,129,Method name should be descriptive of its functionality,,1373,"    def skip(self, col):","[220, 220, 220, 825, 14267, 7, 944, 11, 951, 2599]"
üß† ML Signal: Use of groupby operation on a dataset,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1448, 1525, 4905, 319, 257, 27039]",0.5,1383,ml_signal,131,Use of groupby operation on a dataset,,1383,,[]
‚úÖ Best Practice: Use of group_keys=False for efficiency,"[26486, 227, 6705, 19939, 25, 5765, 286, 1448, 62, 13083, 28, 25101, 329, 9332]",0.5,1397,best_practice,132,Use of group_keys=False for efficiency,,1383,"    def plot_single(self, col, ax):","[220, 220, 220, 825, 7110, 62, 29762, 7, 944, 11, 951, 11, 7877, 2599]"
üß† ML Signal: Use of groupby operation on a dataset,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1448, 1525, 4905, 319, 257, 27039]",0.5,1412,ml_signal,134,Use of groupby operation on a dataset,,1397,"        ax.set_xlabel("""")","[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 87, 18242, 7203, 4943]"
‚úÖ Best Practice: Use of group_keys=False for efficiency,"[26486, 227, 6705, 19939, 25, 5765, 286, 1448, 62, 13083, 28, 25101, 329, 9332]",0.5,1412,best_practice,135,Use of group_keys=False for efficiency,,1412,,[]
üß† ML Signal: Usage of plotting functions indicates data visualization patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 29353, 5499, 9217, 1366, 32704, 7572]",1.0,1447,ml_signal,133,Usage of plotting functions indicates data visualization patterns,,1412,"        (self._nan_cnt[col] / self._total_cnt).plot(ax=ax, title=col)","[220, 220, 220, 220, 220, 220, 220, 357, 944, 13557, 12647, 62, 66, 429, 58, 4033, 60, 1220, 2116, 13557, 23350, 62, 66, 429, 737, 29487, 7, 897, 28, 897, 11, 3670, 28, 4033, 8]"
‚úÖ Best Practice: Clear axis labels improve plot readability,"[26486, 227, 6705, 19939, 25, 11459, 16488, 14722, 2987, 7110, 1100, 1799]",1.0,1447,best_practice,135,Clear axis labels improve plot readability,,1447,,[]
‚úÖ Best Practice: Clear axis labels improve plot readability,"[26486, 227, 6705, 19939, 25, 11459, 16488, 14722, 2987, 7110, 1100, 1799]",1.0,1460,best_practice,137,Clear axis labels improve plot readability,,1447,class FeaACAna(FeaAnalyser):,"[4871, 5452, 64, 2246, 2025, 64, 7, 14304, 64, 2025, 26266, 263, 2599]"
‚úÖ Best Practice: Adding a legend improves plot interpretability,"[26486, 227, 6705, 19939, 25, 18247, 257, 8177, 19575, 7110, 6179, 1799]",0.5,1460,best_practice,139,Adding a legend improves plot interpretability,,1460,,[]
‚úÖ Best Practice: Rotating x-axis labels improves readability for dense data,"[26486, 227, 6705, 19939, 25, 18481, 803, 2124, 12, 22704, 14722, 19575, 1100, 1799, 329, 15715, 1366]",1.0,1495,best_practice,141,Rotating x-axis labels improves readability for dense data,,1460,"        self._fea_corr = pred_autocorr_all(self._dataset.to_dict(""series""))","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5036, 64, 62, 10215, 81, 796, 2747, 62, 2306, 420, 38890, 62, 439, 7, 944, 13557, 19608, 292, 316, 13, 1462, 62, 11600, 7203, 25076, 48774]"
üß† ML Signal: Usage of twin axes indicates advanced plotting techniques,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 15203, 34197, 9217, 6190, 29353, 7605]",0.5,1520,ml_signal,143,Usage of twin axes indicates advanced plotting techniques,,1495,"        ymin, ymax = df.min().min(), df.max().max()","[220, 220, 220, 220, 220, 220, 220, 331, 1084, 11, 331, 9806, 796, 47764, 13, 1084, 22446, 1084, 22784, 47764, 13, 9806, 22446, 9806, 3419]"
üß† ML Signal: Usage of plotting functions indicates data visualization patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 29353, 5499, 9217, 1366, 32704, 7572]",1.0,1520,ml_signal,145,Usage of plotting functions indicates data visualization patterns,,1520,,[]
‚úÖ Best Practice: Clear axis labels improve plot readability,"[26486, 227, 6705, 19939, 25, 11459, 16488, 14722, 2987, 7110, 1100, 1799]",1.0,1555,best_practice,147,Clear axis labels improve plot readability,,1520,"        self._fea_corr[col].plot(ax=ax, title=col, ylim=self.ylim)","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5036, 64, 62, 10215, 81, 58, 4033, 4083, 29487, 7, 897, 28, 897, 11, 3670, 28, 4033, 11, 331, 2475, 28, 944, 13, 88, 2475, 8]"
‚úÖ Best Practice: Clear axis labels improve plot readability,"[26486, 227, 6705, 19939, 25, 11459, 16488, 14722, 2987, 7110, 1100, 1799]",1.0,1555,best_practice,149,Clear axis labels improve plot readability,,1555,,[]
‚úÖ Best Practice: Rotating x-axis labels improves readability for dense data,"[26486, 227, 6705, 19939, 25, 18481, 803, 2124, 12, 22704, 14722, 19575, 1100, 1799, 329, 15715, 1366]",1.0,1555,best_practice,150,Rotating x-axis labels improves readability for dense data,,1555,,[]
‚úÖ Best Practice: Disabling grid can improve plot clarity when not needed,"[26486, 227, 6705, 19939, 25, 3167, 11716, 10706, 460, 2987, 7110, 16287, 618, 407, 2622]",0.5,1590,best_practice,154,Disabling grid can improve plot clarity when not needed,,1555,"        self._kurt = datetime_groupby_apply(self._dataset, pd.DataFrame.kurt)","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 74, 3325, 796, 4818, 8079, 62, 8094, 1525, 62, 39014, 7, 944, 13557, 19608, 292, 316, 11, 279, 67, 13, 6601, 19778, 13, 74, 3325, 8]"
üß† ML Signal: Handling of legend objects indicates customization of plot appearance,"[8582, 100, 254, 10373, 26484, 25, 49500, 286, 8177, 5563, 9217, 31344, 286, 7110, 5585]",0.5,1590,ml_signal,155,Handling of legend objects indicates customization of plot appearance,,1590,,[]
‚úÖ Best Practice: Hiding redundant legends can reduce visual clutter,"[26486, 227, 6705, 19939, 25, 367, 2530, 30806, 24901, 460, 4646, 5874, 45343]",0.5,1605,best_practice,158,Hiding redundant legends can reduce visual clutter,,1590,"        ax.set_xlabel("""")","[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 87, 18242, 7203, 4943]"
‚úÖ Best Practice: Combining legends from multiple axes for clarity,"[26486, 227, 6705, 19939, 25, 14336, 3191, 24901, 422, 3294, 34197, 329, 16287]",0.5,1623,best_practice,159,Combining legends from multiple axes for clarity,,1605,"        ax.set_ylabel(""skew"")","[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 2645, 9608, 7203, 82, 365, 86, 4943]"
‚úÖ Best Practice: Setting a title improves plot context and understanding,"[26486, 227, 6705, 19939, 25, 25700, 257, 3670, 19575, 7110, 4732, 290, 4547]",0.5,1641,best_practice,159,Setting a title improves plot context and understanding,,1623,"        ax.set_ylabel(""skew"")","[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 2645, 9608, 7203, 82, 365, 86, 4943]"
‚úÖ Best Practice: Class docstring provides a clear explanation of the class purpose,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 7468, 286, 262, 1398, 4007]",0.5,1676,best_practice,154,Class docstring provides a clear explanation of the class purpose,,1641,"        self._kurt = datetime_groupby_apply(self._dataset, pd.DataFrame.kurt)","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 74, 3325, 796, 4818, 8079, 62, 8094, 1525, 62, 39014, 7, 944, 13557, 19608, 292, 316, 11, 279, 67, 13, 6601, 19778, 13, 74, 3325, 8]"
üß† ML Signal: Method for calculating statistical values from a dataset,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 26019, 13905, 3815, 422, 257, 27039]",1.0,1711,ml_signal,154,Method for calculating statistical values from a dataset,,1676,"        self._kurt = datetime_groupby_apply(self._dataset, pd.DataFrame.kurt)","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 74, 3325, 796, 4818, 8079, 62, 8094, 1525, 62, 39014, 7, 944, 13557, 19608, 292, 316, 11, 279, 67, 13, 6601, 19778, 13, 74, 3325, 8]"
üß† ML Signal: Usage of min and max functions to determine dataset range,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 949, 290, 3509, 5499, 284, 5004, 27039, 2837]",1.0,1725,ml_signal,156,Usage of min and max functions to determine dataset range,,1711,"    def plot_single(self, col, ax):","[220, 220, 220, 825, 7110, 62, 29762, 7, 944, 11, 951, 11, 7877, 2599]"
‚úÖ Best Practice: Store calculated limits in a tuple for clarity and immutability,"[26486, 227, 6705, 19939, 25, 9363, 10488, 7095, 287, 257, 46545, 329, 16287, 290, 2296, 315, 1799]",1.0,1740,best_practice,158,Store calculated limits in a tuple for clarity and immutability,,1725,"        ax.set_xlabel("""")","[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 87, 18242, 7203, 4943]"
"üß† ML Signal: Method for plotting data, indicating usage of visualization libraries","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 29353, 1366, 11, 12739, 8748, 286, 32704, 12782]",0.5,1755,ml_signal,158,"Method for plotting data, indicating usage of visualization libraries",,1740,"        ax.set_xlabel("""")","[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 87, 18242, 7203, 4943]"
‚úÖ Best Practice: Accessing class attribute self._dataset for data encapsulation,"[26486, 227, 6705, 19939, 25, 8798, 278, 1398, 11688, 2116, 13557, 19608, 292, 316, 329, 1366, 32652, 1741]",1.0,1773,best_practice,159,Accessing class attribute self._dataset for data encapsulation,,1755,"        ax.set_ylabel(""skew"")","[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 2645, 9608, 7203, 82, 365, 86, 4943]"
‚úÖ Best Practice: Setting x-label to an empty string for cleaner plots,"[26486, 227, 6705, 19939, 25, 25700, 2124, 12, 18242, 284, 281, 6565, 4731, 329, 21723, 21528]",1.0,1791,best_practice,159,Setting x-label to an empty string for cleaner plots,,1773,"        ax.set_ylabel(""skew"")","[220, 220, 220, 220, 220, 220, 220, 7877, 13, 2617, 62, 2645, 9608, 7203, 82, 365, 86, 4943]"

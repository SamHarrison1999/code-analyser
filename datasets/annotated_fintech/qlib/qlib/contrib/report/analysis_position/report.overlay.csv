annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
⚠️ SAST Risk (Medium): Relative import can lead to import errors if the module structure changes,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 45344, 1330, 460, 1085, 284, 1330, 8563, 611, 262, 8265, 4645, 2458]",0.5,7,sast_risk,2,Relative import can lead to import errors if the module structure changes,Medium,0,# Licensed under the MIT License.,"[2, 49962, 739, 262, 17168, 13789, 13]"
✅ Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,7,best_practice,3,Consider adding type hints for the function parameters and return type for better readability and maintainability.,,7,,[]
✅ Best Practice: Add more detailed docstring to describe the parameters and return values.,"[26486, 227, 6705, 19939, 25, 3060, 517, 6496, 2205, 8841, 284, 6901, 262, 10007, 290, 1441, 3815, 13]",0.5,11,best_practice,10,Add more detailed docstring to describe the parameters and return values.,,7,"    """"""","[220, 220, 220, 37227]"
⚠️ SAST Risk (Low): Potential KeyError if expected columns are missing from the DataFrame.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 2938, 15180, 389, 4814, 422, 262, 6060, 19778, 13]",0.5,11,sast_risk,11,Potential KeyError if expected columns are missing from the DataFrame.,Low,11,,[]
⚠️ SAST Risk (Low): Potential KeyError if expected columns are missing from the DataFrame.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 2938, 15180, 389, 4814, 422, 262, 6060, 19778, 13]",0.5,17,sast_risk,14,Potential KeyError if expected columns are missing from the DataFrame.,Low,11,    :return:,"[220, 220, 220, 1058, 7783, 25]"
⚠️ SAST Risk (Low): Potential KeyError if expected columns are missing from the DataFrame.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 2938, 15180, 389, 4814, 422, 262, 6060, 19778, 13]",0.5,48,sast_risk,17,Potential KeyError if expected columns are missing from the DataFrame.,Low,17,"        end_date = df[""cum_ex_return_wo_cost_mdd""].idxmin()","[220, 220, 220, 220, 220, 220, 220, 886, 62, 4475, 796, 47764, 14692, 36340, 62, 1069, 62, 7783, 62, 21638, 62, 15805, 62, 76, 1860, 1, 4083, 312, 87, 1084, 3419]"
⚠️ SAST Risk (Low): Potential KeyError if expected columns are missing from the DataFrame.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 2938, 15180, 389, 4814, 422, 262, 6060, 19778, 13]",0.5,79,sast_risk,17,Potential KeyError if expected columns are missing from the DataFrame.,Low,48,"        end_date = df[""cum_ex_return_wo_cost_mdd""].idxmin()","[220, 220, 220, 220, 220, 220, 220, 886, 62, 4475, 796, 47764, 14692, 36340, 62, 1069, 62, 7783, 62, 21638, 62, 15805, 62, 76, 1860, 1, 4083, 312, 87, 1084, 3419]"
"🧠 ML Signal: The function returns a tuple of start and end dates, which could be used to train models on time series data.","[8582, 100, 254, 10373, 26484, 25, 383, 2163, 5860, 257, 46545, 286, 923, 290, 886, 9667, 11, 543, 714, 307, 973, 284, 4512, 4981, 319, 640, 2168, 1366, 13]",1.0,90,ml_signal,22,"The function returns a tuple of start and end dates, which could be used to train models on time series data.",,79,"    return start_date, end_date","[220, 220, 220, 1441, 923, 62, 4475, 11, 886, 62, 4475]"
✅ Best Practice: Provide a more detailed docstring explaining the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 44290, 257, 517, 6496, 2205, 8841, 11170, 262, 2163, 338, 4007, 290, 10007, 13]",1.0,101,best_practice,22,Provide a more detailed docstring explaining the function's purpose and parameters.,,90,"    return start_date, end_date","[220, 220, 220, 1441, 923, 62, 4475, 11, 886, 62, 4475]"
"🧠 ML Signal: Use of pandas series operations, indicating familiarity with data manipulation libraries.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 2168, 4560, 11, 12739, 33065, 351, 1366, 17512, 12782, 13]",0.5,101,ml_signal,24,"Use of pandas series operations, indicating familiarity with data manipulation libraries.",,101,,[]
"🧠 ML Signal: Function processes a DataFrame and returns a transformed DataFrame, useful for learning data transformation patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 7767, 257, 6060, 19778, 290, 5860, 257, 14434, 6060, 19778, 11, 4465, 329, 4673, 1366, 13389, 7572]",0.5,101,ml_signal,23,"Function processes a DataFrame and returns a transformed DataFrame, useful for learning data transformation patterns",,101,,[]
"✅ Best Practice: Store original index names to restore them later, ensuring index integrity","[26486, 227, 6705, 19939, 25, 9363, 2656, 6376, 3891, 284, 11169, 606, 1568, 11, 13359, 6376, 11540]",0.5,108,best_practice,29,"Store original index names to restore them later, ensuring index integrity",,101,    :param series:,"[220, 220, 220, 1058, 17143, 2168, 25]"
⚠️ SAST Risk (Low): Modifying the DataFrame index in place can lead to data integrity issues if not handled carefully,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3401, 4035, 262, 6060, 19778, 6376, 287, 1295, 460, 1085, 284, 1366, 11540, 2428, 611, 407, 12118, 7773]",0.5,112,sast_risk,31,Modifying the DataFrame index in place can lead to data integrity issues if not handled carefully,Low,108,"    """"""","[220, 220, 220, 37227]"
"✅ Best Practice: Initialize an empty DataFrame for storing results, improving code readability","[26486, 227, 6705, 19939, 25, 20768, 1096, 281, 6565, 6060, 19778, 329, 23069, 2482, 11, 10068, 2438, 1100, 1799]",1.0,112,best_practice,33,"Initialize an empty DataFrame for storing results, improving code readability",,112,,[]
"🧠 ML Signal: Cumulative sum operations on DataFrame columns, common in financial data analysis","[8582, 100, 254, 10373, 26484, 25, 27843, 13628, 2160, 4560, 319, 6060, 19778, 15180, 11, 2219, 287, 3176, 1366, 3781]",0.5,137,ml_signal,35,"Cumulative sum operations on DataFrame columns, common in financial data analysis",,112,def _calculate_report_data(df: pd.DataFrame) -> pd.DataFrame:,"[4299, 4808, 9948, 3129, 378, 62, 13116, 62, 7890, 7, 7568, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
"🧠 ML Signal: Use of custom function to calculate maximum drawdown, indicating advanced financial metrics","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2183, 2163, 284, 15284, 5415, 3197, 2902, 11, 12739, 6190, 3176, 20731]",0.5,143,ml_signal,39,"Use of custom function to calculate maximum drawdown, indicating advanced financial metrics",,137,    :return:,"[220, 220, 220, 1058, 7783, 25]"
"🧠 ML Signal: Direct assignment of DataFrame columns, indicating data transformation","[8582, 100, 254, 10373, 26484, 25, 4128, 16237, 286, 6060, 19778, 15180, 11, 12739, 1366, 13389]",1.0,143,ml_signal,45,"Direct assignment of DataFrame columns, indicating data transformation",,143,,[]
"✅ Best Practice: Sorting the DataFrame by index to maintain order, improving data consistency","[26486, 227, 6705, 19939, 25, 311, 24707, 262, 6060, 19778, 416, 6376, 284, 5529, 1502, 11, 10068, 1366, 15794]",0.5,168,best_practice,49,"Sorting the DataFrame by index to maintain order, improving data consistency",,143,    # report_df['cum_return'] - report_df['cum_return'].cummax(),"[220, 220, 220, 1303, 989, 62, 7568, 17816, 36340, 62, 7783, 20520, 532, 989, 62, 7568, 17816, 36340, 62, 7783, 6, 4083, 36340, 9806, 3419]"
✅ Best Practice: Restore original index names to maintain DataFrame consistency,"[26486, 227, 6705, 19939, 25, 42019, 2656, 6376, 3891, 284, 5529, 6060, 19778, 15794]",0.5,204,best_practice,50,Restore original index names to maintain DataFrame consistency,,168,"    report_df[""return_wo_mdd""] = _calculate_mdd(report_df[""cum_return_wo_cost""])","[220, 220, 220, 989, 62, 7568, 14692, 7783, 62, 21638, 62, 76, 1860, 8973, 796, 4808, 9948, 3129, 378, 62, 76, 1860, 7, 13116, 62, 7568, 14692, 36340, 62, 7783, 62, 21638, 62, 15805, 8973, 8]"
✅ Best Practice: Consider specifying the return type using a type hint for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 12642, 31577, 262, 1441, 2099, 1262, 257, 2099, 9254, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,217,best_practice,44,Consider specifying the return type using a type hint for better readability and maintainability,,204,    report_df = pd.DataFrame(),"[220, 220, 220, 989, 62, 7568, 796, 279, 67, 13, 6601, 19778, 3419]"
🧠 ML Signal: Usage of a custom function to calculate report data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 2163, 284, 15284, 989, 1366]",0.5,253,ml_signal,50,Usage of a custom function to calculate report data,,217,"    report_df[""return_wo_mdd""] = _calculate_mdd(report_df[""cum_return_wo_cost""])","[220, 220, 220, 989, 62, 7568, 14692, 7783, 62, 21638, 62, 76, 1860, 8973, 796, 4808, 9948, 3129, 378, 62, 76, 1860, 7, 13116, 62, 7568, 14692, 36340, 62, 7783, 62, 21638, 62, 15805, 8973, 8]"
🧠 ML Signal: Usage of a custom function to calculate maximum values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 2163, 284, 15284, 5415, 3815]",0.5,253,ml_signal,52,Usage of a custom function to calculate maximum values,,253,,[]
🧠 ML Signal: Usage of a custom function with an additional parameter,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 2163, 351, 281, 3224, 11507]",0.5,291,ml_signal,54,Usage of a custom function with an additional parameter,,253,"    report_df[""cum_ex_return_w_cost""] = (df[""return""] - df[""bench""] - df[""cost""]).cumsum()","[220, 220, 220, 989, 62, 7568, 14692, 36340, 62, 1069, 62, 7783, 62, 86, 62, 15805, 8973, 796, 357, 7568, 14692, 7783, 8973, 532, 47764, 14692, 26968, 8973, 532, 47764, 14692, 15805, 8973, 737, 66, 5700, 388, 3419]"
⚠️ SAST Risk (Low): Inserting a row with a fixed index can lead to data misalignment,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 35835, 278, 257, 5752, 351, 257, 5969, 6376, 460, 1085, 284, 1366, 2984, 282, 16747]",0.5,291,sast_risk,58,Inserting a row with a fixed index can lead to data misalignment,Low,291,,[]
⚠️ SAST Risk (Low): Directly modifying DataFrame index can lead to unexpected behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 6060, 19778, 6376, 460, 1085, 284, 10059, 4069]",0.5,291,sast_risk,61,Directly modifying DataFrame index can lead to unexpected behavior,Low,291,,[]
🧠 ML Signal: Usage of a custom class to generate a figure,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 1398, 284, 7716, 257, 3785]",0.5,303,ml_signal,129,Usage of a custom class to generate a figure,,291,"            },","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8964]"
"✅ Best Practice: Provide a clear and concise docstring for the function, including parameter and return type descriptions.","[26486, 227, 6705, 19939, 25, 44290, 257, 1598, 290, 35327, 2205, 8841, 329, 262, 2163, 11, 1390, 11507, 290, 1441, 2099, 16969, 13]",0.5,324,best_practice,131,"Provide a clear and concise docstring for the function, including parameter and return type descriptions.",,303,"                ""type"": ""rect"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 4906, 1298, 366, 2554, 1600]"
✅ Best Practice: Use copy to avoid modifying the original DataFrame.,"[26486, 227, 6705, 19939, 25, 5765, 4866, 284, 3368, 30620, 262, 2656, 6060, 19778, 13]",1.0,345,best_practice,186,Use copy to avoid modifying the original DataFrame.,,324,"                FREQ = ""day""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 44253, 48, 796, 366, 820, 1]"
🧠 ML Signal: Usage of a helper function to generate figures from data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 31904, 2163, 284, 7716, 5538, 422, 1366, 13]",1.0,370,ml_signal,188,Usage of a helper function to generate figures from data.,,345,"                    ""topk"": 50,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 4852, 74, 1298, 2026, 11]"
🧠 ML Signal: Conditional logic to determine output based on a boolean flag.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5004, 5072, 1912, 319, 257, 25131, 6056, 13]",1.0,398,ml_signal,190,Conditional logic to determine output based on a boolean flag.,,370,"                    # pred_score, pd.Series","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 2747, 62, 26675, 11, 279, 67, 13, 27996]"
🧠 ML Signal: Returning a list of figures when not displaying in a notebook.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1351, 286, 5538, 618, 407, 19407, 287, 257, 20922, 13]",1.0,426,ml_signal,190,Returning a list of figures when not displaying in a notebook.,,398,"                    # pred_score, pd.Series","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 2747, 62, 26675, 11, 279, 67, 13, 27996]"

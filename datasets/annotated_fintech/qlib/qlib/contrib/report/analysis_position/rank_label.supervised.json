[
  {
    "line": 5,
    "text": "from typing import Iterable",
    "annotation": "\u2705 Best Practice: Use of relative imports for internal modules",
    "confidence": 0.5,
    "tokens": [
      6738,
      19720,
      1330,
      40806,
      540
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3585,
      17944,
      329,
      5387,
      13103
    ],
    "label": "best_practice",
    "reason": "Use of relative imports for internal modules"
  },
  {
    "line": 7,
    "text": "import pandas as pd",
    "annotation": "\u2705 Best Practice: Use of relative imports for internal modules",
    "confidence": 0.5,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 5,
    "end_token": 11,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3585,
      17944,
      329,
      5387,
      13103
    ],
    "label": "best_practice",
    "reason": "Use of relative imports for internal modules"
  },
  {
    "line": 17,
    "text": "    \"\"\"Get average analysis figures",
    "annotation": "\u2705 Best Practice: Use of a helper function to encapsulate data retrieval logic",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      3855,
      2811,
      3781,
      5538
    ],
    "start_token": 11,
    "end_token": 19,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      31904,
      2163,
      284,
      32652,
      5039,
      1366,
      45069,
      9156
    ],
    "label": "best_practice",
    "reason": "Use of a helper function to encapsulate data retrieval logic"
  },
  {
    "line": 25,
    "text": "    _position_df = get_position_data(",
    "annotation": "\u2705 Best Practice: Use of a dictionary to store results for efficient lookups",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4808,
      9150,
      62,
      7568,
      796,
      651,
      62,
      9150,
      62,
      7890,
      7
    ],
    "start_token": 19,
    "end_token": 33,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3650,
      2482,
      329,
      6942,
      804,
      4739
    ],
    "label": "best_practice",
    "reason": "Use of a dictionary to store results for efficient lookups"
  },
  {
    "line": 27,
    "text": "        label_data,",
    "annotation": "\u2705 Best Practice: Grouping data by a specific level for organized processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6167,
      62,
      7890,
      11
    ],
    "start_token": 33,
    "end_token": 44,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      1366,
      416,
      257,
      2176,
      1241,
      329,
      8389,
      7587
    ],
    "label": "best_practice",
    "reason": "Grouping data by a specific level for organized processing"
  },
  {
    "line": 32,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of setdefault to initialize dictionary keys",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 44,
    "end_token": 44,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      900,
      12286,
      284,
      41216,
      22155,
      8251
    ],
    "label": "best_practice",
    "reason": "Use of setdefault to initialize dictionary keys"
  },
  {
    "line": 39,
    "text": "        _day_value = res_dict.setdefault(_date, {})",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError if 'rank_label_mean' is not present",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      820,
      62,
      8367,
      796,
      581,
      62,
      11600,
      13,
      2617,
      12286,
      28264,
      4475,
      11,
      23884,
      8
    ],
    "start_token": 44,
    "end_token": 67,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      611,
      705,
      43027,
      62,
      18242,
      62,
      32604,
      6,
      318,
      407,
      1944
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError if 'rank_label_mean' is not present"
  },
  {
    "line": 39,
    "text": "        _day_value = res_dict.setdefault(_date, {})",
    "annotation": "\u2705 Best Practice: Conversion of dictionary to DataFrame for structured data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      820,
      62,
      8367,
      796,
      581,
      62,
      11600,
      13,
      2617,
      12286,
      28264,
      4475,
      11,
      23884,
      8
    ],
    "start_token": 67,
    "end_token": 90,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44101,
      286,
      22155,
      284,
      6060,
      19778,
      329,
      20793,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Conversion of dictionary to DataFrame for structured data manipulation"
  },
  {
    "line": 39,
    "text": "        _day_value = res_dict.setdefault(_date, {})",
    "annotation": "\u2705 Best Practice: Formatting index for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      820,
      62,
      8367,
      796,
      581,
      62,
      11600,
      13,
      2617,
      12286,
      28264,
      4475,
      11,
      23884,
      8
    ],
    "start_token": 90,
    "end_token": 113,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18980,
      889,
      6376,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Formatting index for better readability"
  },
  {
    "line": 48,
    "text": "    # FIXME: support HIGH-FREQ",
    "annotation": "\ud83e\udde0 ML Signal: Use of a generator to yield figures, indicating a pattern of streaming data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      44855,
      11682,
      25,
      1104,
      34677,
      12,
      37,
      2200,
      48
    ],
    "start_token": 113,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      17301,
      284,
      7800,
      5538,
      11,
      12739,
      257,
      3912,
      286,
      11305,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of a generator to yield figures, indicating a pattern of streaming data"
  },
  {
    "line": 55,
    "text": "                xaxis=dict(type=\"category\", tickangle=45),",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2124,
      22704,
      28,
      11600,
      7,
      4906,
      2625,
      22872,
      1600,
      4378,
      9248,
      28,
      2231,
      828
    ],
    "start_token": 126,
    "end_token": 155,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the function's purpose and usage."
  },
  {
    "line": 91,
    "text": "                _, positions = backtest(pred_df, strategy, **bparas)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using deepcopy can be expensive in terms of memory and performance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      11,
      6116,
      796,
      736,
      9288,
      7,
      28764,
      62,
      7568,
      11,
      4811,
      11,
      12429,
      65,
      1845,
      292,
      8
    ],
    "start_token": 155,
    "end_token": 188,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      2769,
      30073,
      460,
      307,
      5789,
      287,
      2846,
      286,
      4088,
      290,
      2854,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using deepcopy can be expensive in terms of memory and performance."
  },
  {
    "line": 93,
    "text": "                pred_df_dates = pred_df.index.get_level_values(level='datetime')",
    "annotation": "\u2705 Best Practice: Explicitly setting column names improves code readability and prevents potential errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2747,
      62,
      7568,
      62,
      19581,
      796,
      2747,
      62,
      7568,
      13,
      9630,
      13,
      1136,
      62,
      5715,
      62,
      27160,
      7,
      5715,
      11639,
      19608,
      8079,
      11537
    ],
    "start_token": 188,
    "end_token": 226,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      5721,
      3891,
      19575,
      2438,
      1100,
      1799,
      290,
      15174,
      2785,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly setting column names improves code readability and prevents potential errors."
  },
  {
    "line": 94,
    "text": "                features_df = D.features(D.instruments('csi500'), ['Ref($close, -1)/$close-1'], pred_df_dates.min(), pred_df_dates.max())",
    "annotation": "\ud83e\udde0 ML Signal: Function call to generate figures based on position and label data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3033,
      62,
      7568,
      796,
      360,
      13,
      40890,
      7,
      35,
      13,
      259,
      2536,
      2886,
      10786,
      6359,
      72,
      4059,
      33809,
      37250,
      8134,
      16763,
      19836,
      11,
      532,
      16,
      20679,
      3,
      19836,
      12,
      16,
      6,
      4357,
      2747,
      62,
      7568,
      62,
      19581,
      13,
      1084,
      22784,
      2747,
      62,
      7568,
      62,
      19581,
      13,
      9806,
      28955
    ],
    "start_token": 226,
    "end_token": 289,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      7716,
      5538,
      1912,
      319,
      2292,
      290,
      6167,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Function call to generate figures based on position and label data."
  },
  {
    "line": 96,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to determine output format (notebook display vs. return value).",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 289,
    "end_token": 289,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5004,
      5072,
      5794,
      357,
      11295,
      2070,
      3359,
      3691,
      13,
      1441,
      1988,
      737
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to determine output format (notebook display vs. return value)."
  },
  {
    "line": 96,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning figures for further processing or display.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 289,
    "end_token": 289,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      5538,
      329,
      2252,
      7587,
      393,
      3359,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning figures for further processing or display."
  }
]
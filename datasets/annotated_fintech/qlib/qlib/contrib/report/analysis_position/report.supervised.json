[
  {
    "line": 2,
    "text": "# Licensed under the MIT License.",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Relative import can lead to import errors if the module structure changes",
    "confidence": 0.5,
    "tokens": [
      2,
      49962,
      739,
      262,
      17168,
      13789,
      13
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      45344,
      1330,
      460,
      1085,
      284,
      1330,
      8563,
      611,
      262,
      8265,
      4645,
      2458
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Relative import can lead to import errors if the module structure changes"
  },
  {
    "line": 3,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters and return type for better readability and maintainability."
  },
  {
    "line": 10,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Add more detailed docstring to describe the parameters and return values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 7,
    "end_token": 11,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      517,
      6496,
      2205,
      8841,
      284,
      6901,
      262,
      10007,
      290,
      1441,
      3815,
      13
    ],
    "label": "best_practice",
    "reason": "Add more detailed docstring to describe the parameters and return values."
  },
  {
    "line": 11,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if expected columns are missing from the DataFrame.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 11,
    "end_token": 11,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      2938,
      15180,
      389,
      4814,
      422,
      262,
      6060,
      19778,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if expected columns are missing from the DataFrame."
  },
  {
    "line": 14,
    "text": "    :return:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if expected columns are missing from the DataFrame.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      7783,
      25
    ],
    "start_token": 11,
    "end_token": 17,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      2938,
      15180,
      389,
      4814,
      422,
      262,
      6060,
      19778,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if expected columns are missing from the DataFrame."
  },
  {
    "line": 17,
    "text": "        end_date = df[\"cum_ex_return_wo_cost_mdd\"].idxmin()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if expected columns are missing from the DataFrame.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      4475,
      796,
      47764,
      14692,
      36340,
      62,
      1069,
      62,
      7783,
      62,
      21638,
      62,
      15805,
      62,
      76,
      1860,
      1,
      4083,
      312,
      87,
      1084,
      3419
    ],
    "start_token": 17,
    "end_token": 48,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      2938,
      15180,
      389,
      4814,
      422,
      262,
      6060,
      19778,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if expected columns are missing from the DataFrame."
  },
  {
    "line": 17,
    "text": "        end_date = df[\"cum_ex_return_wo_cost_mdd\"].idxmin()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if expected columns are missing from the DataFrame.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      4475,
      796,
      47764,
      14692,
      36340,
      62,
      1069,
      62,
      7783,
      62,
      21638,
      62,
      15805,
      62,
      76,
      1860,
      1,
      4083,
      312,
      87,
      1084,
      3419
    ],
    "start_token": 48,
    "end_token": 79,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      2938,
      15180,
      389,
      4814,
      422,
      262,
      6060,
      19778,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if expected columns are missing from the DataFrame."
  },
  {
    "line": 22,
    "text": "    return start_date, end_date",
    "annotation": "\ud83e\udde0 ML Signal: The function returns a tuple of start and end dates, which could be used to train models on time series data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      923,
      62,
      4475,
      11,
      886,
      62,
      4475
    ],
    "start_token": 79,
    "end_token": 90,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      2163,
      5860,
      257,
      46545,
      286,
      923,
      290,
      886,
      9667,
      11,
      543,
      714,
      307,
      973,
      284,
      4512,
      4981,
      319,
      640,
      2168,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "The function returns a tuple of start and end dates, which could be used to train models on time series data."
  },
  {
    "line": 22,
    "text": "    return start_date, end_date",
    "annotation": "\u2705 Best Practice: Provide a more detailed docstring explaining the function's purpose and parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      923,
      62,
      4475,
      11,
      886,
      62,
      4475
    ],
    "start_token": 90,
    "end_token": 101,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44290,
      257,
      517,
      6496,
      2205,
      8841,
      11170,
      262,
      2163,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Provide a more detailed docstring explaining the function's purpose and parameters."
  },
  {
    "line": 24,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of pandas series operations, indicating familiarity with data manipulation libraries.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 101,
    "end_token": 101,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19798,
      292,
      2168,
      4560,
      11,
      12739,
      33065,
      351,
      1366,
      17512,
      12782,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of pandas series operations, indicating familiarity with data manipulation libraries."
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function processes a DataFrame and returns a transformed DataFrame, useful for learning data transformation patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 101,
    "end_token": 101,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      7767,
      257,
      6060,
      19778,
      290,
      5860,
      257,
      14434,
      6060,
      19778,
      11,
      4465,
      329,
      4673,
      1366,
      13389,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function processes a DataFrame and returns a transformed DataFrame, useful for learning data transformation patterns"
  },
  {
    "line": 29,
    "text": "    :param series:",
    "annotation": "\u2705 Best Practice: Store original index names to restore them later, ensuring index integrity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      17143,
      2168,
      25
    ],
    "start_token": 101,
    "end_token": 108,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9363,
      2656,
      6376,
      3891,
      284,
      11169,
      606,
      1568,
      11,
      13359,
      6376,
      11540
    ],
    "label": "best_practice",
    "reason": "Store original index names to restore them later, ensuring index integrity"
  },
  {
    "line": 31,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Modifying the DataFrame index in place can lead to data integrity issues if not handled carefully",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 108,
    "end_token": 112,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3401,
      4035,
      262,
      6060,
      19778,
      6376,
      287,
      1295,
      460,
      1085,
      284,
      1366,
      11540,
      2428,
      611,
      407,
      12118,
      7773
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Modifying the DataFrame index in place can lead to data integrity issues if not handled carefully"
  },
  {
    "line": 33,
    "text": "",
    "annotation": "\u2705 Best Practice: Initialize an empty DataFrame for storing results, improving code readability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 112,
    "end_token": 112,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      281,
      6565,
      6060,
      19778,
      329,
      23069,
      2482,
      11,
      10068,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Initialize an empty DataFrame for storing results, improving code readability"
  },
  {
    "line": 35,
    "text": "def _calculate_report_data(df: pd.DataFrame) -> pd.DataFrame:",
    "annotation": "\ud83e\udde0 ML Signal: Cumulative sum operations on DataFrame columns, common in financial data analysis",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      9948,
      3129,
      378,
      62,
      13116,
      62,
      7890,
      7,
      7568,
      25,
      279,
      67,
      13,
      6601,
      19778,
      8,
      4613,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 112,
    "end_token": 137,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27843,
      13628,
      2160,
      4560,
      319,
      6060,
      19778,
      15180,
      11,
      2219,
      287,
      3176,
      1366,
      3781
    ],
    "label": "ml_signal",
    "reason": "Cumulative sum operations on DataFrame columns, common in financial data analysis"
  },
  {
    "line": 39,
    "text": "    :return:",
    "annotation": "\ud83e\udde0 ML Signal: Use of custom function to calculate maximum drawdown, indicating advanced financial metrics",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1058,
      7783,
      25
    ],
    "start_token": 137,
    "end_token": 143,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2183,
      2163,
      284,
      15284,
      5415,
      3197,
      2902,
      11,
      12739,
      6190,
      3176,
      20731
    ],
    "label": "ml_signal",
    "reason": "Use of custom function to calculate maximum drawdown, indicating advanced financial metrics"
  },
  {
    "line": 45,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Direct assignment of DataFrame columns, indicating data transformation",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 143,
    "end_token": 143,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4128,
      16237,
      286,
      6060,
      19778,
      15180,
      11,
      12739,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Direct assignment of DataFrame columns, indicating data transformation"
  },
  {
    "line": 49,
    "text": "    # report_df['cum_return'] - report_df['cum_return'].cummax()",
    "annotation": "\u2705 Best Practice: Sorting the DataFrame by index to maintain order, improving data consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      989,
      62,
      7568,
      17816,
      36340,
      62,
      7783,
      20520,
      532,
      989,
      62,
      7568,
      17816,
      36340,
      62,
      7783,
      6,
      4083,
      36340,
      9806,
      3419
    ],
    "start_token": 143,
    "end_token": 168,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      262,
      6060,
      19778,
      416,
      6376,
      284,
      5529,
      1502,
      11,
      10068,
      1366,
      15794
    ],
    "label": "best_practice",
    "reason": "Sorting the DataFrame by index to maintain order, improving data consistency"
  },
  {
    "line": 50,
    "text": "    report_df[\"return_wo_mdd\"] = _calculate_mdd(report_df[\"cum_return_wo_cost\"])",
    "annotation": "\u2705 Best Practice: Restore original index names to maintain DataFrame consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      989,
      62,
      7568,
      14692,
      7783,
      62,
      21638,
      62,
      76,
      1860,
      8973,
      796,
      4808,
      9948,
      3129,
      378,
      62,
      76,
      1860,
      7,
      13116,
      62,
      7568,
      14692,
      36340,
      62,
      7783,
      62,
      21638,
      62,
      15805,
      8973,
      8
    ],
    "start_token": 168,
    "end_token": 204,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42019,
      2656,
      6376,
      3891,
      284,
      5529,
      6060,
      19778,
      15794
    ],
    "label": "best_practice",
    "reason": "Restore original index names to maintain DataFrame consistency"
  },
  {
    "line": 44,
    "text": "    report_df = pd.DataFrame()",
    "annotation": "\u2705 Best Practice: Consider specifying the return type using a type hint for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      989,
      62,
      7568,
      796,
      279,
      67,
      13,
      6601,
      19778,
      3419
    ],
    "start_token": 204,
    "end_token": 217,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      31577,
      262,
      1441,
      2099,
      1262,
      257,
      2099,
      9254,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider specifying the return type using a type hint for better readability and maintainability"
  },
  {
    "line": 50,
    "text": "    report_df[\"return_wo_mdd\"] = _calculate_mdd(report_df[\"cum_return_wo_cost\"])",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom function to calculate report data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      989,
      62,
      7568,
      14692,
      7783,
      62,
      21638,
      62,
      76,
      1860,
      8973,
      796,
      4808,
      9948,
      3129,
      378,
      62,
      76,
      1860,
      7,
      13116,
      62,
      7568,
      14692,
      36340,
      62,
      7783,
      62,
      21638,
      62,
      15805,
      8973,
      8
    ],
    "start_token": 217,
    "end_token": 253,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      2163,
      284,
      15284,
      989,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom function to calculate report data"
  },
  {
    "line": 52,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom function to calculate maximum values",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 253,
    "end_token": 253,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      2163,
      284,
      15284,
      5415,
      3815
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom function to calculate maximum values"
  },
  {
    "line": 54,
    "text": "    report_df[\"cum_ex_return_w_cost\"] = (df[\"return\"] - df[\"bench\"] - df[\"cost\"]).cumsum()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom function with an additional parameter",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      989,
      62,
      7568,
      14692,
      36340,
      62,
      1069,
      62,
      7783,
      62,
      86,
      62,
      15805,
      8973,
      796,
      357,
      7568,
      14692,
      7783,
      8973,
      532,
      47764,
      14692,
      26968,
      8973,
      532,
      47764,
      14692,
      15805,
      8973,
      737,
      66,
      5700,
      388,
      3419
    ],
    "start_token": 253,
    "end_token": 291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      2163,
      351,
      281,
      3224,
      11507
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom function with an additional parameter"
  },
  {
    "line": 58,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Inserting a row with a fixed index can lead to data misalignment",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 291,
    "end_token": 291,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      35835,
      278,
      257,
      5752,
      351,
      257,
      5969,
      6376,
      460,
      1085,
      284,
      1366,
      2984,
      282,
      16747
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Inserting a row with a fixed index can lead to data misalignment"
  },
  {
    "line": 61,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly modifying DataFrame index can lead to unexpected behavior",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 291,
    "end_token": 291,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      30620,
      6060,
      19778,
      6376,
      460,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly modifying DataFrame index can lead to unexpected behavior"
  },
  {
    "line": 129,
    "text": "            },",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom class to generate a figure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8964
    ],
    "start_token": 291,
    "end_token": 303,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      1398,
      284,
      7716,
      257,
      3785
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom class to generate a figure"
  },
  {
    "line": 131,
    "text": "                \"type\": \"rect\",",
    "annotation": "\u2705 Best Practice: Provide a clear and concise docstring for the function, including parameter and return type descriptions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      4906,
      1298,
      366,
      2554,
      1600
    ],
    "start_token": 303,
    "end_token": 324,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44290,
      257,
      1598,
      290,
      35327,
      2205,
      8841,
      329,
      262,
      2163,
      11,
      1390,
      11507,
      290,
      1441,
      2099,
      16969,
      13
    ],
    "label": "best_practice",
    "reason": "Provide a clear and concise docstring for the function, including parameter and return type descriptions."
  },
  {
    "line": 186,
    "text": "                FREQ = \"day\"",
    "annotation": "\u2705 Best Practice: Use copy to avoid modifying the original DataFrame.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      44253,
      48,
      796,
      366,
      820,
      1
    ],
    "start_token": 324,
    "end_token": 345,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4866,
      284,
      3368,
      30620,
      262,
      2656,
      6060,
      19778,
      13
    ],
    "label": "best_practice",
    "reason": "Use copy to avoid modifying the original DataFrame."
  },
  {
    "line": 188,
    "text": "                    \"topk\": 50,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a helper function to generate figures from data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      4852,
      74,
      1298,
      2026,
      11
    ],
    "start_token": 345,
    "end_token": 370,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      31904,
      2163,
      284,
      7716,
      5538,
      422,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a helper function to generate figures from data."
  },
  {
    "line": 190,
    "text": "                    # pred_score, pd.Series",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to determine output based on a boolean flag.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2747,
      62,
      26675,
      11,
      279,
      67,
      13,
      27996
    ],
    "start_token": 370,
    "end_token": 398,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5004,
      5072,
      1912,
      319,
      257,
      25131,
      6056,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to determine output based on a boolean flag."
  },
  {
    "line": 190,
    "text": "                    # pred_score, pd.Series",
    "annotation": "\ud83e\udde0 ML Signal: Returning a list of figures when not displaying in a notebook.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2747,
      62,
      26675,
      11,
      279,
      67,
      13,
      27996
    ],
    "start_token": 398,
    "end_token": 426,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      1351,
      286,
      5538,
      618,
      407,
      19407,
      287,
      257,
      20922,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning a list of figures when not displaying in a notebook."
  }
]
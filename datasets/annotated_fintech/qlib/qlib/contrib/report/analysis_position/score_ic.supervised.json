[
  {
    "line": 2,
    "text": "# Licensed under the MIT License.",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      2,
      49962,
      739,
      262,
      17168,
      13789,
      13
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability and maintainability."
  },
  {
    "line": 4,
    "text": "import pandas as pd",
    "annotation": "\ud83e\udde0 ML Signal: Function processes prediction labels to compute correlation scores",
    "confidence": 0.5,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 7,
    "end_token": 13,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      7767,
      17724,
      14722,
      284,
      24061,
      16096,
      8198
    ],
    "label": "ml_signal",
    "reason": "Function processes prediction labels to compute correlation scores"
  },
  {
    "line": 10,
    "text": "def _get_score_ic(pred_label: pd.DataFrame):",
    "annotation": "\u2705 Best Practice: Use of copy to avoid modifying the original DataFrame",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      1136,
      62,
      26675,
      62,
      291,
      7,
      28764,
      62,
      18242,
      25,
      279,
      67,
      13,
      6601,
      19778,
      2599
    ],
    "start_token": 13,
    "end_token": 31,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4866,
      284,
      3368,
      30620,
      262,
      2656,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Use of copy to avoid modifying the original DataFrame"
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\u2705 Best Practice: Dropping NaN values to ensure clean data for correlation calculation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 31,
    "end_token": 31,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      11013,
      45,
      3815,
      284,
      4155,
      3424,
      1366,
      329,
      16096,
      17952
    ],
    "label": "best_practice",
    "reason": "Dropping NaN values to ensure clean data for correlation calculation"
  },
  {
    "line": 15,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of Pearson correlation for each datetime group",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 31,
    "end_token": 35,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      31074,
      16096,
      329,
      1123,
      4818,
      8079,
      1448
    ],
    "label": "ml_signal",
    "reason": "Calculation of Pearson correlation for each datetime group"
  },
  {
    "line": 16,
    "text": "    concat_data = pred_label.copy()",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of Spearman rank correlation for each datetime group",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1673,
      265,
      62,
      7890,
      796,
      2747,
      62,
      18242,
      13,
      30073,
      3419
    ],
    "start_token": 35,
    "end_token": 49,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      27836,
      805,
      4279,
      16096,
      329,
      1123,
      4818,
      8079,
      1448
    ],
    "label": "ml_signal",
    "reason": "Calculation of Spearman rank correlation for each datetime group"
  },
  {
    "line": 17,
    "text": "    concat_data.dropna(axis=0, how=\"any\", inplace=True)",
    "annotation": "\u2705 Best Practice: Returning results as a DataFrame for structured output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1673,
      265,
      62,
      7890,
      13,
      14781,
      2616,
      7,
      22704,
      28,
      15,
      11,
      703,
      2625,
      1092,
      1600,
      287,
      5372,
      28,
      17821,
      8
    ],
    "start_token": 49,
    "end_token": 73,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      2482,
      355,
      257,
      6060,
      19778,
      329,
      20793,
      5072
    ],
    "label": "best_practice",
    "reason": "Returning results as a DataFrame for structured output"
  },
  {
    "line": 17,
    "text": "    concat_data.dropna(axis=0, how=\"any\", inplace=True)",
    "annotation": "\u2705 Best Practice: Provide a clear and concise docstring for the function, including parameter descriptions and return values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1673,
      265,
      62,
      7890,
      13,
      14781,
      2616,
      7,
      22704,
      28,
      15,
      11,
      703,
      2625,
      1092,
      1600,
      287,
      5372,
      28,
      17821,
      8
    ],
    "start_token": 73,
    "end_token": 97,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44290,
      257,
      1598,
      290,
      35327,
      2205,
      8841,
      329,
      262,
      2163,
      11,
      1390,
      11507,
      16969,
      290,
      1441,
      3815,
      13
    ],
    "label": "best_practice",
    "reason": "Provide a clear and concise docstring for the function, including parameter descriptions and return values."
  },
  {
    "line": 39,
    "text": "                analysis_position.score_ic_graph(pred_label)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to generate a graph from a DataFrame, which can be a pattern for ML model training.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3781,
      62,
      9150,
      13,
      26675,
      62,
      291,
      62,
      34960,
      7,
      28764,
      62,
      18242,
      8
    ],
    "start_token": 97,
    "end_token": 126,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      7716,
      257,
      4823,
      422,
      257,
      6060,
      19778,
      11,
      543,
      460,
      307,
      257,
      3912,
      329,
      10373,
      2746,
      3047,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to generate a graph from a DataFrame, which can be a pattern for ML model training."
  },
  {
    "line": 39,
    "text": "                analysis_position.score_ic_graph(pred_label)",
    "annotation": "\ud83e\udde0 ML Signal: Creating a graph object with specific layout and mode, which can be a pattern for ML model training.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3781,
      62,
      9150,
      13,
      26675,
      62,
      291,
      62,
      34960,
      7,
      28764,
      62,
      18242,
      8
    ],
    "start_token": 126,
    "end_token": 155,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      4823,
      2134,
      351,
      2176,
      12461,
      290,
      4235,
      11,
      543,
      460,
      307,
      257,
      3912,
      329,
      10373,
      2746,
      3047,
      13
    ],
    "label": "ml_signal",
    "reason": "Creating a graph object with specific layout and mode, which can be a pattern for ML model training."
  },
  {
    "line": 50,
    "text": "                            2017-12-13   -0.068605       -0.068605",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to determine output based on a boolean flag, which can be a pattern for ML model training.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2177,
      12,
      1065,
      12,
      1485,
      220,
      220,
      532,
      15,
      13,
      15,
      3104,
      32417,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      15,
      13,
      15,
      3104,
      32417
    ],
    "start_token": 155,
    "end_token": 207,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5004,
      5072,
      1912,
      319,
      257,
      25131,
      6056,
      11,
      543,
      460,
      307,
      257,
      3912,
      329,
      10373,
      2746,
      3047,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to determine output based on a boolean flag, which can be a pattern for ML model training."
  },
  {
    "line": 50,
    "text": "                            2017-12-13   -0.068605       -0.068605",
    "annotation": "\ud83e\udde0 ML Signal: Displaying a graph in a notebook environment, which can be a pattern for ML model training.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2177,
      12,
      1065,
      12,
      1485,
      220,
      220,
      532,
      15,
      13,
      15,
      3104,
      32417,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      15,
      13,
      15,
      3104,
      32417
    ],
    "start_token": 207,
    "end_token": 259,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16531,
      278,
      257,
      4823,
      287,
      257,
      20922,
      2858,
      11,
      543,
      460,
      307,
      257,
      3912,
      329,
      10373,
      2746,
      3047,
      13
    ],
    "label": "ml_signal",
    "reason": "Displaying a graph in a notebook environment, which can be a pattern for ML model training."
  },
  {
    "line": 50,
    "text": "                            2017-12-13   -0.068605       -0.068605",
    "annotation": "\ud83e\udde0 ML Signal: Returning a tuple containing a graph object, which can be a pattern for ML model training.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2177,
      12,
      1065,
      12,
      1485,
      220,
      220,
      532,
      15,
      13,
      15,
      3104,
      32417,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      15,
      13,
      15,
      3104,
      32417
    ],
    "start_token": 259,
    "end_token": 311,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      46545,
      7268,
      257,
      4823,
      2134,
      11,
      543,
      460,
      307,
      257,
      3912,
      329,
      10373,
      2746,
      3047,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning a tuple containing a graph object, which can be a pattern for ML model training."
  }
]
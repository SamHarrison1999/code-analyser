[
  {
    "line": 3,
    "text": "",
    "annotation": "\u2705 Best Practice: Group standard library imports together at the top.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      3210,
      5888,
      17944,
      1978,
      379,
      262,
      1353,
      13
    ],
    "label": "best_practice",
    "reason": "Group standard library imports together at the top."
  },
  {
    "line": 5,
    "text": "import importlib",
    "annotation": "\u2705 Best Practice: Group third-party library imports together.",
    "confidence": 1.0,
    "tokens": [
      11748,
      1330,
      8019
    ],
    "start_token": 0,
    "end_token": 3,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      2368,
      12,
      10608,
      5888,
      17944,
      1978,
      13
    ],
    "label": "best_practice",
    "reason": "Group third-party library imports together."
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\u2705 Best Practice: Class attributes should be documented to explain their purpose",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 3,
    "end_token": 3,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      12608,
      815,
      307,
      12395,
      284,
      4727,
      511,
      4007
    ],
    "label": "best_practice",
    "reason": "Class attributes should be documented to explain their purpose"
  },
  {
    "line": 11,
    "text": "import plotly.graph_objs as go",
    "annotation": "\u2705 Best Practice: Use of a single underscore indicates intended private use",
    "confidence": 0.5,
    "tokens": [
      11748,
      7110,
      306,
      13,
      34960,
      62,
      672,
      8457,
      355,
      467
    ],
    "start_token": 3,
    "end_token": 13,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2060,
      44810,
      9217,
      5292,
      2839,
      779
    ],
    "label": "best_practice",
    "reason": "Use of a single underscore indicates intended private use"
  },
  {
    "line": 25,
    "text": "        :param df:",
    "annotation": "\u2705 Best Practice: Use of default mutable arguments (dict) is avoided by using None and initializing inside the method.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      47764,
      25
    ],
    "start_token": 13,
    "end_token": 24,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      4517,
      540,
      7159,
      357,
      11600,
      8,
      318,
      13941,
      416,
      1262,
      6045,
      290,
      4238,
      2890,
      2641,
      262,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default mutable arguments (dict) is avoided by using None and initializing inside the method."
  },
  {
    "line": 27,
    "text": "        :param graph_kwargs:",
    "annotation": "\u2705 Best Practice: Use of default mutable arguments (dict) is avoided by using None and initializing inside the method.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      4823,
      62,
      46265,
      22046,
      25
    ],
    "start_token": 24,
    "end_token": 38,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      4517,
      540,
      7159,
      357,
      11600,
      8,
      318,
      13941,
      416,
      1262,
      6045,
      290,
      4238,
      2890,
      2641,
      262,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default mutable arguments (dict) is avoided by using None and initializing inside the method."
  },
  {
    "line": 29,
    "text": "        :param kwargs:",
    "annotation": "\u2705 Best Practice: Use of default mutable arguments (dict) is avoided by using None and initializing inside the method.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      479,
      86,
      22046,
      25
    ],
    "start_token": 38,
    "end_token": 51,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      4517,
      540,
      7159,
      357,
      11600,
      8,
      318,
      13941,
      416,
      1262,
      6045,
      290,
      4238,
      2890,
      2641,
      262,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default mutable arguments (dict) is avoided by using None and initializing inside the method."
  },
  {
    "line": 33,
    "text": "                Graph parameters, eg: go.Bar(**graph_kwargs)",
    "annotation": "\ud83e\udde0 ML Signal: Method call with variable arguments, indicating dynamic behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      29681,
      10007,
      11,
      29206,
      25,
      467,
      13,
      10374,
      7,
      1174,
      34960,
      62,
      46265,
      22046,
      8
    ],
    "start_token": 51,
    "end_token": 81,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      7885,
      7159,
      11,
      12739,
      8925,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call with variable arguments, indicating dynamic behavior."
  },
  {
    "line": 36,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call indicating initialization or setup pattern.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 81,
    "end_token": 81,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      12739,
      37588,
      393,
      9058,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Method call indicating initialization or setup pattern."
  },
  {
    "line": 36,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): The function assumes self._df is defined and has an 'empty' attribute, which may not be the case.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 81,
    "end_token": 81,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      383,
      2163,
      18533,
      2116,
      13557,
      7568,
      318,
      5447,
      290,
      468,
      281,
      705,
      28920,
      6,
      11688,
      11,
      543,
      743,
      407,
      307,
      262,
      1339,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "The function assumes self._df is defined and has an 'empty' attribute, which may not be the case."
  },
  {
    "line": 39,
    "text": "        self._name_dict = name_dict",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern for data initialization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      3672,
      62,
      11600,
      796,
      1438,
      62,
      11600
    ],
    "start_token": 81,
    "end_token": 97,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      329,
      1366,
      37588
    ],
    "label": "ml_signal",
    "reason": "Method call pattern for data initialization"
  },
  {
    "line": 43,
    "text": "        self._init_parameters(**kwargs)",
    "annotation": "\u2705 Best Practice: Use of self to access instance variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      15003,
      62,
      17143,
      7307,
      7,
      1174,
      46265,
      22046,
      8
    ],
    "start_token": 97,
    "end_token": 115,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      1895,
      4554,
      9633
    ],
    "label": "best_practice",
    "reason": "Use of self to access instance variables"
  },
  {
    "line": 45,
    "text": "",
    "annotation": "\u2705 Best Practice: Checking for None before initializing a dictionary",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 115,
    "end_token": 115,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      6045,
      878,
      4238,
      2890,
      257,
      22155
    ],
    "label": "best_practice",
    "reason": "Checking for None before initializing a dictionary"
  },
  {
    "line": 47,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of initializing a dictionary from DataFrame columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 115,
    "end_token": 123,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4238,
      2890,
      257,
      22155,
      422,
      6060,
      19778,
      15180
    ],
    "label": "ml_signal",
    "reason": "Pattern of initializing a dictionary from DataFrame columns"
  },
  {
    "line": 53,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No validation on 'graph_type' could lead to importing unintended modules or classes.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 123,
    "end_token": 123,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      21201,
      319,
      705,
      34960,
      62,
      4906,
      6,
      714,
      1085,
      284,
      33332,
      30261,
      13103,
      393,
      6097,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No validation on 'graph_type' could lead to importing unintended modules or classes."
  },
  {
    "line": 55,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Dynamic import using user-controlled input can lead to code execution vulnerabilities.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 123,
    "end_token": 123,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      26977,
      1330,
      1262,
      2836,
      12,
      14401,
      5128,
      460,
      1085,
      284,
      2438,
      9706,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Dynamic import using user-controlled input can lead to code execution vulnerabilities."
  },
  {
    "line": 57,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using getattr with user-controlled input can lead to code execution vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 123,
    "end_token": 131,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      651,
      35226,
      351,
      2836,
      12,
      14401,
      5128,
      460,
      1085,
      284,
      2438,
      9706,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using getattr with user-controlled input can lead to code execution vulnerabilities."
  },
  {
    "line": 59,
    "text": "        :param kwargs",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Dynamic import using user-controlled input can lead to code execution vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      479,
      86,
      22046
    ],
    "start_token": 131,
    "end_token": 143,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      26977,
      1330,
      1262,
      2836,
      12,
      14401,
      5128,
      460,
      1085,
      284,
      2438,
      9706,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Dynamic import using user-controlled input can lead to code execution vulnerabilities."
  },
  {
    "line": 62,
    "text": "        # Instantiate graphics parameters",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using getattr with user-controlled input can lead to code execution vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24470,
      9386,
      9382,
      10007
    ],
    "start_token": 143,
    "end_token": 155,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      651,
      35226,
      351,
      2836,
      12,
      14401,
      5128,
      460,
      1085,
      284,
      2438,
      9706,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using getattr with user-controlled input can lead to code execution vulnerabilities."
  },
  {
    "line": 62,
    "text": "        # Instantiate graphics parameters",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dynamic class instantiation with kwargs.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24470,
      9386,
      9382,
      10007
    ],
    "start_token": 155,
    "end_token": 167,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8925,
      1398,
      9113,
      3920,
      351,
      479,
      86,
      22046,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dynamic class instantiation with kwargs."
  },
  {
    "line": 61,
    "text": "",
    "annotation": "\u2705 Best Practice: Specify the type of elements in the Iterable for better type hinting.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 167,
    "end_token": 167,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      262,
      2099,
      286,
      4847,
      287,
      262,
      40806,
      540,
      329,
      1365,
      2099,
      9254,
      278,
      13
    ],
    "label": "best_practice",
    "reason": "Specify the type of elements in the Iterable for better type hinting."
  },
  {
    "line": 67,
    "text": "            self._name_dict = {_item: _item for _item in self._df.columns}",
    "annotation": "\u2705 Best Practice: Initialize the notebook mode for Plotly to ensure compatibility with Jupyter notebooks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      3672,
      62,
      11600,
      796,
      1391,
      62,
      9186,
      25,
      4808,
      9186,
      329,
      4808,
      9186,
      287,
      2116,
      13557,
      7568,
      13,
      28665,
      82,
      92
    ],
    "start_token": 167,
    "end_token": 201,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      262,
      20922,
      4235,
      329,
      28114,
      306,
      284,
      4155,
      17764,
      351,
      449,
      929,
      88,
      353,
      43935,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize the notebook mode for Plotly to ensure compatibility with Jupyter notebooks."
  },
  {
    "line": 69,
    "text": "    @staticmethod",
    "annotation": "\u2705 Best Practice: Check if figure_list is not None to avoid TypeError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      12708,
      24396
    ],
    "start_token": 201,
    "end_token": 207,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      3785,
      62,
      4868,
      318,
      407,
      6045,
      284,
      3368,
      5994,
      12331,
      13
    ],
    "label": "best_practice",
    "reason": "Check if figure_list is not None to avoid TypeError."
  },
  {
    "line": 72,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Detecting the environment can be a pattern for environment-specific behavior.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 207,
    "end_token": 207,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35874,
      278,
      262,
      2858,
      460,
      307,
      257,
      3912,
      329,
      2858,
      12,
      11423,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Detecting the environment can be a pattern for environment-specific behavior."
  },
  {
    "line": 77,
    "text": "        try:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide other issues; consider catching specific exceptions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 207,
    "end_token": 216,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      584,
      2428,
      26,
      2074,
      16508,
      2176,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide other issues; consider catching specific exceptions."
  },
  {
    "line": 80,
    "text": "        except AttributeError:",
    "annotation": "\u2705 Best Practice: Use the renderer parameter to specify the output environment for Plotly figures.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      3460,
      4163,
      12331,
      25
    ],
    "start_token": 216,
    "end_token": 228,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      262,
      9851,
      11882,
      11507,
      284,
      11986,
      262,
      5072,
      2858,
      329,
      28114,
      306,
      5538,
      13
    ],
    "label": "best_practice",
    "reason": "Use the renderer parameter to specify the output environment for Plotly figures."
  },
  {
    "line": 76,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type hinting for the return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 228,
    "end_token": 236,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      262,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for the return type improves code readability and maintainability"
  },
  {
    "line": 81,
    "text": "            _graph_module = importlib.import_module(\"qlib.contrib.report.graph\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of a private method suggests encapsulation and internal API design",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      34960,
      62,
      21412,
      796,
      1330,
      8019,
      13,
      11748,
      62,
      21412,
      7203,
      80,
      8019,
      13,
      3642,
      822,
      13,
      13116,
      13,
      34960,
      4943
    ],
    "start_token": 236,
    "end_token": 269,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2839,
      2446,
      5644,
      32652,
      1741,
      290,
      5387,
      7824,
      1486
    ],
    "label": "ml_signal",
    "reason": "Use of a private method suggests encapsulation and internal API design"
  },
  {
    "line": 82,
    "text": "            _graph_class = getattr(_graph_module, graph_type)",
    "annotation": "\ud83e\udde0 ML Signal: Returning a go.Layout object indicates usage of Plotly for visualization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      34960,
      62,
      4871,
      796,
      651,
      35226,
      28264,
      34960,
      62,
      21412,
      11,
      4823,
      62,
      4906,
      8
    ],
    "start_token": 269,
    "end_token": 296,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      467,
      13,
      32517,
      2134,
      9217,
      8748,
      286,
      28114,
      306,
      329,
      32704
    ],
    "label": "ml_signal",
    "reason": "Returning a go.Layout object indicates usage of Plotly for visualization"
  },
  {
    "line": 82,
    "text": "            _graph_class = getattr(_graph_module, graph_type)",
    "annotation": "\u2705 Best Practice: Include a docstring that describes the return value and method purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      34960,
      62,
      4871,
      796,
      651,
      35226,
      28264,
      34960,
      62,
      21412,
      11,
      4823,
      62,
      4906,
      8
    ],
    "start_token": 296,
    "end_token": 323,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      326,
      8477,
      262,
      1441,
      1988,
      290,
      2446,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring that describes the return value and method purpose"
  },
  {
    "line": 85,
    "text": "    @staticmethod",
    "annotation": "\ud83e\udde0 ML Signal: Use of list comprehension to transform data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      12708,
      24396
    ],
    "start_token": 323,
    "end_token": 329,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1351,
      35915,
      284,
      6121,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of list comprehension to transform data"
  },
  {
    "line": 85,
    "text": "    @staticmethod",
    "annotation": "\ud83e\udde0 ML Signal: Method call with dynamic parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      12708,
      24396
    ],
    "start_token": 329,
    "end_token": 335,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      8925,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method call with dynamic parameters"
  },
  {
    "line": 94,
    "text": "            # NOTE: displays figures: https://plotly.com/python/renderers/",
    "annotation": "\u2705 Best Practice: Add a descriptive docstring to explain the purpose and return value of the function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      11298,
      5538,
      25,
      3740,
      1378,
      29487,
      306,
      13,
      785,
      14,
      29412,
      14,
      10920,
      19288,
      14
    ],
    "start_token": 335,
    "end_token": 364,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      257,
      35644,
      2205,
      8841,
      284,
      4727,
      262,
      4007,
      290,
      1441,
      1988,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Add a descriptive docstring to explain the purpose and return value of the function"
  },
  {
    "line": 98,
    "text": "            try:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Plotly's go.Figure, indicating data visualization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 364,
    "end_token": 377,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      28114,
      306,
      338,
      467,
      13,
      11337,
      11,
      12739,
      1366,
      32704
    ],
    "label": "ml_signal",
    "reason": "Usage of Plotly's go.Figure, indicating data visualization"
  },
  {
    "line": 100,
    "text": "                _ipykernel = str(type(get_ipython()))",
    "annotation": "\u2705 Best Practice: Explicitly setting template to None for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      541,
      88,
      33885,
      796,
      965,
      7,
      4906,
      7,
      1136,
      62,
      541,
      7535,
      3419,
      4008
    ],
    "start_token": 377,
    "end_token": 407,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      11055,
      284,
      6045,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly setting template to None for clarity"
  },
  {
    "line": 101,
    "text": "                if \"google.colab\" in _ipykernel:",
    "annotation": "\u2705 Best Practice: Use of a leading underscore in _name indicates it's intended for internal use.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      366,
      13297,
      13,
      4033,
      397,
      1,
      287,
      4808,
      541,
      88,
      33885,
      25
    ],
    "start_token": 407,
    "end_token": 435,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      3756,
      44810,
      287,
      4808,
      3672,
      9217,
      340,
      338,
      5292,
      329,
      5387,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a leading underscore in _name indicates it's intended for internal use."
  },
  {
    "line": 102,
    "text": "                    renderer = \"colab\"",
    "annotation": "\u2705 Best Practice: Class should inherit from a base class to promote code reuse and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9851,
      11882,
      796,
      366,
      4033,
      397,
      1
    ],
    "start_token": 435,
    "end_token": 461,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      257,
      2779,
      1398,
      284,
      7719,
      2438,
      32349,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Class should inherit from a base class to promote code reuse and maintainability"
  },
  {
    "line": 104,
    "text": "                pass",
    "annotation": "\u2705 Best Practice: Use of a class attribute for a constant value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1208
    ],
    "start_token": 461,
    "end_token": 477,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      1398,
      11688,
      329,
      257,
      6937,
      1988
    ],
    "label": "best_practice",
    "reason": "Use of a class attribute for a constant value"
  },
  {
    "line": 105,
    "text": "",
    "annotation": "\u2705 Best Practice: Class attribute _name is defined, which can be useful for identifying or categorizing instances.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 477,
    "end_token": 477,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      11688,
      4808,
      3672,
      318,
      5447,
      11,
      543,
      460,
      307,
      4465,
      329,
      13720,
      393,
      17851,
      2890,
      10245,
      13
    ],
    "label": "best_practice",
    "reason": "Class attribute _name is defined, which can be useful for identifying or categorizing instances."
  },
  {
    "line": 110,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding a description to the docstring for better understanding of the method's purpose.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 477,
    "end_token": 477,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      6764,
      284,
      262,
      2205,
      8841,
      329,
      1365,
      4547,
      286,
      262,
      2446,
      338,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a description to the docstring for better understanding of the method's purpose."
  },
  {
    "line": 112,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dropna() indicates data cleaning, which is common in data preprocessing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 477,
    "end_token": 485,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4268,
      2616,
      3419,
      9217,
      1366,
      12724,
      11,
      543,
      318,
      2219,
      287,
      1366,
      662,
      36948,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of dropna() indicates data cleaning, which is common in data preprocessing."
  },
  {
    "line": 114,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary to create a list of data columns is a common pattern in data processing.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 485,
    "end_token": 485,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      284,
      2251,
      257,
      1351,
      286,
      1366,
      15180,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary to create a list of data columns is a common pattern in data processing."
  },
  {
    "line": 116,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Extracting values from a dictionary to use as labels in a plot.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 485,
    "end_token": 493,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      3815,
      422,
      257,
      22155,
      284,
      779,
      355,
      14722,
      287,
      257,
      7110,
      13
    ],
    "label": "ml_signal",
    "reason": "Extracting values from a dictionary to use as labels in a plot."
  },
  {
    "line": 118,
    "text": "        :return:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that _data_list and _label_list are validated to prevent potential issues in create_distplot.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      7783,
      25
    ],
    "start_token": 493,
    "end_token": 503,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      4808,
      7890,
      62,
      4868,
      290,
      4808,
      18242,
      62,
      4868,
      389,
      31031,
      284,
      2948,
      2785,
      2428,
      287,
      2251,
      62,
      17080,
      29487,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that _data_list and _label_list are validated to prevent potential issues in create_distplot."
  },
  {
    "line": 118,
    "text": "        :return:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of create_distplot suggests data visualization, which is a common step in data analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      7783,
      25
    ],
    "start_token": 503,
    "end_token": 513,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2251,
      62,
      17080,
      29487,
      5644,
      1366,
      32704,
      11,
      543,
      318,
      257,
      2219,
      2239,
      287,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of create_distplot suggests data visualization, which is a common step in data analysis."
  },
  {
    "line": 121,
    "text": "        _data = [",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Accessing dictionary keys without checking if they exist could lead to KeyError.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      7890,
      796,
      685
    ],
    "start_token": 513,
    "end_token": 524,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8798,
      278,
      22155,
      8251,
      1231,
      10627,
      611,
      484,
      2152,
      714,
      1085,
      284,
      7383,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Accessing dictionary keys without checking if they exist could lead to KeyError."
  },
  {
    "line": 115,
    "text": "    def _get_data(self) -> list:",
    "annotation": "\u2705 Best Practice: Class should inherit from a base class to promote code reuse and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      1136,
      62,
      7890,
      7,
      944,
      8,
      4613,
      1351,
      25
    ],
    "start_token": 524,
    "end_token": 538,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      257,
      2779,
      1398,
      284,
      7719,
      2438,
      32349,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Class should inherit from a base class to promote code reuse and maintainability"
  },
  {
    "line": 117,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Class attribute that defines a unique identifier for the class",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 538,
    "end_token": 538,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      11688,
      326,
      15738,
      257,
      3748,
      27421,
      329,
      262,
      1398
    ],
    "label": "ml_signal",
    "reason": "Class attribute that defines a unique identifier for the class"
  },
  {
    "line": 121,
    "text": "        _data = [",
    "annotation": "\u2705 Best Practice: Consider providing a more detailed docstring explaining the return value and method purpose.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      7890,
      796,
      685
    ],
    "start_token": 538,
    "end_token": 549,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4955,
      257,
      517,
      6496,
      2205,
      8841,
      11170,
      262,
      1441,
      1988,
      290,
      2446,
      4007,
      13
    ],
    "label": "best_practice",
    "reason": "Consider providing a more detailed docstring explaining the return value and method purpose."
  },
  {
    "line": 121,
    "text": "        _data = [",
    "annotation": "\ud83e\udde0 ML Signal: Usage of instance method with specific parameters can indicate a pattern for ML models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      7890,
      796,
      685
    ],
    "start_token": 549,
    "end_token": 560,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4554,
      2446,
      351,
      2176,
      10007,
      460,
      7603,
      257,
      3912,
      329,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of instance method with specific parameters can indicate a pattern for ML models."
  },
  {
    "line": 121,
    "text": "        _data = [",
    "annotation": "\ud83e\udde0 ML Signal: Usage of class attributes to determine behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      7890,
      796,
      685
    ],
    "start_token": 560,
    "end_token": 571,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1398,
      12608,
      284,
      5004,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of class attributes to determine behavior."
  },
  {
    "line": 130,
    "text": "    def figure(self) -> go.Figure:",
    "annotation": "\ud83e\udde0 ML Signal: Accessing DataFrame columns, common in data processing tasks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3785,
      7,
      944,
      8,
      4613,
      467,
      13,
      11337,
      25
    ],
    "start_token": 571,
    "end_token": 584,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      6060,
      19778,
      15180,
      11,
      2219,
      287,
      1366,
      7587,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing DataFrame columns, common in data processing tasks."
  },
  {
    "line": 130,
    "text": "    def figure(self) -> go.Figure:",
    "annotation": "\ud83e\udde0 ML Signal: Accessing DataFrame index, common in data processing tasks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3785,
      7,
      944,
      8,
      4613,
      467,
      13,
      11337,
      25
    ],
    "start_token": 584,
    "end_token": 597,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      6060,
      19778,
      6376,
      11,
      2219,
      287,
      1366,
      7587,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing DataFrame index, common in data processing tasks."
  },
  {
    "line": 131,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Converting DataFrame values to list, common in data processing tasks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 597,
    "end_token": 605,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6060,
      19778,
      3815,
      284,
      1351,
      11,
      2219,
      287,
      1366,
      7587,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting DataFrame values to list, common in data processing tasks."
  },
  {
    "line": 133,
    "text": "        :return:",
    "annotation": "\ud83e\udde0 ML Signal: Use of keyword arguments to pass additional parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      7783,
      25
    ],
    "start_token": 605,
    "end_token": 615,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      21179,
      7159,
      284,
      1208,
      3224,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of keyword arguments to pass additional parameters."
  },
  {
    "line": 137,
    "text": "        _figure[\"layout\"].update(template=None)",
    "annotation": "\u2705 Best Practice: Consider renaming `_data` to `data` as leading underscores are typically used for private variables.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      26875,
      14692,
      39786,
      1,
      4083,
      19119,
      7,
      28243,
      28,
      14202,
      8
    ],
    "start_token": 615,
    "end_token": 634,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      8851,
      3723,
      4600,
      62,
      7890,
      63,
      284,
      4600,
      7890,
      63,
      355,
      3756,
      41731,
      389,
      6032,
      973,
      329,
      2839,
      9633,
      13
    ],
    "label": "best_practice",
    "reason": "Consider renaming `_data` to `data` as leading underscores are typically used for private variables."
  },
  {
    "line": 132,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of a leading underscore in _name indicates that it is intended to be a protected class attribute.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 634,
    "end_token": 634,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      3756,
      44810,
      287,
      4808,
      3672,
      9217,
      326,
      340,
      318,
      5292,
      284,
      307,
      257,
      6861,
      1398,
      11688,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a leading underscore in _name indicates that it is intended to be a protected class attribute."
  },
  {
    "line": 137,
    "text": "        _figure[\"layout\"].update(template=None)",
    "annotation": "\u2705 Best Practice: Use a descriptive variable name instead of _data for better readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      26875,
      14692,
      39786,
      1,
      4083,
      19119,
      7,
      28243,
      28,
      14202,
      8
    ],
    "start_token": 634,
    "end_token": 653,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      35644,
      7885,
      1438,
      2427,
      286,
      4808,
      7890,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use a descriptive variable name instead of _data for better readability."
  },
  {
    "line": 137,
    "text": "        _figure[\"layout\"].update(template=None)",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a dictionary to process items, common pattern in data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      26875,
      14692,
      39786,
      1,
      4083,
      19119,
      7,
      28243,
      28,
      14202,
      8
    ],
    "start_token": 653,
    "end_token": 672,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      22155,
      284,
      1429,
      3709,
      11,
      2219,
      3912,
      287,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a dictionary to process items, common pattern in data processing."
  },
  {
    "line": 143,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of instance method with parameters, indicating object-oriented design.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 672,
    "end_token": 672,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4554,
      2446,
      351,
      10007,
      11,
      12739,
      2134,
      12,
      17107,
      1486,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of instance method with parameters, indicating object-oriented design."
  },
  {
    "line": 145,
    "text": "class BarGraph(BaseGraph):",
    "annotation": "\u2705 Best Practice: Explicitly return the variable to improve code clarity.",
    "confidence": 0.5,
    "tokens": [
      4871,
      2409,
      37065,
      7,
      14881,
      37065,
      2599
    ],
    "start_token": 672,
    "end_token": 679,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      1441,
      262,
      7885,
      284,
      2987,
      2438,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly return the variable to improve code clarity."
  },
  {
    "line": 148,
    "text": "",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class functionality",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 679,
    "end_token": 679,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      11244
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class functionality"
  },
  {
    "line": 158,
    "text": "        _data_list = [_t_df[_col] for _col in self._name_dict]",
    "annotation": "\u2705 Best Practice: Use of docstring to describe parameters and their types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      7890,
      62,
      4868,
      796,
      685,
      62,
      83,
      62,
      7568,
      29795,
      4033,
      60,
      329,
      4808,
      4033,
      287,
      2116,
      13557,
      3672,
      62,
      11600,
      60
    ],
    "start_token": 679,
    "end_token": 709,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      10007,
      290,
      511,
      3858
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe parameters and their types"
  },
  {
    "line": 197,
    "text": "            for _col, _name in self._name_dict.items()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for KeyError if 'cols' is not in self._subplots_kwargs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4808,
      4033,
      11,
      4808,
      3672,
      287,
      2116,
      13557,
      3672,
      62,
      11600,
      13,
      23814,
      3419
    ],
    "start_token": 709,
    "end_token": 735,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      7383,
      12331,
      611,
      705,
      4033,
      82,
      6,
      318,
      407,
      287,
      2116,
      13557,
      7266,
      489,
      1747,
      62,
      46265,
      22046
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for KeyError if 'cols' is not in self._subplots_kwargs"
  },
  {
    "line": 200,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for AttributeError if self._df is None",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 735,
    "end_token": 735,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      3460,
      4163,
      12331,
      611,
      2116,
      13557,
      7568,
      318,
      6045
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for AttributeError if self._df is None"
  },
  {
    "line": 211,
    "text": "        kind_map: dict = None,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame columns to generate sub-graph data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1611,
      62,
      8899,
      25,
      8633,
      796,
      6045,
      11
    ],
    "start_token": 735,
    "end_token": 750,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15180,
      284,
      7716,
      850,
      12,
      34960,
      1366
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame columns to generate sub-graph data"
  },
  {
    "line": 215,
    "text": "        subplots_kwargs: dict = None,",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      850,
      489,
      1747,
      62,
      46265,
      22046,
      25,
      8633,
      796,
      6045,
      11
    ],
    "start_token": 750,
    "end_token": 768,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 227,
    "text": "        :param sub_graph_layout: Layout of each graphic, similar to 'layout'",
    "annotation": "\ud83e\udde0 ML Signal: Appending structured data to a list for sub-graph configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      850,
      62,
      34960,
      62,
      39786,
      25,
      47639,
      286,
      1123,
      13028,
      11,
      2092,
      284,
      705,
      39786,
      6
    ],
    "start_token": 768,
    "end_token": 793,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      20793,
      1366,
      284,
      257,
      1351,
      329,
      850,
      12,
      34960,
      8398
    ],
    "label": "ml_signal",
    "reason": "Appending structured data to a list for sub-graph configuration"
  },
  {
    "line": 228,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Collecting subplot titles for visualization",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 793,
    "end_token": 793,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      850,
      29487,
      8714,
      329,
      32704
    ],
    "label": "ml_signal",
    "reason": "Collecting subplot titles for visualization"
  },
  {
    "line": 231,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names for readability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 793,
    "end_token": 793,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names for readability"
  },
  {
    "line": 233,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of math.ceil for rounding up ensures enough rows",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 793,
    "end_token": 793,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10688,
      13,
      344,
      346,
      329,
      38185,
      510,
      19047,
      1576,
      15274
    ],
    "label": "best_practice",
    "reason": "Use of math.ceil for rounding up ensures enough rows"
  },
  {
    "line": 235,
    "text": "",
    "annotation": "\u2705 Best Practice: Initializing dictionary for subplot configuration",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 793,
    "end_token": 793,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      22155,
      329,
      850,
      29487,
      8398
    ],
    "label": "best_practice",
    "reason": "Initializing dictionary for subplot configuration"
  },
  {
    "line": 237,
    "text": "",
    "annotation": "\u2705 Best Practice: Storing number of rows in subplot configuration",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 793,
    "end_token": 793,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      1271,
      286,
      15274,
      287,
      850,
      29487,
      8398
    ],
    "label": "best_practice",
    "reason": "Storing number of rows in subplot configuration"
  },
  {
    "line": 239,
    "text": "",
    "annotation": "\u2705 Best Practice: Storing number of columns in subplot configuration",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 793,
    "end_token": 793,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      1271,
      286,
      15180,
      287,
      850,
      29487,
      8398
    ],
    "label": "best_practice",
    "reason": "Storing number of columns in subplot configuration"
  },
  {
    "line": 241,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly setting shared axes for clarity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 793,
    "end_token": 793,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      4888,
      34197,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly setting shared axes for clarity"
  },
  {
    "line": 245,
    "text": "",
    "annotation": "\u2705 Best Practice: Calculating vertical spacing based on number of rows",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 793,
    "end_token": 793,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27131,
      803,
      11723,
      31050,
      1912,
      319,
      1271,
      286,
      15274
    ],
    "label": "best_practice",
    "reason": "Calculating vertical spacing based on number of rows"
  },
  {
    "line": 246,
    "text": "        :param subplots_kwargs: `plotly.tools.make_subplots` original parameters",
    "annotation": "\u2705 Best Practice: Disabling grid printing for cleaner plots",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1058,
      17143,
      850,
      489,
      1747,
      62,
      46265,
      22046,
      25,
      4600,
      29487,
      306,
      13,
      31391,
      13,
      15883,
      62,
      7266,
      489,
      1747,
      63,
      2656,
      10007
    ],
    "start_token": 793,
    "end_token": 823,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3167,
      11716,
      10706,
      13570,
      329,
      21723,
      21528
    ],
    "label": "best_practice",
    "reason": "Disabling grid printing for cleaner plots"
  },
  {
    "line": 248,
    "text": "                - shared_xaxes: bool, default False",
    "annotation": "\u2705 Best Practice: Using column names as subplot titles for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      4888,
      62,
      87,
      897,
      274,
      25,
      20512,
      11,
      4277,
      10352
    ],
    "start_token": 823,
    "end_token": 849,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      5721,
      3891,
      355,
      850,
      29487,
      8714,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Using column names as subplot titles for clarity"
  },
  {
    "line": 245,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding a return type hint for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 849,
    "end_token": 849,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      1441,
      2099,
      9254,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a return type hint for better readability and maintainability."
  },
  {
    "line": 247,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a collection to process or transform data is a common pattern.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 849,
    "end_token": 849,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      4947,
      284,
      1429,
      393,
      6121,
      1366,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a collection to process or transform data is a common pattern."
  },
  {
    "line": 249,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider using isinstance with a tuple for multiple types if needed in the future.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 849,
    "end_token": 849,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      318,
      39098,
      351,
      257,
      46545,
      329,
      3294,
      3858,
      611,
      2622,
      287,
      262,
      2003,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using isinstance with a tuple for multiple types if needed in the future."
  },
  {
    "line": 253,
    "text": "",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 849,
    "end_token": 849,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability."
  },
  {
    "line": 253,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Factory or singleton pattern usage for object creation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 849,
    "end_token": 849,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      19239,
      393,
      2060,
      1122,
      3912,
      8748,
      329,
      2134,
      6282,
      13
    ],
    "label": "ml_signal",
    "reason": "Factory or singleton pattern usage for object creation."
  },
  {
    "line": 267,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic exception without a message can make debugging difficult.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 849,
    "end_token": 849,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      6631,
      1231,
      257,
      3275,
      460,
      787,
      28769,
      2408,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic exception without a message can make debugging difficult."
  },
  {
    "line": 271,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing object attributes dynamically.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 849,
    "end_token": 849,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      2134,
      12608,
      32366,
      13
    ],
    "label": "ml_signal",
    "reason": "Accessing object attributes dynamically."
  },
  {
    "line": 272,
    "text": "        self._df = df",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a collection to process or transform data is a common pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      7568,
      796,
      47764
    ],
    "start_token": 849,
    "end_token": 861,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      4947,
      284,
      1429,
      393,
      6121,
      1366,
      318,
      257,
      2219,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a collection to process or transform data is a common pattern."
  },
  {
    "line": 275,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items to update or process data.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 861,
    "end_token": 861,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709,
      284,
      4296,
      393,
      1429,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items to update or process data."
  },
  {
    "line": 275,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider using a constant or configuration for default values.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 861,
    "end_token": 861,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      6937,
      393,
      8398,
      329,
      4277,
      3815,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a constant or configuration for default values."
  },
  {
    "line": 274,
    "text": "        self._sub_graph_layout = sub_graph_layout",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a private attribute, indicating encapsulation pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      7266,
      62,
      34960,
      62,
      39786,
      796,
      850,
      62,
      34960,
      62,
      39786
    ],
    "start_token": 861,
    "end_token": 881,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      2839,
      11688,
      11,
      12739,
      32652,
      1741,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method returning a private attribute, indicating encapsulation pattern"
  }
]
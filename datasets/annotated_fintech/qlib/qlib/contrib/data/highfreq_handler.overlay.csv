annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,0,best_practice,2,Grouping imports from the same module together improves readability.,,0,,[]
‚úÖ Best Practice: Constants should be named using all uppercase letters with underscores.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 3706, 1262, 477, 334, 39921, 589, 7475, 351, 41731, 13]",0.5,0,best_practice,4,Constants should be named using all uppercase letters with underscores.,,0,,[]
‚ö†Ô∏è SAST Risk (Low): Mutable default arguments like lists can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13859, 540, 4277, 7159, 588, 8341, 460, 1085, 284, 10059, 4069, 13]",1.0,15,sast_risk,16,Mutable default arguments like lists can lead to unexpected behavior.,Low,0,"        fit_start_time=None,","[220, 220, 220, 220, 220, 220, 220, 4197, 62, 9688, 62, 2435, 28, 14202, 11]"
‚ö†Ô∏è SAST Risk (Low): Mutable default arguments like lists can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13859, 540, 4277, 7159, 588, 8341, 460, 1085, 284, 10059, 4069, 13]",1.0,28,sast_risk,18,Mutable default arguments like lists can lead to unexpected behavior.,Low,15,"        drop_raw=True,","[220, 220, 220, 220, 220, 220, 220, 4268, 62, 1831, 28, 17821, 11]"
üß† ML Signal: Usage of 'get_feature_config' suggests a pattern for feature configuration in ML.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 705, 1136, 62, 30053, 62, 11250, 6, 5644, 257, 3912, 329, 3895, 8398, 287, 10373, 13]",0.5,54,ml_signal,26,Usage of 'get_feature_config' suggests a pattern for feature configuration in ML.,,28,"                ""config"": self.get_feature_config(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 11250, 1298, 2116, 13, 1136, 62, 30053, 62, 11250, 22784]"
"üß† ML Signal: Use of 'super().__init__' indicates inheritance, common in ML model or data pipeline setup.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 705, 16668, 22446, 834, 15003, 834, 6, 9217, 24155, 11, 2219, 287, 10373, 2746, 393, 1366, 11523, 9058, 13]",0.5,80,ml_signal,26,"Use of 'super().__init__' indicates inheritance, common in ML model or data pipeline setup.",,54,"                ""config"": self.get_feature_config(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 11250, 1298, 2116, 13, 1136, 62, 30053, 62, 11250, 22784]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",0.5,99,best_practice,38,Use of descriptive variable names improves code readability.,,80,"            drop_raw=drop_raw,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4268, 62, 1831, 28, 14781, 62, 1831, 11]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",0.5,99,best_practice,40,Use of descriptive variable names improves code readability.,,99,,[]
‚úÖ Best Practice: Use of default parameter values for flexibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688]",1.0,111,best_practice,41,Use of default parameter values for flexibility,,99,    def get_feature_config(self):,"[220, 220, 220, 825, 651, 62, 30053, 62, 11250, 7, 944, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential for format string injection if inputs are not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 5794, 4731, 16954, 611, 17311, 389, 407, 5336, 36951]",1.0,142,sast_risk,46,Potential for format string injection if inputs are not sanitized,Low,111,"        template_paused = ""Select(Gt($paused_num, 1.001), {0})""","[220, 220, 220, 220, 220, 220, 220, 11055, 62, 8957, 1484, 796, 366, 17563, 7, 38, 83, 16763, 8957, 1484, 62, 22510, 11, 352, 13, 8298, 828, 1391, 15, 92, 16725]"
üß† ML Signal: Repeated pattern of adding normalized price features,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 3912, 286, 4375, 39279, 2756, 3033]",0.5,142,ml_signal,54,Repeated pattern of adding normalized price features,,142,,[]
üß† ML Signal: Consistent naming pattern for features,"[8582, 100, 254, 10373, 26484, 25, 3515, 7609, 19264, 3912, 329, 3033]",1.0,158,ml_signal,60,Consistent naming pattern for features,,142,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Potential for format string injection if inputs are not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 5794, 4731, 16954, 611, 17311, 389, 407, 5336, 36951]",1.0,182,sast_risk,72,Potential for format string injection if inputs are not sanitized,Low,158,"        fields += [get_normalized_price_feature(""$high"", 240)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 8929, 1600, 14956, 15437]"
‚ö†Ô∏è SAST Risk (Low): Potential for format string injection if inputs are not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 5794, 4731, 16954, 611, 17311, 389, 407, 5336, 36951]",1.0,204,sast_risk,82,Potential for format string injection if inputs are not sanitized,Low,182,                template_paused.format(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 8957, 1484, 13, 18982, 7]"
‚úÖ Best Practice: Consider using immutable default arguments like None instead of mutable ones like lists,"[26486, 227, 6705, 19939, 25, 12642, 1262, 40139, 4277, 7159, 588, 6045, 2427, 286, 4517, 540, 3392, 588, 8341]",1.0,215,best_practice,100,Consider using immutable default arguments like None instead of mutable ones like lists,,204,"        return fields, names","[220, 220, 220, 220, 220, 220, 220, 1441, 7032, 11, 3891]"
‚ö†Ô∏è SAST Risk (Low): Potential issue with mutable default arguments (list),"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 351, 4517, 540, 4277, 7159, 357, 4868, 8]",0.5,226,sast_risk,103,Potential issue with mutable default arguments (list),Low,215,class HighFreqGeneralHandler(DataHandlerLP):,"[4871, 3334, 20366, 80, 12218, 25060, 7, 6601, 25060, 19930, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential issue with mutable default arguments (list),"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 351, 4517, 540, 4277, 7159, 357, 4868, 8]",0.5,234,sast_risk,104,Potential issue with mutable default arguments (list),Low,226,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
üß† ML Signal: Usage of a method to get feature configuration,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 651, 3895, 8398]",0.5,247,ml_signal,113,Usage of a method to get feature configuration,,234,"        drop_raw=True,","[220, 220, 220, 220, 220, 220, 220, 4268, 62, 1831, 28, 17821, 11]"
üß† ML Signal: Use of a superclass constructor with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2208, 4871, 23772, 351, 2176, 10007]",0.5,260,ml_signal,113,Use of a superclass constructor with specific parameters,,247,"        drop_raw=True,","[220, 220, 220, 220, 220, 220, 220, 4268, 62, 1831, 28, 17821, 11]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,272,best_practice,125,Use of descriptive variable names improves code readability.,,260,        data_loader = {,"[220, 220, 220, 220, 220, 220, 220, 1366, 62, 29356, 796, 1391]"
‚úÖ Best Practice: Use of f-string for string formatting is more readable and efficient.,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 4731, 33313, 318, 517, 31744, 290, 6942, 13]",1.0,288,best_practice,127,Use of f-string for string formatting is more readable and efficient.,,272,"            ""kwargs"": {","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 46265, 22046, 1298, 1391]"
‚úÖ Best Practice: Use of f-strings for string formatting improves readability and performance.,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 37336, 329, 4731, 33313, 19575, 1100, 1799, 290, 2854, 13]",1.0,314,best_practice,128,Use of f-strings for string formatting improves readability and performance.,,288,"                ""config"": self.get_feature_config(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 11250, 1298, 2116, 13, 1136, 62, 30053, 62, 11250, 22784]"
‚ö†Ô∏è SAST Risk (Low): Potential for format string injection if template_paused or template_if are user-controlled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 5794, 4731, 16954, 611, 11055, 62, 8957, 1484, 393, 11055, 62, 361, 389, 2836, 12, 14401, 13]",0.5,322,sast_risk,133,Potential for format string injection if template_paused or template_if are user-controlled.,Low,314,        },"[220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Iterating over self.columns suggests dynamic feature generation based on data columns.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 2116, 13, 28665, 82, 5644, 8925, 3895, 5270, 1912, 319, 1366, 15180, 13]",1.0,341,ml_signal,141,Iterating over self.columns suggests dynamic feature generation based on data columns.,,322,"            drop_raw=drop_raw,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4268, 62, 1831, 28, 14781, 62, 1831, 11]"
üß† ML Signal: Appending features to a list indicates feature engineering for ML models.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 3033, 284, 257, 1351, 9217, 3895, 8705, 329, 10373, 4981, 13]",0.5,341,ml_signal,143,Appending features to a list indicates feature engineering for ML models.,,341,,[]
‚ö†Ô∏è SAST Risk (Low): Use of string formatting with potential for injection if template_paused is user-controlled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 4731, 33313, 351, 2785, 329, 16954, 611, 11055, 62, 8957, 1484, 318, 2836, 12, 14401, 13]",0.5,365,sast_risk,152,Use of string formatting with potential for injection if template_paused is user-controlled.,Low,341,            # norm with the close price of 237th minute of yesterday.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 2593, 351, 262, 1969, 2756, 286, 34385, 400, 5664, 286, 7415, 13]"
‚ö†Ô∏è SAST Risk (Low): Use of string formatting with potential for injection if template_paused is user-controlled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 4731, 33313, 351, 2785, 329, 16954, 611, 11055, 62, 8957, 1484, 318, 2836, 12, 14401, 13]",0.5,413,sast_risk,162,Use of string formatting with potential for injection if template_paused is user-controlled.,Low,365,"                    template_norm.format(template_if.format(""$close"", price_field), template_fillnan.format(""$close""))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 27237, 13, 18982, 7, 28243, 62, 361, 13, 18982, 7203, 3, 19836, 1600, 2756, 62, 3245, 828, 11055, 62, 20797, 12647, 13, 18982, 7203, 3, 19836, 48774]"
‚úÖ Best Practice: Class should inherit from a base class to ensure consistent interface and behavior,"[26486, 227, 6705, 19939, 25, 5016, 815, 16955, 422, 257, 2779, 1398, 284, 4155, 6414, 7071, 290, 4069]",0.5,425,best_practice,164,Class should inherit from a base class to ensure consistent interface and behavior,,413,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Default parameter values can indicate common usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 15161, 11507, 3815, 460, 7603, 2219, 8748, 7572, 13]",1.0,442,ml_signal,171,Default parameter values can indicate common usage patterns.,,425,        for column_name in self.columns:,"[220, 220, 220, 220, 220, 220, 220, 329, 5721, 62, 3672, 287, 2116, 13, 28665, 82, 25]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779, 13]",0.5,459,best_practice,171,Use of default parameter values for flexibility and ease of use.,,442,        for column_name in self.columns:,"[220, 220, 220, 220, 220, 220, 220, 329, 5721, 62, 3672, 287, 2116, 13, 28665, 82, 25]"
üß† ML Signal: Configuration settings can indicate common feature extraction patterns.,"[8582, 100, 254, 10373, 26484, 25, 28373, 6460, 460, 7603, 2219, 3895, 22236, 7572, 13]",0.5,519,ml_signal,179,Configuration settings can indicate common feature extraction patterns.,,459,"                    f""{{0}}/Ref(DayLast(Mean({{0}}, {self.day_length * 30})), {self.day_length})"".format(""$volume"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 27007, 15, 11709, 14, 8134, 7, 12393, 5956, 7, 5308, 272, 15090, 90, 15, 92, 5512, 1391, 944, 13, 820, 62, 13664, 1635, 1542, 30072, 828, 1391, 944, 13, 820, 62, 13664, 30072, 1911, 18982, 7203, 3, 29048, 4943]"
üß† ML Signal: Frequency settings can indicate common data processing intervals.,"[8582, 100, 254, 10373, 26484, 25, 31902, 6460, 460, 7603, 2219, 1366, 7587, 20016, 13]",1.0,579,ml_signal,179,Frequency settings can indicate common data processing intervals.,,519,"                    f""{{0}}/Ref(DayLast(Mean({{0}}, {self.day_length * 30})), {self.day_length})"".format(""$volume"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 27007, 15, 11709, 14, 8134, 7, 12393, 5956, 7, 5308, 272, 15090, 90, 15, 92, 5512, 1391, 944, 13, 820, 62, 13664, 1635, 1542, 30072, 828, 1391, 944, 13, 820, 62, 13664, 30072, 1911, 18982, 7203, 3, 29048, 4943]"
‚úÖ Best Practice: Use of super() to ensure proper inheritance and initialization.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 4155, 1774, 24155, 290, 37588, 13]",1.0,589,best_practice,185,Use of super() to ensure proper inheritance and initialization.,,579,        fields += [,"[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the function.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163, 13]",0.5,599,best_practice,185,Consider adding a docstring to describe the purpose and usage of the function.,,589,        fields += [,"[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685]"
‚úÖ Best Practice: Initialize lists before using them to store values.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8341, 878, 1262, 606, 284, 3650, 3815, 13]",0.5,631,best_practice,187,Initialize lists before using them to store values.,,599,"                ""If(IsNull({0}), 0, {0})"".format(","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 1532, 7, 3792, 35067, 15090, 15, 92, 828, 657, 11, 1391, 15, 30072, 1911, 18982, 7]"
‚úÖ Best Practice: Use descriptive variable names for better readability.,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799, 13]",0.5,651,best_practice,190,Use descriptive variable names for better readability.,,631,                    ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of template strings for feature configuration.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11055, 13042, 329, 3895, 8398, 13]",0.5,666,ml_signal,194,Usage of template strings for feature configuration.,,651,"        names += [""$volume_1""]","[220, 220, 220, 220, 220, 220, 220, 3891, 15853, 14631, 3, 29048, 62, 16, 8973]"
üß† ML Signal: Tracking feature names for later reference.,"[8582, 100, 254, 10373, 26484, 25, 37169, 3895, 3891, 329, 1568, 4941, 13]",0.5,666,ml_signal,195,Tracking feature names for later reference.,,666,,[]
‚úÖ Best Practice: Return statements should be clear and consistent.,"[26486, 227, 6705, 19939, 25, 8229, 6299, 815, 307, 1598, 290, 6414, 13]",0.5,689,best_practice,210,Return statements should be clear and consistent.,,666,"                ""swap_level"": False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 2032, 499, 62, 5715, 1298, 10352, 11]"
"üß† ML Signal: Class definition for a backtest handler, useful for identifying patterns in financial data processing","[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 329, 257, 736, 9288, 21360, 11, 4465, 329, 13720, 7572, 287, 3176, 1366, 7587]",0.5,715,ml_signal,209,"Class definition for a backtest handler, useful for identifying patterns in financial data processing",,689,"                ""config"": self.get_feature_config(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 11250, 1298, 2116, 13, 1136, 62, 30053, 62, 11250, 22784]"
‚úÖ Best Practice: Use of self to define instance variables for encapsulation and clarity.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2116, 284, 8160, 4554, 9633, 329, 32652, 1741, 290, 16287, 13]",0.5,715,best_practice,220,Use of self to define instance variables for encapsulation and clarity.,,715,,[]
‚úÖ Best Practice: Converting list to set for columns to ensure uniqueness and faster lookup.,"[26486, 227, 6705, 19939, 25, 35602, 889, 1351, 284, 900, 329, 15180, 284, 4155, 49650, 290, 5443, 35847, 13]",1.0,725,best_practice,222,Converting list to set for columns to ensure uniqueness and faster lookup.,,715,        fields = [],"[220, 220, 220, 220, 220, 220, 220, 7032, 796, 17635]"
"üß† ML Signal: Use of a dictionary to configure a data loader, indicating a pattern for dynamic configuration.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 22155, 284, 17425, 257, 1366, 40213, 11, 12739, 257, 3912, 329, 8925, 8398, 13]",1.0,735,ml_signal,222,"Use of a dictionary to configure a data loader, indicating a pattern for dynamic configuration.",,725,        fields = [],"[220, 220, 220, 220, 220, 220, 220, 7032, 796, 17635]"
"üß† ML Signal: Dynamic feature configuration retrieval, useful for model training.","[8582, 100, 254, 10373, 26484, 25, 26977, 3895, 8398, 45069, 11, 4465, 329, 2746, 3047, 13]",0.5,749,ml_signal,231,"Dynamic feature configuration retrieval, useful for model training.",,735,"        names += [""$close0""]","[220, 220, 220, 220, 220, 220, 220, 3891, 15853, 14631, 3, 19836, 15, 8973]"
‚úÖ Best Practice: Use of super() to ensure proper inheritance and initialization of the parent class.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 4155, 1774, 24155, 290, 37588, 286, 262, 2560, 1398, 13]",0.5,773,best_practice,237,Use of super() to ensure proper inheritance and initialization of the parent class.,,749,"                    ""$vwap"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17971, 85, 86, 499, 1600]"
üß† ML Signal: Checking for specific column names in self.columns indicates feature selection logic.,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 2176, 5721, 3891, 287, 2116, 13, 28665, 82, 9217, 3895, 6356, 9156, 13]",1.0,781,ml_signal,240,Checking for specific column names in self.columns indicates feature selection logic.,,773,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
‚úÖ Best Practice: Use of f-string for string formatting improves readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 4731, 33313, 19575, 1100, 1799, 13]",1.0,781,best_practice,242,Use of f-string for string formatting improves readability.,,781,,[]
üß† ML Signal: Appending to fields list suggests dynamic feature configuration.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 284, 7032, 1351, 5644, 8925, 3895, 8398, 13]",1.0,795,ml_signal,247,Appending to fields list suggests dynamic feature configuration.,,781,"        names += [""$factor0""]","[220, 220, 220, 220, 220, 220, 220, 3891, 15853, 14631, 3, 31412, 15, 8973]"
üß† ML Signal: Appending to names list suggests dynamic feature naming.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 284, 3891, 1351, 5644, 8925, 3895, 19264, 13]",1.0,806,ml_signal,249,Appending to names list suggests dynamic feature naming.,,795,"        return fields, names","[220, 220, 220, 220, 220, 220, 220, 1441, 7032, 11, 3891]"
üß† ML Signal: Checking for specific column names in self.columns indicates feature selection logic.,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 2176, 5721, 3891, 287, 2116, 13, 28665, 82, 9217, 3895, 6356, 9156, 13]",1.0,818,ml_signal,252,Checking for specific column names in self.columns indicates feature selection logic.,,806,class HighFreqGeneralBacktestHandler(DataHandler):,"[4871, 3334, 20366, 80, 12218, 7282, 9288, 25060, 7, 6601, 25060, 2599]"
üß† ML Signal: Checking for specific column names in self.columns indicates feature selection logic.,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 2176, 5721, 3891, 287, 2116, 13, 28665, 82, 9217, 3895, 6356, 9156, 13]",1.0,831,ml_signal,258,Checking for specific column names in self.columns indicates feature selection logic.,,818,"        day_length=240,","[220, 220, 220, 220, 220, 220, 220, 1110, 62, 13664, 28, 16102, 11]"
‚úÖ Best Practice: Returning a tuple of fields and names improves function clarity.,"[26486, 227, 6705, 19939, 25, 42882, 257, 46545, 286, 7032, 290, 3891, 19575, 2163, 16287, 13]",1.0,844,best_practice,258,Returning a tuple of fields and names improves function clarity.,,831,"        day_length=240,","[220, 220, 220, 220, 220, 220, 220, 1110, 62, 13664, 28, 16102, 11]"
‚ö†Ô∏è SAST Risk (Low): Mutable default arguments (lists) can lead to unexpected behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13859, 540, 4277, 7159, 357, 20713, 8, 460, 1085, 284, 10059, 4069]",1.0,866,sast_risk,270,Mutable default arguments (lists) can lead to unexpected behavior,Low,844,"                ""freq"": freq,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 19503, 80, 1298, 2030, 80, 11]"
‚ö†Ô∏è SAST Risk (Low): Mutable default arguments (lists) can lead to unexpected behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13859, 540, 4277, 7159, 357, 20713, 8, 460, 1085, 284, 10059, 4069]",1.0,878,sast_risk,272,Mutable default arguments (lists) can lead to unexpected behavior,Low,866,"            },","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8964]"
üß† ML Signal: Use of data loader configuration for machine learning data processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1366, 40213, 8398, 329, 4572, 4673, 1366, 7587]",0.5,890,ml_signal,281,Use of data loader configuration for machine learning data processing,,878,    def get_feature_config(self):,"[220, 220, 220, 825, 651, 62, 30053, 62, 11250, 7, 944, 2599]"
‚úÖ Best Practice: Use descriptive variable names for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,890,best_practice,293,Use descriptive variable names for better readability and maintainability.,,890,,[]
‚úÖ Best Practice: Use descriptive variable names for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,904,best_practice,295,Use descriptive variable names for better readability and maintainability.,,890,            fields += [,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685]"
‚úÖ Best Practice: Use descriptive variable names for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,916,best_practice,297,Use descriptive variable names for better readability and maintainability.,,904,            ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
‚úÖ Best Practice: Function name is descriptive and indicates its purpose,"[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 35644, 290, 9217, 663, 4007]",1.0,960,best_practice,296,Function name is descriptive and indicates its purpose,,916,"                template_paused.format(template_if.format(template_fillnan.format(""$close""), ""$vwap"")),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 8957, 1484, 13, 18982, 7, 28243, 62, 361, 13, 18982, 7, 28243, 62, 20797, 12647, 13, 18982, 7203, 3, 19836, 12340, 17971, 85, 86, 499, 4943, 828]"
‚úÖ Best Practice: Default parameter value for 'shift' is provided,"[26486, 227, 6705, 19939, 25, 15161, 11507, 1988, 329, 705, 30846, 6, 318, 2810]",1.0,980,best_practice,298,Default parameter value for 'shift' is provided,,960,"            names += [""$vwap0""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3891, 15853, 14631, 3, 85, 86, 499, 15, 8973]"
‚úÖ Best Practice: Readable string formatting for template,"[26486, 227, 6705, 19939, 25, 4149, 540, 4731, 33313, 329, 11055]",0.5,997,best_practice,300,Readable string formatting for template,,980,"        if ""$volume"" in self.columns:","[220, 220, 220, 220, 220, 220, 220, 611, 17971, 29048, 1, 287, 2116, 13, 28665, 82, 25]"
‚úÖ Best Practice: Readable string formatting for template,"[26486, 227, 6705, 19939, 25, 4149, 540, 4731, 33313, 329, 11055]",0.5,1015,best_practice,302,Readable string formatting for template,,997,"            names += [""$volume0""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3891, 15853, 14631, 3, 29048, 15, 8973]"
‚úÖ Best Practice: Readable string formatting for template,"[26486, 227, 6705, 19939, 25, 4149, 540, 4731, 33313, 329, 11055]",0.5,1026,best_practice,307,Readable string formatting for template,,1015,class HighFreqOrderHandler(DataHandlerLP):,"[4871, 3334, 20366, 80, 18743, 25060, 7, 6601, 25060, 19930, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Potential for format string injection if 'template_paused' or 'template_if' are user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 5794, 4731, 16954, 611, 705, 28243, 62, 8957, 1484, 6, 393, 705, 28243, 62, 361, 6, 389, 2836, 12, 14401]",0.5,1037,sast_risk,307,Potential for format string injection if 'template_paused' or 'template_if' are user-controlled,Medium,1026,class HighFreqOrderHandler(DataHandlerLP):,"[4871, 3334, 20366, 80, 18743, 25060, 7, 6601, 25060, 19930, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Potential for format string injection if 'template_fillnan' is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 5794, 4731, 16954, 611, 705, 28243, 62, 20797, 12647, 6, 318, 2836, 12, 14401]",0.5,1046,sast_risk,309,Potential for format string injection if 'template_fillnan' is user-controlled,Medium,1037,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
‚ö†Ô∏è SAST Risk (Medium): Potential for format string injection if 'template_if' is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 5794, 4731, 16954, 611, 705, 28243, 62, 361, 6, 318, 2836, 12, 14401]",0.5,1059,sast_risk,310,Potential for format string injection if 'template_if' is user-controlled,Medium,1046,"        instruments=""csi300"",","[220, 220, 220, 220, 220, 220, 220, 12834, 2625, 6359, 72, 6200, 1600]"
"‚úÖ Best Practice: Returns a value, making the function reusable","[26486, 227, 6705, 19939, 25, 16409, 257, 1988, 11, 1642, 262, 2163, 42339]",1.0,1072,best_practice,314,"Returns a value, making the function reusable",,1059,"        learn_processors=[],","[220, 220, 220, 220, 220, 220, 220, 2193, 62, 14681, 669, 41888, 4357]"
‚ö†Ô∏è SAST Risk (Low): Potential use of undefined variable 'template_paused',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 779, 286, 28721, 7885, 705, 28243, 62, 8957, 1484, 6]",1.0,1085,sast_risk,314,Potential use of undefined variable 'template_paused',Low,1072,"        learn_processors=[],","[220, 220, 220, 220, 220, 220, 220, 2193, 62, 14681, 669, 41888, 4357]"
‚ö†Ô∏è SAST Risk (Low): Potential use of undefined variable 'template_if',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 779, 286, 28721, 7885, 705, 28243, 62, 361, 6]",1.0,1098,sast_risk,314,Potential use of undefined variable 'template_if',Low,1085,"        learn_processors=[],","[220, 220, 220, 220, 220, 220, 220, 2193, 62, 14681, 669, 41888, 4357]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1114,ml_signal,325,Usage of financial indicators for feature generation,,1098,"            ""kwargs"": {","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 46265, 22046, 1298, 1391]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1137,ml_signal,327,Usage of financial indicators for feature generation,,1114,"                ""swap_level"": False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 2032, 499, 62, 5715, 1298, 10352, 11]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1163,ml_signal,329,Usage of financial indicators for feature generation,,1137,"                ""inst_processors"": inst_processors,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8625, 62, 14681, 669, 1298, 916, 62, 14681, 669, 11]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1171,ml_signal,331,Usage of financial indicators for feature generation,,1163,        },"[220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1188,ml_signal,333,Usage of financial indicators for feature generation,,1171,"            instruments=instruments,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12834, 28, 259, 2536, 2886, 11]"
üß† ML Signal: Tracking feature names for financial data,"[8582, 100, 254, 10373, 26484, 25, 37169, 3895, 3891, 329, 3176, 1366]",0.5,1207,ml_signal,335,Tracking feature names for financial data,,1188,"            end_time=end_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 28, 437, 62, 2435, 11]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1229,ml_signal,337,Usage of financial indicators for feature generation,,1207,"            infer_processors=infer_processors,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13249, 62, 14681, 669, 28, 259, 2232, 62, 14681, 669, 11]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1248,ml_signal,339,Usage of financial indicators for feature generation,,1229,"            drop_raw=drop_raw,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4268, 62, 1831, 28, 14781, 62, 1831, 11]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1248,ml_signal,341,Usage of financial indicators for feature generation,,1248,,[]
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1258,ml_signal,343,Usage of financial indicators for feature generation,,1248,        fields = [],"[220, 220, 220, 220, 220, 220, 220, 7032, 796, 17635]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1268,ml_signal,344,Usage of financial indicators for feature generation,,1258,        names = [],"[220, 220, 220, 220, 220, 220, 220, 3891, 796, 17635]"
üß† ML Signal: Tracking feature names for financial data,"[8582, 100, 254, 10373, 26484, 25, 37169, 3895, 3891, 329, 3176, 1366]",0.5,1278,ml_signal,344,Tracking feature names for financial data,,1268,        names = [],"[220, 220, 220, 220, 220, 220, 220, 3891, 796, 17635]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1288,ml_signal,344,Usage of financial indicators for feature generation,,1278,        names = [],"[220, 220, 220, 220, 220, 220, 220, 3891, 796, 17635]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1301,ml_signal,354,Usage of financial indicators for feature generation,,1288,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Tracking feature names for financial data,"[8582, 100, 254, 10373, 26484, 25, 37169, 3895, 3891, 329, 3176, 1366]",0.5,1314,ml_signal,354,Tracking feature names for financial data,,1301,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1327,ml_signal,354,Usage of financial indicators for feature generation,,1314,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Usage of financial indicators for feature generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 21337, 329, 3895, 5270]",0.5,1340,ml_signal,354,Usage of financial indicators for feature generation,,1327,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Tracking feature names for financial data,"[8582, 100, 254, 10373, 26484, 25, 37169, 3895, 3891, 329, 3176, 1366]",0.5,1352,ml_signal,363,Tracking feature names for financial data,,1340,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Potential for format string injection if template_paused is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 5794, 4731, 16954, 611, 11055, 62, 8957, 1484, 318, 2836, 12, 14401]",0.5,1362,sast_risk,344,Potential for format string injection if template_paused is user-controlled,Low,1352,        names = [],"[220, 220, 220, 220, 220, 220, 220, 3891, 796, 17635]"
‚úÖ Best Practice: Ensure template_paused is sanitized or controlled,"[26486, 227, 6705, 19939, 25, 48987, 11055, 62, 8957, 1484, 318, 5336, 36951, 393, 6856]",0.5,1372,best_practice,344,Ensure template_paused is sanitized or controlled,,1362,        names = [],"[220, 220, 220, 220, 220, 220, 220, 3891, 796, 17635]"
‚ö†Ô∏è SAST Risk (Low): Potential for format string injection if template_paused is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 5794, 4731, 16954, 611, 11055, 62, 8957, 1484, 318, 2836, 12, 14401]",0.5,1384,sast_risk,363,Potential for format string injection if template_paused is user-controlled,Low,1372,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Ensure template_paused is sanitized or controlled,"[26486, 227, 6705, 19939, 25, 48987, 11055, 62, 8957, 1484, 318, 5336, 36951, 393, 6856]",0.5,1396,best_practice,363,Ensure template_paused is sanitized or controlled,,1384,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1439,ml_signal,371,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1396,"                template_norm = ""Ref({0}, "" + str(shift) + "")/DayLast(Ref({1}, 243))""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 27237, 796, 366, 8134, 15090, 15, 5512, 366, 1343, 965, 7, 30846, 8, 1343, 366, 20679, 12393, 5956, 7, 8134, 15090, 16, 5512, 35989, 4008, 1]"
üß† ML Signal: Naming conventions for features could be used to infer feature types,"[8582, 100, 254, 10373, 26484, 25, 399, 3723, 21396, 329, 3033, 714, 307, 973, 284, 13249, 3895, 3858]",0.5,1464,ml_signal,373,Naming conventions for features could be used to infer feature types,,1439,"            template_fillnan = ""FFillNan({0})""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 20797, 12647, 796, 366, 5777, 359, 45, 272, 15090, 15, 92, 16725]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1486,ml_signal,375,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1464,            feature_ops = template_paused.format(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3895, 62, 2840, 796, 11055, 62, 8957, 1484, 13, 18982, 7]"
üß† ML Signal: Naming conventions for features could be used to infer feature types,"[8582, 100, 254, 10373, 26484, 25, 399, 3723, 21396, 329, 3033, 714, 307, 973, 284, 13249, 3895, 3858]",0.5,1511,ml_signal,377,Naming conventions for features could be used to infer feature types,,1486,                    template_norm.format(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 27237, 13, 18982, 7]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1544,ml_signal,379,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1511,"                        template_fillnan.format(""$close""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 20797, 12647, 13, 18982, 7203, 3, 19836, 12340]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1560,ml_signal,381,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1544,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1575,ml_signal,383,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1560,            return feature_ops,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3895, 62, 2840]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1599,ml_signal,385,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1575,"        fields += [get_normalized_price_feature(""$open"", 0)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 9654, 1600, 657, 15437]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1623,ml_signal,387,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1599,"        fields += [get_normalized_price_feature(""$low"", 0)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 9319, 1600, 657, 15437]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1647,ml_signal,388,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1623,"        fields += [get_normalized_price_feature(""$close"", 0)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 19836, 1600, 657, 15437]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1671,ml_signal,388,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1647,"        fields += [get_normalized_price_feature(""$close"", 0)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 19836, 1600, 657, 15437]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1695,ml_signal,394,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1671,"        fields += [get_normalized_price_feature(""$low"", 240)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 9319, 1600, 14956, 15437]"
üß† ML Signal: Naming conventions for features could be used to infer feature types,"[8582, 100, 254, 10373, 26484, 25, 399, 3723, 21396, 329, 3033, 714, 307, 973, 284, 13249, 3895, 3858]",0.5,1719,ml_signal,394,Naming conventions for features could be used to infer feature types,,1695,"        fields += [get_normalized_price_feature(""$low"", 240)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 9319, 1600, 14956, 15437]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1743,ml_signal,394,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1719,"        fields += [get_normalized_price_feature(""$low"", 240)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 9319, 1600, 14956, 15437]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1743,ml_signal,402,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1743,,[]
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1743,ml_signal,402,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1743,,[]
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1743,ml_signal,402,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1743,,[]
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1743,ml_signal,402,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1743,,[]
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1743,ml_signal,408,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1743,,[]
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1765,ml_signal,409,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1743,"        def get_volume_feature(volume_field, shift=0):","[220, 220, 220, 220, 220, 220, 220, 825, 651, 62, 29048, 62, 30053, 7, 29048, 62, 3245, 11, 6482, 28, 15, 2599]"
üß† ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 6115, 7032, 290, 15381, 714, 7603, 3895, 8705, 7572]",0.5,1781,ml_signal,411,Usage of specific volume fields and shifts could indicate feature engineering patterns,,1765,            if shift == 0:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 6482, 6624, 657, 25]"
üß† ML Signal: Naming conventions for features could be used to infer feature types,"[8582, 100, 254, 10373, 26484, 25, 399, 3723, 21396, 329, 3033, 714, 307, 973, 284, 13249, 3895, 3858]",0.5,1807,ml_signal,413,Naming conventions for features could be used to infer feature types,,1781,                    template_paused.format(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 8957, 1484, 13, 18982, 7]"
"‚úÖ Best Practice: Class definition should follow PEP 8 naming conventions, which this does.","[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 1061, 350, 8905, 807, 19264, 21396, 11, 543, 428, 857, 13]",0.5,1831,best_practice,387,"Class definition should follow PEP 8 naming conventions, which this does.",,1807,"        fields += [get_normalized_price_feature(""$low"", 0)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 9319, 1600, 657, 15437]"
‚úÖ Best Practice: Use of a dictionary to store configuration settings improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 22155, 284, 3650, 8398, 6460, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1855,best_practice,394,Use of a dictionary to store configuration settings improves code readability and maintainability.,,1831,"        fields += [get_normalized_price_feature(""$low"", 240)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 9319, 1600, 14956, 15437]"
üß† ML Signal: Use of a method to get configuration suggests dynamic or customizable behavior.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 284, 651, 8398, 5644, 8925, 393, 38322, 4069, 13]",1.0,1879,ml_signal,394,Use of a method to get configuration suggests dynamic or customizable behavior.,,1855,"        fields += [get_normalized_price_feature(""$low"", 240)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 9319, 1600, 14956, 15437]"
‚úÖ Best Practice: Use of super() to call the parent class's __init__ method ensures proper initialization.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 262, 2560, 1398, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 13]",1.0,1879,best_practice,402,Use of super() to call the parent class's __init__ method ensures proper initialization.,,1879,,[]
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the function,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163]",0.5,1879,best_practice,408,Consider adding a docstring to describe the purpose and usage of the function,,1879,,[]
‚úÖ Best Practice: Initialize lists before using them,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8341, 878, 1262, 606]",0.5,1909,best_practice,410,Initialize lists before using them,,1879,"            template_gzero = ""If(Ge({0}, 0), {0}, 0)""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 70, 22570, 796, 366, 1532, 7, 10082, 15090, 15, 5512, 657, 828, 1391, 15, 5512, 657, 16725]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",0.5,1935,best_practice,413,Use descriptive variable names for better readability,,1909,                    template_paused.format(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 8957, 1484, 13, 18982, 7]"
üß† ML Signal: Usage of list operations to accumulate feature configurations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 4560, 284, 29915, 3895, 25412]",0.5,1963,ml_signal,417,Usage of list operations to accumulate feature configurations,,1935,                            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of list operations to accumulate feature names,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 4560, 284, 29915, 3895, 3891]",0.5,1987,ml_signal,418,Usage of list operations to accumulate feature names,,1963,                        ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Return statement should be at the end of the function,"[26486, 227, 6705, 19939, 25, 8229, 2643, 815, 307, 379, 262, 886, 286, 262, 2163]",0.5,2009,best_practice,449,Return statement should be at the end of the function,,1987,"        fields += [get_volume_feature(""$bidV"", 240)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 29048, 62, 30053, 7203, 3, 14065, 53, 1600, 14956, 15437]"

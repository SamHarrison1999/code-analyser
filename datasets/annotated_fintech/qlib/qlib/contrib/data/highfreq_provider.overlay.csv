annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of joblib for parallel processing can improve performance and readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 1693, 8019, 329, 10730, 7587, 460, 2987, 2854, 290, 1100, 1799]",1.0,6,best_practice,14,Use of joblib for parallel processing can improve performance and readability,,0,import pickle as pkl,"[11748, 2298, 293, 355, 279, 41582]"
‚úÖ Best Practice: Class docstring should be added to describe the purpose and usage of the class,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 815, 307, 2087, 284, 6901, 262, 4007, 290, 8748, 286, 262, 1398]",0.5,6,best_practice,16,Class docstring should be added to describe the purpose and usage of the class,,6,,[]
‚úÖ Best Practice: Initialize instance variables in the constructor for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799]",1.0,22,best_practice,31,Initialize instance variables in the constructor for clarity and maintainability,,6,"        freq: str = ""1min"",","[220, 220, 220, 220, 220, 220, 220, 2030, 80, 25, 965, 796, 366, 16, 1084, 1600]"
üß† ML Signal: Initialization of configuration settings for a machine learning model,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 8398, 6460, 329, 257, 4572, 4673, 2746]",0.5,42,ml_signal,38,Initialization of configuration settings for a machine learning model,,22,        self.valid_start_time = valid_start_time,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 12102, 62, 9688, 62, 2435, 796, 4938, 62, 9688, 62, 2435]"
"üß† ML Signal: Use of a logger for tracking and debugging, common in ML pipelines","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 49706, 329, 9646, 290, 28769, 11, 2219, 287, 10373, 31108]",0.5,60,ml_signal,44,"Use of a logger for tracking and debugging, common in ML pipelines",,42,        self.qlib_conf = qlib_conf,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 80, 8019, 62, 10414, 796, 10662, 8019, 62, 10414]"
üß† ML Signal: Usage of configuration paths to determine dataset file locations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8398, 13532, 284, 5004, 27039, 2393, 7064]",0.5,79,ml_signal,49,Usage of configuration paths to determine dataset file locations,,60,"        """"""Generate the training, validation and test datasets for prediction","[220, 220, 220, 220, 220, 220, 220, 37227, 8645, 378, 262, 3047, 11, 21201, 290, 1332, 40522, 329, 17724]"
‚úÖ Best Practice: Use of string slicing to modify file paths,"[26486, 227, 6705, 19939, 25, 5765, 286, 4731, 49289, 284, 13096, 2393, 13532]",0.5,88,best_practice,51,Use of string slicing to modify file paths,,79,        Returns:,"[220, 220, 220, 220, 220, 220, 220, 16409, 25]"
üß† ML Signal: Usage of configuration paths to determine dataset file locations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8398, 13532, 284, 5004, 27039, 2393, 7064]",0.5,109,ml_signal,55,Usage of configuration paths to determine dataset file locations,,88,"        dict_feature_path = self.feature_conf[""path""]","[220, 220, 220, 220, 220, 220, 220, 8633, 62, 30053, 62, 6978, 796, 2116, 13, 30053, 62, 10414, 14692, 6978, 8973]"
‚úÖ Best Practice: Use of string slicing to modify file paths,"[26486, 227, 6705, 19939, 25, 5765, 286, 4731, 49289, 284, 13096, 2393, 13532]",0.5,138,best_practice,57,Use of string slicing to modify file paths,,109,"        valid_feature_path = dict_feature_path[:-4] + ""_valid.pkl""","[220, 220, 220, 220, 220, 220, 220, 4938, 62, 30053, 62, 6978, 796, 8633, 62, 30053, 62, 6978, 58, 21912, 19, 60, 1343, 45434, 12102, 13, 79, 41582, 1]"
‚ö†Ô∏è SAST Risk (Low): Potential race condition if files are checked and created in separate steps,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3234, 4006, 611, 3696, 389, 10667, 290, 2727, 287, 4553, 4831]",0.5,167,sast_risk,62,Potential race condition if files are checked and created in separate steps,Low,138,"        valid_label_path = dict_label_path[:-4] + ""_valid.pkl""","[220, 220, 220, 220, 220, 220, 220, 4938, 62, 18242, 62, 6978, 796, 8633, 62, 18242, 62, 6978, 58, 21912, 19, 60, 1343, 45434, 12102, 13, 79, 41582, 1]"
"üß† ML Signal: Generation of training, validation, and test datasets","[8582, 100, 254, 10373, 26484, 25, 16588, 286, 3047, 11, 21201, 11, 290, 1332, 40522]",0.5,193,ml_signal,67,"Generation of training, validation, and test datasets",,167,            or not os.path.isfile(valid_feature_path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 393, 407, 28686, 13, 6978, 13, 4468, 576, 7, 12102, 62, 30053, 62, 6978, 8]"
‚úÖ Best Practice: Use of to_pickle for efficient data serialization,"[26486, 227, 6705, 19939, 25, 5765, 286, 284, 62, 27729, 293, 329, 6942, 1366, 11389, 1634]",0.5,219,best_practice,67,Use of to_pickle for efficient data serialization,,193,            or not os.path.isfile(valid_feature_path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 393, 407, 28686, 13, 6978, 13, 4468, 576, 7, 12102, 62, 30053, 62, 6978, 8]"
‚úÖ Best Practice: Deleting large objects to free memory,"[26486, 227, 6705, 19939, 25, 42226, 889, 1588, 5563, 284, 1479, 4088]",0.5,245,best_practice,73,Deleting large objects to free memory,,219,            xtest.to_pickle(test_feature_path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 742, 395, 13, 1462, 62, 27729, 293, 7, 9288, 62, 30053, 62, 6978, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential race condition if files are checked and created in separate steps,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3234, 4006, 611, 3696, 389, 10667, 290, 2727, 287, 4553, 4831]",0.5,245,sast_risk,75,Potential race condition if files are checked and created in separate steps,Low,245,,[]
"üß† ML Signal: Generation of training, validation, and test datasets","[8582, 100, 254, 10373, 26484, 25, 16588, 286, 3047, 11, 21201, 11, 290, 1332, 40522]",0.5,270,ml_signal,82,"Generation of training, validation, and test datasets",,245,            ytrain.to_pickle(train_label_path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 27432, 13, 1462, 62, 27729, 293, 7, 27432, 62, 18242, 62, 6978, 8]"
‚úÖ Best Practice: Use of to_pickle for efficient data serialization,"[26486, 227, 6705, 19939, 25, 5765, 286, 284, 62, 27729, 293, 329, 6942, 1366, 11389, 1634]",0.5,295,best_practice,82,Use of to_pickle for efficient data serialization,,270,            ytrain.to_pickle(train_label_path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 27432, 13, 1462, 62, 27729, 293, 7, 27432, 62, 18242, 62, 6978, 8]"
‚úÖ Best Practice: Deleting large objects to free memory,"[26486, 227, 6705, 19939, 25, 42226, 889, 1588, 5563, 284, 1479, 4088]",0.5,305,best_practice,87,Deleting large objects to free memory,,295,        feature = {,"[220, 220, 220, 220, 220, 220, 220, 3895, 796, 1391]"
üß† ML Signal: Structuring of dataset paths for different data splits,"[8582, 100, 254, 10373, 26484, 25, 32112, 870, 286, 27039, 13532, 329, 1180, 1366, 30778]",0.5,325,ml_signal,89,Structuring of dataset paths for different data splits,,305,"            ""valid"": valid_feature_path,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 12102, 1298, 4938, 62, 30053, 62, 6978, 11]"
üß† ML Signal: Structuring of dataset paths for different data splits,"[8582, 100, 254, 10373, 26484, 25, 32112, 870, 286, 27039, 13532, 329, 1180, 1366, 30778]",0.5,325,ml_signal,92,Structuring of dataset paths for different data splits,,325,,[]
üß† ML Signal: Returning structured dataset paths for further processing,"[8582, 100, 254, 10373, 26484, 25, 42882, 20793, 27039, 13532, 329, 2252, 7587]",1.0,343,ml_signal,101,Returning structured dataset paths for further processing,,325,"    def get_backtest(self, **kwargs) -> None:","[220, 220, 220, 825, 651, 62, 1891, 9288, 7, 944, 11, 12429, 46265, 22046, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the function.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163, 13]",0.5,363,best_practice,89,Consider adding a docstring to describe the purpose and usage of the function.,,343,"            ""valid"": valid_feature_path,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 12102, 1298, 4938, 62, 30053, 62, 6978, 11]"
"üß† ML Signal: Usage of **kwargs indicates a flexible function signature, which can be a pattern for dynamic parameter handling.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 12429, 46265, 22046, 9217, 257, 12846, 2163, 9877, 11, 543, 460, 307, 257, 3912, 329, 8925, 11507, 9041, 13]",0.5,383,ml_signal,90,"Usage of **kwargs indicates a flexible function signature, which can be a pattern for dynamic parameter handling.",,363,"            ""test"": test_feature_path,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 9288, 1298, 1332, 62, 30053, 62, 6978, 11]"
‚ö†Ô∏è SAST Risk (Low): Ensure that self.backtest_conf is properly validated to prevent potential misuse or injection vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 2116, 13, 1891, 9288, 62, 10414, 318, 6105, 31031, 284, 2948, 2785, 29169, 393, 16954, 23805, 13]",0.5,383,sast_risk,92,Ensure that self.backtest_conf is properly validated to prevent potential misuse or injection vulnerabilities.,Low,383,,[]
‚úÖ Best Practice: Consider checking if self.backtest_conf is initialized before using it to avoid potential AttributeError.,"[26486, 227, 6705, 19939, 25, 12642, 10627, 611, 2116, 13, 1891, 9288, 62, 10414, 318, 23224, 878, 1262, 340, 284, 3368, 2785, 3460, 4163, 12331, 13]",0.5,383,best_practice,92,Consider checking if self.backtest_conf is initialized before using it to avoid potential AttributeError.,,383,,[]
‚úÖ Best Practice: Include a docstring to describe the purpose of the function,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 4007, 286, 262, 2163]",1.0,403,best_practice,90,Include a docstring to describe the purpose of the function,,383,"            ""test"": test_feature_path,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 9288, 1298, 1332, 62, 30053, 62, 6978, 11]"
üß† ML Signal: Usage of qlib library initialization with specific configurations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10662, 8019, 5888, 37588, 351, 2176, 25412]",0.5,403,ml_signal,92,Usage of qlib library initialization with specific configurations,,403,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure that qlib_conf does not contain any sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 10662, 8019, 62, 10414, 857, 407, 3994, 597, 8564, 1321]",1.0,403,sast_risk,92,Ensure that qlib_conf does not contain any sensitive information,Low,403,,[]
üß† ML Signal: Specific region configuration for qlib,"[8582, 100, 254, 10373, 26484, 25, 17377, 3814, 8398, 329, 10662, 8019]",0.5,423,ml_signal,96,Specific region configuration for qlib,,403,"            ""test"": test_label_path,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 9288, 1298, 1332, 62, 18242, 62, 6978, 11]"
üß† ML Signal: Disabling auto_mount feature,"[8582, 100, 254, 10373, 26484, 25, 3167, 11716, 8295, 62, 14948, 3895]",0.5,423,ml_signal,98,Disabling auto_mount feature,,423,,[]
üß† ML Signal: Custom operations being used in qlib,"[8582, 100, 254, 10373, 26484, 25, 8562, 4560, 852, 973, 287, 10662, 8019]",0.5,423,ml_signal,100,Custom operations being used in qlib,,423,,[]
üß† ML Signal: Disabling expression cache,"[8582, 100, 254, 10373, 26484, 25, 3167, 11716, 5408, 12940]",0.5,443,ml_signal,102,Disabling expression cache,,423,        self._gen_data(self.backtest_conf),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5235, 62, 7890, 7, 944, 13, 1891, 9288, 62, 10414, 8]"
üß† ML Signal: Use of additional configuration parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3224, 8398, 10007]",1.0,460,ml_signal,104,Use of additional configuration parameters,,443,"    def _init_qlib(self, qlib_conf):","[220, 220, 220, 825, 4808, 15003, 62, 80, 8019, 7, 944, 11, 10662, 8019, 62, 10414, 2599]"
üß† ML Signal: Method name suggests caching behavior,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 40918, 4069]",0.5,478,ml_signal,101,Method name suggests caching behavior,,460,"    def get_backtest(self, **kwargs) -> None:","[220, 220, 220, 825, 651, 62, 1891, 9288, 7, 944, 11, 12429, 46265, 22046, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Use of a private method to encapsulate functionality,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2839, 2446, 284, 32652, 5039, 11244]",0.5,498,best_practice,102,Use of a private method to encapsulate functionality,,478,        self._gen_data(self.backtest_conf),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5235, 62, 7890, 7, 944, 13, 1891, 9288, 62, 10414, 8]"
üß† ML Signal: Function call with frequency parameter indicates time-based operation,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 8373, 11507, 9217, 640, 12, 3106, 4905]",0.5,515,ml_signal,104,Function call with frequency parameter indicates time-based operation,,498,"    def _init_qlib(self, qlib_conf):","[220, 220, 220, 825, 4808, 15003, 62, 80, 8019, 7, 944, 11, 10662, 8019, 62, 10414, 2599]"
üß† ML Signal: Function call with frequency parameter indicates time-based operation,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 8373, 11507, 9217, 640, 12, 3106, 4905]",0.5,528,ml_signal,105,Function call with frequency parameter indicates time-based operation,,515,"        """"""initialize qlib""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 36733, 1096, 10662, 8019, 37811]"
‚úÖ Best Practice: Consider making datasets a parameter with a default value to improve flexibility.,"[26486, 227, 6705, 19939, 25, 12642, 1642, 40522, 257, 11507, 351, 257, 4277, 1988, 284, 2987, 13688, 13]",0.5,528,best_practice,103,Consider making datasets a parameter with a default value to improve flexibility.,,528,,[]
"‚úÖ Best Practice: Use config.get(""path"") with a default value to avoid KeyError.","[26486, 227, 6705, 19939, 25, 5765, 4566, 13, 1136, 7203, 6978, 4943, 351, 257, 4277, 1988, 284, 3368, 7383, 12331, 13]",0.5,541,best_practice,105,"Use config.get(""path"") with a default value to avoid KeyError.",,528,"        """"""initialize qlib""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 36733, 1096, 10662, 8019, 37811]"
‚ö†Ô∏è SAST Risk (Low): Raising a new exception with the original one can expose internal logic.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 649, 6631, 351, 262, 2656, 530, 460, 15651, 5387, 9156, 13]",0.5,558,sast_risk,109,Raising a new exception with the original one can expose internal logic.,Low,541,"            auto_mount=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8295, 62, 14948, 28, 25101, 11]"
‚ö†Ô∏è SAST Risk (Low): os.path.isfile can be subject to TOCTOU (Time of Check to Time of Use) race conditions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 28686, 13, 6978, 13, 4468, 576, 460, 307, 2426, 284, 5390, 4177, 2606, 357, 7575, 286, 6822, 284, 3862, 286, 5765, 8, 3234, 3403, 13]",0.5,575,sast_risk,111,os.path.isfile can be subject to TOCTOU (Time of Check to Time of Use) race conditions.,Low,558,"            expression_cache=None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5408, 62, 23870, 28, 14202, 11]"
üß† ML Signal: Logging dataset loading events can be useful for monitoring and debugging.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 27039, 11046, 2995, 460, 307, 4465, 329, 9904, 290, 28769, 13]",0.5,575,ml_signal,114,Logging dataset loading events can be useful for monitoring and debugging.,,575,,[]
‚ö†Ô∏è SAST Risk (Medium): Unpickling data can lead to arbitrary code execution if the source is untrusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 791, 27729, 1359, 1366, 460, 1085, 284, 14977, 2438, 9706, 611, 262, 2723, 318, 1418, 81, 8459, 13]",0.5,575,sast_risk,117,Unpickling data can lead to arbitrary code execution if the source is untrusted.,Medium,575,,[]
üß† ML Signal: Logging time taken for operations can be used for performance monitoring.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 640, 2077, 329, 4560, 460, 307, 973, 329, 2854, 9904, 13]",0.5,575,ml_signal,123,Logging time taken for operations can be used for performance monitoring.,,575,,[]
‚ö†Ô∏è SAST Risk (Low): os.makedirs can be subject to TOCTOU race conditions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 28686, 13, 76, 4335, 17062, 460, 307, 2426, 284, 5390, 4177, 2606, 3234, 3403, 13]",0.5,594,sast_risk,126,os.makedirs can be subject to TOCTOU race conditions.,Low,575,"            path = config.pop(""path"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3108, 796, 4566, 13, 12924, 7203, 6978, 4943]"
üß† ML Signal: Logging dataset generation events can be useful for monitoring and debugging.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 27039, 5270, 2995, 460, 307, 4465, 329, 9904, 290, 28769, 13]",0.5,629,ml_signal,131,Logging dataset generation events can be useful for monitoring and debugging.,,594,"            self.logger.info(f""[{__name__}]Dataset exists, load from disk."")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 17912, 90, 834, 3672, 834, 92, 60, 27354, 292, 316, 7160, 11, 3440, 422, 11898, 19570]"
üß† ML Signal: Initializing instances by config can indicate dynamic behavior in the application.,"[8582, 100, 254, 10373, 26484, 25, 20768, 2890, 10245, 416, 4566, 460, 7603, 8925, 4069, 287, 262, 3586, 13]",0.5,658,ml_signal,133,Initializing instances by config can indicate dynamic behavior in the application.,,629,"            # res = dataset.prepare(['train', 'valid', 'test'])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 581, 796, 27039, 13, 46012, 533, 7, 17816, 27432, 3256, 705, 12102, 3256, 705, 9288, 6, 12962]"
‚ö†Ô∏è SAST Risk (Medium): Pickling data can lead to security risks if the data is later untrusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 12346, 1359, 1366, 460, 1085, 284, 2324, 7476, 611, 262, 1366, 318, 1568, 1418, 81, 8459, 13]",0.5,688,sast_risk,142,Pickling data can lead to security risks if the data is later untrusted.,Medium,658,            if not os.path.exists(os.path.dirname(path)):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 28686, 13, 6978, 13, 1069, 1023, 7, 418, 13, 6978, 13, 15908, 3672, 7, 6978, 8, 2599]"
üß† ML Signal: Logging time taken for operations can be used for performance monitoring.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 640, 2077, 329, 4560, 460, 307, 973, 329, 2854, 9904, 13]",0.5,710,ml_signal,151,Logging time taken for operations can be used for performance monitoring.,,688,"                ""valid"": validset,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 12102, 1298, 1188, 2340, 316, 11]"
‚ö†Ô∏è SAST Risk (Low): Raising a new exception without preserving the original traceback,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 649, 6631, 1231, 23934, 262, 2656, 12854, 1891]",1.0,731,sast_risk,146,Raising a new exception without preserving the original traceback,Low,710,            self._prepare_calender_cache(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 46012, 533, 62, 9948, 2194, 62, 23870, 3419]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,752,ml_signal,150,Logging usage pattern,,731,"                ""train"": trainset,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 27432, 1298, 13404, 316, 11]"
‚ö†Ô∏è SAST Risk (Medium): Unvalidated deserialization of data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 791, 12102, 515, 748, 48499, 1634, 286, 1366]",1.0,764,sast_risk,153,Unvalidated deserialization of data,Medium,752,            },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,790,ml_signal,159,Logging usage pattern,,764,"                pkl.dump(validset, f)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 41582, 13, 39455, 7, 2100, 2340, 316, 11, 277, 8]"
‚úÖ Best Practice: Ensure directory exists before creating it,"[26486, 227, 6705, 19939, 25, 48987, 8619, 7160, 878, 4441, 340]",1.0,838,best_practice,163,Ensure directory exists before creating it,,790,"            self.logger.info(f""[{__name__}]Data generated, time cost: {(time.time() - start_time):.2f}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 17912, 90, 834, 3672, 834, 92, 60, 6601, 7560, 11, 640, 1575, 25, 1391, 7, 2435, 13, 2435, 3419, 532, 923, 62, 2435, 2599, 13, 17, 69, 92, 4943]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,838,ml_signal,165,Logging usage pattern,,838,,[]
üß† ML Signal: Configuration pattern for dataset,"[8582, 100, 254, 10373, 26484, 25, 28373, 3912, 329, 27039]",0.5,864,ml_signal,170,Configuration pattern for dataset,,838,"            raise ValueError(""Must specify the path to save the dataset."") from e","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 34320, 11986, 262, 3108, 284, 3613, 262, 27039, 19570, 422, 304]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,864,ml_signal,174,Logging usage pattern,,864,,[]
üß† ML Signal: Use of try-except for error handling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1949, 12, 16341, 329, 4049, 9041]",0.5,890,ml_signal,170,Use of try-except for error handling,,864,"            raise ValueError(""Must specify the path to save the dataset."") from e","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 34320, 11986, 262, 3108, 284, 3613, 262, 27039, 19570, 422, 304]"
‚ö†Ô∏è SAST Risk (Low): Raising a new exception without logging the original exception details,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 649, 6631, 1231, 18931, 262, 2656, 6631, 3307]",1.0,890,sast_risk,174,Raising a new exception without logging the original exception details,Low,890,,[]
‚ö†Ô∏è SAST Risk (Low): Potential use of an untrusted path from config,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 779, 286, 281, 1418, 81, 8459, 3108, 422, 4566]",0.5,912,sast_risk,176,Potential use of an untrusted path from config,Low,890,"            with open(path, ""rb"") as f:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 1280, 7, 6978, 11, 366, 26145, 4943, 355, 277, 25]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,939,ml_signal,179,Logging usage pattern,,912,                res = [data[i] for i in datasets],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 796, 685, 7890, 58, 72, 60, 329, 1312, 287, 40522, 60]"
‚ö†Ô∏è SAST Risk (Medium): Unpickling data from a potentially untrusted source,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 791, 27729, 1359, 1366, 422, 257, 6196, 1418, 81, 8459, 2723]",0.5,984,sast_risk,182,Unpickling data from a potentially untrusted source,Medium,939,"            self.logger.info(f""[{__name__}]Data loaded, time cost: {time.time() - start:.2f}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 17912, 90, 834, 3672, 834, 92, 60, 6601, 9639, 11, 640, 1575, 25, 1391, 2435, 13, 2435, 3419, 532, 923, 25, 13, 17, 69, 92, 4943]"
‚ö†Ô∏è SAST Risk (Low): Directory creation without checking for path traversal,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 27387, 6282, 1231, 10627, 329, 3108, 33038, 282]",0.5,1003,sast_risk,187,Directory creation without checking for path traversal,Low,984,            start_time = time.time(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 796, 640, 13, 2435, 3419]"
"‚úÖ Best Practice: Method name suggests caching, which can improve performance","[26486, 227, 6705, 19939, 25, 11789, 1438, 5644, 40918, 11, 543, 460, 2987, 2854]",0.5,1023,best_practice,191,"Method name suggests caching, which can improve performance",,1003,            dataset.to_pickle(path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27039, 13, 1462, 62, 27729, 293, 7, 6978, 8]"
üß† ML Signal: Dynamic instance creation from config,"[8582, 100, 254, 10373, 26484, 25, 26977, 4554, 6282, 422, 4566]",0.5,1071,ml_signal,193,Dynamic instance creation from config,,1023,"            self.logger.info(f""[{__name__}]Data generated, time cost: {(time.time() - start_time):.2f}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 17912, 90, 834, 3672, 834, 92, 60, 6601, 7560, 11, 640, 1575, 25, 1391, 7, 2435, 13, 2435, 3419, 532, 923, 62, 2435, 2599, 13, 17, 69, 92, 4943]"
üß† ML Signal: Common dataset preparation pattern,"[8582, 100, 254, 10373, 26484, 25, 8070, 27039, 11824, 3912]",0.5,1071,ml_signal,195,Common dataset preparation pattern,,1071,,[]
üß† ML Signal: Configuration pattern for datasets,"[8582, 100, 254, 10373, 26484, 25, 28373, 3912, 329, 40522]",0.5,1084,ml_signal,199,Configuration pattern for datasets,,1071,        except KeyError as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 7383, 12331, 355, 304, 25]"
‚ö†Ô∏è SAST Risk (Low): Writing to a file path that may be influenced by user input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 22183, 284, 257, 2393, 3108, 326, 743, 307, 12824, 416, 2836, 5128]",0.5,1110,sast_risk,200,Writing to a file path that may be influenced by user input,Low,1084,"            raise ValueError(""Must specify the path to save the dataset."") from e","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 34320, 11986, 262, 3108, 284, 3613, 262, 27039, 19570, 422, 304]"
‚ö†Ô∏è SAST Risk (Low): Raising a new exception without preserving the original traceback,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 649, 6631, 1231, 23934, 262, 2656, 12854, 1891]",1.0,1119,sast_risk,197,Raising a new exception without preserving the original traceback,Low,1110,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,1145,ml_signal,200,Logging usage pattern,,1119,"            raise ValueError(""Must specify the path to save the dataset."") from e","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 34320, 11986, 262, 3108, 284, 3613, 262, 27039, 19570, 422, 304]"
‚ö†Ô∏è SAST Risk (Low): Directory creation without checking for race conditions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 27387, 6282, 1231, 10627, 329, 3234, 3403]",1.0,1169,sast_risk,206,Directory creation without checking for race conditions,Low,1145,                dataset = pkl.load(f),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27039, 796, 279, 41582, 13, 2220, 7, 69, 8]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,1178,ml_signal,208,Logging usage pattern,,1169,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Dynamic instance creation pattern,"[8582, 100, 254, 10373, 26484, 25, 26977, 4554, 6282, 3912]",1.0,1208,ml_signal,211,Dynamic instance creation pattern,,1178,                os.makedirs(os.path.dirname(path)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 28686, 13, 76, 4335, 17062, 7, 418, 13, 6978, 13, 15908, 3672, 7, 6978, 4008]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,1229,ml_signal,213,Logging usage pattern,,1208,            self._prepare_calender_cache(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 46012, 533, 62, 9948, 2194, 62, 23870, 3419]"
üß† ML Signal: Configuration pattern,"[8582, 100, 254, 10373, 26484, 25, 28373, 3912]",1.0,1276,ml_signal,215,Configuration pattern,,1229,"            self.logger.info(f""[{__name__}]Dataset init, time cost: {time.time() - start:.2f}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 17912, 90, 834, 3672, 834, 92, 60, 27354, 292, 316, 2315, 11, 640, 1575, 25, 1391, 2435, 13, 2435, 3419, 532, 923, 25, 13, 17, 69, 92, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential data corruption if interrupted during write,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 9253, 611, 19072, 1141, 3551]",0.5,1323,sast_risk,217,Potential data corruption if interrupted during write,Low,1276,"            self.logger.info(f""[{__name__}]Dataset prepared, time cost: {time.time() - start:.2f}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 17912, 90, 834, 3672, 834, 92, 60, 27354, 292, 316, 5597, 11, 640, 1575, 25, 1391, 2435, 13, 2435, 3419, 532, 923, 25, 13, 17, 69, 92, 4943]"
‚ö†Ô∏è SAST Risk (Medium): Untrusted deserialization,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 26970, 81, 8459, 748, 48499, 1634]",0.5,1332,sast_risk,220,Untrusted deserialization,Medium,1323,        return dataset,"[220, 220, 220, 220, 220, 220, 220, 1441, 27039]"
üß† ML Signal: Usage of calendar function with specific slicing,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11845, 2163, 351, 2176, 49289]",1.0,1353,ml_signal,222,Usage of calendar function with specific slicing,,1332,"    def _gen_day_dataset(self, config, conf_type):","[220, 220, 220, 825, 4808, 5235, 62, 820, 62, 19608, 292, 316, 7, 944, 11, 4566, 11, 1013, 62, 4906, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential path traversal if 'path' is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3108, 33038, 282, 611, 705, 6978, 6, 318, 2836, 12, 14401]",1.0,1400,sast_risk,215,Potential path traversal if 'path' is user-controlled,Low,1353,"            self.logger.info(f""[{__name__}]Dataset init, time cost: {time.time() - start:.2f}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 17912, 90, 834, 3672, 834, 92, 60, 27354, 292, 316, 2315, 11, 640, 1575, 25, 1391, 2435, 13, 2435, 3419, 532, 923, 25, 13, 17, 69, 92, 4943]"
‚ö†Ô∏è SAST Risk (Low): Use of 'self' without class context; potential misuse,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 705, 944, 6, 1231, 1398, 4732, 26, 2785, 29169]",1.0,1420,sast_risk,219,Use of 'self' without class context; potential misuse,Low,1400,            dataset.to_pickle(path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27039, 13, 1462, 62, 27729, 293, 7, 6978, 8]"
üß† ML Signal: Usage of dynamic configuration with dictionary unpacking,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8925, 8398, 351, 22155, 8593, 5430]",0.5,1441,ml_signal,222,Usage of dynamic configuration with dictionary unpacking,,1420,"    def _gen_day_dataset(self, config, conf_type):","[220, 220, 220, 825, 4808, 5235, 62, 820, 62, 19608, 292, 316, 7, 944, 11, 4566, 11, 1013, 62, 4906, 2599]"
üß† ML Signal: Conditional logic affecting method calls,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 13891, 2446, 3848]",0.5,1441,ml_signal,227,Conditional logic affecting method calls,,1441,,[]
üß† ML Signal: Configuration of dataset with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 28373, 286, 27039, 351, 2176, 10007]",1.0,1458,ml_signal,229,Configuration of dataset with specific parameters,,1441,            start = time.time(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 796, 640, 13, 2435, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potential path traversal if 'path' is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3108, 33038, 282, 611, 705, 6978, 6, 318, 2836, 12, 14401]",1.0,1493,sast_risk,230,Potential path traversal if 'path' is user-controlled,Low,1458,"            self.logger.info(f""[{__name__}]Dataset exists, load from disk."")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 17912, 90, 834, 3672, 834, 92, 60, 27354, 292, 316, 7160, 11, 3440, 422, 11898, 19570]"
‚úÖ Best Practice: Use of parallel processing to improve performance,"[26486, 227, 6705, 19939, 25, 5765, 286, 10730, 7587, 284, 2987, 2854]",1.0,1523,best_practice,233,Use of parallel processing to improve performance,,1493,            if not os.path.exists(os.path.dirname(path)):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 28686, 13, 6978, 13, 1069, 1023, 7, 418, 13, 6978, 13, 15908, 3672, 7, 6978, 8, 2599]"
‚ö†Ô∏è SAST Risk (Low): Raising a new exception without preserving the original traceback,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 649, 6631, 1231, 23934, 262, 2656, 12854, 1891]",1.0,1540,sast_risk,232,Raising a new exception without preserving the original traceback,Low,1523,            start = time.time(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 796, 640, 13, 2435, 3419]"
üß† ML Signal: Logging information about dataset loading,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 546, 27039, 11046]",1.0,1570,ml_signal,235,Logging information about dataset loading,,1540,"            self.logger.info(f""[{__name__}]Generating dataset"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 6404, 1362, 13, 10951, 7, 69, 17912, 90, 834, 3672, 834, 92, 60, 8645, 803, 27039, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential race condition in directory creation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3234, 4006, 287, 8619, 6282]",1.0,1570,sast_risk,241,Potential race condition in directory creation,Low,1570,,[]
üß† ML Signal: Logging information about dataset generation,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 546, 27039, 5270]",1.0,1594,ml_signal,243,Logging information about dataset generation,,1570,            new_dataset = pkl.load(f),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 649, 62, 19608, 292, 316, 796, 279, 41582, 13, 2220, 7, 69, 8]"
üß† ML Signal: Using a configuration to initialize an instance,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 8398, 284, 41216, 281, 4554]",1.0,1594,ml_signal,246,Using a configuration to initialize an instance,,1594,,[]
üß† ML Signal: Logging time taken for dataset initialization,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 640, 2077, 329, 27039, 37588]",1.0,1635,ml_signal,248,Logging time taken for dataset initialization,,1594,"            if os.path.isfile(path + times.strftime(""%Y-%m-%d"") + "".pkl""):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 28686, 13, 6978, 13, 4468, 576, 7, 6978, 1343, 1661, 13, 2536, 31387, 7203, 4, 56, 12, 4, 76, 12, 4, 67, 4943, 1343, 27071, 79, 41582, 1, 2599]"
üß† ML Signal: Configuring dataset with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 17056, 870, 27039, 351, 2176, 10007]",1.0,1669,ml_signal,249,Configuring dataset with specific parameters,,1635,"                print(""exist "" + times.strftime(""%Y-%m-%d""))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7203, 38476, 366, 1343, 1661, 13, 2536, 31387, 7203, 4, 56, 12, 4, 76, 12, 4, 67, 48774]"
‚ö†Ô∏è SAST Risk (Low): Overwriting existing dataset file without backup,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3827, 16502, 4683, 27039, 2393, 1231, 11559]",1.0,1697,sast_risk,252,Overwriting existing dataset file without backup,Low,1669,            end_times = times + datetime.timedelta(days=1),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 22355, 796, 1661, 1343, 4818, 8079, 13, 16514, 276, 12514, 7, 12545, 28, 16, 8]"
‚ö†Ô∏è SAST Risk (Low): Unrestricted deserialization of potentially untrusted data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 791, 49343, 748, 48499, 1634, 286, 6196, 1418, 81, 8459, 1366]",1.0,1724,sast_risk,255,Unrestricted deserialization of potentially untrusted data,Low,1697,                new_dataset.handler.setup_data(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 649, 62, 19608, 292, 316, 13, 30281, 13, 40406, 62, 7890, 3419]"
üß† ML Signal: Fetching instruments data for stock list generation,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 12834, 1366, 329, 4283, 1351, 5270]",0.5,1763,ml_signal,257,Fetching instruments data for stock list generation,,1724,                new_dataset.handler.setup_data(init_type=DataHandlerLP.IT_LS),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 649, 62, 19608, 292, 316, 13, 30281, 13, 40406, 62, 7890, 7, 15003, 62, 4906, 28, 6601, 25060, 19930, 13, 2043, 62, 6561, 8]"
üß† ML Signal: Generating a list of stock instruments with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 2980, 803, 257, 1351, 286, 4283, 12834, 351, 2176, 10007]",0.5,1806,ml_signal,259,Generating a list of stock instruments with specific parameters,,1763,"            new_dataset.to_pickle(path + times.strftime(""%Y-%m-%d"") + "".pkl"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 649, 62, 19608, 292, 316, 13, 1462, 62, 27729, 293, 7, 6978, 1343, 1661, 13, 2536, 31387, 7203, 4, 56, 12, 4, 76, 12, 4, 67, 4943, 1343, 27071, 79, 41582, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential path traversal if 'stock' contains malicious input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3108, 33038, 282, 611, 705, 13578, 6, 4909, 17412, 5128]",0.5,1844,sast_risk,253,Potential path traversal if 'stock' contains malicious input,Low,1806,"            new_dataset.handler.config(**{""start_time"": times, ""end_time"": end_times})","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 649, 62, 19608, 292, 316, 13, 30281, 13, 11250, 7, 1174, 4895, 9688, 62, 2435, 1298, 1661, 11, 366, 437, 62, 2435, 1298, 886, 62, 22355, 30072]"
üß† ML Signal: Usage of self._init_qlib suggests a pattern for initializing a library or framework,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 13557, 15003, 62, 80, 8019, 5644, 257, 3912, 329, 4238, 2890, 257, 5888, 393, 9355]",0.5,1883,ml_signal,257,Usage of self._init_qlib suggests a pattern for initializing a library or framework,,1844,                new_dataset.handler.setup_data(init_type=DataHandlerLP.IT_LS),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 649, 62, 19608, 292, 316, 13, 30281, 13, 40406, 62, 7890, 7, 15003, 62, 4906, 28, 6601, 25060, 19930, 13, 2043, 62, 6561, 8]"
üß† ML Signal: Dynamic configuration of handler with stock-specific instruments,"[8582, 100, 254, 10373, 26484, 25, 26977, 8398, 286, 21360, 351, 4283, 12, 11423, 12834]",0.5,1926,ml_signal,259,Dynamic configuration of handler with stock-specific instruments,,1883,"            new_dataset.to_pickle(path + times.strftime(""%Y-%m-%d"") + "".pkl"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 649, 62, 19608, 292, 316, 13, 1462, 62, 27729, 293, 7, 6978, 1343, 1661, 13, 2536, 31387, 7203, 4, 56, 12, 4, 76, 12, 4, 67, 4943, 1343, 27071, 79, 41582, 4943]"
üß† ML Signal: Conditional logic based on configuration type,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 8398, 2099]",1.0,1926,ml_signal,262,Conditional logic based on configuration type,,1926,,[]
üß† ML Signal: Configuration of dataset with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 28373, 286, 27039, 351, 2176, 10007]",0.5,1935,ml_signal,264,Configuration of dataset with specific parameters,,1926,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential path traversal if 'stock' contains malicious input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3108, 33038, 282, 611, 705, 13578, 6, 4909, 17412, 5128]",0.5,1944,sast_risk,264,Potential path traversal if 'stock' contains malicious input,Low,1935,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚úÖ Best Practice: Use of Parallel and delayed for concurrent execution,"[26486, 227, 6705, 19939, 25, 5765, 286, 42945, 290, 11038, 329, 24580, 9706]",0.5,1953,best_practice,264,Use of Parallel and delayed for concurrent execution,,1944,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"

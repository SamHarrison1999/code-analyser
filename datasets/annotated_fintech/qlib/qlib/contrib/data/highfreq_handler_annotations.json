[
  {
    "line": 2,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports from the same module together improves readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      8265,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same module together improves readability."
  },
  {
    "line": 4,
    "text": "",
    "annotation": "\u2705 Best Practice: Constants should be named using all uppercase letters with underscores.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      815,
      307,
      3706,
      1262,
      477,
      334,
      39921,
      589,
      7475,
      351,
      41731,
      13
    ],
    "label": "best_practice",
    "reason": "Constants should be named using all uppercase letters with underscores."
  },
  {
    "line": 16,
    "text": "        fit_start_time=None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Mutable default arguments like lists can lead to unexpected behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4197,
      62,
      9688,
      62,
      2435,
      28,
      14202,
      11
    ],
    "start_token": 0,
    "end_token": 15,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      13859,
      540,
      4277,
      7159,
      588,
      8341,
      460,
      1085,
      284,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Mutable default arguments like lists can lead to unexpected behavior."
  },
  {
    "line": 18,
    "text": "        drop_raw=True,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Mutable default arguments like lists can lead to unexpected behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4268,
      62,
      1831,
      28,
      17821,
      11
    ],
    "start_token": 15,
    "end_token": 28,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      13859,
      540,
      4277,
      7159,
      588,
      8341,
      460,
      1085,
      284,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Mutable default arguments like lists can lead to unexpected behavior."
  },
  {
    "line": 26,
    "text": "                \"config\": self.get_feature_config(),",
    "annotation": "\ud83e\udde0 ML Signal: Usage of 'get_feature_config' suggests a pattern for feature configuration in ML.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      11250,
      1298,
      2116,
      13,
      1136,
      62,
      30053,
      62,
      11250,
      22784
    ],
    "start_token": 28,
    "end_token": 54,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      705,
      1136,
      62,
      30053,
      62,
      11250,
      6,
      5644,
      257,
      3912,
      329,
      3895,
      8398,
      287,
      10373,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of 'get_feature_config' suggests a pattern for feature configuration in ML."
  },
  {
    "line": 26,
    "text": "                \"config\": self.get_feature_config(),",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'super().__init__' indicates inheritance, common in ML model or data pipeline setup.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      11250,
      1298,
      2116,
      13,
      1136,
      62,
      30053,
      62,
      11250,
      22784
    ],
    "start_token": 54,
    "end_token": 80,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      16668,
      22446,
      834,
      15003,
      834,
      6,
      9217,
      24155,
      11,
      2219,
      287,
      10373,
      2746,
      393,
      1366,
      11523,
      9058,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of 'super().__init__' indicates inheritance, common in ML model or data pipeline setup."
  },
  {
    "line": 38,
    "text": "            drop_raw=drop_raw,",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4268,
      62,
      1831,
      28,
      14781,
      62,
      1831,
      11
    ],
    "start_token": 80,
    "end_token": 99,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 40,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 99,
    "end_token": 99,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 41,
    "text": "    def get_feature_config(self):",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      30053,
      62,
      11250,
      7,
      944,
      2599
    ],
    "start_token": 99,
    "end_token": 111,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility"
  },
  {
    "line": 46,
    "text": "        template_paused = \"Select(Gt($paused_num, 1.001), {0})\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for format string injection if inputs are not sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11055,
      62,
      8957,
      1484,
      796,
      366,
      17563,
      7,
      38,
      83,
      16763,
      8957,
      1484,
      62,
      22510,
      11,
      352,
      13,
      8298,
      828,
      1391,
      15,
      92,
      16725
    ],
    "start_token": 111,
    "end_token": 142,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      5794,
      4731,
      16954,
      611,
      17311,
      389,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for format string injection if inputs are not sanitized"
  },
  {
    "line": 54,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Repeated pattern of adding normalized price features",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 142,
    "end_token": 142,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30558,
      515,
      3912,
      286,
      4375,
      39279,
      2756,
      3033
    ],
    "label": "ml_signal",
    "reason": "Repeated pattern of adding normalized price features"
  },
  {
    "line": 60,
    "text": "                )",
    "annotation": "\ud83e\udde0 ML Signal: Consistent naming pattern for features",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 142,
    "end_token": 158,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3515,
      7609,
      19264,
      3912,
      329,
      3033
    ],
    "label": "ml_signal",
    "reason": "Consistent naming pattern for features"
  },
  {
    "line": 72,
    "text": "        fields += [get_normalized_price_feature(\"$high\", 240)]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for format string injection if inputs are not sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685,
      1136,
      62,
      11265,
      1143,
      62,
      20888,
      62,
      30053,
      7203,
      3,
      8929,
      1600,
      14956,
      15437
    ],
    "start_token": 158,
    "end_token": 182,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      5794,
      4731,
      16954,
      611,
      17311,
      389,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for format string injection if inputs are not sanitized"
  },
  {
    "line": 82,
    "text": "                template_paused.format(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for format string injection if inputs are not sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11055,
      62,
      8957,
      1484,
      13,
      18982,
      7
    ],
    "start_token": 182,
    "end_token": 204,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      5794,
      4731,
      16954,
      611,
      17311,
      389,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for format string injection if inputs are not sanitized"
  },
  {
    "line": 100,
    "text": "        return fields, names",
    "annotation": "\u2705 Best Practice: Consider using immutable default arguments like None instead of mutable ones like lists",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      7032,
      11,
      3891
    ],
    "start_token": 204,
    "end_token": 215,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      40139,
      4277,
      7159,
      588,
      6045,
      2427,
      286,
      4517,
      540,
      3392,
      588,
      8341
    ],
    "label": "best_practice",
    "reason": "Consider using immutable default arguments like None instead of mutable ones like lists"
  },
  {
    "line": 103,
    "text": "class HighFreqGeneralHandler(DataHandlerLP):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue with mutable default arguments (list)",
    "confidence": 0.5,
    "tokens": [
      4871,
      3334,
      20366,
      80,
      12218,
      25060,
      7,
      6601,
      25060,
      19930,
      2599
    ],
    "start_token": 215,
    "end_token": 226,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      351,
      4517,
      540,
      4277,
      7159,
      357,
      4868,
      8
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue with mutable default arguments (list)"
  },
  {
    "line": 104,
    "text": "    def __init__(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue with mutable default arguments (list)",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7
    ],
    "start_token": 226,
    "end_token": 234,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      351,
      4517,
      540,
      4277,
      7159,
      357,
      4868,
      8
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue with mutable default arguments (list)"
  },
  {
    "line": 113,
    "text": "        drop_raw=True,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method to get feature configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4268,
      62,
      1831,
      28,
      17821,
      11
    ],
    "start_token": 234,
    "end_token": 247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      284,
      651,
      3895,
      8398
    ],
    "label": "ml_signal",
    "reason": "Usage of a method to get feature configuration"
  },
  {
    "line": 113,
    "text": "        drop_raw=True,",
    "annotation": "\ud83e\udde0 ML Signal: Use of a superclass constructor with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4268,
      62,
      1831,
      28,
      17821,
      11
    ],
    "start_token": 247,
    "end_token": 260,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2208,
      4871,
      23772,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of a superclass constructor with specific parameters"
  },
  {
    "line": 125,
    "text": "        data_loader = {",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      29356,
      796,
      1391
    ],
    "start_token": 260,
    "end_token": 272,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 127,
    "text": "            \"kwargs\": {",
    "annotation": "\u2705 Best Practice: Use of f-string for string formatting is more readable and efficient.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      46265,
      22046,
      1298,
      1391
    ],
    "start_token": 272,
    "end_token": 288,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      4731,
      33313,
      318,
      517,
      31744,
      290,
      6942,
      13
    ],
    "label": "best_practice",
    "reason": "Use of f-string for string formatting is more readable and efficient."
  },
  {
    "line": 128,
    "text": "                \"config\": self.get_feature_config(),",
    "annotation": "\u2705 Best Practice: Use of f-strings for string formatting improves readability and performance.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      11250,
      1298,
      2116,
      13,
      1136,
      62,
      30053,
      62,
      11250,
      22784
    ],
    "start_token": 288,
    "end_token": 314,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      37336,
      329,
      4731,
      33313,
      19575,
      1100,
      1799,
      290,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Use of f-strings for string formatting improves readability and performance."
  },
  {
    "line": 133,
    "text": "        }",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for format string injection if template_paused or template_if are user-controlled.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 314,
    "end_token": 322,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      5794,
      4731,
      16954,
      611,
      11055,
      62,
      8957,
      1484,
      393,
      11055,
      62,
      361,
      389,
      2836,
      12,
      14401,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for format string injection if template_paused or template_if are user-controlled."
  },
  {
    "line": 141,
    "text": "            drop_raw=drop_raw,",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over self.columns suggests dynamic feature generation based on data columns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4268,
      62,
      1831,
      28,
      14781,
      62,
      1831,
      11
    ],
    "start_token": 322,
    "end_token": 341,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      2116,
      13,
      28665,
      82,
      5644,
      8925,
      3895,
      5270,
      1912,
      319,
      1366,
      15180,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over self.columns suggests dynamic feature generation based on data columns."
  },
  {
    "line": 143,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Appending features to a list indicates feature engineering for ML models.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 341,
    "end_token": 341,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      3033,
      284,
      257,
      1351,
      9217,
      3895,
      8705,
      329,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending features to a list indicates feature engineering for ML models."
  },
  {
    "line": 152,
    "text": "            # norm with the close price of 237th minute of yesterday.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of string formatting with potential for injection if template_paused is user-controlled.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2593,
      351,
      262,
      1969,
      2756,
      286,
      34385,
      400,
      5664,
      286,
      7415,
      13
    ],
    "start_token": 341,
    "end_token": 365,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      4731,
      33313,
      351,
      2785,
      329,
      16954,
      611,
      11055,
      62,
      8957,
      1484,
      318,
      2836,
      12,
      14401,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of string formatting with potential for injection if template_paused is user-controlled."
  },
  {
    "line": 162,
    "text": "                    template_norm.format(template_if.format(\"$close\", price_field), template_fillnan.format(\"$close\"))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of string formatting with potential for injection if template_paused is user-controlled.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11055,
      62,
      27237,
      13,
      18982,
      7,
      28243,
      62,
      361,
      13,
      18982,
      7203,
      3,
      19836,
      1600,
      2756,
      62,
      3245,
      828,
      11055,
      62,
      20797,
      12647,
      13,
      18982,
      7203,
      3,
      19836,
      48774
    ],
    "start_token": 365,
    "end_token": 413,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      4731,
      33313,
      351,
      2785,
      329,
      16954,
      611,
      11055,
      62,
      8957,
      1484,
      318,
      2836,
      12,
      14401,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of string formatting with potential for injection if template_paused is user-controlled."
  },
  {
    "line": 164,
    "text": "            )",
    "annotation": "\u2705 Best Practice: Class should inherit from a base class to ensure consistent interface and behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 413,
    "end_token": 425,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      257,
      2779,
      1398,
      284,
      4155,
      6414,
      7071,
      290,
      4069
    ],
    "label": "best_practice",
    "reason": "Class should inherit from a base class to ensure consistent interface and behavior"
  },
  {
    "line": 171,
    "text": "        for column_name in self.columns:",
    "annotation": "\ud83e\udde0 ML Signal: Default parameter values can indicate common usage patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      5721,
      62,
      3672,
      287,
      2116,
      13,
      28665,
      82,
      25
    ],
    "start_token": 425,
    "end_token": 442,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      11507,
      3815,
      460,
      7603,
      2219,
      8748,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Default parameter values can indicate common usage patterns."
  },
  {
    "line": 171,
    "text": "        for column_name in self.columns:",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      5721,
      62,
      3672,
      287,
      2116,
      13,
      28665,
      82,
      25
    ],
    "start_token": 442,
    "end_token": 459,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use."
  },
  {
    "line": 179,
    "text": "                    f\"{{0}}/Ref(DayLast(Mean({{0}}, {self.day_length * 30})), {self.day_length})\".format(\"$volume\")",
    "annotation": "\ud83e\udde0 ML Signal: Configuration settings can indicate common feature extraction patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      27007,
      15,
      11709,
      14,
      8134,
      7,
      12393,
      5956,
      7,
      5308,
      272,
      15090,
      90,
      15,
      92,
      5512,
      1391,
      944,
      13,
      820,
      62,
      13664,
      1635,
      1542,
      30072,
      828,
      1391,
      944,
      13,
      820,
      62,
      13664,
      30072,
      1911,
      18982,
      7203,
      3,
      29048,
      4943
    ],
    "start_token": 459,
    "end_token": 519,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28373,
      6460,
      460,
      7603,
      2219,
      3895,
      22236,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Configuration settings can indicate common feature extraction patterns."
  },
  {
    "line": 179,
    "text": "                    f\"{{0}}/Ref(DayLast(Mean({{0}}, {self.day_length * 30})), {self.day_length})\".format(\"$volume\")",
    "annotation": "\ud83e\udde0 ML Signal: Frequency settings can indicate common data processing intervals.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      27007,
      15,
      11709,
      14,
      8134,
      7,
      12393,
      5956,
      7,
      5308,
      272,
      15090,
      90,
      15,
      92,
      5512,
      1391,
      944,
      13,
      820,
      62,
      13664,
      1635,
      1542,
      30072,
      828,
      1391,
      944,
      13,
      820,
      62,
      13664,
      30072,
      1911,
      18982,
      7203,
      3,
      29048,
      4943
    ],
    "start_token": 519,
    "end_token": 579,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      31902,
      6460,
      460,
      7603,
      2219,
      1366,
      7587,
      20016,
      13
    ],
    "label": "ml_signal",
    "reason": "Frequency settings can indicate common data processing intervals."
  },
  {
    "line": 185,
    "text": "        fields += [",
    "annotation": "\u2705 Best Practice: Use of super() to ensure proper inheritance and initialization.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685
    ],
    "start_token": 579,
    "end_token": 589,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      4155,
      1774,
      24155,
      290,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Use of super() to ensure proper inheritance and initialization."
  },
  {
    "line": 185,
    "text": "        fields += [",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose and usage of the function.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685
    ],
    "start_token": 589,
    "end_token": 599,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose and usage of the function."
  },
  {
    "line": 187,
    "text": "                \"If(IsNull({0}), 0, {0})\".format(",
    "annotation": "\u2705 Best Practice: Initialize lists before using them to store values.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      1532,
      7,
      3792,
      35067,
      15090,
      15,
      92,
      828,
      657,
      11,
      1391,
      15,
      30072,
      1911,
      18982,
      7
    ],
    "start_token": 599,
    "end_token": 631,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      8341,
      878,
      1262,
      606,
      284,
      3650,
      3815,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize lists before using them to store values."
  },
  {
    "line": 190,
    "text": "                    )",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 631,
    "end_token": 651,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability."
  },
  {
    "line": 194,
    "text": "        names += [\"$volume_1\"]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of template strings for feature configuration.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      15853,
      14631,
      3,
      29048,
      62,
      16,
      8973
    ],
    "start_token": 651,
    "end_token": 666,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11055,
      13042,
      329,
      3895,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of template strings for feature configuration."
  },
  {
    "line": 195,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Tracking feature names for later reference.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 666,
    "end_token": 666,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      3895,
      3891,
      329,
      1568,
      4941,
      13
    ],
    "label": "ml_signal",
    "reason": "Tracking feature names for later reference."
  },
  {
    "line": 210,
    "text": "                \"swap_level\": False,",
    "annotation": "\u2705 Best Practice: Return statements should be clear and consistent.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      2032,
      499,
      62,
      5715,
      1298,
      10352,
      11
    ],
    "start_token": 666,
    "end_token": 689,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      6299,
      815,
      307,
      1598,
      290,
      6414,
      13
    ],
    "label": "best_practice",
    "reason": "Return statements should be clear and consistent."
  },
  {
    "line": 209,
    "text": "                \"config\": self.get_feature_config(),",
    "annotation": "\ud83e\udde0 ML Signal: Class definition for a backtest handler, useful for identifying patterns in financial data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      11250,
      1298,
      2116,
      13,
      1136,
      62,
      30053,
      62,
      11250,
      22784
    ],
    "start_token": 689,
    "end_token": 715,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      329,
      257,
      736,
      9288,
      21360,
      11,
      4465,
      329,
      13720,
      7572,
      287,
      3176,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Class definition for a backtest handler, useful for identifying patterns in financial data processing"
  },
  {
    "line": 220,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of self to define instance variables for encapsulation and clarity.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 715,
    "end_token": 715,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2116,
      284,
      8160,
      4554,
      9633,
      329,
      32652,
      1741,
      290,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Use of self to define instance variables for encapsulation and clarity."
  },
  {
    "line": 222,
    "text": "        fields = []",
    "annotation": "\u2705 Best Practice: Converting list to set for columns to ensure uniqueness and faster lookup.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      796,
      17635
    ],
    "start_token": 715,
    "end_token": 725,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      1351,
      284,
      900,
      329,
      15180,
      284,
      4155,
      49650,
      290,
      5443,
      35847,
      13
    ],
    "label": "best_practice",
    "reason": "Converting list to set for columns to ensure uniqueness and faster lookup."
  },
  {
    "line": 222,
    "text": "        fields = []",
    "annotation": "\ud83e\udde0 ML Signal: Use of a dictionary to configure a data loader, indicating a pattern for dynamic configuration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      796,
      17635
    ],
    "start_token": 725,
    "end_token": 735,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      22155,
      284,
      17425,
      257,
      1366,
      40213,
      11,
      12739,
      257,
      3912,
      329,
      8925,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a dictionary to configure a data loader, indicating a pattern for dynamic configuration."
  },
  {
    "line": 231,
    "text": "        names += [\"$close0\"]",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic feature configuration retrieval, useful for model training.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      15853,
      14631,
      3,
      19836,
      15,
      8973
    ],
    "start_token": 735,
    "end_token": 749,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      3895,
      8398,
      45069,
      11,
      4465,
      329,
      2746,
      3047,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic feature configuration retrieval, useful for model training."
  },
  {
    "line": 237,
    "text": "                    \"$vwap\",",
    "annotation": "\u2705 Best Practice: Use of super() to ensure proper inheritance and initialization of the parent class.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17971,
      85,
      86,
      499,
      1600
    ],
    "start_token": 749,
    "end_token": 773,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      4155,
      1774,
      24155,
      290,
      37588,
      286,
      262,
      2560,
      1398,
      13
    ],
    "label": "best_practice",
    "reason": "Use of super() to ensure proper inheritance and initialization of the parent class."
  },
  {
    "line": 240,
    "text": "        ]",
    "annotation": "\ud83e\udde0 ML Signal: Checking for specific column names in self.columns indicates feature selection logic.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 773,
    "end_token": 781,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      2176,
      5721,
      3891,
      287,
      2116,
      13,
      28665,
      82,
      9217,
      3895,
      6356,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking for specific column names in self.columns indicates feature selection logic."
  },
  {
    "line": 242,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of f-string for string formatting improves readability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 781,
    "end_token": 781,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      4731,
      33313,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of f-string for string formatting improves readability."
  },
  {
    "line": 247,
    "text": "        names += [\"$factor0\"]",
    "annotation": "\ud83e\udde0 ML Signal: Appending to fields list suggests dynamic feature configuration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      15853,
      14631,
      3,
      31412,
      15,
      8973
    ],
    "start_token": 781,
    "end_token": 795,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      7032,
      1351,
      5644,
      8925,
      3895,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending to fields list suggests dynamic feature configuration."
  },
  {
    "line": 249,
    "text": "        return fields, names",
    "annotation": "\ud83e\udde0 ML Signal: Appending to names list suggests dynamic feature naming.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      7032,
      11,
      3891
    ],
    "start_token": 795,
    "end_token": 806,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      3891,
      1351,
      5644,
      8925,
      3895,
      19264,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending to names list suggests dynamic feature naming."
  },
  {
    "line": 252,
    "text": "class HighFreqGeneralBacktestHandler(DataHandler):",
    "annotation": "\ud83e\udde0 ML Signal: Checking for specific column names in self.columns indicates feature selection logic.",
    "confidence": 1.0,
    "tokens": [
      4871,
      3334,
      20366,
      80,
      12218,
      7282,
      9288,
      25060,
      7,
      6601,
      25060,
      2599
    ],
    "start_token": 806,
    "end_token": 818,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      2176,
      5721,
      3891,
      287,
      2116,
      13,
      28665,
      82,
      9217,
      3895,
      6356,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking for specific column names in self.columns indicates feature selection logic."
  },
  {
    "line": 258,
    "text": "        day_length=240,",
    "annotation": "\ud83e\udde0 ML Signal: Checking for specific column names in self.columns indicates feature selection logic.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1110,
      62,
      13664,
      28,
      16102,
      11
    ],
    "start_token": 818,
    "end_token": 831,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      2176,
      5721,
      3891,
      287,
      2116,
      13,
      28665,
      82,
      9217,
      3895,
      6356,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking for specific column names in self.columns indicates feature selection logic."
  },
  {
    "line": 258,
    "text": "        day_length=240,",
    "annotation": "\u2705 Best Practice: Returning a tuple of fields and names improves function clarity.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1110,
      62,
      13664,
      28,
      16102,
      11
    ],
    "start_token": 831,
    "end_token": 844,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      46545,
      286,
      7032,
      290,
      3891,
      19575,
      2163,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a tuple of fields and names improves function clarity."
  },
  {
    "line": 270,
    "text": "                \"freq\": freq,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Mutable default arguments (lists) can lead to unexpected behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      19503,
      80,
      1298,
      2030,
      80,
      11
    ],
    "start_token": 844,
    "end_token": 866,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      13859,
      540,
      4277,
      7159,
      357,
      20713,
      8,
      460,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Mutable default arguments (lists) can lead to unexpected behavior"
  },
  {
    "line": 272,
    "text": "            },",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Mutable default arguments (lists) can lead to unexpected behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8964
    ],
    "start_token": 866,
    "end_token": 878,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      13859,
      540,
      4277,
      7159,
      357,
      20713,
      8,
      460,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Mutable default arguments (lists) can lead to unexpected behavior"
  },
  {
    "line": 281,
    "text": "    def get_feature_config(self):",
    "annotation": "\ud83e\udde0 ML Signal: Use of data loader configuration for machine learning data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      30053,
      62,
      11250,
      7,
      944,
      2599
    ],
    "start_token": 878,
    "end_token": 890,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1366,
      40213,
      8398,
      329,
      4572,
      4673,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of data loader configuration for machine learning data processing"
  },
  {
    "line": 293,
    "text": "",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 890,
    "end_token": 890,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability and maintainability."
  },
  {
    "line": 295,
    "text": "            fields += [",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685
    ],
    "start_token": 890,
    "end_token": 904,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability and maintainability."
  },
  {
    "line": 297,
    "text": "            ]",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 904,
    "end_token": 916,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability and maintainability."
  },
  {
    "line": 296,
    "text": "                template_paused.format(template_if.format(template_fillnan.format(\"$close\"), \"$vwap\")),",
    "annotation": "\u2705 Best Practice: Function name is descriptive and indicates its purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11055,
      62,
      8957,
      1484,
      13,
      18982,
      7,
      28243,
      62,
      361,
      13,
      18982,
      7,
      28243,
      62,
      20797,
      12647,
      13,
      18982,
      7203,
      3,
      19836,
      12340,
      17971,
      85,
      86,
      499,
      4943,
      828
    ],
    "start_token": 916,
    "end_token": 960,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      318,
      35644,
      290,
      9217,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Function name is descriptive and indicates its purpose"
  },
  {
    "line": 298,
    "text": "            names += [\"$vwap0\"]",
    "annotation": "\u2705 Best Practice: Default parameter value for 'shift' is provided",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      15853,
      14631,
      3,
      85,
      86,
      499,
      15,
      8973
    ],
    "start_token": 960,
    "end_token": 980,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      11507,
      1988,
      329,
      705,
      30846,
      6,
      318,
      2810
    ],
    "label": "best_practice",
    "reason": "Default parameter value for 'shift' is provided"
  },
  {
    "line": 300,
    "text": "        if \"$volume\" in self.columns:",
    "annotation": "\u2705 Best Practice: Readable string formatting for template",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      17971,
      29048,
      1,
      287,
      2116,
      13,
      28665,
      82,
      25
    ],
    "start_token": 980,
    "end_token": 997,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4149,
      540,
      4731,
      33313,
      329,
      11055
    ],
    "label": "best_practice",
    "reason": "Readable string formatting for template"
  },
  {
    "line": 302,
    "text": "            names += [\"$volume0\"]",
    "annotation": "\u2705 Best Practice: Readable string formatting for template",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      15853,
      14631,
      3,
      29048,
      15,
      8973
    ],
    "start_token": 997,
    "end_token": 1015,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4149,
      540,
      4731,
      33313,
      329,
      11055
    ],
    "label": "best_practice",
    "reason": "Readable string formatting for template"
  },
  {
    "line": 307,
    "text": "class HighFreqOrderHandler(DataHandlerLP):",
    "annotation": "\u2705 Best Practice: Readable string formatting for template",
    "confidence": 0.5,
    "tokens": [
      4871,
      3334,
      20366,
      80,
      18743,
      25060,
      7,
      6601,
      25060,
      19930,
      2599
    ],
    "start_token": 1015,
    "end_token": 1026,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4149,
      540,
      4731,
      33313,
      329,
      11055
    ],
    "label": "best_practice",
    "reason": "Readable string formatting for template"
  },
  {
    "line": 307,
    "text": "class HighFreqOrderHandler(DataHandlerLP):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for format string injection if 'template_paused' or 'template_if' are user-controlled",
    "confidence": 0.5,
    "tokens": [
      4871,
      3334,
      20366,
      80,
      18743,
      25060,
      7,
      6601,
      25060,
      19930,
      2599
    ],
    "start_token": 1026,
    "end_token": 1037,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      5794,
      4731,
      16954,
      611,
      705,
      28243,
      62,
      8957,
      1484,
      6,
      393,
      705,
      28243,
      62,
      361,
      6,
      389,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for format string injection if 'template_paused' or 'template_if' are user-controlled"
  },
  {
    "line": 309,
    "text": "        self,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for format string injection if 'template_fillnan' is user-controlled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 1037,
    "end_token": 1046,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      5794,
      4731,
      16954,
      611,
      705,
      28243,
      62,
      20797,
      12647,
      6,
      318,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for format string injection if 'template_fillnan' is user-controlled"
  },
  {
    "line": 310,
    "text": "        instruments=\"csi300\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for format string injection if 'template_if' is user-controlled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12834,
      2625,
      6359,
      72,
      6200,
      1600
    ],
    "start_token": 1046,
    "end_token": 1059,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      5794,
      4731,
      16954,
      611,
      705,
      28243,
      62,
      361,
      6,
      318,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for format string injection if 'template_if' is user-controlled"
  },
  {
    "line": 314,
    "text": "        learn_processors=[],",
    "annotation": "\u2705 Best Practice: Returns a value, making the function reusable",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2193,
      62,
      14681,
      669,
      41888,
      4357
    ],
    "start_token": 1059,
    "end_token": 1072,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      16409,
      257,
      1988,
      11,
      1642,
      262,
      2163,
      42339
    ],
    "label": "best_practice",
    "reason": "Returns a value, making the function reusable"
  },
  {
    "line": 314,
    "text": "        learn_processors=[],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of undefined variable 'template_paused'",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2193,
      62,
      14681,
      669,
      41888,
      4357
    ],
    "start_token": 1072,
    "end_token": 1085,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      28721,
      7885,
      705,
      28243,
      62,
      8957,
      1484,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of undefined variable 'template_paused'"
  },
  {
    "line": 314,
    "text": "        learn_processors=[],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of undefined variable 'template_if'",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2193,
      62,
      14681,
      669,
      41888,
      4357
    ],
    "start_token": 1085,
    "end_token": 1098,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      28721,
      7885,
      705,
      28243,
      62,
      361,
      6
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of undefined variable 'template_if'"
  },
  {
    "line": 325,
    "text": "            \"kwargs\": {",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      46265,
      22046,
      1298,
      1391
    ],
    "start_token": 1098,
    "end_token": 1114,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 327,
    "text": "                \"swap_level\": False,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      2032,
      499,
      62,
      5715,
      1298,
      10352,
      11
    ],
    "start_token": 1114,
    "end_token": 1137,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 329,
    "text": "                \"inst_processors\": inst_processors,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      8625,
      62,
      14681,
      669,
      1298,
      916,
      62,
      14681,
      669,
      11
    ],
    "start_token": 1137,
    "end_token": 1163,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 331,
    "text": "        }",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 1163,
    "end_token": 1171,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 333,
    "text": "            instruments=instruments,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12834,
      28,
      259,
      2536,
      2886,
      11
    ],
    "start_token": 1171,
    "end_token": 1188,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 335,
    "text": "            end_time=end_time,",
    "annotation": "\ud83e\udde0 ML Signal: Tracking feature names for financial data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      28,
      437,
      62,
      2435,
      11
    ],
    "start_token": 1188,
    "end_token": 1207,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      3895,
      3891,
      329,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Tracking feature names for financial data"
  },
  {
    "line": 337,
    "text": "            infer_processors=infer_processors,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13249,
      62,
      14681,
      669,
      28,
      259,
      2232,
      62,
      14681,
      669,
      11
    ],
    "start_token": 1207,
    "end_token": 1229,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 339,
    "text": "            drop_raw=drop_raw,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4268,
      62,
      1831,
      28,
      14781,
      62,
      1831,
      11
    ],
    "start_token": 1229,
    "end_token": 1248,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 341,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1248,
    "end_token": 1248,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 343,
    "text": "        fields = []",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      796,
      17635
    ],
    "start_token": 1248,
    "end_token": 1258,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 344,
    "text": "        names = []",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      17635
    ],
    "start_token": 1258,
    "end_token": 1268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 344,
    "text": "        names = []",
    "annotation": "\ud83e\udde0 ML Signal: Tracking feature names for financial data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      17635
    ],
    "start_token": 1268,
    "end_token": 1278,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      3895,
      3891,
      329,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Tracking feature names for financial data"
  },
  {
    "line": 344,
    "text": "        names = []",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      17635
    ],
    "start_token": 1278,
    "end_token": 1288,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 354,
    "text": "            else:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1288,
    "end_token": 1301,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 354,
    "text": "            else:",
    "annotation": "\ud83e\udde0 ML Signal: Tracking feature names for financial data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1301,
    "end_token": 1314,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      3895,
      3891,
      329,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Tracking feature names for financial data"
  },
  {
    "line": 354,
    "text": "            else:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1314,
    "end_token": 1327,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 354,
    "text": "            else:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of financial indicators for feature generation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1327,
    "end_token": 1340,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3176,
      21337,
      329,
      3895,
      5270
    ],
    "label": "ml_signal",
    "reason": "Usage of financial indicators for feature generation"
  },
  {
    "line": 363,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Tracking feature names for financial data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1340,
    "end_token": 1352,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      3895,
      3891,
      329,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Tracking feature names for financial data"
  },
  {
    "line": 344,
    "text": "        names = []",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for format string injection if template_paused is user-controlled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      17635
    ],
    "start_token": 1352,
    "end_token": 1362,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      5794,
      4731,
      16954,
      611,
      11055,
      62,
      8957,
      1484,
      318,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for format string injection if template_paused is user-controlled"
  },
  {
    "line": 344,
    "text": "        names = []",
    "annotation": "\u2705 Best Practice: Ensure template_paused is sanitized or controlled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      17635
    ],
    "start_token": 1362,
    "end_token": 1372,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      11055,
      62,
      8957,
      1484,
      318,
      5336,
      36951,
      393,
      6856
    ],
    "label": "best_practice",
    "reason": "Ensure template_paused is sanitized or controlled"
  },
  {
    "line": 363,
    "text": "            )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for format string injection if template_paused is user-controlled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1372,
    "end_token": 1384,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      5794,
      4731,
      16954,
      611,
      11055,
      62,
      8957,
      1484,
      318,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for format string injection if template_paused is user-controlled"
  },
  {
    "line": 363,
    "text": "            )",
    "annotation": "\u2705 Best Practice: Ensure template_paused is sanitized or controlled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1384,
    "end_token": 1396,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      11055,
      62,
      8957,
      1484,
      318,
      5336,
      36951,
      393,
      6856
    ],
    "label": "best_practice",
    "reason": "Ensure template_paused is sanitized or controlled"
  },
  {
    "line": 371,
    "text": "                template_norm = \"Ref({0}, \" + str(shift) + \")/DayLast(Ref({1}, 243))\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11055,
      62,
      27237,
      796,
      366,
      8134,
      15090,
      15,
      5512,
      366,
      1343,
      965,
      7,
      30846,
      8,
      1343,
      366,
      20679,
      12393,
      5956,
      7,
      8134,
      15090,
      16,
      5512,
      35989,
      4008,
      1
    ],
    "start_token": 1396,
    "end_token": 1439,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 373,
    "text": "            template_fillnan = \"FFillNan({0})\"",
    "annotation": "\ud83e\udde0 ML Signal: Naming conventions for features could be used to infer feature types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11055,
      62,
      20797,
      12647,
      796,
      366,
      5777,
      359,
      45,
      272,
      15090,
      15,
      92,
      16725
    ],
    "start_token": 1439,
    "end_token": 1464,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      399,
      3723,
      21396,
      329,
      3033,
      714,
      307,
      973,
      284,
      13249,
      3895,
      3858
    ],
    "label": "ml_signal",
    "reason": "Naming conventions for features could be used to infer feature types"
  },
  {
    "line": 375,
    "text": "            feature_ops = template_paused.format(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3895,
      62,
      2840,
      796,
      11055,
      62,
      8957,
      1484,
      13,
      18982,
      7
    ],
    "start_token": 1464,
    "end_token": 1486,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 377,
    "text": "                    template_norm.format(",
    "annotation": "\ud83e\udde0 ML Signal: Naming conventions for features could be used to infer feature types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11055,
      62,
      27237,
      13,
      18982,
      7
    ],
    "start_token": 1486,
    "end_token": 1511,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      399,
      3723,
      21396,
      329,
      3033,
      714,
      307,
      973,
      284,
      13249,
      3895,
      3858
    ],
    "label": "ml_signal",
    "reason": "Naming conventions for features could be used to infer feature types"
  },
  {
    "line": 379,
    "text": "                        template_fillnan.format(\"$close\"),",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11055,
      62,
      20797,
      12647,
      13,
      18982,
      7203,
      3,
      19836,
      12340
    ],
    "start_token": 1511,
    "end_token": 1544,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 381,
    "text": "                )",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1544,
    "end_token": 1560,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 383,
    "text": "            return feature_ops",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      3895,
      62,
      2840
    ],
    "start_token": 1560,
    "end_token": 1575,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 385,
    "text": "        fields += [get_normalized_price_feature(\"$open\", 0)]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685,
      1136,
      62,
      11265,
      1143,
      62,
      20888,
      62,
      30053,
      7203,
      3,
      9654,
      1600,
      657,
      15437
    ],
    "start_token": 1575,
    "end_token": 1599,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 387,
    "text": "        fields += [get_normalized_price_feature(\"$low\", 0)]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685,
      1136,
      62,
      11265,
      1143,
      62,
      20888,
      62,
      30053,
      7203,
      3,
      9319,
      1600,
      657,
      15437
    ],
    "start_token": 1599,
    "end_token": 1623,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 388,
    "text": "        fields += [get_normalized_price_feature(\"$close\", 0)]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685,
      1136,
      62,
      11265,
      1143,
      62,
      20888,
      62,
      30053,
      7203,
      3,
      19836,
      1600,
      657,
      15437
    ],
    "start_token": 1623,
    "end_token": 1647,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 388,
    "text": "        fields += [get_normalized_price_feature(\"$close\", 0)]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685,
      1136,
      62,
      11265,
      1143,
      62,
      20888,
      62,
      30053,
      7203,
      3,
      19836,
      1600,
      657,
      15437
    ],
    "start_token": 1647,
    "end_token": 1671,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 394,
    "text": "        fields += [get_normalized_price_feature(\"$low\", 240)]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685,
      1136,
      62,
      11265,
      1143,
      62,
      20888,
      62,
      30053,
      7203,
      3,
      9319,
      1600,
      14956,
      15437
    ],
    "start_token": 1671,
    "end_token": 1695,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 394,
    "text": "        fields += [get_normalized_price_feature(\"$low\", 240)]",
    "annotation": "\ud83e\udde0 ML Signal: Naming conventions for features could be used to infer feature types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685,
      1136,
      62,
      11265,
      1143,
      62,
      20888,
      62,
      30053,
      7203,
      3,
      9319,
      1600,
      14956,
      15437
    ],
    "start_token": 1695,
    "end_token": 1719,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      399,
      3723,
      21396,
      329,
      3033,
      714,
      307,
      973,
      284,
      13249,
      3895,
      3858
    ],
    "label": "ml_signal",
    "reason": "Naming conventions for features could be used to infer feature types"
  },
  {
    "line": 394,
    "text": "        fields += [get_normalized_price_feature(\"$low\", 240)]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685,
      1136,
      62,
      11265,
      1143,
      62,
      20888,
      62,
      30053,
      7203,
      3,
      9319,
      1600,
      14956,
      15437
    ],
    "start_token": 1719,
    "end_token": 1743,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 402,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1743,
    "end_token": 1743,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 402,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1743,
    "end_token": 1743,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 402,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1743,
    "end_token": 1743,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 402,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1743,
    "end_token": 1743,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 408,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1743,
    "end_token": 1743,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 409,
    "text": "        def get_volume_feature(volume_field, shift=0):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      825,
      651,
      62,
      29048,
      62,
      30053,
      7,
      29048,
      62,
      3245,
      11,
      6482,
      28,
      15,
      2599
    ],
    "start_token": 1743,
    "end_token": 1765,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 411,
    "text": "            if shift == 0:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific volume fields and shifts could indicate feature engineering patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      6482,
      6624,
      657,
      25
    ],
    "start_token": 1765,
    "end_token": 1781,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      6115,
      7032,
      290,
      15381,
      714,
      7603,
      3895,
      8705,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of specific volume fields and shifts could indicate feature engineering patterns"
  },
  {
    "line": 413,
    "text": "                    template_paused.format(",
    "annotation": "\ud83e\udde0 ML Signal: Naming conventions for features could be used to infer feature types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11055,
      62,
      8957,
      1484,
      13,
      18982,
      7
    ],
    "start_token": 1781,
    "end_token": 1807,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      399,
      3723,
      21396,
      329,
      3033,
      714,
      307,
      973,
      284,
      13249,
      3895,
      3858
    ],
    "label": "ml_signal",
    "reason": "Naming conventions for features could be used to infer feature types"
  },
  {
    "line": 387,
    "text": "        fields += [get_normalized_price_feature(\"$low\", 0)]",
    "annotation": "\u2705 Best Practice: Class definition should follow PEP 8 naming conventions, which this does.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685,
      1136,
      62,
      11265,
      1143,
      62,
      20888,
      62,
      30053,
      7203,
      3,
      9319,
      1600,
      657,
      15437
    ],
    "start_token": 1807,
    "end_token": 1831,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      6770,
      815,
      1061,
      350,
      8905,
      807,
      19264,
      21396,
      11,
      543,
      428,
      857,
      13
    ],
    "label": "best_practice",
    "reason": "Class definition should follow PEP 8 naming conventions, which this does."
  },
  {
    "line": 394,
    "text": "        fields += [get_normalized_price_feature(\"$low\", 240)]",
    "annotation": "\u2705 Best Practice: Use of a dictionary to store configuration settings improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685,
      1136,
      62,
      11265,
      1143,
      62,
      20888,
      62,
      30053,
      7203,
      3,
      9319,
      1600,
      14956,
      15437
    ],
    "start_token": 1831,
    "end_token": 1855,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3650,
      8398,
      6460,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a dictionary to store configuration settings improves code readability and maintainability."
  },
  {
    "line": 394,
    "text": "        fields += [get_normalized_price_feature(\"$low\", 240)]",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method to get configuration suggests dynamic or customizable behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685,
      1136,
      62,
      11265,
      1143,
      62,
      20888,
      62,
      30053,
      7203,
      3,
      9319,
      1600,
      14956,
      15437
    ],
    "start_token": 1855,
    "end_token": 1879,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      284,
      651,
      8398,
      5644,
      8925,
      393,
      38322,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a method to get configuration suggests dynamic or customizable behavior."
  },
  {
    "line": 402,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of super() to call the parent class's __init__ method ensures proper initialization.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1879,
    "end_token": 1879,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Use of super() to call the parent class's __init__ method ensures proper initialization."
  },
  {
    "line": 408,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose and usage of the function",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1879,
    "end_token": 1879,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose and usage of the function"
  },
  {
    "line": 410,
    "text": "            template_gzero = \"If(Ge({0}, 0), {0}, 0)\"",
    "annotation": "\u2705 Best Practice: Initialize lists before using them",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11055,
      62,
      70,
      22570,
      796,
      366,
      1532,
      7,
      10082,
      15090,
      15,
      5512,
      657,
      828,
      1391,
      15,
      5512,
      657,
      16725
    ],
    "start_token": 1879,
    "end_token": 1909,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      8341,
      878,
      1262,
      606
    ],
    "label": "best_practice",
    "reason": "Initialize lists before using them"
  },
  {
    "line": 413,
    "text": "                    template_paused.format(",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11055,
      62,
      8957,
      1484,
      13,
      18982,
      7
    ],
    "start_token": 1909,
    "end_token": 1935,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 417,
    "text": "                            )",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list operations to accumulate feature configurations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1935,
    "end_token": 1963,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      4560,
      284,
      29915,
      3895,
      25412
    ],
    "label": "ml_signal",
    "reason": "Usage of list operations to accumulate feature configurations"
  },
  {
    "line": 418,
    "text": "                        )",
    "annotation": "\ud83e\udde0 ML Signal: Usage of list operations to accumulate feature names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1963,
    "end_token": 1987,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1351,
      4560,
      284,
      29915,
      3895,
      3891
    ],
    "label": "ml_signal",
    "reason": "Usage of list operations to accumulate feature names"
  },
  {
    "line": 449,
    "text": "        fields += [get_volume_feature(\"$bidV\", 240)]",
    "annotation": "\u2705 Best Practice: Return statement should be at the end of the function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      15853,
      685,
      1136,
      62,
      29048,
      62,
      30053,
      7203,
      3,
      14065,
      53,
      1600,
      14956,
      15437
    ],
    "start_token": 1987,
    "end_token": 2009,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      2643,
      815,
      307,
      379,
      262,
      886,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Return statement should be at the end of the function"
  }
]
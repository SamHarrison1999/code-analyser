[
  {
    "line": 7,
    "text": "import pandas as pd",
    "annotation": "\ud83e\udde0 ML Signal: Class definition with multiple optimization strategies could be used to train models on financial data optimization.",
    "confidence": 0.5,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      6770,
      351,
      3294,
      23989,
      10064,
      714,
      307,
      973,
      284,
      4512,
      4981,
      319,
      3176,
      1366,
      23989,
      13
    ],
    "label": "ml_signal",
    "reason": "Class definition with multiple optimization strategies could be used to train models on financial data optimization."
  },
  {
    "line": 18,
    "text": "        - `gmv`: Global Minimum Variance Portfolio",
    "annotation": "\u2705 Best Practice: Constants for optimization types improve code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      4600,
      39870,
      85,
      63,
      25,
      8060,
      26265,
      15965,
      590,
      4347,
      13652
    ],
    "start_token": 6,
    "end_token": 25,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      329,
      23989,
      3858,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Constants for optimization types improve code readability and maintainability."
  },
  {
    "line": 39,
    "text": "        tol: float = 1e-8,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      284,
      75,
      25,
      12178,
      796,
      352,
      68,
      12,
      23,
      11
    ],
    "start_token": 25,
    "end_token": 42,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation can be bypassed if Python is run with optimizations"
  },
  {
    "line": 41,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Tracking the method parameter can help in understanding usage patterns of different optimization methods",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 42,
    "end_token": 50,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      262,
      2446,
      11507,
      460,
      1037,
      287,
      4547,
      8748,
      7572,
      286,
      1180,
      23989,
      5050
    ],
    "label": "ml_signal",
    "reason": "Tracking the method parameter can help in understanding usage patterns of different optimization methods"
  },
  {
    "line": 43,
    "text": "            method (str): portfolio optimization method",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2446,
      357,
      2536,
      2599,
      15320,
      23989,
      2446
    ],
    "start_token": 50,
    "end_token": 68,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation can be bypassed if Python is run with optimizations"
  },
  {
    "line": 45,
    "text": "            delta (float): turnover rate limit",
    "annotation": "\ud83e\udde0 ML Signal: Tracking the lamb parameter can help in understanding risk preferences",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25979,
      357,
      22468,
      2599,
      25079,
      2494,
      4179
    ],
    "start_token": 68,
    "end_token": 86,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      262,
      19343,
      11507,
      460,
      1037,
      287,
      4547,
      2526,
      15387
    ],
    "label": "ml_signal",
    "reason": "Tracking the lamb parameter can help in understanding risk preferences"
  },
  {
    "line": 47,
    "text": "            scale_return (bool): if to scale alpha to match the volatility of the covariance matrix",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5046,
      62,
      7783,
      357,
      30388,
      2599,
      611,
      284,
      5046,
      17130,
      284,
      2872,
      262,
      30772,
      286,
      262,
      44829,
      590,
      17593
    ],
    "start_token": 86,
    "end_token": 116,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation can be bypassed if Python is run with optimizations"
  },
  {
    "line": 49,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Tracking the delta parameter can help in understanding turnover preferences",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 116,
    "end_token": 124,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      262,
      25979,
      11507,
      460,
      1037,
      287,
      4547,
      25079,
      15387
    ],
    "label": "ml_signal",
    "reason": "Tracking the delta parameter can help in understanding turnover preferences"
  },
  {
    "line": 49,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 124,
    "end_token": 132,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation can be bypassed if Python is run with optimizations"
  },
  {
    "line": 53,
    "text": "        assert lamb >= 0, f\"risk aversion parameter `lamb` should be positive\"",
    "annotation": "\ud83e\udde0 ML Signal: Tracking the alpha parameter can help in understanding regularization preferences",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      19343,
      18189,
      657,
      11,
      277,
      1,
      19121,
      41608,
      11507,
      4600,
      2543,
      65,
      63,
      815,
      307,
      3967,
      1
    ],
    "start_token": 132,
    "end_token": 157,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      262,
      17130,
      11507,
      460,
      1037,
      287,
      4547,
      3218,
      1634,
      15387
    ],
    "label": "ml_signal",
    "reason": "Tracking the alpha parameter can help in understanding regularization preferences"
  },
  {
    "line": 55,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Tracking the tol parameter can help in understanding tolerance preferences",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 157,
    "end_token": 157,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      262,
      284,
      75,
      11507,
      460,
      1037,
      287,
      4547,
      15621,
      15387
    ],
    "label": "ml_signal",
    "reason": "Tracking the tol parameter can help in understanding tolerance preferences"
  },
  {
    "line": 55,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Tracking the scale_return parameter can help in understanding scaling preferences",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 157,
    "end_token": 157,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      262,
      5046,
      62,
      7783,
      11507,
      460,
      1037,
      287,
      4547,
      20796,
      15387
    ],
    "label": "ml_signal",
    "reason": "Tracking the scale_return parameter can help in understanding scaling preferences"
  },
  {
    "line": 69,
    "text": "        w0: Optional[Union[np.ndarray, pd.Series]] = None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      266,
      15,
      25,
      32233,
      58,
      38176,
      58,
      37659,
      13,
      358,
      18747,
      11,
      279,
      67,
      13,
      27996,
      11907,
      796,
      6045,
      11
    ],
    "start_token": 157,
    "end_token": 184,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled with optimization flags"
  },
  {
    "line": 75,
    "text": "            w0 (np.ndarray or pd.Series): initial weights (for turnover control)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks can be disabled with optimization flags",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      266,
      15,
      357,
      37659,
      13,
      358,
      18747,
      393,
      279,
      67,
      13,
      27996,
      2599,
      4238,
      19590,
      357,
      1640,
      25079,
      1630,
      8
    ],
    "start_token": 184,
    "end_token": 215,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      460,
      307,
      10058,
      351,
      23989,
      9701
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks can be disabled with optimization flags"
  },
  {
    "line": 81,
    "text": "        index = None",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if r.std() is zero",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6376,
      796,
      6045
    ],
    "start_token": 215,
    "end_token": 225,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      374,
      13,
      19282,
      3419,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if r.std() is zero"
  },
  {
    "line": 84,
    "text": "            S = S.values",
    "annotation": "\ud83e\udde0 ML Signal: Use of pandas Series to maintain index alignment",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      311,
      796,
      311,
      13,
      27160
    ],
    "start_token": 225,
    "end_token": 241,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19798,
      292,
      7171,
      284,
      5529,
      6376,
      19114
    ],
    "label": "ml_signal",
    "reason": "Use of pandas Series to maintain index alignment"
  },
  {
    "line": 85,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method selection based on self.method can indicate different optimization strategies.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 241,
    "end_token": 241,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      6356,
      1912,
      319,
      2116,
      13,
      24396,
      460,
      7603,
      1180,
      23989,
      10064,
      13
    ],
    "label": "ml_signal",
    "reason": "Method selection based on self.method can indicate different optimization strategies."
  },
  {
    "line": 88,
    "text": "            assert len(r) == len(S), \"`r` has mismatched shape\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Warnings indicate potential misuse of parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      18896,
      7,
      81,
      8,
      6624,
      18896,
      7,
      50,
      828,
      366,
      63,
      81,
      63,
      468,
      32691,
      14265,
      5485,
      1
    ],
    "start_token": 241,
    "end_token": 271,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      39567,
      654,
      7603,
      2785,
      29169,
      286,
      10007,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Warnings indicate potential misuse of parameters."
  },
  {
    "line": 91,
    "text": "                r = r.values",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Warnings indicate potential misuse of parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      374,
      796,
      374,
      13,
      27160
    ],
    "start_token": 271,
    "end_token": 291,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      39567,
      654,
      7603,
      2785,
      29169,
      286,
      10007,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Warnings indicate potential misuse of parameters."
  },
  {
    "line": 96,
    "text": "            if isinstance(w0, pd.Series):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Warnings indicate potential misuse of parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      86,
      15,
      11,
      279,
      67,
      13,
      27996,
      2599
    ],
    "start_token": 291,
    "end_token": 314,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      39567,
      654,
      7603,
      2785,
      29169,
      286,
      10007,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Warnings indicate potential misuse of parameters."
  },
  {
    "line": 103,
    "text": "            r *= np.sqrt(np.mean(np.diag(S)))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Warnings indicate potential misuse of parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      374,
      1635,
      28,
      45941,
      13,
      31166,
      17034,
      7,
      37659,
      13,
      32604,
      7,
      37659,
      13,
      10989,
      363,
      7,
      50,
      22305
    ],
    "start_token": 314,
    "end_token": 344,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      39567,
      654,
      7603,
      2785,
      29169,
      286,
      10007,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Warnings indicate potential misuse of parameters."
  },
  {
    "line": 101,
    "text": "        if r is not None and self.scale_return:",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose of the function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      374,
      318,
      407,
      6045,
      290,
      2116,
      13,
      9888,
      62,
      7783,
      25
    ],
    "start_token": 344,
    "end_token": 363,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose of the function"
  },
  {
    "line": 104,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of numpy for mathematical operations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 363,
    "end_token": 363,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      299,
      32152,
      329,
      18069,
      4560
    ],
    "label": "ml_signal",
    "reason": "Use of numpy for mathematical operations"
  },
  {
    "line": 106,
    "text": "        w = self._optimize(S, r, w0)",
    "annotation": "\ud83e\udde0 ML Signal: Inverse operation on volatility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      266,
      796,
      2116,
      13557,
      40085,
      1096,
      7,
      50,
      11,
      374,
      11,
      266,
      15,
      8
    ],
    "start_token": 363,
    "end_token": 384,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      554,
      4399,
      4905,
      319,
      30772
    ],
    "label": "ml_signal",
    "reason": "Inverse operation on volatility"
  },
  {
    "line": 108,
    "text": "        # restore index if needed",
    "annotation": "\ud83e\udde0 ML Signal: Normalization of weights",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      11169,
      6376,
      611,
      2622
    ],
    "start_token": 384,
    "end_token": 396,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14435,
      1634,
      286,
      19590
    ],
    "label": "ml_signal",
    "reason": "Normalization of weights"
  },
  {
    "line": 108,
    "text": "        # restore index if needed",
    "annotation": "\u2705 Best Practice: Return statement is clear and concise",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      11169,
      6376,
      611,
      2622
    ],
    "start_token": 396,
    "end_token": 408,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      2643,
      318,
      1598,
      290,
      35327
    ],
    "label": "best_practice",
    "reason": "Return statement is clear and concise"
  },
  {
    "line": 107,
    "text": "",
    "annotation": "\u2705 Best Practice: Include type hints for better code readability and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 408,
    "end_token": 408,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for better code readability and maintainability"
  },
  {
    "line": 115,
    "text": "        # inverse volatility",
    "annotation": "\ud83e\udde0 ML Signal: Usage of optimization techniques in financial contexts",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      34062,
      30772
    ],
    "start_token": 408,
    "end_token": 418,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      23989,
      7605,
      287,
      3176,
      26307
    ],
    "label": "ml_signal",
    "reason": "Usage of optimization techniques in financial contexts"
  },
  {
    "line": 115,
    "text": "        # inverse volatility",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the covariance matrix `S` is validated to prevent potential misuse",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      34062,
      30772
    ],
    "start_token": 418,
    "end_token": 428,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      44829,
      590,
      17593,
      4600,
      50,
      63,
      318,
      31031,
      284,
      2948,
      2785,
      29169
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the covariance matrix `S` is validated to prevent potential misuse"
  },
  {
    "line": 118,
    "text": "                warnings.warn(\"`r` is set but will not be used for `inv` portfolio\")",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14601,
      13,
      40539,
      7203,
      63,
      81,
      63,
      318,
      900,
      475,
      481,
      407,
      307,
      973,
      329,
      4600,
      16340,
      63,
      15320,
      4943
    ],
    "start_token": 428,
    "end_token": 463,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and parameters."
  },
  {
    "line": 126,
    "text": "                warnings.warn(\"`r` is set but will not be used for `gmv` portfolio\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of optimization in financial context, relevant for ML models in finance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14601,
      13,
      40539,
      7203,
      63,
      81,
      63,
      318,
      900,
      475,
      481,
      407,
      307,
      973,
      329,
      4600,
      39870,
      85,
      63,
      15320,
      4943
    ],
    "start_token": 463,
    "end_token": 499,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      23989,
      287,
      3176,
      4732,
      11,
      5981,
      329,
      10373,
      4981,
      287,
      9604,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of optimization in financial context, relevant for ML models in finance."
  },
  {
    "line": 127,
    "text": "            return self._optimize_gmv(S, w0)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if inputs are not validated, leading to unexpected behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13557,
      40085,
      1096,
      62,
      39870,
      85,
      7,
      50,
      11,
      266,
      15,
      8
    ],
    "start_token": 499,
    "end_token": 524,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      17311,
      389,
      407,
      31031,
      11,
      3756,
      284,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if inputs are not validated, leading to unexpected behavior."
  },
  {
    "line": 126,
    "text": "                warnings.warn(\"`r` is set but will not be used for `gmv` portfolio\")",
    "annotation": "\u2705 Best Practice: Include type hints for better code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14601,
      13,
      40539,
      7203,
      63,
      81,
      63,
      318,
      900,
      475,
      481,
      407,
      307,
      973,
      329,
      4600,
      39870,
      85,
      63,
      15320,
      4943
    ],
    "start_token": 524,
    "end_token": 560,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for better code readability and maintainability"
  },
  {
    "line": 134,
    "text": "        if self.method == self.OPT_RP:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of optimization functions can be a signal for financial modeling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      24396,
      6624,
      2116,
      13,
      3185,
      51,
      62,
      20031,
      25
    ],
    "start_token": 560,
    "end_token": 579,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      23989,
      5499,
      460,
      307,
      257,
      6737,
      329,
      3176,
      21128
    ],
    "label": "ml_signal",
    "reason": "Usage of optimization functions can be a signal for financial modeling"
  },
  {
    "line": 135,
    "text": "            if r is not None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the input matrix `S` is validated to prevent potential issues with invalid data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      374,
      318,
      407,
      6045,
      25
    ],
    "start_token": 579,
    "end_token": 596,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      5128,
      17593,
      4600,
      50,
      63,
      318,
      31031,
      284,
      2948,
      2785,
      2428,
      351,
      12515,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the input matrix `S` is validated to prevent potential issues with invalid data"
  },
  {
    "line": 134,
    "text": "        if self.method == self.OPT_RP:",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      24396,
      6624,
      2116,
      13,
      3185,
      51,
      62,
      20031,
      25
    ],
    "start_token": 596,
    "end_token": 615,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability"
  },
  {
    "line": 139,
    "text": "    def _optimize_inv(self, S: np.ndarray) -> np.ndarray:",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with matrix operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      40085,
      1096,
      62,
      16340,
      7,
      944,
      11,
      311,
      25,
      45941,
      13,
      358,
      18747,
      8,
      4613,
      45941,
      13,
      358,
      18747,
      25
    ],
    "start_token": 615,
    "end_token": 640,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      17593,
      4560
    ],
    "label": "ml_signal",
    "reason": "Function definition with matrix operations"
  },
  {
    "line": 141,
    "text": "        vola = np.diag(S) ** 0.5",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential misuse of matrix operations if 'S' is not validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2322,
      64,
      796,
      45941,
      13,
      10989,
      363,
      7,
      50,
      8,
      12429,
      657,
      13,
      20
    ],
    "start_token": 640,
    "end_token": 661,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      29169,
      286,
      17593,
      4560,
      611,
      705,
      50,
      6,
      318,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential misuse of matrix operations if 'S' is not validated"
  },
  {
    "line": 143,
    "text": "        w /= w.sum()",
    "annotation": "\ud83e\udde0 ML Signal: Returning a function object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      266,
      1220,
      28,
      266,
      13,
      16345,
      3419
    ],
    "start_token": 661,
    "end_token": 675,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      2163,
      2134
    ],
    "label": "ml_signal",
    "reason": "Returning a function object"
  },
  {
    "line": 142,
    "text": "        w = 1 / vola",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      266,
      796,
      352,
      1220,
      2322,
      64
    ],
    "start_token": 675,
    "end_token": 688,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability"
  },
  {
    "line": 148,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with matrix operations",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 688,
    "end_token": 688,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      17593,
      4560
    ],
    "label": "ml_signal",
    "reason": "Function definition with matrix operations"
  },
  {
    "line": 149,
    "text": "        This method solves the following optimization problem",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for misuse if 'x', 'S', or 'r' are not validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      770,
      2446,
      39107,
      262,
      1708,
      23989,
      1917
    ],
    "start_token": 688,
    "end_token": 702,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      29169,
      611,
      705,
      87,
      3256,
      705,
      50,
      3256,
      393,
      705,
      81,
      6,
      389,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for misuse if 'x', 'S', or 'r' are not validated"
  },
  {
    "line": 151,
    "text": "            s.t. w >= 0, sum(w) == 1",
    "annotation": "\ud83e\udde0 ML Signal: Use of matrix multiplication",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      13,
      83,
      13,
      266,
      18189,
      657,
      11,
      2160,
      7,
      86,
      8,
      6624,
      352
    ],
    "start_token": 702,
    "end_token": 727,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      17593,
      48473
    ],
    "label": "ml_signal",
    "reason": "Use of matrix multiplication"
  },
  {
    "line": 152,
    "text": "        where `S` is the covariance matrix.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for misuse if 'x' or 'r' are not validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      810,
      4600,
      50,
      63,
      318,
      262,
      44829,
      590,
      17593,
      13
    ],
    "start_token": 727,
    "end_token": 744,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      29169,
      611,
      705,
      87,
      6,
      393,
      705,
      81,
      6,
      389,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for misuse if 'x' or 'r' are not validated"
  },
  {
    "line": 153,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Return statement with arithmetic operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 744,
    "end_token": 752,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8229,
      2643,
      351,
      34768,
      4560
    ],
    "label": "ml_signal",
    "reason": "Return statement with arithmetic operations"
  },
  {
    "line": 153,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for misuse if 'self.lamb' is not validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 752,
    "end_token": 760,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      29169,
      611,
      705,
      944,
      13,
      2543,
      65,
      6,
      318,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for misuse if 'self.lamb' is not validated"
  },
  {
    "line": 157,
    "text": "        self, S: np.ndarray, r: Optional[np.ndarray] = None, w0: Optional[np.ndarray] = None",
    "annotation": "\u2705 Best Practice: Consider adding type hints for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11,
      311,
      25,
      45941,
      13,
      358,
      18747,
      11,
      374,
      25,
      32233,
      58,
      37659,
      13,
      358,
      18747,
      60,
      796,
      6045,
      11,
      266,
      15,
      25,
      32233,
      58,
      37659,
      13,
      358,
      18747,
      60,
      796,
      6045
    ],
    "start_token": 760,
    "end_token": 800,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for better readability and maintainability"
  },
  {
    "line": 152,
    "text": "        where `S` is the covariance matrix.",
    "annotation": "\u2705 Best Practice: Use of type hint for function parameter improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      810,
      4600,
      50,
      63,
      318,
      262,
      44829,
      590,
      17593,
      13
    ],
    "start_token": 800,
    "end_token": 817,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      2163,
      11507,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hint for function parameter improves code readability and maintainability"
  },
  {
    "line": 158,
    "text": "    ) -> np.ndarray:",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a single parameter",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1267,
      4613,
      45941,
      13,
      358,
      18747,
      25
    ],
    "start_token": 817,
    "end_token": 827,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2060,
      11507
    ],
    "label": "ml_signal",
    "reason": "Function definition with a single parameter"
  },
  {
    "line": 160,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of matrix multiplication",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 827,
    "end_token": 827,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      17593,
      48473
    ],
    "label": "ml_signal",
    "reason": "Use of matrix multiplication"
  },
  {
    "line": 162,
    "text": "            min_w   - w' r + lamb * w' S w",
    "annotation": "\ud83e\udde0 ML Signal: Use of matrix multiplication",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      949,
      62,
      86,
      220,
      220,
      532,
      266,
      6,
      374,
      1343,
      19343,
      1635,
      266,
      6,
      311,
      266
    ],
    "start_token": 827,
    "end_token": 854,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      17593,
      48473
    ],
    "label": "ml_signal",
    "reason": "Use of matrix multiplication"
  },
  {
    "line": 164,
    "text": "        where `S` is the covariance matrix, `u` is the expected returns,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if Sx or N is zero",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      810,
      4600,
      50,
      63,
      318,
      262,
      44829,
      590,
      17593,
      11,
      4600,
      84,
      63,
      318,
      262,
      2938,
      5860,
      11
    ],
    "start_token": 854,
    "end_token": 879,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      311,
      87,
      393,
      399,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if Sx or N is zero"
  },
  {
    "line": 164,
    "text": "        where `S` is the covariance matrix, `u` is the expected returns,",
    "annotation": "\u2705 Best Practice: Use of numpy for numerical operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      810,
      4600,
      50,
      63,
      318,
      262,
      44829,
      590,
      17593,
      11,
      4600,
      84,
      63,
      318,
      262,
      2938,
      5860,
      11
    ],
    "start_token": 879,
    "end_token": 904,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      299,
      32152,
      329,
      29052,
      4560
    ],
    "label": "best_practice",
    "reason": "Use of numpy for numerical operations"
  },
  {
    "line": 164,
    "text": "        where `S` is the covariance matrix, `u` is the expected returns,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Returning a function without context or checks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      810,
      4600,
      50,
      63,
      318,
      262,
      44829,
      590,
      17593,
      11,
      4600,
      84,
      63,
      318,
      262,
      2938,
      5860,
      11
    ],
    "start_token": 904,
    "end_token": 929,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42882,
      257,
      2163,
      1231,
      4732,
      393,
      8794
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Returning a function without context or checks"
  },
  {
    "line": 163,
    "text": "            s.t.   w >= 0, sum(w) == 1",
    "annotation": "\u2705 Best Practice: Use of type hinting for function parameters improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      13,
      83,
      13,
      220,
      220,
      266,
      18189,
      657,
      11,
      2160,
      7,
      86,
      8,
      6624,
      352
    ],
    "start_token": 929,
    "end_token": 956,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for function parameters improves code readability and maintainability."
  },
  {
    "line": 171,
    "text": "",
    "annotation": "\u2705 Best Practice: Using scipy.optimize.Bounds for defining variable bounds is a clear and concise way to handle constraints.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 956,
    "end_token": 956,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      629,
      541,
      88,
      13,
      40085,
      1096,
      13,
      33,
      3733,
      329,
      16215,
      7885,
      22303,
      318,
      257,
      1598,
      290,
      35327,
      835,
      284,
      5412,
      17778,
      13
    ],
    "label": "best_practice",
    "reason": "Using scipy.optimize.Bounds for defining variable bounds is a clear and concise way to handle constraints."
  },
  {
    "line": 173,
    "text": "            min_w sum_i [w_i - (w' S w) / ((S w)_i * N)]**2",
    "annotation": "\u2705 Best Practice: Using a dictionary to define constraints is a clear and structured approach.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      949,
      62,
      86,
      2160,
      62,
      72,
      685,
      86,
      62,
      72,
      532,
      357,
      86,
      6,
      311,
      266,
      8,
      1220,
      14808,
      50,
      266,
      8,
      62,
      72,
      1635,
      399,
      15437,
      1174,
      17
    ],
    "start_token": 956,
    "end_token": 996,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      22155,
      284,
      8160,
      17778,
      318,
      257,
      1598,
      290,
      20793,
      3164,
      13
    ],
    "label": "best_practice",
    "reason": "Using a dictionary to define constraints is a clear and structured approach."
  },
  {
    "line": 175,
    "text": "        where `S` is the covariance matrix and `N` is the number of stocks.",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on input parameters can indicate dynamic behavior in the function.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      810,
      4600,
      50,
      63,
      318,
      262,
      44829,
      590,
      17593,
      290,
      4600,
      45,
      63,
      318,
      262,
      1271,
      286,
      14420,
      13
    ],
    "start_token": 996,
    "end_token": 1022,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      5128,
      10007,
      460,
      7603,
      8925,
      4069,
      287,
      262,
      2163,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on input parameters can indicate dynamic behavior in the function."
  },
  {
    "line": 176,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Appending to a list of constraints allows for flexible constraint management.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1022,
    "end_token": 1030,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      1571,
      284,
      257,
      1351,
      286,
      17778,
      3578,
      329,
      12846,
      32315,
      4542,
      13
    ],
    "label": "best_practice",
    "reason": "Appending to a list of constraints allows for flexible constraint management."
  },
  {
    "line": 176,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Returning multiple values as a tuple is a common and clear pattern in Python.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1030,
    "end_token": 1038,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      3294,
      3815,
      355,
      257,
      46545,
      318,
      257,
      2219,
      290,
      1598,
      3912,
      287,
      11361,
      13
    ],
    "label": "best_practice",
    "reason": "Returning multiple values as a tuple is a common and clear pattern in Python."
  },
  {
    "line": 183,
    "text": "            min_w w' S w",
    "annotation": "\u2705 Best Practice: Initialize variables at the start of the function for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      949,
      62,
      86,
      266,
      6,
      311,
      266
    ],
    "start_token": 1038,
    "end_token": 1056,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      379,
      262,
      923,
      286,
      262,
      2163,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Initialize variables at the start of the function for clarity"
  },
  {
    "line": 185,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on class attribute",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1056,
    "end_token": 1056,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      1398,
      11688
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on class attribute"
  },
  {
    "line": 186,
    "text": "        def func(x):",
    "annotation": "\ud83e\udde0 ML Signal: Custom objective function for optimization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      825,
      25439,
      7,
      87,
      2599
    ],
    "start_token": 1056,
    "end_token": 1068,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      9432,
      2163,
      329,
      23989
    ],
    "label": "ml_signal",
    "reason": "Custom objective function for optimization"
  },
  {
    "line": 189,
    "text": "        return func",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of starting point for optimization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      25439
    ],
    "start_token": 1068,
    "end_token": 1077,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      3599,
      966,
      329,
      23989
    ],
    "label": "ml_signal",
    "reason": "Initialization of starting point for optimization"
  },
  {
    "line": 191,
    "text": "    def _get_objective_mvo(self, S: np.ndarray, r: np.ndarray = None) -> Callable:",
    "annotation": "\ud83e\udde0 ML Signal: Use of scipy.optimize.minimize for optimization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      1136,
      62,
      15252,
      425,
      62,
      76,
      13038,
      7,
      944,
      11,
      311,
      25,
      45941,
      13,
      358,
      18747,
      11,
      374,
      25,
      45941,
      13,
      358,
      18747,
      796,
      6045,
      8,
      4613,
      4889,
      540,
      25
    ],
    "start_token": 1077,
    "end_token": 1112,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      629,
      541,
      88,
      13,
      40085,
      1096,
      13,
      1084,
      48439,
      329,
      23989
    ],
    "label": "ml_signal",
    "reason": "Use of scipy.optimize.minimize for optimization"
  },
  {
    "line": 192,
    "text": "        \"\"\"mean-variance optimization objective",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if sol is None or does not have 'success' attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      32604,
      12,
      25641,
      590,
      23989,
      9432
    ],
    "start_token": 1112,
    "end_token": 1126,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      1540,
      318,
      6045,
      393,
      857,
      407,
      423,
      705,
      13138,
      6,
      11688
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if sol is None or does not have 'success' attribute"
  },
  {
    "line": 192,
    "text": "        \"\"\"mean-variance optimization objective",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of warnings.warn without specifying a category",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      32604,
      12,
      25641,
      590,
      23989,
      9432
    ],
    "start_token": 1126,
    "end_token": 1140,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      14601,
      13,
      40539,
      1231,
      31577,
      257,
      6536
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of warnings.warn without specifying a category"
  },
  {
    "line": 192,
    "text": "        \"\"\"mean-variance optimization objective",
    "annotation": "\ud83e\udde0 ML Signal: Returning the optimized solution",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      32604,
      12,
      25641,
      590,
      23989,
      9432
    ],
    "start_token": 1140,
    "end_token": 1154,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      262,
      23392,
      4610
    ],
    "label": "ml_signal",
    "reason": "Returning the optimized solution"
  }
]
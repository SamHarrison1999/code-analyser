[
  {
    "line": 6,
    "text": "import pandas as pd",
    "annotation": "\u2705 Best Practice: Grouping imports by standard library, third-party, and local modules improves readability.",
    "confidence": 1.0,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      416,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      13103,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports by standard library, third-party, and local modules improves readability."
  },
  {
    "line": 22,
    "text": "class TWAPStrategy(BaseStrategy):",
    "annotation": "\u2705 Best Practice: Class docstring provides a clear description of the class functionality and behavior.",
    "confidence": 1.0,
    "tokens": [
      4871,
      17306,
      2969,
      13290,
      4338,
      7,
      14881,
      13290,
      4338,
      2599
    ],
    "start_token": 6,
    "end_token": 16,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      1398,
      11244,
      290,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a clear description of the class functionality and behavior."
  },
  {
    "line": 23,
    "text": "    \"\"\"TWAP Strategy for trading",
    "annotation": "\u2705 Best Practice: Docstring provides clear documentation of parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      34551,
      2969,
      20561,
      329,
      7313
    ],
    "start_token": 16,
    "end_token": 25,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      10314,
      286,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear documentation of parameters"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\u2705 Best Practice: Using super() to call the parent class method ensures proper initialization",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 25,
    "end_token": 25,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      2446,
      19047,
      1774,
      37588
    ],
    "label": "best_practice",
    "reason": "Using super() to call the parent class method ensures proper initialization"
  },
  {
    "line": 32,
    "text": "        Parameters",
    "annotation": "\u2705 Best Practice: Initializing trade_amount_remain as an empty dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 25,
    "end_token": 33,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      3292,
      62,
      17287,
      62,
      2787,
      391,
      355,
      281,
      6565,
      22155
    ],
    "label": "best_practice",
    "reason": "Initializing trade_amount_remain as an empty dictionary"
  },
  {
    "line": 34,
    "text": "        outer_trade_decision : BaseTradeDecision, optional",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over decisions to populate trade_amount_remain",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      1058,
      7308,
      35965,
      10707,
      1166,
      11,
      11902
    ],
    "start_token": 33,
    "end_token": 53,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      5370,
      284,
      48040,
      3292,
      62,
      17287,
      62,
      2787,
      391
    ],
    "label": "ml_signal",
    "reason": "Iterating over decisions to populate trade_amount_remain"
  },
  {
    "line": 36,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Mapping stock_id to order amount",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 53,
    "end_token": 53,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      4283,
      62,
      312,
      284,
      1502,
      2033
    ],
    "label": "ml_signal",
    "reason": "Mapping stock_id to order amount"
  },
  {
    "line": 44,
    "text": "        # NOTE:  corner cases!!!",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if order.stock_id is not in self.trade_amount_remain",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      220,
      5228,
      2663,
      10185
    ],
    "start_token": 53,
    "end_token": 67,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      1502,
      13,
      13578,
      62,
      312,
      318,
      407,
      287,
      2116,
      13,
      25351,
      62,
      17287,
      62,
      2787,
      391
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if order.stock_id is not in self.trade_amount_remain"
  },
  {
    "line": 54,
    "text": "        trade_step = self.trade_calendar.get_trade_step()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if order.stock_id is not in self.trade_amount_remain",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3292,
      62,
      9662,
      796,
      2116,
      13,
      25351,
      62,
      9948,
      9239,
      13,
      1136,
      62,
      25351,
      62,
      9662,
      3419
    ],
    "start_token": 67,
    "end_token": 91,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      1502,
      13,
      13578,
      62,
      312,
      318,
      407,
      287,
      2116,
      13,
      25351,
      62,
      17287,
      62,
      2787,
      391
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if order.stock_id is not in self.trade_amount_remain"
  },
  {
    "line": 65,
    "text": "        # update the order amount",
    "annotation": "\u2705 Best Practice: Use of np.round for rounding ensures consistent behavior across platforms",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      4296,
      262,
      1502,
      2033
    ],
    "start_token": 91,
    "end_token": 103,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      45941,
      13,
      744,
      329,
      38185,
      19047,
      6414,
      4069,
      1973,
      9554
    ],
    "label": "best_practice",
    "reason": "Use of np.round for rounding ensures consistent behavior across platforms"
  },
  {
    "line": 68,
    "text": "                self.trade_amount_remain[order.stock_id] -= order.deal_amount",
    "annotation": "\ud83e\udde0 ML Signal: Creation of Order object could be used to train models on order patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      25351,
      62,
      17287,
      62,
      2787,
      391,
      58,
      2875,
      13,
      13578,
      62,
      312,
      60,
      48185,
      1502,
      13,
      31769,
      62,
      17287
    ],
    "start_token": 103,
    "end_token": 139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21582,
      286,
      8284,
      2134,
      714,
      307,
      973,
      284,
      4512,
      4981,
      319,
      1502,
      7572
    ],
    "label": "ml_signal",
    "reason": "Creation of Order object could be used to train models on order patterns"
  },
  {
    "line": 81,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning TradeDecisionWO object could be used to train models on decision patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 139,
    "end_token": 139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      9601,
      10707,
      1166,
      54,
      46,
      2134,
      714,
      307,
      973,
      284,
      4512,
      4981,
      319,
      2551,
      7572
    ],
    "label": "ml_signal",
    "reason": "Returning TradeDecisionWO object could be used to train models on decision patterns"
  },
  {
    "line": 81,
    "text": "",
    "annotation": "\u2705 Best Practice: Constants are defined with clear and descriptive names.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 139,
    "end_token": 139,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      389,
      5447,
      351,
      1598,
      290,
      35644,
      3891,
      13
    ],
    "label": "best_practice",
    "reason": "Constants are defined with clear and descriptive names."
  },
  {
    "line": 90,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of super() to call the parent class method ensures proper initialization.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 139,
    "end_token": 139,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      2446,
      19047,
      1774,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Use of super() to call the parent class method ensures proper initialization."
  },
  {
    "line": 93,
    "text": "",
    "annotation": "\u2705 Best Practice: Initializing dictionaries to store trade trends and amounts.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 139,
    "end_token": 139,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      48589,
      3166,
      284,
      3650,
      3292,
      11257,
      290,
      6867,
      13
    ],
    "label": "best_practice",
    "reason": "Initializing dictionaries to store trade trends and amounts."
  },
  {
    "line": 96,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over decisions to update internal state could indicate a pattern for decision processing.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 139,
    "end_token": 151,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      5370,
      284,
      4296,
      5387,
      1181,
      714,
      7603,
      257,
      3912,
      329,
      2551,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over decisions to update internal state could indicate a pattern for decision processing."
  },
  {
    "line": 98,
    "text": "            # round the amount_delta by trade_unit and clip by remain",
    "annotation": "\ud83e\udde0 ML Signal: Mapping stock IDs to trends and amounts could be used to learn trading behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2835,
      262,
      2033,
      62,
      67,
      12514,
      416,
      3292,
      62,
      20850,
      290,
      10651,
      416,
      3520
    ],
    "start_token": 151,
    "end_token": 177,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      4283,
      32373,
      284,
      11257,
      290,
      6867,
      714,
      307,
      973,
      284,
      2193,
      7313,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping stock IDs to trends and amounts could be used to learn trading behavior."
  },
  {
    "line": 100,
    "text": "            if _amount_trade_unit is None:",
    "annotation": "\ud83e\udde0 ML Signal: Storing order amounts by stock ID could be used to analyze trading volume patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4808,
      17287,
      62,
      25351,
      62,
      20850,
      318,
      6045,
      25
    ],
    "start_token": 177,
    "end_token": 198,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1502,
      6867,
      416,
      4283,
      4522,
      714,
      307,
      973,
      284,
      16602,
      7313,
      6115,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing order amounts by stock ID could be used to analyze trading volume patterns."
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\u2705 Best Practice: Method name starts with an underscore, indicating it's intended for internal use.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 198,
    "end_token": 198,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      4940,
      351,
      281,
      44810,
      11,
      12739,
      340,
      338,
      5292,
      329,
      5387,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Method name starts with an underscore, indicating it's intended for internal use."
  },
  {
    "line": 99,
    "text": "            # NOTE: this could be more than expected.",
    "annotation": "\u2705 Best Practice: Raises NotImplementedError to indicate that the method should be overridden in subclasses.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      428,
      714,
      307,
      517,
      621,
      2938,
      13
    ],
    "start_token": 198,
    "end_token": 219,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      2696,
      1892,
      3546,
      1154,
      12061,
      12331,
      284,
      7603,
      326,
      262,
      2446,
      815,
      307,
      23170,
      4651,
      287,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Raises NotImplementedError to indicate that the method should be overridden in subclasses."
  },
  {
    "line": 100,
    "text": "            if _amount_trade_unit is None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of trade calendar to determine trade steps and lengths",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4808,
      17287,
      62,
      25351,
      62,
      20850,
      318,
      6045,
      25
    ],
    "start_token": 219,
    "end_token": 240,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3292,
      11845,
      284,
      5004,
      3292,
      4831,
      290,
      20428
    ],
    "label": "ml_signal",
    "reason": "Usage of trade calendar to determine trade steps and lengths"
  },
  {
    "line": 105,
    "text": "                    np.round(amount_delta / _amount_trade_unit) * _amount_trade_unit, amount_remain",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for negative values if deal_amount exceeds trade_amount",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      45941,
      13,
      744,
      7,
      17287,
      62,
      67,
      12514,
      1220,
      4808,
      17287,
      62,
      25351,
      62,
      20850,
      8,
      1635,
      4808,
      17287,
      62,
      25351,
      62,
      20850,
      11,
      2033,
      62,
      2787,
      391
    ],
    "start_token": 240,
    "end_token": 287,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      4633,
      3815,
      611,
      1730,
      62,
      17287,
      21695,
      3292,
      62,
      17287
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for negative values if deal_amount exceeds trade_amount"
  },
  {
    "line": 107,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of trade calendar to get specific time frames",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 287,
    "end_token": 287,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3292,
      11845,
      284,
      651,
      2176,
      640,
      13431
    ],
    "label": "ml_signal",
    "reason": "Usage of trade calendar to get specific time frames"
  },
  {
    "line": 110,
    "text": "            if rel_trade_step == trade_len - 1:",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over external trade decisions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      823,
      62,
      25351,
      62,
      9662,
      6624,
      3292,
      62,
      11925,
      532,
      352,
      25
    ],
    "start_token": 287,
    "end_token": 311,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      7097,
      3292,
      5370
    ],
    "label": "ml_signal",
    "reason": "Iterating over external trade decisions"
  },
  {
    "line": 113,
    "text": "            if amount_delta_target > 1e-5:",
    "annotation": "\ud83e\udde0 ML Signal: Predicting price trend based on stock ID and time frame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2033,
      62,
      67,
      12514,
      62,
      16793,
      1875,
      352,
      68,
      12,
      20,
      25
    ],
    "start_token": 311,
    "end_token": 335,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49461,
      278,
      2756,
      5182,
      1912,
      319,
      4283,
      4522,
      290,
      640,
      5739
    ],
    "label": "ml_signal",
    "reason": "Predicting price trend based on stock ID and time frame"
  },
  {
    "line": 118,
    "text": "                    end_time=trade_end_time,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential logic flaw if stock is not tradable but trend is updated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      28,
      25351,
      62,
      437,
      62,
      2435,
      11
    ],
    "start_token": 335,
    "end_token": 364,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      9156,
      11804,
      611,
      4283,
      318,
      407,
      2083,
      540,
      475,
      5182,
      318,
      6153
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential logic flaw if stock is not tradable but trend is updated"
  },
  {
    "line": 125,
    "text": "class SBBStrategyBase(BaseStrategy):",
    "annotation": "\ud83e\udde0 ML Signal: Determining trade unit amount based on stock ID and time frame",
    "confidence": 1.0,
    "tokens": [
      4871,
      311,
      15199,
      13290,
      4338,
      14881,
      7,
      14881,
      13290,
      4338,
      2599
    ],
    "start_token": 364,
    "end_token": 375,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      360,
      13221,
      278,
      3292,
      4326,
      2033,
      1912,
      319,
      4283,
      4522,
      290,
      640,
      5739
    ],
    "label": "ml_signal",
    "reason": "Determining trade unit amount based on stock ID and time frame"
  },
  {
    "line": 145,
    "text": "        super(SBBStrategyBase, self).reset(outer_trade_decision=outer_trade_decision, **kwargs)",
    "annotation": "\u2705 Best Practice: Use of a dedicated Order class for order creation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      7,
      50,
      15199,
      13290,
      4338,
      14881,
      11,
      2116,
      737,
      42503,
      7,
      39605,
      62,
      25351,
      62,
      12501,
      1166,
      28,
      39605,
      62,
      25351,
      62,
      12501,
      1166,
      11,
      12429,
      46265,
      22046,
      8
    ],
    "start_token": 375,
    "end_token": 412,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      7256,
      8284,
      1398,
      329,
      1502,
      6282
    ],
    "label": "best_practice",
    "reason": "Use of a dedicated Order class for order creation"
  },
  {
    "line": 202,
    "text": "                    # calculate the amount of one part, ceil the amount",
    "annotation": "\u2705 Best Practice: Returning a well-defined TradeDecisionWO object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      15284,
      262,
      2033,
      286,
      530,
      636,
      11,
      2906,
      346,
      262,
      2033
    ],
    "start_token": 412,
    "end_token": 443,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      880,
      12,
      23211,
      9601,
      10707,
      1166,
      54,
      46,
      2134
    ],
    "label": "best_practice",
    "reason": "Returning a well-defined TradeDecisionWO object"
  },
  {
    "line": 202,
    "text": "                    # calculate the amount of one part, ceil the amount",
    "annotation": "\ud83e\udde0 ML Signal: Class inheritance pattern could be used to identify strategy types in trading systems",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      15284,
      262,
      2033,
      286,
      530,
      636,
      11,
      2906,
      346,
      262,
      2033
    ],
    "start_token": 443,
    "end_token": 474,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5016,
      24155,
      3912,
      714,
      307,
      973,
      284,
      5911,
      4811,
      3858,
      287,
      7313,
      3341
    ],
    "label": "ml_signal",
    "reason": "Class inheritance pattern could be used to identify strategy types in trading systems"
  },
  {
    "line": 212,
    "text": "                        _order_amount = self.trade_amount[order.stock_id]",
    "annotation": "\u2705 Best Practice: Docstring provides clear parameter descriptions and default values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      2875,
      62,
      17287,
      796,
      2116,
      13,
      25351,
      62,
      17287,
      58,
      2875,
      13,
      13578,
      62,
      312,
      60
    ],
    "start_token": 474,
    "end_token": 514,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      11507,
      16969,
      290,
      4277,
      3815
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear parameter descriptions and default values"
  },
  {
    "line": 223,
    "text": "                    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of warnings.warn can be missed if not properly handled",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 514,
    "end_token": 534,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      14601,
      13,
      40539,
      460,
      307,
      6825,
      611,
      407,
      6105,
      12118
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of warnings.warn can be missed if not properly handled"
  },
  {
    "line": 227,
    "text": "                _order_amount = None",
    "annotation": "\ud83e\udde0 ML Signal: Type checking and conversion pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      2875,
      62,
      17287,
      796,
      6045
    ],
    "start_token": 534,
    "end_token": 555,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      10627,
      290,
      11315,
      3912
    ],
    "label": "ml_signal",
    "reason": "Type checking and conversion pattern"
  },
  {
    "line": 229,
    "text": "                if _amount_trade_unit is None:",
    "annotation": "\ud83e\udde0 ML Signal: Type checking and direct assignment pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4808,
      17287,
      62,
      25351,
      62,
      20850,
      318,
      6045,
      25
    ],
    "start_token": 555,
    "end_token": 580,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5994,
      10627,
      290,
      1277,
      16237,
      3912
    ],
    "label": "ml_signal",
    "reason": "Type checking and direct assignment pattern"
  },
  {
    "line": 233,
    "text": "                else:",
    "annotation": "\u2705 Best Practice: Explicit call to superclass initializer",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 580,
    "end_token": 597,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      869,
      284,
      2208,
      4871,
      4238,
      7509
    ],
    "label": "best_practice",
    "reason": "Explicit call to superclass initializer"
  },
  {
    "line": 234,
    "text": "                    # cal how many trade unit",
    "annotation": "\ud83e\udde0 ML Signal: Usage of EMA (Exponential Moving Average) indicates a pattern for financial time series analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2386,
      703,
      867,
      3292,
      4326
    ],
    "start_token": 597,
    "end_token": 622,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      412,
      5673,
      357,
      16870,
      35470,
      26768,
      13475,
      8,
      9217,
      257,
      3912,
      329,
      3176,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Usage of EMA (Exponential Moving Average) indicates a pattern for financial time series analysis"
  },
  {
    "line": 236,
    "text": "                    # N trade day left, divide the order into N + 1 parts, and trade 2 parts",
    "annotation": "\u2705 Best Practice: Descriptive variable names improve code readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      399,
      3292,
      1110,
      1364,
      11,
      14083,
      262,
      1502,
      656,
      399,
      1343,
      352,
      3354,
      11,
      290,
      3292,
      362,
      3354
    ],
    "start_token": 622,
    "end_token": 660,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2935,
      6519,
      425,
      7885,
      3891,
      2987,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Descriptive variable names improve code readability"
  },
  {
    "line": 240,
    "text": "                        * 2",
    "annotation": "\ud83e\udde0 ML Signal: Fetching features over a time range is a common pattern in time series analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1635,
      362
    ],
    "start_token": 660,
    "end_token": 685,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      3033,
      625,
      257,
      640,
      2837,
      318,
      257,
      2219,
      3912,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Fetching features over a time range is a common pattern in time series analysis"
  },
  {
    "line": 243,
    "text": "                if order.direction == order.SELL:",
    "annotation": "\u2705 Best Practice: Renaming columns for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1502,
      13,
      37295,
      6624,
      1502,
      13,
      5188,
      3069,
      25
    ],
    "start_token": 685,
    "end_token": 710,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      3723,
      15180,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Renaming columns for clarity"
  },
  {
    "line": 246,
    "text": "                        _order_amount < 1e-5 or trade_step == trade_len - 1",
    "annotation": "\ud83e\udde0 ML Signal: Grouping by instrument suggests a pattern for handling multiple time series",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      2875,
      62,
      17287,
      1279,
      352,
      68,
      12,
      20,
      393,
      3292,
      62,
      9662,
      6624,
      3292,
      62,
      11925,
      532,
      352
    ],
    "start_token": 710,
    "end_token": 752,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      416,
      8875,
      5644,
      257,
      3912,
      329,
      9041,
      3294,
      640,
      2168
    ],
    "label": "ml_signal",
    "reason": "Grouping by instrument suggests a pattern for handling multiple time series"
  },
  {
    "line": 250,
    "text": "                _order_amount = min(_order_amount, self.trade_amount[order.stock_id])",
    "annotation": "\u2705 Best Practice: Dropping unnecessary levels in index for cleaner data structures",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      2875,
      62,
      17287,
      796,
      949,
      28264,
      2875,
      62,
      17287,
      11,
      2116,
      13,
      25351,
      62,
      17287,
      58,
      2875,
      13,
      13578,
      62,
      312,
      12962
    ],
    "start_token": 752,
    "end_token": 790,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      13114,
      2974,
      287,
      6376,
      329,
      21723,
      1366,
      8573
    ],
    "label": "best_practice",
    "reason": "Dropping unnecessary levels in index for cleaner data structures"
  },
  {
    "line": 246,
    "text": "                        _order_amount < 1e-5 or trade_step == trade_len - 1",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      2875,
      62,
      17287,
      1279,
      352,
      68,
      12,
      20,
      393,
      3292,
      62,
      9662,
      6624,
      3292,
      62,
      11925,
      532,
      352
    ],
    "start_token": 790,
    "end_token": 832,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose"
  },
  {
    "line": 251,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of inheritance and method overriding",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 832,
    "end_token": 832,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      24155,
      290,
      2446,
      44987
    ],
    "label": "ml_signal",
    "reason": "Use of inheritance and method overriding"
  },
  {
    "line": 253,
    "text": "                    if trade_step % 2 == 0:",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern for resetting internal state",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3292,
      62,
      9662,
      4064,
      362,
      6624,
      657,
      25
    ],
    "start_token": 832,
    "end_token": 860,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      329,
      13259,
      889,
      5387,
      1181
    ],
    "label": "ml_signal",
    "reason": "Method call pattern for resetting internal state"
  },
  {
    "line": 253,
    "text": "                    if trade_step % 2 == 0:",
    "annotation": "\ud83e\udde0 ML Signal: Function for predicting price trends based on historical signals",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3292,
      62,
      9662,
      4064,
      362,
      6624,
      657,
      25
    ],
    "start_token": 860,
    "end_token": 888,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      329,
      25539,
      2756,
      11257,
      1912,
      319,
      6754,
      10425
    ],
    "label": "ml_signal",
    "reason": "Function for predicting price trends based on historical signals"
  },
  {
    "line": 256,
    "text": "                        # if look long on the price, buy the stock more",
    "annotation": "\u2705 Best Practice: Use of a helper function to resample time series data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      611,
      804,
      890,
      319,
      262,
      2756,
      11,
      2822,
      262,
      4283,
      517
    ],
    "start_token": 888,
    "end_token": 923,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      31904,
      2163,
      284,
      581,
      1403,
      640,
      2168,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of a helper function to resample time series data"
  },
  {
    "line": 264,
    "text": "                                stock_id=order.stock_id,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if resam_ts_data returns unexpected types",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      62,
      312,
      28,
      2875,
      13,
      13578,
      62,
      312,
      11
    ],
    "start_token": 923,
    "end_token": 964,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      581,
      321,
      62,
      912,
      62,
      7890,
      5860,
      10059,
      3858
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if resam_ts_data returns unexpected types"
  },
  {
    "line": 268,
    "text": "                                direction=order.direction,  # 1 for buy",
    "annotation": "\u2705 Best Practice: Class should have a docstring explaining its purpose and usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4571,
      28,
      2875,
      13,
      37295,
      11,
      220,
      1303,
      352,
      329,
      2822
    ],
    "start_token": 964,
    "end_token": 1006,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Class should have a docstring explaining its purpose and usage"
  },
  {
    "line": 291,
    "text": "                # in the first one of two adjacent bars, store the trend for the second one to use",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameter values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      287,
      262,
      717,
      530,
      286,
      734,
      15909,
      9210,
      11,
      3650,
      262,
      5182,
      329,
      262,
      1218,
      530,
      284,
      779
    ],
    "start_token": 1006,
    "end_token": 1040,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      11507,
      3815
    ],
    "label": "ml_signal",
    "reason": "Use of default parameter values"
  },
  {
    "line": 293,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameter values",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1040,
    "end_token": 1040,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      11507,
      3815
    ],
    "label": "ml_signal",
    "reason": "Use of default parameter values"
  },
  {
    "line": 295,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameter values",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1040,
    "end_token": 1040,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      11507,
      3815
    ],
    "label": "ml_signal",
    "reason": "Use of default parameter values"
  },
  {
    "line": 297,
    "text": "class SBBStrategyEMA(SBBStrategyBase):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if `instruments` is None and not handled",
    "confidence": 0.5,
    "tokens": [
      4871,
      311,
      15199,
      13290,
      4338,
      27630,
      7,
      50,
      15199,
      13290,
      4338,
      14881,
      2599
    ],
    "start_token": 1040,
    "end_token": 1053,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      4600,
      259,
      2536,
      2886,
      63,
      318,
      6045,
      290,
      407,
      12118
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if `instruments` is None and not handled"
  },
  {
    "line": 299,
    "text": "    (S)elect the (B)etter one among every two adjacent trading (B)ars to sell or buy with (EMA) signal.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of warnings instead of exceptions for critical issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      357,
      50,
      8,
      9509,
      262,
      357,
      33,
      8,
      40088,
      530,
      1871,
      790,
      734,
      15909,
      7313,
      357,
      33,
      8,
      945,
      284,
      3677,
      393,
      2822,
      351,
      357,
      27630,
      8,
      6737,
      13
    ],
    "start_token": 1053,
    "end_token": 1085,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      14601,
      2427,
      286,
      13269,
      329,
      4688,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of warnings instead of exceptions for critical issues"
  },
  {
    "line": 303,
    "text": "    # 1. Supporting leverage the get_range_limit result from the decision",
    "annotation": "\u2705 Best Practice: Check type before processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      352,
      13,
      44188,
      16094,
      262,
      651,
      62,
      9521,
      62,
      32374,
      1255,
      422,
      262,
      2551
    ],
    "start_token": 1085,
    "end_token": 1103,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      2099,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Check type before processing"
  },
  {
    "line": 305,
    "text": "    # 3. Supporting checking the availability of trade decision",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameter values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      513,
      13,
      44188,
      10627,
      262,
      11500,
      286,
      3292,
      2551
    ],
    "start_token": 1103,
    "end_token": 1116,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      11507,
      3815
    ],
    "label": "ml_signal",
    "reason": "Use of default parameter values"
  },
  {
    "line": 308,
    "text": "        self,",
    "annotation": "\u2705 Best Practice: Explicit call to superclass constructor",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 1116,
    "end_token": 1125,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      869,
      284,
      2208,
      4871,
      23772
    ],
    "label": "best_practice",
    "reason": "Explicit call to superclass constructor"
  },
  {
    "line": 305,
    "text": "    # 3. Supporting checking the availability of trade decision",
    "annotation": "\ud83e\udde0 ML Signal: Usage of mathematical operations on financial data for feature extraction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      513,
      13,
      44188,
      10627,
      262,
      11500,
      286,
      3292,
      2551
    ],
    "start_token": 1125,
    "end_token": 1138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      18069,
      4560,
      319,
      3176,
      1366,
      329,
      3895,
      22236
    ],
    "label": "ml_signal",
    "reason": "Usage of mathematical operations on financial data for feature extraction"
  },
  {
    "line": 309,
    "text": "        outer_trade_decision: BaseTradeDecision = None,",
    "annotation": "\ud83e\udde0 ML Signal: Use of trade calendar to determine time range for data extraction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      25,
      7308,
      35965,
      10707,
      1166,
      796,
      6045,
      11
    ],
    "start_token": 1138,
    "end_token": 1159,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3292,
      11845,
      284,
      5004,
      640,
      2837,
      329,
      1366,
      22236
    ],
    "label": "ml_signal",
    "reason": "Use of trade calendar to determine time range for data extraction"
  },
  {
    "line": 313,
    "text": "        level_infra: LevelInfrastructure = None,",
    "annotation": "\ud83e\udde0 ML Signal: Extraction of features over a specified time range",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1241,
      62,
      10745,
      430,
      25,
      5684,
      18943,
      6410,
      796,
      6045,
      11
    ],
    "start_token": 1159,
    "end_token": 1177,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      7861,
      286,
      3033,
      625,
      257,
      7368,
      640,
      2837
    ],
    "label": "ml_signal",
    "reason": "Extraction of features over a specified time range"
  },
  {
    "line": 316,
    "text": "    ):",
    "annotation": "\u2705 Best Practice: Renaming columns for clarity and consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      15179
    ],
    "start_token": 1177,
    "end_token": 1181,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      3723,
      15180,
      329,
      16287,
      290,
      15794
    ],
    "label": "best_practice",
    "reason": "Renaming columns for clarity and consistency"
  },
  {
    "line": 319,
    "text": "        ----------",
    "annotation": "\ud83e\udde0 ML Signal: Grouping data by instrument for individual analysis",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 1181,
    "end_token": 1190,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      1366,
      416,
      8875,
      329,
      1981,
      3781
    ],
    "label": "ml_signal",
    "reason": "Grouping data by instrument for individual analysis"
  },
  {
    "line": 323,
    "text": "            freq of EMA signal, by default \"day\"",
    "annotation": "\u2705 Best Practice: Dropping unnecessary index levels for cleaner data structure",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2030,
      80,
      286,
      412,
      5673,
      6737,
      11,
      416,
      4277,
      366,
      820,
      1
    ],
    "start_token": 1190,
    "end_token": 1213,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      13114,
      6376,
      2974,
      329,
      21723,
      1366,
      4645
    ],
    "label": "best_practice",
    "reason": "Dropping unnecessary index levels for cleaner data structure"
  },
  {
    "line": 323,
    "text": "            freq of EMA signal, by default \"day\"",
    "annotation": "\u2705 Best Practice: Use of super() to call a method from the parent class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2030,
      80,
      286,
      412,
      5673,
      6737,
      11,
      416,
      4277,
      366,
      820,
      1
    ],
    "start_token": 1213,
    "end_token": 1236,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      257,
      2446,
      422,
      262,
      2560,
      1398
    ],
    "label": "best_practice",
    "reason": "Use of super() to call a method from the parent class"
  },
  {
    "line": 325,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method that resets or changes internal state, which could be relevant for ML models tracking state changes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1236,
    "end_token": 1244,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      326,
      581,
      1039,
      393,
      2458,
      5387,
      1181,
      11,
      543,
      714,
      307,
      5981,
      329,
      10373,
      4981,
      9646,
      1181,
      2458
    ],
    "label": "ml_signal",
    "reason": "Method that resets or changes internal state, which could be relevant for ML models tracking state changes"
  },
  {
    "line": 331,
    "text": "        elif isinstance(instruments, List):",
    "annotation": "\u2705 Best Practice: Use of super() to call the parent class method ensures proper initialization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      318,
      39098,
      7,
      259,
      2536,
      2886,
      11,
      7343,
      2599
    ],
    "start_token": 1244,
    "end_token": 1262,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      2446,
      19047,
      1774,
      37588
    ],
    "label": "best_practice",
    "reason": "Use of super() to call the parent class method ensures proper initialization"
  },
  {
    "line": 334,
    "text": "        super(SBBStrategyEMA, self).__init__(",
    "annotation": "\u2705 Best Practice: Initializing trade_amount as an empty dictionary",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      7,
      50,
      15199,
      13290,
      4338,
      27630,
      11,
      2116,
      737,
      834,
      15003,
      834,
      7
    ],
    "start_token": 1262,
    "end_token": 1283,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      3292,
      62,
      17287,
      355,
      281,
      6565,
      22155
    ],
    "label": "best_practice",
    "reason": "Initializing trade_amount as an empty dictionary"
  },
  {
    "line": 336,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over decisions to populate trade_amount",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1283,
    "end_token": 1291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      5370,
      284,
      48040,
      3292,
      62,
      17287
    ],
    "label": "ml_signal",
    "reason": "Iterating over decisions to populate trade_amount"
  },
  {
    "line": 338,
    "text": "    def _reset_signal(self):",
    "annotation": "\ud83e\udde0 ML Signal: Mapping stock_id to amount in trade_amount",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      42503,
      62,
      12683,
      282,
      7,
      944,
      2599
    ],
    "start_token": 1291,
    "end_token": 1303,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      4283,
      62,
      312,
      284,
      2033,
      287,
      3292,
      62,
      17287
    ],
    "label": "ml_signal",
    "reason": "Mapping stock_id to amount in trade_amount"
  },
  {
    "line": 337,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of trade calendar to get trade step and length",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1303,
    "end_token": 1303,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3292,
      11845,
      284,
      651,
      3292,
      2239,
      290,
      4129
    ],
    "label": "ml_signal",
    "reason": "Usage of trade calendar to get trade step and length"
  },
  {
    "line": 342,
    "text": "        _, signal_end_time = self.trade_calendar.get_step_time(trade_step=trade_len - 1, shift=1)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for negative trade amounts if not properly validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      11,
      6737,
      62,
      437,
      62,
      2435,
      796,
      2116,
      13,
      25351,
      62,
      9948,
      9239,
      13,
      1136,
      62,
      9662,
      62,
      2435,
      7,
      25351,
      62,
      9662,
      28,
      25351,
      62,
      11925,
      532,
      352,
      11,
      6482,
      28,
      16,
      8
    ],
    "start_token": 1303,
    "end_token": 1345,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      4633,
      3292,
      6867,
      611,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for negative trade amounts if not properly validated"
  },
  {
    "line": 344,
    "text": "            self.instruments, fields, start_time=signal_start_time, end_time=signal_end_time, freq=self.freq",
    "annotation": "\ud83e\udde0 ML Signal: Usage of trade calendar to get step time",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      259,
      2536,
      2886,
      11,
      7032,
      11,
      923,
      62,
      2435,
      28,
      12683,
      282,
      62,
      9688,
      62,
      2435,
      11,
      886,
      62,
      2435,
      28,
      12683,
      282,
      62,
      437,
      62,
      2435,
      11,
      2030,
      80,
      28,
      944,
      13,
      19503,
      80
    ],
    "start_token": 1345,
    "end_token": 1393,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3292,
      11845,
      284,
      651,
      2239,
      640
    ],
    "label": "ml_signal",
    "reason": "Usage of trade calendar to get step time"
  },
  {
    "line": 349,
    "text": "        if not signal_df.empty:",
    "annotation": "\ud83e\udde0 ML Signal: Checking if stock is tradable within a time range",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      6737,
      62,
      7568,
      13,
      28920,
      25
    ],
    "start_token": 1393,
    "end_token": 1408,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      4283,
      318,
      2083,
      540,
      1626,
      257,
      640,
      2837
    ],
    "label": "ml_signal",
    "reason": "Checking if stock is tradable within a time range"
  },
  {
    "line": 356,
    "text": "        - After reset the trade calendar, the signal will be changed",
    "annotation": "\ud83e\udde0 ML Signal: Resampling time series data for signal processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      2293,
      13259,
      262,
      3292,
      11845,
      11,
      262,
      6737,
      481,
      307,
      3421
    ],
    "start_token": 1408,
    "end_token": 1427,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1874,
      321,
      11347,
      640,
      2168,
      1366,
      329,
      6737,
      7587
    ],
    "label": "ml_signal",
    "reason": "Resampling time series data for signal processing"
  },
  {
    "line": 361,
    "text": "    def _pred_price_trend(self, stock_id, pred_start_time=None, pred_end_time=None):",
    "annotation": "\ud83e\udde0 ML Signal: Handling missing or NaN signal samples",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      28764,
      62,
      20888,
      62,
      83,
      10920,
      7,
      944,
      11,
      4283,
      62,
      312,
      11,
      2747,
      62,
      9688,
      62,
      2435,
      28,
      14202,
      11,
      2747,
      62,
      437,
      62,
      2435,
      28,
      14202,
      2599
    ],
    "start_token": 1427,
    "end_token": 1461,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      4814,
      393,
      11013,
      45,
      6737,
      8405
    ],
    "label": "ml_signal",
    "reason": "Handling missing or NaN signal samples"
  },
  {
    "line": 374,
    "text": "                return self.TREND_MID",
    "annotation": "\ud83e\udde0 ML Signal: Calculating kappa for trade amount adjustment",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      5446,
      10619,
      62,
      44,
      2389
    ],
    "start_token": 1461,
    "end_token": 1484,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      479,
      20975,
      329,
      3292,
      2033,
      15068
    ],
    "label": "ml_signal",
    "reason": "Calculating kappa for trade amount adjustment"
  },
  {
    "line": 381,
    "text": "",
    "annotation": "\u2705 Best Practice: Rounding order amount by trade unit for consistency",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1484,
    "end_token": 1484,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      371,
      9969,
      1502,
      2033,
      416,
      3292,
      4326,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Rounding order amount by trade unit for consistency"
  },
  {
    "line": 382,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for incorrect order amounts if not properly validated",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1484,
    "end_token": 1484,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11491,
      1502,
      6867,
      611,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for incorrect order amounts if not properly validated"
  },
  {
    "line": 391,
    "text": "        eta: float = 2.5e-6,",
    "annotation": "\u2705 Best Practice: Creating order object for each valid trade decision",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2123,
      64,
      25,
      12178,
      796,
      362,
      13,
      20,
      68,
      12,
      21,
      11
    ],
    "start_token": 1484,
    "end_token": 1503,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30481,
      1502,
      2134,
      329,
      1123,
      4938,
      3292,
      2551
    ],
    "label": "best_practice",
    "reason": "Creating order object for each valid trade decision"
  },
  {
    "line": 401,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Returning a TradeDecisionWO object for encapsulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1503,
    "end_token": 1511,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      9601,
      10707,
      1166,
      54,
      46,
      2134,
      329,
      32652,
      1741
    ],
    "label": "best_practice",
    "reason": "Returning a TradeDecisionWO object for encapsulation"
  },
  {
    "line": 392,
    "text": "        window_size: int = 20,",
    "annotation": "\u2705 Best Practice: Class should inherit from a base class to ensure consistent interface and behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4324,
      62,
      7857,
      25,
      493,
      796,
      1160,
      11
    ],
    "start_token": 1511,
    "end_token": 1526,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      257,
      2779,
      1398,
      284,
      4155,
      6414,
      7071,
      290,
      4069
    ],
    "label": "best_practice",
    "reason": "Class should inherit from a base class to ensure consistent interface and behavior"
  },
  {
    "line": 416,
    "text": "        if isinstance(instruments, str):",
    "annotation": "\u2705 Best Practice: Call to super() ensures proper initialization of the base class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      259,
      2536,
      2886,
      11,
      965,
      2599
    ],
    "start_token": 1526,
    "end_token": 1543,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4889,
      284,
      2208,
      3419,
      19047,
      1774,
      37588,
      286,
      262,
      2779,
      1398
    ],
    "label": "best_practice",
    "reason": "Call to super() ensures proper initialization of the base class"
  },
  {
    "line": 418,
    "text": "        self.freq = freq",
    "annotation": "\ud83e\udde0 ML Signal: Usage of parameters to set instance variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      19503,
      80,
      796,
      2030,
      80
    ],
    "start_token": 1543,
    "end_token": 1557,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10007,
      284,
      900,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Usage of parameters to set instance variables"
  },
  {
    "line": 420,
    "text": "            outer_trade_decision, level_infra, common_infra, trade_exchange=trade_exchange, **kwargs",
    "annotation": "\ud83e\udde0 ML Signal: Usage of parameters to set instance variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      11,
      1241,
      62,
      10745,
      430,
      11,
      2219,
      62,
      10745,
      430,
      11,
      3292,
      62,
      1069,
      3803,
      28,
      25351,
      62,
      1069,
      3803,
      11,
      12429,
      46265,
      22046
    ],
    "start_token": 1557,
    "end_token": 1598,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10007,
      284,
      900,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Usage of parameters to set instance variables"
  },
  {
    "line": 422,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of parameters to set instance variables",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1598,
    "end_token": 1598,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10007,
      284,
      900,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Usage of parameters to set instance variables"
  },
  {
    "line": 425,
    "text": "        fields = [",
    "annotation": "\ud83e\udde0 ML Signal: Usage of parameters to set instance variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      796,
      685
    ],
    "start_token": 1598,
    "end_token": 1608,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10007,
      284,
      900,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Usage of parameters to set instance variables"
  },
  {
    "line": 426,
    "text": "            f\"Power(Sum(Power(Log($close/Ref($close, 1)), 2), {self.window_size})/{self.window_size - 1}-Power(Sum(Log($close/Ref($close, 1)), {self.window_size}), 2)/({self.window_size}*{self.window_size - 1}), 0.5)\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `self.common_infra` is not properly initialized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      13434,
      7,
      13065,
      7,
      13434,
      7,
      11187,
      16763,
      19836,
      14,
      8134,
      16763,
      19836,
      11,
      352,
      36911,
      362,
      828,
      1391,
      944,
      13,
      17497,
      62,
      7857,
      92,
      20679,
      90,
      944,
      13,
      17497,
      62,
      7857,
      532,
      352,
      92,
      12,
      13434,
      7,
      13065,
      7,
      11187,
      16763,
      19836,
      14,
      8134,
      16763,
      19836,
      11,
      352,
      36911,
      1391,
      944,
      13,
      17497,
      62,
      7857,
      92,
      828,
      362,
      20679,
      15090,
      944,
      13,
      17497,
      62,
      7857,
      92,
      9,
      90,
      944,
      13,
      17497,
      62,
      7857,
      532,
      352,
      92,
      828,
      657,
      13,
      20,
      16725
    ],
    "start_token": 1608,
    "end_token": 1703,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      944,
      13,
      11321,
      62,
      10745,
      430,
      63,
      318,
      407,
      6105,
      23224
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `self.common_infra` is not properly initialized"
  },
  {
    "line": 428,
    "text": "        signal_start_time, _ = self.trade_calendar.get_step_time(trade_step=0, shift=1)",
    "annotation": "\ud83e\udde0 ML Signal: Use of external data source for feature extraction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6737,
      62,
      9688,
      62,
      2435,
      11,
      4808,
      796,
      2116,
      13,
      25351,
      62,
      9948,
      9239,
      13,
      1136,
      62,
      9662,
      62,
      2435,
      7,
      25351,
      62,
      9662,
      28,
      15,
      11,
      6482,
      28,
      16,
      8
    ],
    "start_token": 1703,
    "end_token": 1741,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      7097,
      1366,
      2723,
      329,
      3895,
      22236
    ],
    "label": "ml_signal",
    "reason": "Use of external data source for feature extraction"
  },
  {
    "line": 432,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Data transformation and reshaping",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1741,
    "end_token": 1749,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      13389,
      290,
      27179,
      9269
    ],
    "label": "ml_signal",
    "reason": "Data transformation and reshaping"
  },
  {
    "line": 433,
    "text": "        signal_df.columns = [\"volatility\"]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of parameters to set instance variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6737,
      62,
      7568,
      13,
      28665,
      82,
      796,
      14631,
      10396,
      18486,
      8973
    ],
    "start_token": 1749,
    "end_token": 1767,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10007,
      284,
      900,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Usage of parameters to set instance variables"
  },
  {
    "line": 429,
    "text": "        _, signal_end_time = self.trade_calendar.get_step_time(trade_step=trade_len - 1, shift=1)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of time-based trading steps can indicate temporal patterns in trading behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      11,
      6737,
      62,
      437,
      62,
      2435,
      796,
      2116,
      13,
      25351,
      62,
      9948,
      9239,
      13,
      1136,
      62,
      9662,
      62,
      2435,
      7,
      25351,
      62,
      9662,
      28,
      25351,
      62,
      11925,
      532,
      352,
      11,
      6482,
      28,
      16,
      8
    ],
    "start_token": 1767,
    "end_token": 1809,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      640,
      12,
      3106,
      7313,
      4831,
      460,
      7603,
      21964,
      7572,
      287,
      7313,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of time-based trading steps can indicate temporal patterns in trading behavior."
  },
  {
    "line": 432,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on time can be used to infer trading strategies.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1809,
    "end_token": 1817,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      640,
      460,
      307,
      973,
      284,
      13249,
      7313,
      10064,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on time can be used to infer trading strategies."
  },
  {
    "line": 433,
    "text": "        signal_df.columns = [\"volatility\"]",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over stock volumes can indicate trading volume patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6737,
      62,
      7568,
      13,
      28665,
      82,
      796,
      14631,
      10396,
      18486,
      8973
    ],
    "start_token": 1817,
    "end_token": 1835,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      4283,
      15343,
      460,
      7603,
      7313,
      6115,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over stock volumes can indicate trading volume patterns."
  },
  {
    "line": 433,
    "text": "        signal_df.columns = [\"volatility\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `self.common_infra` or its methods are not properly validated.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6737,
      62,
      7568,
      13,
      28665,
      82,
      796,
      14631,
      10396,
      18486,
      8973
    ],
    "start_token": 1835,
    "end_token": 1853,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      944,
      13,
      11321,
      62,
      10745,
      430,
      63,
      393,
      663,
      5050,
      389,
      407,
      6105,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `self.common_infra` or its methods are not properly validated."
  },
  {
    "line": 444,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Returning a well-defined object improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1853,
    "end_token": 1861,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      880,
      12,
      23211,
      2134,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a well-defined object improves code readability and maintainability."
  },
  {
    "line": 473,
    "text": "        pred_start_time, pred_end_time = self.trade_calendar.get_step_time(trade_step, shift=1)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `file` is user-controlled and not validated, leading to file inclusion vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2747,
      62,
      9688,
      62,
      2435,
      11,
      2747,
      62,
      437,
      62,
      2435,
      796,
      2116,
      13,
      25351,
      62,
      9948,
      9239,
      13,
      1136,
      62,
      9662,
      62,
      2435,
      7,
      25351,
      62,
      9662,
      11,
      6482,
      28,
      16,
      8
    ],
    "start_token": 1861,
    "end_token": 1901,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      7753,
      63,
      318,
      2836,
      12,
      14401,
      290,
      407,
      31031,
      11,
      3756,
      284,
      2393,
      14900,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `file` is user-controlled and not validated, leading to file inclusion vulnerabilities."
  },
  {
    "line": 477,
    "text": "            if not self.trade_exchange.is_stock_tradable(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using `get_io_object` without validation can lead to file handling vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      2116,
      13,
      25351,
      62,
      1069,
      3803,
      13,
      271,
      62,
      13578,
      62,
      2213,
      324,
      540,
      7
    ],
    "start_token": 1901,
    "end_token": 1929,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4600,
      1136,
      62,
      952,
      62,
      15252,
      63,
      1231,
      21201,
      460,
      1085,
      284,
      2393,
      9041,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using `get_io_object` without validation can lead to file handling vulnerabilities."
  },
  {
    "line": 479,
    "text": "            ):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Reading CSV files without specifying `engine` can lead to security issues if the file is malformed.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15179
    ],
    "start_token": 1929,
    "end_token": 1941,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11725,
      44189,
      3696,
      1231,
      31577,
      4600,
      18392,
      63,
      460,
      1085,
      284,
      2324,
      2428,
      611,
      262,
      2393,
      318,
      6428,
      12214,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Reading CSV files without specifying `engine` can lead to security issues if the file is malformed."
  },
  {
    "line": 481,
    "text": "            _order_amount = None",
    "annotation": "\u2705 Best Practice: Converting strings to Timestamps ensures consistent datetime operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      2875,
      62,
      17287,
      796,
      6045
    ],
    "start_token": 1941,
    "end_token": 1958,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      13042,
      284,
      5045,
      395,
      9430,
      19047,
      6414,
      4818,
      8079,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Converting strings to Timestamps ensures consistent datetime operations."
  },
  {
    "line": 483,
    "text": "",
    "annotation": "\u2705 Best Practice: Setting a multi-level index improves data manipulation and querying efficiency.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1958,
    "end_token": 1958,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      257,
      5021,
      12,
      5715,
      6376,
      19575,
      1366,
      17512,
      290,
      42517,
      1112,
      9332,
      13
    ],
    "label": "best_practice",
    "reason": "Setting a multi-level index improves data manipulation and querying efficiency."
  },
  {
    "line": 483,
    "text": "",
    "annotation": "\u2705 Best Practice: Sorting the index can improve performance for subsequent operations that rely on index order.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1958,
    "end_token": 1958,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      262,
      6376,
      460,
      2987,
      2854,
      329,
      8840,
      4560,
      326,
      8814,
      319,
      6376,
      1502,
      13
    ],
    "label": "best_practice",
    "reason": "Sorting the index can improve performance for subsequent operations that rely on index order."
  },
  {
    "line": 489,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing `trade_range` indicates a pattern of using time ranges for trading strategies.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1958,
    "end_token": 1958,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      4600,
      25351,
      62,
      9521,
      63,
      9217,
      257,
      3912,
      286,
      1262,
      640,
      16069,
      329,
      7313,
      10064,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing `trade_range` indicates a pattern of using time ranges for trading strategies."
  },
  {
    "line": 489,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a helper class to manage orders",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1958,
    "end_token": 1958,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      31904,
      1398,
      284,
      6687,
      6266
    ],
    "label": "ml_signal",
    "reason": "Usage of a helper class to manage orders"
  },
  {
    "line": 491,
    "text": "                # no signal, TWAP",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a trade calendar to get the current step time",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      645,
      6737,
      11,
      17306,
      2969
    ],
    "start_token": 1958,
    "end_token": 1979,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      3292,
      11845,
      284,
      651,
      262,
      1459,
      2239,
      640
    ],
    "label": "ml_signal",
    "reason": "Accessing a trade calendar to get the current step time"
  },
  {
    "line": 494,
    "text": "                )",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a DataFrame using a specific index",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1979,
    "end_token": 1995,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      6060,
      19778,
      1262,
      257,
      2176,
      6376
    ],
    "label": "ml_signal",
    "reason": "Accessing a DataFrame using a specific index"
  },
  {
    "line": 497,
    "text": "                    _order_amount = self.trade_amount[order.stock_id] / (trade_len - trade_step)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Handling of KeyError without logging or additional context",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      2875,
      62,
      17287,
      796,
      2116,
      13,
      25351,
      62,
      17287,
      58,
      2875,
      13,
      13578,
      62,
      312,
      60,
      1220,
      357,
      25351,
      62,
      11925,
      532,
      3292,
      62,
      9662,
      8
    ],
    "start_token": 1995,
    "end_token": 2041,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      49500,
      286,
      7383,
      12331,
      1231,
      18931,
      393,
      3224,
      4732
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Handling of KeyError without logging or additional context"
  },
  {
    "line": 498,
    "text": "                else:",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame rows to create orders",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2041,
    "end_token": 2058,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15274,
      284,
      2251,
      6266
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame rows to create orders"
  },
  {
    "line": 505,
    "text": "                        (trade_unit_cnt + trade_len - trade_step - 1) // (trade_len - trade_step) * _amount_trade_unit",
    "annotation": "\ud83e\udde0 ML Signal: Creating an order with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      357,
      25351,
      62,
      20850,
      62,
      66,
      429,
      1343,
      3292,
      62,
      11925,
      532,
      3292,
      62,
      9662,
      532,
      352,
      8,
      3373,
      357,
      25351,
      62,
      11925,
      532,
      3292,
      62,
      9662,
      8,
      1635,
      4808,
      17287,
      62,
      25351,
      62,
      20850
    ],
    "start_token": 2058,
    "end_token": 2116,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      281,
      1502,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Creating an order with specific parameters"
  },
  {
    "line": 505,
    "text": "                        (trade_unit_cnt + trade_len - trade_step - 1) // (trade_len - trade_step) * _amount_trade_unit",
    "annotation": "\u2705 Best Practice: Using a class method to parse direction ensures consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      357,
      25351,
      62,
      20850,
      62,
      66,
      429,
      1343,
      3292,
      62,
      11925,
      532,
      3292,
      62,
      9662,
      532,
      352,
      8,
      3373,
      357,
      25351,
      62,
      11925,
      532,
      3292,
      62,
      9662,
      8,
      1635,
      4808,
      17287,
      62,
      25351,
      62,
      20850
    ],
    "start_token": 2116,
    "end_token": 2174,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      1398,
      2446,
      284,
      21136,
      4571,
      19047,
      15794
    ],
    "label": "best_practice",
    "reason": "Using a class method to parse direction ensures consistency"
  },
  {
    "line": 505,
    "text": "                        (trade_unit_cnt + trade_len - trade_step - 1) // (trade_len - trade_step) * _amount_trade_unit",
    "annotation": "\ud83e\udde0 ML Signal: Returning a trade decision object with a list of orders",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      357,
      25351,
      62,
      20850,
      62,
      66,
      429,
      1343,
      3292,
      62,
      11925,
      532,
      3292,
      62,
      9662,
      532,
      352,
      8,
      3373,
      357,
      25351,
      62,
      11925,
      532,
      3292,
      62,
      9662,
      8,
      1635,
      4808,
      17287,
      62,
      25351,
      62,
      20850
    ],
    "start_token": 2174,
    "end_token": 2232,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      3292,
      2551,
      2134,
      351,
      257,
      1351,
      286,
      6266
    ],
    "label": "ml_signal",
    "reason": "Returning a trade decision object with a list of orders"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of logging instead of print statements for better control over logging levels and outputs,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 2427, 286, 3601, 6299, 329, 1365, 1630, 625, 18931, 2974, 290, 23862]",1.0,10,best_practice,16,Use of logging instead of print statements for better control over logging levels and outputs,,0,from qlib.backtest.position import Position,"[6738, 10662, 8019, 13, 1891, 9288, 13, 9150, 1330, 23158]"
üß† ML Signal: Inheritance from BaseStrategy and ABC indicates a design pattern for strategy implementation,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 7308, 13290, 4338, 290, 9738, 9217, 257, 1486, 3912, 329, 4811, 7822]",0.5,30,ml_signal,20,Inheritance from BaseStrategy and ABC indicates a design pattern for strategy implementation,,10,"from qlib.utils import get_pre_trading_date, load_dataset","[6738, 10662, 8019, 13, 26791, 1330, 651, 62, 3866, 62, 2213, 4980, 62, 4475, 11, 3440, 62, 19608, 292, 316]"
‚úÖ Best Practice: Call to superclass's __init__ ensures proper initialization of inherited attributes.,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 338, 11593, 15003, 834, 19047, 1774, 37588, 286, 19552, 12608, 13]",1.0,66,best_practice,48,Call to superclass's __init__ ensures proper initialization of inherited attributes.,,30,"            - If `trade_exchange` is None, self.trade_exchange will be set with common_infra","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 1002, 4600, 25351, 62, 1069, 3803, 63, 318, 6045, 11, 2116, 13, 25351, 62, 1069, 3803, 481, 307, 900, 351, 2219, 62, 10745, 430]"
üß† ML Signal: Usage of risk_degree parameter could indicate risk management behavior in trading strategies.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2526, 62, 16863, 11507, 714, 7603, 2526, 4542, 4069, 287, 7313, 10064, 13]",0.5,81,ml_signal,50,Usage of risk_degree parameter could indicate risk management behavior in trading strategies.,,66,            - For example:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 1114, 1672, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential misuse of deprecated parameters model and dataset.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 39224, 10007, 2746, 290, 27039, 13]",0.5,117,sast_risk,52,Potential misuse of deprecated parameters model and dataset.,Low,81,"                - In minutely execution, the daily exchange is not usable, only the minutely exchange is recommended.","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 554, 5664, 306, 9706, 11, 262, 4445, 5163, 318, 407, 24284, 11, 691, 262, 5664, 306, 5163, 318, 7151, 13]"
‚ö†Ô∏è SAST Risk (Low): Use of warnings.warn for deprecation may not be noticed by all users.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 14601, 13, 40539, 329, 1207, 8344, 341, 743, 407, 307, 6810, 416, 477, 2985, 13]",0.5,125,sast_risk,54,Use of warnings.warn for deprecation may not be noticed by all users.,Low,117,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Transition from model and dataset to signal could indicate evolving API usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 40658, 422, 2746, 290, 27039, 284, 6737, 714, 7603, 21568, 7824, 8748, 7572, 13]",0.5,172,ml_signal,55,Transition from model and dataset to signal could indicate evolving API usage patterns.,,125,"        super().__init__(level_infra=level_infra, common_infra=common_infra, trade_exchange=trade_exchange, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 5715, 62, 10745, 430, 28, 5715, 62, 10745, 430, 11, 2219, 62, 10745, 430, 28, 11321, 62, 10745, 430, 11, 3292, 62, 1069, 3803, 28, 25351, 62, 1069, 3803, 11, 12429, 46265, 22046, 8]"
üß† ML Signal: Creation of signal from various data types could indicate flexible data handling in ML workflows.,"[8582, 100, 254, 10373, 26484, 25, 21582, 286, 6737, 422, 2972, 1366, 3858, 714, 7603, 12846, 1366, 9041, 287, 10373, 670, 44041, 13]",0.5,194,ml_signal,59,Creation of signal from various data types could indicate flexible data handling in ML workflows.,,172,        # This is trying to be compatible with previous version of qlib task config,"[220, 220, 220, 220, 220, 220, 220, 1303, 770, 318, 2111, 284, 307, 11670, 351, 2180, 2196, 286, 10662, 8019, 4876, 4566]"
‚úÖ Best Practice: Include a docstring to describe the function's purpose and behavior,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 4069]",1.0,241,best_practice,55,Include a docstring to describe the function's purpose and behavior,,194,"        super().__init__(level_infra=level_infra, common_infra=common_infra, trade_exchange=trade_exchange, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 7, 5715, 62, 10745, 430, 28, 5715, 62, 10745, 430, 11, 2219, 62, 10745, 430, 28, 11321, 62, 10745, 430, 11, 3292, 62, 1069, 3803, 28, 25351, 62, 1069, 3803, 11, 12429, 46265, 22046, 8]"
"üß† ML Signal: Accessing a class attribute, which could be used to understand attribute usage patterns","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 1398, 11688, 11, 543, 714, 307, 973, 284, 1833, 11688, 8748, 7572]",1.0,259,ml_signal,60,"Accessing a class attribute, which could be used to understand attribute usage patterns",,241,        if model is not None and dataset is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 2746, 318, 407, 6045, 290, 27039, 318, 407, 6045, 25]"
"‚úÖ Best Practice: Class definition should follow PEP 8 naming conventions, which this does.","[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 1061, 350, 8905, 807, 19264, 21396, 11, 543, 428, 857, 13]",0.5,277,best_practice,60,"Class definition should follow PEP 8 naming conventions, which this does.",,259,        if model is not None and dataset is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 2746, 318, 407, 6045, 290, 27039, 318, 407, 6045, 25]"
‚úÖ Best Practice: Call to superclass initializer ensures proper initialization of inherited attributes.,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 4238, 7509, 19047, 1774, 37588, 286, 19552, 12608, 13]",0.5,298,best_practice,101,Call to superclass initializer ensures proper initialization of inherited attributes.,,277,"            dropout method_sell, random/bottom.","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4268, 448, 2446, 62, 7255, 11, 4738, 14, 22487, 13]"
üß† ML Signal: Usage of parameters to configure trading strategy behavior.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10007, 284, 17425, 7313, 4811, 4069, 13]",0.5,319,ml_signal,103,Usage of parameters to configure trading strategy behavior.,,298,"            dropout method_buy, random/top.","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4268, 448, 2446, 62, 17846, 11, 4738, 14, 4852, 13]"
üß† ML Signal: Usage of parameters to configure trading strategy behavior.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10007, 284, 17425, 7313, 4811, 4069, 13]",0.5,333,ml_signal,105,Usage of parameters to configure trading strategy behavior.,,319,            minimum holding days,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5288, 4769, 1528]"
üß† ML Signal: Usage of parameters to configure trading strategy behavior.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10007, 284, 17425, 7313, 4811, 4069, 13]",0.5,347,ml_signal,107,Usage of parameters to configure trading strategy behavior.,,333,        only_tradable : bool,"[220, 220, 220, 220, 220, 220, 220, 691, 62, 2213, 324, 540, 1058, 20512]"
üß† ML Signal: Usage of parameters to configure trading strategy behavior.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10007, 284, 17425, 7313, 4811, 4069, 13]",0.5,347,ml_signal,109,Usage of parameters to configure trading strategy behavior.,,347,,[]
üß† ML Signal: Usage of parameters to configure trading strategy behavior.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10007, 284, 17425, 7313, 4811, 4069, 13]",0.5,347,ml_signal,111,Usage of parameters to configure trading strategy behavior.,,347,,[]
üß† ML Signal: Usage of parameters to configure trading strategy behavior.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10007, 284, 17425, 7313, 4811, 4069, 13]",0.5,347,ml_signal,113,Usage of parameters to configure trading strategy behavior.,,347,,[]
üß† ML Signal: Usage of parameters to configure trading strategy behavior.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10007, 284, 17425, 7313, 4811, 4069, 13]",0.5,347,ml_signal,115,Usage of parameters to configure trading strategy behavior.,,347,,[]
üß† ML Signal: Checking if pred_score is a DataFrame suggests dynamic data handling,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 2747, 62, 26675, 318, 257, 6060, 19778, 5644, 8925, 1366, 9041]",0.5,360,ml_signal,114,Checking if pred_score is a DataFrame suggests dynamic data handling,,347,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Accessing the first column of a DataFrame is a common pattern,"[26486, 227, 6705, 19939, 25, 8798, 278, 262, 717, 5721, 286, 257, 6060, 19778, 318, 257, 2219, 3912]",1.0,391,best_practice,116,Accessing the first column of a DataFrame is a common pattern,,360,                strategy will make buy sell decision without checking the tradable state of the stock.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4811, 481, 787, 2822, 3677, 2551, 1231, 10627, 262, 2083, 540, 1181, 286, 262, 4283, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential NoneType dereference if pred_score is None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 390, 35790, 611, 2747, 62, 26675, 318, 6045]",0.5,416,sast_risk,118,Potential NoneType dereference if pred_score is None,Low,391,            if forbid all trades when limit_up or limit_down reached.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 33277, 477, 17674, 618, 4179, 62, 929, 393, 4179, 62, 2902, 4251, 13]"
üß† ML Signal: Conditional logic based on self.only_tradable indicates feature flag usage,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2116, 13, 8807, 62, 2213, 324, 540, 9217, 3895, 6056, 8748]",0.5,416,ml_signal,121,Conditional logic based on self.only_tradable indicates feature flag usage,,416,,[]
‚úÖ Best Practice: Function parameters should be documented for clarity.,"[26486, 227, 6705, 19939, 25, 15553, 10007, 815, 307, 12395, 329, 16287, 13]",0.5,416,best_practice,119,Function parameters should be documented for clarity.,,416,,[]
‚úÖ Best Practice: Initialize variables at the start of the function for clarity.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 379, 262, 923, 286, 262, 2163, 329, 16287, 13]",0.5,416,best_practice,121,Initialize variables at the start of the function for clarity.,,416,,[]
üß† ML Signal: Usage of conditional expressions to control iteration order.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 26340, 14700, 284, 1630, 24415, 1502, 13]",0.5,439,ml_signal,123,Usage of conditional expressions to control iteration order.,,416,"                limit down, though allowed in reality.","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4179, 866, 11, 996, 3142, 287, 3950, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential misuse of 'self' if this function is not a method of a class.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 29169, 286, 705, 944, 6, 611, 428, 2163, 318, 407, 257, 2446, 286, 257, 1398, 13]",0.5,439,sast_risk,126,Potential misuse of 'self' if this function is not a method of a class.,Low,439,,[]
"‚ö†Ô∏è SAST Risk (Low): 'stock_id', 'trade_start_time', and 'trade_end_time' are used but not defined in this scope.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 705, 13578, 62, 312, 3256, 705, 25351, 62, 9688, 62, 2435, 3256, 290, 705, 25351, 62, 437, 62, 2435, 6, 389, 973, 475, 407, 5447, 287, 428, 8354, 13]",0.5,447,sast_risk,128,"'stock_id', 'trade_start_time', and 'trade_end_time' are used but not defined in this scope.",Low,439,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Pattern of breaking a loop after a condition is met.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 7163, 257, 9052, 706, 257, 4006, 318, 1138, 13]",0.5,463,ml_signal,133,Pattern of breaking a loop after a condition is met.,,447,        self.method_buy = method_buy,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 24396, 62, 17846, 796, 2446, 62, 17846]"
üß† ML Signal: Conditional return based on input parameter.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 1441, 1912, 319, 5128, 11507, 13]",0.5,481,ml_signal,134,Conditional return based on input parameter.,,463,        self.hold_thresh = hold_thresh,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2946, 62, 400, 3447, 796, 1745, 62, 400, 3447]"
‚úÖ Best Practice: Function name 'get_last_n' clearly indicates its purpose,"[26486, 227, 6705, 19939, 25, 15553, 1438, 705, 1136, 62, 12957, 62, 77, 6, 4084, 9217, 663, 4007]",0.5,497,best_practice,131,Function name 'get_last_n' clearly indicates its purpose,,481,        self.n_drop = n_drop,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 77, 62, 14781, 796, 299, 62, 14781]"
üß† ML Signal: Use of a helper function 'get_first_n' suggests code reuse and modularity,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 31904, 2163, 705, 1136, 62, 11085, 62, 77, 6, 5644, 2438, 32349, 290, 26507, 414]",0.5,513,ml_signal,133,Use of a helper function 'get_first_n' suggests code reuse and modularity,,497,        self.method_buy = method_buy,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 24396, 62, 17846, 796, 2446, 62, 17846]"
‚úÖ Best Practice: Use of keyword argument 'reverse=True' improves code readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 21179, 4578, 705, 50188, 28, 17821, 6, 19575, 2438, 1100, 1799]",0.5,531,best_practice,134,Use of keyword argument 'reverse=True' improves code readability,,513,        self.hold_thresh = hold_thresh,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2946, 62, 400, 3447, 796, 1745, 62, 400, 3447]"
‚úÖ Best Practice: Function name should be descriptive of its action,"[26486, 227, 6705, 19939, 25, 15553, 1438, 815, 307, 35644, 286, 663, 2223]",0.5,547,best_practice,133,Function name should be descriptive of its action,,531,        self.method_buy = method_buy,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 24396, 62, 17846, 796, 2446, 62, 17846]"
‚úÖ Best Practice: List comprehension for concise filtering,"[26486, 227, 6705, 19939, 25, 7343, 35915, 329, 35327, 25431]",0.5,565,best_practice,134,List comprehension for concise filtering,,547,        self.hold_thresh = hold_thresh,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2946, 62, 400, 3447, 796, 1745, 62, 400, 3447]"
"‚ö†Ô∏è SAST Risk (Low): Potential use of undefined variables (trade_start_time, trade_end_time)","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 779, 286, 28721, 9633, 357, 25351, 62, 9688, 62, 2435, 11, 3292, 62, 437, 62, 2435, 8]",0.5,601,sast_risk,139,"Potential use of undefined variables (trade_start_time, trade_end_time)",Low,565,"        # get the number of trading step finished, trade_step can be [0, 1, 2, ..., trade_len - 1]","[220, 220, 220, 220, 220, 220, 220, 1303, 651, 262, 1271, 286, 7313, 2239, 5201, 11, 3292, 62, 9662, 460, 307, 685, 15, 11, 352, 11, 362, 11, 2644, 11, 3292, 62, 11925, 532, 352, 60]"
‚úÖ Best Practice: Use descriptive function names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 2163, 3891, 329, 1365, 1100, 1799]",1.0,641,best_practice,142,Use descriptive function names for better readability,,601,"        pred_start_time, pred_end_time = self.trade_calendar.get_step_time(trade_step, shift=1)","[220, 220, 220, 220, 220, 220, 220, 2747, 62, 9688, 62, 2435, 11, 2747, 62, 437, 62, 2435, 796, 2116, 13, 25351, 62, 9948, 9239, 13, 1136, 62, 9662, 62, 2435, 7, 25351, 62, 9662, 11, 6482, 28, 16, 8]"
‚úÖ Best Practice: Convert iterable to list to ensure slicing works,"[26486, 227, 6705, 19939, 25, 38240, 11629, 540, 284, 1351, 284, 4155, 49289, 2499]",1.0,672,best_practice,144,Convert iterable to list to ensure slicing works,,641,        # NOTE: the current version of topk dropout strategy can't handle pd.DataFrame(multiple signal),"[220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 262, 1459, 2196, 286, 1353, 74, 4268, 448, 4811, 460, 470, 5412, 279, 67, 13, 6601, 19778, 7, 48101, 6737, 8]"
‚úÖ Best Practice: Consider adding input validation for 'n' to ensure it is a non-negative integer,"[26486, 227, 6705, 19939, 25, 12642, 4375, 5128, 21201, 329, 705, 77, 6, 284, 4155, 340, 318, 257, 1729, 12, 31591, 18253]",1.0,703,best_practice,144,Consider adding input validation for 'n' to ensure it is a non-negative integer,,672,        # NOTE: the current version of topk dropout strategy can't handle pd.DataFrame(multiple signal),"[220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 262, 1459, 2196, 286, 1353, 74, 4268, 448, 4811, 460, 470, 5412, 279, 67, 13, 6601, 19778, 7, 48101, 6737, 8]"
"‚úÖ Best Practice: Converting to list ensures compatibility with any iterable, but may be inefficient for large inputs","[26486, 227, 6705, 19939, 25, 35602, 889, 284, 1351, 19047, 17764, 351, 597, 11629, 540, 11, 475, 743, 307, 30904, 329, 1588, 17311]",0.5,724,best_practice,146,"Converting to list ensures compatibility with any iterable, but may be inefficient for large inputs",,703,"        if isinstance(pred_score, pd.DataFrame):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 28764, 62, 26675, 11, 279, 67, 13, 6601, 19778, 2599]"
üß† ML Signal: Inheritance from BaseSignalStrategy indicates a design pattern for strategy-based algorithms,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 7308, 11712, 282, 13290, 4338, 9217, 257, 1486, 3912, 329, 4811, 12, 3106, 16113]",0.5,750,ml_signal,231,Inheritance from BaseSignalStrategy indicates a design pattern for strategy-based algorithms,,724,        buy = today[: len(sell) + self.topk - len(last)],"[220, 220, 220, 220, 220, 220, 220, 2822, 796, 1909, 58, 25, 18896, 7, 7255, 8, 1343, 2116, 13, 4852, 74, 532, 18896, 7, 12957, 15437]"
‚úÖ Best Practice: Using super() to call the parent class's __init__ method ensures proper initialization.,"[26486, 227, 6705, 19939, 25, 8554, 2208, 3419, 284, 869, 262, 2560, 1398, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 13]",1.0,775,best_practice,250,Using super() to call the parent class's __init__ method ensures proper initialization.,,750,"                    amount=sell_amount,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2033, 28, 7255, 62, 17287, 11]"
‚úÖ Best Practice: Checking if an object is an instance of a type before instantiation is a good practice.,"[26486, 227, 6705, 19939, 25, 39432, 611, 281, 2134, 318, 281, 4554, 286, 257, 2099, 878, 9113, 3920, 318, 257, 922, 3357, 13]",1.0,804,best_practice,252,Checking if an object is an instance of a type before instantiation is a good practice.,,775,"                    end_time=trade_end_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 28, 25351, 62, 437, 62, 2435, 11]"
üß† ML Signal: The use of type checking and instantiation patterns can be used to train models on dynamic object creation.,"[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 2099, 10627, 290, 9113, 3920, 7572, 460, 307, 973, 284, 4512, 4981, 319, 8925, 2134, 6282, 13]",0.5,820,ml_signal,254,The use of type checking and instantiation patterns can be used to train models on dynamic object creation.,,804,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: The use of type checking and instantiation patterns can be used to train models on dynamic object creation.,"[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 2099, 10627, 290, 9113, 3920, 7572, 460, 307, 973, 284, 4512, 4981, 319, 8925, 2134, 6282, 13]",0.5,851,ml_signal,256,The use of type checking and instantiation patterns can be used to train models on dynamic object creation.,,820,                if self.trade_exchange.check_order(sell_order):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 25351, 62, 1069, 3803, 13, 9122, 62, 2875, 7, 7255, 62, 2875, 2599]"
‚úÖ Best Practice: Docstring provides a clear description of the method's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 338, 4007, 290, 10007]",1.0,882,best_practice,256,Docstring provides a clear description of the method's purpose and parameters,,851,                if self.trade_exchange.check_order(sell_order):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 25351, 62, 1069, 3803, 13, 9122, 62, 2875, 7, 7255, 62, 2875, 2599]"
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444]",1.0,912,sast_risk,268,"Method is not implemented, which could lead to runtime errors if called",Low,882,"        # open_cost should be considered in the real trading environment, while the backtest in evaluate.py does not","[220, 220, 220, 220, 220, 220, 220, 1303, 1280, 62, 15805, 815, 307, 3177, 287, 262, 1103, 7313, 2858, 11, 981, 262, 736, 9288, 287, 13446, 13, 9078, 857, 407]"
üß† ML Signal: Usage of trade calendar to determine trade steps and times,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3292, 11845, 284, 5004, 3292, 4831, 290, 1661]",1.0,942,ml_signal,269,Usage of trade calendar to determine trade steps and times,,912,"        # consider it as the aim of demo is to accomplish same strategy as evaluate.py, so comment out this line","[220, 220, 220, 220, 220, 220, 220, 1303, 2074, 340, 355, 262, 4031, 286, 13605, 318, 284, 9989, 976, 4811, 355, 13446, 13, 9078, 11, 523, 2912, 503, 428, 1627]"
üß† ML Signal: Usage of trade calendar to get start and end times for trading,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3292, 11845, 284, 651, 923, 290, 886, 1661, 329, 7313]",1.0,954,ml_signal,271,Usage of trade calendar to get start and end times for trading,,942,        for code in buy:,"[220, 220, 220, 220, 220, 220, 220, 329, 2438, 287, 2822, 25]"
üß† ML Signal: Usage of trade calendar to get prediction times with a shift,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3292, 11845, 284, 651, 17724, 1661, 351, 257, 6482]",1.0,982,ml_signal,273,Usage of trade calendar to get prediction times with a shift,,954,            if not self.trade_exchange.is_stock_tradable(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13, 25351, 62, 1069, 3803, 13, 271, 62, 13578, 62, 2213, 324, 540, 7]"
üß† ML Signal: Obtaining prediction score from a signal object,"[8582, 100, 254, 10373, 26484, 25, 1835, 7339, 17724, 4776, 422, 257, 6737, 2134]",1.0,1007,ml_signal,275,Obtaining prediction score from a signal object,,982,"                start_time=trade_start_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 28, 25351, 62, 9688, 62, 2435, 11]"
üß† ML Signal: Handling of None prediction scores,"[8582, 100, 254, 10373, 26484, 25, 49500, 286, 6045, 17724, 8198]",0.5,1045,ml_signal,277,Handling of None prediction scores,,1007,"                direction=None if self.forbid_all_trade_at_limit else OrderDir.BUY,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4571, 28, 14202, 611, 2116, 13, 1640, 14065, 62, 439, 62, 25351, 62, 265, 62, 32374, 2073, 8284, 35277, 13, 19499, 56, 11]"
‚ö†Ô∏è SAST Risk (Low): Deepcopy can be expensive in terms of performance,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 10766, 30073, 460, 307, 5789, 287, 2846, 286, 2854]",1.0,1059,sast_risk,280,Deepcopy can be expensive in terms of performance,Low,1045,            # buy order,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 2822, 1502]"
"‚ö†Ô∏è SAST Risk (Low): Use of assert for type checking, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 2099, 10627, 11, 543, 460, 307, 10058, 287, 3227]",0.5,1073,sast_risk,280,"Use of assert for type checking, which can be disabled in production",Low,1059,            # buy order,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 2822, 1502]"
üß† ML Signal: Generating target weight position based on prediction score,"[8582, 100, 254, 10373, 26484, 25, 2980, 803, 2496, 3463, 2292, 1912, 319, 17724, 4776]",1.0,1087,ml_signal,280,Generating target weight position based on prediction score,,1073,            # buy order,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 2822, 1502]"
üß† ML Signal: Generating order list from target weight position,"[8582, 100, 254, 10373, 26484, 25, 2980, 803, 1502, 1351, 422, 2496, 3463, 2292]",1.0,1112,ml_signal,290,Generating order list from target weight position,,1087,"                start_time=trade_start_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 28, 25351, 62, 9688, 62, 2435, 11]"
üß† ML Signal: Usage of risk degree in order generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2526, 4922, 287, 1502, 5270]",1.0,1139,ml_signal,292,Usage of risk degree in order generation,,1112,"                direction=Order.BUY,  # 1 for buy","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4571, 28, 18743, 13, 19499, 56, 11, 220, 1303, 352, 329, 2822]"
üß† ML Signal: Returning a trade decision object,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 3292, 2551, 2134]",0.5,1166,ml_signal,292,Returning a trade decision object,,1139,"                direction=Order.BUY,  # 1 for buy","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4571, 28, 18743, 13, 19499, 56, 11, 220, 1303, 352, 329, 2822]"
‚úÖ Best Practice: Constants are defined for file names to avoid magic strings and improve maintainability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 329, 2393, 3891, 284, 3368, 5536, 13042, 290, 2987, 5529, 1799, 13]",1.0,1175,best_practice,310,Constants are defined for file names to avoid magic strings and improve maintainability.,,1166,        signal :,"[220, 220, 220, 220, 220, 220, 220, 6737, 1058]"
‚úÖ Best Practice: Constants are defined for file names to avoid magic strings and improve maintainability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 329, 2393, 3891, 284, 3368, 5536, 13042, 290, 2987, 5529, 1799, 13]",1.0,1197,best_practice,312,Constants are defined for file names to avoid magic strings and improve maintainability.,,1175,            the decision of the strategy will base on the given signal,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 2551, 286, 262, 4811, 481, 2779, 319, 262, 1813, 6737]"
‚úÖ Best Practice: Constants are defined for file names to avoid magic strings and improve maintainability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 329, 2393, 3891, 284, 3368, 5536, 13042, 290, 2987, 5529, 1799, 13]",1.0,1221,best_practice,314,Constants are defined for file names to avoid magic strings and improve maintainability.,,1197,"            exchange that provides market info, used to deal order and generate report","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5163, 326, 3769, 1910, 7508, 11, 973, 284, 1730, 1502, 290, 7716, 989]"
‚úÖ Best Practice: Constants are defined for file names to avoid magic strings and improve maintainability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 329, 2393, 3891, 284, 3368, 5536, 13042, 290, 2987, 5529, 1799, 13]",1.0,1245,best_practice,314,Constants are defined for file names to avoid magic strings and improve maintainability.,,1221,"            exchange that provides market info, used to deal order and generate report","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5163, 326, 3769, 1910, 7508, 11, 973, 284, 1730, 1502, 290, 7716, 989]"
‚úÖ Best Practice: Use of super() to call the parent class's __init__ method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 262, 2560, 1398, 338, 11593, 15003, 834, 2446]",0.5,1270,best_practice,325,Use of super() to call the parent class's __init__ method,,1245,"        if isinstance(order_generator_cls_or_obj, type):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 2875, 62, 8612, 1352, 62, 565, 82, 62, 273, 62, 26801, 11, 2099, 2599]"
üß† ML Signal: Logger initialization pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 1362, 37588, 3912]",0.5,1279,ml_signal,327,Logger initialization pattern,,1270,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of get method for dictionary to provide default values,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 2446, 329, 22155, 284, 2148, 4277, 3815]",1.0,1308,best_practice,332,Use of get method for dictionary to provide default values,,1279,        Generate target position from score for this date and the current position.The cash is not considered in the position,"[220, 220, 220, 220, 220, 220, 220, 2980, 378, 2496, 2292, 422, 4776, 329, 428, 3128, 290, 262, 1459, 2292, 13, 464, 5003, 318, 407, 3177, 287, 262, 2292]"
‚úÖ Best Practice: Use of get method for dictionary to provide default values,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 2446, 329, 22155, 284, 2148, 4277, 3815]",1.0,1316,best_practice,334,Use of get method for dictionary to provide default values,,1308,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚úÖ Best Practice: Use of get method for dictionary to provide default values,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 2446, 329, 22155, 284, 2148, 4277, 3815]",1.0,1329,best_practice,336,Use of get method for dictionary to provide default values,,1316,        score : pd.Series,"[220, 220, 220, 220, 220, 220, 220, 4776, 1058, 279, 67, 13, 27996]"
‚úÖ Best Practice: Use of get method for dictionary to provide default values,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 2446, 329, 22155, 284, 2148, 4277, 3815]",1.0,1340,best_practice,338,Use of get method for dictionary to provide default values,,1329,        current : Position(),"[220, 220, 220, 220, 220, 220, 220, 1459, 1058, 23158, 3419]"
üß† ML Signal: Pattern of initializing an optimizer with keyword arguments,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4238, 2890, 281, 6436, 7509, 351, 21179, 7159]",0.5,1358,ml_signal,340,Pattern of initializing an optimizer with keyword arguments,,1340,        trade_start_time: pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 3292, 62, 9688, 62, 2435, 25, 279, 67, 13, 14967, 27823]"
üß† ML Signal: Pattern of using a cache for risk data,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 1262, 257, 12940, 329, 2526, 1366]",0.5,1372,ml_signal,343,Pattern of using a cache for risk data,,1358,        raise NotImplementedError(),"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 3419]"
üß† ML Signal: Caching pattern for performance optimization,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 3912, 329, 2854, 23989]",1.0,1383,ml_signal,338,Caching pattern for performance optimization,,1372,        current : Position(),"[220, 220, 220, 220, 220, 220, 220, 1459, 1058, 23158, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potential directory traversal if date is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 3128, 318, 407, 31031]",1.0,1391,sast_risk,342,Potential directory traversal if date is not validated,Low,1383,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Potential file path manipulation if paths are not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 3108, 17512, 611, 13532, 389, 407, 31031]",0.5,1410,sast_risk,345,Potential file path manipulation if paths are not validated,Low,1391,"    def generate_trade_decision(self, execute_result=None):","[220, 220, 220, 825, 7716, 62, 25351, 62, 12501, 1166, 7, 944, 11, 12260, 62, 20274, 28, 14202, 2599]"
‚úÖ Best Practice: Ensure index alignment between datasets,"[26486, 227, 6705, 19939, 25, 48987, 6376, 19114, 1022, 40522]",0.5,1446,best_practice,349,Ensure index alignment between datasets,,1410,"        # get the number of trading step finished, trade_step can be [0, 1, 2, ..., trade_len - 1]","[220, 220, 220, 220, 220, 220, 220, 1303, 651, 262, 1271, 286, 7313, 2239, 5201, 11, 3292, 62, 9662, 460, 307, 685, 15, 11, 352, 11, 362, 11, 2644, 11, 3292, 62, 11925, 532, 352, 60]"
‚ö†Ô∏è SAST Risk (Low): Potential file path manipulation if paths are not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 3108, 17512, 611, 13532, 389, 407, 31031]",0.5,1460,sast_risk,354,Potential file path manipulation if paths are not validated,Low,1446,        if pred_score is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 2747, 62, 26675, 318, 6045, 25]"
üß† ML Signal: Caching pattern for performance optimization,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 3912, 329, 2854, 23989]",1.0,1482,ml_signal,357,Caching pattern for performance optimization,,1460,"        assert isinstance(current_temp, Position)  # Avoid InfPosition","[220, 220, 220, 220, 220, 220, 220, 6818, 318, 39098, 7, 14421, 62, 29510, 11, 23158, 8, 220, 1303, 24390, 4806, 26545]"
‚ö†Ô∏è SAST Risk (Low): Division by zero risk if get_risk_degree returns zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7458, 416, 6632, 2526, 611, 651, 62, 19121, 62, 16863, 5860, 6632]",1.0,1505,sast_risk,366,Division by zero risk if get_risk_degree returns zero,Low,1482,"            target_weight_position=target_weight_position,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2496, 62, 6551, 62, 9150, 28, 16793, 62, 6551, 62, 9150, 11]"
üß† ML Signal: Usage of an optimizer function with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 281, 6436, 7509, 2163, 351, 2176, 10007]",1.0,1530,ml_signal,379,Usage of an optimizer function with specific parameters,,1505,"    with the aim of outperforming a benchmark index (e.g., S&P 500) in terms of","[220, 220, 220, 351, 262, 4031, 286, 33597, 15464, 257, 18335, 6376, 357, 68, 13, 70, 1539, 311, 5, 47, 5323, 8, 287, 2846, 286]"

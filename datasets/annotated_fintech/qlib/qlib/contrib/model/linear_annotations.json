[
  {
    "line": 4,
    "text": "import numpy as np",
    "annotation": "\u2705 Best Practice: Import only necessary functions or classes to reduce memory usage and improve readability",
    "confidence": 1.0,
    "tokens": [
      11748,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      691,
      3306,
      5499,
      393,
      6097,
      284,
      4646,
      4088,
      8748,
      290,
      2987,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Import only necessary functions or classes to reduce memory usage and improve readability"
  },
  {
    "line": 8,
    "text": "from qlib.data.dataset.weight import Reweighter",
    "annotation": "\u2705 Best Practice: Group similar imports together for better organization",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      7890,
      13,
      19608,
      292,
      316,
      13,
      6551,
      1330,
      16140,
      68,
      4799
    ],
    "start_token": 5,
    "end_token": 20,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      2092,
      17944,
      1978,
      329,
      1365,
      4009
    ],
    "label": "best_practice",
    "reason": "Group similar imports together for better organization"
  },
  {
    "line": 10,
    "text": "from sklearn.linear_model import LinearRegression, Ridge, Lasso",
    "annotation": "\u2705 Best Practice: Use relative imports for internal modules to maintain package structure",
    "confidence": 0.5,
    "tokens": [
      6738,
      1341,
      35720,
      13,
      29127,
      62,
      19849,
      1330,
      44800,
      8081,
      2234,
      11,
      20614,
      11,
      406,
      28372
    ],
    "start_token": 20,
    "end_token": 36,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      3585,
      17944,
      329,
      5387,
      13103,
      284,
      5529,
      5301,
      4645
    ],
    "label": "best_practice",
    "reason": "Use relative imports for internal modules to maintain package structure"
  },
  {
    "line": 20,
    "text": "    Solve one of the following regression problems:",
    "annotation": "\ud83e\udde0 ML Signal: Use of class constants to define model types",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      4294,
      303,
      530,
      286,
      262,
      1708,
      20683,
      2761,
      25
    ],
    "start_token": 36,
    "end_token": 48,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      38491,
      284,
      8160,
      2746,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of class constants to define model types"
  },
  {
    "line": 22,
    "text": "        - `nnls`: min_w |y - Xw|^2_2, s.t. w >= 0",
    "annotation": "\ud83e\udde0 ML Signal: Use of class constants to define model types",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      4600,
      20471,
      7278,
      63,
      25,
      949,
      62,
      86,
      930,
      88,
      532,
      1395,
      86,
      91,
      61,
      17,
      62,
      17,
      11,
      264,
      13,
      83,
      13,
      266,
      18189,
      657
    ],
    "start_token": 48,
    "end_token": 82,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      38491,
      284,
      8160,
      2746,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of class constants to define model types"
  },
  {
    "line": 24,
    "text": "        - `lasso`: min_w |y - Xw|^2_2 + \\alpha*|w|_1",
    "annotation": "\ud83e\udde0 ML Signal: Use of class constants to define model types",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      4600,
      75,
      28372,
      63,
      25,
      949,
      62,
      86,
      930,
      88,
      532,
      1395,
      86,
      91,
      61,
      17,
      62,
      17,
      1343,
      3467,
      26591,
      9,
      91,
      86,
      91,
      62,
      16
    ],
    "start_token": 82,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      38491,
      284,
      8160,
      2746,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of class constants to define model types"
  },
  {
    "line": 25,
    "text": "    where `w` is the regression coefficient.",
    "annotation": "\ud83e\udde0 ML Signal: Use of class constants to define model types",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      810,
      4600,
      86,
      63,
      318,
      262,
      20683,
      35381,
      13
    ],
    "start_token": 117,
    "end_token": 129,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      38491,
      284,
      8160,
      2746,
      3858
    ],
    "label": "ml_signal",
    "reason": "Use of class constants to define model types"
  },
  {
    "line": 25,
    "text": "    where `w` is the regression coefficient.",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      810,
      4600,
      86,
      63,
      318,
      262,
      20683,
      35381,
      13
    ],
    "start_token": 129,
    "end_token": 141,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use"
  },
  {
    "line": 39,
    "text": "        alpha : float",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17130,
      1058,
      12178
    ],
    "start_token": 141,
    "end_token": 151,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation can be bypassed if Python is run with optimizations"
  },
  {
    "line": 41,
    "text": "        fit_intercept : bool",
    "annotation": "\ud83e\udde0 ML Signal: Use of different estimators indicates a model selection pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4197,
      62,
      3849,
      984,
      1058,
      20512
    ],
    "start_token": 151,
    "end_token": 164,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1180,
      3959,
      2024,
      9217,
      257,
      2746,
      6356,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of different estimators indicates a model selection pattern"
  },
  {
    "line": 43,
    "text": "        include_valid: bool",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for input validation can be bypassed if Python is run with optimizations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2291,
      62,
      12102,
      25,
      20512
    ],
    "start_token": 164,
    "end_token": 176,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      5128,
      21201,
      460,
      307,
      17286,
      276,
      611,
      11361,
      318,
      1057,
      351,
      41446
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for input validation can be bypassed if Python is run with optimizations"
  },
  {
    "line": 45,
    "text": "            The validation data should be included",
    "annotation": "\ud83e\udde0 ML Signal: Use of regularization parameter alpha indicates a tuning pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      21201,
      1366,
      815,
      307,
      3017
    ],
    "start_token": 176,
    "end_token": 193,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3218,
      1634,
      11507,
      17130,
      9217,
      257,
      24549,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of regularization parameter alpha indicates a tuning pattern"
  },
  {
    "line": 47,
    "text": "        assert estimator in [self.OLS, self.NNLS, self.RIDGE, self.LASSO], f\"unsupported estimator `{estimator}`\"",
    "annotation": "\ud83e\udde0 ML Signal: fit_intercept parameter indicates a common preprocessing step in linear models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      3959,
      1352,
      287,
      685,
      944,
      13,
      3535,
      50,
      11,
      2116,
      13,
      6144,
      6561,
      11,
      2116,
      13,
      49,
      2389,
      8264,
      11,
      2116,
      13,
      43,
      10705,
      46,
      4357,
      277,
      1,
      403,
      15999,
      3959,
      1352,
      4600,
      90,
      395,
      320,
      1352,
      92,
      63,
      1
    ],
    "start_token": 193,
    "end_token": 241,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4197,
      62,
      3849,
      984,
      11507,
      9217,
      257,
      2219,
      662,
      36948,
      2239,
      287,
      14174,
      4981
    ],
    "label": "ml_signal",
    "reason": "fit_intercept parameter indicates a common preprocessing step in linear models"
  },
  {
    "line": 50,
    "text": "        assert alpha == 0 or estimator in [self.RIDGE, self.LASSO], f\"alpha is only supported in `ridge`&`lasso`\"",
    "annotation": "\ud83e\udde0 ML Signal: include_valid parameter suggests a pattern of using validation data in training",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      17130,
      6624,
      657,
      393,
      3959,
      1352,
      287,
      685,
      944,
      13,
      49,
      2389,
      8264,
      11,
      2116,
      13,
      43,
      10705,
      46,
      4357,
      277,
      1,
      26591,
      318,
      691,
      4855,
      287,
      4600,
      12818,
      63,
      5,
      63,
      75,
      28372,
      63,
      1
    ],
    "start_token": 241,
    "end_token": 285,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2291,
      62,
      12102,
      11507,
      5644,
      257,
      3912,
      286,
      1262,
      21201,
      1366,
      287,
      3047
    ],
    "label": "ml_signal",
    "reason": "include_valid parameter suggests a pattern of using validation data in training"
  },
  {
    "line": 46,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dataset preparation for training data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 285,
    "end_token": 293,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      27039,
      11824,
      329,
      3047,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of dataset preparation for training data"
  },
  {
    "line": 50,
    "text": "        assert alpha == 0 or estimator in [self.RIDGE, self.LASSO], f\"alpha is only supported in `ridge`&`lasso`\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dataset preparation for validation data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      17130,
      6624,
      657,
      393,
      3959,
      1352,
      287,
      685,
      944,
      13,
      49,
      2389,
      8264,
      11,
      2116,
      13,
      43,
      10705,
      46,
      4357,
      277,
      1,
      26591,
      318,
      691,
      4855,
      287,
      4600,
      12818,
      63,
      5,
      63,
      75,
      28372,
      63,
      1
    ],
    "start_token": 293,
    "end_token": 337,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      27039,
      11824,
      329,
      21201,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of dataset preparation for validation data"
  },
  {
    "line": 52,
    "text": "",
    "annotation": "\u2705 Best Practice: Concatenating training and validation data for combined training",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 337,
    "end_token": 337,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1482,
      9246,
      268,
      803,
      3047,
      290,
      21201,
      1366,
      329,
      5929,
      3047
    ],
    "label": "best_practice",
    "reason": "Concatenating training and validation data for combined training"
  },
  {
    "line": 55,
    "text": "        self.coef_ = None",
    "annotation": "\u2705 Best Practice: Logging information when validation data is not available",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1073,
      891,
      62,
      796,
      6045
    ],
    "start_token": 337,
    "end_token": 351,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      1321,
      618,
      21201,
      1366,
      318,
      407,
      1695
    ],
    "label": "best_practice",
    "reason": "Logging information when validation data is not available"
  },
  {
    "line": 57,
    "text": "",
    "annotation": "\u2705 Best Practice: Dropping NaN values to ensure data quality",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 351,
    "end_token": 351,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      11013,
      45,
      3815,
      284,
      4155,
      1366,
      3081
    ],
    "label": "best_practice",
    "reason": "Dropping NaN values to ensure data quality"
  },
  {
    "line": 60,
    "text": "        if self.include_valid:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Raising an exception for empty training data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      17256,
      62,
      12102,
      25
    ],
    "start_token": 351,
    "end_token": 365,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7567,
      1710,
      281,
      6631,
      329,
      6565,
      3047,
      1366
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Raising an exception for empty training data"
  },
  {
    "line": 63,
    "text": "                df_train = pd.concat([df_train, df_valid])",
    "annotation": "\ud83e\udde0 ML Signal: Usage of reweighter for training data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      27432,
      796,
      279,
      67,
      13,
      1102,
      9246,
      26933,
      7568,
      62,
      27432,
      11,
      47764,
      62,
      12102,
      12962
    ],
    "start_token": 365,
    "end_token": 398,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      302,
      732,
      4799,
      329,
      3047,
      1366
    ],
    "label": "ml_signal",
    "reason": "Usage of reweighter for training data"
  },
  {
    "line": 68,
    "text": "            raise ValueError(\"Empty data from dataset, please check your dataset config.\")",
    "annotation": "\ud83e\udde0 ML Signal: Extracting features and labels for model fitting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      11052,
      12331,
      7203,
      40613,
      1366,
      422,
      27039,
      11,
      3387,
      2198,
      534,
      27039,
      4566,
      19570
    ],
    "start_token": 398,
    "end_token": 424,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      3033,
      290,
      14722,
      329,
      2746,
      15830
    ],
    "label": "ml_signal",
    "reason": "Extracting features and labels for model fitting"
  },
  {
    "line": 71,
    "text": "            w = w.values",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic for different estimators",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      266,
      796,
      266,
      13,
      27160
    ],
    "start_token": 424,
    "end_token": 440,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      329,
      1180,
      3959,
      2024
    ],
    "label": "ml_signal",
    "reason": "Conditional logic for different estimators"
  },
  {
    "line": 73,
    "text": "            w = None",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic for different estimators",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      266,
      796,
      6045
    ],
    "start_token": 440,
    "end_token": 454,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      329,
      1180,
      3959,
      2024
    ],
    "label": "ml_signal",
    "reason": "Conditional logic for different estimators"
  },
  {
    "line": 77,
    "text": "            self._fit(X, y, w)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Handling unknown estimator types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      11147,
      7,
      55,
      11,
      331,
      11,
      266,
      8
    ],
    "start_token": 454,
    "end_token": 475,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      49500,
      6439,
      3959,
      1352,
      3858
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Handling unknown estimator types"
  },
  {
    "line": 69,
    "text": "        if reweighter is not None:",
    "annotation": "\ud83e\udde0 ML Signal: Method for fitting a model, indicating supervised learning usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      302,
      732,
      4799,
      318,
      407,
      6045,
      25
    ],
    "start_token": 475,
    "end_token": 490,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      15830,
      257,
      2746,
      11,
      12739,
      28679,
      4673,
      8748
    ],
    "label": "ml_signal",
    "reason": "Method for fitting a model, indicating supervised learning usage"
  },
  {
    "line": 71,
    "text": "            w = w.values",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to select model type based on estimator attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      266,
      796,
      266,
      13,
      27160
    ],
    "start_token": 490,
    "end_token": 506,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      2922,
      2746,
      2099,
      1912,
      319,
      3959,
      1352,
      11688
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to select model type based on estimator attribute"
  },
  {
    "line": 73,
    "text": "            w = None",
    "annotation": "\ud83e\udde0 ML Signal: Use of LinearRegression model from sklearn",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      266,
      796,
      6045
    ],
    "start_token": 506,
    "end_token": 520,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      44800,
      8081,
      2234,
      2746,
      422,
      1341,
      35720
    ],
    "label": "ml_signal",
    "reason": "Use of LinearRegression model from sklearn"
  },
  {
    "line": 73,
    "text": "            w = None",
    "annotation": "\u2705 Best Practice: Explicitly setting copy_X to False for memory efficiency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      266,
      796,
      6045
    ],
    "start_token": 520,
    "end_token": 534,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      4866,
      62,
      55,
      284,
      10352,
      329,
      4088,
      9332
    ],
    "label": "best_practice",
    "reason": "Explicitly setting copy_X to False for memory efficiency"
  },
  {
    "line": 77,
    "text": "            self._fit(X, y, w)",
    "annotation": "\ud83e\udde0 ML Signal: Use of Ridge or Lasso model based on estimator attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      11147,
      7,
      55,
      11,
      331,
      11,
      266,
      8
    ],
    "start_token": 534,
    "end_token": 555,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      20614,
      393,
      406,
      28372,
      2746,
      1912,
      319,
      3959,
      1352,
      11688
    ],
    "label": "ml_signal",
    "reason": "Use of Ridge or Lasso model based on estimator attribute"
  },
  {
    "line": 78,
    "text": "        elif self.estimator == self.NNLS:",
    "annotation": "\u2705 Best Practice: Dictionary-based selection for clarity and extensibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      2116,
      13,
      395,
      320,
      1352,
      6624,
      2116,
      13,
      6144,
      6561,
      25
    ],
    "start_token": 555,
    "end_token": 575,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      28261,
      12,
      3106,
      6356,
      329,
      16287,
      290,
      1070,
      641,
      2247
    ],
    "label": "best_practice",
    "reason": "Dictionary-based selection for clarity and extensibility"
  },
  {
    "line": 82,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Fitting the model with data and sample weights",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 575,
    "end_token": 575,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      2535,
      262,
      2746,
      351,
      1366,
      290,
      6291,
      19590
    ],
    "label": "ml_signal",
    "reason": "Fitting the model with data and sample weights"
  },
  {
    "line": 84,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing model coefficients and intercept for later use",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 575,
    "end_token": 575,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      2746,
      44036,
      290,
      15788,
      329,
      1568,
      779
    ],
    "label": "ml_signal",
    "reason": "Storing model coefficients and intercept for later use"
  },
  {
    "line": 80,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raises NotImplementedError, which could be a potential denial of service if not handled properly",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 575,
    "end_token": 584,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      2696,
      1892,
      3546,
      1154,
      12061,
      12331,
      11,
      543,
      714,
      307,
      257,
      2785,
      14425,
      286,
      2139,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raises NotImplementedError, which could be a potential denial of service if not handled properly"
  },
  {
    "line": 83,
    "text": "        return self",
    "annotation": "\u2705 Best Practice: Check if fit_intercept is True to decide whether to add intercept term",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116
    ],
    "start_token": 584,
    "end_token": 593,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      4197,
      62,
      3849,
      984,
      318,
      6407,
      284,
      5409,
      1771,
      284,
      751,
      15788,
      3381
    ],
    "label": "best_practice",
    "reason": "Check if fit_intercept is True to decide whether to add intercept term"
  },
  {
    "line": 86,
    "text": "        if self.estimator == self.OLS:",
    "annotation": "\ud83e\udde0 ML Signal: Use of nnls (non-negative least squares) indicates a regression model fitting pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      395,
      320,
      1352,
      6624,
      2116,
      13,
      3535,
      50,
      25
    ],
    "start_token": 593,
    "end_token": 612,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      299,
      77,
      7278,
      357,
      13159,
      12,
      31591,
      1551,
      24438,
      8,
      9217,
      257,
      20683,
      2746,
      15830,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of nnls (non-negative least squares) indicates a regression model fitting pattern"
  },
  {
    "line": 89,
    "text": "            model = {self.RIDGE: Ridge, self.LASSO: Lasso}[self.estimator](",
    "annotation": "\u2705 Best Practice: Separating coefficient and intercept for clarity and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2746,
      796,
      1391,
      944,
      13,
      49,
      2389,
      8264,
      25,
      20614,
      11,
      2116,
      13,
      43,
      10705,
      46,
      25,
      406,
      28372,
      92,
      58,
      944,
      13,
      395,
      320,
      1352,
      16151
    ],
    "start_token": 612,
    "end_token": 650,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8621,
      283,
      803,
      35381,
      290,
      15788,
      329,
      16287,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Separating coefficient and intercept for clarity and maintainability"
  },
  {
    "line": 92,
    "text": "        model.fit(X, y, sample_weight=w)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No check if 'dataset' is None or of the correct type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2746,
      13,
      11147,
      7,
      55,
      11,
      331,
      11,
      6291,
      62,
      6551,
      28,
      86,
      8
    ],
    "start_token": 650,
    "end_token": 671,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      2198,
      611,
      705,
      19608,
      292,
      316,
      6,
      318,
      6045,
      393,
      286,
      262,
      3376,
      2099
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No check if 'dataset' is None or of the correct type"
  },
  {
    "line": 94,
    "text": "        self.intercept_ = model.intercept_",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for unhandled exception if 'coef_' is not set",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      3849,
      984,
      62,
      796,
      2746,
      13,
      3849,
      984,
      62
    ],
    "start_token": 671,
    "end_token": 689,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      555,
      38788,
      6631,
      611,
      705,
      1073,
      891,
      62,
      6,
      318,
      407,
      900
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for unhandled exception if 'coef_' is not set"
  },
  {
    "line": 95,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dataset preparation method with specific segment and column set",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 689,
    "end_token": 689,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      27039,
      11824,
      2446,
      351,
      2176,
      10618,
      290,
      5721,
      900
    ],
    "label": "ml_signal",
    "reason": "Usage of dataset preparation method with specific segment and column set"
  },
  {
    "line": 95,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Linear prediction pattern using matrix multiplication and addition",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 689,
    "end_token": 689,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44800,
      17724,
      3912,
      1262,
      17593,
      48473,
      290,
      3090
    ],
    "label": "ml_signal",
    "reason": "Linear prediction pattern using matrix multiplication and addition"
  },
  {
    "line": 95,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'x_test.values' and 'self.coef_' are compatible for matrix multiplication",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 689,
    "end_token": 689,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      87,
      62,
      9288,
      13,
      27160,
      6,
      290,
      705,
      944,
      13,
      1073,
      891,
      62,
      6,
      389,
      11670,
      329,
      17593,
      48473
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'x_test.values' and 'self.coef_' are compatible for matrix multiplication"
  },
  {
    "line": 95,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning a pandas Series with index for better traceability of results",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 689,
    "end_token": 689,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      19798,
      292,
      7171,
      351,
      6376,
      329,
      1365,
      12854,
      1799,
      286,
      2482
    ],
    "label": "best_practice",
    "reason": "Returning a pandas Series with index for better traceability of results"
  }
]
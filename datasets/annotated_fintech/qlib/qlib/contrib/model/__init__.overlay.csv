annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions like ModuleNotFoundError without specific handling can hide other issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 588, 19937, 3673, 21077, 12331, 1231, 2176, 9041, 460, 7808, 584, 2428, 13]",1.0,6,sast_risk,5,Catching broad exceptions like ModuleNotFoundError without specific handling can hide other issues.,Low,0,except ModuleNotFoundError:,"[16341, 19937, 3673, 21077, 12331, 25]"
‚úÖ Best Practice: Consider logging the error instead of printing to standard output.,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 4049, 2427, 286, 13570, 284, 3210, 5072, 13]",0.5,14,best_practice,6,Consider logging the error instead of printing to standard output.,,6,    CatBoostModel = None,"[220, 220, 220, 5181, 45686, 17633, 796, 6045]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions like ModuleNotFoundError without specific handling can hide other issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 588, 19937, 3673, 21077, 12331, 1231, 2176, 9041, 460, 7808, 584, 2428, 13]",1.0,51,sast_risk,14,Catching broad exceptions like ModuleNotFoundError without specific handling can hide other issues.,Low,14,"        ""ModuleNotFoundError. DEnsembleModel and LGBModel are skipped. (optional: maybe installing lightgbm can fix it.)""","[220, 220, 220, 220, 220, 220, 220, 366, 26796, 3673, 21077, 12331, 13, 360, 4834, 15140, 17633, 290, 406, 4579, 17633, 389, 26684, 13, 357, 25968, 25, 3863, 15975, 1657, 70, 20475, 460, 4259, 340, 2014, 1]"
‚úÖ Best Practice: Consider logging the error instead of printing to standard output.,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 4049, 2427, 286, 13570, 284, 3210, 5072, 13]",0.5,88,best_practice,14,Consider logging the error instead of printing to standard output.,,51,"        ""ModuleNotFoundError. DEnsembleModel and LGBModel are skipped. (optional: maybe installing lightgbm can fix it.)""","[220, 220, 220, 220, 220, 220, 220, 366, 26796, 3673, 21077, 12331, 13, 360, 4834, 15140, 17633, 290, 406, 4579, 17633, 389, 26684, 13, 357, 25968, 25, 3863, 15975, 1657, 70, 20475, 460, 4259, 340, 2014, 1]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions like ModuleNotFoundError without specific handling can hide other issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 588, 19937, 3673, 21077, 12331, 1231, 2176, 9041, 460, 7808, 584, 2428, 13]",1.0,97,sast_risk,22,Catching broad exceptions like ModuleNotFoundError without specific handling can hide other issues.,Low,88,    from .linear import LinearModel,"[220, 220, 220, 422, 764, 29127, 1330, 44800, 17633]"
‚úÖ Best Practice: Consider logging the error instead of printing to standard output.,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 4049, 2427, 286, 13570, 284, 3210, 5072, 13]",0.5,103,best_practice,23,Consider logging the error instead of printing to standard output.,,97,except ModuleNotFoundError:,"[16341, 19937, 3673, 21077, 12331, 25]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions like ModuleNotFoundError without specific handling can hide other issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 588, 19937, 3673, 21077, 12331, 1231, 2176, 9041, 460, 7808, 584, 2428, 13]",1.0,118,sast_risk,29,Catching broad exceptions like ModuleNotFoundError without specific handling can hide other issues.,Low,103,    from .pytorch_gats import GATs,"[220, 220, 220, 422, 764, 9078, 13165, 354, 62, 70, 1381, 1330, 402, 1404, 82]"
‚úÖ Best Practice: Consider logging the error instead of printing to standard output.,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 4049, 2427, 286, 13570, 284, 3210, 5072, 13]",0.5,131,best_practice,30,Consider logging the error instead of printing to standard output.,,118,    from .pytorch_gru import GRU,"[220, 220, 220, 422, 764, 9078, 13165, 354, 62, 48929, 1330, 10863, 52]"
üß† ML Signal: Importing multiple PyTorch models indicates usage of deep learning frameworks.,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 3294, 9485, 15884, 354, 4981, 9217, 8748, 286, 2769, 4673, 29251, 13]",1.0,177,ml_signal,38,Importing multiple PyTorch models indicates usage of deep learning frameworks.,,131,"    pytorch_classes = (ALSTM, GATs, GRU, LSTM, DNNModelPytorch, TabnetModel, SFM_Model, TCN, ADD)","[220, 220, 220, 12972, 13165, 354, 62, 37724, 796, 357, 1847, 2257, 44, 11, 402, 1404, 82, 11, 10863, 52, 11, 406, 2257, 44, 11, 360, 6144, 17633, 20519, 13165, 354, 11, 16904, 3262, 17633, 11, 14362, 44, 62, 17633, 11, 17283, 45, 11, 27841, 8]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions like ModuleNotFoundError without specific handling can hide other issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 588, 19937, 3673, 21077, 12331, 1231, 2176, 9041, 460, 7808, 584, 2428, 13]",1.0,223,sast_risk,38,Catching broad exceptions like ModuleNotFoundError without specific handling can hide other issues.,Low,177,"    pytorch_classes = (ALSTM, GATs, GRU, LSTM, DNNModelPytorch, TabnetModel, SFM_Model, TCN, ADD)","[220, 220, 220, 12972, 13165, 354, 62, 37724, 796, 357, 1847, 2257, 44, 11, 402, 1404, 82, 11, 10863, 52, 11, 406, 2257, 44, 11, 360, 6144, 17633, 20519, 13165, 354, 11, 16904, 3262, 17633, 11, 14362, 44, 62, 17633, 11, 17283, 45, 11, 27841, 8]"
‚úÖ Best Practice: Consider logging the error instead of printing to standard output.,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 4049, 2427, 286, 13570, 284, 3210, 5072, 13]",0.5,269,best_practice,38,Consider logging the error instead of printing to standard output.,,223,"    pytorch_classes = (ALSTM, GATs, GRU, LSTM, DNNModelPytorch, TabnetModel, SFM_Model, TCN, ADD)","[220, 220, 220, 12972, 13165, 354, 62, 37724, 796, 357, 1847, 2257, 44, 11, 402, 1404, 82, 11, 10863, 52, 11, 406, 2257, 44, 11, 360, 6144, 17633, 20519, 13165, 354, 11, 16904, 3262, 17633, 11, 14362, 44, 62, 17633, 11, 17283, 45, 11, 27841, 8]"
üß† ML Signal: Aggregating model classes into a single tuple for unified handling.,"[8582, 100, 254, 10373, 26484, 25, 19015, 2301, 803, 2746, 6097, 656, 257, 2060, 46545, 329, 22706, 9041, 13]",0.5,315,ml_signal,38,Aggregating model classes into a single tuple for unified handling.,,269,"    pytorch_classes = (ALSTM, GATs, GRU, LSTM, DNNModelPytorch, TabnetModel, SFM_Model, TCN, ADD)","[220, 220, 220, 12972, 13165, 354, 62, 37724, 796, 357, 1847, 2257, 44, 11, 402, 1404, 82, 11, 10863, 52, 11, 406, 2257, 44, 11, 360, 6144, 17633, 20519, 13165, 354, 11, 16904, 3262, 17633, 11, 14362, 44, 62, 17633, 11, 17283, 45, 11, 27841, 8]"

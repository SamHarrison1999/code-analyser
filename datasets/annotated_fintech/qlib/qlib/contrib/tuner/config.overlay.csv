annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific libraries can indicate the type of operations or data handling,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 12782, 460, 7603, 262, 2099, 286, 4560, 393, 1366, 9041]",0.5,0,ml_signal,3,Importing specific libraries can indicate the type of operations or data handling,,0,,[]
‚ö†Ô∏è SAST Risk (Medium): Potential for path traversal if config_path is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 3108, 33038, 282, 611, 4566, 62, 6978, 318, 2836, 12, 14401]",0.5,0,sast_risk,6,Potential for path traversal if config_path is user-controlled,Medium,0,,[]
"‚ö†Ô∏è SAST Risk (Low): Raises a generic exception, consider using a more specific exception type","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 257, 14276, 6631, 11, 2074, 1262, 257, 517, 2176, 6631, 2099]",0.5,2,sast_risk,8,"Raises a generic exception, consider using a more specific exception type",Low,0,import os,"[11748, 28686]"
‚ö†Ô∏è SAST Risk (Medium): Opening a file without exception handling can lead to unhandled exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25522, 257, 2393, 1231, 6631, 9041, 460, 1085, 284, 555, 38788, 13269]",1.0,2,sast_risk,11,Opening a file without exception handling can lead to unhandled exceptions,Medium,2,,[]
üß† ML Signal: Usage of YAML library for configuration loading,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 575, 2390, 43, 5888, 329, 8398, 11046]",0.5,16,ml_signal,13,Usage of YAML library for configuration loading,,2,"    def __init__(self, config_path):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 4566, 62, 6978, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Loading YAML without validation can lead to code execution if the file is malicious,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 12320, 575, 2390, 43, 1231, 21201, 460, 1085, 284, 2438, 9706, 611, 262, 2393, 318, 17412]",0.5,36,sast_risk,15,Loading YAML without validation can lead to code execution if the file is malicious,Medium,16,"            raise ValueError(""Config path is invalid."")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 16934, 3108, 318, 12515, 19570]"
‚úÖ Best Practice: Use of deepcopy to avoid unintended mutations of the config object,"[26486, 227, 6705, 19939, 25, 5765, 286, 2769, 30073, 284, 3368, 30261, 23005, 286, 262, 4566, 2134]",0.5,36,best_practice,17,Use of deepcopy to avoid unintended mutations of the config object,,36,,[]
üß† ML Signal: Instantiation of a configuration object for experiments,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 8398, 2134, 329, 10256]",0.5,62,ml_signal,19,Instantiation of a configuration object for experiments,,36,"            yaml = YAML(typ=""safe"", pure=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 331, 43695, 796, 575, 2390, 43, 7, 28004, 2625, 21230, 1600, 5899, 28, 17821, 8]"
üß† ML Signal: Accessing specific configuration sections for pipeline setup,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 8398, 9004, 329, 11523, 9058]",0.5,80,ml_signal,21,Accessing specific configuration sections for pipeline setup,,62,        self.config = copy.deepcopy(config),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 11250, 796, 4866, 13, 22089, 30073, 7, 11250, 8]"
üß† ML Signal: Instantiation of a configuration object for optimization,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 8398, 2134, 329, 23989]",0.5,80,ml_signal,22,Instantiation of a configuration object for optimization,,80,,[]
üß† ML Signal: Accessing specific configuration sections for time settings,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 8398, 9004, 329, 640, 6460]",0.5,80,ml_signal,26,Accessing specific configuration sections for time settings,,80,,[]
üß† ML Signal: Accessing specific configuration sections for data settings,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 8398, 9004, 329, 1366, 6460]",0.5,103,ml_signal,27,Accessing specific configuration sections for data settings,,80,"        self.time_config = config.get(""time_period"", dict())","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2435, 62, 11250, 796, 4566, 13, 1136, 7203, 2435, 62, 41007, 1600, 8633, 28955]"
üß† ML Signal: Accessing specific configuration sections for backtesting,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 8398, 9004, 329, 736, 33407]",0.5,126,ml_signal,29,Accessing specific configuration sections for backtesting,,103,"        self.backtest_config = config.get(""backtest"", dict())","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1891, 9288, 62, 11250, 796, 4566, 13, 1136, 7203, 1891, 9288, 1600, 8633, 28955]"
üß† ML Signal: Accessing specific configuration sections for client settings,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 8398, 9004, 329, 5456, 6460]",0.5,126,ml_signal,31,Accessing specific configuration sections for client settings,,126,,[]
üß† ML Signal: Usage of configuration management pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8398, 4542, 3912]",1.0,126,ml_signal,26,Usage of configuration management pattern,,126,,[]
‚ö†Ô∏è SAST Risk (Low): Potential directory traversal if 'dir' is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 705, 15908, 6, 318, 2836, 12, 14401]",1.0,147,sast_risk,28,Potential directory traversal if 'dir' is user-controlled,Low,126,"        self.data_config = config.get(""data"", dict())","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7890, 62, 11250, 796, 4566, 13, 1136, 7203, 7890, 1600, 8633, 28955]"
‚ö†Ô∏è SAST Risk (Low): Potential directory traversal if 'tuner_ex_dir' is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 705, 28286, 263, 62, 1069, 62, 15908, 6, 318, 2836, 12, 14401]",1.0,174,sast_risk,30,Potential directory traversal if 'tuner_ex_dir' is user-controlled,Low,147,"        self.qlib_client_config = config.get(""qlib_client"", dict())","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 80, 8019, 62, 16366, 62, 11250, 796, 4566, 13, 1136, 7203, 80, 8019, 62, 16366, 1600, 8633, 28955]"
‚úÖ Best Practice: Ensure directory existence before use,"[26486, 227, 6705, 19939, 25, 48987, 8619, 6224, 878, 779]",1.0,174,best_practice,32,Ensure directory existence before use,,174,,[]
‚ö†Ô∏è SAST Risk (Low): Race condition if directory is created by another process,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12588, 4006, 611, 8619, 318, 2727, 416, 1194, 1429]",0.5,197,sast_risk,34,Race condition if directory is created by another process,Low,174,"    def __init__(self, config, TUNER_CONFIG_MANAGER):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 4566, 11, 309, 4944, 1137, 62, 10943, 16254, 62, 10725, 4760, 1137, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential directory traversal if 'estimator_ex_dir' is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 705, 395, 320, 1352, 62, 1069, 62, 15908, 6, 318, 2836, 12, 14401]",1.0,216,sast_risk,36,Potential directory traversal if 'estimator_ex_dir' is user-controlled,Low,197,        :param config:  The config dict for tuner experiment,"[220, 220, 220, 220, 220, 220, 220, 1058, 17143, 4566, 25, 220, 383, 4566, 8633, 329, 6278, 263, 6306]"
‚úÖ Best Practice: Ensure directory existence before use,"[26486, 227, 6705, 19939, 25, 48987, 8619, 6224, 878, 779]",1.0,224,best_practice,38,Ensure directory existence before use,,216,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Race condition if directory is created by another process,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12588, 4006, 611, 8619, 318, 2727, 416, 1194, 1429]",0.5,237,sast_risk,40,Race condition if directory is created by another process,Low,224,        # The dir of the config,"[220, 220, 220, 220, 220, 220, 220, 1303, 383, 26672, 286, 262, 4566]"
üß† ML Signal: Dynamic module and class loading pattern,"[8582, 100, 254, 10373, 26484, 25, 26977, 8265, 290, 1398, 11046, 3912]",1.0,254,ml_signal,42,Dynamic module and class loading pattern,,237,        # The dir of the result of tuner experiment,"[220, 220, 220, 220, 220, 220, 220, 1303, 383, 26672, 286, 262, 1255, 286, 6278, 263, 6306]"
‚ö†Ô∏è SAST Risk (Low): Potential file path manipulation if 'tuner_ex_dir' is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 3108, 17512, 611, 705, 28286, 263, 62, 1069, 62, 15908, 6, 318, 2836, 12, 14401]",1.0,271,sast_risk,42,Potential file path manipulation if 'tuner_ex_dir' is user-controlled,Low,254,        # The dir of the result of tuner experiment,"[220, 220, 220, 220, 220, 220, 220, 1303, 383, 26672, 286, 262, 1255, 286, 6278, 263, 6306]"
‚ö†Ô∏è SAST Risk (Low): Overwrites existing file without warning,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3827, 8933, 274, 4683, 2393, 1231, 6509]",0.5,284,sast_risk,50,Overwrites existing file without warning,Low,271,        # Get the tuner type,"[220, 220, 220, 220, 220, 220, 220, 1303, 3497, 262, 6278, 263, 2099]"
‚ö†Ô∏è SAST Risk (Low): YAML serialization can be unsafe if not properly handled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 575, 2390, 43, 11389, 1634, 460, 307, 21596, 611, 407, 6105, 12118]",0.5,297,sast_risk,50,YAML serialization can be unsafe if not properly handled,Low,284,        # Get the tuner type,"[220, 220, 220, 220, 220, 220, 220, 1303, 3497, 262, 6278, 263, 2099]"
üß† ML Signal: Use of configuration dictionary to set object properties,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8398, 22155, 284, 900, 2134, 6608]",0.5,338,ml_signal,41,Use of configuration dictionary to set object properties,,297,"        self.global_dir = config.get(""dir"", os.path.dirname(TUNER_CONFIG_MANAGER.config_path))","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 20541, 62, 15908, 796, 4566, 13, 1136, 7203, 15908, 1600, 28686, 13, 6978, 13, 15908, 3672, 7, 51, 4944, 1137, 62, 10943, 16254, 62, 10725, 4760, 1137, 13, 11250, 62, 6978, 4008]"
‚ö†Ô∏è SAST Risk (Low): Potential for incorrect report_type values if not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11491, 989, 62, 4906, 3815, 611, 407, 31031]",1.0,355,sast_risk,42,Potential for incorrect report_type values if not validated,Low,338,        # The dir of the result of tuner experiment,"[220, 220, 220, 220, 220, 220, 220, 1303, 383, 26672, 286, 262, 1255, 286, 6278, 263, 6306]"
‚ö†Ô∏è SAST Risk (Low): Error message could expose internal logic,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 714, 15651, 5387, 9156]",0.5,371,sast_risk,53,Error message could expose internal logic,Low,355,        # Save the tuner experiment for further view,"[220, 220, 220, 220, 220, 220, 220, 1303, 12793, 262, 6278, 263, 6306, 329, 2252, 1570]"
üß† ML Signal: Use of configuration dictionary to set object properties,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8398, 22155, 284, 900, 2134, 6608]",0.5,411,ml_signal,54,Use of configuration dictionary to set object properties,,371,"        tuner_ex_config_path = os.path.join(self.tuner_ex_dir, ""tuner_config.yaml"")","[220, 220, 220, 220, 220, 220, 220, 6278, 263, 62, 1069, 62, 11250, 62, 6978, 796, 28686, 13, 6978, 13, 22179, 7, 944, 13, 28286, 263, 62, 1069, 62, 15908, 11, 366, 28286, 263, 62, 11250, 13, 88, 43695, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential for incorrect report_factor values if not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11491, 989, 62, 31412, 3815, 611, 407, 31031]",1.0,451,sast_risk,54,Potential for incorrect report_factor values if not validated,Low,411,"        tuner_ex_config_path = os.path.join(self.tuner_ex_dir, ""tuner_config.yaml"")","[220, 220, 220, 220, 220, 220, 220, 6278, 263, 62, 1069, 62, 11250, 62, 6978, 796, 28686, 13, 6978, 13, 22179, 7, 944, 13, 28286, 263, 62, 1069, 62, 15908, 11, 366, 28286, 263, 62, 11250, 13, 88, 43695, 4943]"
‚ö†Ô∏è SAST Risk (Low): Error message could expose internal logic,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 714, 15651, 5387, 9156]",0.5,465,sast_risk,68,Error message could expose internal logic,Low,451,"            ""model"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 19849, 1600]"
üß† ML Signal: Use of configuration dictionary to set object properties,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8398, 22155, 284, 900, 2134, 6608]",0.5,479,ml_signal,68,Use of configuration dictionary to set object properties,,465,"            ""model"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 19849, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential for incorrect optim_type values if not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11491, 6436, 62, 4906, 3815, 611, 407, 31031]",1.0,493,sast_risk,68,Potential for incorrect optim_type values if not validated,Low,479,"            ""model"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 19849, 1600]"
‚ö†Ô∏è SAST Risk (Low): Error message could expose internal logic,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 714, 15651, 5387, 9156]",0.5,507,sast_risk,68,Error message could expose internal logic,Low,493,"            ""model"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 19849, 1600]"

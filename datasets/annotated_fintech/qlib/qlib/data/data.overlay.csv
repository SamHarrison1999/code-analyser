annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of type hints improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2,best_practice,10,Use of type hints improves code readability and maintainability.,,0,import copy,"[11748, 4866]"
üß† ML Signal: Use of logging can be a signal for monitoring and debugging practices.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 18931, 460, 307, 257, 6737, 329, 9904, 290, 28769, 6593, 13]",0.5,2,ml_signal,16,Use of logging can be a signal for monitoring and debugging practices.,,2,,[]
‚úÖ Best Practice: Consider adding methods or properties to this mixin to enhance its utility,"[26486, 227, 6705, 19939, 25, 12642, 4375, 5050, 393, 6608, 284, 428, 5022, 259, 284, 9494, 663, 10361]",0.5,11,best_practice,37,Consider adding methods or properties to this mixin to enhance its utility,,2,"    get_period_list,","[220, 220, 220, 651, 62, 41007, 62, 4868, 11]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the function,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163]",1.0,20,best_practice,37,Consider adding a docstring to describe the purpose and usage of the function,,11,"    get_period_list,","[220, 220, 220, 651, 62, 41007, 62, 4868, 11]"
‚úÖ Best Practice: Initialize variables close to their usage,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 1969, 284, 511, 8748]",0.5,29,best_practice,39,Initialize variables close to their usage,,20,from ..utils.paral import ParallelExt,"[6738, 11485, 26791, 13, 1845, 282, 1330, 42945, 11627]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if the class name has fewer than two capitalized segments,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 262, 1398, 1438, 468, 7380, 621, 734, 3139, 1143, 17894]",0.5,29,sast_risk,41,Potential IndexError if the class name has fewer than two capitalized segments,Low,29,,[]
"üß† ML Signal: Uses regex to extract parts of a class name, indicating dynamic behavior based on class naming","[8582, 100, 254, 10373, 26484, 25, 36965, 40364, 284, 7925, 3354, 286, 257, 1398, 1438, 11, 12739, 8925, 4069, 1912, 319, 1398, 19264]",0.5,29,ml_signal,42,"Uses regex to extract parts of a class name, indicating dynamic behavior based on class naming",,29,,[]
üß† ML Signal: Dynamic construction of class names based on extracted information,"[8582, 100, 254, 10373, 26484, 25, 26977, 5103, 286, 1398, 3891, 1912, 319, 21242, 1321]",0.5,33,ml_signal,44,Dynamic construction of class names based on extracted information,,29,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Hardcoded module path suggests a fixed structure or convention in the codebase,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 8265, 3108, 5644, 257, 5969, 4645, 393, 9831, 287, 262, 2438, 8692]",0.5,54,ml_signal,46,Hardcoded module path suggests a fixed structure or convention in the codebase,,33,    It is not necessary to inherent this class if that provider don't rely on the backend storage,"[220, 220, 220, 632, 318, 407, 3306, 284, 11519, 428, 1398, 611, 326, 10131, 836, 470, 8814, 319, 262, 30203, 6143]"
‚úÖ Best Practice: Use of conditional expression to set default value for backend,"[26486, 227, 6705, 19939, 25, 5765, 286, 26340, 5408, 284, 900, 4277, 1988, 329, 30203]",0.5,58,best_practice,44,Use of conditional expression to set default value for backend,,54,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): deepcopy can be expensive in terms of performance,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2769, 30073, 460, 307, 5789, 287, 2846, 286, 2854]",1.0,79,sast_risk,46,deepcopy can be expensive in terms of performance,Low,58,    It is not necessary to inherent this class if that provider don't rely on the backend storage,"[220, 220, 220, 632, 318, 407, 3306, 284, 11519, 428, 1398, 611, 326, 10131, 836, 470, 8814, 319, 262, 30203, 6143]"
‚úÖ Best Practice: Use of setdefault to ensure 'kwargs' key exists before updating,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 12286, 284, 4155, 705, 46265, 22046, 6, 1994, 7160, 878, 19698]",0.5,79,best_practice,48,Use of setdefault to ensure 'kwargs' key exists before updating,,79,,[]
üß† ML Signal: Use of dynamic configuration for initializing instances,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8925, 8398, 329, 4238, 2890, 10245]",0.5,92,ml_signal,49,Use of dynamic configuration for initializing instances,,79,    def get_default_backend(self):,"[220, 220, 220, 825, 651, 62, 12286, 62, 1891, 437, 7, 944, 2599]"
‚úÖ Best Practice: Inheriting from abc.ABC to define an abstract base class,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 450, 66, 13, 24694, 284, 8160, 281, 12531, 2779, 1398]",1.0,92,best_practice,48,Inheriting from abc.ABC to define an abstract base class,,92,,[]
"‚ö†Ô∏è SAST Risk (Low): Comparing string ""None"" instead of checking for None type","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3082, 1723, 4731, 366, 14202, 1, 2427, 286, 10627, 329, 6045, 2099]",0.5,92,sast_risk,70,"Comparing string ""None"" instead of checking for None type",Low,92,,[]
"‚ö†Ô∏è SAST Risk (Low): Comparing string ""None"" instead of checking for None type","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3082, 1723, 4731, 366, 14202, 1, 2427, 286, 10627, 329, 6045, 2099]",0.5,92,sast_risk,73,"Comparing string ""None"" instead of checking for None type",Low,92,,[]
‚ö†Ô∏è SAST Risk (Medium): Potential IndexError if _calendar is empty,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 12901, 12331, 611, 4808, 9948, 9239, 318, 6565]",0.5,109,sast_risk,77,Potential IndexError if _calendar is empty,Medium,92,            start of the time range.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 286, 262, 640, 2837, 13]"
‚ö†Ô∏è SAST Risk (Medium): Potential IndexError if _calendar is empty,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 12901, 12331, 611, 4808, 9948, 9239, 318, 6565]",0.5,117,sast_risk,85,Potential IndexError if _calendar is empty,Medium,109,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
‚úÖ Best Practice: Using descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 8554, 35644, 7885, 3891, 329, 16287]",1.0,132,best_practice,91,Using descriptive variable names for clarity,,117,"        if start_time == ""None"":","[220, 220, 220, 220, 220, 220, 220, 611, 923, 62, 2435, 6624, 366, 14202, 1298]"
‚úÖ Best Practice: Convert input to a consistent type early in the function,"[26486, 227, 6705, 19939, 25, 38240, 5128, 284, 257, 6414, 2099, 1903, 287, 262, 2163]",0.5,136,best_practice,113,Convert input to a consistent type early in the function,,132,    ):,"[220, 220, 220, 15179]"
‚úÖ Best Practice: Convert input to a consistent type early in the function,"[26486, 227, 6705, 19939, 25, 38240, 5128, 284, 257, 6414, 2099, 1903, 287, 262, 2163]",0.5,136,best_practice,115,Convert input to a consistent type early in the function,,136,,[]
üß† ML Signal: Usage of a helper function to retrieve calendar data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 31904, 2163, 284, 19818, 11845, 1366]",0.5,145,ml_signal,117,Usage of a helper function to retrieve calendar data,,136,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
üß† ML Signal: Use of bisect to find insertion point in a sorted list,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 47457, 478, 284, 1064, 36075, 966, 287, 257, 23243, 1351]",0.5,161,ml_signal,120,Use of bisect to find insertion point in a sorted list,,145,        end_time : pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 1058, 279, 67, 13, 14967, 27823]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure in error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 287, 4049, 3275]",1.0,171,sast_risk,124,Potential information disclosure in error message,Low,161,        future : bool,"[220, 220, 220, 220, 220, 220, 220, 2003, 1058, 20512]"
üß† ML Signal: Mapping a timestamp to an index,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 257, 41033, 284, 281, 6376]",0.5,179,ml_signal,128,Mapping a timestamp to an index,,171,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
üß† ML Signal: Use of bisect to find insertion point in a sorted list,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 47457, 478, 284, 1064, 36075, 966, 287, 257, 23243, 1351]",0.5,191,ml_signal,129,Use of bisect to find insertion point in a sorted list,,179,        pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 14967, 27823]"
üß† ML Signal: Mapping a timestamp to an index,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 257, 41033, 284, 281, 6376]",0.5,203,ml_signal,129,Mapping a timestamp to an index,,191,        pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 14967, 27823]"
‚úÖ Best Practice: Return multiple values as a tuple,"[26486, 227, 6705, 19939, 25, 8229, 3294, 3815, 355, 257, 46545]",0.5,215,best_practice,129,Return multiple values as a tuple,,203,        pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 14967, 27823]"
üß† ML Signal: Use of string formatting to create unique cache keys,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 33313, 284, 2251, 3748, 12940, 8251]",0.5,251,ml_signal,143,Use of string formatting to create unique cache keys,,215,"                start_time = calendar[bisect.bisect_left(calendar, start_time)]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 796, 11845, 58, 41907, 478, 13, 41907, 478, 62, 9464, 7, 9948, 9239, 11, 923, 62, 2435, 15437]"
üß† ML Signal: Checking for existence in a cache dictionary,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 6224, 287, 257, 12940, 22155]",0.5,270,ml_signal,145,Checking for existence in a cache dictionary,,251,                raise IndexError(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 12901, 12331, 7]"
‚ö†Ô∏è SAST Risk (Low): Potentially large data loaded into memory,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 1588, 1366, 9639, 656, 4088]",0.5,290,sast_risk,147,Potentially large data loaded into memory,Low,270,                ) from index_e,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267, 422, 6376, 62, 68]"
‚úÖ Best Practice: Using dictionary comprehension for concise code,"[26486, 227, 6705, 19939, 25, 8554, 22155, 35915, 329, 35327, 2438]",1.0,307,best_practice,149,Using dictionary comprehension for concise code,,290,        if end_time not in calendar_index:,"[220, 220, 220, 220, 220, 220, 220, 611, 886, 62, 2435, 407, 287, 11845, 62, 9630, 25]"
üß† ML Signal: Caching data for performance optimization,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 1366, 329, 2854, 23989]",1.0,326,ml_signal,151,Caching data for performance optimization,,307,        end_index = calendar_index[end_time],"[220, 220, 220, 220, 220, 220, 220, 886, 62, 9630, 796, 11845, 62, 9630, 58, 437, 62, 2435, 60]"
üß† ML Signal: Returning cached data,"[8582, 100, 254, 10373, 26484, 25, 42882, 39986, 1366]",0.5,326,ml_signal,153,Returning cached data,,326,,[]
‚úÖ Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,343,best_practice,149,Consider adding type hints for function parameters and return type for better readability and maintainability.,,326,        if end_time not in calendar_index:,"[220, 220, 220, 220, 220, 220, 220, 611, 886, 62, 2435, 407, 287, 11845, 62, 9630, 25]"
üß† ML Signal: Usage of a hashing function to generate a unique identifier or URI.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 49544, 2163, 284, 7716, 257, 3748, 27421, 393, 43975, 13]",1.0,366,ml_signal,152,Usage of a hashing function to generate a unique identifier or URI.,,343,"        return start_time, end_time, start_index, end_index","[220, 220, 220, 220, 220, 220, 220, 1441, 923, 62, 2435, 11, 886, 62, 2435, 11, 923, 62, 9630, 11, 886, 62, 9630]"
‚úÖ Best Practice: Include a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,366,best_practice,153,Include a docstring to describe the function's purpose and parameters,,366,,[]
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if not overridden","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 23170, 4651]",1.0,374,sast_risk,165,"Method is not implemented, which could lead to runtime errors if not overridden",Low,366,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
‚úÖ Best Practice: Consider importing at the top of the file for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 12642, 33332, 379, 262, 1353, 286, 262, 2393, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,382,best_practice,170,Consider importing at the top of the file for better readability and maintainability,,374,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Usage of isinstance to handle different types of input,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 318, 39098, 284, 5412, 1180, 3858, 286, 5128]",1.0,386,ml_signal,203,Usage of isinstance to handle different types of input,,382,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Consider importing at the top of the file for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 12642, 33332, 379, 262, 1353, 286, 262, 2393, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,417,best_practice,206,Consider importing at the top of the file for better readability and maintainability,,386,"    def instruments(market: Union[List, str] = ""all"", filter_pipe: Union[List, None] = None):","[220, 220, 220, 825, 12834, 7, 10728, 25, 4479, 58, 8053, 11, 965, 60, 796, 366, 439, 1600, 8106, 62, 34360, 25, 4479, 58, 8053, 11, 6045, 60, 796, 6045, 2599]"
üß† ML Signal: Usage of isinstance to handle different types of input,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 318, 39098, 284, 5412, 1180, 3858, 286, 5128]",1.0,430,ml_signal,212,Usage of isinstance to handle different types of input,,417,            str:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 965, 25]"
üß† ML Signal: Usage of isinstance to handle different types of input,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 318, 39098, 284, 5412, 1180, 3858, 286, 5128]",1.0,443,ml_signal,214,Usage of isinstance to handle different types of input,,430,            list:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1351, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure in error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 287, 4049, 3275]",1.0,443,sast_risk,218,Potential information disclosure in error message,Low,443,,[]
‚úÖ Best Practice: Use of abstractmethod decorator indicates this method should be overridden,"[26486, 227, 6705, 19939, 25, 5765, 286, 12531, 24396, 11705, 1352, 9217, 428, 2446, 815, 307, 23170, 4651]",0.5,460,best_practice,221,Use of abstractmethod decorator indicates this method should be overridden,,443,"        dict: if isinstance(market, str)","[220, 220, 220, 220, 220, 220, 220, 8633, 25, 611, 318, 39098, 7, 10728, 11, 965, 8]"
‚úÖ Best Practice: Docstring provides clear documentation of parameters and return types,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 10314, 286, 10007, 290, 1441, 3858]",1.0,477,best_practice,221,Docstring provides clear documentation of parameters and return types,,460,"        dict: if isinstance(market, str)","[220, 220, 220, 220, 220, 220, 220, 8633, 25, 611, 318, 39098, 7, 10728, 11, 965, 8]"
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if not overridden","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 23170, 4651]",1.0,501,sast_risk,238,"Method is not implemented, which could lead to runtime errors if not overridden",Low,477,"                'filter_start_time': None,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 24455, 62, 9688, 62, 2435, 10354, 6045, 11]"
üß† ML Signal: Method signature with default parameters,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 4277, 10007]",0.5,526,ml_signal,239,Method signature with default parameters,,501,                'filter_end_time': None}]},"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 24455, 62, 437, 62, 2435, 10354, 6045, 92, 48999]"
‚úÖ Best Practice: Consider adding type hints for the method parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,534,best_practice,244,Consider adding type hints for the method parameters and return type for better readability and maintainability.,,526,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Checking for a substring in a string to determine type.,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 257, 3293, 1806, 287, 257, 4731, 284, 5004, 2099, 13]",0.5,547,ml_signal,246,Checking for a substring in a string to determine type.,,534,            return market,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1910]"
üß† ML Signal: Using isinstance to determine the type of an object.,"[8582, 100, 254, 10373, 26484, 25, 8554, 318, 39098, 284, 5004, 262, 2099, 286, 281, 2134, 13]",0.5,561,ml_signal,249,Using isinstance to determine the type of an object.,,547,        if filter_pipe is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 8106, 62, 34360, 318, 6045, 25]"
üß† ML Signal: Using isinstance with multiple types to determine the type of an object.,"[8582, 100, 254, 10373, 26484, 25, 8554, 318, 39098, 351, 3294, 3858, 284, 5004, 262, 2099, 286, 281, 2134, 13]",0.5,584,ml_signal,252,Using isinstance with multiple types to determine the type of an object.,,561,"        # the order of the filters will affect the result, so we need to keep","[220, 220, 220, 220, 220, 220, 220, 1303, 262, 1502, 286, 262, 16628, 481, 2689, 262, 1255, 11, 523, 356, 761, 284, 1394]"
"‚ö†Ô∏è SAST Risk (Low): The error message may expose the value of 'inst', which could be sensitive.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 383, 4049, 3275, 743, 15651, 262, 1988, 286, 705, 8625, 3256, 543, 714, 307, 8564, 13]",0.5,594,sast_risk,253,"The error message may expose the value of 'inst', which could be sensitive.",Low,584,        # the order,"[220, 220, 220, 220, 220, 220, 220, 1303, 262, 1502]"
‚úÖ Best Practice: Docstring provides clear documentation of parameters and return type,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 10314, 286, 10007, 290, 1441, 2099]",1.0,620,best_practice,258,Docstring provides clear documentation of parameters and return type,,594,                _config = filter_t.to_config(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 11250, 796, 8106, 62, 83, 13, 1462, 62, 11250, 3419]"
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if not overridden","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 23170, 4651]",1.0,637,sast_risk,277,"Method is not implemented, which could lead to runtime errors if not overridden",Low,620,            end of the time range.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 286, 262, 640, 2837, 13]"
‚úÖ Best Practice: Use of abstract base class to define an interface,"[26486, 227, 6705, 19939, 25, 5765, 286, 12531, 2779, 1398, 284, 8160, 281, 7071]",0.5,654,best_practice,277,Use of abstract base class to define an interface,,637,            end of the time range.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 286, 262, 640, 2837, 13]"
‚úÖ Best Practice: Use of abstract method to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 286, 12531, 2446, 284, 4605, 7822, 287, 850, 37724]",1.0,672,best_practice,279,Use of abstract method to enforce implementation in subclasses,,654,            return instruments as list or dict.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 12834, 355, 1351, 393, 8633, 13]"
‚úÖ Best Practice: Docstring provides a clear description of the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2163, 338, 4007, 290, 10007]",1.0,706,best_practice,288,Docstring provides a clear description of the function's purpose and parameters,,672,"    def _uri(self, instruments, start_time=None, end_time=None, freq=""day"", as_list=False):","[220, 220, 220, 825, 4808, 9900, 7, 944, 11, 12834, 11, 923, 62, 2435, 28, 14202, 11, 886, 62, 2435, 28, 14202, 11, 2030, 80, 2625, 820, 1600, 355, 62, 4868, 28, 25101, 2599]"
"‚ö†Ô∏è SAST Risk (Low): NotImplementedError is raised, indicating the function is not yet implemented","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1892, 3546, 1154, 12061, 12331, 318, 4376, 11, 12739, 262, 2163, 318, 407, 1865, 9177]",0.5,718,sast_risk,315,"NotImplementedError is raised, indicating the function is not yet implemented",Low,706,"        """"""Get feature data.","[220, 220, 220, 220, 220, 220, 220, 37227, 3855, 3895, 1366, 13]"
‚úÖ Best Practice: Inheriting from abc.ABC to define an abstract base class,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 450, 66, 13, 24694, 284, 8160, 281, 12531, 2779, 1398]",0.5,730,best_practice,315,Inheriting from abc.ABC to define an abstract base class,,718,"        """"""Get feature data.","[220, 220, 220, 220, 220, 220, 220, 37227, 3855, 3895, 1366, 13]"
‚úÖ Best Practice: Initialize instance variables in the constructor for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799]",1.0,745,best_practice,320,Initialize instance variables in the constructor for clarity and maintainability,,730,            a certain instrument.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 257, 1728, 8875, 13]"
üß† ML Signal: Caching pattern usage with self.expression_instance_cache,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 3912, 8748, 351, 2116, 13, 38011, 62, 39098, 62, 23870]",0.5,762,ml_signal,322,Caching pattern usage with self.expression_instance_cache,,745,            a certain field of feature.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 257, 1728, 2214, 286, 3895, 13]"
‚ö†Ô∏è SAST Risk (High): Use of eval() with untrusted input can lead to code execution vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 5418, 3419, 351, 1418, 81, 8459, 5128, 460, 1085, 284, 2438, 9706, 23805]",0.5,773,sast_risk,327,Use of eval() with untrusted input can lead to code execution vulnerabilities,High,762,        freq : str,"[220, 220, 220, 220, 220, 220, 220, 2030, 80, 1058, 965]"
üß† ML Signal: Logging pattern with exception handling,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 3912, 351, 6631, 9041]",0.5,784,ml_signal,332,Logging pattern with exception handling,,773,        pd.Series,"[220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 27996]"
üß† ML Signal: Logging pattern with exception handling,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 3912, 351, 6631, 9041]",0.5,784,ml_signal,336,Logging pattern with exception handling,,784,,[]
‚úÖ Best Practice: Use of abc.abstractmethod to define abstract methods in base classes,"[26486, 227, 6705, 19939, 25, 5765, 286, 450, 66, 13, 397, 8709, 24396, 284, 8160, 12531, 5050, 287, 2779, 6097]",0.5,793,best_practice,339,Use of abc.abstractmethod to define abstract methods in base classes,,784,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 10007, 13]",1.0,802,best_practice,339,Docstring provides a clear explanation of the method's purpose and parameters.,,793,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if not overridden.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 23170, 4651, 13]",1.0,838,sast_risk,365,"Method is not implemented, which could lead to runtime errors if not overridden.",Low,802,            The period is represented with int in Qlib. (e.g. 202001 may represent the first quarter in 2020),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 383, 2278, 318, 7997, 351, 493, 287, 1195, 8019, 13, 357, 68, 13, 70, 13, 1160, 14585, 743, 2380, 262, 717, 3860, 287, 12131, 8]"
‚úÖ Best Practice: Use of abstract base class to define interface,"[26486, 227, 6705, 19939, 25, 5765, 286, 12531, 2779, 1398, 284, 8160, 7071]",0.5,874,best_practice,365,Use of abstract base class to define interface,,838,            The period is represented with int in Qlib. (e.g. 202001 may represent the first quarter in 2020),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 383, 2278, 318, 7997, 351, 493, 287, 1195, 8019, 13, 357, 68, 13, 70, 13, 1160, 14585, 743, 2380, 262, 717, 3860, 287, 12131, 8]"
‚úÖ Best Practice: Use of abstract method to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 286, 12531, 2446, 284, 4605, 7822, 287, 850, 37724]",1.0,885,best_practice,370,Use of abstract method to enforce implementation in subclasses,,874,        pd.Series,"[220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 27996]"
‚úÖ Best Practice: Use of docstring to describe method parameters and return value,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 2446, 10007, 290, 1441, 1988]",1.0,908,best_practice,371,Use of docstring to describe method parameters and return value,,885,            The index will be integers to indicate the periods of the data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 383, 6376, 481, 307, 37014, 284, 7603, 262, 9574, 286, 262, 1366]"
‚úÖ Best Practice: Default parameter values provided for optional parameters,"[26486, 227, 6705, 19939, 25, 15161, 11507, 3815, 2810, 329, 11902, 10007]",1.0,931,best_practice,371,Default parameter values provided for optional parameters,,908,            The index will be integers to indicate the periods of the data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 383, 6376, 481, 307, 37014, 284, 7603, 262, 9574, 286, 262, 1366]"
‚ö†Ô∏è SAST Risk (Low): Mutable default argument 'inst_processors' can lead to unexpected behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13859, 540, 4277, 4578, 705, 8625, 62, 14681, 669, 6, 460, 1085, 284, 10059, 4069]",1.0,954,sast_risk,371,Mutable default argument 'inst_processors' can lead to unexpected behavior,Low,931,            The index will be integers to indicate the periods of the data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 383, 6376, 481, 307, 37014, 284, 7603, 262, 9574, 286, 262, 1366]"
üß† ML Signal: Use of NotImplementedError indicates an abstract method pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 9217, 281, 12531, 2446, 3912]",1.0,968,ml_signal,392,Use of NotImplementedError indicates an abstract method pattern,,954,"    def get_expression_instance(self, field):","[220, 220, 220, 825, 651, 62, 38011, 62, 39098, 7, 944, 11, 2214, 2599]"
‚úÖ Best Practice: Provide a clear and concise docstring for the function.,"[26486, 227, 6705, 19939, 25, 44290, 257, 1598, 290, 35327, 2205, 8841, 329, 262, 2163, 13]",0.5,980,best_practice,403,Provide a clear and concise docstring for the function.,,968,            raise,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298]"
‚ö†Ô∏è SAST Risk (Low): Using a mutable default argument (inst_processors) can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 257, 4517, 540, 4277, 4578, 357, 8625, 62, 14681, 669, 8, 460, 1085, 284, 10059, 4069, 13]",1.0,990,sast_risk,419,Using a mutable default argument (inst_processors) can lead to unexpected behavior.,Low,980,        instrument : str,"[220, 220, 220, 220, 220, 220, 220, 8875, 1058, 965]"
üß† ML Signal: Checking the type of 'instruments' to determine processing logic,"[8582, 100, 254, 10373, 26484, 25, 39432, 262, 2099, 286, 705, 259, 2536, 2886, 6, 284, 5004, 7587, 9156]",1.0,1007,ml_signal,426,Checking the type of 'instruments' to determine processing logic,,990,            end of the time range.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 286, 262, 640, 2837, 13]"
üß† ML Signal: Checking for specific key in dictionary to determine processing logic,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 2176, 1994, 287, 22155, 284, 5004, 7587, 9156]",1.0,1033,ml_signal,428,Checking for specific key in dictionary to determine processing logic,,1007,"            time frequency, available: year/quarter/month/week/day.","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 640, 8373, 11, 1695, 25, 614, 14, 24385, 14, 8424, 14, 10464, 14, 820, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential for KeyError if 'market' key is assumed to exist without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 7383, 12331, 611, 705, 10728, 6, 1994, 318, 9672, 284, 2152, 1231, 21201]",1.0,1041,sast_risk,430,Potential for KeyError if 'market' key is assumed to exist without validation,Low,1033,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
üß† ML Signal: Handling multiple types for 'instruments' to ensure flexibility,"[8582, 100, 254, 10373, 26484, 25, 49500, 3294, 3858, 329, 705, 259, 2536, 2886, 6, 284, 4155, 13688]",1.0,1041,ml_signal,434,Handling multiple types for 'instruments' to ensure flexibility,,1041,,[]
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError without specific error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 1231, 2176, 4049, 9041]",1.0,1041,sast_risk,438,Raising a generic ValueError without specific error handling,Low,1041,,[]
‚ö†Ô∏è SAST Risk (Low): No input validation for non-iterable types,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 5128, 21201, 329, 1729, 12, 2676, 540, 3858]",0.5,1066,sast_risk,441,No input validation for non-iterable types,Low,1041,                - because the datetime is not as good as,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 780, 262, 4818, 8079, 318, 407, 355, 922, 355]"
"‚ö†Ô∏è SAST Risk (Low): Raises generic exception, could be more specific","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 14276, 6631, 11, 714, 307, 517, 2176]",0.5,1093,sast_risk,443,"Raises generic exception, could be more specific",Low,1066,"        raise NotImplementedError(""Subclass of ExpressionProvider must implement `Expression` method"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7203, 7004, 4871, 286, 41986, 29495, 1276, 3494, 4600, 16870, 2234, 63, 2446, 4943]"
üß† ML Signal: List comprehension usage pattern,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 8748, 3912]",0.5,1093,ml_signal,444,List comprehension usage pattern,,1093,,[]
üß† ML Signal: Usage of list comprehension to transform data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 35915, 284, 6121, 1366]",1.0,1102,ml_signal,447,Usage of list comprehension to transform data,,1093,"    """"""Dataset provider class","[220, 220, 220, 37227, 27354, 292, 316, 10131, 1398]"
‚úÖ Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,1106,best_practice,450,Consider adding type hints for function parameters and return type for better readability and maintainability.,,1102,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Normalizing column names is a common preprocessing step in data processing pipelines.,"[8582, 100, 254, 10373, 26484, 25, 14435, 2890, 5721, 3891, 318, 257, 2219, 662, 36948, 2239, 287, 1366, 7587, 31108, 13]",1.0,1106,ml_signal,455,Normalizing column names is a common preprocessing step in data processing pipelines.,,1106,,[]
üß† ML Signal: Dynamic worker allocation based on frequency and instrument count can be a pattern for resource optimization.,"[8582, 100, 254, 10373, 26484, 25, 26977, 8383, 20157, 1912, 319, 8373, 290, 8875, 954, 460, 307, 257, 3912, 329, 8271, 23989, 13]",0.5,1115,ml_signal,457,Dynamic worker allocation based on frequency and instrument count can be a pattern for resource optimization.,,1106,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
‚ö†Ô∏è SAST Risk (Low): Ensure that instruments_d is a dictionary or list to avoid unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 12834, 62, 67, 318, 257, 22155, 393, 1351, 284, 3368, 10059, 4069, 13]",1.0,1138,sast_risk,459,Ensure that instruments_d is a dictionary or list to avoid unexpected behavior.,Low,1115,            list/dict of instruments or dict of stockpool config.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1351, 14, 11600, 286, 12834, 393, 8633, 286, 4283, 7742, 4566, 13]"
üß† ML Signal: Use of delayed execution pattern for parallel processing.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11038, 9706, 3912, 329, 10730, 7587, 13]",0.5,1155,ml_signal,469,Use of delayed execution pattern for parallel processing.,,1138,            the operations performed on each instrument,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 4560, 6157, 319, 1123, 8875]"
üß† ML Signal: Use of parallel processing to handle tasks concurrently.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10730, 7587, 284, 5412, 8861, 47480, 13]",1.0,1163,ml_signal,475,Use of parallel processing to handle tasks concurrently.,,1155,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Concatenating data from multiple sources is a common pattern in data processing.,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 803, 1366, 422, 3294, 4237, 318, 257, 2219, 3912, 287, 1366, 7587, 13]",1.0,1167,ml_signal,488,Concatenating data from multiple sources is a common pattern in data processing.,,1163,    ):,"[220, 220, 220, 15179]"
üß† ML Signal: Caching processed data for future use is a common optimization technique.,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 13686, 1366, 329, 2003, 779, 318, 257, 2219, 23989, 8173, 13]",0.5,1171,ml_signal,488,Caching processed data for future use is a common optimization technique.,,1167,    ):,"[220, 220, 220, 15179]"
‚úÖ Best Practice: Explicitly specifying data types for DataFrame columns can improve performance and memory usage.,"[26486, 227, 6705, 19939, 25, 11884, 306, 31577, 1366, 3858, 329, 6060, 19778, 15180, 460, 2987, 2854, 290, 4088, 8748, 13]",0.5,1179,best_practice,491,Explicitly specifying data types for DataFrame columns can improve performance and memory usage.,,1171,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
üß† ML Signal: Use of a global configuration object,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 3298, 8398, 2134]",0.5,1195,ml_signal,496,Use of a global configuration object,,1179,            list of feature instances.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1351, 286, 3895, 10245, 13]"
üß† ML Signal: Iterating over column names to compute expressions,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 5721, 3891, 284, 24061, 14700]",1.0,1212,ml_signal,500,Iterating over column names to compute expressions,,1195,            end of the time range.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 286, 262, 640, 2837, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if data.index is not of expected type,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 1366, 13, 9630, 318, 407, 286, 2938, 2099]",0.5,1224,sast_risk,503,Potential issue if data.index is not of expected type,Low,1212,        disk_cache : int,"[220, 220, 220, 220, 220, 220, 220, 11898, 62, 23870, 1058, 493]"
üß† ML Signal: Use of a calendar object to adjust data index,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 11845, 2134, 284, 4532, 1366, 6376]",0.5,1224,ml_signal,505,Use of a calendar object to adjust data index,,1224,,[]
‚úÖ Best Practice: Explicitly setting index names for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6376, 3891, 329, 16287]",1.0,1266,best_practice,508,Explicitly setting index names for clarity,,1224,"        return DiskDatasetCache._uri(instruments, fields, start_time, end_time, freq, disk_cache, inst_processors)","[220, 220, 220, 220, 220, 220, 220, 1441, 31664, 27354, 292, 316, 30562, 13557, 9900, 7, 259, 2536, 2886, 11, 7032, 11, 923, 62, 2435, 11, 886, 62, 2435, 11, 2030, 80, 11, 11898, 62, 23870, 11, 916, 62, 14681, 669, 8]"
üß† ML Signal: Use of spans to filter data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 32727, 284, 8106, 1366]",1.0,1285,ml_signal,511,Use of spans to filter data,,1266,"    def get_instruments_d(instruments, freq):","[220, 220, 220, 825, 651, 62, 259, 2536, 2886, 62, 67, 7, 259, 2536, 2886, 11, 2030, 80, 2599]"
üß† ML Signal: Dynamic initialization of processor objects,"[8582, 100, 254, 10373, 26484, 25, 26977, 37588, 286, 12649, 5563]",0.5,1306,ml_signal,519,Dynamic initialization of processor objects,,1285,                # dict of stockpool config,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 8633, 286, 4283, 7742, 4566]"
üß† ML Signal: Applying processors to data,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 20399, 284, 1366]",1.0,1353,ml_signal,520,Applying processors to data,,1306,"                instruments_d = Inst.list_instruments(instruments=instruments, freq=freq, as_list=False)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12834, 62, 67, 796, 2262, 13, 4868, 62, 259, 2536, 2886, 7, 259, 2536, 2886, 28, 259, 2536, 2886, 11, 2030, 80, 28, 19503, 80, 11, 355, 62, 4868, 28, 25101, 8]"
‚úÖ Best Practice: Class docstring provides a brief description of the class functionality.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 11244, 13]",1.0,1374,best_practice,519,Class docstring provides a brief description of the class functionality.,,1353,                # dict of stockpool config,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 8633, 286, 4283, 7742, 4566]"
‚ö†Ô∏è SAST Risk (Low): Using a mutable default argument (backend={}) can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 257, 4517, 540, 4277, 4578, 357, 1891, 437, 34758, 30072, 460, 1085, 284, 10059, 4069, 13]",1.0,1395,sast_risk,519,Using a mutable default argument (backend={}) can lead to unexpected behavior.,Low,1374,                # dict of stockpool config,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 8633, 286, 4283, 7742, 4566]"
‚úÖ Best Practice: Call the superclass's __init__ method to ensure proper initialization.,"[26486, 227, 6705, 19939, 25, 4889, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 284, 4155, 1774, 37588, 13]",1.0,1408,best_practice,521,Call the superclass's __init__ method to ensure proper initialization.,,1395,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"üß† ML Signal: Storing parameters as instance variables, indicating object state management.","[8582, 100, 254, 10373, 26484, 25, 520, 3255, 10007, 355, 4554, 9633, 11, 12739, 2134, 1181, 4542, 13]",0.5,1428,ml_signal,523,"Storing parameters as instance variables, indicating object state management.",,1408,                instruments_d = instruments,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12834, 62, 67, 796, 12834]"
"üß† ML Signal: Storing parameters as instance variables, indicating object state management.","[8582, 100, 254, 10373, 26484, 25, 520, 3255, 10007, 355, 4554, 9633, 11, 12739, 2134, 1181, 4542, 13]",0.5,1460,ml_signal,524,"Storing parameters as instance variables, indicating object state management.",,1428,"        elif isinstance(instruments, (list, tuple, pd.Index, np.ndarray)):","[220, 220, 220, 220, 220, 220, 220, 1288, 361, 318, 39098, 7, 259, 2536, 2886, 11, 357, 4868, 11, 46545, 11, 279, 67, 13, 15732, 11, 45941, 13, 358, 18747, 8, 2599]"
"‚ö†Ô∏è SAST Risk (Low): Logging potentially sensitive information (freq, future) can lead to information disclosure.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 1321, 357, 19503, 80, 11, 2003, 8, 460, 1085, 284, 1321, 13019, 13]",0.5,1481,sast_risk,539,"Logging potentially sensitive information (freq, future) can lead to information disclosure.",Low,1460,        column_names = [str(f) for f in fields],"[220, 220, 220, 220, 220, 220, 220, 5721, 62, 14933, 796, 685, 2536, 7, 69, 8, 329, 277, 287, 7032, 60]"
‚ö†Ô∏è SAST Risk (Low): Logging URLs can expose internal documentation paths or sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 32336, 460, 15651, 5387, 10314, 13532, 393, 8564, 1321, 13]",0.5,1487,sast_risk,542,Logging URLs can expose internal documentation paths or sensitive information.,Low,1481,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
"üß† ML Signal: List comprehension used to transform data, indicating a pattern of data processing.","[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 973, 284, 6121, 1366, 11, 12739, 257, 3912, 286, 1366, 7587, 13]",0.5,1505,ml_signal,550,"List comprehension used to transform data, indicating a pattern of data processing.",,1487,"        Load and process the data, return the data set.","[220, 220, 220, 220, 220, 220, 220, 8778, 290, 1429, 262, 1366, 11, 1441, 262, 1366, 900, 13]"
‚úÖ Best Practice: Class docstring provides a brief description of the class functionality.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 11244, 13]",1.0,1513,best_practice,553,Class docstring provides a brief description of the class functionality.,,1505,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Using a mutable default argument (dictionary) can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 257, 4517, 540, 4277, 4578, 357, 67, 14188, 8, 460, 1085, 284, 10059, 4069, 13]",1.0,1521,sast_risk,553,Using a mutable default argument (dictionary) can lead to unexpected behavior.,Low,1513,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Ensure proper initialization by calling the superclass's __init__ method.,"[26486, 227, 6705, 19939, 25, 48987, 1774, 37588, 416, 4585, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 13]",0.5,1544,best_practice,555,Ensure proper initialization by calling the superclass's __init__ method.,,1521,"        # One process for one task, so that the memory will be freed quicker.","[220, 220, 220, 220, 220, 220, 220, 1303, 1881, 1429, 329, 530, 4876, 11, 523, 326, 262, 4088, 481, 307, 13459, 20061, 13]"
üß† ML Signal: Storing a parameter as an instance attribute.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 257, 11507, 355, 281, 4554, 11688, 13]",1.0,1544,ml_signal,557,Storing a parameter as an instance attribute.,,1544,,[]
"üß† ML Signal: Method name suggests a private method, indicating encapsulation and usage pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 257, 2839, 2446, 11, 12739, 32652, 1741, 290, 8748, 3912]",1.0,1577,ml_signal,556,"Method name suggests a private method, indicating encapsulation and usage pattern",,1544,"        workers = max(min(C.get_kernels(freq), len(instruments_d)), 1)","[220, 220, 220, 220, 220, 220, 220, 3259, 796, 3509, 7, 1084, 7, 34, 13, 1136, 62, 74, 44930, 7, 19503, 80, 828, 18896, 7, 259, 2536, 2886, 62, 67, 36911, 352, 8]"
‚úÖ Best Practice: Method name with underscore indicates intended private use,"[26486, 227, 6705, 19939, 25, 11789, 1438, 351, 44810, 9217, 5292, 2839, 779]",0.5,1577,best_practice,557,Method name with underscore indicates intended private use,,1577,,[]
üß† ML Signal: Usage of backend_obj suggests a pattern of dependency injection or composition,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 30203, 62, 26801, 5644, 257, 3912, 286, 20203, 16954, 393, 11742]",0.5,1596,ml_signal,559,Usage of backend_obj suggests a pattern of dependency injection or composition,,1577,"        if isinstance(instruments_d, dict):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 259, 2536, 2886, 62, 67, 11, 8633, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if backend_obj is not properly validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 30203, 62, 26801, 318, 407, 6105, 31031, 393, 5336, 36951]",0.5,1615,sast_risk,560,Potential risk if backend_obj is not properly validated or sanitized,Low,1596,            it = instruments_d.items(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 340, 796, 12834, 62, 67, 13, 23814, 3419]"
üß† ML Signal: Usage of dictionary access pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 22155, 1895, 3912]",1.0,1634,ml_signal,559,Usage of dictionary access pattern,,1615,"        if isinstance(instruments_d, dict):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 259, 2536, 2886, 62, 67, 11, 8633, 2599]"
üß† ML Signal: Method call pattern with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 351, 2176, 10007]",1.0,1646,ml_signal,564,Method call pattern with specific parameters,,1634,        inst_l = [],"[220, 220, 220, 220, 220, 220, 220, 916, 62, 75, 796, 17635]"
üß† ML Signal: Caching pattern using a dictionary,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 3912, 1262, 257, 22155]",0.5,1660,ml_signal,566,Caching pattern using a dictionary,,1646,"        for inst, spans in it:","[220, 220, 220, 220, 220, 220, 220, 329, 916, 11, 32727, 287, 340, 25]"
üß† ML Signal: Usage of external library for calendar operations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 5888, 329, 11845, 4560]",0.5,1677,ml_signal,568,Usage of external library for calendar operations,,1660,            task_l.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4876, 62, 75, 13, 33295, 7]"
üß† ML Signal: Usage of pandas for timestamp conversion,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 329, 41033, 11315]",1.0,1694,ml_signal,568,Usage of pandas for timestamp conversion,,1677,            task_l.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4876, 62, 75, 13, 33295, 7]"
üß† ML Signal: Usage of pandas for timestamp conversion,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 329, 41033, 11315]",1.0,1711,ml_signal,568,Usage of pandas for timestamp conversion,,1694,            task_l.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4876, 62, 75, 13, 33295, 7]"
‚úÖ Best Practice: Use of dictionary comprehension for filtering,"[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 35915, 329, 25431]",0.5,1763,best_practice,577,Use of dictionary comprehension for filtering,,1711,"                ParallelExt(n_jobs=workers, backend=C.joblib_backend, maxtasksperchild=C.maxtasksperchild)(task_l),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 42945, 11627, 7, 77, 62, 43863, 28, 22896, 11, 30203, 28, 34, 13, 21858, 8019, 62, 1891, 437, 11, 17266, 742, 6791, 525, 9410, 28, 34, 13, 2611, 742, 6791, 525, 9410, 5769, 35943, 62, 75, 828]"
‚úÖ Best Practice: Use of lambda for inline filtering,"[26486, 227, 6705, 19939, 25, 5765, 286, 37456, 329, 26098, 25431]",0.5,1775,best_practice,578,Use of lambda for inline filtering,,1763,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of list comprehension for transformation,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 35915, 329, 13389]",0.5,1775,best_practice,580,Use of list comprehension for transformation,,1775,,[]
‚úÖ Best Practice: Dictionary comprehension for filtering empty values,"[26486, 227, 6705, 19939, 25, 28261, 35915, 329, 25431, 6565, 3815]",0.5,1775,best_practice,586,Dictionary comprehension for filtering empty values,,1775,,[]
üß† ML Signal: Iteration over a list of configurations,"[8582, 100, 254, 10373, 26484, 25, 40806, 341, 625, 257, 1351, 286, 25412]",1.0,1792,ml_signal,587,Iteration over a list of configurations,,1775,        if len(new_data) > 0:,"[220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 3605, 62, 7890, 8, 1875, 657, 25]"
‚ö†Ô∏è SAST Risk (Low): Dynamic import and attribute access,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 26977, 1330, 290, 11688, 1895]",0.5,1811,sast_risk,591,Dynamic import and attribute access,Low,1792,            data = pd.DataFrame(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 279, 67, 13, 6601, 19778, 7]"
‚ö†Ô∏è SAST Risk (Low): Dynamic method resolution,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 26977, 2446, 6323]",0.5,1832,sast_risk,593,Dynamic method resolution,Low,1811,"                columns=column_names,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 28, 28665, 62, 14933, 11]"
üß† ML Signal: Method call with multiple parameters,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 3294, 10007]",1.0,1844,ml_signal,595,Method call with multiple parameters,,1832,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Conversion to list if required,"[26486, 227, 6705, 19939, 25, 44101, 284, 1351, 611, 2672]",0.5,1844,best_practice,598,Conversion to list if required,,1844,,[]
‚úÖ Best Practice: Class docstring provides a clear description of the class functionality,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 11244]",1.0,1844,best_practice,586,Class docstring provides a clear description of the class functionality,,1844,,[]
‚ö†Ô∏è SAST Risk (Low): Using a mutable default value (dictionary) for 'backend' can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 257, 4517, 540, 4277, 1988, 357, 67, 14188, 8, 329, 705, 1891, 437, 6, 460, 1085, 284, 10059, 4069, 13]",1.0,1853,sast_risk,590,Using a mutable default value (dictionary) for 'backend' can lead to unexpected behavior.,Low,1844,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Call the superclass's __init__ method to ensure proper initialization.,"[26486, 227, 6705, 19939, 25, 4889, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 284, 4155, 1774, 37588, 13]",1.0,1895,best_practice,592,Call the superclass's __init__ method to ensure proper initialization.,,1853,"                index=pd.MultiIndex.from_arrays([[], []], names=(""instrument"", ""datetime"")),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 28, 30094, 13, 29800, 15732, 13, 6738, 62, 3258, 592, 26933, 58, 4357, 17635, 4357, 3891, 28, 7203, 259, 43872, 1600, 366, 19608, 8079, 4943, 828]"
üß† ML Signal: Storing a boolean value in an instance variable.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 257, 25131, 1988, 287, 281, 4554, 7885, 13]",1.0,1918,ml_signal,594,Storing a boolean value in an instance variable.,,1895,"                dtype=np.float32,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 288, 4906, 28, 37659, 13, 22468, 2624, 11]"
üß† ML Signal: Storing a dictionary in an instance variable.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 257, 22155, 287, 281, 4554, 7885, 13]",1.0,1918,ml_signal,596,Storing a dictionary in an instance variable.,,1918,,[]
‚úÖ Best Practice: Consider adding type hints for better code readability and maintainability,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799]",0.5,1941,best_practice,594,Consider adding type hints for better code readability and maintainability,,1918,"                dtype=np.float32,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 288, 4906, 28, 37659, 13, 22468, 2624, 11]"
‚úÖ Best Practice: Converting field to string ensures consistent data type,"[26486, 227, 6705, 19939, 25, 35602, 889, 2214, 284, 4731, 19047, 6414, 1366, 2099]",1.0,1941,best_practice,596,Converting field to string ensures consistent data type,,1941,,[]
üß† ML Signal: Usage of a function to convert instrument code to filename,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 10385, 8875, 2438, 284, 29472]",0.5,1941,ml_signal,598,Usage of a function to convert instrument code to filename,,1941,,[]
üß† ML Signal: Slicing operation on the result of a function call,"[8582, 100, 254, 10373, 26484, 25, 311, 677, 278, 4905, 319, 262, 1255, 286, 257, 2163, 869]",0.5,1985,ml_signal,600,Slicing operation on the result of a function call,,1941,"    def inst_calculator(inst, start_time, end_time, freq, column_names, spans=None, g_config=None, inst_processors=[]):","[220, 220, 220, 825, 916, 62, 9948, 3129, 1352, 7, 8625, 11, 923, 62, 2435, 11, 886, 62, 2435, 11, 2030, 80, 11, 5721, 62, 14933, 11, 32727, 28, 14202, 11, 308, 62, 11250, 28, 14202, 11, 916, 62, 14681, 669, 28, 21737, 2599]"
"‚ö†Ô∏è SAST Risk (Low): No type checking for `instrument`, `field`, `start_index`, `end_index`, and `period`","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 2099, 10627, 329, 4600, 259, 43872, 47671, 4600, 3245, 47671, 4600, 9688, 62, 9630, 47671, 4600, 437, 62, 9630, 47671, 290, 4600, 41007, 63]",1.0,2029,sast_risk,600,"No type checking for `instrument`, `field`, `start_index`, `end_index`, and `period`",Low,1985,"    def inst_calculator(inst, start_time, end_time, freq, column_names, spans=None, g_config=None, inst_processors=[]):","[220, 220, 220, 825, 916, 62, 9948, 3129, 1352, 7, 8625, 11, 923, 62, 2435, 11, 886, 62, 2435, 11, 2030, 80, 11, 5721, 62, 14933, 11, 32727, 28, 14202, 11, 308, 62, 11250, 28, 14202, 11, 916, 62, 14681, 669, 28, 21737, 2599]"
‚úÖ Best Practice: Convert `field` to lowercase to ensure consistent processing,"[26486, 227, 6705, 19939, 25, 38240, 4600, 3245, 63, 284, 2793, 7442, 284, 4155, 6414, 7587]",1.0,2043,best_practice,613,Convert `field` to lowercase to ensure consistent processing,,2029,        for field in column_names:,"[220, 220, 220, 220, 220, 220, 220, 329, 2214, 287, 5721, 62, 14933, 25]"
‚úÖ Best Practice: Use a descriptive function name like `convert_code_to_filename`,"[26486, 227, 6705, 19939, 25, 5765, 257, 35644, 2163, 1438, 588, 4600, 1102, 1851, 62, 8189, 62, 1462, 62, 34345, 63]",1.0,2079,best_practice,615,Use a descriptive function name like `convert_code_to_filename`,,2043,"            obj[field] = ExpressionD.expression(inst, field, start_time, end_time, freq)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 26181, 58, 3245, 60, 796, 41986, 35, 13, 38011, 7, 8625, 11, 2214, 11, 923, 62, 2435, 11, 886, 62, 2435, 11, 2030, 80, 8]"
‚úÖ Best Practice: Use `os.path.join` for path construction to ensure cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 5765, 4600, 418, 13, 6978, 13, 22179, 63, 329, 3108, 5103, 284, 4155, 3272, 12, 24254, 17764]",0.5,2105,best_practice,620,Use `os.path.join` for path construction to ensure cross-platform compatibility,,2079,            _calendar = Cal.calendar(freq=freq),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 9948, 9239, 796, 2199, 13, 9948, 9239, 7, 19503, 80, 28, 19503, 80, 8]"
‚ö†Ô∏è SAST Risk (Low): Potentially large file read into memory,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 1588, 2393, 1100, 656, 4088]",0.5,2132,sast_risk,625,Potentially large file read into memory,Low,2105,"            mask = np.zeros(len(data), dtype=bool)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9335, 796, 45941, 13, 9107, 418, 7, 11925, 7, 7890, 828, 288, 4906, 28, 30388, 8]"
‚úÖ Best Practice: Use `cur_time.strftime('%Y%m%d')` for clarity,"[26486, 227, 6705, 19939, 25, 5765, 4600, 22019, 62, 2435, 13, 2536, 31387, 10786, 4, 56, 4, 76, 4, 67, 11537, 63, 329, 16287]",0.5,2165,best_practice,627,Use `cur_time.strftime('%Y%m%d')` for clarity,,2132,                mask |= (data.index >= begin) & (data.index <= end),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9335, 930, 28, 357, 7890, 13, 9630, 18189, 2221, 8, 1222, 357, 7890, 13, 9630, 19841, 886, 8]"
üß† ML Signal: Usage of `get_period_list` function indicates a pattern for period list generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4600, 1136, 62, 41007, 62, 4868, 63, 2163, 9217, 257, 3912, 329, 2278, 1351, 5270]",0.5,2193,ml_signal,633,Usage of `get_period_list` function indicates a pattern for period list generation,,2165,"                data = _processor_obj(data, instrument=inst)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 4808, 41341, 62, 26801, 7, 7890, 11, 8875, 28, 8625, 8]"
‚ö†Ô∏è SAST Risk (Low): Use of `np.full` with `np.nan` might lead to unexpected behavior if `VALUE_DTYPE` is not float,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 4600, 37659, 13, 12853, 63, 351, 4600, 37659, 13, 12647, 63, 1244, 1085, 284, 10059, 4069, 611, 4600, 39488, 62, 35, 25216, 63, 318, 407, 12178]",0.5,2211,sast_risk,643,Use of `np.full` with `np.nan` might lead to unexpected behavior if `VALUE_DTYPE` is not float,Low,2193,"    def __init__(self, remote=False, backend={}):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 6569, 28, 25101, 11, 30203, 34758, 92, 2599]"
üß† ML Signal: Iterating over `period_list` to read period data is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 4600, 41007, 62, 4868, 63, 284, 1100, 2278, 1366, 318, 257, 2219, 3912]",0.5,2211,ml_signal,647,Iterating over `period_list` to read period data is a common pattern,,2211,,[]
‚úÖ Best Practice: Explicitly specify `dtype` for `pd.Series` for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 11986, 4600, 67, 4906, 63, 329, 4600, 30094, 13, 27996, 63, 329, 16287]",0.5,2211,best_practice,650,Explicitly specify `dtype` for `pd.Series` for clarity,,2211,,[]
‚úÖ Best Practice: Class docstring provides a clear description of the class purpose and functionality.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 290, 11244, 13]",1.0,2211,best_practice,647,Class docstring provides a clear description of the class purpose and functionality.,,2211,,[]
‚úÖ Best Practice: Call to super() ensures proper initialization of the base class,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 3419, 19047, 1774, 37588, 286, 262, 2779, 1398]",0.5,2227,best_practice,648,Call to super() ensures proper initialization of the base class,,2211,"    def load_calendar(self, freq, future):","[220, 220, 220, 825, 3440, 62, 9948, 9239, 7, 944, 11, 2030, 80, 11, 2003, 2599]"
üß† ML Signal: Use of a boolean parameter to toggle functionality,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 25131, 11507, 284, 19846, 11244]",0.5,2227,ml_signal,650,Use of a boolean parameter to toggle functionality,,2227,,[]
"üß† ML Signal: Method signature with multiple parameters, including optional ones","[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 3294, 10007, 11, 1390, 11902, 3392]",1.0,2235,ml_signal,651,"Method signature with multiple parameters, including optional ones",,2227,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚úÖ Best Practice: Descriptive variable names for readability,"[26486, 227, 6705, 19939, 25, 2935, 6519, 425, 7885, 3891, 329, 1100, 1799]",0.5,2244,best_practice,657,Descriptive variable names for readability,,2235,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
‚ö†Ô∏è SAST Risk (Low): Broad exception handling without specific error types,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 9765, 6631, 9041, 1231, 2176, 4049, 3858]",0.5,2255,sast_risk,663,Broad exception handling without specific error types,Low,2244,        except ValueError:,"[220, 220, 220, 220, 220, 220, 220, 2845, 11052, 12331, 25]"
‚úÖ Best Practice: Class docstring provides a clear description of the class purpose and functionality.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 290, 11244, 13]",1.0,2259,best_practice,682,Class docstring provides a clear description of the class purpose and functionality.,,2255,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use of type hints for function parameters improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2259,best_practice,683,Use of type hints for function parameters improves code readability and maintainability.,,2259,,[]
‚úÖ Best Practice: Calling the superclass's __init__ method ensures proper initialization of the base class.,"[26486, 227, 6705, 19939, 25, 32677, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 286, 262, 2779, 1398, 13]",1.0,2282,best_practice,694,Calling the superclass's __init__ method ensures proper initialization of the base class.,,2259,"            _instruments = H[""i""][market]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 259, 2536, 2886, 796, 367, 14692, 72, 1, 7131, 10728, 60]"
üß† ML Signal: Storing a parameter as an instance variable indicates its importance in the object's behavior.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 257, 11507, 355, 281, 4554, 7885, 9217, 663, 6817, 287, 262, 2134, 338, 4069, 13]",1.0,2305,ml_signal,694,Storing a parameter as an instance variable indicates its importance in the object's behavior.,,2282,"            _instruments = H[""i""][market]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 259, 2536, 2886, 796, 367, 14692, 72, 1, 7131, 10728, 60]"
‚úÖ Best Practice: Consider using a default value of None for mutable default arguments like lists to avoid unexpected behavior.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 4277, 1988, 286, 6045, 329, 4517, 540, 4277, 7159, 588, 8341, 284, 3368, 10059, 4069, 13]",1.0,2321,best_practice,703,Consider using a default value of None for mutable default arguments like lists to avoid unexpected behavior.,,2305,        _instruments_filtered = {,"[220, 220, 220, 220, 220, 220, 220, 4808, 259, 2536, 2886, 62, 10379, 4400, 796, 1391]"
üß† ML Signal: Usage of external data source or API,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 1366, 2723, 393, 7824]",1.0,2336,ml_signal,723,Usage of external data source or API,,2321,        return _instruments_filtered,"[220, 220, 220, 220, 220, 220, 220, 1441, 4808, 259, 2536, 2886, 62, 10379, 4400]"
üß† ML Signal: Usage of external data source or API,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 1366, 2723, 393, 7824]",1.0,2336,ml_signal,725,Usage of external data source or API,,2336,,[]
üß† ML Signal: Usage of external data source or API,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 1366, 2723, 393, 7824]",1.0,2345,ml_signal,727,Usage of external data source or API,,2336,"    """"""Local feature data provider class","[220, 220, 220, 37227, 14565, 3895, 1366, 10131, 1398]"
‚úÖ Best Practice: Reassigning start_time and end_time for clarity,"[26486, 227, 6705, 19939, 25, 797, 562, 38944, 923, 62, 2435, 290, 886, 62, 2435, 329, 16287]",0.5,2345,best_practice,731,Reassigning start_time and end_time for clarity,,2345,,[]
‚úÖ Best Practice: Calculating workers based on available resources,"[26486, 227, 6705, 19939, 25, 27131, 803, 3259, 1912, 319, 1695, 4133]",0.5,2357,best_practice,734,Calculating workers based on available resources,,2345,        self.remote = remote,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 47960, 796, 6569]"
üß† ML Signal: Usage of parallel processing,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10730, 7587]",1.0,2357,ml_signal,736,Usage of parallel processing,,2357,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for race conditions in parallel execution,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3234, 3403, 287, 10730, 9706]",1.0,2380,sast_risk,737,Potential for race conditions in parallel execution,Low,2357,"    def feature(self, instrument, field, start_index, end_index, freq):","[220, 220, 220, 825, 3895, 7, 944, 11, 8875, 11, 2214, 11, 923, 62, 9630, 11, 886, 62, 9630, 11, 2030, 80, 2599]"
üß† ML Signal: Usage of delayed execution pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11038, 9706, 3912]",1.0,2403,ml_signal,737,Usage of delayed execution pattern,,2380,"    def feature(self, instrument, field, start_index, end_index, freq):","[220, 220, 220, 825, 3895, 7, 944, 11, 8875, 11, 2214, 11, 923, 62, 9630, 11, 886, 62, 9630, 11, 2030, 80, 2599]"
üß† ML Signal: Iterating over a list of column names to perform operations on each,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 5721, 3891, 284, 1620, 4560, 319, 1123]",0.5,2444,ml_signal,741,Iterating over a list of column names to perform operations on each,,2403,"        return self.backend_obj(instrument=instrument, field=field, freq=freq)[start_index : end_index + 1]","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 1891, 437, 62, 26801, 7, 259, 43872, 28, 259, 43872, 11, 2214, 28, 3245, 11, 2030, 80, 28, 19503, 80, 38381, 9688, 62, 9630, 1058, 886, 62, 9630, 1343, 352, 60]"
üß† ML Signal: Use of a method to calculate and cache expressions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 284, 15284, 290, 12940, 14700]",0.5,2444,ml_signal,743,Use of a method to calculate and cache expressions,,2444,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for resource-intensive operations if not managed properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 8271, 12, 38096, 4560, 611, 407, 5257, 6105]",0.5,2454,sast_risk,744,Potential for resource-intensive operations if not managed properly,Low,2444,class LocalPITProvider(PITProvider):,"[4871, 10714, 47, 2043, 29495, 7, 47, 2043, 29495, 2599]"
‚úÖ Best Practice: Class docstring provides a clear description of the class purpose and functionality,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 290, 11244]",0.5,2454,best_practice,743,Class docstring provides a clear description of the class purpose and functionality,,2454,,[]
‚úÖ Best Practice: Docstring provides a clear description of the class functionality,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 11244]",0.5,2464,best_practice,744,Docstring provides a clear description of the class functionality,,2454,class LocalPITProvider(PITProvider):,"[4871, 10714, 47, 2043, 29495, 7, 47, 2043, 29495, 2599]"
‚úÖ Best Practice: Initialize instance variables in the constructor for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799]",1.0,2494,best_practice,748,Initialize instance variables in the constructor for clarity and maintainability,,2464,"    def period_feature(self, instrument, field, start_index, end_index, cur_time, period=None):","[220, 220, 220, 825, 2278, 62, 30053, 7, 944, 11, 8875, 11, 2214, 11, 923, 62, 9630, 11, 886, 62, 9630, 11, 1090, 62, 2435, 11, 2278, 28, 14202, 2599]"
‚úÖ Best Practice: Use of queue.Queue() for thread-safe FIFO implementation,"[26486, 227, 6705, 19939, 25, 5765, 286, 16834, 13, 34991, 3419, 329, 4704, 12, 21230, 376, 5064, 46, 7822]",1.0,2509,best_practice,750,Use of queue.Queue() for thread-safe FIFO implementation,,2494,            raise ValueError(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7]"
‚úÖ Best Practice: Consider validating the 'conn' parameter to ensure it meets expected criteria.,"[26486, 227, 6705, 19939, 25, 12642, 4938, 803, 262, 705, 37043, 6, 11507, 284, 4155, 340, 11185, 2938, 9987, 13]",0.5,2524,best_practice,750,Consider validating the 'conn' parameter to ensure it meets expected criteria.,,2509,            raise ValueError(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7]"
üß† ML Signal: Storing a connection object in an instance variable is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 257, 4637, 2134, 287, 281, 4554, 7885, 318, 257, 2219, 3912, 13]",0.5,2536,ml_signal,752,Storing a connection object in an instance variable is a common pattern.,,2524,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Method signature with default parameters indicates common usage patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 4277, 10007, 9217, 2219, 8748, 7572]",0.5,2536,ml_signal,753,Method signature with default parameters indicates common usage patterns,,2536,,[]
‚úÖ Best Practice: Use of default parameters for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 10007, 329, 13688, 290, 10152, 286, 779]",0.5,2536,best_practice,753,Use of default parameters for flexibility and ease of use,,2536,,[]
üß† ML Signal: Use of dictionary for request content shows common data structure usage,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 329, 2581, 2695, 2523, 2219, 1366, 4645, 8748]",0.5,2561,ml_signal,759,Use of dictionary for request content shows common data structure usage,,2536,"            (""value"", C.pit_record_type[""value""]),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5855, 8367, 1600, 327, 13, 15544, 62, 22105, 62, 4906, 14692, 8367, 8973, 828]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if start_time or end_time are not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 923, 62, 2435, 393, 886, 62, 2435, 389, 407, 6105, 31031]",0.5,2586,sast_risk,759,Potential risk if start_time or end_time are not properly validated,Low,2561,"            (""value"", C.pit_record_type[""value""]),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5855, 8367, 1600, 327, 13, 15544, 62, 22105, 62, 4906, 14692, 8367, 8973, 828]"
üß† ML Signal: Use of lambda function for processing response content,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 2163, 329, 7587, 2882, 2695]",0.5,2594,ml_signal,761,Use of lambda function for processing response content,,2586,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
‚ö†Ô∏è SAST Risk (Low): Assumes response_content is a list of valid timestamps,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 2882, 62, 11299, 318, 257, 1351, 286, 4938, 4628, 395, 9430]",0.5,2617,sast_risk,762,Assumes response_content is a list of valid timestamps,Low,2594,"        VALUE_DTYPE = C.pit_record_type[""value""]","[220, 220, 220, 220, 220, 220, 220, 26173, 8924, 62, 35, 25216, 796, 327, 13, 15544, 62, 22105, 62, 4906, 14692, 8367, 8973]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if queue.get() does not handle timeout properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 16834, 13, 1136, 3419, 857, 407, 5412, 26827, 6105]",0.5,2617,sast_risk,766,Potential risk if queue.get() does not handle timeout properly,Low,2617,,[]
‚úÖ Best Practice: Returning the result directly for simplicity,"[26486, 227, 6705, 19939, 25, 42882, 262, 1255, 3264, 329, 21654]",0.5,2643,best_practice,768,Returning the result directly for simplicity,,2617,"        # start_index, end_index, cur_index = kwargs[""info""]","[220, 220, 220, 220, 220, 220, 220, 1303, 923, 62, 9630, 11, 886, 62, 9630, 11, 1090, 62, 9630, 796, 479, 86, 22046, 14692, 10951, 8973]"
‚úÖ Best Practice: Class docstring provides a clear description of the class purpose and functionality,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 290, 11244]",1.0,2651,best_practice,761,Class docstring provides a clear description of the class purpose and functionality,,2643,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
‚úÖ Best Practice: Initialize instance variables in the constructor for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799]",1.0,2651,best_practice,766,Initialize instance variables in the constructor for clarity and maintainability,,2651,,[]
‚úÖ Best Practice: Use of queue.Queue() for thread-safe FIFO implementation,"[26486, 227, 6705, 19939, 25, 5765, 286, 16834, 13, 34991, 3419, 329, 4704, 12, 21230, 376, 5064, 46, 7822]",0.5,2677,best_practice,768,Use of queue.Queue() for thread-safe FIFO implementation,,2651,"        # start_index, end_index, cur_index = kwargs[""info""]","[220, 220, 220, 220, 220, 220, 220, 1303, 923, 62, 9630, 11, 886, 62, 9630, 11, 1090, 62, 9630, 796, 479, 86, 22046, 14692, 10951, 8973]"
"üß† ML Signal: Method for setting a connection attribute, indicating a pattern of managing connections","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 4634, 257, 4637, 11688, 11, 12739, 257, 3912, 286, 11149, 8787]",1.0,2703,ml_signal,768,"Method for setting a connection attribute, indicating a pattern of managing connections",,2677,"        # start_index, end_index, cur_index = kwargs[""info""]","[220, 220, 220, 220, 220, 220, 220, 1303, 923, 62, 9630, 11, 886, 62, 9630, 11, 1090, 62, 9630, 796, 479, 86, 22046, 14692, 10951, 8973]"
"üß† ML Signal: Storing a connection object, useful for understanding connection management patterns","[8582, 100, 254, 10373, 26484, 25, 520, 3255, 257, 4637, 2134, 11, 4465, 329, 4547, 4637, 4542, 7572]",0.5,2728,ml_signal,770,"Storing a connection object, useful for understanding connection management patterns",,2703,"        #     if not hasattr(self, ""all_fields""):","[220, 220, 220, 220, 220, 220, 220, 1303, 220, 220, 220, 220, 611, 407, 468, 35226, 7, 944, 11, 366, 439, 62, 25747, 1, 2599]"
‚ö†Ô∏è SAST Risk (Low): Directly assigning external connection object without validation or sanitization,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 38875, 7097, 4637, 2134, 1231, 21201, 393, 5336, 270, 1634]",1.0,2751,sast_risk,771,Directly assigning external connection object without validation or sanitization,Low,2728,        #         self.all_fields = [],"[220, 220, 220, 220, 220, 220, 220, 1303, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 439, 62, 25747, 796, 17635]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,2776,best_practice,770,Consider adding a docstring to describe the function's purpose and parameters,,2751,"        #     if not hasattr(self, ""all_fields""):","[220, 220, 220, 220, 220, 220, 220, 1303, 220, 220, 220, 220, 611, 407, 468, 35226, 7, 944, 11, 366, 439, 62, 25747, 1, 2599]"
‚úÖ Best Practice: Use dictionary comprehension for concise and readable code,"[26486, 227, 6705, 19939, 25, 5765, 22155, 35915, 329, 35327, 290, 31744, 2438]",1.0,2801,best_practice,773,Use dictionary comprehension for concise and readable code,,2776,"        #     if not hasattr(self, ""period_index""):","[220, 220, 220, 220, 220, 220, 220, 1303, 220, 220, 220, 220, 611, 407, 468, 35226, 7, 944, 11, 366, 41007, 62, 9630, 1, 2599]"
üß† ML Signal: Usage of a custom message processing function,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 3275, 7587, 2163]",0.5,2831,ml_signal,779,Usage of a custom message processing function,,2801,"        if not field.endswith(""_q"") and not field.endswith(""_a""):","[220, 220, 220, 220, 220, 220, 220, 611, 407, 2214, 13, 437, 2032, 342, 7203, 62, 80, 4943, 290, 407, 2214, 13, 437, 2032, 342, 7203, 62, 64, 1, 2599]"
üß† ML Signal: Use of a queue to handle asynchronous message processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 16834, 284, 5412, 39354, 3275, 7587]",0.5,2858,ml_signal,793,Use of a queue to handle asynchronous message processing,,2831,"        data = np.fromfile(data_path, dtype=DATA_RECORDS)","[220, 220, 220, 220, 220, 220, 220, 1366, 796, 45941, 13, 6738, 7753, 7, 7890, 62, 6978, 11, 288, 4906, 28, 26947, 62, 38827, 1581, 5258, 8]"
‚ö†Ô∏è SAST Risk (Medium): Potential for unhandled exceptions if result is an unexpected type,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 555, 38788, 13269, 611, 1255, 318, 281, 10059, 2099]",0.5,2876,sast_risk,795,Potential for unhandled exceptions if result is an unexpected type,Medium,2858,        # find all revision periods before `cur_time`,"[220, 220, 220, 220, 220, 220, 220, 1303, 1064, 477, 18440, 9574, 878, 4600, 22019, 62, 2435, 63]"
üß† ML Signal: Logging of debug information,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 286, 14257, 1321]",0.5,2905,ml_signal,797,Logging of debug information,,2876,"        loc = np.searchsorted(data[""date""], cur_time_int, side=""right"")","[220, 220, 220, 220, 220, 220, 220, 1179, 796, 45941, 13, 12947, 82, 9741, 7, 7890, 14692, 4475, 33116, 1090, 62, 2435, 62, 600, 11, 1735, 2625, 3506, 4943]"
‚úÖ Best Practice: Class docstring provides a clear description of the class purpose and functionality,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 290, 11244]",1.0,2932,best_practice,800,Class docstring provides a clear description of the class purpose and functionality,,2905,"        last_period = data[""period""][:loc].max()  # return the latest quarter","[220, 220, 220, 220, 220, 220, 220, 938, 62, 41007, 796, 1366, 14692, 41007, 1, 7131, 25, 17946, 4083, 9806, 3419, 220, 1303, 1441, 262, 3452, 3860]"
‚úÖ Best Practice: Initialize instance variables in the constructor,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772]",1.0,2953,best_practice,801,Initialize instance variables in the constructor,,2932,"        first_period = data[""period""][:loc].min()","[220, 220, 220, 220, 220, 220, 220, 717, 62, 41007, 796, 1366, 14692, 41007, 1, 7131, 25, 17946, 4083, 1084, 3419]"
"üß† ML Signal: Method for setting a connection object, indicating a pattern of resource management","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 4634, 257, 4637, 2134, 11, 12739, 257, 3912, 286, 8271, 4542]",1.0,2966,ml_signal,803,"Method for setting a connection object, indicating a pattern of resource management",,2953,        if period is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 2278, 318, 407, 6045, 25]"
"‚ö†Ô∏è SAST Risk (Low): Potential for improper handling of connection objects, leading to resource leaks","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 18992, 9041, 286, 4637, 5563, 11, 3756, 284, 8271, 17316]",0.5,2998,sast_risk,804,"Potential for improper handling of connection objects, leading to resource leaks",Low,2966,            # NOTE: `period` has higher priority than `start_index` & `end_index`,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 4600, 41007, 63, 468, 2440, 8475, 621, 4600, 9688, 62, 9630, 63, 1222, 4600, 437, 62, 9630, 63]"
‚úÖ Best Practice: Initializing a queue for managing tasks or messages,"[26486, 227, 6705, 19939, 25, 20768, 2890, 257, 16834, 329, 11149, 8861, 393, 6218]",0.5,3017,best_practice,805,Initializing a queue for managing tasks or messages,,2998,            if period not in period_list:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2278, 407, 287, 2278, 62, 4868, 25]"
üß† ML Signal: Use of default parameters and optional arguments,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 10007, 290, 11902, 7159]",0.5,3029,ml_signal,816,Use of default parameters and optional arguments,,3017,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Logging sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 8564, 1321]",0.5,3063,sast_risk,817,Logging sensitive information,Low,3029,            # self.period_index[field].update({period: now_period_index})  # For acceleration,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 2116, 13, 41007, 62, 9630, 58, 3245, 4083, 19119, 15090, 41007, 25, 783, 62, 41007, 62, 9630, 30072, 220, 1303, 1114, 20309]"
‚ö†Ô∏è SAST Risk (Medium): Potential server-side request forgery (SSRF) vulnerability,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 4382, 12, 1589, 2581, 329, 7076, 357, 5432, 32754, 8, 15131]",0.5,3074,sast_risk,828,Potential server-side request forgery (SSRF) vulnerability,Medium,3063,        # For acceleration},"[220, 220, 220, 220, 220, 220, 220, 1303, 1114, 20309, 92]"
‚ö†Ô∏è SAST Risk (Medium): Potential denial of service (DoS) if queue is not properly managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 14425, 286, 2139, 357, 46498, 8, 611, 16834, 318, 407, 6105, 5257]",0.5,3074,sast_risk,842,Potential denial of service (DoS) if queue is not properly managed,Medium,3074,,[]
üß† ML Signal: Use of data processing and transformation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1366, 7587, 290, 13389]",0.5,3083,ml_signal,858,Use of data processing and transformation,,3074,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚ö†Ô∏è SAST Risk (Low): Use of ValueError for control flow,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 11052, 12331, 329, 1630, 5202]",0.5,3099,sast_risk,870,Use of ValueError for control flow,Low,3083,        # 2) The precision should be configurable,"[220, 220, 220, 220, 220, 220, 220, 1303, 362, 8, 383, 15440, 815, 307, 4566, 11970]"
‚ö†Ô∏è SAST Risk (Medium): Potential server-side request forgery (SSRF) vulnerability,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 4382, 12, 1589, 2581, 329, 7076, 357, 5432, 32754, 8, 15131]",0.5,3115,sast_risk,870,Potential server-side request forgery (SSRF) vulnerability,Medium,3099,        # 2) The precision should be configurable,"[220, 220, 220, 220, 220, 220, 220, 1303, 362, 8, 383, 15440, 815, 307, 4566, 11970]"
‚ö†Ô∏è SAST Risk (Medium): Potential denial of service (DoS) if queue is not properly managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 14425, 286, 2139, 357, 46498, 8, 611, 16834, 318, 407, 6105, 5257]",0.5,3123,sast_risk,889,Potential denial of service (DoS) if queue is not properly managed,Medium,3115,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Logging sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 8564, 1321]",0.5,3135,sast_risk,892,Logging sensitive information,Low,3123,        align_time : bool,"[220, 220, 220, 220, 220, 220, 220, 10548, 62, 2435, 1058, 20512]"
‚ö†Ô∏è SAST Risk (Medium): Potential path traversal vulnerability,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 3108, 33038, 282, 15131]",0.5,3135,sast_risk,896,Potential path traversal vulnerability,Medium,3135,,[]
‚ö†Ô∏è SAST Risk (Low): Logging sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 8564, 1321]",0.5,3135,sast_risk,901,Logging sensitive information,Low,3135,,[]
‚ö†Ô∏è SAST Risk (Low): Use of IOError for control flow,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 24418, 12331, 329, 1630, 5202]",0.5,3144,sast_risk,905,Use of IOError for control flow,Low,3135,"        fields,","[220, 220, 220, 220, 220, 220, 220, 7032, 11]"
‚úÖ Best Practice: Class docstring provides a clear description of the class purpose and usage.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 290, 8748, 13]",1.0,3144,best_practice,901,Class docstring provides a clear description of the class purpose and usage.,,3144,,[]
‚úÖ Best Practice: Use of default parameter values for function arguments,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 2163, 7159]",1.0,3144,best_practice,901,Use of default parameter values for function arguments,,3144,,[]
üß† ML Signal: Delegating functionality to another class method,"[8582, 100, 254, 10373, 26484, 25, 1024, 1455, 803, 11244, 284, 1194, 1398, 2446]",1.0,3153,ml_signal,903,Delegating functionality to another class method,,3144,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",0.5,3162,best_practice,904,Use of default parameter values for flexibility and ease of use,,3153,"        instruments,","[220, 220, 220, 220, 220, 220, 220, 12834, 11]"
‚úÖ Best Practice: Logging a warning to inform users about ignored parameters,"[26486, 227, 6705, 19939, 25, 5972, 2667, 257, 6509, 284, 4175, 2985, 546, 9514, 10007]",0.5,3171,best_practice,905,Logging a warning to inform users about ignored parameters,,3162,"        fields,","[220, 220, 220, 220, 220, 220, 220, 7032, 11]"
üß† ML Signal: Method call pattern with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 351, 2176, 10007]",0.5,3199,ml_signal,911,Method call pattern with specific parameters,,3171,"        instruments_d = self.get_instruments_d(instruments, freq)","[220, 220, 220, 220, 220, 220, 220, 12834, 62, 67, 796, 2116, 13, 1136, 62, 259, 2536, 2886, 62, 67, 7, 259, 2536, 2886, 11, 2030, 80, 8]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,3203,best_practice,910,Consider adding a docstring to describe the function's purpose and parameters,,3199,    ):,"[220, 220, 220, 15179]"
üß† ML Signal: Usage of default parameters can indicate common use cases or preferences,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4277, 10007, 460, 7603, 2219, 779, 2663, 393, 15387]",0.5,3224,ml_signal,912,Usage of default parameters can indicate common use cases or preferences,,3203,        column_names = self.get_column_names(fields),"[220, 220, 220, 220, 220, 220, 220, 5721, 62, 14933, 796, 2116, 13, 1136, 62, 28665, 62, 14933, 7, 25747, 8]"
‚úÖ Best Practice: Ensure that the Inst class and its list_instruments method are well-documented,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 2262, 1398, 290, 663, 1351, 62, 259, 2536, 2886, 2446, 389, 880, 12, 47045]",0.5,3245,best_practice,912,Ensure that the Inst class and its list_instruments method are well-documented,,3224,        column_names = self.get_column_names(fields),"[220, 220, 220, 220, 220, 220, 220, 5721, 62, 14933, 796, 2116, 13, 1136, 62, 28665, 62, 14933, 7, 25747, 8]"
‚úÖ Best Practice: Provide a detailed docstring for function parameters and behavior.,"[26486, 227, 6705, 19939, 25, 44290, 257, 6496, 2205, 8841, 329, 2163, 10007, 290, 4069, 13]",0.5,3265,best_practice,922,Provide a detailed docstring for function parameters and behavior.,,3245,            end_time = cal[-1],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 796, 2386, 58, 12, 16, 60]"
‚úÖ Best Practice: Use a default value from a configuration or constants class.,"[26486, 227, 6705, 19939, 25, 5765, 257, 4277, 1988, 422, 257, 8398, 393, 38491, 1398, 13]",0.5,3285,best_practice,932,Use a default value from a configuration or constants class.,,3265,        This method is used to prepare the expression cache for the client.,"[220, 220, 220, 220, 220, 220, 220, 770, 2446, 318, 973, 284, 8335, 262, 5408, 12940, 329, 262, 5456, 13]"
‚úÖ Best Practice: Convert fields to a list to ensure consistent data type.,"[26486, 227, 6705, 19939, 25, 38240, 7032, 284, 257, 1351, 284, 4155, 6414, 1366, 2099, 13]",0.5,3285,best_practice,934,Convert fields to a list to ensure consistent data type.,,3285,,[]
üß† ML Signal: Usage of try-except to handle potential errors in function calls.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1949, 12, 16341, 284, 5412, 2785, 8563, 287, 2163, 3848, 13]",1.0,3310,ml_signal,938,Usage of try-except to handle potential errors in function calls.,,3285,"        cal = Cal.calendar(start_time, end_time, freq)","[220, 220, 220, 220, 220, 220, 220, 2386, 796, 2199, 13, 9948, 9239, 7, 9688, 62, 2435, 11, 886, 62, 2435, 11, 2030, 80, 8]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can mask other issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 9335, 584, 2428, 13]",1.0,3325,sast_risk,941,Catching broad exceptions can mask other issues.,Low,3310,        start_time = cal[0],"[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 796, 2386, 58, 15, 60]"
‚úÖ Best Practice: Add a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,3340,best_practice,941,Add a docstring to describe the function's purpose and parameters,,3325,        start_time = cal[0],"[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 796, 2386, 58, 15, 60]"
‚úÖ Best Practice: Use a more descriptive variable name than 'type' to avoid shadowing built-in names,"[26486, 227, 6705, 19939, 25, 5765, 257, 517, 35644, 7885, 1438, 621, 705, 4906, 6, 284, 3368, 9082, 278, 3170, 12, 259, 3891]",0.5,3348,best_practice,948,Use a more descriptive variable name than 'type' to avoid shadowing built-in names,,3340,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Pattern of delegating URI generation based on type,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 8570, 803, 43975, 5270, 1912, 319, 2099]",0.5,3354,ml_signal,950,Pattern of delegating URI generation based on type,,3348,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
üß† ML Signal: Pattern of delegating URI generation based on type,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 8570, 803, 43975, 5270, 1912, 319, 2099]",0.5,3373,ml_signal,953,Pattern of delegating URI generation based on type,,3354,"        If the expressions of one instrument haven't been calculated before,","[220, 220, 220, 220, 220, 220, 220, 1002, 262, 14700, 286, 530, 8875, 4398, 470, 587, 10488, 878, 11]"
üß† ML Signal: Pattern of delegating URI generation based on type,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 8570, 803, 43975, 5270, 1912, 319, 2099]",0.5,3389,ml_signal,954,Pattern of delegating URI generation based on type,,3373,        calculate it and write it into expression cache.,"[220, 220, 220, 220, 220, 220, 220, 15284, 340, 290, 3551, 340, 656, 5408, 12940, 13]"
‚úÖ Best Practice: Provide a clear and concise docstring for the function.,"[26486, 227, 6705, 19939, 25, 44290, 257, 1598, 290, 35327, 2205, 8841, 329, 262, 2163, 13]",0.5,3405,best_practice,954,Provide a clear and concise docstring for the function.,,3389,        calculate it and write it into expression cache.,"[220, 220, 220, 220, 220, 220, 220, 15284, 340, 290, 3551, 340, 656, 5408, 12940, 13]"
üß† ML Signal: Function signature and parameters can be used to infer usage patterns and data flow.,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 290, 10007, 460, 307, 973, 284, 13249, 8748, 7572, 290, 1366, 5202, 13]",0.5,3420,ml_signal,964,Function signature and parameters can be used to infer usage patterns and data flow.,,3405,    Provide calendar data by requesting data from server as a client.,"[220, 220, 220, 44290, 11845, 1366, 416, 20623, 1366, 422, 4382, 355, 257, 5456, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `disk_cache` is used insecurely in the called function.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 39531, 62, 23870, 63, 318, 973, 31955, 306, 287, 262, 1444, 2163, 13]",0.5,3424,sast_risk,965,Potential risk if `disk_cache` is used insecurely in the called function.,Low,3420,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Class docstring provides a clear description of the class functionality and known issues.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 11244, 290, 1900, 2428, 13]",1.0,3439,best_practice,975,Class docstring provides a clear description of the class functionality and known issues.,,3424,        self.conn.send_request(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 37043, 13, 21280, 62, 25927, 7]"
"‚ö†Ô∏è SAST Risk (Low): Mention of a bug related to connection handling, which could lead to inefficient resource usage or potential denial of service if not managed properly.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 337, 1463, 286, 257, 5434, 3519, 284, 4637, 9041, 11, 543, 714, 1085, 284, 30904, 8271, 8748, 393, 2785, 14425, 286, 2139, 611, 407, 5257, 6105, 13]",0.5,3457,sast_risk,976,"Mention of a bug related to connection handling, which could lead to inefficient resource usage or potential denial of service if not managed properly.",Low,3439,"            request_type=""calendar"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 62, 4906, 2625, 9948, 9239, 1600]"
üß† ML Signal: The description of the workflow and bug can be used to identify patterns in client-server communication issues.,"[8582, 100, 254, 10373, 26484, 25, 383, 6764, 286, 262, 30798, 290, 5434, 460, 307, 973, 284, 5911, 7572, 287, 5456, 12, 15388, 6946, 2428, 13]",0.5,3506,ml_signal,977,The description of the workflow and bug can be used to identify patterns in client-server communication issues.,,3457,"            request_content={""start_time"": str(start_time), ""end_time"": str(end_time), ""freq"": freq, ""future"": future},","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 62, 11299, 28, 4895, 9688, 62, 2435, 1298, 965, 7, 9688, 62, 2435, 828, 366, 437, 62, 2435, 1298, 965, 7, 437, 62, 2435, 828, 366, 19503, 80, 1298, 2030, 80, 11, 366, 37443, 1298, 2003, 5512]"
‚úÖ Best Practice: Use of isinstance for type checking,"[26486, 227, 6705, 19939, 25, 5765, 286, 318, 39098, 329, 2099, 10627]",0.5,3555,best_practice,977,Use of isinstance for type checking,,3506,"            request_content={""start_time"": str(start_time), ""end_time"": str(end_time), ""freq"": freq, ""future"": future},","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 62, 11299, 28, 4895, 9688, 62, 2435, 1298, 965, 7, 9688, 62, 2435, 828, 366, 437, 62, 2435, 1298, 965, 7, 437, 62, 2435, 828, 366, 19503, 80, 1298, 2030, 80, 11, 366, 37443, 1298, 2003, 5512]"
‚úÖ Best Practice: Use of getattr with default value to avoid AttributeError,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 35226, 351, 4277, 1988, 284, 3368, 3460, 4163, 12331]",1.0,3563,best_practice,980,Use of getattr with default value to avoid AttributeError,,3555,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Potential hardcoded server and port values,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1327, 40976, 4382, 290, 2493, 3815]",0.5,3563,sast_risk,984,Potential hardcoded server and port values,Low,3563,,[]
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,3572,ml_signal,986,Logging usage pattern,,3563,"    """"""Client instrument data provider class","[220, 220, 220, 37227, 11792, 8875, 1366, 10131, 1398]"
üß† ML Signal: Conditional logic based on type checking,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2099, 10627]",1.0,3576,ml_signal,989,Conditional logic based on type checking,,3572,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use of hasattr to check for attribute existence,"[26486, 227, 6705, 19939, 25, 5765, 286, 468, 35226, 284, 2198, 329, 11688, 6224]",0.5,3576,best_practice,994,Use of hasattr to check for attribute existence,,3576,,[]
‚úÖ Best Practice: Version check for backward compatibility,"[26486, 227, 6705, 19939, 25, 10628, 2198, 329, 19528, 17764]",0.5,3596,best_practice,999,Version check for backward compatibility,,3576,        def inst_msg_proc_func(response_content):,"[220, 220, 220, 220, 220, 220, 220, 825, 916, 62, 19662, 62, 36942, 62, 20786, 7, 26209, 62, 11299, 2599]"
‚úÖ Best Practice: Use of Annotated for type hinting with additional context,"[26486, 227, 6705, 19939, 25, 5765, 286, 1052, 1662, 515, 329, 2099, 9254, 278, 351, 3224, 4732]",0.5,3614,best_practice,1001,Use of Annotated for type hinting with additional context,,3596,                instrument = {,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8875, 796, 1391]"
‚úÖ Best Practice: Fallback for older Python versions,"[26486, 227, 6705, 19939, 25, 7218, 1891, 329, 4697, 11361, 6300]",1.0,3636,best_practice,1011,Fallback for older Python versions,,3614,"                ""instruments"": instruments,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 259, 2536, 2886, 1298, 12834, 11]"
üß† ML Signal: Wrapper pattern usage,"[8582, 100, 254, 10373, 26484, 25, 27323, 2848, 3912, 8748]",0.5,3644,ml_signal,1019,Wrapper pattern usage,,3636,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of logging for debugging and tracking execution flow,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 18931, 329, 28769, 290, 9646, 9706, 5202]",1.0,3652,ml_signal,1019,Use of logging for debugging and tracking execution flow,,3644,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Dynamic module loading based on configuration,"[8582, 100, 254, 10373, 26484, 25, 26977, 8265, 11046, 1912, 319, 8398]",1.0,3667,ml_signal,1021,Dynamic module loading based on configuration,,3652,"        if isinstance(result, Exception):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 20274, 11, 35528, 2599]"
üß† ML Signal: Initialization of instances based on configuration,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 10245, 1912, 319, 8398]",1.0,3688,ml_signal,1023,Initialization of instances based on configuration,,3667,"        get_module_logger(""data"").debug(""get result"")","[220, 220, 220, 220, 220, 220, 220, 651, 62, 21412, 62, 6404, 1362, 7203, 7890, 11074, 24442, 7203, 1136, 1255, 4943]"
üß† ML Signal: Conditional logic based on configuration attributes,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 8398, 12608]",1.0,3688,ml_signal,1026,Conditional logic based on configuration attributes,,3688,,[]
üß† ML Signal: Registration pattern for wrappers,"[8582, 100, 254, 10373, 26484, 25, 24610, 3912, 329, 7917, 11799]",1.0,3697,ml_signal,1028,Registration pattern for wrappers,,3688,"    """"""Client dataset data provider class","[220, 220, 220, 37227, 11792, 27039, 1366, 10131, 1398]"
üß† ML Signal: Use of formatted strings for logging,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 39559, 13042, 329, 18931]",0.5,3712,ml_signal,1030,Use of formatted strings for logging,,3697,    Provide dataset data by requesting data from server as a client.,"[220, 220, 220, 44290, 27039, 1366, 416, 20623, 1366, 422, 4382, 355, 257, 5456, 13]"

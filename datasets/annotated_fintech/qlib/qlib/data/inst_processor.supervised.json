[
  {
    "line": 4,
    "text": "",
    "annotation": "\u2705 Best Practice: Class should inherit from abc.ABC to use abstract methods",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      815,
      16955,
      422,
      450,
      66,
      13,
      24694,
      284,
      779,
      12531,
      5050
    ],
    "label": "best_practice",
    "reason": "Class should inherit from abc.ABC to use abstract methods"
  },
  {
    "line": 7,
    "text": "    @abc.abstractmethod",
    "annotation": "\ud83e\udde0 ML Signal: Use of __call__ method indicates a pattern where instances of the class are intended to be callable.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      39305,
      13,
      397,
      8709,
      24396
    ],
    "start_token": 0,
    "end_token": 9,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      13345,
      834,
      2446,
      9217,
      257,
      3912,
      810,
      10245,
      286,
      262,
      1398,
      389,
      5292,
      284,
      307,
      869,
      540,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of __call__ method indicates a pattern where instances of the class are intended to be callable."
  },
  {
    "line": 7,
    "text": "    @abc.abstractmethod",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): In-place modification of `df` can lead to unintended side effects if the caller is not aware.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      39305,
      13,
      397,
      8709,
      24396
    ],
    "start_token": 9,
    "end_token": 18,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      554,
      12,
      5372,
      17613,
      286,
      4600,
      7568,
      63,
      460,
      1085,
      284,
      30261,
      1735,
      3048,
      611,
      262,
      24955,
      318,
      407,
      3910,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "In-place modification of `df` can lead to unintended side effects if the caller is not aware."
  },
  {
    "line": 12,
    "text": "        NOTE: **The processor could change the content of `df` inplace !!!!! **",
    "annotation": "\u2705 Best Practice: Documenting the in-place modification behavior is good for user awareness.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24550,
      25,
      12429,
      464,
      12649,
      714,
      1487,
      262,
      2695,
      286,
      4600,
      7568,
      63,
      287,
      5372,
      37867,
      10185,
      12429
    ],
    "start_token": 18,
    "end_token": 43,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      16854,
      278,
      262,
      287,
      12,
      5372,
      17613,
      4069,
      318,
      922,
      329,
      2836,
      9359,
      13
    ],
    "label": "best_practice",
    "reason": "Documenting the in-place modification behavior is good for user awareness."
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u2705 Best Practice: Advising users to keep a copy of data helps prevent data loss or corruption.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 43,
    "end_token": 43,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8007,
      1710,
      2985,
      284,
      1394,
      257,
      4866,
      286,
      1366,
      5419,
      2948,
      1366,
      2994,
      393,
      9253,
      13
    ],
    "label": "best_practice",
    "reason": "Advising users to keep a copy of data helps prevent data loss or corruption."
  },
  {
    "line": 16,
    "text": "        ----------",
    "annotation": "\u2705 Best Practice: Use of f-string for string formatting improves readability and performance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 43,
    "end_token": 52,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      4731,
      33313,
      19575,
      1100,
      1799,
      290,
      2854
    ],
    "label": "best_practice",
    "reason": "Use of f-string for string formatting improves readability and performance"
  },
  {
    "line": 17,
    "text": "        df : pd.DataFrame",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive information by converting object attributes to a JSON string",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      1058,
      279,
      67,
      13,
      6601,
      19778
    ],
    "start_token": 52,
    "end_token": 66,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1321,
      416,
      23202,
      2134,
      12608,
      284,
      257,
      19449,
      4731
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive information by converting object attributes to a JSON string"
  },
  {
    "line": 17,
    "text": "        df : pd.DataFrame",
    "annotation": "\ud83e\udde0 ML Signal: Use of __str__ method to provide a string representation of an object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      1058,
      279,
      67,
      13,
      6601,
      19778
    ],
    "start_token": 66,
    "end_token": 80,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11593,
      2536,
      834,
      2446,
      284,
      2148,
      257,
      4731,
      10552,
      286,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Use of __str__ method to provide a string representation of an object"
  },
  {
    "line": 17,
    "text": "        df : pd.DataFrame",
    "annotation": "\u2705 Best Practice: Use of json.dumps with sort_keys for consistent output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      1058,
      279,
      67,
      13,
      6601,
      19778
    ],
    "start_token": 80,
    "end_token": 94,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      33918,
      13,
      67,
      8142,
      351,
      3297,
      62,
      13083,
      329,
      6414,
      5072
    ],
    "label": "best_practice",
    "reason": "Use of json.dumps with sort_keys for consistent output"
  },
  {
    "line": 17,
    "text": "        df : pd.DataFrame",
    "annotation": "\u2705 Best Practice: Use of default=str in json.dumps to handle non-serializable objects",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      1058,
      279,
      67,
      13,
      6601,
      19778
    ],
    "start_token": 94,
    "end_token": 108,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      28,
      2536,
      287,
      33918,
      13,
      67,
      8142,
      284,
      5412,
      1729,
      12,
      46911,
      13821,
      5563
    ],
    "label": "best_practice",
    "reason": "Use of default=str in json.dumps to handle non-serializable objects"
  }
]
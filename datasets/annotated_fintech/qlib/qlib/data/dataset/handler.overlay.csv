annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Use of Literal for type hinting ensures that only specific string values are allowed, improving code reliability and readability.","[26486, 227, 6705, 19939, 25, 5765, 286, 25659, 1691, 329, 2099, 9254, 278, 19047, 326, 691, 2176, 4731, 3815, 389, 3142, 11, 10068, 2438, 17843, 290, 1100, 1799, 13]",0.5,8,best_practice,14,"Use of Literal for type hinting ensures that only specific string values are allowed, improving code reliability and readability.",,0,from ...utils.serial import Serializable,"[6738, 2644, 26791, 13, 46911, 1330, 23283, 13821]"
‚úÖ Best Practice: Consider using an abstract base class to enforce implementation of required methods in subclasses.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 281, 12531, 2779, 1398, 284, 4605, 7822, 286, 2672, 5050, 287, 850, 37724, 13]",0.5,12,best_practice,27,Consider using an abstract base class to enforce implementation of required methods in subclasses.,,8,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Constants should be defined at the top of the class for better readability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 5447, 379, 262, 1353, 286, 262, 1398, 329, 1365, 1100, 1799, 13]",0.5,12,best_practice,32,Constants should be defined at the top of the class for better readability.,,12,,[]
‚úÖ Best Practice: Use of @abstractmethod indicates this method must be implemented by subclasses.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 397, 8709, 24396, 9217, 428, 2446, 1276, 307, 9177, 416, 850, 37724, 13]",0.5,23,best_practice,38,Use of @abstractmethod indicates this method must be implemented by subclasses.,,12,    - The workflow to combine them all:,"[220, 220, 220, 532, 383, 30798, 284, 12082, 606, 477, 25]"
‚úÖ Best Practice: Type hints improve code readability and maintainability by specifying expected argument types.,"[26486, 227, 6705, 19939, 25, 5994, 20269, 2987, 2438, 1100, 1799, 290, 5529, 1799, 416, 31577, 2938, 4578, 3858, 13]",0.5,34,best_practice,38,Type hints improve code readability and maintainability by specifying expected argument types.,,23,    - The workflow to combine them all:,"[220, 220, 220, 532, 383, 30798, 284, 12082, 606, 477, 25]"
‚úÖ Best Practice: Default values for function parameters enhance usability by providing fallback options.,"[26486, 227, 6705, 19939, 25, 15161, 3815, 329, 2163, 10007, 9494, 42863, 416, 4955, 2121, 1891, 3689, 13]",0.5,45,best_practice,38,Default values for function parameters enhance usability by providing fallback options.,,34,    - The workflow to combine them all:,"[220, 220, 220, 532, 383, 30798, 284, 12082, 606, 477, 25]"
"‚úÖ Best Practice: Using Union for type hints allows for flexible input types, improving function versatility.","[26486, 227, 6705, 19939, 25, 8554, 4479, 329, 2099, 20269, 3578, 329, 12846, 5128, 3858, 11, 10068, 2163, 31689, 13]",0.5,56,best_practice,38,"Using Union for type hints allows for flexible input types, improving function versatility.",,45,    - The workflow to combine them all:,"[220, 220, 220, 532, 383, 30798, 284, 12082, 606, 477, 25]"
‚úÖ Best Practice: Providing a default value for 'level' enhances function usability.,"[26486, 227, 6705, 19939, 25, 7518, 2530, 257, 4277, 1988, 329, 705, 5715, 6, 32479, 2163, 42863, 13]",0.5,84,best_practice,43,Providing a default value for 'level' enhances function usability.,,56,"    def __init__(self, *args, **kwargs):  # pylint: disable=W0246","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 1635, 22046, 11, 12429, 46265, 22046, 2599, 220, 1303, 279, 2645, 600, 25, 15560, 28, 54, 15, 26912]"
"‚úÖ Best Practice: Using Union for type hints allows for flexible input types, improving function versatility.","[26486, 227, 6705, 19939, 25, 8554, 4479, 329, 2099, 20269, 3578, 329, 12846, 5128, 3858, 11, 10068, 2163, 31689, 13]",0.5,103,best_practice,45,"Using Union for type hints allows for flexible input types, improving function versatility.",,84,        We should define how to get ready for the fetching.,"[220, 220, 220, 220, 220, 220, 220, 775, 815, 8160, 703, 284, 651, 3492, 329, 262, 21207, 278, 13]"
‚úÖ Best Practice: Type hints improve code readability and maintainability by specifying expected argument types.,"[26486, 227, 6705, 19939, 25, 5994, 20269, 2987, 2438, 1100, 1799, 290, 5529, 1799, 416, 31577, 2938, 4578, 3858, 13]",0.5,122,best_practice,47,Type hints improve code readability and maintainability by specifying expected argument types.,,103,"        super().__init__(*args, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 46491, 22046, 11, 12429, 46265, 22046, 8]"
‚úÖ Best Practice: Specifying the return type with type hints improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 18291, 4035, 262, 1441, 2099, 351, 2099, 20269, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,141,best_practice,47,Specifying the return type with type hints improves code readability and maintainability.,,122,"        super().__init__(*args, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 46491, 22046, 11, 12429, 46265, 22046, 8]"
‚úÖ Best Practice: Class docstring provides a detailed explanation of the class's purpose and usage.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 6496, 7468, 286, 262, 1398, 338, 4007, 290, 8748, 13]",1.0,149,best_practice,46,Class docstring provides a detailed explanation of the class's purpose and usage.,,141,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Type hinting for class attributes improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1398, 12608, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,168,best_practice,47,Type hinting for class attributes improves code readability and maintainability.,,149,"        super().__init__(*args, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 46491, 22046, 11, 12429, 46265, 22046, 8]"
‚ö†Ô∏è SAST Risk (Medium): Use of assert statement for runtime checks can be disabled with optimization flags,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 6818, 2643, 329, 19124, 8794, 460, 307, 10058, 351, 23989, 9701]",0.5,239,sast_risk,97,Use of assert statement for runtime checks can be disabled with optimization flags,Medium,168,                   SH600005    37.796539  12231662.0       38.258602        37.919757    0.970325  0.0289,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6006, 21, 2388, 20, 220, 220, 220, 5214, 13, 3720, 2996, 2670, 220, 1105, 1954, 1433, 5237, 13, 15, 220, 220, 220, 220, 220, 220, 4353, 13, 25600, 31418, 220, 220, 220, 220, 220, 220, 220, 5214, 13, 24, 38449, 22, 220, 220, 220, 657, 13, 43587, 26582, 220, 657, 13, 15, 27693]"
üß† ML Signal: Use of a factory method pattern for initializing instances,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 8860, 2446, 3912, 329, 4238, 2890, 10245]",1.0,239,ml_signal,98,Use of a factory method pattern for initializing instances,,239,,[]
üß† ML Signal: Tracking initialization of class attributes,"[8582, 100, 254, 10373, 26484, 25, 37169, 37588, 286, 1398, 12608]",1.0,239,ml_signal,105,Tracking initialization of class attributes,,239,,[]
üß† ML Signal: Use of context manager for logging or timing operations,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4732, 4706, 329, 18931, 393, 10576, 4560]",0.5,262,ml_signal,111,Use of context manager for logging or timing operations,,239,"        data_loader: Union[dict, str, DataLoader] = None,","[220, 220, 220, 220, 220, 220, 220, 1366, 62, 29356, 25, 4479, 58, 11600, 11, 965, 11, 6060, 17401, 60, 796, 6045, 11]"
‚úÖ Best Practice: Explicitly calling the superclass constructor,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 23772]",1.0,275,best_practice,112,Explicitly calling the superclass constructor,,262,"        init_data=True,","[220, 220, 220, 220, 220, 220, 220, 2315, 62, 7890, 28, 17821, 11]"
‚úÖ Best Practice: Use a set for `attr_list` for efficient membership testing.,"[26486, 227, 6705, 19939, 25, 5765, 257, 900, 329, 4600, 35226, 62, 4868, 63, 329, 6942, 9931, 4856, 13]",0.5,284,best_practice,117,Use a set for `attr_list` for efficient membership testing.,,275,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Use `setattr` to dynamically set attributes.,"[26486, 227, 6705, 19939, 25, 5765, 4600, 2617, 35226, 63, 284, 32366, 900, 12608, 13]",1.0,295,best_practice,120,Use `setattr` to dynamically set attributes.,,284,        start_time :,"[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 1058]"
‚ö†Ô∏è SAST Risk (Low): Modifying the dictionary while iterating can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3401, 4035, 262, 22155, 981, 11629, 803, 460, 1085, 284, 10059, 4069, 13]",0.5,315,sast_risk,124,Modifying the dictionary while iterating can lead to unexpected behavior.,Low,295,"        data_loader : Union[dict, str, DataLoader]","[220, 220, 220, 220, 220, 220, 220, 1366, 62, 29356, 1058, 4479, 58, 11600, 11, 965, 11, 6060, 17401, 60]"
"üß† ML Signal: Use of `super()` indicates inheritance, which is common in ML model configurations.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4600, 16668, 3419, 63, 9217, 24155, 11, 543, 318, 2219, 287, 10373, 2746, 25412, 13]",1.0,326,ml_signal,126,"Use of `super()` indicates inheritance, which is common in ML model configurations.",,315,        init_data :,"[220, 220, 220, 220, 220, 220, 220, 2315, 62, 7890, 1058]"
‚úÖ Best Practice: Using a context manager for timing operations improves readability and ensures proper resource management.,"[26486, 227, 6705, 19939, 25, 8554, 257, 4732, 4706, 329, 10576, 4560, 19575, 1100, 1799, 290, 19047, 1774, 8271, 4542, 13]",0.5,367,best_practice,138,Using a context manager for timing operations improves readability and ensures proper resource management.,,326,"            None if (isinstance(data_loader, dict) and ""module_path"" in data_loader) else data_loader_module,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6045, 611, 357, 271, 39098, 7, 7890, 62, 29356, 11, 8633, 8, 290, 366, 21412, 62, 6978, 1, 287, 1366, 62, 29356, 8, 2073, 1366, 62, 29356, 62, 21412, 11]"
üß† ML Signal: Usage of lazy loading pattern which can be a feature for optimizing data processing in ML models.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 16931, 11046, 3912, 543, 460, 307, 257, 3895, 329, 45780, 1366, 7587, 287, 10373, 4981, 13]",0.5,375,ml_signal,140,Usage of lazy loading pattern which can be a feature for optimizing data processing in ML models.,,367,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 10007, 13]",1.0,387,best_practice,149,Docstring provides a clear explanation of the method's purpose and parameters.,,375,        if init_data:,"[220, 220, 220, 220, 220, 220, 220, 611, 2315, 62, 7890, 25]"
üß† ML Signal: Usage of a private method to fetch data indicates encapsulation and abstraction patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2839, 2446, 284, 21207, 1366, 9217, 32652, 1741, 290, 34651, 7572, 13]",1.0,398,ml_signal,191,Usage of a private method to fetch data indicates encapsulation and abstraction patterns.,,387,        # Setup data.,"[220, 220, 220, 220, 220, 220, 220, 1303, 31122, 1366, 13]"
üß† ML Signal: Passing multiple parameters to a method call can indicate complex data processing.,"[8582, 100, 254, 10373, 26484, 25, 46389, 3294, 10007, 284, 257, 2446, 869, 460, 7603, 3716, 1366, 7587, 13]",1.0,409,ml_signal,191,Passing multiple parameters to a method call can indicate complex data processing.,,398,        # Setup data.,"[220, 220, 220, 220, 220, 220, 220, 1303, 31122, 1366, 13]"
‚úÖ Best Practice: Consider adding type checks or assertions for input parameters for better error handling.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 8794, 393, 29965, 329, 5128, 10007, 329, 1365, 4049, 9041, 13]",0.5,409,best_practice,209,Consider adding type checks or assertions for input parameters for better error handling.,,409,,[]
‚ö†Ô∏è SAST Risk (Low): Logging sensitive data can lead to information leakage.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 8564, 1366, 460, 1085, 284, 1321, 47988, 13]",0.5,409,sast_risk,214,Logging sensitive data can lead to information leakage.,Low,409,,[]
üß† ML Signal: Usage of custom processing functions (proc_func) can indicate user-specific data transformations.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 7587, 5499, 357, 36942, 62, 20786, 8, 460, 7603, 2836, 12, 11423, 1366, 38226, 13]",0.5,427,ml_signal,218,Usage of custom processing functions (proc_func) can indicate user-specific data transformations.,,409,            describe how to select data by index,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6901, 703, 284, 2922, 1366, 416, 6376]"
‚ö†Ô∏è SAST Risk (Low): Raising exceptions with dynamic content can expose internal logic.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 13269, 351, 8925, 2695, 460, 15651, 5387, 9156, 13]",1.0,442,sast_risk,227,Raising exceptions with dynamic content can expose internal logic.,Low,427,            Following conflicts may occur,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14207, 12333, 743, 3051]"
‚ö†Ô∏è SAST Risk (Low): Raising exceptions with dynamic content can expose internal logic.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 13269, 351, 8925, 2695, 460, 15651, 5387, 9156, 13]",1.0,462,sast_risk,231,Raising exceptions with dynamic content can expose internal logic.,Low,442,                - slice have higher priorities,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 16416, 423, 2440, 15369]"
‚úÖ Best Practice: Docstring provides clear explanation of parameters and return value,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 7468, 286, 10007, 290, 1441, 1988]",0.5,480,best_practice,234,Docstring provides clear explanation of parameters and return value,,462,            which index level to select the data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 543, 6376, 1241, 284, 2922, 262, 1366]"
"üß† ML Signal: Usage of self indicates this is a method in a class, which can be useful for class-based pattern recognition","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 9217, 428, 318, 257, 2446, 287, 257, 1398, 11, 543, 460, 307, 4465, 329, 1398, 12, 3106, 3912, 9465]",0.5,505,ml_signal,246,"Usage of self indicates this is a method in a class, which can be useful for class-based pattern recognition",,480,"            - if isinstance(col_set, List[str]):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 611, 318, 39098, 7, 4033, 62, 2617, 11, 7343, 58, 2536, 60, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential data exposure if _data contains sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 7111, 611, 4808, 7890, 4909, 8564, 1321]",0.5,533,sast_risk,248,Potential data exposure if _data contains sensitive information,Low,505,"                select several sets of meaningful columns, the returned data has multiple levels","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2922, 1811, 5621, 286, 11570, 15180, 11, 262, 4504, 1366, 468, 3294, 2974]"
üß† ML Signal: Use of fetch_df_by_col function indicates a pattern of data filtering or transformation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 21207, 62, 7568, 62, 1525, 62, 4033, 2163, 9217, 257, 3912, 286, 1366, 25431, 393, 13389]",0.5,533,ml_signal,249,Use of fetch_df_by_col function indicates a pattern of data filtering or transformation,,533,,[]
‚úÖ Best Practice: Converting columns to a list for a clear and consistent return type,"[26486, 227, 6705, 19939, 25, 35602, 889, 15180, 284, 257, 1351, 329, 257, 1598, 290, 6414, 1441, 2099]",0.5,533,best_practice,249,Converting columns to a list for a clear and consistent return type,,533,,[]
üß† ML Signal: Usage of unique index levels to filter data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3748, 6376, 2974, 284, 8106, 1366]",0.5,566,ml_signal,255,Usage of unique index levels to filter data,,533,                - A Dataset learned some processors to process data which is related to data segmentation,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 317, 16092, 292, 316, 4499, 617, 20399, 284, 1429, 1366, 543, 318, 3519, 284, 1366, 10618, 341]"
üß† ML Signal: Pattern of locating positions in a time series,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 42139, 6116, 287, 257, 640, 2168]",0.5,597,ml_signal,257,Pattern of locating positions in a time series,,566,                - The learned processor require the dataframe remains the same format when fitting and applying,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 383, 4499, 12649, 2421, 262, 1366, 14535, 3793, 262, 976, 5794, 618, 15830, 290, 11524]"
üß† ML Signal: Calculation of a range based on a current location and periods,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 257, 2837, 1912, 319, 257, 1459, 4067, 290, 9574]",0.5,625,ml_signal,259,Calculation of a range based on a current location and periods,,597,                - So the processors should be applied to the underlayer data.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 1406, 262, 20399, 815, 307, 5625, 284, 262, 739, 29289, 1366, 13]"
‚ö†Ô∏è SAST Risk (Low): Potential negative index access if `pre_loc` is not checked,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 4633, 6376, 1895, 611, 4600, 3866, 62, 17946, 63, 318, 407, 10667]",0.5,635,sast_risk,261,Potential negative index access if `pre_loc` is not checked,Low,625,        squeeze : bool,"[220, 220, 220, 220, 220, 220, 220, 21229, 1058, 20512]"
‚ö†Ô∏è SAST Risk (Low): Warning message could be logged instead of using warnings.warn,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 15932, 3275, 714, 307, 18832, 2427, 286, 1262, 14601, 13, 40539]",0.5,635,sast_risk,263,Warning message could be logged instead of using warnings.warn,Low,635,,[]
üß† ML Signal: Accessing elements in a time series by calculated index,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 4847, 287, 257, 640, 2168, 416, 10488, 6376]",0.5,648,ml_signal,266,Accessing elements in a time series by calculated index,,635,        pd.DataFrame.,"[220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 6601, 19778, 13]"
üß† ML Signal: Returning a slice object for data selection,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 16416, 2134, 329, 1366, 6356]",0.5,661,ml_signal,266,Returning a slice object for data selection,,648,        pd.DataFrame.,"[220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 6601, 19778, 13]"
‚úÖ Best Practice: Use of unique() to ensure trading_dates are distinct,"[26486, 227, 6705, 19939, 25, 5765, 286, 3748, 3419, 284, 4155, 7313, 62, 19581, 389, 7310]",1.0,676,best_practice,273,Use of unique() to ensure trading_dates are distinct,,661,"            level=level,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1241, 28, 5715, 11]"
‚úÖ Best Practice: Defaulting min_periods to periods if not provided,"[26486, 227, 6705, 19939, 25, 15161, 278, 949, 62, 41007, 82, 284, 9574, 611, 407, 2810]",1.0,695,best_practice,276,Defaulting min_periods to periods if not provided,,676,"            proc_func=proc_func,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13834, 62, 20786, 28, 36942, 62, 20786, 11]"
üß† ML Signal: Iterating over dates with a specific range,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 9667, 351, 257, 2176, 2837]",1.0,705,ml_signal,279,Iterating over dates with a specific range,,695,    def _fetch_data(,"[220, 220, 220, 825, 4808, 69, 7569, 62, 7890, 7]"
üß† ML Signal: Yielding tuples of date and DataFrame,"[8582, 100, 254, 10373, 26484, 25, 575, 30449, 12777, 2374, 286, 3128, 290, 6060, 19778]",1.0,714,ml_signal,280,Yielding tuples of date and DataFrame,,705,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
‚úÖ Best Practice: Type annotations for class attributes improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 1398, 12608, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,757,best_practice,301,Type annotations for class attributes improve code readability and maintainability.,,714,"                get_module_logger(""DataHandlerLP"").info(f""Fail to converting to query to slice. It will used directly"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 651, 62, 21412, 62, 6404, 1362, 7203, 6601, 25060, 19930, 11074, 10951, 7, 69, 1, 39044, 284, 23202, 284, 12405, 284, 16416, 13, 632, 481, 973, 3264, 4943]"
‚úÖ Best Practice: Type annotations for class attributes improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 37647, 329, 1398, 12608, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,778,best_practice,303,Type annotations for class attributes improve code readability and maintainability.,,757,"        if isinstance(data_storage, pd.DataFrame):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 7890, 62, 35350, 11, 279, 67, 13, 6601, 19778, 2599]"
‚úÖ Best Practice: Using a dictionary for attribute mapping improves code organization and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 257, 22155, 329, 11688, 16855, 19575, 2438, 4009, 290, 5529, 1799, 13]",0.5,797,best_practice,305,Using a dictionary for attribute mapping improves code organization and maintainability.,,778,            if proc_func is not None:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 13834, 62, 20786, 318, 407, 6045, 25]"
üß† ML Signal: Constants like PTYPE_I can be used to identify processing types in ML workflows.,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 588, 350, 25216, 62, 40, 460, 307, 973, 284, 5911, 7587, 3858, 287, 10373, 670, 44041, 13]",0.5,831,ml_signal,306,Constants like PTYPE_I can be used to identify processing types in ML workflows.,,797,                # FIXME: fetching by time first will be more friendly to `proc_func`,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 44855, 11682, 25, 21207, 278, 416, 640, 717, 481, 307, 517, 8030, 284, 4600, 36942, 62, 20786, 63]"
üß† ML Signal: Constants like PTYPE_A can be used to identify processing types in ML workflows.,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 588, 350, 25216, 62, 32, 460, 307, 973, 284, 5911, 7587, 3858, 287, 10373, 670, 44041, 13]",0.5,865,ml_signal,306,Constants like PTYPE_A can be used to identify processing types in ML workflows.,,831,                # FIXME: fetching by time first will be more friendly to `proc_func`,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 44855, 11682, 25, 21207, 278, 416, 640, 717, 481, 307, 517, 8030, 284, 4600, 36942, 62, 20786, 63]"
‚úÖ Best Practice: Docstring provides detailed parameter descriptions and usage examples,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 6496, 11507, 16969, 290, 8748, 6096]",0.5,907,best_practice,319,Docstring provides detailed parameter descriptions and usage examples,,865,"            raise TypeError(f""data_storage should be pd.DataFrame|HashingStockStorage, not {type(data_storage)}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 5994, 12331, 7, 69, 1, 7890, 62, 35350, 815, 307, 279, 67, 13, 6601, 19778, 91, 39, 2140, 26207, 31425, 11, 407, 1391, 4906, 7, 7890, 62, 35350, 38165, 4943]"
‚úÖ Best Practice: Initialize lists to avoid shared mutable default arguments,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8341, 284, 3368, 4888, 4517, 540, 4277, 7159]",0.5,917,best_practice,351,Initialize lists to avoid shared mutable default arguments,,907,        Args:,"[220, 220, 220, 220, 220, 220, 220, 943, 14542, 25]"
üß† ML Signal: Iterating over processor lists to initialize them,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 12649, 8341, 284, 41216, 606]",1.0,941,ml_signal,355,Iterating over processor lists to initialize them,,917,"        trading_dates = self._data.index.unique(level=""datetime"")","[220, 220, 220, 220, 220, 220, 220, 7313, 62, 19581, 796, 2116, 13557, 7890, 13, 9630, 13, 34642, 7, 5715, 2625, 19608, 8079, 4943]"
üß† ML Signal: Dynamic attribute access and initialization,"[8582, 100, 254, 10373, 26484, 25, 26977, 11688, 1895, 290, 37588]",1.0,965,ml_signal,355,Dynamic attribute access and initialization,,941,"        trading_dates = self._data.index.unique(level=""datetime"")","[220, 220, 220, 220, 220, 220, 220, 7313, 62, 19581, 796, 2116, 13557, 7890, 13, 9630, 13, 34642, 7, 5715, 2625, 19608, 8079, 4943]"
üß† ML Signal: Use of getattr for dynamic method invocation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 651, 35226, 329, 8925, 2446, 43219]",0.5,983,ml_signal,362,Use of getattr for dynamic method invocation,,965,"        return slice(ref_date, cur_date)","[220, 220, 220, 220, 220, 220, 220, 1441, 16416, 7, 5420, 62, 4475, 11, 1090, 62, 4475, 8]"
üß† ML Signal: Initialization of instances by configuration,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 10245, 416, 8398]",0.5,1001,ml_signal,362,Initialization of instances by configuration,,983,"        return slice(ref_date, cur_date)","[220, 220, 220, 220, 220, 220, 220, 1441, 16416, 7, 5420, 62, 4475, 11, 1090, 62, 4475, 8]"
‚úÖ Best Practice: Call to superclass initializer,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 4238, 7509]",0.5,1020,best_practice,371,Call to superclass initializer,,1001,            periods (int): number of periods.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9574, 357, 600, 2599, 1271, 286, 9574, 13]"
‚úÖ Best Practice: Method name should be descriptive of its action,"[26486, 227, 6705, 19939, 25, 11789, 1438, 815, 307, 35644, 286, 663, 2223]",0.5,1048,best_practice,365,Method name should be descriptive of its action,,1020,"        self, periods: int, min_periods: Optional[int] = None, **kwargs","[220, 220, 220, 220, 220, 220, 220, 2116, 11, 9574, 25, 493, 11, 949, 62, 41007, 82, 25, 32233, 58, 600, 60, 796, 6045, 11, 12429, 46265, 22046]"
‚úÖ Best Practice: Using list concatenation to combine multiple lists,"[26486, 227, 6705, 19939, 25, 8554, 1351, 1673, 36686, 341, 284, 12082, 3294, 8341]",0.5,1056,best_practice,367,Using list concatenation to combine multiple lists,,1048,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Consider adding type hints for the return type and parameters for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 1441, 2099, 290, 10007, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,1075,best_practice,371,Consider adding type hints for the return type and parameters for better readability and maintainability.,,1056,            periods (int): number of periods.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9574, 357, 600, 2599, 1271, 286, 9574, 13]"
üß† ML Signal: Iterating over processors to fit data indicates a pattern of applying multiple transformations or models.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 20399, 284, 4197, 1366, 9217, 257, 3912, 286, 11524, 3294, 38226, 393, 4981, 13]",0.5,1102,ml_signal,373,Iterating over processors to fit data indicates a pattern of applying multiple transformations or models.,,1075,            kwargs (dict): will be passed to `self.fetch`.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 479, 86, 22046, 357, 11600, 2599, 481, 307, 3804, 284, 4600, 944, 13, 69, 7569, 44646]"
‚úÖ Best Practice: Consider handling exceptions within the loop to prevent one processor failure from stopping the entire fitting process.,"[26486, 227, 6705, 19939, 25, 12642, 9041, 13269, 1626, 262, 9052, 284, 2948, 530, 12649, 5287, 422, 12225, 262, 2104, 15830, 1429, 13]",0.5,1110,best_practice,374,Consider handling exceptions within the loop to prevent one processor failure from stopping the entire fitting process.,,1102,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Logging the time taken for each processor can be useful for performance monitoring and optimization.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 640, 2077, 329, 1123, 12649, 460, 307, 4465, 329, 2854, 9904, 290, 23989, 13]",0.5,1134,ml_signal,375,Logging the time taken for each processor can be useful for performance monitoring and optimization.,,1110,"        trading_dates = self._data.index.unique(level=""datetime"")","[220, 220, 220, 220, 220, 220, 220, 7313, 62, 19581, 796, 2116, 13557, 7890, 13, 9630, 13, 34642, 7, 5715, 2625, 19608, 8079, 4943]"
üß† ML Signal: Calling fit on each processor suggests a training or preparation step in a machine learning pipeline.,"[8582, 100, 254, 10373, 26484, 25, 32677, 4197, 319, 1123, 12649, 5644, 257, 3047, 393, 11824, 2239, 287, 257, 4572, 4673, 11523, 13]",0.5,1162,ml_signal,379,Calling fit on each processor suggests a training or preparation step in a machine learning pipeline.,,1134,"            selector = self.get_range_selector(cur_date, periods)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 31870, 796, 2116, 13, 1136, 62, 9521, 62, 19738, 273, 7, 22019, 62, 4475, 11, 9574, 8]"
üß† ML Signal: Method indicating a data processing step in a machine learning pipeline,"[8582, 100, 254, 10373, 26484, 25, 11789, 12739, 257, 1366, 7587, 2239, 287, 257, 4572, 4673, 11523]",1.0,1190,ml_signal,379,Method indicating a data processing step in a machine learning pipeline,,1162,"            selector = self.get_range_selector(cur_date, periods)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 31870, 796, 2116, 13, 1136, 62, 9521, 62, 19738, 273, 7, 22019, 62, 4475, 11, 9574, 8]"
üß† ML Signal: Iterating over a list of processor objects to apply transformations,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 12649, 5563, 284, 4174, 38226]",0.5,1194,ml_signal,384,Iterating over a list of processor objects to apply transformations,,1190,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Potential for TypeError if proc.is_for_infer() is not implemented correctly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 5994, 12331, 611, 13834, 13, 271, 62, 1640, 62, 259, 2232, 3419, 318, 407, 9177, 9380]",0.5,1214,sast_risk,386,Potential for TypeError if proc.is_for_infer() is not implemented correctly,Low,1194,    - For the case that we hope using different processor workflows for learning and inference;,"[220, 220, 220, 532, 1114, 262, 1339, 326, 356, 2911, 1262, 1180, 12649, 670, 44041, 329, 4673, 290, 32278, 26]"
‚úÖ Best Practice: Using a context manager for timing operations,"[26486, 227, 6705, 19939, 25, 8554, 257, 4732, 4706, 329, 10576, 4560]",1.0,1234,best_practice,389,Using a context manager for timing operations,,1214,    DataHandler with **(L)earnable (P)rocessor**,"[220, 220, 220, 6060, 25060, 351, 12429, 7, 43, 8, 451, 77, 540, 357, 47, 8, 305, 919, 273, 1174]"
üß† ML Signal: Conditional fitting of processors based on a flag,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 15830, 286, 20399, 1912, 319, 257, 6056]",1.0,1253,ml_signal,391,Conditional fitting of processors based on a flag,,1234,    This handler will produce three pieces of data in pd.DataFrame format.,"[220, 220, 220, 770, 21360, 481, 4439, 1115, 5207, 286, 1366, 287, 279, 67, 13, 6601, 19778, 5794, 13]"
üß† ML Signal: Applying a transformation to the DataFrame,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 13389, 284, 262, 6060, 19778]",1.0,1271,ml_signal,394,Applying a transformation to the DataFrame,,1253,    - DK_I / self._infer: the data processed for inference,"[220, 220, 220, 532, 32975, 62, 40, 1220, 2116, 13557, 259, 2232, 25, 262, 1366, 13686, 329, 32278]"
‚úÖ Best Practice: Add a docstring to explain the function's behavior and edge cases,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 4727, 262, 2163, 338, 4069, 290, 5743, 2663]",0.5,1289,best_practice,394,Add a docstring to explain the function's behavior and edge cases,,1271,    - DK_I / self._infer: the data processed for inference,"[220, 220, 220, 532, 32975, 62, 40, 1220, 2116, 13557, 259, 2232, 25, 262, 1366, 13686, 329, 32278]"
üß† ML Signal: Iterating over a list to check a condition on each element,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 284, 2198, 257, 4006, 319, 1123, 5002]",1.0,1289,ml_signal,399,Iterating over a list to check a condition on each element,,1289,,[]
üß† ML Signal: Checking a boolean condition on an object method,"[8582, 100, 254, 10373, 26484, 25, 39432, 257, 25131, 4006, 319, 281, 2134, 2446]",0.5,1319,ml_signal,401,Checking a boolean condition on an object method,,1289,"    - The processing of some samples may rely on label (for example, some samples hit the limit may need extra processing or be dropped).","[220, 220, 220, 532, 383, 7587, 286, 617, 8405, 743, 8814, 319, 6167, 357, 1640, 1672, 11, 617, 8405, 2277, 262, 4179, 743, 761, 3131, 7587, 393, 307, 5710, 737]"
üß† ML Signal: Returning a boolean value based on a condition,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 25131, 1988, 1912, 319, 257, 4006]",1.0,1319,ml_signal,402,Returning a boolean value based on a condition,,1319,,[]
"üß† ML Signal: Checks if processors are read-only, indicating conditional logic based on processor state","[8582, 100, 254, 10373, 26484, 25, 47719, 611, 20399, 389, 1100, 12, 8807, 11, 12739, 26340, 9156, 1912, 319, 12649, 1181]",0.5,1319,ml_signal,417,"Checks if processors are read-only, indicating conditional logic based on processor state",,1319,,[]
"üß† ML Signal: Executes a list of processors, indicating a pattern of sequential data processing","[8582, 100, 254, 10373, 26484, 25, 8393, 1769, 257, 1351, 286, 20399, 11, 12739, 257, 3912, 286, 35582, 1366, 7587]",0.5,1336,ml_signal,420,"Executes a list of processors, indicating a pattern of sequential data processing",,1319,    _learn: pd.DataFrame  # data for learning models,"[220, 220, 220, 4808, 35720, 25, 279, 67, 13, 6601, 19778, 220, 1303, 1366, 329, 4673, 4981]"
"üß† ML Signal: Checks if processors are read-only, indicating conditional logic based on processor state","[8582, 100, 254, 10373, 26484, 25, 47719, 611, 20399, 389, 1100, 12, 8807, 11, 12739, 26340, 9156, 1912, 319, 12649, 1181]",0.5,1376,ml_signal,423,"Checks if processors are read-only, indicating conditional logic based on processor state",,1336,"    ATTR_MAP = {DataHandler.DK_R: ""_data"", DataHandler.DK_I: ""_infer"", DataHandler.DK_L: ""_learn""}","[220, 220, 220, 5161, 5446, 62, 33767, 796, 1391, 6601, 25060, 13, 48510, 62, 49, 25, 45434, 7890, 1600, 6060, 25060, 13, 48510, 62, 40, 25, 45434, 259, 2232, 1600, 6060, 25060, 13, 48510, 62, 43, 25, 45434, 35720, 20662]"
"üß† ML Signal: Executes a list of processors, indicating a pattern of sequential data processing","[8582, 100, 254, 10373, 26484, 25, 8393, 1769, 257, 1351, 286, 20399, 11, 12739, 257, 3912, 286, 35582, 1366, 7587]",0.5,1387,ml_signal,426,"Executes a list of processors, indicating a pattern of sequential data processing",,1376,"    PTYPE_I = ""independent""","[220, 220, 220, 350, 25216, 62, 40, 796, 366, 34750, 1]"
"üß† ML Signal: Conditional logic based on process type, indicating different processing paths","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1429, 2099, 11, 12739, 1180, 7587, 13532]",1.0,1408,ml_signal,428,"Conditional logic based on process type, indicating different processing paths",,1387,    # - self._learn will be processed by shared_processors + learn_processors,"[220, 220, 220, 1303, 532, 2116, 13557, 35720, 481, 307, 13686, 416, 4888, 62, 14681, 669, 1343, 2193, 62, 14681, 669]"
"‚ö†Ô∏è SAST Risk (Low): Raises a generic exception, which could be improved for clarity","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 257, 14276, 6631, 11, 543, 714, 307, 6596, 329, 16287]",0.5,1431,sast_risk,435,"Raises a generic exception, which could be improved for clarity",Low,1408,    #   - (e.g. self._infer processed by learn_processors ),"[220, 220, 220, 1303, 220, 220, 532, 357, 68, 13, 70, 13, 2116, 13557, 259, 2232, 13686, 416, 2193, 62, 14681, 669, 1267]"
"üß† ML Signal: Checks if processors are read-only, indicating conditional logic based on processor state","[8582, 100, 254, 10373, 26484, 25, 47719, 611, 20399, 389, 1100, 12, 8807, 11, 12739, 26340, 9156, 1912, 319, 12649, 1181]",0.5,1439,ml_signal,437,"Checks if processors are read-only, indicating conditional logic based on processor state",,1431,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
"üß† ML Signal: Executes a list of processors, indicating a pattern of sequential data processing","[8582, 100, 254, 10373, 26484, 25, 8393, 1769, 257, 1351, 286, 20399, 11, 12739, 257, 3912, 286, 35582, 1366, 7587]",0.5,1448,ml_signal,438,"Executes a list of processors, indicating a pattern of sequential data processing",,1439,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
"‚úÖ Best Practice: Deletes raw data if not needed, indicating resource management","[26486, 227, 6705, 19939, 25, 1024, 40676, 8246, 1366, 611, 407, 2622, 11, 12739, 8271, 4542]",0.5,1464,best_practice,443,"Deletes raw data if not needed, indicating resource management",,1448,"        infer_processors: List = [],","[220, 220, 220, 220, 220, 220, 220, 13249, 62, 14681, 669, 25, 7343, 796, 685, 4357]"
‚úÖ Best Practice: Provide a default value for mutable arguments to avoid unexpected behavior.,"[26486, 227, 6705, 19939, 25, 44290, 257, 4277, 1988, 329, 4517, 540, 7159, 284, 3368, 10059, 4069, 13]",0.5,1473,best_practice,438,Provide a default value for mutable arguments to avoid unexpected behavior.,,1464,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
‚úÖ Best Practice: Check for None before iterating to prevent runtime errors.,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 878, 11629, 803, 284, 2948, 19124, 8563, 13]",0.5,1489,best_practice,445,Check for None before iterating to prevent runtime errors.,,1473,"        shared_processors: List = [],","[220, 220, 220, 220, 220, 220, 220, 4888, 62, 14681, 669, 25, 7343, 796, 685, 4357]"
üß† ML Signal: Configuring processors with specific arguments can indicate customization patterns.,"[8582, 100, 254, 10373, 26484, 25, 17056, 870, 20399, 351, 2176, 7159, 460, 7603, 31344, 7572, 13]",0.5,1500,ml_signal,448,Configuring processors with specific arguments can indicate customization patterns.,,1489,"        **kwargs,","[220, 220, 220, 220, 220, 220, 220, 12429, 46265, 22046, 11]"
üß† ML Signal: Constants like these can indicate specific modes or states in a process.,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 588, 777, 460, 7603, 2176, 12881, 393, 2585, 287, 257, 1429, 13]",0.5,1508,ml_signal,451,Constants like these can indicate specific modes or states in a process.,,1500,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚úÖ Best Practice: Docstring provides a clear explanation of parameters and functionality,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 10007, 290, 11244]",1.0,1516,best_practice,451,Docstring provides a clear explanation of parameters and functionality,,1508,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
"üß† ML Signal: Use of super() indicates inheritance, which is common in ML model setups","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2208, 3419, 9217, 24155, 11, 543, 318, 2219, 287, 10373, 2746, 44266]",1.0,1555,ml_signal,464,"Use of super() indicates inheritance, which is common in ML model setups",,1516,"                            ""fit_start_time"": ""20080101"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 11147, 62, 9688, 62, 2435, 1298, 366, 11528, 486, 486, 1600]"
"üß† ML Signal: Use of TimeInspector suggests performance monitoring, common in ML workflows","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3862, 818, 4443, 273, 5644, 2854, 9904, 11, 2219, 287, 10373, 670, 44041]",1.0,1579,ml_signal,466,"Use of TimeInspector suggests performance monitoring, common in ML workflows",,1555,                        },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
"üß† ML Signal: Different initialization types suggest flexibility in data handling, relevant for ML","[8582, 100, 254, 10373, 26484, 25, 20615, 37588, 3858, 1950, 13688, 287, 1366, 9041, 11, 5981, 329, 10373]",1.0,1600,ml_signal,468,"Different initialization types suggest flexibility in data handling, relevant for ML",,1579,                2) Only classname:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 362, 8, 5514, 1398, 3672, 25]"
üß† ML Signal: Method calls like fit() are indicative of ML model training,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 588, 4197, 3419, 389, 29105, 286, 10373, 2746, 3047]",0.5,1621,ml_signal,470,Method calls like fit() are indicative of ML model training,,1600,                3) object instance of Processor,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 513, 8, 2134, 4554, 286, 32893]"
üß† ML Signal: Method calls like process_data() are indicative of data preprocessing,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 588, 1429, 62, 7890, 3419, 389, 29105, 286, 1366, 662, 36948]",0.5,1621,ml_signal,471,Method calls like process_data() are indicative of data preprocessing,,1621,,[]
üß† ML Signal: Method calls like fit_process_data() are indicative of combined training and preprocessing,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 588, 4197, 62, 14681, 62, 7890, 3419, 389, 29105, 286, 5929, 3047, 290, 662, 36948]",0.5,1640,ml_signal,476,Method calls like fit_process_data() are indicative of combined training and preprocessing,,1621,            PTYPE_I = 'independent',"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 350, 25216, 62, 40, 796, 705, 34750, 6]"
‚ö†Ô∏è SAST Risk (Low): NotImplementedError could expose internal logic if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1892, 3546, 1154, 12061, 12331, 714, 15651, 5387, 9156, 611, 407, 12118, 6105]",1.0,1663,sast_risk,480,NotImplementedError could expose internal logic if not handled properly,Low,1640,            - self._learn will be processed by learn_processors,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 532, 2116, 13557, 35720, 481, 307, 13686, 416, 2193, 62, 14681, 669]"
‚úÖ Best Practice: Type hinting for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1663,best_practice,474,Type hinting for the return type improves code readability and maintainability,,1663,,[]
üß† ML Signal: Use of conditional logic to handle different data keys,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 284, 5412, 1180, 1366, 8251]",1.0,1682,ml_signal,476,Use of conditional logic to handle different data keys,,1663,            PTYPE_I = 'independent',"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 350, 25216, 62, 40, 796, 705, 34750, 6]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic AttributeError might not provide enough context for debugging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 3460, 4163, 12331, 1244, 407, 2148, 1576, 4732, 329, 28769]",1.0,1682,sast_risk,479,Raising a generic AttributeError might not provide enough context for debugging,Low,1682,,[]
üß† ML Signal: Dynamic attribute access pattern using getattr,"[8582, 100, 254, 10373, 26484, 25, 26977, 11688, 1895, 3912, 1262, 651, 35226]",1.0,1682,ml_signal,481,Dynamic attribute access pattern using getattr,,1682,,[]
‚úÖ Best Practice: Docstring provides clear explanation of parameters and return type,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 7468, 286, 10007, 290, 1441, 2099]",1.0,1699,best_practice,490,Docstring provides clear explanation of parameters and return type,,1682,            Whether to drop the raw data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10127, 284, 4268, 262, 8246, 1366]"
üß† ML Signal: Method signature and parameters can be used to understand data access patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 290, 10007, 460, 307, 973, 284, 1833, 1366, 1895, 7572]",0.5,1715,ml_signal,508,Method signature and parameters can be used to understand data access patterns,,1699,        self.drop_raw = drop_raw,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 14781, 62, 1831, 796, 4268, 62, 1831]"
‚úÖ Best Practice: Using a private method for data fetching encapsulates functionality,"[26486, 227, 6705, 19939, 25, 8554, 257, 2839, 2446, 329, 1366, 21207, 278, 32652, 15968, 11244]",0.5,1731,best_practice,508,Using a private method for data fetching encapsulates functionality,,1715,        self.drop_raw = drop_raw,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 14781, 62, 1831, 796, 4268, 62, 1831]"
üß† ML Signal: Accessing data storage by key indicates data retrieval patterns,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 1366, 6143, 416, 1994, 9217, 1366, 45069, 7572]",0.5,1747,ml_signal,508,Accessing data storage by key indicates data retrieval patterns,,1731,        self.drop_raw = drop_raw,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 14781, 62, 1831, 796, 4268, 62, 1831]"
‚úÖ Best Practice: Docstring provides clear explanation of parameters and return value,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 7468, 286, 10007, 290, 1441, 1988]",0.5,1755,best_practice,517,Docstring provides clear explanation of parameters and return value,,1747,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Usage of self indicates this is an instance method,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 9217, 428, 318, 281, 4554, 2446]",0.5,1766,ml_signal,531,Usage of self indicates this is an instance method,,1755,    def _run_proc_l(,"[220, 220, 220, 825, 4808, 5143, 62, 36942, 62, 75, 7]"
üß† ML Signal: Function call pattern with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 351, 2176, 10007]",0.5,1808,ml_signal,532,Function call pattern with specific parameters,,1766,"        df: pd.DataFrame, proc_l: List[processor_module.Processor], with_fit: bool, check_for_infer: bool","[220, 220, 220, 220, 220, 220, 220, 47764, 25, 279, 67, 13, 6601, 19778, 11, 13834, 62, 75, 25, 7343, 58, 41341, 62, 21412, 13, 18709, 273, 4357, 351, 62, 11147, 25, 20512, 11, 2198, 62, 1640, 62, 259, 2232, 25, 20512]"
üß† ML Signal: Conversion of DataFrame columns to list,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 15180, 284, 1351]",0.5,1837,ml_signal,535,Conversion of DataFrame columns to list,,1808,            if check_for_infer and not proc.is_for_infer():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2198, 62, 1640, 62, 259, 2232, 290, 407, 13834, 13, 271, 62, 1640, 62, 259, 2232, 33529]"
‚úÖ Best Practice: Use of type hinting for variable 'new_hd' improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 7885, 705, 3605, 62, 31298, 6, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1855,best_practice,549,Use of type hinting for variable 'new_hd' improves code readability and maintainability.,,1837,            if not p.readonly():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 279, 13, 961, 8807, 33529]"
üß† ML Signal: Setting an attribute to a constant value can indicate a flag or state change.,"[8582, 100, 254, 10373, 26484, 25, 25700, 281, 11688, 284, 257, 6937, 1988, 460, 7603, 257, 6056, 393, 1181, 1487, 13]",0.5,1864,ml_signal,551,Setting an attribute to a constant value can indicate a flag or state change.,,1855,        return True,"[220, 220, 220, 220, 220, 220, 220, 1441, 6407]"
‚ö†Ô∏è SAST Risk (Low): getattr with a default value of None can mask attribute errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 651, 35226, 351, 257, 4277, 1988, 286, 6045, 460, 9335, 11688, 8563, 13]",0.5,1890,sast_risk,559,getattr with a default value of None can mask attribute errors.,Low,1864,        # data processing flow of self.process_type == DataHandlerLP.PTYPE_I,"[220, 220, 220, 220, 220, 220, 220, 1303, 1366, 7587, 5202, 286, 2116, 13, 14681, 62, 4906, 6624, 6060, 25060, 19930, 13, 47, 25216, 62, 40]"
‚úÖ Best Practice: Use of @classmethod decorator indicates a method that operates on the class rather than instance.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 9217, 257, 2446, 326, 14051, 319, 262, 1398, 2138, 621, 4554, 13]",0.5,1890,best_practice,562,Use of @classmethod decorator indicates a method that operates on the class rather than instance.,,1890,,[]
"üß† ML Signal: Method for creating an object from a DataFrame, common in data processing libraries","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 4441, 281, 2134, 422, 257, 6060, 19778, 11, 2219, 287, 1366, 7587, 12782]",1.0,1890,ml_signal,562,"Method for creating an object from a DataFrame, common in data processing libraries",,1890,,[]
"‚úÖ Best Practice: Docstring provides motivation and usage example, aiding understanding and maintainability","[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 14052, 290, 8748, 1672, 11, 37221, 4547, 290, 5529, 1799]",0.5,1890,best_practice,562,"Docstring provides motivation and usage example, aiding understanding and maintainability",,1890,,[]
‚ö†Ô∏è SAST Risk (Low): Potential performance issue with StaticDataLoader being slow,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2854, 2071, 351, 36125, 6601, 17401, 852, 3105]",1.0,1916,sast_risk,576,Potential performance issue with StaticDataLoader being slow,Low,1890,            The input of the `fit` will be the output of the previous processor,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 383, 5128, 286, 262, 4600, 11147, 63, 481, 307, 262, 5072, 286, 262, 2180, 12649]"
‚úÖ Best Practice: Returning an instance of the class using a class method,"[26486, 227, 6705, 19939, 25, 42882, 281, 4554, 286, 262, 1398, 1262, 257, 1398, 2446]",0.5,1942,best_practice,576,Returning an instance of the class using a class method,,1916,            The input of the `fit` will be the output of the previous processor,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 383, 5128, 286, 262, 4600, 11147, 63, 481, 307, 262, 5072, 286, 262, 2180, 12649]"

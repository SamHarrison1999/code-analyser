annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,2,best_practice,7,Grouping imports from the same package together improves readability.,,0,import warnings,"[11748, 14601]"
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,2,best_practice,9,Grouping imports from the same package together improves readability.,,2,,[]
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,2,best_practice,11,Grouping imports from the same package together improves readability.,,2,,[]
‚úÖ Best Practice: Grouping imports from the same package together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 5301, 1978, 19575, 1100, 1799, 13]",0.5,9,best_practice,12,Grouping imports from the same package together improves readability.,,2,from qlib.data import D,"[6738, 10662, 8019, 13, 7890, 1330, 360]"
‚úÖ Best Practice: Class docstring provides a clear description of the class purpose,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007]",0.5,9,best_practice,11,Class docstring provides a clear description of the class purpose,,9,,[]
‚úÖ Best Practice: Use of abstract method to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 286, 12531, 2446, 284, 4605, 7822, 287, 850, 37724]",1.0,9,best_practice,16,Use of abstract method to enforce implementation in subclasses,,9,,[]
‚úÖ Best Practice: Docstring provides a clear description of the method's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 338, 4007, 290, 8748, 13]",1.0,9,best_practice,17,Docstring provides a clear description of the method's purpose and usage.,,9,,[]
‚úÖ Best Practice: Clearly specifies the expected types for the 'instruments' parameter.,"[26486, 227, 6705, 19939, 25, 23730, 26052, 262, 2938, 3858, 329, 262, 705, 259, 2536, 2886, 6, 11507, 13]",0.5,9,best_practice,17,Clearly specifies the expected types for the 'instruments' parameter.,,9,,[]
‚úÖ Best Practice: Clearly specifies the expected type for the 'start_time' parameter.,"[26486, 227, 6705, 19939, 25, 23730, 26052, 262, 2938, 2099, 329, 262, 705, 9688, 62, 2435, 6, 11507, 13]",0.5,84,best_practice,35,Clearly specifies the expected type for the 'start_time' parameter.,,9,                2010-01-04  SH600000    81.807068  17145150.0       83.737389        83.016739    2.741058  0.0032,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3050, 12, 486, 12, 3023, 220, 6006, 8054, 830, 220, 220, 220, 9773, 13, 1795, 2154, 3104, 220, 1596, 1415, 4349, 1120, 13, 15, 220, 220, 220, 220, 220, 220, 9698, 13, 22, 2718, 29769, 220, 220, 220, 220, 220, 220, 220, 9698, 13, 486, 3134, 2670, 220, 220, 220, 362, 13, 4524, 940, 3365, 220, 657, 13, 405, 2624]"
‚úÖ Best Practice: Clearly specifies the expected type for the 'end_time' parameter.,"[26486, 227, 6705, 19939, 25, 23730, 26052, 262, 2938, 2099, 329, 262, 705, 437, 62, 2435, 6, 11507, 13]",0.5,84,best_practice,38,Clearly specifies the expected type for the 'end_time' parameter.,,84,,[]
‚úÖ Best Practice: Clearly specifies the return type of the method.,"[26486, 227, 6705, 19939, 25, 23730, 26052, 262, 1441, 2099, 286, 262, 2446, 13]",0.5,113,best_practice,43,Clearly specifies the return type of the method.,,84,            it can either be the market name or the config file of instruments generated by InstrumentProvider.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 340, 460, 2035, 307, 262, 1910, 1438, 393, 262, 4566, 2393, 286, 12834, 7560, 416, 42410, 29495, 13]"
‚ö†Ô∏è SAST Risk (Low): Raises KeyError without specifying which part of the code might raise it.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 7383, 12331, 1231, 31577, 543, 636, 286, 262, 2438, 1244, 5298, 340, 13]",0.5,130,sast_risk,46,Raises KeyError without specifying which part of the code might raise it.,Low,113,            start of the time range.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 286, 262, 640, 2837, 13]"
‚úÖ Best Practice: Class docstring provides a clear explanation of the class purpose and usage.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 7468, 286, 262, 1398, 4007, 290, 8748, 13]",1.0,138,best_practice,50,Class docstring provides a clear explanation of the class purpose and usage.,,130,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
üß† ML Signal: Use of isinstance to determine type of config,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 5004, 2099, 286, 4566]",1.0,138,ml_signal,65,Use of isinstance to determine type of config,,138,,[]
üß† ML Signal: Use of dictionary comprehension to parse fields,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 35915, 284, 21136, 7032]",0.5,142,ml_signal,67,Use of dictionary comprehension to parse fields,,138,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Use of method to parse fields info,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2446, 284, 21136, 7032, 7508]",1.0,150,ml_signal,71,Use of method to parse fields info,,142,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
"‚ö†Ô∏è SAST Risk (Low): No validation on the contents of fields_info, could lead to unexpected behavior if contents are not as expected","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 262, 10154, 286, 7032, 62, 10951, 11, 714, 1085, 284, 10059, 4069, 611, 10154, 389, 407, 355, 2938]",0.5,158,sast_risk,71,"No validation on the contents of fields_info, could lead to unexpected behavior if contents are not as expected",Low,150,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚úÖ Best Practice: Check the type of the first element to determine the structure of fields_info,"[26486, 227, 6705, 19939, 25, 6822, 262, 2099, 286, 262, 717, 5002, 284, 5004, 262, 4645, 286, 7032, 62, 10951]",0.5,174,best_practice,76,Check the type of the first element to determine the structure of fields_info,,158,            .. code-block::,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11485, 2438, 12, 9967, 3712]"
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,183,best_practice,92,Use of type hints for function parameters and return type improves code readability and maintainability.,,174,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Check if the object is a group to decide the loading strategy,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 2134, 318, 257, 1448, 284, 5409, 262, 11046, 4811]",0.5,195,best_practice,108,Check if the object is a group to decide the loading strategy,,183,"        return exprs, names","[220, 220, 220, 220, 220, 220, 220, 1441, 1033, 3808, 11, 3891]"
‚úÖ Best Practice: Use of pd.concat for combining dataframes is efficient,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 1102, 9246, 329, 19771, 1366, 37805, 318, 6942]",1.0,195,best_practice,109,Use of pd.concat for combining dataframes is efficient,,195,,[]
üß† ML Signal: Iterating over dictionary items to process data,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709, 284, 1429, 1366]",1.0,195,ml_signal,109,Iterating over dictionary items to process data,,195,,[]
‚úÖ Best Practice: Unpacking tuple for clarity,"[26486, 227, 6705, 19939, 25, 791, 41291, 46545, 329, 16287]",0.5,203,best_practice,120,Unpacking tuple for clarity,,195,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Method call with multiple parameters,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 3294, 10007]",0.5,203,ml_signal,122,Method call with multiple parameters,,203,,[]
‚úÖ Best Practice: Returning a DataFrame for consistency,"[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 329, 15794]",0.5,203,best_practice,122,Returning a DataFrame for consistency,,203,,[]
‚úÖ Best Practice: Include a docstring to describe the purpose and usage of the class,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 1398]",0.5,217,best_practice,121,Include a docstring to describe the purpose and usage of the class,,203,        load the dataframe for specific group,"[220, 220, 220, 220, 220, 220, 220, 3440, 262, 1366, 14535, 329, 2176, 1448]"
‚úÖ Best Practice: Docstring provides detailed parameter descriptions,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 6496, 11507, 16969]",0.5,234,best_practice,130,Docstring provides detailed parameter descriptions,,217,            the name of the data.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 1438, 286, 262, 1366, 13]"
üß† ML Signal: Usage of default mutable arguments (filter_pipe),"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4277, 4517, 540, 7159, 357, 24455, 62, 34360, 8]",0.5,243,ml_signal,147,Usage of default mutable arguments (filter_pipe),,234,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of conditional expression for default value,"[26486, 227, 6705, 19939, 25, 5765, 286, 26340, 5408, 329, 4277, 1988]",0.5,252,best_practice,150,Use of conditional expression for default value,,243,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime type checking,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 2099, 10627]",0.5,262,sast_risk,153,Use of assert for runtime type checking,Low,252,class QlibDataLoader(DLWParser):,"[4871, 1195, 8019, 6601, 17401, 7, 19260, 25527, 28198, 2599]"
‚úÖ Best Practice: Calling superclass constructor,"[26486, 227, 6705, 19939, 25, 32677, 2208, 4871, 23772]",0.5,271,best_practice,157,Calling superclass constructor,,262,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if _gp not in freq,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 4808, 31197, 407, 287, 2030, 80]",0.5,292,sast_risk,162,Potential KeyError if _gp not in freq,Low,271,"        inst_processors: Union[dict, list] = None,","[220, 220, 220, 220, 220, 220, 220, 916, 62, 14681, 669, 25, 4479, 58, 11600, 11, 1351, 60, 796, 6045, 11]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime condition checking,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 4006, 10627]",0.5,313,sast_risk,162,Use of assert for runtime condition checking,Low,292,"        inst_processors: Union[dict, list] = None,","[220, 220, 220, 220, 220, 220, 220, 916, 62, 14681, 669, 25, 4479, 58, 11600, 11, 1351, 60, 796, 6045, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if `instruments` is None and not handled properly later in the code.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 4600, 259, 2536, 2886, 63, 318, 6045, 290, 407, 12118, 6105, 1568, 287, 262, 2438, 13]",1.0,324,sast_risk,171,Potential issue if `instruments` is None and not handled properly later in the code.,Low,313,        swap_level :,"[220, 220, 220, 220, 220, 220, 220, 16075, 62, 5715, 1058]"
‚úÖ Best Practice: Informing the user about default behavior when `instruments` is not set.,"[26486, 227, 6705, 19939, 25, 554, 15464, 262, 2836, 546, 4277, 4069, 618, 4600, 259, 2536, 2886, 63, 318, 407, 900, 13]",0.5,338,best_practice,173,Informing the user about default behavior when `instruments` is not set.,,324,        freq:  dict or str,"[220, 220, 220, 220, 220, 220, 220, 2030, 80, 25, 220, 8633, 393, 965]"
‚úÖ Best Practice: Checking type of `instruments` to handle different input scenarios.,"[26486, 227, 6705, 19939, 25, 39432, 2099, 286, 4600, 259, 2536, 2886, 63, 284, 5412, 1180, 5128, 13858, 13]",0.5,353,best_practice,176,Checking type of `instruments` to handle different input scenarios.,,338,        inst_processors: dict | list,"[220, 220, 220, 220, 220, 220, 220, 916, 62, 14681, 669, 25, 8633, 930, 1351]"
üß† ML Signal: Usage of external function `D.instruments` with specific parameters.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 2163, 4600, 35, 13, 259, 2536, 2886, 63, 351, 2176, 10007, 13]",1.0,382,ml_signal,178,Usage of external function `D.instruments` with specific parameters.,,353,"            If inst_processors is a list, then it will be applied to all groups.","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1002, 916, 62, 14681, 669, 318, 257, 1351, 11, 788, 340, 481, 307, 5625, 284, 477, 2628, 13]"
‚úÖ Best Practice: Warning user about unused parameter to avoid confusion.,"[26486, 227, 6705, 19939, 25, 15932, 2836, 546, 21958, 11507, 284, 3368, 10802, 13]",0.5,396,best_practice,182,Warning user about unused parameter to avoid confusion.,,382,        self.freq = freq,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19503, 80, 796, 2030, 80]"
‚úÖ Best Practice: Using dictionary to handle different frequencies based on `gp_name`.,"[26486, 227, 6705, 19939, 25, 8554, 22155, 284, 5412, 1180, 19998, 1912, 319, 4600, 31197, 62, 3672, 44646]",0.5,396,best_practice,183,Using dictionary to handle different frequencies based on `gp_name`.,,396,,[]
‚úÖ Best Practice: Handling different types of `inst_processors` to ensure correct processing.,"[26486, 227, 6705, 19939, 25, 49500, 1180, 3858, 286, 4600, 8625, 62, 14681, 669, 63, 284, 4155, 3376, 7587, 13]",0.5,424,best_practice,185,Handling different types of `inst_processors` to ensure correct processing.,,396,        self.inst_processors = inst_processors if inst_processors is not None else {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 8625, 62, 14681, 669, 796, 916, 62, 14681, 669, 611, 916, 62, 14681, 669, 318, 407, 6045, 2073, 23884]"
üß† ML Signal: Usage of external function `D.features` with multiple parameters.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 2163, 4600, 35, 13, 40890, 63, 351, 3294, 10007, 13]",1.0,453,ml_signal,188,Usage of external function `D.features` with multiple parameters.,,424,"        ), f""inst_processors(={self.inst_processors}) must be dict or list""","[220, 220, 220, 220, 220, 220, 220, 10612, 277, 1, 8625, 62, 14681, 669, 7, 34758, 944, 13, 8625, 62, 14681, 669, 30072, 1276, 307, 8633, 393, 1351, 1]"
‚úÖ Best Practice: Explicitly setting DataFrame column names for clarity.,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6060, 19778, 5721, 3891, 329, 16287, 13]",1.0,453,best_practice,191,Explicitly setting DataFrame column names for clarity.,,453,,[]
‚úÖ Best Practice: Conditional logic to modify DataFrame index for specific use cases.,"[26486, 227, 6705, 19939, 25, 9724, 1859, 9156, 284, 13096, 6060, 19778, 6376, 329, 2176, 779, 2663, 13]",0.5,468,best_practice,193,Conditional logic to modify DataFrame index for specific use cases.,,453,            # check sample config,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 2198, 6291, 4566]"
‚úÖ Best Practice: Use of class-level attribute for shared configuration,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 12, 5715, 11688, 329, 4888, 8398]",0.5,468,best_practice,191,Use of class-level attribute for shared configuration,,468,,[]
‚úÖ Best Practice: Use of type hints for function parameters improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,482,best_practice,192,Use of type hints for function parameters improves code readability and maintainability,,468,        if self.is_group:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 271, 62, 8094, 25]"
"üß† ML Signal: Storing configuration in an instance variable, indicating a pattern of configuration-driven behavior","[8582, 100, 254, 10373, 26484, 25, 520, 3255, 8398, 287, 281, 4554, 7885, 11, 12739, 257, 3912, 286, 8398, 12, 15808, 4069]",0.5,492,ml_signal,202,"Storing configuration in an instance variable, indicating a pattern of configuration-driven behavior",,482,    def load_group_df(,"[220, 220, 220, 825, 3440, 62, 8094, 62, 7568, 7]"
"üß† ML Signal: Storing join type in an instance variable, indicating a pattern of behavior for data alignment","[8582, 100, 254, 10373, 26484, 25, 520, 3255, 4654, 2099, 287, 281, 4554, 7885, 11, 12739, 257, 3912, 286, 4069, 329, 1366, 19114]",0.5,501,ml_signal,204,"Storing join type in an instance variable, indicating a pattern of behavior for data alignment",,492,"        instruments,","[220, 220, 220, 220, 220, 220, 220, 12834, 11]"
"üß† ML Signal: Initialization of a data-related attribute, indicating a pattern of data handling","[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 257, 1366, 12, 5363, 11688, 11, 12739, 257, 3912, 286, 1366, 9041]",0.5,512,ml_signal,206,"Initialization of a data-related attribute, indicating a pattern of data handling",,501,"        names: list,","[220, 220, 220, 220, 220, 220, 220, 3891, 25, 1351, 11]"
‚úÖ Best Practice: Using a dictionary comprehension for concise and readable code,"[26486, 227, 6705, 19939, 25, 8554, 257, 22155, 35915, 329, 35327, 290, 31744, 2438]",1.0,521,best_practice,204,Using a dictionary comprehension for concise and readable code,,512,"        instruments,","[220, 220, 220, 220, 220, 220, 220, 12834, 11]"
üß† ML Signal: Custom serialization logic for object state management,"[8582, 100, 254, 10373, 26484, 25, 8562, 11389, 1634, 9156, 329, 2134, 1181, 4542]",0.5,533,ml_signal,205,Custom serialization logic for object state management,,521,"        exprs: list,","[220, 220, 220, 220, 220, 220, 220, 1033, 3808, 25, 1351, 11]"
‚úÖ Best Practice: Filtering out private attributes from serialization,"[26486, 227, 6705, 19939, 25, 7066, 20212, 503, 2839, 12608, 422, 11389, 1634]",0.5,557,best_practice,207,Filtering out private attributes from serialization,,533,"        start_time: Union[str, pd.Timestamp] = None,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 25, 4479, 58, 2536, 11, 279, 67, 13, 14967, 27823, 60, 796, 6045, 11]"
‚úÖ Best Practice: Ensure raw data is loaded before processing,"[26486, 227, 6705, 19939, 25, 48987, 8246, 1366, 318, 9639, 878, 7587]",1.0,581,best_practice,207,Ensure raw data is loaded before processing,,557,"        start_time: Union[str, pd.Timestamp] = None,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 25, 4479, 58, 2536, 11, 279, 67, 13, 14967, 27823, 60, 796, 6045, 11]"
‚úÖ Best Practice: Use of .loc for selecting data by label,"[26486, 227, 6705, 19939, 25, 5765, 286, 764, 17946, 329, 17246, 1366, 416, 6167]",0.5,610,best_practice,212,Use of .loc for selecting data by label,,581,"            warnings.warn(""`instruments` is not set, will load all stocks"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14601, 13, 40539, 7203, 63, 259, 2536, 2886, 63, 318, 407, 900, 11, 481, 3440, 477, 14420, 4943]"
‚úÖ Best Practice: Convert time inputs to a standard format,"[26486, 227, 6705, 19939, 25, 38240, 640, 17311, 284, 257, 3210, 5794]",0.5,628,best_practice,216,Convert time inputs to a standard format,,610,        elif self.filter_pipe is not None:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 2116, 13, 24455, 62, 34360, 318, 407, 6045, 25]"
‚úÖ Best Practice: Convert time inputs to a standard format,"[26486, 227, 6705, 19939, 25, 38240, 640, 17311, 284, 257, 3210, 5794]",0.5,628,best_practice,218,Convert time inputs to a standard format,,628,,[]
‚úÖ Best Practice: Use of .loc for slicing data by index,"[26486, 227, 6705, 19939, 25, 5765, 286, 764, 17946, 329, 49289, 1366, 416, 6376]",0.5,641,best_practice,220,Use of .loc for slicing data by index,,628,        inst_processors = (,"[220, 220, 220, 220, 220, 220, 220, 916, 62, 14681, 669, 796, 357]"
üß† ML Signal: Usage of pd.concat to combine datasets,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 279, 67, 13, 1102, 9246, 284, 12082, 40522]",1.0,687,ml_signal,221,Usage of pd.concat to combine datasets,,641,"            self.inst_processors if isinstance(self.inst_processors, list) else self.inst_processors.get(gp_name, [])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 8625, 62, 14681, 669, 611, 318, 39098, 7, 944, 13, 8625, 62, 14681, 669, 11, 1351, 8, 2073, 2116, 13, 8625, 62, 14681, 669, 13, 1136, 7, 31197, 62, 3672, 11, 685, 12962]"
üß† ML Signal: Dictionary comprehension to load datasets,"[8582, 100, 254, 10373, 26484, 25, 28261, 35915, 284, 3440, 40522]",0.5,733,ml_signal,221,Dictionary comprehension to load datasets,,687,"            self.inst_processors if isinstance(self.inst_processors, list) else self.inst_processors.get(gp_name, [])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 8625, 62, 14681, 669, 611, 318, 39098, 7, 944, 13, 8625, 62, 14681, 669, 11, 1351, 8, 2073, 2116, 13, 8625, 62, 14681, 669, 13, 1136, 7, 31197, 62, 3672, 11, 685, 12962]"
‚úÖ Best Practice: Sorting index for consistent data ordering,"[26486, 227, 6705, 19939, 25, 311, 24707, 6376, 329, 6414, 1366, 16216]",0.5,733,best_practice,228,Sorting index for consistent data ordering,,733,,[]
‚ö†Ô∏è SAST Risk (Medium): File extension check for security,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 9220, 7552, 2198, 329, 2324]",0.5,737,sast_risk,231,File extension check for security,Medium,733,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Reading parquet files with pandas,"[8582, 100, 254, 10373, 26484, 25, 11725, 1582, 21108, 3696, 351, 19798, 292]",1.0,741,ml_signal,233,Reading parquet files with pandas,,737,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (High): Potentially unsafe deserialization with pickle,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 6902, 3746, 21596, 748, 48499, 1634, 351, 2298, 293]",1.0,741,sast_risk,236,Potentially unsafe deserialization with pickle,High,741,,[]
üß† ML Signal: Direct assignment from DataFrame,"[8582, 100, 254, 10373, 26484, 25, 4128, 16237, 422, 6060, 19778]",1.0,750,ml_signal,240,Direct assignment from DataFrame,,741,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Class docstring provides a clear description of the class purpose,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007]",1.0,761,best_practice,235,Class docstring provides a clear description of the class purpose,,750,"    include_attr = [""_config""]","[220, 220, 220, 2291, 62, 35226, 796, 14631, 62, 11250, 8973]"
‚úÖ Best Practice: Docstring provides clear parameter descriptions and usage example,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 11507, 16969, 290, 8748, 1672]",0.5,770,best_practice,240,Docstring provides clear parameter descriptions and usage example,,761,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Calls the superclass's __init__ method to ensure proper initialization,"[26486, 227, 6705, 19939, 25, 27592, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 284, 4155, 1774, 37588]",0.5,790,best_practice,264,Calls the superclass's __init__ method to ensure proper initialization,,770,        if start_time is None and end_time is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 923, 62, 2435, 318, 6045, 290, 886, 62, 2435, 318, 6045, 25]"
"üß† ML Signal: Usage of isinstance to check type, common pattern in dynamic typing","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 318, 39098, 284, 2198, 2099, 11, 2219, 3912, 287, 8925, 19720]",0.5,814,ml_signal,267,"Usage of isinstance to check type, common pattern in dynamic typing",,790,        start_time = time_to_slc_point(start_time),"[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 796, 640, 62, 1462, 62, 6649, 66, 62, 4122, 7, 9688, 62, 2435, 8]"
üß† ML Signal: List comprehension for initializing class attributes,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 329, 4238, 2890, 1398, 12608]",0.5,838,ml_signal,267,List comprehension for initializing class attributes,,814,        start_time = time_to_slc_point(start_time),"[220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 796, 640, 62, 1462, 62, 6649, 66, 62, 4122, 7, 9688, 62, 2435, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if init_instance_by_config is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 2315, 62, 39098, 62, 1525, 62, 11250, 318, 407, 6105, 31031]",1.0,862,sast_risk,268,Potential risk if init_instance_by_config is not properly validated,Low,838,        end_time = time_to_slc_point(end_time),"[220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 796, 640, 62, 1462, 62, 6649, 66, 62, 4122, 7, 437, 62, 2435, 8]"
üß† ML Signal: Storing method parameters as instance attributes,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 2446, 10007, 355, 4554, 12608]",0.5,877,ml_signal,272,Storing method parameters as instance attributes,,862,        if self._data is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13557, 7890, 318, 407, 6045, 25]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions like KeyError without specific handling can hide bugs.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 588, 7383, 12331, 1231, 2176, 9041, 460, 7808, 11316, 13]",1.0,894,sast_risk,274,Catching broad exceptions like KeyError without specific handling can hide bugs.,Low,877,"        if isinstance(self._config, dict):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 944, 13557, 11250, 11, 8633, 2599]"
‚úÖ Best Practice: Provide a fallback mechanism when an exception occurs.,"[26486, 227, 6705, 19939, 25, 44290, 257, 2121, 1891, 9030, 618, 281, 6631, 8833, 13]",0.5,915,best_practice,278,Provide a fallback mechanism when an exception occurs.,,894,"                join=self.join,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4654, 28, 944, 13, 22179, 11]"
‚úÖ Best Practice: Use list comprehensions for concise and readable code.,"[26486, 227, 6705, 19939, 25, 5765, 1351, 8569, 507, 329, 35327, 290, 31744, 2438, 13]",1.0,944,best_practice,285,Use list comprehensions for concise and readable code.,,915,"                with Path(self._config).open(""rb"") as f:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 10644, 7, 944, 13557, 11250, 737, 9654, 7203, 26145, 4943, 355, 277, 25]"
üß† ML Signal: Usage of pd.merge indicates data integration patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 279, 67, 13, 647, 469, 9217, 1366, 11812, 7572, 13]",0.5,962,ml_signal,288,Usage of pd.merge indicates data integration patterns.,,944,            self._data = self._config,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 7890, 796, 2116, 13557, 11250]"
üß† ML Signal: Sorting dataframes is a common preprocessing step in data analysis.,"[8582, 100, 254, 10373, 26484, 25, 311, 24707, 1366, 37805, 318, 257, 2219, 662, 36948, 2239, 287, 1366, 3781, 13]",0.5,980,ml_signal,288,Sorting dataframes is a common preprocessing step in data analysis.,,962,            self._data = self._config,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 7890, 796, 2116, 13557, 11250]"
‚úÖ Best Practice: Class docstring provides a clear description of the class and its intended use.,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 290, 663, 5292, 779, 13]",1.0,1009,best_practice,296,Class docstring provides a clear description of the class and its intended use.,,980,"    def __init__(self, dataloader_l: List[Dict], join=""left"") -> None:","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 4818, 282, 1170, 263, 62, 75, 25, 7343, 58, 35, 713, 4357, 4654, 2625, 9464, 4943, 4613, 6045, 25]"
‚úÖ Best Practice: TODO comments indicate areas for future improvement or refactoring.,"[26486, 227, 6705, 19939, 25, 16926, 46, 3651, 7603, 3006, 329, 2003, 9025, 393, 1006, 529, 3255, 13]",0.5,1017,best_practice,297,TODO comments indicate areas for future improvement or refactoring.,,1009,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Use of type hints for function parameters improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1025,best_practice,297,Use of type hints for function parameters improves code readability and maintainability.,,1017,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Mutable default argument for fetch_kwargs can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13859, 540, 4277, 4578, 329, 21207, 62, 46265, 22046, 460, 1085, 284, 10059, 4069, 13]",1.0,1033,sast_risk,297,Mutable default argument for fetch_kwargs can lead to unexpected behavior.,Low,1025,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Importing within a function can reduce memory usage and improve startup time.,"[26486, 227, 6705, 19939, 25, 17267, 278, 1626, 257, 2163, 460, 4646, 4088, 8748, 290, 2987, 13693, 640, 13]",1.0,1057,best_practice,317,Importing within a function can reduce memory usage and improve startup time.,,1033,                        },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Use of dictionary comprehension to initialize handlers based on configuration.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 35915, 284, 41216, 32847, 1912, 319, 8398, 13]",1.0,1070,ml_signal,323,Use of dictionary comprehension to initialize handlers based on configuration.,,1057,        super().__init__(),"[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 3419]"
üß† ML Signal: Conditional logic to handle different initialization paths for handlers.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 5412, 1180, 37588, 13532, 329, 32847, 13]",1.0,1078,ml_signal,326,Conditional logic to handle different initialization paths for handlers.,,1070,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Storing configuration state in instance variables for later use.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 8398, 1181, 287, 4554, 9633, 329, 1568, 779, 13]",0.5,1078,ml_signal,328,Storing configuration state in instance variables for later use.,,1078,,[]
‚úÖ Best Practice: Initializing fetch_kwargs with a default value before updating.,"[26486, 227, 6705, 19939, 25, 20768, 2890, 21207, 62, 46265, 22046, 351, 257, 4277, 1988, 878, 19698, 13]",1.0,1109,best_practice,329,Initializing fetch_kwargs with a default value before updating.,,1078,"    def load(self, instruments=None, start_time=None, end_time=None) -> pd.DataFrame:","[220, 220, 220, 825, 3440, 7, 944, 11, 12834, 28, 14202, 11, 923, 62, 2435, 28, 14202, 11, 886, 62, 2435, 28, 14202, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
"üß† ML Signal: Use of update method to merge dictionaries, indicating dynamic configuration handling.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4296, 2446, 284, 20121, 48589, 3166, 11, 12739, 8925, 8398, 9041, 13]",1.0,1140,ml_signal,329,"Use of update method to merge dictionaries, indicating dynamic configuration handling.",,1109,"    def load(self, instruments=None, start_time=None, end_time=None) -> pd.DataFrame:","[220, 220, 220, 825, 3440, 7, 944, 11, 12834, 28, 14202, 11, 923, 62, 2435, 28, 14202, 11, 886, 62, 2435, 28, 14202, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
‚úÖ Best Practice: Log a warning when a parameter is ignored to inform the user.,"[26486, 227, 6705, 19939, 25, 5972, 257, 6509, 618, 257, 11507, 318, 9514, 284, 4175, 262, 2836, 13]",1.0,1148,best_practice,326,Log a warning when a parameter is ignored to inform the user.,,1140,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Usage of pd.concat indicates data aggregation from multiple sources.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 279, 67, 13, 1102, 9246, 9217, 1366, 46500, 422, 3294, 4237, 13]",1.0,1179,ml_signal,329,Usage of pd.concat indicates data aggregation from multiple sources.,,1148,"    def load(self, instruments=None, start_time=None, end_time=None) -> pd.DataFrame:","[220, 220, 220, 825, 3440, 7, 944, 11, 12834, 28, 14202, 11, 923, 62, 2435, 28, 14202, 11, 886, 62, 2435, 28, 14202, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
üß† ML Signal: Dictionary comprehension used for dynamic data fetching.,"[8582, 100, 254, 10373, 26484, 25, 28261, 35915, 973, 329, 8925, 1366, 21207, 278, 13]",0.5,1210,ml_signal,329,Dictionary comprehension used for dynamic data fetching.,,1179,"    def load(self, instruments=None, start_time=None, end_time=None) -> pd.DataFrame:","[220, 220, 220, 825, 3440, 7, 944, 11, 12834, 28, 14202, 11, 923, 62, 2435, 28, 14202, 11, 886, 62, 2435, 28, 14202, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
üß† ML Signal: Direct fetch method call on a handler object.,"[8582, 100, 254, 10373, 26484, 25, 4128, 21207, 2446, 869, 319, 257, 21360, 2134, 13]",0.5,1256,ml_signal,338,Direct fetch method call on a handler object.,,1210,"                df_current = dl.load(instruments=None, start_time=start_time, end_time=end_time)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 62, 14421, 796, 288, 75, 13, 2220, 7, 259, 2536, 2886, 28, 14202, 11, 923, 62, 2435, 28, 9688, 62, 2435, 11, 886, 62, 2435, 28, 437, 62, 2435, 8]"
‚úÖ Best Practice: Explicitly returning a DataFrame for clarity and type consistency.,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 257, 6060, 19778, 329, 16287, 290, 2099, 15794, 13]",0.5,1302,best_practice,338,Explicitly returning a DataFrame for clarity and type consistency.,,1256,"                df_current = dl.load(instruments=None, start_time=start_time, end_time=end_time)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 62, 14421, 796, 288, 75, 13, 2220, 7, 259, 2536, 2886, 28, 14202, 11, 923, 62, 2435, 28, 9688, 62, 2435, 11, 886, 62, 2435, 28, 437, 62, 2435, 8]"

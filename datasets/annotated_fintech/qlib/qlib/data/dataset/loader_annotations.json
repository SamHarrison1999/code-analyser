[
  {
    "line": 7,
    "text": "import warnings",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [
      11748,
      14601
    ],
    "start_token": 0,
    "end_token": 2,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2,
    "end_token": 2,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 11,
    "text": "",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2,
    "end_token": 2,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 12,
    "text": "from qlib.data import D",
    "annotation": "\u2705 Best Practice: Grouping imports from the same package together improves readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      7890,
      1330,
      360
    ],
    "start_token": 2,
    "end_token": 9,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      422,
      262,
      976,
      5301,
      1978,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports from the same package together improves readability."
  },
  {
    "line": 11,
    "text": "",
    "annotation": "\u2705 Best Practice: Class docstring provides a clear description of the class purpose",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 9,
    "end_token": 9,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      1398,
      4007
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a clear description of the class purpose"
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of abstract method to enforce implementation in subclasses",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 9,
    "end_token": 9,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      12531,
      2446,
      284,
      4605,
      7822,
      287,
      850,
      37724
    ],
    "label": "best_practice",
    "reason": "Use of abstract method to enforce implementation in subclasses"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the method's purpose and usage.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 9,
    "end_token": 9,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2446,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the method's purpose and usage."
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\u2705 Best Practice: Clearly specifies the expected types for the 'instruments' parameter.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 9,
    "end_token": 9,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      23730,
      26052,
      262,
      2938,
      3858,
      329,
      262,
      705,
      259,
      2536,
      2886,
      6,
      11507,
      13
    ],
    "label": "best_practice",
    "reason": "Clearly specifies the expected types for the 'instruments' parameter."
  },
  {
    "line": 35,
    "text": "                2010-01-04  SH600000    81.807068  17145150.0       83.737389        83.016739    2.741058  0.0032",
    "annotation": "\u2705 Best Practice: Clearly specifies the expected type for the 'start_time' parameter.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3050,
      12,
      486,
      12,
      3023,
      220,
      6006,
      8054,
      830,
      220,
      220,
      220,
      9773,
      13,
      1795,
      2154,
      3104,
      220,
      1596,
      1415,
      4349,
      1120,
      13,
      15,
      220,
      220,
      220,
      220,
      220,
      220,
      9698,
      13,
      22,
      2718,
      29769,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9698,
      13,
      486,
      3134,
      2670,
      220,
      220,
      220,
      362,
      13,
      4524,
      940,
      3365,
      220,
      657,
      13,
      405,
      2624
    ],
    "start_token": 9,
    "end_token": 84,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      23730,
      26052,
      262,
      2938,
      2099,
      329,
      262,
      705,
      9688,
      62,
      2435,
      6,
      11507,
      13
    ],
    "label": "best_practice",
    "reason": "Clearly specifies the expected type for the 'start_time' parameter."
  },
  {
    "line": 38,
    "text": "",
    "annotation": "\u2705 Best Practice: Clearly specifies the expected type for the 'end_time' parameter.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 84,
    "end_token": 84,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      23730,
      26052,
      262,
      2938,
      2099,
      329,
      262,
      705,
      437,
      62,
      2435,
      6,
      11507,
      13
    ],
    "label": "best_practice",
    "reason": "Clearly specifies the expected type for the 'end_time' parameter."
  },
  {
    "line": 43,
    "text": "            it can either be the market name or the config file of instruments generated by InstrumentProvider.",
    "annotation": "\u2705 Best Practice: Clearly specifies the return type of the method.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      340,
      460,
      2035,
      307,
      262,
      1910,
      1438,
      393,
      262,
      4566,
      2393,
      286,
      12834,
      7560,
      416,
      42410,
      29495,
      13
    ],
    "start_token": 84,
    "end_token": 113,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      23730,
      26052,
      262,
      1441,
      2099,
      286,
      262,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Clearly specifies the return type of the method."
  },
  {
    "line": 46,
    "text": "            start of the time range.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raises KeyError without specifying which part of the code might raise it.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      286,
      262,
      640,
      2837,
      13
    ],
    "start_token": 113,
    "end_token": 130,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      2696,
      7383,
      12331,
      1231,
      31577,
      543,
      636,
      286,
      262,
      2438,
      1244,
      5298,
      340,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raises KeyError without specifying which part of the code might raise it."
  },
  {
    "line": 50,
    "text": "        Returns",
    "annotation": "\u2705 Best Practice: Class docstring provides a clear explanation of the class purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409
    ],
    "start_token": 130,
    "end_token": 138,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      1398,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a clear explanation of the class purpose and usage."
  },
  {
    "line": 65,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of isinstance to determine type of config",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 138,
    "end_token": 138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      39098,
      284,
      5004,
      2099,
      286,
      4566
    ],
    "label": "ml_signal",
    "reason": "Use of isinstance to determine type of config"
  },
  {
    "line": 67,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary comprehension to parse fields",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 138,
    "end_token": 142,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      35915,
      284,
      21136,
      7032
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary comprehension to parse fields"
  },
  {
    "line": 71,
    "text": "        Parameters",
    "annotation": "\ud83e\udde0 ML Signal: Use of method to parse fields info",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 142,
    "end_token": 150,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2446,
      284,
      21136,
      7032,
      7508
    ],
    "label": "ml_signal",
    "reason": "Use of method to parse fields info"
  },
  {
    "line": 71,
    "text": "        Parameters",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on the contents of fields_info, could lead to unexpected behavior if contents are not as expected",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 150,
    "end_token": 158,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      262,
      10154,
      286,
      7032,
      62,
      10951,
      11,
      714,
      1085,
      284,
      10059,
      4069,
      611,
      10154,
      389,
      407,
      355,
      2938
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on the contents of fields_info, could lead to unexpected behavior if contents are not as expected"
  },
  {
    "line": 76,
    "text": "            .. code-block::",
    "annotation": "\u2705 Best Practice: Check the type of the first element to determine the structure of fields_info",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11485,
      2438,
      12,
      9967,
      3712
    ],
    "start_token": 158,
    "end_token": 174,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      262,
      2099,
      286,
      262,
      717,
      5002,
      284,
      5004,
      262,
      4645,
      286,
      7032,
      62,
      10951
    ],
    "label": "best_practice",
    "reason": "Check the type of the first element to determine the structure of fields_info"
  },
  {
    "line": 92,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 174,
    "end_token": 183,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 108,
    "text": "        return exprs, names",
    "annotation": "\u2705 Best Practice: Check if the object is a group to decide the loading strategy",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1033,
      3808,
      11,
      3891
    ],
    "start_token": 183,
    "end_token": 195,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      2134,
      318,
      257,
      1448,
      284,
      5409,
      262,
      11046,
      4811
    ],
    "label": "best_practice",
    "reason": "Check if the object is a group to decide the loading strategy"
  },
  {
    "line": 109,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of pd.concat for combining dataframes is efficient",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 195,
    "end_token": 195,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      1366,
      37805,
      318,
      6942
    ],
    "label": "best_practice",
    "reason": "Use of pd.concat for combining dataframes is efficient"
  },
  {
    "line": 109,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dictionary items to process data",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 195,
    "end_token": 195,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      22155,
      3709,
      284,
      1429,
      1366
    ],
    "label": "ml_signal",
    "reason": "Iterating over dictionary items to process data"
  },
  {
    "line": 120,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Unpacking tuple for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 195,
    "end_token": 203,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      791,
      41291,
      46545,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Unpacking tuple for clarity"
  },
  {
    "line": 122,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method call with multiple parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 203,
    "end_token": 203,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      351,
      3294,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method call with multiple parameters"
  },
  {
    "line": 122,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning a DataFrame for consistency",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 203,
    "end_token": 203,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      19778,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Returning a DataFrame for consistency"
  },
  {
    "line": 121,
    "text": "        load the dataframe for specific group",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the purpose and usage of the class",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3440,
      262,
      1366,
      14535,
      329,
      2176,
      1448
    ],
    "start_token": 203,
    "end_token": 217,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      8748,
      286,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the purpose and usage of the class"
  },
  {
    "line": 130,
    "text": "            the name of the data.",
    "annotation": "\u2705 Best Practice: Docstring provides detailed parameter descriptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      1438,
      286,
      262,
      1366,
      13
    ],
    "start_token": 217,
    "end_token": 234,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      6496,
      11507,
      16969
    ],
    "label": "best_practice",
    "reason": "Docstring provides detailed parameter descriptions"
  },
  {
    "line": 147,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of default mutable arguments (filter_pipe)",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 234,
    "end_token": 243,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4277,
      4517,
      540,
      7159,
      357,
      24455,
      62,
      34360,
      8
    ],
    "label": "ml_signal",
    "reason": "Usage of default mutable arguments (filter_pipe)"
  },
  {
    "line": 150,
    "text": "        return df",
    "annotation": "\u2705 Best Practice: Use of conditional expression for default value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764
    ],
    "start_token": 243,
    "end_token": 252,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      26340,
      5408,
      329,
      4277,
      1988
    ],
    "label": "best_practice",
    "reason": "Use of conditional expression for default value"
  },
  {
    "line": 153,
    "text": "class QlibDataLoader(DLWParser):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime type checking",
    "confidence": 0.5,
    "tokens": [
      4871,
      1195,
      8019,
      6601,
      17401,
      7,
      19260,
      25527,
      28198,
      2599
    ],
    "start_token": 252,
    "end_token": 262,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      2099,
      10627
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime type checking"
  },
  {
    "line": 157,
    "text": "        self,",
    "annotation": "\u2705 Best Practice: Calling superclass constructor",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      11
    ],
    "start_token": 262,
    "end_token": 271,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      2208,
      4871,
      23772
    ],
    "label": "best_practice",
    "reason": "Calling superclass constructor"
  },
  {
    "line": 162,
    "text": "        inst_processors: Union[dict, list] = None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if _gp not in freq",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      916,
      62,
      14681,
      669,
      25,
      4479,
      58,
      11600,
      11,
      1351,
      60,
      796,
      6045,
      11
    ],
    "start_token": 271,
    "end_token": 292,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      4808,
      31197,
      407,
      287,
      2030,
      80
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if _gp not in freq"
  },
  {
    "line": 162,
    "text": "        inst_processors: Union[dict, list] = None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime condition checking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      916,
      62,
      14681,
      669,
      25,
      4479,
      58,
      11600,
      11,
      1351,
      60,
      796,
      6045,
      11
    ],
    "start_token": 292,
    "end_token": 313,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      4006,
      10627
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime condition checking"
  },
  {
    "line": 171,
    "text": "        swap_level :",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if `instruments` is None and not handled properly later in the code.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16075,
      62,
      5715,
      1058
    ],
    "start_token": 313,
    "end_token": 324,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      4600,
      259,
      2536,
      2886,
      63,
      318,
      6045,
      290,
      407,
      12118,
      6105,
      1568,
      287,
      262,
      2438,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if `instruments` is None and not handled properly later in the code."
  },
  {
    "line": 173,
    "text": "        freq:  dict or str",
    "annotation": "\u2705 Best Practice: Informing the user about default behavior when `instruments` is not set.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2030,
      80,
      25,
      220,
      8633,
      393,
      965
    ],
    "start_token": 324,
    "end_token": 338,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      554,
      15464,
      262,
      2836,
      546,
      4277,
      4069,
      618,
      4600,
      259,
      2536,
      2886,
      63,
      318,
      407,
      900,
      13
    ],
    "label": "best_practice",
    "reason": "Informing the user about default behavior when `instruments` is not set."
  },
  {
    "line": 176,
    "text": "        inst_processors: dict | list",
    "annotation": "\u2705 Best Practice: Checking type of `instruments` to handle different input scenarios.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      916,
      62,
      14681,
      669,
      25,
      8633,
      930,
      1351
    ],
    "start_token": 338,
    "end_token": 353,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      2099,
      286,
      4600,
      259,
      2536,
      2886,
      63,
      284,
      5412,
      1180,
      5128,
      13858,
      13
    ],
    "label": "best_practice",
    "reason": "Checking type of `instruments` to handle different input scenarios."
  },
  {
    "line": 178,
    "text": "            If inst_processors is a list, then it will be applied to all groups.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external function `D.instruments` with specific parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1002,
      916,
      62,
      14681,
      669,
      318,
      257,
      1351,
      11,
      788,
      340,
      481,
      307,
      5625,
      284,
      477,
      2628,
      13
    ],
    "start_token": 353,
    "end_token": 382,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      2163,
      4600,
      35,
      13,
      259,
      2536,
      2886,
      63,
      351,
      2176,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of external function `D.instruments` with specific parameters."
  },
  {
    "line": 182,
    "text": "        self.freq = freq",
    "annotation": "\u2705 Best Practice: Warning user about unused parameter to avoid confusion.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      19503,
      80,
      796,
      2030,
      80
    ],
    "start_token": 382,
    "end_token": 396,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15932,
      2836,
      546,
      21958,
      11507,
      284,
      3368,
      10802,
      13
    ],
    "label": "best_practice",
    "reason": "Warning user about unused parameter to avoid confusion."
  },
  {
    "line": 183,
    "text": "",
    "annotation": "\u2705 Best Practice: Using dictionary to handle different frequencies based on `gp_name`.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 396,
    "end_token": 396,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      22155,
      284,
      5412,
      1180,
      19998,
      1912,
      319,
      4600,
      31197,
      62,
      3672,
      44646
    ],
    "label": "best_practice",
    "reason": "Using dictionary to handle different frequencies based on `gp_name`."
  },
  {
    "line": 185,
    "text": "        self.inst_processors = inst_processors if inst_processors is not None else {}",
    "annotation": "\u2705 Best Practice: Handling different types of `inst_processors` to ensure correct processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      8625,
      62,
      14681,
      669,
      796,
      916,
      62,
      14681,
      669,
      611,
      916,
      62,
      14681,
      669,
      318,
      407,
      6045,
      2073,
      23884
    ],
    "start_token": 396,
    "end_token": 424,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      49500,
      1180,
      3858,
      286,
      4600,
      8625,
      62,
      14681,
      669,
      63,
      284,
      4155,
      3376,
      7587,
      13
    ],
    "label": "best_practice",
    "reason": "Handling different types of `inst_processors` to ensure correct processing."
  },
  {
    "line": 188,
    "text": "        ), f\"inst_processors(={self.inst_processors}) must be dict or list\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external function `D.features` with multiple parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10612,
      277,
      1,
      8625,
      62,
      14681,
      669,
      7,
      34758,
      944,
      13,
      8625,
      62,
      14681,
      669,
      30072,
      1276,
      307,
      8633,
      393,
      1351,
      1
    ],
    "start_token": 424,
    "end_token": 453,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      2163,
      4600,
      35,
      13,
      40890,
      63,
      351,
      3294,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of external function `D.features` with multiple parameters."
  },
  {
    "line": 191,
    "text": "",
    "annotation": "\u2705 Best Practice: Explicitly setting DataFrame column names for clarity.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 453,
    "end_token": 453,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      6060,
      19778,
      5721,
      3891,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly setting DataFrame column names for clarity."
  },
  {
    "line": 193,
    "text": "            # check sample config",
    "annotation": "\u2705 Best Practice: Conditional logic to modify DataFrame index for specific use cases.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      2198,
      6291,
      4566
    ],
    "start_token": 453,
    "end_token": 468,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9724,
      1859,
      9156,
      284,
      13096,
      6060,
      19778,
      6376,
      329,
      2176,
      779,
      2663,
      13
    ],
    "label": "best_practice",
    "reason": "Conditional logic to modify DataFrame index for specific use cases."
  },
  {
    "line": 191,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of class-level attribute for shared configuration",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 468,
    "end_token": 468,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      11688,
      329,
      4888,
      8398
    ],
    "label": "best_practice",
    "reason": "Use of class-level attribute for shared configuration"
  },
  {
    "line": 192,
    "text": "        if self.is_group:",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      271,
      62,
      8094,
      25
    ],
    "start_token": 468,
    "end_token": 482,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability"
  },
  {
    "line": 202,
    "text": "    def load_group_df(",
    "annotation": "\ud83e\udde0 ML Signal: Storing configuration in an instance variable, indicating a pattern of configuration-driven behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3440,
      62,
      8094,
      62,
      7568,
      7
    ],
    "start_token": 482,
    "end_token": 492,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      8398,
      287,
      281,
      4554,
      7885,
      11,
      12739,
      257,
      3912,
      286,
      8398,
      12,
      15808,
      4069
    ],
    "label": "ml_signal",
    "reason": "Storing configuration in an instance variable, indicating a pattern of configuration-driven behavior"
  },
  {
    "line": 204,
    "text": "        instruments,",
    "annotation": "\ud83e\udde0 ML Signal: Storing join type in an instance variable, indicating a pattern of behavior for data alignment",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12834,
      11
    ],
    "start_token": 492,
    "end_token": 501,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      4654,
      2099,
      287,
      281,
      4554,
      7885,
      11,
      12739,
      257,
      3912,
      286,
      4069,
      329,
      1366,
      19114
    ],
    "label": "ml_signal",
    "reason": "Storing join type in an instance variable, indicating a pattern of behavior for data alignment"
  },
  {
    "line": 206,
    "text": "        names: list,",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of a data-related attribute, indicating a pattern of data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      25,
      1351,
      11
    ],
    "start_token": 501,
    "end_token": 512,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      257,
      1366,
      12,
      5363,
      11688,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Initialization of a data-related attribute, indicating a pattern of data handling"
  },
  {
    "line": 204,
    "text": "        instruments,",
    "annotation": "\u2705 Best Practice: Using a dictionary comprehension for concise and readable code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12834,
      11
    ],
    "start_token": 512,
    "end_token": 521,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      22155,
      35915,
      329,
      35327,
      290,
      31744,
      2438
    ],
    "label": "best_practice",
    "reason": "Using a dictionary comprehension for concise and readable code"
  },
  {
    "line": 205,
    "text": "        exprs: list,",
    "annotation": "\ud83e\udde0 ML Signal: Custom serialization logic for object state management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1033,
      3808,
      25,
      1351,
      11
    ],
    "start_token": 521,
    "end_token": 533,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      11389,
      1634,
      9156,
      329,
      2134,
      1181,
      4542
    ],
    "label": "ml_signal",
    "reason": "Custom serialization logic for object state management"
  },
  {
    "line": 207,
    "text": "        start_time: Union[str, pd.Timestamp] = None,",
    "annotation": "\u2705 Best Practice: Filtering out private attributes from serialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      25,
      4479,
      58,
      2536,
      11,
      279,
      67,
      13,
      14967,
      27823,
      60,
      796,
      6045,
      11
    ],
    "start_token": 533,
    "end_token": 557,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7066,
      20212,
      503,
      2839,
      12608,
      422,
      11389,
      1634
    ],
    "label": "best_practice",
    "reason": "Filtering out private attributes from serialization"
  },
  {
    "line": 207,
    "text": "        start_time: Union[str, pd.Timestamp] = None,",
    "annotation": "\u2705 Best Practice: Ensure raw data is loaded before processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      25,
      4479,
      58,
      2536,
      11,
      279,
      67,
      13,
      14967,
      27823,
      60,
      796,
      6045,
      11
    ],
    "start_token": 557,
    "end_token": 581,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      8246,
      1366,
      318,
      9639,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Ensure raw data is loaded before processing"
  },
  {
    "line": 212,
    "text": "            warnings.warn(\"`instruments` is not set, will load all stocks\")",
    "annotation": "\u2705 Best Practice: Use of .loc for selecting data by label",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14601,
      13,
      40539,
      7203,
      63,
      259,
      2536,
      2886,
      63,
      318,
      407,
      900,
      11,
      481,
      3440,
      477,
      14420,
      4943
    ],
    "start_token": 581,
    "end_token": 610,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      764,
      17946,
      329,
      17246,
      1366,
      416,
      6167
    ],
    "label": "best_practice",
    "reason": "Use of .loc for selecting data by label"
  },
  {
    "line": 216,
    "text": "        elif self.filter_pipe is not None:",
    "annotation": "\u2705 Best Practice: Convert time inputs to a standard format",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      2116,
      13,
      24455,
      62,
      34360,
      318,
      407,
      6045,
      25
    ],
    "start_token": 610,
    "end_token": 628,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      640,
      17311,
      284,
      257,
      3210,
      5794
    ],
    "label": "best_practice",
    "reason": "Convert time inputs to a standard format"
  },
  {
    "line": 218,
    "text": "",
    "annotation": "\u2705 Best Practice: Convert time inputs to a standard format",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 628,
    "end_token": 628,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      640,
      17311,
      284,
      257,
      3210,
      5794
    ],
    "label": "best_practice",
    "reason": "Convert time inputs to a standard format"
  },
  {
    "line": 220,
    "text": "        inst_processors = (",
    "annotation": "\u2705 Best Practice: Use of .loc for slicing data by index",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      916,
      62,
      14681,
      669,
      796,
      357
    ],
    "start_token": 628,
    "end_token": 641,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      764,
      17946,
      329,
      49289,
      1366,
      416,
      6376
    ],
    "label": "best_practice",
    "reason": "Use of .loc for slicing data by index"
  },
  {
    "line": 221,
    "text": "            self.inst_processors if isinstance(self.inst_processors, list) else self.inst_processors.get(gp_name, [])",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pd.concat to combine datasets",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      8625,
      62,
      14681,
      669,
      611,
      318,
      39098,
      7,
      944,
      13,
      8625,
      62,
      14681,
      669,
      11,
      1351,
      8,
      2073,
      2116,
      13,
      8625,
      62,
      14681,
      669,
      13,
      1136,
      7,
      31197,
      62,
      3672,
      11,
      685,
      12962
    ],
    "start_token": 641,
    "end_token": 687,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      279,
      67,
      13,
      1102,
      9246,
      284,
      12082,
      40522
    ],
    "label": "ml_signal",
    "reason": "Usage of pd.concat to combine datasets"
  },
  {
    "line": 221,
    "text": "            self.inst_processors if isinstance(self.inst_processors, list) else self.inst_processors.get(gp_name, [])",
    "annotation": "\ud83e\udde0 ML Signal: Dictionary comprehension to load datasets",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      8625,
      62,
      14681,
      669,
      611,
      318,
      39098,
      7,
      944,
      13,
      8625,
      62,
      14681,
      669,
      11,
      1351,
      8,
      2073,
      2116,
      13,
      8625,
      62,
      14681,
      669,
      13,
      1136,
      7,
      31197,
      62,
      3672,
      11,
      685,
      12962
    ],
    "start_token": 687,
    "end_token": 733,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28261,
      35915,
      284,
      3440,
      40522
    ],
    "label": "ml_signal",
    "reason": "Dictionary comprehension to load datasets"
  },
  {
    "line": 228,
    "text": "",
    "annotation": "\u2705 Best Practice: Sorting index for consistent data ordering",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 733,
    "end_token": 733,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      6376,
      329,
      6414,
      1366,
      16216
    ],
    "label": "best_practice",
    "reason": "Sorting index for consistent data ordering"
  },
  {
    "line": 231,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): File extension check for security",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 733,
    "end_token": 737,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      9220,
      7552,
      2198,
      329,
      2324
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "File extension check for security"
  },
  {
    "line": 233,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Reading parquet files with pandas",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 737,
    "end_token": 741,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11725,
      1582,
      21108,
      3696,
      351,
      19798,
      292
    ],
    "label": "ml_signal",
    "reason": "Reading parquet files with pandas"
  },
  {
    "line": 236,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Potentially unsafe deserialization with pickle",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 741,
    "end_token": 741,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      6902,
      3746,
      21596,
      748,
      48499,
      1634,
      351,
      2298,
      293
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Potentially unsafe deserialization with pickle"
  },
  {
    "line": 240,
    "text": "        ----------",
    "annotation": "\ud83e\udde0 ML Signal: Direct assignment from DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 741,
    "end_token": 750,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4128,
      16237,
      422,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Direct assignment from DataFrame"
  },
  {
    "line": 235,
    "text": "    include_attr = [\"_config\"]",
    "annotation": "\u2705 Best Practice: Class docstring provides a clear description of the class purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2291,
      62,
      35226,
      796,
      14631,
      62,
      11250,
      8973
    ],
    "start_token": 750,
    "end_token": 761,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      1398,
      4007
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a clear description of the class purpose"
  },
  {
    "line": 240,
    "text": "        ----------",
    "annotation": "\u2705 Best Practice: Docstring provides clear parameter descriptions and usage example",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 761,
    "end_token": 770,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      11507,
      16969,
      290,
      8748,
      1672
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear parameter descriptions and usage example"
  },
  {
    "line": 264,
    "text": "        if start_time is None and end_time is None:",
    "annotation": "\u2705 Best Practice: Calls the superclass's __init__ method to ensure proper initialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      923,
      62,
      2435,
      318,
      6045,
      290,
      886,
      62,
      2435,
      318,
      6045,
      25
    ],
    "start_token": 770,
    "end_token": 790,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27592,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      284,
      4155,
      1774,
      37588
    ],
    "label": "best_practice",
    "reason": "Calls the superclass's __init__ method to ensure proper initialization"
  },
  {
    "line": 267,
    "text": "        start_time = time_to_slc_point(start_time)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of isinstance to check type, common pattern in dynamic typing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      796,
      640,
      62,
      1462,
      62,
      6649,
      66,
      62,
      4122,
      7,
      9688,
      62,
      2435,
      8
    ],
    "start_token": 790,
    "end_token": 814,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      318,
      39098,
      284,
      2198,
      2099,
      11,
      2219,
      3912,
      287,
      8925,
      19720
    ],
    "label": "ml_signal",
    "reason": "Usage of isinstance to check type, common pattern in dynamic typing"
  },
  {
    "line": 267,
    "text": "        start_time = time_to_slc_point(start_time)",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension for initializing class attributes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      2435,
      796,
      640,
      62,
      1462,
      62,
      6649,
      66,
      62,
      4122,
      7,
      9688,
      62,
      2435,
      8
    ],
    "start_token": 814,
    "end_token": 838,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      329,
      4238,
      2890,
      1398,
      12608
    ],
    "label": "ml_signal",
    "reason": "List comprehension for initializing class attributes"
  },
  {
    "line": 268,
    "text": "        end_time = time_to_slc_point(end_time)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if init_instance_by_config is not properly validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      796,
      640,
      62,
      1462,
      62,
      6649,
      66,
      62,
      4122,
      7,
      437,
      62,
      2435,
      8
    ],
    "start_token": 838,
    "end_token": 862,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      2315,
      62,
      39098,
      62,
      1525,
      62,
      11250,
      318,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if init_instance_by_config is not properly validated"
  },
  {
    "line": 272,
    "text": "        if self._data is not None:",
    "annotation": "\ud83e\udde0 ML Signal: Storing method parameters as instance attributes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13557,
      7890,
      318,
      407,
      6045,
      25
    ],
    "start_token": 862,
    "end_token": 877,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      2446,
      10007,
      355,
      4554,
      12608
    ],
    "label": "ml_signal",
    "reason": "Storing method parameters as instance attributes"
  },
  {
    "line": 274,
    "text": "        if isinstance(self._config, dict):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions like KeyError without specific handling can hide bugs.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      944,
      13557,
      11250,
      11,
      8633,
      2599
    ],
    "start_token": 877,
    "end_token": 894,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      588,
      7383,
      12331,
      1231,
      2176,
      9041,
      460,
      7808,
      11316,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions like KeyError without specific handling can hide bugs."
  },
  {
    "line": 278,
    "text": "                join=self.join,",
    "annotation": "\u2705 Best Practice: Provide a fallback mechanism when an exception occurs.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4654,
      28,
      944,
      13,
      22179,
      11
    ],
    "start_token": 894,
    "end_token": 915,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44290,
      257,
      2121,
      1891,
      9030,
      618,
      281,
      6631,
      8833,
      13
    ],
    "label": "best_practice",
    "reason": "Provide a fallback mechanism when an exception occurs."
  },
  {
    "line": 285,
    "text": "                with Path(self._config).open(\"rb\") as f:",
    "annotation": "\u2705 Best Practice: Use list comprehensions for concise and readable code.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      351,
      10644,
      7,
      944,
      13557,
      11250,
      737,
      9654,
      7203,
      26145,
      4943,
      355,
      277,
      25
    ],
    "start_token": 915,
    "end_token": 944,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1351,
      8569,
      507,
      329,
      35327,
      290,
      31744,
      2438,
      13
    ],
    "label": "best_practice",
    "reason": "Use list comprehensions for concise and readable code."
  },
  {
    "line": 288,
    "text": "            self._data = self._config",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pd.merge indicates data integration patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      7890,
      796,
      2116,
      13557,
      11250
    ],
    "start_token": 944,
    "end_token": 962,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      279,
      67,
      13,
      647,
      469,
      9217,
      1366,
      11812,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pd.merge indicates data integration patterns."
  },
  {
    "line": 288,
    "text": "            self._data = self._config",
    "annotation": "\ud83e\udde0 ML Signal: Sorting dataframes is a common preprocessing step in data analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      7890,
      796,
      2116,
      13557,
      11250
    ],
    "start_token": 962,
    "end_token": 980,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      1366,
      37805,
      318,
      257,
      2219,
      662,
      36948,
      2239,
      287,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Sorting dataframes is a common preprocessing step in data analysis."
  },
  {
    "line": 296,
    "text": "    def __init__(self, dataloader_l: List[Dict], join=\"left\") -> None:",
    "annotation": "\u2705 Best Practice: Class docstring provides a clear description of the class and its intended use.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      11,
      4818,
      282,
      1170,
      263,
      62,
      75,
      25,
      7343,
      58,
      35,
      713,
      4357,
      4654,
      2625,
      9464,
      4943,
      4613,
      6045,
      25
    ],
    "start_token": 980,
    "end_token": 1009,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      1398,
      290,
      663,
      5292,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a clear description of the class and its intended use."
  },
  {
    "line": 297,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: TODO comments indicate areas for future improvement or refactoring.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1009,
    "end_token": 1017,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      16926,
      46,
      3651,
      7603,
      3006,
      329,
      2003,
      9025,
      393,
      1006,
      529,
      3255,
      13
    ],
    "label": "best_practice",
    "reason": "TODO comments indicate areas for future improvement or refactoring."
  },
  {
    "line": 297,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1017,
    "end_token": 1025,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability."
  },
  {
    "line": 297,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Mutable default argument for fetch_kwargs can lead to unexpected behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1025,
    "end_token": 1033,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      13859,
      540,
      4277,
      4578,
      329,
      21207,
      62,
      46265,
      22046,
      460,
      1085,
      284,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Mutable default argument for fetch_kwargs can lead to unexpected behavior."
  },
  {
    "line": 317,
    "text": "                        }",
    "annotation": "\u2705 Best Practice: Importing within a function can reduce memory usage and improve startup time.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 1033,
    "end_token": 1057,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      1626,
      257,
      2163,
      460,
      4646,
      4088,
      8748,
      290,
      2987,
      13693,
      640,
      13
    ],
    "label": "best_practice",
    "reason": "Importing within a function can reduce memory usage and improve startup time."
  },
  {
    "line": 323,
    "text": "        super().__init__()",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary comprehension to initialize handlers based on configuration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      22446,
      834,
      15003,
      834,
      3419
    ],
    "start_token": 1057,
    "end_token": 1070,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      35915,
      284,
      41216,
      32847,
      1912,
      319,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary comprehension to initialize handlers based on configuration."
  },
  {
    "line": 326,
    "text": "        ]",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to handle different initialization paths for handlers.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 1070,
    "end_token": 1078,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      5412,
      1180,
      37588,
      13532,
      329,
      32847,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to handle different initialization paths for handlers."
  },
  {
    "line": 328,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing configuration state in instance variables for later use.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1078,
    "end_token": 1078,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      8398,
      1181,
      287,
      4554,
      9633,
      329,
      1568,
      779,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing configuration state in instance variables for later use."
  },
  {
    "line": 329,
    "text": "    def load(self, instruments=None, start_time=None, end_time=None) -> pd.DataFrame:",
    "annotation": "\u2705 Best Practice: Initializing fetch_kwargs with a default value before updating.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3440,
      7,
      944,
      11,
      12834,
      28,
      14202,
      11,
      923,
      62,
      2435,
      28,
      14202,
      11,
      886,
      62,
      2435,
      28,
      14202,
      8,
      4613,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 1078,
    "end_token": 1109,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      2890,
      21207,
      62,
      46265,
      22046,
      351,
      257,
      4277,
      1988,
      878,
      19698,
      13
    ],
    "label": "best_practice",
    "reason": "Initializing fetch_kwargs with a default value before updating."
  },
  {
    "line": 329,
    "text": "    def load(self, instruments=None, start_time=None, end_time=None) -> pd.DataFrame:",
    "annotation": "\ud83e\udde0 ML Signal: Use of update method to merge dictionaries, indicating dynamic configuration handling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3440,
      7,
      944,
      11,
      12834,
      28,
      14202,
      11,
      923,
      62,
      2435,
      28,
      14202,
      11,
      886,
      62,
      2435,
      28,
      14202,
      8,
      4613,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 1109,
    "end_token": 1140,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4296,
      2446,
      284,
      20121,
      48589,
      3166,
      11,
      12739,
      8925,
      8398,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of update method to merge dictionaries, indicating dynamic configuration handling."
  },
  {
    "line": 326,
    "text": "        ]",
    "annotation": "\u2705 Best Practice: Log a warning when a parameter is ignored to inform the user.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2361
    ],
    "start_token": 1140,
    "end_token": 1148,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      257,
      6509,
      618,
      257,
      11507,
      318,
      9514,
      284,
      4175,
      262,
      2836,
      13
    ],
    "label": "best_practice",
    "reason": "Log a warning when a parameter is ignored to inform the user."
  },
  {
    "line": 329,
    "text": "    def load(self, instruments=None, start_time=None, end_time=None) -> pd.DataFrame:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pd.concat indicates data aggregation from multiple sources.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      3440,
      7,
      944,
      11,
      12834,
      28,
      14202,
      11,
      923,
      62,
      2435,
      28,
      14202,
      11,
      886,
      62,
      2435,
      28,
      14202,
      8,
      4613,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 1148,
    "end_token": 1179,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      279,
      67,
      13,
      1102,
      9246,
      9217,
      1366,
      46500,
      422,
      3294,
      4237,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pd.concat indicates data aggregation from multiple sources."
  },
  {
    "line": 329,
    "text": "    def load(self, instruments=None, start_time=None, end_time=None) -> pd.DataFrame:",
    "annotation": "\ud83e\udde0 ML Signal: Dictionary comprehension used for dynamic data fetching.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3440,
      7,
      944,
      11,
      12834,
      28,
      14202,
      11,
      923,
      62,
      2435,
      28,
      14202,
      11,
      886,
      62,
      2435,
      28,
      14202,
      8,
      4613,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 1179,
    "end_token": 1210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28261,
      35915,
      973,
      329,
      8925,
      1366,
      21207,
      278,
      13
    ],
    "label": "ml_signal",
    "reason": "Dictionary comprehension used for dynamic data fetching."
  },
  {
    "line": 338,
    "text": "                df_current = dl.load(instruments=None, start_time=start_time, end_time=end_time)",
    "annotation": "\ud83e\udde0 ML Signal: Direct fetch method call on a handler object.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      14421,
      796,
      288,
      75,
      13,
      2220,
      7,
      259,
      2536,
      2886,
      28,
      14202,
      11,
      923,
      62,
      2435,
      28,
      9688,
      62,
      2435,
      11,
      886,
      62,
      2435,
      28,
      437,
      62,
      2435,
      8
    ],
    "start_token": 1210,
    "end_token": 1256,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4128,
      21207,
      2446,
      869,
      319,
      257,
      21360,
      2134,
      13
    ],
    "label": "ml_signal",
    "reason": "Direct fetch method call on a handler object."
  },
  {
    "line": 338,
    "text": "                df_current = dl.load(instruments=None, start_time=start_time, end_time=end_time)",
    "annotation": "\u2705 Best Practice: Explicitly returning a DataFrame for clarity and type consistency.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      62,
      14421,
      796,
      288,
      75,
      13,
      2220,
      7,
      259,
      2536,
      2886,
      28,
      14202,
      11,
      923,
      62,
      2435,
      28,
      9688,
      62,
      2435,
      11,
      886,
      62,
      2435,
      28,
      437,
      62,
      2435,
      8
    ],
    "start_token": 1256,
    "end_token": 1302,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      257,
      6060,
      19778,
      329,
      16287,
      290,
      2099,
      15794,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly returning a DataFrame for clarity and type consistency."
  }
]
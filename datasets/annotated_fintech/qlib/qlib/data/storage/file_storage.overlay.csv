annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Logging usage pattern can be used to train models to identify logging practices,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 460, 307, 973, 284, 4512, 4981, 284, 5911, 18931, 6593]",1.0,10,ml_signal,11,Logging usage pattern can be used to train models to identify logging practices,,0,from qlib.utils.time import Freq,"[6738, 10662, 8019, 13, 26791, 13, 2435, 1330, 4848, 80]"
‚úÖ Best Practice: Using a logger instead of print statements for logging is a best practice,"[26486, 227, 6705, 19939, 25, 8554, 257, 49706, 2427, 286, 3601, 6299, 329, 18931, 318, 257, 1266, 3357]",0.5,24,best_practice,12,Using a logger instead of print statements for logging is a best practice,,10,from qlib.utils.resam import resam_calendar,"[6738, 10662, 8019, 13, 26791, 13, 411, 321, 1330, 581, 321, 62, 9948, 9239]"
üß† ML Signal: Importing specific classes and functions can indicate usage patterns for ML models,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 290, 5499, 460, 7603, 8748, 7572, 329, 10373, 4981]",0.5,33,ml_signal,14,Importing specific classes and functions can indicate usage patterns for ML models,,24,from qlib.data.cache import H,"[6738, 10662, 8019, 13, 7890, 13, 23870, 1330, 367]"
‚úÖ Best Practice: Use of @property decorator for getter method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446]",0.5,42,best_practice,14,Use of @property decorator for getter method,,33,from qlib.data.cache import H,"[6738, 10662, 8019, 13, 7890, 13, 23870, 1330, 367]"
‚úÖ Best Practice: Use of f-string for string formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 4731, 33313]",0.5,51,best_practice,14,Use of f-string for string formatting,,42,from qlib.data.cache import H,"[6738, 10662, 8019, 13, 7890, 13, 23870, 1330, 367]"
‚ö†Ô∏è SAST Risk (Medium): Potential file path manipulation vulnerability,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2393, 3108, 17512, 15131]",0.5,51,sast_risk,19,Potential file path manipulation vulnerability,Medium,51,,[]
‚úÖ Best Practice: Use of 'with' statement for file operations,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 4480, 6, 2643, 329, 2393, 4560]",0.5,65,best_practice,22,Use of 'with' statement for file operations,,51,"    """"""FileStorageMixin, applicable to FileXXXStorage","[220, 220, 220, 37227, 8979, 31425, 35608, 259, 11, 9723, 284, 9220, 43145, 31425]"
‚ö†Ô∏è SAST Risk (Medium): Potential file path manipulation vulnerability,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2393, 3108, 17512, 15131]",0.5,65,sast_risk,26,Potential file path manipulation vulnerability,Medium,65,,[]
‚úÖ Best Practice: Use of 'with' statement for file operations,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 4480, 6, 2643, 329, 2393, 4560]",0.5,87,best_practice,28,Use of 'with' statement for file operations,,65,    #   1. self._provider_uri : if provider_uri is provided.,"[220, 220, 220, 1303, 220, 220, 352, 13, 2116, 13557, 15234, 1304, 62, 9900, 1058, 611, 10131, 62, 9900, 318, 2810, 13]"
‚ö†Ô∏è SAST Risk (Medium): Potential file path manipulation vulnerability,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2393, 3108, 17512, 15131]",0.5,125,sast_risk,33,Potential file path manipulation vulnerability,Medium,87,"        return C[""provider_uri""] if getattr(self, ""_provider_uri"", None) is None else self._provider_uri","[220, 220, 220, 220, 220, 220, 220, 1441, 327, 14692, 15234, 1304, 62, 9900, 8973, 611, 651, 35226, 7, 944, 11, 45434, 15234, 1304, 62, 9900, 1600, 6045, 8, 318, 6045, 2073, 2116, 13557, 15234, 1304, 62, 9900]"
‚úÖ Best Practice: Informative logging for non-existent file,"[26486, 227, 6705, 19939, 25, 45255, 876, 18931, 329, 1729, 12, 32786, 2393]",0.5,140,best_practice,38,Informative logging for non-existent file,,125,            C.dpm,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 327, 13, 67, 4426]"
‚úÖ Best Practice: Use of a property method to encapsulate access to the provider_uri attribute,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 3119, 2446, 284, 32652, 5039, 1895, 284, 262, 10131, 62, 9900, 11688]",0.5,154,best_practice,18,Use of a property method to encapsulate access to the provider_uri attribute,,140,"logger = get_module_logger(""file_storage"")","[6404, 1362, 796, 651, 62, 21412, 62, 6404, 1362, 7203, 7753, 62, 35350, 4943]"
‚úÖ Best Practice: Use of a conditional expression for concise logic,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 26340, 5408, 329, 35327, 9156]",0.5,154,best_practice,19,Use of a conditional expression for concise logic,,154,,[]
‚úÖ Best Practice: Use of getattr with a default value to avoid AttributeError,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 35226, 351, 257, 4277, 1988, 284, 3368, 3460, 4163, 12331]",1.0,168,best_practice,22,Use of getattr with a default value to avoid AttributeError,,154,"    """"""FileStorageMixin, applicable to FileXXXStorage","[220, 220, 220, 37227, 8979, 31425, 35608, 259, 11, 9723, 284, 9220, 43145, 31425]"
‚úÖ Best Practice: Use of a descriptive variable name for caching attribute,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 35644, 7885, 1438, 329, 40918, 11688]",0.5,186,best_practice,29,Use of a descriptive variable name for caching attribute,,168,    #   2. provider_uri in qlib.config.C,"[220, 220, 220, 1303, 220, 220, 362, 13, 10131, 62, 9900, 287, 10662, 8019, 13, 11250, 13, 34]"
‚úÖ Best Practice: Check if an attribute exists before accessing it,"[26486, 227, 6705, 19939, 25, 6822, 611, 281, 11688, 7160, 878, 22534, 340]",1.0,191,best_practice,31,Check if an attribute exists before accessing it,,186,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Use of getattr to access an attribute dynamically,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 35226, 284, 1895, 281, 11688, 32366]",1.0,229,best_practice,33,Use of getattr to access an attribute dynamically,,191,"        return C[""provider_uri""] if getattr(self, ""_provider_uri"", None) is None else self._provider_uri","[220, 220, 220, 220, 220, 220, 220, 1441, 327, 14692, 15234, 1304, 62, 9900, 8973, 611, 651, 35226, 7, 944, 11, 45434, 15234, 1304, 62, 9900, 1600, 6045, 8, 318, 6045, 2073, 2116, 13557, 15234, 1304, 62, 9900]"
‚úÖ Best Practice: Use of constants for configuration values,"[26486, 227, 6705, 19939, 25, 5765, 286, 38491, 329, 8398, 3815]",0.5,267,best_practice,33,Use of constants for configuration values,,229,"        return C[""provider_uri""] if getattr(self, ""_provider_uri"", None) is None else self._provider_uri","[220, 220, 220, 220, 220, 220, 220, 1441, 327, 14692, 15234, 1304, 62, 9900, 8973, 611, 651, 35226, 7, 944, 11, 45434, 15234, 1304, 62, 9900, 1600, 6045, 8, 318, 6045, 2073, 2116, 13557, 15234, 1304, 62, 9900]"
‚úÖ Best Practice: Use of filter and map for functional programming,"[26486, 227, 6705, 19939, 25, 5765, 286, 8106, 290, 3975, 329, 10345, 8300]",1.0,282,best_practice,38,Use of filter and map for functional programming,,267,            C.dpm,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 327, 13, 67, 4426]"
‚úÖ Best Practice: Use of lambda for inline function definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 37456, 329, 26098, 2163, 6770]",1.0,309,best_practice,39,Use of lambda for inline function definition,,282,"            if getattr(self, ""_provider_uri"", None) is None","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 651, 35226, 7, 944, 11, 45434, 15234, 1304, 62, 9900, 1600, 6045, 8, 318, 6045]"
‚úÖ Best Practice: Use of map for transforming data,"[26486, 227, 6705, 19939, 25, 5765, 286, 3975, 329, 25449, 1366]",1.0,317,best_practice,41,Use of map for transforming data,,309,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Directly using keys from a dictionary,"[26486, 227, 6705, 19939, 25, 4128, 306, 1262, 8251, 422, 257, 22155]",0.5,333,best_practice,45,Directly using keys from a dictionary,,317,"        _v = ""_support_freq""","[220, 220, 220, 220, 220, 220, 220, 4808, 85, 796, 45434, 11284, 62, 19503, 80, 1]"
üß† ML Signal: Conversion of items to a specific class (Freq) indicates a pattern of data transformation,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 3709, 284, 257, 2176, 1398, 357, 20366, 80, 8, 9217, 257, 3912, 286, 1366, 13389]",0.5,353,ml_signal,47,Conversion of items to a specific class (Freq) indicates a pattern of data transformation,,333,"            return getattr(self, _v)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 651, 35226, 7, 944, 11, 4808, 85, 8]"
‚úÖ Best Practice: Caching the result in an instance attribute,"[26486, 227, 6705, 19939, 25, 327, 8103, 262, 1255, 287, 281, 4554, 11688]",0.5,389,best_practice,48,Caching the result in an instance attribute,,353,        if len(self.provider_uri) == 1 and C.DEFAULT_FREQ in self.provider_uri:,"[220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 944, 13, 15234, 1304, 62, 9900, 8, 6624, 352, 290, 327, 13, 7206, 38865, 62, 37, 2200, 48, 287, 2116, 13, 15234, 1304, 62, 9900, 25]"
"üß† ML Signal: Method returns a Path object, indicating file or directory path handling","[8582, 100, 254, 10373, 26484, 25, 11789, 5860, 257, 10644, 2134, 11, 12739, 2393, 393, 8619, 3108, 9041]",0.5,405,ml_signal,44,"Method returns a Path object, indicating file or directory path handling",,389,    def support_freq(self) -> List[str]:,"[220, 220, 220, 825, 1104, 62, 19503, 80, 7, 944, 8, 4613, 7343, 58, 2536, 5974]"
"‚ö†Ô∏è SAST Risk (Low): Potential for ValueError to be raised, ensure proper handling where this method is called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11052, 12331, 284, 307, 4376, 11, 4155, 1774, 9041, 810, 428, 2446, 318, 1444]",0.5,421,sast_risk,46,"Potential for ValueError to be raised, ensure proper handling where this method is called",Low,405,"        if hasattr(self, _v):","[220, 220, 220, 220, 220, 220, 220, 611, 468, 35226, 7, 944, 11, 4808, 85, 2599]"
‚úÖ Best Practice: Use of joinpath for constructing file paths is preferred for readability and OS compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 4654, 6978, 329, 30580, 2393, 13532, 318, 9871, 329, 1100, 1799, 290, 7294, 17764]",0.5,457,best_practice,48,Use of joinpath for constructing file paths is preferred for readability and OS compatibility,,421,        if len(self.provider_uri) == 1 and C.DEFAULT_FREQ in self.provider_uri:,"[220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 944, 13, 15234, 1304, 62, 9900, 8, 6624, 352, 290, 327, 13, 7206, 38865, 62, 37, 2200, 48, 287, 2116, 13, 15234, 1304, 62, 9900, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure in error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 287, 4049, 3275]",0.5,466,sast_risk,53,Potential information disclosure in error message,Low,457,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure in error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 287, 4049, 3275]",0.5,494,sast_risk,55,Potential information disclosure in error message,Low,466,        freq_l = [Freq(freq) for freq in freq_l],"[220, 220, 220, 220, 220, 220, 220, 2030, 80, 62, 75, 796, 685, 20366, 80, 7, 19503, 80, 8, 329, 2030, 80, 287, 2030, 80, 62, 75, 60]"
‚úÖ Best Practice: Class definition should include a docstring to describe its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 284, 6901, 663, 4007, 290, 8748]",0.5,514,best_practice,56,Class definition should include a docstring to describe its purpose and usage,,494,"        setattr(self, _v, freq_l)","[220, 220, 220, 220, 220, 220, 220, 900, 35226, 7, 944, 11, 4808, 85, 11, 2030, 80, 62, 75, 8]"
‚úÖ Best Practice: Explicitly calling the superclass's __init__ method ensures proper initialization.,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 13]",0.5,526,best_practice,57,Explicitly calling the superclass's __init__ method ensures proper initialization.,,514,        return freq_l,"[220, 220, 220, 220, 220, 220, 220, 1441, 2030, 80, 62, 75]"
üß† ML Signal: Storing a boolean value that might affect behavior or decision-making.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 257, 25131, 1988, 326, 1244, 2689, 4069, 393, 2551, 12, 8601, 13]",0.5,531,ml_signal,59,Storing a boolean value that might affect behavior or decision-making.,,526,    @property,"[220, 220, 220, 2488, 26745]"
"üß† ML Signal: Conditional assignment based on input, indicating a potential configuration pattern.","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 16237, 1912, 319, 5128, 11, 12739, 257, 2785, 8398, 3912, 13]",0.5,552,ml_signal,61,"Conditional assignment based on input, indicating a potential configuration pattern.",,531,        if self.freq not in self.support_freq:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 19503, 80, 407, 287, 2116, 13, 11284, 62, 19503, 80, 25]"
üß† ML Signal: Boolean flag that might be used to toggle functionality.,"[8582, 100, 254, 10373, 26484, 25, 41146, 6056, 326, 1244, 307, 973, 284, 19846, 11244, 13]",0.5,596,ml_signal,63,Boolean flag that might be used to toggle functionality.,,552,"        return self.dpm.get_data_uri(self.freq).joinpath(f""{self.storage_name}s"", self.file_name)","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 67, 4426, 13, 1136, 62, 7890, 62, 9900, 7, 944, 13, 19503, 80, 737, 22179, 6978, 7, 69, 1, 90, 944, 13, 35350, 62, 3672, 92, 82, 1600, 2116, 13, 7753, 62, 3672, 8]"
"‚ö†Ô∏è SAST Risk (Low): Accessing a global configuration object, which might be modified elsewhere.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8798, 278, 257, 3298, 8398, 2134, 11, 543, 1244, 307, 9518, 8057, 13]",0.5,596,sast_risk,64,"Accessing a global configuration object, which might be modified elsewhere.",Low,596,,[]
‚úÖ Best Practice: Use of f-string for string formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 4731, 33313]",0.5,640,best_practice,63,Use of f-string for string formatting,,596,"        return self.dpm.get_data_uri(self.freq).joinpath(f""{self.storage_name}s"", self.file_name)","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 67, 4426, 13, 1136, 62, 7890, 62, 9900, 7, 944, 13, 19503, 80, 737, 22179, 6978, 7, 69, 1, 90, 944, 13, 35350, 62, 3672, 92, 82, 1600, 2116, 13, 7753, 62, 3672, 8]"
üß† ML Signal: Conditional logic in return statement,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 287, 1441, 2643]",0.5,640,ml_signal,64,Conditional logic in return statement,,640,,[]
‚úÖ Best Practice: Check for attribute existence before using it to avoid AttributeError.,"[26486, 227, 6705, 19939, 25, 6822, 329, 11688, 6224, 878, 1262, 340, 284, 3368, 3460, 4163, 12331, 13]",0.5,649,best_practice,68,Check for attribute existence before using it to avoid AttributeError.,,640,        Raises,"[220, 220, 220, 220, 220, 220, 220, 7567, 2696]"
üß† ML Signal: Usage of a custom class 'Freq' to handle frequency-related operations.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 1398, 705, 20366, 80, 6, 284, 5412, 8373, 12, 5363, 4560, 13]",0.5,658,ml_signal,70,Usage of a custom class 'Freq' to handle frequency-related operations.,,649,        ValueError,"[220, 220, 220, 220, 220, 220, 220, 11052, 12331]"
"üß† ML Signal: Checking membership in a list or set, indicating validation of input against allowed values.","[8582, 100, 254, 10373, 26484, 25, 39432, 9931, 287, 257, 1351, 393, 900, 11, 12739, 21201, 286, 5128, 1028, 3142, 3815, 13]",0.5,674,ml_signal,72,"Checking membership in a list or set, indicating validation of input against allowed values.",,658,        if not self.uri.exists():,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13, 9900, 13, 1069, 1023, 33529]"
"üß† ML Signal: Use of a method to get a recent frequency, indicating a fallback mechanism.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 284, 651, 257, 2274, 8373, 11, 12739, 257, 2121, 1891, 9030, 13]",0.5,674,ml_signal,74,"Use of a method to get a recent frequency, indicating a fallback mechanism.",,674,,[]
‚ö†Ô∏è SAST Risk (Low): Raising a ValueError with potentially sensitive information about internal state.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 11052, 12331, 351, 6196, 8564, 1321, 546, 5387, 1181, 13]",1.0,688,sast_risk,76,Raising a ValueError with potentially sensitive information about internal state.,Low,674,"class FileCalendarStorage(FileStorageMixin, CalendarStorage):","[4871, 9220, 9771, 9239, 31425, 7, 8979, 31425, 35608, 259, 11, 26506, 31425, 2599]"
‚úÖ Best Practice: Caching the result to avoid redundant calculations and improve performance.,"[26486, 227, 6705, 19939, 25, 327, 8103, 262, 1255, 284, 3368, 30806, 16765, 290, 2987, 2854, 13]",1.0,700,best_practice,79,Caching the result to avoid redundant calculations and improve performance.,,688,        self.future = future,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 37443, 796, 2003]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,714,best_practice,76,Use of type hinting for return type improves code readability and maintainability,,700,"class FileCalendarStorage(FileStorageMixin, CalendarStorage):","[4871, 9220, 9771, 9239, 31425, 7, 8979, 31425, 35608, 259, 11, 26506, 31425, 2599]"
"‚ö†Ô∏è SAST Risk (Low): Potential issue if self.uri is user-controlled, leading to path traversal or file access vulnerabilities","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 2116, 13, 9900, 318, 2836, 12, 14401, 11, 3756, 284, 3108, 33038, 282, 393, 2393, 1895, 23805]",0.5,743,sast_risk,78,"Potential issue if self.uri is user-controlled, leading to path traversal or file access vulnerabilities",Low,714,"        super(FileCalendarStorage, self).__init__(freq, future, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 2208, 7, 8979, 9771, 9239, 31425, 11, 2116, 737, 834, 15003, 834, 7, 19503, 80, 11, 2003, 11, 12429, 46265, 22046, 8]"
üß† ML Signal: Checking for file existence before attempting to read or write,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 2393, 6224, 878, 9361, 284, 1100, 393, 3551]",0.5,783,ml_signal,80,Checking for file existence before attempting to read or write,,743,        self._provider_uri = None if provider_uri is None else C.DataPathManager.format_provider_uri(provider_uri),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 15234, 1304, 62, 9900, 796, 6045, 611, 10131, 62, 9900, 318, 6045, 2073, 327, 13, 6601, 15235, 13511, 13, 18982, 62, 15234, 1304, 62, 9900, 7, 15234, 1304, 62, 9900, 8]"
‚ö†Ô∏è SAST Risk (Low): Opening files without specifying encoding can lead to issues on different systems,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 25522, 3696, 1231, 31577, 21004, 460, 1085, 284, 2428, 319, 1180, 3341]",0.5,798,sast_risk,82,Opening files without specifying encoding can lead to issues on different systems,Low,783,"        self.region = C[""region""]","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 36996, 796, 327, 14692, 36996, 8973]"
üß† ML Signal: Reading lines from a file and processing them,"[8582, 100, 254, 10373, 26484, 25, 11725, 3951, 422, 257, 2393, 290, 7587, 606]",0.5,811,ml_signal,85,Reading lines from a file and processing them,,798,    def file_name(self) -> str:,"[220, 220, 220, 825, 2393, 62, 3672, 7, 944, 8, 4613, 965, 25]"
üß† ML Signal: Stripping whitespace from lines before processing,"[8582, 100, 254, 10373, 26484, 25, 26137, 2105, 13216, 10223, 422, 3951, 878, 7587]",0.5,811,ml_signal,87,Stripping whitespace from lines before processing,,811,,[]
üß† ML Signal: Filtering out empty lines from the result,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 503, 6565, 3951, 422, 262, 1255]",0.5,827,ml_signal,90,Filtering out empty lines from the result,,811,"        """"""the freq to read from file""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 1169, 2030, 80, 284, 1100, 422, 2393, 37811]"
‚úÖ Best Practice: Type hint for 'values' parameter improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 329, 705, 27160, 6, 11507, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,869,best_practice,86,Type hint for 'values' parameter improves code readability and maintainability,,827,"        return f""{self._freq_file}_future.txt"" if self.future else f""{self._freq_file}.txt"".lower()","[220, 220, 220, 220, 220, 220, 220, 1441, 277, 1, 90, 944, 13557, 19503, 80, 62, 7753, 92, 62, 37443, 13, 14116, 1, 611, 2116, 13, 37443, 2073, 277, 1, 90, 944, 13557, 19503, 80, 62, 7753, 27422, 14116, 1911, 21037, 3419]"
‚úÖ Best Practice: Default parameter 'mode' allows flexibility in file operation,"[26486, 227, 6705, 19939, 25, 15161, 11507, 705, 14171, 6, 3578, 13688, 287, 2393, 4905]",1.0,869,best_practice,87,Default parameter 'mode' allows flexibility in file operation,,869,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure 'self.uri' is a trusted source to prevent path traversal vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 944, 13, 9900, 6, 318, 257, 13467, 2723, 284, 2948, 3108, 33038, 282, 23805]",1.0,874,sast_risk,88,Ensure 'self.uri' is a trusted source to prevent path traversal vulnerabilities,Low,869,    @property,"[220, 220, 220, 2488, 26745]"
‚ö†Ô∏è SAST Risk (Low): Ensure 'values' is sanitized to prevent injection attacks in file writing,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 27160, 6, 318, 5336, 36951, 284, 2948, 16954, 3434, 287, 2393, 3597]",1.0,897,sast_risk,91,Ensure 'values' is sanitized to prevent injection attacks in file writing,Low,874,"        if not hasattr(self, ""_freq_file_cache""):","[220, 220, 220, 220, 220, 220, 220, 611, 407, 468, 35226, 7, 944, 11, 45434, 19503, 80, 62, 7753, 62, 23870, 1, 2599]"
‚úÖ Best Practice: Specifying 'fmt' and 'encoding' ensures consistent data formatting and encoding,"[26486, 227, 6705, 19939, 25, 18291, 4035, 705, 69, 16762, 6, 290, 705, 12685, 7656, 6, 19047, 6414, 1366, 33313, 290, 21004]",1.0,920,best_practice,91,Specifying 'fmt' and 'encoding' ensures consistent data formatting and encoding,,897,"        if not hasattr(self, ""_freq_file_cache""):","[220, 220, 220, 220, 220, 220, 220, 611, 407, 468, 35226, 7, 944, 11, 45434, 19503, 80, 62, 7753, 62, 23870, 1, 2599]"
‚úÖ Best Practice: Type hinting for the return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,936,best_practice,90,Type hinting for the return value improves code readability and maintainability,,920,"        """"""the freq to read from file""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 1169, 2030, 80, 284, 1100, 422, 2393, 37811]"
üß† ML Signal: Usage of method chaining pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2446, 442, 1397, 3912]",0.5,959,ml_signal,91,Usage of method chaining pattern,,936,"        if not hasattr(self, ""_freq_file_cache""):","[220, 220, 220, 220, 220, 220, 220, 611, 407, 468, 35226, 7, 944, 11, 45434, 19503, 80, 62, 7753, 62, 23870, 1, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `get_data_uri` returns an unexpected type,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 1136, 62, 7890, 62, 9900, 63, 5860, 281, 10059, 2099]",0.5,982,sast_risk,93,Potential risk if `get_data_uri` returns an unexpected type,Low,959,            if freq not in self.support_freq:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2030, 80, 407, 287, 2116, 13, 11284, 62, 19503, 80, 25]"
‚úÖ Best Practice: Ensure that the method name is descriptive and follows naming conventions.,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 2446, 1438, 318, 35644, 290, 5679, 19264, 21396, 13]",0.5,1002,best_practice,94,Ensure that the method name is descriptive and follows naming conventions.,,982,                # NOTE: uri,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 2956, 72]"
üß† ML Signal: Usage of caching mechanism with a conditional check.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 40918, 9030, 351, 257, 26340, 2198, 13]",0.5,1050,ml_signal,96,Usage of caching mechanism with a conditional check.,,1002,"                #       - Get the `min_uri` of the closest `freq` under the same ""directory"" as the `uri`","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 220, 220, 220, 220, 220, 220, 532, 3497, 262, 4600, 1084, 62, 9900, 63, 286, 262, 11706, 4600, 19503, 80, 63, 739, 262, 976, 366, 34945, 1, 355, 262, 4600, 9900, 63]"
üß† ML Signal: Concatenation of strings to form a cache key.,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 341, 286, 13042, 284, 1296, 257, 12940, 1994, 13]",0.5,1050,ml_signal,98,Concatenation of strings to form a cache key.,,1050,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk of key collision in the cache dictionary.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 1994, 17661, 287, 262, 12940, 22155, 13]",1.0,1088,sast_risk,99,Potential risk of key collision in the cache dictionary.,Low,1050,"                freq = Freq.get_recent_freq(freq, self.support_freq)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2030, 80, 796, 4848, 80, 13, 1136, 62, 49921, 62, 19503, 80, 7, 19503, 80, 11, 2116, 13, 11284, 62, 19503, 80, 8]"
üß† ML Signal: Caching the result of a function call.,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 262, 1255, 286, 257, 2163, 869, 13]",0.5,1110,ml_signal,102,Caching the result of a function call.,,1088,            self._freq_file_cache = freq,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 19503, 80, 62, 7753, 62, 23870, 796, 2030, 80]"
üß† ML Signal: Conditional logic based on frequency comparison.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 8373, 7208, 13]",0.5,1126,ml_signal,107,Conditional logic based on frequency comparison.,,1110,        # if we want to accelerate partial reading calendar,"[220, 220, 220, 220, 220, 220, 220, 1303, 611, 356, 765, 284, 22636, 13027, 3555, 11845]"
üß† ML Signal: Use of resampling function with multiple parameters.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 581, 321, 11347, 2163, 351, 3294, 10007, 13]",0.5,1147,ml_signal,109,Use of resampling function with multiple parameters.,,1126,"        # Currently, it is not supported for the txt-based calendar","[220, 220, 220, 220, 220, 220, 220, 1303, 16888, 11, 340, 318, 407, 4855, 329, 262, 256, 742, 12, 3106, 11845]"
‚úÖ Best Practice: Use of type hinting for the return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1163,best_practice,107,Use of type hinting for the return type improves code readability and maintainability.,,1147,        # if we want to accelerate partial reading calendar,"[220, 220, 220, 220, 220, 220, 220, 1303, 611, 356, 765, 284, 22636, 13027, 3555, 11845]"
üß† ML Signal: Use of sorted and set indicates a pattern of deduplication and ordering.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 23243, 290, 900, 9217, 257, 3912, 286, 4648, 84, 489, 3299, 290, 16216, 13]",0.5,1184,ml_signal,109,Use of sorted and set indicates a pattern of deduplication and ordering.,,1163,"        # Currently, it is not supported for the txt-based calendar","[220, 220, 220, 220, 220, 220, 220, 1303, 16888, 11, 340, 318, 407, 4855, 329, 262, 256, 742, 12, 3106, 11845]"
üß† ML Signal: Use of lambda function for inline operations.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 2163, 329, 26098, 4560, 13]",1.0,1184,ml_signal,110,Use of lambda function for inline operations.,,1184,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for large memory usage if the directory contains many files.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1588, 4088, 8748, 611, 262, 8619, 4909, 867, 3696, 13]",1.0,1200,sast_risk,111,Potential for large memory usage if the directory contains many files.,Low,1184,        if not self.uri.exists():,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13, 9900, 13, 1069, 1023, 33529]"
‚úÖ Best Practice: Type hinting for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1221,best_practice,109,Type hinting for the return type improves code readability and maintainability,,1200,"        # Currently, it is not supported for the txt-based calendar","[220, 220, 220, 220, 220, 220, 220, 1303, 16888, 11, 340, 318, 407, 4855, 329, 262, 256, 742, 12, 3106, 11845]"
üß† ML Signal: Usage of a private method indicates encapsulation and abstraction patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2839, 2446, 9217, 32652, 1741, 290, 34651, 7572]",1.0,1237,ml_signal,111,Usage of a private method indicates encapsulation and abstraction patterns,,1221,        if not self.uri.exists():,"[220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13, 9900, 13, 1069, 1023, 33529]"
‚úÖ Best Practice: Using a private method suggests that _write_calendar is intended for internal use only,"[26486, 227, 6705, 19939, 25, 8554, 257, 2839, 2446, 5644, 326, 4808, 13564, 62, 9948, 9239, 318, 5292, 329, 5387, 779, 691]",0.5,1258,best_practice,112,Using a private method suggests that _write_calendar is intended for internal use only,,1237,            self._write_calendar(values=[]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 13564, 62, 9948, 9239, 7, 27160, 41888, 12962]"
‚úÖ Best Practice: Use of type hint for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1279,best_practice,112,Use of type hint for return value improves code readability and maintainability,,1258,            self._write_calendar(values=[]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 13564, 62, 9948, 9239, 7, 27160, 41888, 12962]"
üß† ML Signal: Method call with specific argument pattern (empty list) could indicate a reset or clear operation,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 2176, 4578, 3912, 357, 28920, 1351, 8, 714, 7603, 257, 13259, 393, 1598, 4905]",1.0,1299,ml_signal,114,Method call with specific argument pattern (empty list) could indicate a reset or clear operation,,1279,"        with self.uri.open(""r"") as fp:","[220, 220, 220, 220, 220, 220, 220, 351, 2116, 13, 9900, 13, 9654, 7203, 81, 4943, 355, 277, 79, 25]"
‚úÖ Best Practice: Ensure the method is checking preconditions before proceeding with main logic,"[26486, 227, 6705, 19939, 25, 48987, 262, 2446, 318, 10627, 3718, 623, 1756, 878, 18788, 351, 1388, 9156]",0.5,1319,best_practice,114,Ensure the method is checking preconditions before proceeding with main logic,,1299,"        with self.uri.open(""r"") as fp:","[220, 220, 220, 220, 220, 220, 220, 351, 2116, 13, 9900, 13, 9654, 7203, 81, 4943, 355, 277, 79, 25]"
"‚úÖ Best Practice: Reading from a calendar source, consider caching if this is a frequent operation","[26486, 227, 6705, 19939, 25, 11725, 422, 257, 11845, 2723, 11, 2074, 40918, 611, 428, 318, 257, 10792, 4905]",0.5,1339,best_practice,116,"Reading from a calendar source, consider caching if this is a frequent operation",,1319,            for line in fp.readlines():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 1627, 287, 277, 79, 13, 961, 6615, 33529]"
"‚ö†Ô∏è SAST Risk (Low): Assumes that np.argwhere will always find the value, which may lead to IndexError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 326, 45941, 13, 853, 3003, 481, 1464, 1064, 262, 1988, 11, 543, 743, 1085, 284, 12901, 12331]",0.5,1362,sast_risk,118,"Assumes that np.argwhere will always find the value, which may lead to IndexError",Low,1339,                if len(line) > 0:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 1370, 8, 1875, 657, 25]"
"üß† ML Signal: Use of numpy for array operations, indicating numerical or data processing tasks","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 329, 7177, 4560, 11, 12739, 29052, 393, 1366, 7587, 8861]",0.5,1387,ml_signal,119,"Use of numpy for array operations, indicating numerical or data processing tasks",,1362,                    res.append(line),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 13, 33295, 7, 1370, 8]"
‚úÖ Best Practice: Type hinting for parameters improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1408,best_practice,117,Type hinting for parameters improves code readability and maintainability,,1387,                line = line.strip(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1627, 796, 1627, 13, 36311, 3419]"
üß† ML Signal: Reading from a data source before modification is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 11725, 422, 257, 1366, 2723, 878, 17613, 318, 257, 2219, 3912]",1.0,1433,ml_signal,119,Reading from a data source before modification is a common pattern,,1408,                    res.append(line),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 13, 33295, 7, 1370, 8]"
üß† ML Signal: Use of numpy for array manipulation is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 329, 7177, 17512, 318, 257, 2219, 3912]",1.0,1433,ml_signal,121,Use of numpy for array manipulation is a common pattern,,1433,,[]
üß† ML Signal: Writing back to a data source after modification is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 22183, 736, 284, 257, 1366, 2723, 706, 17613, 318, 257, 2219, 3912]",1.0,1455,ml_signal,123,Writing back to a data source after modification is a common pattern,,1433,        with self.uri.open(mode=mode) as fp:,"[220, 220, 220, 220, 220, 220, 220, 351, 2116, 13, 9900, 13, 9654, 7, 14171, 28, 14171, 8, 355, 277, 79, 25]"
üß† ML Signal: Method for removing an item from a collection,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 10829, 281, 2378, 422, 257, 4947]",0.5,1483,ml_signal,122,Method for removing an item from a collection,,1455,"    def _write_calendar(self, values: Iterable[CalVT], mode: str = ""wb""):","[220, 220, 220, 825, 4808, 13564, 62, 9948, 9239, 7, 944, 11, 3815, 25, 40806, 540, 58, 9771, 36392, 4357, 4235, 25, 965, 796, 366, 39346, 1, 2599]"
üß† ML Signal: Pattern of checking preconditions before performing operations,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 10627, 3718, 623, 1756, 878, 9489, 4560]",0.5,1514,ml_signal,124,Pattern of checking preconditions before performing operations,,1483,"            np.savetxt(fp, values, fmt=""%s"", encoding=""utf-8"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 45941, 13, 21928, 14116, 7, 46428, 11, 3815, 11, 46996, 2625, 4, 82, 1600, 21004, 2625, 40477, 12, 23, 4943]"
üß† ML Signal: Usage of index finding in a collection,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6376, 4917, 287, 257, 4947]",0.5,1519,ml_signal,126,Usage of index finding in a collection,,1514,    @property,"[220, 220, 220, 2488, 26745]"
üß† ML Signal: Reading data from a source before modification,"[8582, 100, 254, 10373, 26484, 25, 11725, 1366, 422, 257, 2723, 878, 17613]",0.5,1565,ml_signal,128,Reading data from a source before modification,,1519,"        return self.dpm.get_data_uri(self._freq_file).joinpath(f""{self.storage_name}s"", self.file_name)","[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 67, 4426, 13, 1136, 62, 7890, 62, 9900, 7, 944, 13557, 19503, 80, 62, 7753, 737, 22179, 6978, 7, 69, 1, 90, 944, 13, 35350, 62, 3672, 92, 82, 1600, 2116, 13, 7753, 62, 3672, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for IndexError if index is out of bounds,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 12901, 12331, 611, 6376, 318, 503, 286, 22303]",0.5,1570,sast_risk,130,Potential for IndexError if index is out of bounds,Low,1565,    @property,"[220, 220, 220, 2488, 26745]"
üß† ML Signal: Usage of numpy for array manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 299, 32152, 329, 7177, 17512]",0.5,1584,ml_signal,131,Usage of numpy for array manipulation,,1570,    def data(self) -> List[CalVT]:,"[220, 220, 220, 825, 1366, 7, 944, 8, 4613, 7343, 58, 9771, 36392, 5974]"
üß† ML Signal: Writing data back to a source after modification,"[8582, 100, 254, 10373, 26484, 25, 22183, 1366, 736, 284, 257, 2723, 706, 17613]",0.5,1601,ml_signal,133,Writing data back to a source after modification,,1584,"        # If cache is enabled, then return cache directly","[220, 220, 220, 220, 220, 220, 220, 1303, 1002, 12940, 318, 9343, 11, 788, 1441, 12940, 3264]"
‚úÖ Best Practice: Type hints are used for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5994, 20269, 389, 973, 329, 2163, 10007, 290, 1441, 2099]",0.5,1613,best_practice,127,Type hints are used for function parameters and return type,,1601,    def uri(self) -> Path:,"[220, 220, 220, 825, 2956, 72, 7, 944, 8, 4613, 10644, 25]"
üß† ML Signal: Method name suggests this is a special method for item assignment,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 428, 318, 257, 2041, 2446, 329, 2378, 16237]",0.5,1613,ml_signal,129,Method name suggests this is a special method for item assignment,,1613,,[]
üß† ML Signal: Use of Union type hint indicates handling of multiple input types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4479, 2099, 9254, 9217, 9041, 286, 3294, 5128, 3858]",0.5,1618,ml_signal,130,Use of Union type hint indicates handling of multiple input types,,1613,    @property,"[220, 220, 220, 2488, 26745]"
"üß† ML Signal: Direct assignment to a data structure, indicating in-place modification","[8582, 100, 254, 10373, 26484, 25, 4128, 16237, 284, 257, 1366, 4645, 11, 12739, 287, 12, 5372, 17613]",0.5,1629,ml_signal,132,"Direct assignment to a data structure, indicating in-place modification",,1618,        self.check(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9122, 3419]"
üß† ML Signal: Method call pattern for persisting changes,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 2774, 9665, 2458]",0.5,1645,ml_signal,134,Method call pattern for persisting changes,,1629,        if self.enable_read_cache:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 21633, 62, 961, 62, 23870, 25]"
‚úÖ Best Practice: Ensure the object is in a valid state before performing operations,"[26486, 227, 6705, 19939, 25, 48987, 262, 2134, 318, 287, 257, 4938, 1181, 878, 9489, 4560]",1.0,1656,best_practice,132,Ensure the object is in a valid state before performing operations,,1645,        self.check(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9122, 3419]"
üß† ML Signal: Reading data from a source before modification,"[8582, 100, 254, 10373, 26484, 25, 11725, 1366, 422, 257, 2723, 878, 17613]",0.5,1672,ml_signal,134,Reading data from a source before modification,,1656,        if self.enable_read_cache:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 21633, 62, 961, 62, 23870, 25]"
üß† ML Signal: Using numpy to delete elements from an array,"[8582, 100, 254, 10373, 26484, 25, 8554, 299, 32152, 284, 12233, 4847, 422, 281, 7177]",0.5,1692,ml_signal,136,Using numpy to delete elements from an array,,1672,"            if key not in H[""c""]:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1994, 407, 287, 367, 14692, 66, 1, 5974]"
üß† ML Signal: Writing data back to a source after modification,"[8582, 100, 254, 10373, 26484, 25, 22183, 1366, 736, 284, 257, 2723, 706, 17613]",0.5,1714,ml_signal,138,Writing data back to a source after modification,,1692,"            _calendar = H[""c""][key]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 9948, 9239, 796, 367, 14692, 66, 1, 7131, 2539, 60]"
‚úÖ Best Practice: Ensure the method is type hinted for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 48987, 262, 2446, 318, 2099, 27388, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,1744,best_practice,137,Ensure the method is type hinted for better readability and maintainability.,,1714,"                H[""c""][key] = self._read_calendar()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 367, 14692, 66, 1, 7131, 2539, 60, 796, 2116, 13557, 961, 62, 9948, 9239, 3419]"
üß† ML Signal: Method call pattern before accessing an internal method.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 878, 22534, 281, 5387, 2446, 13]",0.5,1753,ml_signal,139,Method call pattern before accessing an internal method.,,1744,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Access pattern using indexing or slicing on the result of a method call.,"[8582, 100, 254, 10373, 26484, 25, 8798, 3912, 1262, 6376, 278, 393, 49289, 319, 262, 1255, 286, 257, 2446, 869, 13]",0.5,1780,ml_signal,141,Access pattern using indexing or slicing on the result of a method call.,,1753,        if Freq(self._freq_file) != Freq(self.freq):,"[220, 220, 220, 220, 220, 220, 220, 611, 4848, 80, 7, 944, 13557, 19503, 80, 62, 7753, 8, 14512, 4848, 80, 7, 944, 13, 19503, 80, 2599]"
‚úÖ Best Practice: Use of __len__ method to define object length,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 11925, 834, 2446, 284, 8160, 2134, 4129]",1.0,1789,best_practice,139,Use of __len__ method to define object length,,1780,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Accessing an attribute of the object,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 281, 11688, 286, 262, 2134]",1.0,1816,ml_signal,141,Accessing an attribute of the object,,1789,        if Freq(self._freq_file) != Freq(self.freq):,"[220, 220, 220, 220, 220, 220, 220, 611, 4848, 80, 7, 944, 13557, 19503, 80, 62, 7753, 8, 14512, 4848, 80, 7, 944, 13, 19503, 80, 2599]"
‚úÖ Best Practice: Class definition with clear inheritance for code organization and reuse,"[26486, 227, 6705, 19939, 25, 5016, 6770, 351, 1598, 24155, 329, 2438, 4009, 290, 32349]",1.0,1843,best_practice,141,Class definition with clear inheritance for code organization and reuse,,1816,        if Freq(self._freq_file) != Freq(self.freq):,"[220, 220, 220, 220, 220, 220, 220, 611, 4848, 80, 7, 944, 13557, 19503, 80, 62, 7753, 8, 14512, 4848, 80, 7, 944, 13, 19503, 80, 2599]"
‚úÖ Best Practice: Constants are defined for easy configuration and readability,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 329, 2562, 8398, 290, 1100, 1799]",1.0,1891,best_practice,143,Constants are defined for easy configuration and readability,,1843,"                np.array(list(map(pd.Timestamp, _calendar))), self._freq_file, self.freq, self.region","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 45941, 13, 18747, 7, 4868, 7, 8899, 7, 30094, 13, 14967, 27823, 11, 4808, 9948, 9239, 4008, 828, 2116, 13557, 19503, 80, 62, 7753, 11, 2116, 13, 19503, 80, 11, 2116, 13, 36996]"
‚úÖ Best Practice: Use of type hints for function parameters improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1910,best_practice,147,Use of type hints for function parameters improves code readability and maintainability.,,1891,    def _get_storage_freq(self) -> List[str]:,"[220, 220, 220, 825, 4808, 1136, 62, 35350, 62, 19503, 80, 7, 944, 8, 4613, 7343, 58, 2536, 5974]"
‚úÖ Best Practice: Default mutable arguments should be avoided; using None as a default value is a safer pattern.,"[26486, 227, 6705, 19939, 25, 15161, 4517, 540, 7159, 815, 307, 13941, 26, 1262, 6045, 355, 257, 4277, 1988, 318, 257, 14178, 3912, 13]",1.0,1951,best_practice,148,Default mutable arguments should be avoided; using None as a default value is a safer pattern.,,1910,"        return sorted(set(map(lambda x: x.stem.split(""_"")[0], self.uri.parent.glob(""*.txt""))))","[220, 220, 220, 220, 220, 220, 220, 1441, 23243, 7, 2617, 7, 8899, 7, 50033, 2124, 25, 2124, 13, 927, 13, 35312, 7203, 62, 4943, 58, 15, 4357, 2116, 13, 9900, 13, 8000, 13, 4743, 672, 7203, 24620, 14116, 1, 35514]"
‚úÖ Best Practice: Use of conditional expression for concise assignment.,"[26486, 227, 6705, 19939, 25, 5765, 286, 26340, 5408, 329, 35327, 16237, 13]",1.0,1970,best_practice,150,Use of conditional expression for concise assignment.,,1951,"    def extend(self, values: Iterable[CalVT]) -> None:","[220, 220, 220, 825, 9117, 7, 944, 11, 3815, 25, 40806, 540, 58, 9771, 36392, 12962, 4613, 6045, 25]"
üß† ML Signal: Use of string formatting to create file names based on input parameters.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 33313, 284, 2251, 2393, 3891, 1912, 319, 5128, 10007, 13]",1.0,1970,ml_signal,152,Use of string formatting to create file names based on input parameters.,,1970,,[]
"‚ö†Ô∏è SAST Risk (Low): Potential issue if self.uri is user-controlled, leading to path traversal or file access vulnerabilities","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 2116, 13, 9900, 318, 2836, 12, 14401, 11, 3756, 284, 3108, 33038, 282, 393, 2393, 1895, 23805]",1.0,1990,sast_risk,151,"Potential issue if self.uri is user-controlled, leading to path traversal or file access vulnerabilities",Low,1970,"        self._write_calendar(values, mode=""ab"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 13564, 62, 9948, 9239, 7, 27160, 11, 4235, 2625, 397, 4943]"
"üß† ML Signal: Usage of pandas to read CSV files, indicating data processing patterns","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 284, 1100, 44189, 3696, 11, 12739, 1366, 7587, 7572]",0.5,2007,ml_signal,154,"Usage of pandas to read CSV files, indicating data processing patterns",,1990,        self._write_calendar(values=[]),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 13564, 62, 9948, 9239, 7, 27160, 41888, 12962]"
"üß† ML Signal: Iterating over DataFrame rows, common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 6060, 19778, 15274, 11, 2219, 3912, 287, 1366, 7587]",0.5,2026,ml_signal,164,"Iterating over DataFrame rows, common pattern in data processing",,2007,        self._write_calendar(values=calendar),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 13564, 62, 9948, 9239, 7, 27160, 28, 9948, 9239, 8]"
‚úÖ Best Practice: Using setdefault to handle dictionary entries efficiently,"[26486, 227, 6705, 19939, 25, 8554, 900, 12286, 284, 5412, 22155, 12784, 18306]",0.5,2042,best_practice,166,Using setdefault to handle dictionary entries efficiently,,2026,"    def remove(self, value: CalVT) -> None:","[220, 220, 220, 825, 4781, 7, 944, 11, 1988, 25, 2199, 36392, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Check for empty data before proceeding with operations,"[26486, 227, 6705, 19939, 25, 6822, 329, 6565, 1366, 878, 18788, 351, 4560]",1.0,2058,best_practice,166,Check for empty data before proceeding with operations,,2042,"    def remove(self, value: CalVT) -> None:","[220, 220, 220, 825, 4781, 7, 944, 11, 1988, 25, 2199, 36392, 8, 4613, 6045, 25]"
üß† ML Signal: Usage of pandas DataFrame for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 6060, 19778, 329, 1366, 17512]",1.0,2094,ml_signal,173,Usage of pandas DataFrame for data manipulation,,2058,"    def __setitem__(self, i: Union[int, slice], values: Union[CalVT, Iterable[CalVT]]) -> None:","[220, 220, 220, 825, 11593, 2617, 9186, 834, 7, 944, 11, 1312, 25, 4479, 58, 600, 11, 16416, 4357, 3815, 25, 4479, 58, 9771, 36392, 11, 40806, 540, 58, 9771, 36392, 11907, 8, 4613, 6045, 25]"
üß† ML Signal: Assigning a constant value to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 257, 6937, 1988, 284, 257, 6060, 19778, 5721]",0.5,2107,ml_signal,175,Assigning a constant value to a DataFrame column,,2094,        calendar[i] = values,"[220, 220, 220, 220, 220, 220, 220, 11845, 58, 72, 60, 796, 3815]"
üß† ML Signal: Concatenating multiple DataFrames,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 803, 3294, 6060, 35439]",1.0,2118,ml_signal,179,Concatenating multiple DataFrames,,2107,        self.check(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9122, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potential data overwrite if self.uri is not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 49312, 611, 2116, 13, 9900, 318, 407, 12118, 6105]",1.0,2134,sast_risk,180,Potential data overwrite if self.uri is not handled properly,Low,2118,        calendar = self._read_calendar(),"[220, 220, 220, 220, 220, 220, 220, 11845, 796, 2116, 13557, 961, 62, 9948, 9239, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potential data overwrite if self.uri is not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 49312, 611, 2116, 13, 9900, 318, 407, 12118, 6105]",1.0,2165,sast_risk,184,Potential data overwrite if self.uri is not handled properly,Low,2134,"    def __getitem__(self, i: Union[int, slice]) -> Union[CalVT, List[CalVT]]:","[220, 220, 220, 825, 11593, 1136, 9186, 834, 7, 944, 11, 1312, 25, 4479, 58, 600, 11, 16416, 12962, 4613, 4479, 58, 9771, 36392, 11, 7343, 58, 9771, 36392, 60, 5974]"
‚úÖ Best Practice: Use of type hint for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2183,best_practice,181,Use of type hint for return value improves code readability and maintainability,,2165,"        calendar = np.delete(calendar, i)","[220, 220, 220, 220, 220, 220, 220, 11845, 796, 45941, 13, 33678, 7, 9948, 9239, 11, 1312, 8]"
"üß† ML Signal: Method call with empty dictionary as argument, indicating a reset or clear operation","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 6565, 22155, 355, 4578, 11, 12739, 257, 13259, 393, 1598, 4905]",1.0,2183,ml_signal,183,"Method call with empty dictionary as argument, indicating a reset or clear operation",,2183,,[]
‚úÖ Best Practice: Use of @property decorator for creating a read-only attribute,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 4441, 257, 1100, 12, 8807, 11688]",1.0,2194,best_practice,185,Use of @property decorator for creating a read-only attribute,,2183,        self.check(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9122, 3419]"
üß† ML Signal: Method signature with type hints indicating expected input and output types,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 2099, 20269, 12739, 2938, 5128, 290, 5072, 3858]",1.0,2225,ml_signal,184,Method signature with type hints indicating expected input and output types,,2194,"    def __getitem__(self, i: Union[int, slice]) -> Union[CalVT, List[CalVT]]:","[220, 220, 220, 825, 11593, 1136, 9186, 834, 7, 944, 11, 1312, 25, 4479, 58, 600, 11, 16416, 12962, 4613, 4479, 58, 9771, 36392, 11, 7343, 58, 9771, 36392, 60, 5974]"
‚úÖ Best Practice: Ensure that preconditions are met before proceeding with the main logic,"[26486, 227, 6705, 19939, 25, 48987, 326, 3718, 623, 1756, 389, 1138, 878, 18788, 351, 262, 1388, 9156]",1.0,2243,best_practice,186,Ensure that preconditions are met before proceeding with the main logic,,2225,        return self._read_calendar()[i],"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13557, 961, 62, 9948, 9239, 3419, 58, 72, 60]"
"üß† ML Signal: Returning a method call result, indicating a pattern of delegation or encapsulation","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 2446, 869, 1255, 11, 12739, 257, 3912, 286, 22635, 393, 32652, 1741]",1.0,2256,ml_signal,188,"Returning a method call result, indicating a pattern of delegation or encapsulation",,2243,    def __len__(self) -> int:,"[220, 220, 220, 825, 11593, 11925, 834, 7, 944, 8, 4613, 493, 25]"
‚úÖ Best Practice: Type hints for parameters and return value improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 20269, 329, 10007, 290, 1441, 1988, 2987, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2274,best_practice,186,Type hints for parameters and return value improve code readability and maintainability,,2256,        return self._read_calendar()[i],"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13557, 961, 62, 9948, 9239, 3419, 58, 72, 60]"
"üß† ML Signal: Reading from a private method, indicating encapsulation and internal state management","[8582, 100, 254, 10373, 26484, 25, 11725, 422, 257, 2839, 2446, 11, 12739, 32652, 1741, 290, 5387, 1181, 4542]",1.0,2287,ml_signal,188,"Reading from a private method, indicating encapsulation and internal state management",,2274,    def __len__(self) -> int:,"[220, 220, 220, 825, 11593, 11925, 834, 7, 944, 8, 4613, 493, 25]"
üß† ML Signal: Dictionary-like item assignment pattern,"[8582, 100, 254, 10373, 26484, 25, 28261, 12, 2339, 2378, 16237, 3912]",0.5,2287,ml_signal,190,Dictionary-like item assignment pattern,,2287,,[]
"üß† ML Signal: Writing to a private method, indicating encapsulation and internal state management","[8582, 100, 254, 10373, 26484, 25, 22183, 284, 257, 2839, 2446, 11, 12739, 32652, 1741, 290, 5387, 1181, 4542]",1.0,2301,ml_signal,192,"Writing to a private method, indicating encapsulation and internal state management",,2287,"class FileInstrumentStorage(FileStorageMixin, InstrumentStorage):","[4871, 9220, 818, 43872, 31425, 7, 8979, 31425, 35608, 259, 11, 42410, 31425, 2599]"
‚úÖ Best Practice: Ensure the object is in a valid state before performing operations,"[26486, 227, 6705, 19939, 25, 48987, 262, 2134, 318, 287, 257, 4938, 1181, 878, 9489, 4560]",1.0,2301,best_practice,191,Ensure the object is in a valid state before performing operations,,2301,,[]
üß† ML Signal: Reading an instrument before modifying it,"[8582, 100, 254, 10373, 26484, 25, 11725, 281, 8875, 878, 30620, 340]",1.0,2315,ml_signal,193,Reading an instrument before modifying it,,2301,"    INSTRUMENT_SEP = ""\t""","[220, 220, 220, 3268, 18601, 5883, 3525, 62, 5188, 47, 796, 37082, 83, 1]"
üß† ML Signal: Deleting an item from a dictionary-like structure,"[8582, 100, 254, 10373, 26484, 25, 42226, 889, 281, 2378, 422, 257, 22155, 12, 2339, 4645]",0.5,2333,ml_signal,195,Deleting an item from a dictionary-like structure,,2315,"    INSTRUMENT_END_FIELD = ""end_datetime""","[220, 220, 220, 3268, 18601, 5883, 3525, 62, 10619, 62, 44603, 796, 366, 437, 62, 19608, 8079, 1]"
üß† ML Signal: Writing back the modified instrument,"[8582, 100, 254, 10373, 26484, 25, 22183, 736, 262, 9518, 8875]",0.5,2333,ml_signal,197,Writing back the modified instrument,,2333,,[]
‚úÖ Best Practice: Type hints for parameters and return values improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 20269, 329, 10007, 290, 1441, 3815, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,2348,best_practice,196,Type hints for parameters and return values improve code readability and maintainability.,,2333,"    SYMBOL_FIELD_NAME = ""instrument""","[220, 220, 220, 19704, 10744, 3535, 62, 44603, 62, 20608, 796, 366, 259, 43872, 1]"
"üß† ML Signal: Method call before accessing a dictionary, indicating a pattern of validation or pre-processing.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 878, 22534, 257, 22155, 11, 12739, 257, 3912, 286, 21201, 393, 662, 12, 36948, 13]",1.0,2379,ml_signal,198,"Method call before accessing a dictionary, indicating a pattern of validation or pre-processing.",,2348,"    def __init__(self, market: str, freq: str, provider_uri: dict = None, **kwargs):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 1910, 25, 965, 11, 2030, 80, 25, 965, 11, 10131, 62, 9900, 25, 8633, 796, 6045, 11, 12429, 46265, 22046, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'k' is not present in the dictionary returned by _read_instrument().,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 74, 6, 318, 407, 1944, 287, 262, 22155, 4504, 416, 4808, 961, 62, 259, 43872, 22446]",1.0,2419,sast_risk,200,Potential KeyError if 'k' is not present in the dictionary returned by _read_instrument().,Low,2379,        self._provider_uri = None if provider_uri is None else C.DataPathManager.format_provider_uri(provider_uri),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 15234, 1304, 62, 9900, 796, 6045, 611, 10131, 62, 9900, 318, 6045, 2073, 327, 13, 6601, 15235, 13511, 13, 18982, 62, 15234, 1304, 62, 9900, 7, 15234, 1304, 62, 9900, 8]"
‚úÖ Best Practice: Check for the number of arguments to prevent unexpected behavior.,"[26486, 227, 6705, 19939, 25, 6822, 329, 262, 1271, 286, 7159, 284, 2948, 10059, 4069, 13]",1.0,2448,best_practice,199,Check for the number of arguments to prevent unexpected behavior.,,2419,"        super(FileInstrumentStorage, self).__init__(market, freq, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 2208, 7, 8979, 818, 43872, 31425, 11, 2116, 737, 834, 15003, 834, 7, 10728, 11, 2030, 80, 11, 12429, 46265, 22046, 8]"
‚ö†Ô∏è SAST Risk (Low): Error message may expose internal logic details.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 743, 15651, 5387, 9156, 3307, 13]",0.5,2471,sast_risk,201,Error message may expose internal logic details.,Low,2448,"        self.file_name = f""{market.lower()}.txt""","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7753, 62, 3672, 796, 277, 1, 90, 10728, 13, 21037, 3419, 27422, 14116, 1]"
"üß† ML Signal: Reading from an instrument, indicating interaction with external systems.","[8582, 100, 254, 10373, 26484, 25, 11725, 422, 281, 8875, 11, 12739, 10375, 351, 7097, 3341, 13]",1.0,2493,ml_signal,203,"Reading from an instrument, indicating interaction with external systems.",,2471,"    def _read_instrument(self) -> Dict[InstKT, InstVT]:","[220, 220, 220, 825, 4808, 961, 62, 259, 43872, 7, 944, 8, 4613, 360, 713, 58, 6310, 42176, 11, 2262, 36392, 5974]"
‚úÖ Best Practice: Check if 'other' is a Mapping for safe key-value access.,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 847, 6, 318, 257, 337, 5912, 329, 3338, 1994, 12, 8367, 1895, 13]",1.0,2507,best_practice,207,Check if 'other' is a Mapping for safe key-value access.,,2493,        _instruments = dict(),"[220, 220, 220, 220, 220, 220, 220, 4808, 259, 2536, 2886, 796, 8633, 3419]"
‚úÖ Best Practice: Check for 'keys' attribute to handle dictionary-like objects.,"[26486, 227, 6705, 19939, 25, 6822, 329, 705, 13083, 6, 11688, 284, 5412, 22155, 12, 2339, 5563, 13]",1.0,2528,best_practice,211,Check for 'keys' attribute to handle dictionary-like objects.,,2507,"            usecols=[0, 1, 2],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 779, 4033, 82, 41888, 15, 11, 352, 11, 362, 4357]"
‚úÖ Best Practice: Fallback to iterable unpacking for key-value pairs.,"[26486, 227, 6705, 19939, 25, 7218, 1891, 284, 11629, 540, 8593, 5430, 329, 1994, 12, 8367, 14729, 13]",0.5,2549,best_practice,216,Fallback to iterable unpacking for key-value pairs.,,2528,        for row in df.itertuples(index=False):,"[220, 220, 220, 220, 220, 220, 220, 329, 5752, 287, 47764, 13, 270, 861, 84, 2374, 7, 9630, 28, 25101, 2599]"
"‚úÖ Best Practice: Use kwargs to update dictionary, allowing flexible key-value updates.","[26486, 227, 6705, 19939, 25, 5765, 479, 86, 22046, 284, 4296, 22155, 11, 5086, 12846, 1994, 12, 8367, 5992, 13]",1.0,2549,best_practice,219,"Use kwargs to update dictionary, allowing flexible key-value updates.",,2549,,[]
"üß† ML Signal: Writing to an instrument, indicating interaction with external systems.","[8582, 100, 254, 10373, 26484, 25, 22183, 284, 281, 8875, 11, 12739, 10375, 351, 7097, 3341, 13]",1.0,2572,ml_signal,222,"Writing to an instrument, indicating interaction with external systems.",,2549,"            with self.uri.open(""w"") as _:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 2116, 13, 9900, 13, 9654, 7203, 86, 4943, 355, 4808, 25]"
‚úÖ Best Practice: Type hinting for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2593,best_practice,216,Type hinting for return value improves code readability and maintainability,,2572,        for row in df.itertuples(index=False):,"[220, 220, 220, 220, 220, 220, 220, 329, 5752, 287, 47764, 13, 270, 861, 84, 2374, 7, 9630, 28, 25101, 2599]"
üß† ML Signal: Usage of __len__ method indicates implementation of a container-like class,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11593, 11925, 834, 2446, 9217, 7822, 286, 257, 9290, 12, 2339, 1398]",1.0,2605,ml_signal,218,Usage of __len__ method indicates implementation of a container-like class,,2593,        return _instruments,"[220, 220, 220, 220, 220, 220, 220, 1441, 4808, 259, 2536, 2886]"
‚úÖ Best Practice: Class definition should include a docstring to describe its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 284, 6901, 663, 4007, 290, 8748]",1.0,2617,best_practice,218,Class definition should include a docstring to describe its purpose and usage,,2605,        return _instruments,"[220, 220, 220, 220, 220, 220, 220, 1441, 4808, 259, 2536, 2886]"
‚úÖ Best Practice: Explicitly calling the superclass's __init__ method ensures proper initialization.,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 13]",1.0,2646,best_practice,220,Explicitly calling the superclass's __init__ method ensures proper initialization.,,2617,"    def _write_instrument(self, data: Dict[InstKT, InstVT] = None) -> None:","[220, 220, 220, 825, 4808, 13564, 62, 259, 43872, 7, 944, 11, 1366, 25, 360, 713, 58, 6310, 42176, 11, 2262, 36392, 60, 796, 6045, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Using a conditional expression to handle None values improves code readability.,"[26486, 227, 6705, 19939, 25, 8554, 257, 26340, 5408, 284, 5412, 6045, 3815, 19575, 2438, 1100, 1799, 13]",0.5,2669,best_practice,222,Using a conditional expression to handle None values improves code readability.,,2646,"            with self.uri.open(""w"") as _:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 2116, 13, 9900, 13, 9654, 7203, 86, 4943, 355, 4808, 25]"
üß† ML Signal: Consistent file naming pattern based on input parameters.,"[8582, 100, 254, 10373, 26484, 25, 3515, 7609, 2393, 19264, 3912, 1912, 319, 5128, 10007, 13]",0.5,2681,ml_signal,224,Consistent file naming pattern based on input parameters.,,2669,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
‚ö†Ô∏è SAST Risk (Low): Opening a file in write-binary mode without writing anything may lead to data loss.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 25522, 257, 2393, 287, 3551, 12, 39491, 4235, 1231, 3597, 1997, 743, 1085, 284, 1366, 2994, 13]",0.5,2693,sast_risk,224,Opening a file in write-binary mode without writing anything may lead to data loss.,Low,2681,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
‚úÖ Best Practice: Use of type hinting for the return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2711,best_practice,227,Use of type hinting for the return type improves code readability and maintainability.,,2693,"        for inst, v_list in data.items():","[220, 220, 220, 220, 220, 220, 220, 329, 916, 11, 410, 62, 4868, 287, 1366, 13, 23814, 33529]"
"üß† ML Signal: Method returning a slice of the object, indicating potential use of custom data structures.","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 257, 16416, 286, 262, 2134, 11, 12739, 2785, 779, 286, 2183, 1366, 8573, 13]",1.0,2737,ml_signal,229,"Method returning a slice of the object, indicating potential use of custom data structures.",,2711,            _df[self.SYMBOL_FIELD_NAME] = inst,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 7568, 58, 944, 13, 23060, 10744, 3535, 62, 44603, 62, 20608, 60, 796, 916]"
‚úÖ Best Practice: Check for empty data_array to avoid unnecessary operations,"[26486, 227, 6705, 19939, 25, 6822, 329, 6565, 1366, 62, 18747, 284, 3368, 13114, 4560]",0.5,2754,best_practice,230,Check for empty data_array to avoid unnecessary operations,,2737,            res.append(_df),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 13, 33295, 28264, 7568, 8]"
‚ö†Ô∏è SAST Risk (Low): Assumes self.uri is a valid path object with an exists method,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 2116, 13, 9900, 318, 257, 4938, 3108, 2134, 351, 281, 7160, 2446]",0.5,2754,sast_risk,237,Assumes self.uri is a valid path object with an exists method,Low,2754,,[]
‚úÖ Best Practice: Initialize index if not provided,"[26486, 227, 6705, 19939, 25, 20768, 1096, 6376, 611, 407, 2810]",0.5,2771,best_practice,239,Initialize index if not provided,,2754,        self._write_instrument(data={}),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 13564, 62, 259, 43872, 7, 7890, 34758, 30072]"
üß† ML Signal: Use of numpy for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 329, 1366, 17512]",0.5,2789,ml_signal,242,Use of numpy for data manipulation,,2771,"    def data(self) -> Dict[InstKT, InstVT]:","[220, 220, 220, 825, 1366, 7, 944, 8, 4613, 360, 713, 58, 6310, 42176, 11, 2262, 36392, 5974]"
‚úÖ Best Practice: Handle case where index is None or greater than end_index,"[26486, 227, 6705, 19939, 25, 33141, 1339, 810, 6376, 318, 6045, 393, 3744, 621, 886, 62, 9630]",0.5,2804,best_practice,244,Handle case where index is None or greater than end_index,,2789,        return self._read_instrument(),"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13557, 961, 62, 259, 43872, 3419]"
üß† ML Signal: Use of numpy for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 329, 1366, 17512]",0.5,2820,ml_signal,249,Use of numpy for data manipulation,,2804,        self._write_instrument(inst),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 13564, 62, 259, 43872, 7, 8625, 8]"
üß† ML Signal: Use of numpy for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 329, 1366, 17512]",0.5,2836,ml_signal,253,Use of numpy for data manipulation,,2820,        inst = self._read_instrument(),"[220, 220, 220, 220, 220, 220, 220, 916, 796, 2116, 13557, 961, 62, 259, 43872, 3419]"
üß† ML Signal: Use of pandas for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 329, 1366, 17512]",0.5,2836,ml_signal,256,Use of pandas for data manipulation,,2836,,[]
üß† ML Signal: Use of pandas for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 329, 1366, 17512]",0.5,2854,ml_signal,261,Use of pandas for data manipulation,,2836,"    def update(self, *args, **kwargs) -> None:","[220, 220, 220, 825, 4296, 7, 944, 11, 1635, 22046, 11, 12429, 46265, 22046, 8, 4613, 6045, 25]"
üß† ML Signal: Use of pandas for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 329, 1366, 17512]",0.5,2885,ml_signal,263,Use of pandas for data manipulation,,2854,"            raise TypeError(f""update expected at most 1 arguments, got {len(args)}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 5994, 12331, 7, 69, 1, 19119, 2938, 379, 749, 352, 7159, 11, 1392, 1391, 11925, 7, 22046, 38165, 4943]"
üß† ML Signal: Use of pandas for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 329, 1366, 17512]",0.5,2907,ml_signal,266,Use of pandas for data manipulation,,2885,            other = args[0]  # type: dict,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 584, 796, 26498, 58, 15, 60, 220, 1303, 2099, 25, 8633]"
‚ö†Ô∏è SAST Risk (Low): Potential file handling issue if self.uri is not a valid file path or if file access is restricted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 9041, 2071, 611, 2116, 13, 9900, 318, 407, 257, 4938, 2393, 3108, 393, 611, 2393, 1895, 318, 10770, 13]",1.0,2925,sast_risk,259,Potential file handling issue if self.uri is not a valid file path or if file access is restricted.,Low,2907,        return self._read_instrument()[k],"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13557, 961, 62, 259, 43872, 3419, 58, 74, 60]"
‚ö†Ô∏è SAST Risk (Low): Opening a file without exception handling can lead to unhandled exceptions if the file cannot be opened.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 25522, 257, 2393, 1231, 6631, 9041, 460, 1085, 284, 555, 38788, 13269, 611, 262, 2393, 2314, 307, 4721, 13]",1.0,2940,sast_risk,262,Opening a file without exception handling can lead to unhandled exceptions if the file cannot be opened.,Low,2925,        if len(args) > 1:,"[220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 22046, 8, 1875, 352, 25]"
"‚ö†Ô∏è SAST Risk (Low): Assumes the file contains at least 4 bytes; otherwise, this could raise an error.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 262, 2393, 4909, 379, 1551, 604, 9881, 26, 4306, 11, 428, 714, 5298, 281, 4049, 13]",1.0,2971,sast_risk,263,"Assumes the file contains at least 4 bytes; otherwise, this could raise an error.",Low,2940,"            raise TypeError(f""update expected at most 1 arguments, got {len(args)}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 5994, 12331, 7, 69, 1, 19119, 2938, 379, 749, 352, 7159, 11, 1392, 1391, 11925, 7, 22046, 38165, 4943]"
"‚ö†Ô∏è SAST Risk (Low): Assumes the file content can be interpreted as a float, which might not always be the case.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 262, 2393, 2695, 460, 307, 16173, 355, 257, 12178, 11, 543, 1244, 407, 1464, 307, 262, 1339, 13]",0.5,2981,sast_risk,265,"Assumes the file content can be interpreted as a float, which might not always be the case.",Low,2971,        if args:,"[220, 220, 220, 220, 220, 220, 220, 611, 26498, 25]"
"‚úÖ Best Practice: Use @property decorator to define a method as a property, improving code readability and usability.","[26486, 227, 6705, 19939, 25, 5765, 2488, 26745, 11705, 1352, 284, 8160, 257, 2446, 355, 257, 3119, 11, 10068, 2438, 1100, 1799, 290, 42863, 13]",0.5,3001,best_practice,268,"Use @property decorator to define a method as a property, improving code readability and usability.",,2981,                for key in other:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 1994, 287, 584, 25]"
‚úÖ Best Practice: Specify the return type using Union for clarity and type checking,"[26486, 227, 6705, 19939, 25, 18291, 1958, 262, 1441, 2099, 1262, 4479, 329, 16287, 290, 2099, 10627]",1.0,3011,best_practice,265,Specify the return type using Union for clarity and type checking,,3001,        if args:,"[220, 220, 220, 220, 220, 220, 220, 611, 26498, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential for NoneType attribute access if self.uri is None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 6030, 11688, 1895, 611, 2116, 13, 9900, 318, 6045]",0.5,3031,sast_risk,267,Potential for NoneType attribute access if self.uri is None,Low,3011,"            if isinstance(other, Mapping):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 847, 11, 337, 5912, 2599]"
üß† ML Signal: Pattern of calculating an end index from a start index and length,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 26019, 281, 886, 6376, 422, 257, 923, 6376, 290, 4129]",0.5,3053,ml_signal,270,Pattern of calculating an end index from a start index and length,,3031,"            elif hasattr(other, ""keys""):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1288, 361, 468, 35226, 7, 847, 11, 366, 13083, 1, 2599]"
‚úÖ Best Practice: Type hinting improves code readability and helps with static analysis.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5419, 351, 9037, 3781, 13]",0.5,3081,best_practice,269,Type hinting improves code readability and helps with static analysis.,,3053,                    inst[key] = other[key],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 916, 58, 2539, 60, 796, 584, 58, 2539, 60]"
‚ö†Ô∏è SAST Risk (Low): Potential file existence check race condition.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 6224, 2198, 3234, 4006, 13]",1.0,3103,sast_risk,271,Potential file existence check race condition.,Low,3081,                for key in other.keys():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 1994, 287, 584, 13, 13083, 33529]"
‚úÖ Best Practice: Returning an empty Series with specified dtype is clear and explicit.,"[26486, 227, 6705, 19939, 25, 42882, 281, 6565, 7171, 351, 7368, 288, 4906, 318, 1598, 290, 7952, 13]",1.0,3121,best_practice,276,Returning an empty Series with specified dtype is clear and explicit.,,3103,"        for key, value in kwargs.items():","[220, 220, 220, 220, 220, 220, 220, 329, 1994, 11, 1988, 287, 479, 86, 22046, 13, 23814, 33529]"
‚ö†Ô∏è SAST Risk (Low): Error message may expose internal type information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 743, 15651, 5387, 2099, 1321, 13]",0.5,3137,sast_risk,279,Error message may expose internal type information.,Low,3121,        self._write_instrument(inst),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 13564, 62, 259, 43872, 7, 8625, 8]"
"‚ö†Ô∏è SAST Risk (Medium): File is opened without exception handling, which may lead to resource leaks.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 9220, 318, 4721, 1231, 6631, 9041, 11, 543, 743, 1085, 284, 8271, 17316, 13]",0.5,3137,sast_risk,283,"File is opened without exception handling, which may lead to resource leaks.",Medium,3137,,[]
‚ö†Ô∏è SAST Risk (Low): Error message may expose internal index information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 743, 15651, 5387, 6376, 1321, 13]",0.5,3168,sast_risk,287,Error message may expose internal index information.,Low,3137,"        super(FileFeatureStorage, self).__init__(instrument, field, freq, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 2208, 7, 8979, 38816, 31425, 11, 2116, 737, 834, 15003, 834, 7, 259, 43872, 11, 2214, 11, 2030, 80, 11, 12429, 46265, 22046, 8]"
‚úÖ Best Practice: Calculating seek position based on index is efficient for file access.,"[26486, 227, 6705, 19939, 25, 27131, 803, 5380, 2292, 1912, 319, 6376, 318, 6942, 329, 2393, 1895, 13]",0.5,3206,best_practice,289,Calculating seek position based on index is efficient for file access.,,3168,"        self.file_name = f""{instrument.lower()}/{field.lower()}.{freq.lower()}.bin""","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7753, 62, 3672, 796, 277, 1, 90, 259, 43872, 13, 21037, 3419, 92, 14, 90, 3245, 13, 21037, 3419, 27422, 90, 19503, 80, 13, 21037, 3419, 27422, 8800, 1]"
‚ö†Ô∏è SAST Risk (Medium): Unpacking without validation may lead to unexpected exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 791, 41291, 1231, 21201, 743, 1085, 284, 10059, 13269, 13]",0.5,3214,sast_risk,291,Unpacking without validation may lead to unexpected exceptions.,Medium,3206,    def clear(self):,"[220, 220, 220, 825, 1598, 7, 944, 2599]"
üß† ML Signal: Use of numpy for efficient data handling and processing.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 299, 32152, 329, 6942, 1366, 9041, 290, 7587, 13]",0.5,3244,ml_signal,299,Use of numpy for efficient data handling and processing.,,3214,"    def write(self, data_array: Union[List, np.ndarray], index: int = None) -> None:","[220, 220, 220, 825, 3551, 7, 944, 11, 1366, 62, 18747, 25, 4479, 58, 8053, 11, 45941, 13, 358, 18747, 4357, 6376, 25, 493, 796, 6045, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Using pd.Series with index improves data handling and access.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 27996, 351, 6376, 19575, 1366, 9041, 290, 1895, 13]",0.5,3274,best_practice,299,Using pd.Series with index improves data handling and access.,,3244,"    def write(self, data_array: Union[List, np.ndarray], index: int = None) -> None:","[220, 220, 220, 825, 3551, 7, 944, 11, 1366, 62, 18747, 25, 4479, 58, 8053, 11, 45941, 13, 358, 18747, 4357, 6376, 25, 493, 796, 6045, 8, 4613, 6045, 25]"
‚ö†Ô∏è SAST Risk (Low): Error message may expose internal type information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 743, 15651, 5387, 2099, 1321, 13]",0.5,3304,sast_risk,299,Error message may expose internal type information.,Low,3274,"    def write(self, data_array: Union[List, np.ndarray], index: int = None) -> None:","[220, 220, 220, 825, 3551, 7, 944, 11, 1366, 62, 18747, 25, 4479, 58, 8053, 11, 45941, 13, 358, 18747, 4357, 6376, 25, 493, 796, 6045, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Ensure the method is type hinted for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 48987, 262, 2446, 318, 2099, 27388, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,3304,best_practice,298,Ensure the method is type hinted for better readability and maintainability.,,3304,,[]
üß† ML Signal: Method call pattern can be used to understand object behavior.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 460, 307, 973, 284, 1833, 2134, 4069, 13]",0.5,3334,ml_signal,299,Method call pattern can be used to understand object behavior.,,3304,"    def write(self, data_array: Union[List, np.ndarray], index: int = None) -> None:","[220, 220, 220, 825, 3551, 7, 944, 11, 1366, 62, 18747, 25, 4479, 58, 8053, 11, 45941, 13, 358, 18747, 4357, 6376, 25, 493, 796, 6045, 8, 4613, 6045, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential integer division and subtraction could lead to unexpected results if not handled properly.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 18253, 7297, 290, 13284, 7861, 714, 1085, 284, 10059, 2482, 611, 407, 12118, 6105, 13]",0.5,3364,sast_risk,299,Potential integer division and subtraction could lead to unexpected results if not handled properly.,Low,3334,"    def write(self, data_array: Union[List, np.ndarray], index: int = None) -> None:","[220, 220, 220, 825, 3551, 7, 944, 11, 1366, 62, 18747, 25, 4479, 58, 8053, 11, 45941, 13, 358, 18747, 4357, 6376, 25, 493, 796, 6045, 8, 4613, 6045, 25]"
üß† ML Signal: Usage of file size and arithmetic operations can indicate data processing patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2393, 2546, 290, 34768, 4560, 460, 7603, 1366, 7587, 7572, 13]",0.5,3394,ml_signal,299,Usage of file size and arithmetic operations can indicate data processing patterns.,,3364,"    def write(self, data_array: Union[List, np.ndarray], index: int = None) -> None:","[220, 220, 220, 825, 3551, 7, 944, 11, 1366, 62, 18747, 25, 4479, 58, 8053, 11, 45941, 13, 358, 18747, 4357, 6376, 25, 493, 796, 6045, 8, 4613, 6045, 25]"

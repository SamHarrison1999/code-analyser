annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Usage of logging can indicate important events or errors in the application flow.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 18931, 460, 7603, 1593, 2995, 393, 8563, 287, 262, 3586, 5202, 13]",0.5,0,ml_signal,6,Usage of logging can indicate important events or errors in the application flow.,,0,,[]
‚úÖ Best Practice: Raising NotImplementedError in abstract methods is a common pattern to enforce implementation in subclasses.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 287, 12531, 5050, 318, 257, 2219, 3912, 284, 4605, 7822, 287, 850, 37724, 13]",0.5,0,best_practice,10,Raising NotImplementedError in abstract methods is a common pattern to enforce implementation in subclasses.,,0,,[]
‚úÖ Best Practice: Raising NotImplementedError in abstract methods is a common pattern to enforce implementation in subclasses.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 287, 12531, 5050, 318, 257, 2219, 3912, 284, 4605, 7822, 287, 850, 37724, 13]",0.5,0,best_practice,10,Raising NotImplementedError in abstract methods is a common pattern to enforce implementation in subclasses.,,0,,[]
‚úÖ Best Practice: Raising NotImplementedError in abstract methods is a common pattern to enforce implementation in subclasses.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 287, 12531, 5050, 318, 257, 2219, 3912, 284, 4605, 7822, 287, 850, 37724, 13]",0.5,0,best_practice,50,Raising NotImplementedError in abstract methods is a common pattern to enforce implementation in subclasses.,,0,,[]
‚úÖ Best Practice: Use of @property decorator for getter method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446]",1.0,0,best_practice,50,Use of @property decorator for getter method,,0,,[]
‚úÖ Best Practice: Storing file path as an instance variable,"[26486, 227, 6705, 19939, 25, 520, 3255, 2393, 3108, 355, 281, 4554, 7885]",0.5,8,best_practice,58,Storing file path as an instance variable,,0,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
‚úÖ Best Practice: Lazy loading pattern for connection,"[26486, 227, 6705, 19939, 25, 406, 12582, 11046, 3912, 329, 4637]",0.5,16,best_practice,61,Lazy loading pattern for connection,,8,        Notes,"[220, 220, 220, 220, 220, 220, 220, 11822]"
üß† ML Signal: Checking for attribute existence before initialization,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 11688, 6224, 878, 37588]",0.5,35,ml_signal,64,Checking for attribute existence before initialization,,16,"            if isinstance(i, int):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 72, 11, 493, 2599]"
üß† ML Signal: Private method for encapsulating connection logic,"[8582, 100, 254, 10373, 26484, 25, 15348, 2446, 329, 32652, 8306, 4637, 9156]",0.5,49,ml_signal,70,Private method for encapsulating connection logic,,35,        raise NotImplementedError(,"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7]"
‚ö†Ô∏è SAST Risk (Low): Potential file handling risk if file_path is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 9041, 2526, 611, 2393, 62, 6978, 318, 407, 31031]",0.5,63,sast_risk,70,Potential file handling risk if file_path is not validated,Low,49,        raise NotImplementedError(,"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7]"
‚úÖ Best Practice: Using 'with' statement for file operations,"[26486, 227, 6705, 19939, 25, 8554, 705, 4480, 6, 2643, 329, 2393, 4560]",0.5,63,best_practice,74,Using 'with' statement for file operations,,63,,[]
‚úÖ Best Practice: Storing database URL as an instance variable,"[26486, 227, 6705, 19939, 25, 520, 3255, 6831, 10289, 355, 281, 4554, 7885]",0.5,63,best_practice,82,Storing database URL as an instance variable,,63,,[]
‚úÖ Best Practice: Lazy loading pattern for connection,"[26486, 227, 6705, 19939, 25, 406, 12582, 11046, 3912, 329, 4637]",0.5,67,best_practice,85,Lazy loading pattern for connection,,63,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Checking for attribute existence before initialization,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 11688, 6224, 878, 37588]",0.5,87,ml_signal,86,Checking for attribute existence before initialization,,67,    The behavior of CalendarStorage's methods and List's methods of the same name remain consistent,"[220, 220, 220, 383, 4069, 286, 26506, 31425, 338, 5050, 290, 7343, 338, 5050, 286, 262, 976, 1438, 3520, 6414]"
üß† ML Signal: Private method for encapsulating connection logic,"[8582, 100, 254, 10373, 26484, 25, 15348, 2446, 329, 32652, 8306, 4637, 9156]",0.5,102,ml_signal,92,Private method for encapsulating connection logic,,87,        self.kwargs = kwargs,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 46265, 22046, 796, 479, 86, 22046]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk if db_url is not validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 611, 20613, 62, 6371, 318, 407, 31031, 393, 5336, 36951]",0.5,102,sast_risk,93,Potential risk if db_url is not validated or sanitized,Medium,102,,[]
‚ö†Ô∏è SAST Risk (High): SQL Injection risk if query is not parameterized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 16363, 554, 29192, 2526, 611, 12405, 318, 407, 11507, 1143]",0.5,111,sast_risk,98,SQL Injection risk if query is not parameterized,High,102,        Raises,"[220, 220, 220, 220, 220, 220, 220, 7567, 2696]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if the class name has fewer than two capitalized segments.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 262, 1398, 1438, 468, 7380, 621, 734, 3139, 1143, 17894, 13]",1.0,119,sast_risk,52,Potential IndexError if the class name has fewer than two capitalized segments.,Low,111,class UserFeatureStorage(FeatureStorage):,"[4871, 11787, 38816, 31425, 7, 38816, 31425, 2599]"
‚úÖ Best Practice: Consider adding error handling for cases where the class name does not match the expected pattern.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 4049, 9041, 329, 2663, 810, 262, 1398, 1438, 857, 407, 2872, 262, 2938, 3912, 13]",0.5,119,best_practice,53,Consider adding error handling for cases where the class name does not match the expected pattern.,,119,,[]
üß† ML Signal: Usage of regular expressions to parse class names.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3218, 14700, 284, 21136, 1398, 3891, 13]",1.0,160,ml_signal,55,Usage of regular expressions to parse class names.,,119,"        '''x.__getitem__(slice(start: int, stop: int, step: int)) <==> x[start:stop:step]","[220, 220, 220, 220, 220, 220, 220, 705, 7061, 87, 13, 834, 1136, 9186, 834, 7, 48369, 7, 9688, 25, 493, 11, 2245, 25, 493, 11, 2239, 25, 493, 4008, 1279, 855, 29, 2124, 58, 9688, 25, 11338, 25, 9662, 60]"
‚úÖ Best Practice: Docstring provides a brief description of the class behavior,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 4506, 6764, 286, 262, 1398, 4069]",1.0,201,best_practice,55,Docstring provides a brief description of the class behavior,,160,"        '''x.__getitem__(slice(start: int, stop: int, step: int)) <==> x[start:stop:step]","[220, 220, 220, 220, 220, 220, 220, 705, 7061, 87, 13, 834, 1136, 9186, 834, 7, 48369, 7, 9688, 25, 493, 11, 2245, 25, 493, 11, 2239, 25, 493, 4008, 1279, 855, 29, 2124, 58, 9688, 25, 11338, 25, 9662, 60]"
üß† ML Signal: Use of type annotations for function parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2099, 37647, 329, 2163, 10007]",0.5,232,ml_signal,59,Use of type annotations for function parameters,,201,"            pd.Series(values, index=pd.RangeIndex(start, len(values))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 27996, 7, 27160, 11, 6376, 28, 30094, 13, 17257, 15732, 7, 9688, 11, 18896, 7, 27160, 4008]"
üß† ML Signal: Use of **kwargs indicates flexible function signature,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12429, 46265, 22046, 9217, 12846, 2163, 9877]",1.0,232,ml_signal,60,Use of **kwargs indicates flexible function signature,,232,,[]
‚úÖ Best Practice: Use of @property decorator for getter method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446]",0.5,251,best_practice,64,Use of @property decorator for getter method,,232,"            if isinstance(i, int):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 72, 11, 493, 2599]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,267,best_practice,63,Use of type hinting for return type improves code readability and maintainability,,251,        if data(storage) does not exist:,"[220, 220, 220, 220, 220, 220, 220, 611, 1366, 7, 35350, 8, 857, 407, 2152, 25]"
‚úÖ Best Practice: Docstring provides clear documentation of method behavior and exceptions,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 10314, 286, 2446, 4069, 290, 13269]",0.5,299,best_practice,71,Docstring provides clear documentation of method behavior and exceptions,,267,"            ""Subclass of FeatureStorage must implement `__getitem__(s: slice)` method""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 7004, 4871, 286, 27018, 31425, 1276, 3494, 4600, 834, 1136, 9186, 834, 7, 82, 25, 16416, 8, 63, 2446, 1]"
‚ö†Ô∏è SAST Risk (Low): NotImplementedError should be replaced with a proper implementation in subclasses,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1892, 3546, 1154, 12061, 12331, 815, 307, 6928, 351, 257, 1774, 7822, 287, 850, 37724]",0.5,299,sast_risk,73,NotImplementedError should be replaced with a proper implementation in subclasses,Low,299,,[]
‚úÖ Best Practice: Method signature includes type hint for return value,"[26486, 227, 6705, 19939, 25, 11789, 9877, 3407, 2099, 9254, 329, 1441, 1988]",1.0,331,best_practice,71,Method signature includes type hint for return value,,299,"            ""Subclass of FeatureStorage must implement `__getitem__(s: slice)` method""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 7004, 4871, 286, 27018, 31425, 1276, 3494, 4600, 834, 1136, 9186, 834, 7, 82, 25, 16416, 8, 63, 2446, 1]"
‚úÖ Best Practice: Raises NotImplementedError to enforce implementation in subclass,"[26486, 227, 6705, 19939, 25, 7567, 2696, 1892, 3546, 1154, 12061, 12331, 284, 4605, 7822, 287, 47611]",1.0,331,best_practice,73,Raises NotImplementedError to enforce implementation in subclass,,331,,[]
‚úÖ Best Practice: Method signature includes type hints for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 11789, 9877, 3407, 2099, 20269, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,331,best_practice,73,Method signature includes type hints for better readability and maintainability,,331,,[]
‚úÖ Best Practice: Raises NotImplementedError to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 7567, 2696, 1892, 3546, 1154, 12061, 12331, 284, 4605, 7822, 287, 850, 37724]",1.0,332,best_practice,75,Raises NotImplementedError to enforce implementation in subclasses,,331,"""""""",[37811]
‚úÖ Best Practice: Method docstring provides clear information about exceptions raised,"[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 3769, 1598, 1321, 546, 13269, 4376]",0.5,333,best_practice,75,Method docstring provides clear information about exceptions raised,,332,"""""""",[37811]
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444]",0.5,333,sast_risk,83,"Method is not implemented, which could lead to runtime errors if called",Low,333,,[]
‚úÖ Best Practice: Method signature includes type hints for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 11789, 9877, 3407, 2099, 20269, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,333,best_practice,83,Method signature includes type hints for better readability and maintainability,,333,,[]
"‚ö†Ô∏è SAST Risk (Low): Method raises NotImplementedError, which is a common pattern but should be handled properly in subclasses","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 543, 318, 257, 2219, 3912, 475, 815, 307, 12118, 6105, 287, 850, 37724]",0.5,337,sast_risk,85,"Method raises NotImplementedError, which is a common pattern but should be handled properly in subclasses",Low,333,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Raises NotImplementedError to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 7567, 2696, 1892, 3546, 1154, 12061, 12331, 284, 4605, 7822, 287, 850, 37724]",0.5,357,best_practice,86,Raises NotImplementedError to enforce implementation in subclasses,,337,    The behavior of CalendarStorage's methods and List's methods of the same name remain consistent,"[220, 220, 220, 383, 4069, 286, 26506, 31425, 338, 5050, 290, 7343, 338, 5050, 286, 262, 976, 1438, 3520, 6414]"
‚úÖ Best Practice: Raising NotImplementedError is a clear way to indicate that subclasses should implement this method.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 318, 257, 1598, 835, 284, 7603, 326, 850, 37724, 815, 3494, 428, 2446, 13]",0.5,377,best_practice,86,Raising NotImplementedError is a clear way to indicate that subclasses should implement this method.,,357,    The behavior of CalendarStorage's methods and List's methods of the same name remain consistent,"[220, 220, 220, 383, 4069, 286, 26506, 31425, 338, 5050, 290, 7343, 338, 5050, 286, 262, 976, 1438, 3520, 6414]"
‚úÖ Best Practice: Using @overload decorator indicates that this function is intended to have multiple type signatures.,"[26486, 227, 6705, 19939, 25, 8554, 2488, 2502, 2220, 11705, 1352, 9217, 326, 428, 2163, 318, 5292, 284, 423, 3294, 2099, 17239, 13]",0.5,400,best_practice,89,Using @overload decorator indicates that this function is intended to have multiple type signatures.,,377,"    def __init__(self, freq: str, future: bool, **kwargs):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 2030, 80, 25, 965, 11, 2003, 25, 20512, 11, 12429, 46265, 22046, 2599]"
‚úÖ Best Practice: Use of type hinting for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,412,best_practice,91,Use of type hinting for function parameters and return type improves code readability and maintainability.,,400,        self.future = future,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 37443, 796, 2003]"
‚úÖ Best Practice: Type hinting for parameters and return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 10007, 290, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,424,best_practice,91,Type hinting for parameters and return value improves code readability and maintainability,,412,        self.future = future,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 37443, 796, 2003]"
‚úÖ Best Practice: Method signature includes type hints for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 11789, 9877, 3407, 2099, 20269, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,424,best_practice,93,Method signature includes type hints for better readability and maintainability,,424,,[]
‚ö†Ô∏è SAST Risk (Low): Raising NotImplementedError can be a risk if not properly handled by subclasses,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 460, 307, 257, 2526, 611, 407, 6105, 12118, 416, 850, 37724]",0.5,429,sast_risk,94,Raising NotImplementedError can be a risk if not properly handled by subclasses,Low,424,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Clear error message guides subclass implementation,"[26486, 227, 6705, 19939, 25, 11459, 4049, 3275, 17555, 47611, 7822]",0.5,438,best_practice,98,Clear error message guides subclass implementation,,429,        Raises,"[220, 220, 220, 220, 220, 220, 220, 7567, 2696]"
‚úÖ Best Practice: Use of @overload for function signature overloading improves code clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 2502, 2220, 329, 2163, 9877, 625, 25138, 19575, 2438, 16287]",0.5,446,best_practice,99,Use of @overload for function signature overloading improves code clarity,,438,        ------,"[220, 220, 220, 220, 220, 220, 220, 40103]"
‚úÖ Best Practice: Include a docstring to describe the method's behavior.,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4069, 13]",0.5,454,best_practice,99,Include a docstring to describe the method's behavior.,,446,        ------,"[220, 220, 220, 220, 220, 220, 220, 40103]"
‚úÖ Best Practice: Use of @overload decorator for type hinting in function overloading.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 2502, 2220, 11705, 1352, 329, 2099, 9254, 278, 287, 2163, 625, 25138, 13]",0.5,462,best_practice,102,Use of @overload decorator for type hinting in function overloading.,,454,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Include a docstring to describe the method's functionality,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 11244]",1.0,486,best_practice,101,Include a docstring to describe the method's functionality,,462,"            If the data(storage) does not exist, raise ValueError","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1002, 262, 1366, 7, 35350, 8, 857, 407, 2152, 11, 5298, 11052, 12331]"
‚úÖ Best Practice: Provide a clear and descriptive docstring for the method,"[26486, 227, 6705, 19939, 25, 44290, 257, 1598, 290, 35644, 2205, 8841, 329, 262, 2446]",0.5,512,best_practice,103,Provide a clear and descriptive docstring for the method,,486,"        raise NotImplementedError(""Subclass of CalendarStorage must implement `data` method"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7203, 7004, 4871, 286, 26506, 31425, 1276, 3494, 4600, 7890, 63, 2446, 4943]"
‚úÖ Best Practice: Raising NotImplementedError in abstract methods is a good practice to enforce implementation in subclasses.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 287, 12531, 5050, 318, 257, 922, 3357, 284, 4605, 7822, 287, 850, 37724, 13]",0.5,512,best_practice,110,Raising NotImplementedError in abstract methods is a good practice to enforce implementation in subclasses.,,512,,[]
‚úÖ Best Practice: Using @overload decorator indicates the intention to provide multiple type signatures for a function.,"[26486, 227, 6705, 19939, 25, 8554, 2488, 2502, 2220, 11705, 1352, 9217, 262, 6778, 284, 2148, 3294, 2099, 17239, 329, 257, 2163, 13]",0.5,520,best_practice,114,Using @overload decorator indicates the intention to provide multiple type signatures for a function.,,512,        ------,"[220, 220, 220, 220, 220, 220, 220, 40103]"
‚úÖ Best Practice: Type hinting for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,528,best_practice,114,Type hinting for function parameters and return type improves code readability and maintainability.,,520,        ------,"[220, 220, 220, 220, 220, 220, 220, 40103]"
"‚úÖ Best Practice: Using @overload decorator indicates function overloading, which improves code clarity and type checking.","[26486, 227, 6705, 19939, 25, 8554, 2488, 2502, 2220, 11705, 1352, 9217, 2163, 625, 25138, 11, 543, 19575, 2438, 16287, 290, 2099, 10627, 13]",1.0,536,best_practice,117,"Using @overload decorator indicates function overloading, which improves code clarity and type checking.",,528,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Include a docstring to describe the method's behavior,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4069]",0.5,562,best_practice,118,Include a docstring to describe the method's behavior,,536,"        raise NotImplementedError(""Subclass of CalendarStorage must implement `index` method"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7203, 7004, 4871, 286, 26506, 31425, 1276, 3494, 4600, 9630, 63, 2446, 4943]"
‚úÖ Best Practice: Type hinting for the return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,562,best_practice,119,Type hinting for the return value improves code readability and maintainability,,562,,[]
‚úÖ Best Practice: NotImplementedError is used to indicate that the method should be implemented by subclasses,"[26486, 227, 6705, 19939, 25, 1892, 3546, 1154, 12061, 12331, 318, 973, 284, 7603, 326, 262, 2446, 815, 307, 9177, 416, 850, 37724]",1.0,568,best_practice,126,NotImplementedError is used to indicate that the method should be implemented by subclasses,,562,    @overload,"[220, 220, 220, 2488, 2502, 2220]"
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,568,best_practice,129,Type hinting improves code readability and maintainability,,568,,[]
‚úÖ Best Practice: NotImplementedError is appropriate for abstract methods,"[26486, 227, 6705, 19939, 25, 1892, 3546, 1154, 12061, 12331, 318, 5035, 329, 12531, 5050]",0.5,576,best_practice,137,NotImplementedError is appropriate for abstract methods,,568,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of type annotations for function parameters improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 37647, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,582,best_practice,139,Use of type annotations for function parameters improves code readability and maintainability.,,576,    @overload,"[220, 220, 220, 2488, 2502, 2220]"
"üß† ML Signal: Use of **kwargs indicates a flexible function signature, which can be a pattern for dynamic parameter handling.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12429, 46265, 22046, 9217, 257, 12846, 2163, 9877, 11, 543, 460, 307, 257, 3912, 329, 8925, 11507, 9041, 13]",0.5,608,ml_signal,141,"Use of **kwargs indicates a flexible function signature, which can be a pattern for dynamic parameter handling.",,582,"        """"""x.__delitem__(i) <==> del x[i]""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 87, 13, 834, 12381, 9186, 834, 7, 72, 8, 1279, 855, 29, 1619, 2124, 58, 72, 60, 37811]"
‚úÖ Best Practice: Type hinting improves code readability and helps with static analysis,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5419, 351, 9037, 3781]",0.5,614,best_practice,143,Type hinting improves code readability and helps with static analysis,,608,    @overload,"[220, 220, 220, 2488, 2502, 2220]"
‚úÖ Best Practice: Using NotImplementedError clearly indicates that this method should be overridden,"[26486, 227, 6705, 19939, 25, 8554, 1892, 3546, 1154, 12061, 12331, 4084, 9217, 326, 428, 2446, 815, 307, 23170, 4651]",0.5,623,best_practice,151,Using NotImplementedError clearly indicates that this method should be overridden,,614,        ValueError,"[220, 220, 220, 220, 220, 220, 220, 11052, 12331]"
"‚úÖ Best Practice: Method should be implemented in subclass, raising NotImplementedError is a clear way to enforce this.","[26486, 227, 6705, 19939, 25, 11789, 815, 307, 9177, 287, 47611, 11, 8620, 1892, 3546, 1154, 12061, 12331, 318, 257, 1598, 835, 284, 4605, 428, 13]",0.5,632,best_practice,151,"Method should be implemented in subclass, raising NotImplementedError is a clear way to enforce this.",,623,        ValueError,"[220, 220, 220, 220, 220, 220, 220, 11052, 12331]"
‚úÖ Best Practice: Providing a descriptive error message helps with debugging and understanding the intended use.,"[26486, 227, 6705, 19939, 25, 7518, 2530, 257, 35644, 4049, 3275, 5419, 351, 28769, 290, 4547, 262, 5292, 779, 13]",0.5,640,best_practice,153,Providing a descriptive error message helps with debugging and understanding the intended use.,,632,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 8748, 13]",1.0,654,best_practice,154,Docstring provides a clear explanation of the method's purpose and usage.,,640,        raise NotImplementedError(,"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7]"
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if not overridden.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 23170, 4651, 13]",1.0,660,sast_risk,162,"Method is not implemented, which could lead to runtime errors if not overridden.",Low,654,    @overload,"[220, 220, 220, 2488, 2502, 2220]"
‚úÖ Best Practice: Method docstring provides a clear description of the method's purpose,"[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 338, 4007]",0.5,666,best_practice,162,Method docstring provides a clear description of the method's purpose,,660,    @overload,"[220, 220, 220, 2488, 2502, 2220]"
"‚ö†Ô∏è SAST Risk (Low): NotImplementedError indicates that this method must be overridden in subclasses, which could lead to runtime errors if not properly implemented","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1892, 3546, 1154, 12061, 12331, 9217, 326, 428, 2446, 1276, 307, 23170, 4651, 287, 850, 37724, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 6105, 9177]",0.5,666,sast_risk,165,"NotImplementedError indicates that this method must be overridden in subclasses, which could lead to runtime errors if not properly implemented",Low,666,,[]
‚úÖ Best Practice: Raising NotImplementedError in abstract methods is a good practice to enforce implementation in subclasses.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 287, 12531, 5050, 318, 257, 922, 3357, 284, 4605, 7822, 287, 850, 37724, 13]",0.5,690,best_practice,172,Raising NotImplementedError in abstract methods is a good practice to enforce implementation in subclasses.,,666,"            If the data(storage) does not exist, raise ValueError","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1002, 262, 1366, 7, 35350, 8, 857, 407, 2152, 11, 5298, 11052, 12331]"
‚úÖ Best Practice: Method docstring provides a clear explanation of the method's purpose,"[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007]",1.0,690,best_practice,173,Method docstring provides a clear explanation of the method's purpose,,690,,[]
‚úÖ Best Practice: Type hints for parameters and return value improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 20269, 329, 10007, 290, 1441, 1988, 2987, 2438, 1100, 1799, 290, 5529, 1799]",0.5,704,best_practice,175,Type hints for parameters and return value improve code readability and maintainability,,690,        raise NotImplementedError(,"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7]"
‚ö†Ô∏è SAST Risk (Low): Raising NotImplementedError without implementation can lead to runtime errors if not properly subclassed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 1231, 7822, 460, 1085, 284, 19124, 8563, 611, 407, 6105, 47611, 276]",0.5,712,sast_risk,177,Raising NotImplementedError without implementation can lead to runtime errors if not properly subclassed,Low,704,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and behavior.,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 4069, 13]",1.0,720,best_practice,177,Include a docstring to describe the method's purpose and behavior.,,712,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use NotImplementedError to indicate that a method should be implemented by subclasses.,"[26486, 227, 6705, 19939, 25, 5765, 1892, 3546, 1154, 12061, 12331, 284, 7603, 326, 257, 2446, 815, 307, 9177, 416, 850, 37724, 13]",0.5,729,best_practice,184,Use NotImplementedError to indicate that a method should be implemented by subclasses.,,720,        ValueError,"[220, 220, 220, 220, 220, 220, 220, 11052, 12331]"
üß† ML Signal: Use of constructor to initialize object attributes,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 23772, 284, 41216, 2134, 12608]",0.5,729,ml_signal,186,Use of constructor to initialize object attributes,,729,,[]
üß† ML Signal: Assignment of method parameter to instance variable,"[8582, 100, 254, 10373, 26484, 25, 50144, 286, 2446, 11507, 284, 4554, 7885]",0.5,758,ml_signal,188,Assignment of method parameter to instance variable,,729,"        raise NotImplementedError(""Subclass of CalendarStorage must implement `__len__`  method"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7203, 7004, 4871, 286, 26506, 31425, 1276, 3494, 4600, 834, 11925, 834, 63, 220, 2446, 4943]"
üß† ML Signal: Assignment of method parameter to instance variable,"[8582, 100, 254, 10373, 26484, 25, 50144, 286, 2446, 11507, 284, 4554, 7885]",0.5,758,ml_signal,189,Assignment of method parameter to instance variable,,758,,[]
üß† ML Signal: Use of **kwargs to handle additional parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12429, 46265, 22046, 284, 5412, 3224, 10007]",0.5,781,ml_signal,192,Use of **kwargs to handle additional parameters,,758,"    def __init__(self, market: str, freq: str, **kwargs):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 1910, 25, 965, 11, 2030, 80, 25, 965, 11, 12429, 46265, 22046, 2599]"
‚úÖ Best Practice: Use of @property decorator for getter method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446]",0.5,786,best_practice,197,Use of @property decorator for getter method,,781,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and behavior,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 4069]",1.0,809,best_practice,192,Include a docstring to describe the method's purpose and behavior,,786,"    def __init__(self, market: str, freq: str, **kwargs):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 1910, 25, 965, 11, 2030, 80, 25, 965, 11, 12429, 46265, 22046, 2599]"
‚ö†Ô∏è SAST Risk (Low): Using NotImplementedError without implementation can lead to runtime errors if not properly subclassed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1892, 3546, 1154, 12061, 12331, 1231, 7822, 460, 1085, 284, 19124, 8563, 611, 407, 6105, 47611, 276]",0.5,814,sast_risk,197,Using NotImplementedError without implementation can lead to runtime errors if not properly subclassed,Low,809,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Include type hints for better code readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799]",1.0,814,best_practice,200,Include type hints for better code readability and maintainability,,814,,[]
"‚ö†Ô∏è SAST Risk (Low): Method not implemented, could lead to runtime errors if not overridden","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 407, 9177, 11, 714, 1085, 284, 19124, 8563, 611, 407, 23170, 4651]",1.0,822,sast_risk,205,"Method not implemented, could lead to runtime errors if not overridden",Low,814,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Use @property decorator for getter methods to provide a cleaner interface,"[26486, 227, 6705, 19939, 25, 5765, 2488, 26745, 11705, 1352, 329, 651, 353, 5050, 284, 2148, 257, 21723, 7071]",0.5,833,best_practice,208,Use @property decorator for getter methods to provide a cleaner interface,,822,    def clear(self) -> None:,"[220, 220, 220, 825, 1598, 7, 944, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,844,best_practice,208,Use of type hinting for return type improves code readability and maintainability,,833,    def clear(self) -> None:,"[220, 220, 220, 825, 1598, 7, 944, 8, 4613, 6045, 25]"
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if not properly overridden","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 6105, 23170, 4651]",1.0,886,sast_risk,216,"Method is not implemented, which could lead to runtime errors if not properly overridden",Low,844,"            If E present and has a .keys() method, does:     for k in E: D[k] = E[k]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1002, 412, 1944, 290, 468, 257, 764, 13083, 3419, 2446, 11, 857, 25, 220, 220, 220, 220, 329, 479, 287, 412, 25, 360, 58, 74, 60, 796, 412, 58, 74, 60]"
‚úÖ Best Practice: Method signature includes return type annotation for clarity,"[26486, 227, 6705, 19939, 25, 11789, 9877, 3407, 1441, 2099, 23025, 329, 16287]",0.5,928,best_practice,216,Method signature includes return type annotation for clarity,,886,"            If E present and has a .keys() method, does:     for k in E: D[k] = E[k]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1002, 412, 1944, 290, 468, 257, 764, 13083, 3419, 2446, 11, 857, 25, 220, 220, 220, 220, 329, 479, 287, 412, 25, 360, 58, 74, 60, 796, 412, 58, 74, 60]"
‚úÖ Best Practice: Raises NotImplementedError to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 7567, 2696, 1892, 3546, 1154, 12061, 12331, 284, 4605, 7822, 287, 850, 37724]",1.0,970,best_practice,218,Raises NotImplementedError to enforce implementation in subclasses,,928,"            If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1002, 412, 1944, 290, 16523, 764, 13083, 3419, 2446, 11, 857, 25, 220, 220, 220, 220, 329, 357, 74, 11, 410, 8, 287, 412, 25, 360, 58, 74, 60, 796, 410]"
‚úÖ Best Practice: Use of type hints for function parameters improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,970,best_practice,219,Use of type hints for function parameters improves code readability and maintainability.,,970,,[]
"‚ö†Ô∏è SAST Risk (Low): Method raises NotImplementedError, indicating it's intended to be overridden, but could cause runtime errors if not handled.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 12739, 340, 338, 5292, 284, 307, 23170, 4651, 11, 475, 714, 2728, 19124, 8563, 611, 407, 12118, 13]",0.5,984,sast_risk,259,"Method raises NotImplementedError, indicating it's intended to be overridden, but could cause runtime errors if not handled.",Low,970,        self.freq = freq,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19503, 80, 796, 2030, 80]"
‚ö†Ô∏è SAST Risk (Medium): Potential for NoneType errors if start_index or end_index is None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 6045, 6030, 8563, 611, 923, 62, 9630, 393, 886, 62, 9630, 318, 6045]",1.0,984,sast_risk,301,Potential for NoneType errors if start_index or end_index is None,Medium,984,,[]
‚úÖ Best Practice: Use of default values for start_index and end_index,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 3815, 329, 923, 62, 9630, 290, 886, 62, 9630]",1.0,992,best_practice,303,Use of default values for start_index and end_index,,984,        ------,"[220, 220, 220, 220, 220, 220, 220, 40103]"
‚ö†Ô∏è SAST Risk (Low): Logging a warning instead of raising an exception might hide issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 257, 6509, 2427, 286, 8620, 281, 6631, 1244, 7808, 2428]",1.0,992,sast_risk,307,Logging a warning instead of raising an exception might hide issues,Low,992,,[]
‚ö†Ô∏è SAST Risk (Low): Logging a warning instead of raising an exception might hide issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 257, 6509, 2427, 286, 8620, 281, 6631, 1244, 7808, 2428]",1.0,1000,sast_risk,311,Logging a warning instead of raising an exception might hide issues,Low,992,        ---------,"[220, 220, 220, 220, 220, 220, 220, 45337]"
‚ö†Ô∏è SAST Risk (Low): Logging a warning instead of raising an exception might hide issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 257, 6509, 2427, 286, 8620, 281, 6631, 1244, 7808, 2428]",1.0,1023,sast_risk,315,Logging a warning instead of raising an exception might hide issues,Low,1000,                    3   4,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 513, 220, 220, 604]"
üß† ML Signal: Pattern of writing NaN values to fill gaps,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 3597, 11013, 45, 3815, 284, 6070, 17332]",0.5,1023,ml_signal,321,Pattern of writing NaN values to fill gaps,,1023,,[]
üß† ML Signal: Pattern of rewriting data from a specific index,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 49614, 1366, 422, 257, 2176, 6376]",0.5,1046,ml_signal,325,Pattern of rewriting data from a specific index,,1023,                    5   6,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 642, 220, 220, 718]"
üß† ML Signal: Pattern of writing NaN values to extend storage,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 3597, 11013, 45, 3815, 284, 9117, 6143]",0.5,1069,ml_signal,325,Pattern of writing NaN values to extend storage,,1046,                    5   6,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 642, 220, 220, 718]"
üß† ML Signal: Pattern of rewriting data up to a specific index,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 49614, 1366, 510, 284, 257, 2176, 6376]",0.5,1092,ml_signal,333,Pattern of rewriting data up to a specific index,,1069,                    4   5,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 604, 220, 220, 642]"
‚úÖ Best Practice: Docstring provides clear documentation of method purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 10314, 286, 2446, 4007, 290, 10007]",0.5,1115,best_practice,325,Docstring provides clear documentation of method purpose and parameters,,1092,                    5   6,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 642, 220, 220, 718]"
"üß† ML Signal: Method that modifies internal state, useful for tracking state changes","[8582, 100, 254, 10373, 26484, 25, 11789, 326, 953, 6945, 5387, 1181, 11, 4465, 329, 9646, 1181, 2458]",0.5,1138,ml_signal,334,"Method that modifies internal state, useful for tracking state changes",,1115,                    5   6,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 642, 220, 220, 718]"
"üß† ML Signal: Method call pattern, useful for understanding usage frequency and context","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 11, 4465, 329, 4547, 8748, 8373, 290, 4732]",0.5,1161,ml_signal,336,"Method call pattern, useful for understanding usage frequency and context",,1138,                    7   7,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 767, 220, 220, 767]"
‚úÖ Best Practice: Type hinting for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1184,best_practice,336,Type hinting for function parameters and return type improves code readability and maintainability.,,1161,                    7   7,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 767, 220, 220, 767]"
"‚úÖ Best Practice: Using @overload decorator indicates function overloading, which improves code clarity.","[26486, 227, 6705, 19939, 25, 8554, 2488, 2502, 2220, 11705, 1352, 9217, 2163, 625, 25138, 11, 543, 19575, 2438, 16287, 13]",0.5,1207,best_practice,343,"Using @overload decorator indicates function overloading, which improves code clarity.",,1184,                    3   1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 513, 220, 220, 352]"
‚úÖ Best Practice: Type hinting for parameters and return values improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 10007, 290, 1441, 3815, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1232,best_practice,344,Type hinting for parameters and return values improves code readability and maintainability.,,1207,                    4   np.nan,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 604, 220, 220, 45941, 13, 12647]"
üß† ML Signal: Custom implementation of __getitem__ indicates usage of custom data structures,"[8582, 100, 254, 10373, 26484, 25, 8562, 7822, 286, 11593, 1136, 9186, 834, 9217, 8748, 286, 2183, 1366, 8573]",0.5,1255,ml_signal,346,Custom implementation of __getitem__ indicates usage of custom data structures,,1232,                    6   6,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 718, 220, 220, 718]"
"‚ö†Ô∏è SAST Risk (Low): Method raises NotImplementedError, indicating it must be overridden, which could lead to runtime errors if not properly implemented","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 12739, 340, 1276, 307, 23170, 4651, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 6105, 9177]",1.0,1278,sast_risk,355,"Method raises NotImplementedError, indicating it must be overridden, which could lead to runtime errors if not properly implemented",Low,1255,"        """"""Rebase the start_index and end_index of the FeatureStorage.","[220, 220, 220, 220, 220, 220, 220, 37227, 28951, 589, 262, 923, 62, 9630, 290, 886, 62, 9630, 286, 262, 27018, 31425, 13]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and behavior,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 4069]",1.0,1286,best_practice,359,Include a docstring to describe the method's purpose and behavior,,1278,        Examples,"[220, 220, 220, 220, 220, 220, 220, 21066]"
‚úÖ Best Practice: Use NotImplementedError to indicate that a method should be implemented by subclasses,"[26486, 227, 6705, 19939, 25, 5765, 1892, 3546, 1154, 12061, 12331, 284, 7603, 326, 257, 2446, 815, 307, 9177, 416, 850, 37724]",0.5,1313,best_practice,365,Use NotImplementedError to indicate that a method should be implemented by subclasses,,1286,                        3   4,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 513, 220, 220, 604]"

[
  {
    "line": 13,
    "text": "from typing import Tuple",
    "annotation": "\u2705 Best Practice: Define __all__ to explicitly declare the public API of the module",
    "confidence": 1.0,
    "tokens": [
      6738,
      19720,
      1330,
      309,
      29291
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2896,
      500,
      11593,
      439,
      834,
      284,
      11777,
      13627,
      262,
      1171,
      7824,
      286,
      262,
      8265
    ],
    "label": "best_practice",
    "reason": "Define __all__ to explicitly declare the public API of the module"
  },
  {
    "line": 44,
    "text": "        common_infra : CommonInfrastructure, optional",
    "annotation": "\u2705 Best Practice: Use of a private method to encapsulate reset logic improves maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2219,
      62,
      10745,
      430,
      1058,
      8070,
      18943,
      6410,
      11,
      11902
    ],
    "start_token": 5,
    "end_token": 22,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2839,
      2446,
      284,
      32652,
      5039,
      13259,
      9156,
      19575,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a private method to encapsulate reset logic improves maintainability."
  },
  {
    "line": 45,
    "text": "            common infrastructure for backtesting, including trade_account, trade_exchange, .etc",
    "annotation": "\u2705 Best Practice: Storing the trade_exchange in an instance variable for later use.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2219,
      6884,
      329,
      736,
      33407,
      11,
      1390,
      3292,
      62,
      23317,
      11,
      3292,
      62,
      1069,
      3803,
      11,
      764,
      14784
    ],
    "start_token": 22,
    "end_token": 51,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      520,
      3255,
      262,
      3292,
      62,
      1069,
      3803,
      287,
      281,
      4554,
      7885,
      329,
      1568,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Storing the trade_exchange in an instance variable for later use."
  },
  {
    "line": 48,
    "text": "            exchange that provides market info, used to deal order and generate report",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the method's purpose and return value.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5163,
      326,
      3769,
      1910,
      7508,
      11,
      973,
      284,
      1730,
      1502,
      290,
      7716,
      989
    ],
    "start_token": 51,
    "end_token": 75,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      1441,
      1988,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the method's purpose and return value."
  },
  {
    "line": 50,
    "text": "            - If `trade_exchange` is None, self.trade_exchange will be set with common_infra",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Accessing dictionary keys without checking if they exist can lead to KeyError. Consider using a default value or handling the exception.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      1002,
      4600,
      25351,
      62,
      1069,
      3803,
      63,
      318,
      6045,
      11,
      2116,
      13,
      25351,
      62,
      1069,
      3803,
      481,
      307,
      900,
      351,
      2219,
      62,
      10745,
      430
    ],
    "start_token": 75,
    "end_token": 111,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8798,
      278,
      22155,
      8251,
      1231,
      10627,
      611,
      484,
      2152,
      460,
      1085,
      284,
      7383,
      12331,
      13,
      12642,
      1262,
      257,
      4277,
      1988,
      393,
      9041,
      262,
      6631,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Accessing dictionary keys without checking if they exist can lead to KeyError. Consider using a default value or handling the exception."
  },
  {
    "line": 51,
    "text": "            - It allows different trade_exchanges is used in different executions.",
    "annotation": "\u2705 Best Practice: Using @property decorator is a good practice for creating read-only attributes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      632,
      3578,
      1180,
      3292,
      62,
      1069,
      36653,
      318,
      973,
      287,
      1180,
      30632,
      13
    ],
    "start_token": 111,
    "end_token": 136,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2488,
      26745,
      11705,
      1352,
      318,
      257,
      922,
      3357,
      329,
      4441,
      1100,
      12,
      8807,
      12608,
      13
    ],
    "label": "best_practice",
    "reason": "Using @property decorator is a good practice for creating read-only attributes."
  },
  {
    "line": 51,
    "text": "            - It allows different trade_exchanges is used in different executions.",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a specific type, useful for type inference models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      632,
      3578,
      1180,
      3292,
      62,
      1069,
      36653,
      318,
      973,
      287,
      1180,
      30632,
      13
    ],
    "start_token": 136,
    "end_token": 161,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      2176,
      2099,
      11,
      4465,
      329,
      2099,
      32278,
      4981
    ],
    "label": "ml_signal",
    "reason": "Method returning a specific type, useful for type inference models"
  },
  {
    "line": 53,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a specific type of object",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 161,
    "end_token": 161,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      2176,
      2099,
      286,
      2134
    ],
    "label": "ml_signal",
    "reason": "Method returning a specific type of object"
  },
  {
    "line": 54,
    "text": "                - In daily execution, both daily exchange and minutely are usable, but the daily exchange is",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a nested attribute from a dictionary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      554,
      4445,
      9706,
      11,
      1111,
      4445,
      5163,
      290,
      5664,
      306,
      389,
      24284,
      11,
      475,
      262,
      4445,
      5163,
      318
    ],
    "start_token": 161,
    "end_token": 195,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      28376,
      11688,
      422,
      257,
      22155
    ],
    "label": "ml_signal",
    "reason": "Accessing a nested attribute from a dictionary"
  },
  {
    "line": 56,
    "text": "                - In minutely execution, the daily exchange is not usable, only the minutely exchange is recommended.",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      554,
      5664,
      306,
      9706,
      11,
      262,
      4445,
      5163,
      318,
      407,
      24284,
      11,
      691,
      262,
      5664,
      306,
      5163,
      318,
      7151,
      13
    ],
    "start_token": 195,
    "end_token": 231,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose"
  },
  {
    "line": 59,
    "text": "        self._reset(level_infra=level_infra, common_infra=common_infra, outer_trade_decision=outer_trade_decision)",
    "annotation": "\u2705 Best Practice: Use of getattr with a default value to avoid AttributeError",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      42503,
      7,
      5715,
      62,
      10745,
      430,
      28,
      5715,
      62,
      10745,
      430,
      11,
      2219,
      62,
      10745,
      430,
      28,
      11321,
      62,
      10745,
      430,
      11,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      28,
      39605,
      62,
      25351,
      62,
      12501,
      1166,
      8
    ],
    "start_token": 231,
    "end_token": 276,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      651,
      35226,
      351,
      257,
      4277,
      1988,
      284,
      3368,
      3460,
      4163,
      12331
    ],
    "label": "best_practice",
    "reason": "Use of getattr with a default value to avoid AttributeError"
  },
  {
    "line": 61,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if self.common_infra is not properly validated or sanitized",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 276,
    "end_token": 276,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      2116,
      13,
      11321,
      62,
      10745,
      430,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if self.common_infra is not properly validated or sanitized"
  },
  {
    "line": 61,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of getattr to access attributes dynamically",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 276,
    "end_token": 276,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      651,
      35226,
      284,
      1895,
      12608,
      32366
    ],
    "label": "ml_signal",
    "reason": "Use of getattr to access attributes dynamically"
  },
  {
    "line": 63,
    "text": "    def executor(self) -> BaseExecutor:",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary get method to access values with a default",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      3121,
      273,
      7,
      944,
      8,
      4613,
      7308,
      23002,
      38409,
      25
    ],
    "start_token": 276,
    "end_token": 290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      651,
      2446,
      284,
      1895,
      3815,
      351,
      257,
      4277
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary get method to access values with a default"
  },
  {
    "line": 60,
    "text": "        self._trade_exchange = trade_exchange",
    "annotation": "\u2705 Best Practice: Check if an attribute exists before accessing it to avoid AttributeError.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      25351,
      62,
      1069,
      3803,
      796,
      3292,
      62,
      1069,
      3803
    ],
    "start_token": 290,
    "end_token": 308,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      281,
      11688,
      7160,
      878,
      22534,
      340,
      284,
      3368,
      3460,
      4163,
      12331,
      13
    ],
    "label": "best_practice",
    "reason": "Check if an attribute exists before accessing it to avoid AttributeError."
  },
  {
    "line": 64,
    "text": "        return self.level_infra.get(\"executor\")",
    "annotation": "\ud83e\udde0 ML Signal: Usage of update pattern for existing attributes.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      5715,
      62,
      10745,
      430,
      13,
      1136,
      7203,
      18558,
      38409,
      4943
    ],
    "start_token": 308,
    "end_token": 328,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4296,
      3912,
      329,
      4683,
      12608,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of update pattern for existing attributes."
  },
  {
    "line": 65,
    "text": "",
    "annotation": "\u2705 Best Practice: Check for attribute existence before accessing it to avoid AttributeError.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 328,
    "end_token": 328,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      11688,
      6224,
      878,
      22534,
      340,
      284,
      3368,
      3460,
      4163,
      12331,
      13
    ],
    "label": "best_practice",
    "reason": "Check for attribute existence before accessing it to avoid AttributeError."
  },
  {
    "line": 66,
    "text": "    @property",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of initializing an attribute if it doesn't exist.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 328,
    "end_token": 333,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4238,
      2890,
      281,
      11688,
      611,
      340,
      1595,
      470,
      2152,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of initializing an attribute if it doesn't exist."
  },
  {
    "line": 69,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of updating an existing attribute.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 333,
    "end_token": 333,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      19698,
      281,
      4683,
      11688,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of updating an existing attribute."
  },
  {
    "line": 76,
    "text": "        \"\"\"get trade exchange in a prioritized order\"\"\"",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      1136,
      3292,
      5163,
      287,
      257,
      19086,
      1143,
      1502,
      37811
    ],
    "start_token": 333,
    "end_token": 350,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 85,
    "text": "    def reset_common_infra(self, common_infra: CommonInfrastructure) -> None:",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and usage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      13259,
      62,
      11321,
      62,
      10745,
      430,
      7,
      944,
      11,
      2219,
      62,
      10745,
      430,
      25,
      8070,
      18943,
      6410,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 350,
    "end_token": 375,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and usage."
  },
  {
    "line": 90,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining and delegation pattern, where a public method calls a private method.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 375,
    "end_token": 375,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      290,
      22635,
      3912,
      11,
      810,
      257,
      1171,
      2446,
      3848,
      257,
      2839,
      2446,
      13
    ],
    "label": "ml_signal",
    "reason": "Method chaining and delegation pattern, where a public method calls a private method."
  },
  {
    "line": 96,
    "text": "        **kwargs,",
    "annotation": "\u2705 Best Practice: Docstring provides a reference to documentation, aiding maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      46265,
      22046,
      11
    ],
    "start_token": 375,
    "end_token": 386,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      4941,
      284,
      10314,
      11,
      37221,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a reference to documentation, aiding maintainability."
  },
  {
    "line": 100,
    "text": "        - reset `common_infra`, used to reset `trade_account`, `trade_exchange`, .etc",
    "annotation": "\u2705 Best Practice: Checks for None before calling methods, preventing potential errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      13259,
      4600,
      11321,
      62,
      10745,
      430,
      47671,
      973,
      284,
      13259,
      4600,
      25351,
      62,
      23317,
      47671,
      4600,
      25351,
      62,
      1069,
      3803,
      47671,
      764,
      14784
    ],
    "start_token": 386,
    "end_token": 417,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47719,
      329,
      6045,
      878,
      4585,
      5050,
      11,
      12174,
      2785,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Checks for None before calling methods, preventing potential errors."
  },
  {
    "line": 103,
    "text": "        **NOTE**:",
    "annotation": "\u2705 Best Practice: Checks for None before calling methods, preventing potential errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12429,
      16580,
      1174,
      25
    ],
    "start_token": 417,
    "end_token": 428,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47719,
      329,
      6045,
      878,
      4585,
      5050,
      11,
      12174,
      2785,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Checks for None before calling methods, preventing potential errors."
  },
  {
    "line": 106,
    "text": "        called when initialization",
    "annotation": "\u2705 Best Practice: Checks for None before setting attributes, preventing potential errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1444,
      618,
      37588
    ],
    "start_token": 428,
    "end_token": 438,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47719,
      329,
      6045,
      878,
      4634,
      12608,
      11,
      12174,
      2785,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Checks for None before setting attributes, preventing potential errors."
  },
  {
    "line": 110,
    "text": "            common_infra=common_infra,",
    "annotation": "\u2705 Best Practice: Use of @abstractmethod indicates this method should be overridden in subclasses.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2219,
      62,
      10745,
      430,
      28,
      11321,
      62,
      10745,
      430,
      11
    ],
    "start_token": 438,
    "end_token": 459,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      397,
      8709,
      24396,
      9217,
      428,
      2446,
      815,
      307,
      23170,
      4651,
      287,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @abstractmethod indicates this method should be overridden in subclasses."
  },
  {
    "line": 106,
    "text": "        called when initialization",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1444,
      618,
      37588
    ],
    "start_token": 459,
    "end_token": 469,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 110,
    "text": "            common_infra=common_infra,",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2219,
      62,
      10745,
      430,
      28,
      11321,
      62,
      10745,
      430,
      11
    ],
    "start_token": 469,
    "end_token": 490,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and parameters."
  },
  {
    "line": 119,
    "text": "    ):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): The function raises NotImplementedError, indicating it's a placeholder. Ensure this is implemented before use.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      15179
    ],
    "start_token": 490,
    "end_token": 494,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      383,
      2163,
      12073,
      1892,
      3546,
      1154,
      12061,
      12331,
      11,
      12739,
      340,
      338,
      257,
      46076,
      13,
      48987,
      428,
      318,
      9177,
      878,
      779,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "The function raises NotImplementedError, indicating it's a placeholder. Ensure this is implemented before use."
  },
  {
    "line": 137,
    "text": "        \"\"\"Generate trade decision in each trading bar",
    "annotation": "\ud83e\udde0 ML Signal: Method uses parameters to determine behavior, useful for ML models to learn decision patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      8645,
      378,
      3292,
      2551,
      287,
      1123,
      7313,
      2318
    ],
    "start_token": 494,
    "end_token": 510,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3544,
      10007,
      284,
      5004,
      4069,
      11,
      4465,
      329,
      10373,
      4981,
      284,
      2193,
      2551,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Method uses parameters to determine behavior, useful for ML models to learn decision patterns."
  },
  {
    "line": 140,
    "text": "        ----------",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raises an exception if outer_trade_decision is None, which could be a potential point of failure.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 510,
    "end_token": 519,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      2696,
      281,
      6631,
      611,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      318,
      6045,
      11,
      543,
      714,
      307,
      257,
      2785,
      966,
      286,
      5287,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raises an exception if outer_trade_decision is None, which could be a potential point of failure."
  },
  {
    "line": 142,
    "text": "            the executed result for trade decision, by default None",
    "annotation": "\u2705 Best Practice: Using max and min to ensure the range is within limits is a good practice for data validation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      10945,
      1255,
      329,
      3292,
      2551,
      11,
      416,
      4277,
      6045
    ],
    "start_token": 519,
    "end_token": 540,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      3509,
      290,
      949,
      284,
      4155,
      262,
      2837,
      318,
      1626,
      7095,
      318,
      257,
      922,
      3357,
      329,
      1366,
      21201,
      13
    ],
    "label": "best_practice",
    "reason": "Using max and min to ensure the range is within limits is a good practice for data validation."
  },
  {
    "line": 151,
    "text": "        return data calendar's available decision range for `self` strategy",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1366,
      11845,
      338,
      1695,
      2551,
      2837,
      329,
      4600,
      944,
      63,
      4811
    ],
    "start_token": 540,
    "end_token": 559,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose and parameters"
  },
  {
    "line": 164,
    "text": "            - \"full\": return the available data index range of the strategy from `start_time` to `end_time`",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Function returns None, which may not be expected by callers expecting a BaseTradeDecision",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      366,
      12853,
      1298,
      1441,
      262,
      1695,
      1366,
      6376,
      2837,
      286,
      262,
      4811,
      422,
      4600,
      9688,
      62,
      2435,
      63,
      284,
      4600,
      437,
      62,
      2435,
      63
    ],
    "start_token": 559,
    "end_token": 595,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      15553,
      5860,
      6045,
      11,
      543,
      743,
      407,
      307,
      2938,
      416,
      869,
      364,
      12451,
      257,
      7308,
      35965,
      10707,
      1166
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Function returns None, which may not be expected by callers expecting a BaseTradeDecision"
  },
  {
    "line": 165,
    "text": "            - \"step\": return the available data index range of the strategy of current step",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      366,
      9662,
      1298,
      1441,
      262,
      1695,
      1366,
      6376,
      2837,
      286,
      262,
      4811,
      286,
      1459,
      2239
    ],
    "start_token": 595,
    "end_token": 622,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and parameters"
  },
  {
    "line": 177,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method signature and return type can be used to infer method behavior",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 622,
    "end_token": 622,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      290,
      1441,
      2099,
      460,
      307,
      973,
      284,
      13249,
      2446,
      4069
    ],
    "label": "ml_signal",
    "reason": "Method signature and return type can be used to infer method behavior"
  },
  {
    "line": 178,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of type hint for return value improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 622,
    "end_token": 626,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hint for return value improves code readability and maintainability."
  },
  {
    "line": 182,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hinting for function parameters and return type",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 626,
    "end_token": 626,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for function parameters and return type"
  },
  {
    "line": 190,
    "text": "",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 626,
    "end_token": 626,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose"
  },
  {
    "line": 200,
    "text": "            BaseTradeDecision:",
    "annotation": "\u2705 Best Practice: Use of type hints for parameters improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7308,
      35965,
      10707,
      1166,
      25
    ],
    "start_token": 626,
    "end_token": 642,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hints for parameters improves code readability and maintainability"
  },
  {
    "line": 207,
    "text": "        A method for updating the outer_trade_decision.",
    "annotation": "\u2705 Best Practice: Calling the superclass's __init__ method ensures proper initialization of inherited attributes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      317,
      2446,
      329,
      19698,
      262,
      12076,
      62,
      25351,
      62,
      12501,
      1166,
      13
    ],
    "start_token": 642,
    "end_token": 661,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      32677,
      262,
      2208,
      4871,
      338,
      11593,
      15003,
      834,
      2446,
      19047,
      1774,
      37588,
      286,
      19552,
      12608
    ],
    "label": "best_practice",
    "reason": "Calling the superclass's __init__ method ensures proper initialization of inherited attributes"
  },
  {
    "line": 209,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Storing a policy object indicates usage of machine learning models or strategies",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 661,
    "end_token": 661,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      257,
      2450,
      2134,
      9217,
      8748,
      286,
      4572,
      4673,
      4981,
      393,
      10064
    ],
    "label": "ml_signal",
    "reason": "Storing a policy object indicates usage of machine learning models or strategies"
  },
  {
    "line": 210,
    "text": "        Parameters",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 661,
    "end_token": 669,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398,
      4007
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class purpose"
  },
  {
    "line": 220,
    "text": "        # NOTE: normally, user should do something to the strategy due to the change of outer decision",
    "annotation": "\u2705 Best Practice: Docstring provides clear parameter descriptions and types",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      7685,
      11,
      2836,
      815,
      466,
      1223,
      284,
      262,
      4811,
      2233,
      284,
      262,
      1487,
      286,
      12076,
      2551
    ],
    "start_token": 669,
    "end_token": 695,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      11507,
      16969,
      290,
      3858
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear parameter descriptions and types"
  },
  {
    "line": 233,
    "text": "        Parameters",
    "annotation": "\u2705 Best Practice: Calls superclass constructor to ensure proper initialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 695,
    "end_token": 703,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27592,
      2208,
      4871,
      23772,
      284,
      4155,
      1774,
      37588
    ],
    "label": "best_practice",
    "reason": "Calls superclass constructor to ensure proper initialization"
  },
  {
    "line": 235,
    "text": "        execute_result :",
    "annotation": "\ud83e\udde0 ML Signal: Storing policy for later use in decision-making processes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12260,
      62,
      20274,
      1058
    ],
    "start_token": 703,
    "end_token": 714,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      2450,
      329,
      1568,
      779,
      287,
      2551,
      12,
      8601,
      7767
    ],
    "label": "ml_signal",
    "reason": "Storing policy for later use in decision-making processes"
  },
  {
    "line": 237,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Initializing state interpreter for environment state processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 714,
    "end_token": 722,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      2890,
      1181,
      28846,
      329,
      2858,
      1181,
      7587
    ],
    "label": "ml_signal",
    "reason": "Initializing state interpreter for environment state processing"
  },
  {
    "line": 239,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Initializing action interpreter for action processing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 722,
    "end_token": 722,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      2890,
      2223,
      28846,
      329,
      2223,
      7587
    ],
    "label": "ml_signal",
    "reason": "Initializing action interpreter for action processing"
  },
  {
    "line": 237,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Default mutable arguments should be avoided; use None and set inside the function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 722,
    "end_token": 730,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      4517,
      540,
      7159,
      815,
      307,
      13941,
      26,
      779,
      6045,
      290,
      900,
      2641,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Default mutable arguments should be avoided; use None and set inside the function"
  },
  {
    "line": 239,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a policy pattern to determine the next action",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 730,
    "end_token": 730,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2450,
      3912,
      284,
      5004,
      262,
      1306,
      2223
    ],
    "label": "ml_signal",
    "reason": "Usage of a policy pattern to determine the next action"
  },
  {
    "line": 240,
    "text": "class RLStrategy(BaseStrategy, metaclass=ABCMeta):",
    "annotation": "\ud83e\udde0 ML Signal: Interpreting actions to make trade decisions",
    "confidence": 0.5,
    "tokens": [
      4871,
      45715,
      13290,
      4338,
      7,
      14881,
      13290,
      4338,
      11,
      1138,
      330,
      31172,
      28,
      24694,
      48526,
      2599
    ],
    "start_token": 730,
    "end_token": 746,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4225,
      3866,
      889,
      4028,
      284,
      787,
      3292,
      5370
    ],
    "label": "ml_signal",
    "reason": "Interpreting actions to make trade decisions"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Grouping imports from the same module together improves readability.,"[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 422, 262, 976, 8265, 1978, 19575, 1100, 1799, 13]",1.0,16,best_practice,2,Grouping imports from the same module together improves readability.,,0,from qlib.contrib.data.handler import check_transform_proc,"[6738, 10662, 8019, 13, 3642, 822, 13, 7890, 13, 30281, 1330, 2198, 62, 35636, 62, 36942]"
"üß† ML Signal: Inheritance from a class, indicating a pattern of extending functionality","[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 257, 1398, 11, 12739, 257, 3912, 286, 16610, 11244]",0.5,16,ml_signal,3,"Inheritance from a class, indicating a pattern of extending functionality",,16,,[]
‚ö†Ô∏è SAST Risk (Low): Using mutable default arguments like lists can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 4517, 540, 4277, 7159, 588, 8341, 460, 1085, 284, 10059, 4069, 13]",1.0,29,sast_risk,15,Using mutable default arguments like lists can lead to unexpected behavior.,Low,16,"        drop_raw=True,","[220, 220, 220, 220, 220, 220, 220, 4268, 62, 1831, 28, 17821, 11]"
‚ö†Ô∏è SAST Risk (Low): Using mutable default arguments like lists can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 4517, 540, 4277, 7159, 588, 8341, 460, 1085, 284, 10059, 4069, 13]",1.0,65,sast_risk,17,Using mutable default arguments like lists can lead to unexpected behavior.,Low,29,"        infer_processors = check_transform_proc(infer_processors, fit_start_time, fit_end_time)","[220, 220, 220, 220, 220, 220, 220, 13249, 62, 14681, 669, 796, 2198, 62, 35636, 62, 36942, 7, 259, 2232, 62, 14681, 669, 11, 4197, 62, 9688, 62, 2435, 11, 4197, 62, 437, 62, 2435, 8]"
üß† ML Signal: Usage of a method to get feature configuration indicates a pattern for feature extraction.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 651, 3895, 8398, 9217, 257, 3912, 329, 3895, 22236, 13]",1.0,88,ml_signal,25,Usage of a method to get feature configuration indicates a pattern for feature extraction.,,65,"                ""freq"": ""1min"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 19503, 80, 1298, 366, 16, 1084, 1600]"
‚úÖ Best Practice: Explicitly calling the superclass's __init__ method ensures proper initialization.,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 13]",1.0,111,best_practice,25,Explicitly calling the superclass's __init__ method ensures proper initialization.,,88,"                ""freq"": ""1min"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 19503, 80, 1298, 366, 16, 1084, 1600]"
‚úÖ Best Practice: Initialize lists with descriptive names for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8341, 351, 35644, 3891, 329, 16287, 290, 5529, 1799]",0.5,130,best_practice,35,Initialize lists with descriptive names for clarity and maintainability,,111,"            drop_raw=drop_raw,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4268, 62, 1831, 28, 14781, 62, 1831, 11]"
üß† ML Signal: Use of string templates for dynamic SQL or query generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 24019, 329, 8925, 16363, 393, 12405, 5270]",0.5,142,ml_signal,38,Use of string templates for dynamic SQL or query generation,,130,    def get_feature_config(self):,"[220, 220, 220, 825, 651, 62, 30053, 62, 11250, 7, 944, 2599]"
üß† ML Signal: Use of string templates for dynamic SQL or query generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 24019, 329, 8925, 16363, 393, 12405, 5270]",0.5,152,ml_signal,40,Use of string templates for dynamic SQL or query generation,,142,        names = [],"[220, 220, 220, 220, 220, 220, 220, 3891, 796, 17635]"
üß† ML Signal: Use of string templates for dynamic SQL or query generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 24019, 329, 8925, 16363, 393, 12405, 5270]",0.5,179,ml_signal,42,Use of string templates for dynamic SQL or query generation,,152,"        template_if = ""If(IsNull({1}), {0}, {1})""","[220, 220, 220, 220, 220, 220, 220, 11055, 62, 361, 796, 366, 1532, 7, 3792, 35067, 15090, 16, 92, 828, 1391, 15, 5512, 1391, 16, 92, 16725]"
üß† ML Signal: Use of string templates for dynamic SQL or query generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 24019, 329, 8925, 16363, 393, 12405, 5270]",0.5,206,ml_signal,44,Use of string templates for dynamic SQL or query generation,,179,"        template_fillnan = ""BFillNan(FFillNan({0}))""","[220, 220, 220, 220, 220, 220, 220, 11055, 62, 20797, 12647, 796, 366, 29499, 359, 45, 272, 7, 5777, 359, 45, 272, 15090, 15, 92, 4008, 1]"
‚úÖ Best Practice: Use of default parameter values for function arguments,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 2163, 7159]",1.0,243,best_practice,43,Use of default parameter values for function arguments,,206,"        template_paused = ""Select(Or(IsNull($paused), Eq($paused, 0.0)), {0})""","[220, 220, 220, 220, 220, 220, 220, 11055, 62, 8957, 1484, 796, 366, 17563, 7, 5574, 7, 3792, 35067, 16763, 8957, 1484, 828, 412, 80, 16763, 8957, 1484, 11, 657, 13, 15, 36911, 1391, 15, 92, 16725]"
üß† ML Signal: Repeated function calls with similar parameters,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 2163, 3848, 351, 2092, 10007]",1.0,264,ml_signal,56,Repeated function calls with similar parameters,,243,                template_if.format(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 361, 13, 18982, 7]"
üß† ML Signal: Repeated function calls with similar parameters,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 2163, 3848, 351, 2092, 10007]",1.0,294,ml_signal,58,Repeated function calls with similar parameters,,264,"                    template_paused.format(price_field),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 8957, 1484, 13, 18982, 7, 20888, 62, 3245, 828]"
üß† ML Signal: Repeated function calls with similar parameters,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 2163, 3848, 351, 2092, 10007]",1.0,327,ml_signal,60,Repeated function calls with similar parameters,,294,"                template_fillnan.format(template_paused.format(""$close"")),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11055, 62, 20797, 12647, 13, 18982, 7, 28243, 62, 8957, 1484, 13, 18982, 7203, 3, 19836, 4943, 828]"
üß† ML Signal: Repeated function calls with similar parameters,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 2163, 3848, 351, 2092, 10007]",1.0,342,ml_signal,62,Repeated function calls with similar parameters,,327,            return feature_ops,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3895, 62, 2840]"
üß† ML Signal: Repeated function calls with similar parameters,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 2163, 3848, 351, 2092, 10007]",1.0,366,ml_signal,64,Repeated function calls with similar parameters,,342,"        fields += [get_normalized_price_feature(""$open"", 0)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 9654, 1600, 657, 15437]"
üß† ML Signal: Repeated list operations with similar values,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 1351, 4560, 351, 2092, 3815]",0.5,390,ml_signal,66,Repeated list operations with similar values,,366,"        fields += [get_normalized_price_feature(""$low"", 0)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 9319, 1600, 657, 15437]"
üß† ML Signal: Repeated function calls with similar parameters,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 2163, 3848, 351, 2092, 10007]",1.0,414,ml_signal,67,Repeated function calls with similar parameters,,390,"        fields += [get_normalized_price_feature(""$close"", 0)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 19836, 1600, 657, 15437]"
üß† ML Signal: Repeated function calls with similar parameters,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 2163, 3848, 351, 2092, 10007]",1.0,438,ml_signal,67,Repeated function calls with similar parameters,,414,"        fields += [get_normalized_price_feature(""$close"", 0)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 19836, 1600, 657, 15437]"
üß† ML Signal: Repeated function calls with similar parameters,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 2163, 3848, 351, 2092, 10007]",1.0,462,ml_signal,67,Repeated function calls with similar parameters,,438,"        fields += [get_normalized_price_feature(""$close"", 0)]","[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685, 1136, 62, 11265, 1143, 62, 20888, 62, 30053, 7203, 3, 19836, 1600, 657, 15437]"
üß† ML Signal: Repeated function calls with similar parameters,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 2163, 3848, 351, 2092, 10007]",1.0,462,ml_signal,77,Repeated function calls with similar parameters,,462,,[]
üß† ML Signal: Repeated function calls with similar parameters,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 2163, 3848, 351, 2092, 10007]",1.0,462,ml_signal,77,Repeated function calls with similar parameters,,462,,[]
üß† ML Signal: Repeated list operations with similar values,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 1351, 4560, 351, 2092, 3815]",0.5,472,ml_signal,78,Repeated list operations with similar values,,462,        fields += [,"[220, 220, 220, 220, 220, 220, 220, 7032, 15853, 685]"
üß† ML Signal: Repeated list operations with similar values,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 1351, 4560, 351, 2092, 3815]",0.5,514,ml_signal,90,Repeated list operations with similar values,,472,"            ""Cut(Ref({0}, 240)/Ref(DayLast(Mean({0}, 7200)), 240), 240, None)"".format(","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 26254, 7, 8134, 15090, 15, 5512, 14956, 20679, 8134, 7, 12393, 5956, 7, 5308, 272, 15090, 15, 5512, 767, 2167, 36911, 14956, 828, 14956, 11, 6045, 8, 1911, 18982, 7]"
üß† ML Signal: Repeated list operations with similar values,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 1351, 4560, 351, 2092, 3815]",0.5,522,ml_signal,105,Repeated list operations with similar values,,514,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
üß† ML Signal: Default parameter values can indicate common usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 15161, 11507, 3815, 460, 7603, 2219, 8748, 7572, 13]",1.0,534,ml_signal,97,Default parameter values can indicate common usage patterns.,,522,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779, 13]",1.0,546,best_practice,97,Use of default parameter values for flexibility and ease of use.,,534,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of method calls to set configuration indicates dynamic behavior.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2446, 3848, 284, 900, 8398, 9217, 8925, 4069, 13]",0.5,554,ml_signal,105,Use of method calls to set configuration indicates dynamic behavior.,,546,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
üß† ML Signal: Hardcoded frequency value can indicate typical usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 8373, 1988, 460, 7603, 7226, 8748, 7572, 13]",1.0,562,ml_signal,105,Hardcoded frequency value can indicate typical usage patterns.,,554,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
‚úÖ Best Practice: Use of super() to ensure proper initialization of the base class.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 4155, 1774, 37588, 286, 262, 2779, 1398, 13]",1.0,574,best_practice,111,Use of super() to ensure proper initialization of the base class.,,562,        data_loader = {,"[220, 220, 220, 220, 220, 220, 220, 1366, 62, 29356, 796, 1391]"
üß† ML Signal: Usage of list operations to accumulate field configurations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1351, 4560, 284, 29915, 2214, 25412]",1.0,582,ml_signal,118,Usage of list operations to accumulate field configurations,,574,        },"[220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Use of string formatting for dynamic field generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 33313, 329, 8925, 2214, 5270]",1.0,601,ml_signal,121,Use of string formatting for dynamic field generation,,582,"            start_time=start_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 2435, 28, 9688, 62, 2435, 11]"
üß† ML Signal: Tracking feature names alongside their configurations,"[8582, 100, 254, 10373, 26484, 25, 37169, 3895, 3891, 7848, 511, 25412]",1.0,620,ml_signal,122,Tracking feature names alongside their configurations,,601,"            end_time=end_time,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 28, 437, 62, 2435, 11]"
‚úÖ Best Practice: Return statement at the end of the function for clarity,"[26486, 227, 6705, 19939, 25, 8229, 2643, 379, 262, 886, 286, 262, 2163, 329, 16287]",0.5,643,best_practice,140,Return statement at the end of the function for clarity,,620,"            ""Cut({0}, 240, None)"".format(","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 26254, 15090, 15, 5512, 14956, 11, 6045, 8, 1911, 18982, 7]"

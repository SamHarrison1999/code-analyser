[
  {
    "line": 21,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Missing import statement for functools, which can lead to NameError.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      25639,
      1330,
      2643,
      329,
      1257,
      310,
      10141,
      11,
      543,
      460,
      1085,
      284,
      6530,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Missing import statement for functools, which can lead to NameError."
  },
  {
    "line": 21,
    "text": "",
    "annotation": "\u2705 Best Practice: Use functools.wraps to preserve metadata of the original function.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1257,
      310,
      10141,
      13,
      29988,
      862,
      284,
      12201,
      20150,
      286,
      262,
      2656,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Use functools.wraps to preserve metadata of the original function."
  },
  {
    "line": 25,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of inspect to dynamically analyze function arguments",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      10104,
      284,
      32366,
      16602,
      2163,
      7159
    ],
    "label": "ml_signal",
    "reason": "Use of inspect to dynamically analyze function arguments"
  },
  {
    "line": 27,
    "text": "# decorator to check the arguments",
    "annotation": "\ud83e\udde0 ML Signal: Use of set operations to manage and validate function arguments",
    "confidence": 1.0,
    "tokens": [
      2,
      11705,
      1352,
      284,
      2198,
      262,
      7159
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      900,
      4560,
      284,
      6687,
      290,
      26571,
      2163,
      7159
    ],
    "label": "ml_signal",
    "reason": "Use of set operations to manage and validate function arguments"
  },
  {
    "line": 32,
    "text": "        argspec = inspect.getfullargspec(function_to_decorate)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for raising exceptions based on user input",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1822,
      16684,
      796,
      10104,
      13,
      1136,
      12853,
      853,
      16684,
      7,
      8818,
      62,
      1462,
      62,
      12501,
      16262,
      8
    ],
    "start_token": 7,
    "end_token": 31,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      8620,
      13269,
      1912,
      319,
      2836,
      5128
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for raising exceptions based on user input"
  },
  {
    "line": 35,
    "text": "            valid_names.remove(\"self\")",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic function invocation with variable arguments",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4938,
      62,
      14933,
      13,
      28956,
      7203,
      944,
      4943
    ],
    "start_token": 31,
    "end_token": 50,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      2163,
      43219,
      351,
      7885,
      7159
    ],
    "label": "ml_signal",
    "reason": "Dynamic function invocation with variable arguments"
  },
  {
    "line": 34,
    "text": "        if \"self\" in valid_names:",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Using os.system with user input can lead to command injection vulnerabilities.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      366,
      944,
      1,
      287,
      4938,
      62,
      14933,
      25
    ],
    "start_token": 50,
    "end_token": 66,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      8554,
      28686,
      13,
      10057,
      351,
      2836,
      5128,
      460,
      1085,
      284,
      3141,
      16954,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Using os.system with user input can lead to command injection vulnerabilities."
  },
  {
    "line": 35,
    "text": "            valid_names.remove(\"self\")",
    "annotation": "\u2705 Best Practice: Consider using os.kill instead of os.system for sending signals to processes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4938,
      62,
      14933,
      13,
      28956,
      7203,
      944,
      4943
    ],
    "start_token": 66,
    "end_token": 85,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      28686,
      13,
      12728,
      2427,
      286,
      28686,
      13,
      10057,
      329,
      7216,
      10425,
      284,
      7767,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using os.kill instead of os.system for sending signals to processes."
  },
  {
    "line": 37,
    "text": "            if arg_name not in valid_names:",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Using os.system to kill a process is unsafe and can be replaced with a safer alternative.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1822,
      62,
      3672,
      407,
      287,
      4938,
      62,
      14933,
      25
    ],
    "start_token": 85,
    "end_token": 106,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      8554,
      28686,
      13,
      10057,
      284,
      1494,
      257,
      1429,
      318,
      21596,
      290,
      460,
      307,
      6928,
      351,
      257,
      14178,
      5559,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Using os.system to kill a process is unsafe and can be replaced with a safer alternative."
  },
  {
    "line": 40,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Custom signal handlers can indicate specific application behavior or resilience patterns.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 106,
    "end_token": 106,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      6737,
      32847,
      460,
      7603,
      2176,
      3586,
      4069,
      393,
      31307,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Custom signal handlers can indicate specific application behavior or resilience patterns."
  },
  {
    "line": 37,
    "text": "            if arg_name not in valid_names:",
    "annotation": "\u2705 Best Practice: Include type hints for the 'results' parameter for better code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1822,
      62,
      3672,
      407,
      287,
      4938,
      62,
      14933,
      25
    ],
    "start_token": 106,
    "end_token": 127,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      262,
      705,
      43420,
      6,
      11507,
      329,
      1365,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Include type hints for the 'results' parameter for better code readability and maintainability."
  },
  {
    "line": 40,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider using defaultdict for cleaner initialization of nested dictionaries.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 127,
    "end_token": 127,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      4277,
      11600,
      329,
      21723,
      37588,
      286,
      28376,
      48589,
      3166,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using defaultdict for cleaner initialization of nested dictionaries."
  },
  {
    "line": 44,
    "text": "# function to handle ctrl z and ctrl c",
    "annotation": "\u2705 Best Practice: Use a temporary variable to store results[fn][metric] to avoid repeated dictionary lookups.",
    "confidence": 1.0,
    "tokens": [
      2,
      2163,
      284,
      5412,
      269,
      14859,
      1976,
      290,
      269,
      14859,
      269
    ],
    "start_token": 127,
    "end_token": 138,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      8584,
      7885,
      284,
      3650,
      2482,
      58,
      22184,
      7131,
      4164,
      1173,
      60,
      284,
      3368,
      5100,
      22155,
      804,
      4739,
      13
    ],
    "label": "best_practice",
    "reason": "Use a temporary variable to store results[fn][metric] to avoid repeated dictionary lookups."
  },
  {
    "line": 45,
    "text": "def handler(signum, frame):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that results[fn][metric] is a list to avoid runtime errors.",
    "confidence": 1.0,
    "tokens": [
      4299,
      21360,
      7,
      12683,
      388,
      11,
      5739,
      2599
    ],
    "start_token": 138,
    "end_token": 146,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      2482,
      58,
      22184,
      7131,
      4164,
      1173,
      60,
      318,
      257,
      1351,
      284,
      3368,
      19124,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that results[fn][metric] is a list to avoid runtime errors."
  },
  {
    "line": 47,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that results[fn][metric] has more than one element before calling stdev to avoid runtime errors.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 146,
    "end_token": 146,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      2482,
      58,
      22184,
      7131,
      4164,
      1173,
      60,
      468,
      517,
      621,
      530,
      5002,
      878,
      4585,
      336,
      7959,
      284,
      3368,
      19124,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that results[fn][metric] has more than one element before calling stdev to avoid runtime errors."
  },
  {
    "line": 46,
    "text": "    os.system(\"kill -9 %d\" % os.getpid())",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): The use of `tempfile.mkdtemp()` can lead to security issues if the temporary directory is not properly managed or cleaned up.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      28686,
      13,
      10057,
      7203,
      12728,
      532,
      24,
      4064,
      67,
      1,
      4064,
      28686,
      13,
      1136,
      35317,
      28955
    ],
    "start_token": 146,
    "end_token": 165,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      383,
      779,
      286,
      4600,
      29510,
      7753,
      13,
      28015,
      67,
      29510,
      3419,
      63,
      460,
      1085,
      284,
      2324,
      2428,
      611,
      262,
      8584,
      8619,
      318,
      407,
      6105,
      5257,
      393,
      20750,
      510,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "The use of `tempfile.mkdtemp()` can lead to security issues if the temporary directory is not properly managed or cleaned up."
  },
  {
    "line": 48,
    "text": "",
    "annotation": "\u2705 Best Practice: Using `Path` for file paths improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 165,
    "end_token": 165,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      4600,
      15235,
      63,
      329,
      2393,
      13532,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using `Path` for file paths improves code readability and maintainability."
  },
  {
    "line": 50,
    "text": "",
    "annotation": "\u2705 Best Practice: Writing to `sys.stderr` is a good practice for logging error or status messages.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 165,
    "end_token": 165,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      22183,
      284,
      4600,
      17597,
      13,
      301,
      1082,
      81,
      63,
      318,
      257,
      922,
      3357,
      329,
      18931,
      4049,
      393,
      3722,
      6218,
      13
    ],
    "label": "best_practice",
    "reason": "Writing to `sys.stderr` is a good practice for logging error or status messages."
  },
  {
    "line": 52,
    "text": "# function to calculate the mean and std of a list in the results dictionary",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Using `execute` with unsanitized input can lead to command injection vulnerabilities.",
    "confidence": 1.0,
    "tokens": [
      2,
      2163,
      284,
      15284,
      262,
      1612,
      290,
      14367,
      286,
      257,
      1351,
      287,
      262,
      2482,
      22155
    ],
    "start_token": 165,
    "end_token": 180,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      8554,
      4600,
      41049,
      63,
      351,
      5576,
      272,
      36951,
      5128,
      460,
      1085,
      284,
      3141,
      16954,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Using `execute` with unsanitized input can lead to command injection vulnerabilities."
  },
  {
    "line": 54,
    "text": "    mean_std = dict()",
    "annotation": "\u2705 Best Practice: Using `Path` for file paths improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1612,
      62,
      19282,
      796,
      8633,
      3419
    ],
    "start_token": 180,
    "end_token": 189,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      4600,
      15235,
      63,
      329,
      2393,
      13532,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Using `Path` for file paths improves code readability and maintainability."
  },
  {
    "line": 56,
    "text": "        mean_std[fn] = dict()",
    "annotation": "\u2705 Best Practice: Writing to `sys.stderr` is a good practice for logging error or status messages.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1612,
      62,
      19282,
      58,
      22184,
      60,
      796,
      8633,
      3419
    ],
    "start_token": 189,
    "end_token": 205,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      22183,
      284,
      4600,
      17597,
      13,
      301,
      1082,
      81,
      63,
      318,
      257,
      922,
      3357,
      329,
      18931,
      4049,
      393,
      3722,
      6218,
      13
    ],
    "label": "best_practice",
    "reason": "Writing to `sys.stderr` is a good practice for logging error or status messages."
  },
  {
    "line": 58,
    "text": "            mean = statistics.mean(results[fn][metric]) if len(results[fn][metric]) > 1 else results[fn][metric][0]",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Accessing environment variables directly can lead to security issues if not handled properly.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1612,
      796,
      7869,
      13,
      32604,
      7,
      43420,
      58,
      22184,
      7131,
      4164,
      1173,
      12962,
      611,
      18896,
      7,
      43420,
      58,
      22184,
      7131,
      4164,
      1173,
      12962,
      1875,
      352,
      2073,
      2482,
      58,
      22184,
      7131,
      4164,
      1173,
      7131,
      15,
      60
    ],
    "start_token": 205,
    "end_token": 251,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8798,
      278,
      2858,
      9633,
      3264,
      460,
      1085,
      284,
      2324,
      2428,
      611,
      407,
      12118,
      6105,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Accessing environment variables directly can lead to security issues if not handled properly."
  },
  {
    "line": 60,
    "text": "            mean_std[fn][metric] = [mean, std]",
    "annotation": "\ud83e\udde0 ML Signal: Returning multiple related paths can indicate a pattern of environment setup or configuration.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1612,
      62,
      19282,
      58,
      22184,
      7131,
      4164,
      1173,
      60,
      796,
      685,
      32604,
      11,
      14367,
      60
    ],
    "start_token": 251,
    "end_token": 277,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      3294,
      3519,
      13532,
      460,
      7603,
      257,
      3912,
      286,
      2858,
      9058,
      393,
      8398,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning multiple related paths can indicate a pattern of environment setup or configuration."
  },
  {
    "line": 55,
    "text": "    for fn in results:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): The use of shell=True can lead to shell injection vulnerabilities if cmd is not properly sanitized.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      24714,
      287,
      2482,
      25
    ],
    "start_token": 277,
    "end_token": 285,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      383,
      779,
      286,
      7582,
      28,
      17821,
      460,
      1085,
      284,
      7582,
      16954,
      23805,
      611,
      23991,
      318,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "The use of shell=True can lead to shell injection vulnerabilities if cmd is not properly sanitized."
  },
  {
    "line": 56,
    "text": "        mean_std[fn] = dict()",
    "annotation": "\u2705 Best Practice: Consider using logging instead of print for better control over output levels and destinations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1612,
      62,
      19282,
      58,
      22184,
      60,
      796,
      8633,
      3419
    ],
    "start_token": 285,
    "end_token": 301,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072,
      2974,
      290,
      23982,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using logging instead of print for better control over output levels and destinations."
  },
  {
    "line": 58,
    "text": "            mean = statistics.mean(results[fn][metric]) if len(results[fn][metric]) > 1 else results[fn][metric][0]",
    "annotation": "\u2705 Best Practice: subprocess should be imported at the top of the file for clarity and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1612,
      796,
      7869,
      13,
      32604,
      7,
      43420,
      58,
      22184,
      7131,
      4164,
      1173,
      12962,
      611,
      18896,
      7,
      43420,
      58,
      22184,
      7131,
      4164,
      1173,
      12962,
      1875,
      352,
      2073,
      2482,
      58,
      22184,
      7131,
      4164,
      1173,
      7131,
      15,
      60
    ],
    "start_token": 301,
    "end_token": 347,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      850,
      14681,
      815,
      307,
      17392,
      379,
      262,
      1353,
      286,
      262,
      2393,
      329,
      16287,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "subprocess should be imported at the top of the file for clarity and maintainability."
  },
  {
    "line": 59,
    "text": "            std = statistics.stdev(results[fn][metric]) if len(results[fn][metric]) > 1 else 0",
    "annotation": "\u2705 Best Practice: sys should be imported at the top of the file for clarity and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14367,
      796,
      7869,
      13,
      301,
      7959,
      7,
      43420,
      58,
      22184,
      7131,
      4164,
      1173,
      12962,
      611,
      18896,
      7,
      43420,
      58,
      22184,
      7131,
      4164,
      1173,
      12962,
      1875,
      352,
      2073,
      657
    ],
    "start_token": 347,
    "end_token": 386,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25064,
      815,
      307,
      17392,
      379,
      262,
      1353,
      286,
      262,
      2393,
      329,
      16287,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "sys should be imported at the top of the file for clarity and maintainability."
  },
  {
    "line": 60,
    "text": "            mean_std[fn][metric] = [mean, std]",
    "annotation": "\u2705 Best Practice: time should be imported at the top of the file for clarity and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1612,
      62,
      19282,
      58,
      22184,
      7131,
      4164,
      1173,
      60,
      796,
      685,
      32604,
      11,
      14367,
      60
    ],
    "start_token": 386,
    "end_token": 412,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      640,
      815,
      307,
      17392,
      379,
      262,
      1353,
      286,
      262,
      2393,
      329,
      16287,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "time should be imported at the top of the file for clarity and maintainability."
  },
  {
    "line": 69,
    "text": "    sys.stderr.write(f\"Creating Virtual Environment with path: {env_path}...\\n\")",
    "annotation": "\ud83e\udde0 ML Signal: User interaction pattern with input can be used to train models on user behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      25064,
      13,
      301,
      1082,
      81,
      13,
      13564,
      7,
      69,
      1,
      32071,
      15595,
      9344,
      351,
      3108,
      25,
      1391,
      24330,
      62,
      6978,
      92,
      986,
      59,
      77,
      4943
    ],
    "start_token": 412,
    "end_token": 440,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11787,
      10375,
      3912,
      351,
      5128,
      460,
      307,
      973,
      284,
      4512,
      4981,
      319,
      2836,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "User interaction pattern with input can be used to train models on user behavior."
  },
  {
    "line": 73,
    "text": "    # get anaconda activate path",
    "annotation": "\ud83e\udde0 ML Signal: Exception handling pattern can be used to train models on error management.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      651,
      281,
      330,
      13533,
      15155,
      3108
    ],
    "start_token": 440,
    "end_token": 450,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35528,
      9041,
      3912,
      460,
      307,
      973,
      284,
      4512,
      4981,
      319,
      4049,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Exception handling pattern can be used to train models on error management."
  },
  {
    "line": 72,
    "text": "    sys.stderr.write(\"\\n\")",
    "annotation": "\u2705 Best Practice: Specify the expected types for function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      25064,
      13,
      301,
      1082,
      81,
      13,
      13564,
      7203,
      59,
      77,
      4943
    ],
    "start_token": 450,
    "end_token": 464,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18291,
      1958,
      262,
      2938,
      3858,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Specify the expected types for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 74,
    "text": "    conda_activate = Path(os.environ[\"CONDA_PREFIX\"]) / \"bin\" / \"activate\"  # TODO: FIX ME!",
    "annotation": "\u2705 Best Practice: Initialize variables at the start of the function for better readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1779,
      64,
      62,
      39022,
      796,
      10644,
      7,
      418,
      13,
      268,
      2268,
      14692,
      10943,
      5631,
      62,
      47,
      31688,
      10426,
      8973,
      8,
      1220,
      366,
      8800,
      1,
      1220,
      366,
      39022,
      1,
      220,
      1303,
      16926,
      46,
      25,
      44855,
      11948,
      0
    ],
    "start_token": 464,
    "end_token": 503,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      379,
      262,
      923,
      286,
      262,
      2163,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize variables at the start of the function for better readability."
  },
  {
    "line": 76,
    "text": "",
    "annotation": "\u2705 Best Practice: Check for string type before processing to ensure correct handling of input.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 503,
    "end_token": 503,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      4731,
      2099,
      878,
      7587,
      284,
      4155,
      3376,
      9041,
      286,
      5128,
      13
    ],
    "label": "best_practice",
    "reason": "Check for string type before processing to ensure correct handling of input."
  },
  {
    "line": 78,
    "text": "# function to execute the cmd",
    "annotation": "\ud83e\udde0 ML Signal: Splitting strings by a delimiter is a common pattern for processing CSV-like input.",
    "confidence": 0.5,
    "tokens": [
      2,
      2163,
      284,
      12260,
      262,
      23991
    ],
    "start_token": 503,
    "end_token": 509,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13341,
      2535,
      13042,
      416,
      257,
      46728,
      2676,
      318,
      257,
      2219,
      3912,
      329,
      7587,
      44189,
      12,
      2339,
      5128,
      13
    ],
    "label": "ml_signal",
    "reason": "Splitting strings by a delimiter is a common pattern for processing CSV-like input."
  },
  {
    "line": 80,
    "text": "    print(\"Running CMD:\", cmd)",
    "annotation": "\ud83e\udde0 ML Signal: Converting strings to lowercase is a common pattern for case-insensitive comparisons.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3601,
      7203,
      28768,
      327,
      12740,
      25,
      1600,
      23991,
      8
    ],
    "start_token": 509,
    "end_token": 521,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      13042,
      284,
      2793,
      7442,
      318,
      257,
      2219,
      3912,
      329,
      1339,
      12,
      1040,
      18464,
      17909,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting strings to lowercase is a common pattern for case-insensitive comparisons."
  },
  {
    "line": 82,
    "text": "        for line in p.stdout:",
    "annotation": "\u2705 Best Practice: Check for list type to ensure correct handling of input.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1627,
      287,
      279,
      13,
      19282,
      448,
      25
    ],
    "start_token": 521,
    "end_token": 536,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      1351,
      2099,
      284,
      4155,
      3376,
      9041,
      286,
      5128,
      13
    ],
    "label": "best_practice",
    "reason": "Check for list type to ensure correct handling of input."
  },
  {
    "line": 84,
    "text": "            if \"\\b\" in line:",
    "annotation": "\ud83e\udde0 ML Signal: Converting strings to lowercase is a common pattern for case-insensitive comparisons.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      37082,
      65,
      1,
      287,
      1627,
      25
    ],
    "start_token": 536,
    "end_token": 554,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      13042,
      284,
      2793,
      7442,
      318,
      257,
      2219,
      3912,
      329,
      1339,
      12,
      1040,
      18464,
      17909,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting strings to lowercase is a common pattern for case-insensitive comparisons."
  },
  {
    "line": 86,
    "text": "                time.sleep(0.1)",
    "annotation": "\u2705 Best Practice: Handle NoneType to provide a default behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      15,
      13,
      16,
      8
    ],
    "start_token": 554,
    "end_token": 577,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      33141,
      6045,
      6030,
      284,
      2148,
      257,
      4277,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Handle NoneType to provide a default behavior."
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of os.scandir without validation can lead to directory traversal vulnerabilities.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 577,
    "end_token": 577,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      28686,
      13,
      1416,
      392,
      343,
      1231,
      21201,
      460,
      1085,
      284,
      8619,
      33038,
      282,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of os.scandir without validation can lead to directory traversal vulnerabilities."
  },
  {
    "line": 91,
    "text": "            input(\"Press Enter to Continue\")",
    "annotation": "\u2705 Best Practice: Raise informative errors for unsupported input types.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5128,
      7203,
      13800,
      6062,
      284,
      10054,
      4943
    ],
    "start_token": 577,
    "end_token": 595,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35123,
      30304,
      8563,
      329,
      24222,
      5128,
      3858,
      13
    ],
    "label": "best_practice",
    "reason": "Raise informative errors for unsupported input types."
  },
  {
    "line": 93,
    "text": "            raise RuntimeError(f\"Error when executing command: {cmd}\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of os.scandir without validation can lead to directory traversal vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      43160,
      12331,
      7,
      69,
      1,
      12331,
      618,
      23710,
      3141,
      25,
      1391,
      28758,
      92,
      4943
    ],
    "start_token": 595,
    "end_token": 621,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      28686,
      13,
      1416,
      392,
      343,
      1231,
      21201,
      460,
      1085,
      284,
      8619,
      33038,
      282,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of os.scandir without validation can lead to directory traversal vulnerabilities."
  },
  {
    "line": 95,
    "text": "    else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of xor function without import statement can lead to NameError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 621,
    "end_token": 626,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      2124,
      273,
      2163,
      1231,
      1330,
      2643,
      460,
      1085,
      284,
      6530,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of xor function without import statement can lead to NameError."
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\u2705 Best Practice: Use Pathlib for path manipulations for better readability and cross-platform compatibility.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 626,
    "end_token": 626,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      10644,
      8019,
      329,
      3108,
      7704,
      5768,
      329,
      1365,
      1100,
      1799,
      290,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use Pathlib for path manipulations for better readability and cross-platform compatibility."
  },
  {
    "line": 100,
    "text": "def get_all_folders(models, exclude) -> dict:",
    "annotation": "\u2705 Best Practice: Use resolve() to get the absolute path for clarity.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      439,
      62,
      11379,
      364,
      7,
      27530,
      11,
      19607,
      8,
      4613,
      8633,
      25
    ],
    "start_token": 626,
    "end_token": 641,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      10568,
      3419,
      284,
      651,
      262,
      4112,
      3108,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Use resolve() to get the absolute path for clarity."
  },
  {
    "line": 89,
    "text": "    if p.returncode != 0:",
    "annotation": "\u2705 Best Practice: Consider using pathlib.Path for path manipulations for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      279,
      13,
      7783,
      8189,
      14512,
      657,
      25
    ],
    "start_token": 641,
    "end_token": 652,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      3108,
      8019,
      13,
      15235,
      329,
      3108,
      7704,
      5768,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider using pathlib.Path for path manipulations for better readability and maintainability"
  },
  {
    "line": 91,
    "text": "            input(\"Press Enter to Continue\")",
    "annotation": "\u2705 Best Practice: Use 'if universe:' instead of 'if universe != \"\":' for checking non-empty strings",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5128,
      7203,
      13800,
      6062,
      284,
      10054,
      4943
    ],
    "start_token": 652,
    "end_token": 670,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      361,
      6881,
      32105,
      2427,
      286,
      705,
      361,
      6881,
      14512,
      366,
      1298,
      6,
      329,
      10627,
      1729,
      12,
      28920,
      13042
    ],
    "label": "best_practice",
    "reason": "Use 'if universe:' instead of 'if universe != \"\":' for checking non-empty strings"
  },
  {
    "line": 94,
    "text": "        return p.stderr",
    "annotation": "\u2705 Best Practice: Consider using pathlib.Path for path manipulations for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      13,
      301,
      1082,
      81
    ],
    "start_token": 670,
    "end_token": 683,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      3108,
      8019,
      13,
      15235,
      329,
      3108,
      7704,
      5768,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider using pathlib.Path for path manipulations for better readability and maintainability"
  },
  {
    "line": 96,
    "text": "        return None",
    "annotation": "\u2705 Best Practice: Consider using pathlib.Path for path manipulations for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 683,
    "end_token": 692,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      3108,
      8019,
      13,
      15235,
      329,
      3108,
      7704,
      5768,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider using pathlib.Path for path manipulations for better readability and maintainability"
  },
  {
    "line": 97,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of glob to find files based on patterns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 692,
    "end_token": 692,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      15095,
      284,
      1064,
      3696,
      1912,
      319,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of glob to find files based on patterns"
  },
  {
    "line": 100,
    "text": "def get_all_folders(models, exclude) -> dict:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of glob to find files based on patterns",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      439,
      62,
      11379,
      364,
      7,
      27530,
      11,
      19607,
      8,
      4613,
      8633,
      25
    ],
    "start_token": 692,
    "end_token": 707,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      15095,
      284,
      1064,
      3696,
      1912,
      319,
      7572
    ],
    "label": "ml_signal",
    "reason": "Usage of glob to find files based on patterns"
  },
  {
    "line": 102,
    "text": "    if isinstance(models, str):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Returning None may lead to TypeErrors if not handled by the caller",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      27530,
      11,
      965,
      2599
    ],
    "start_token": 707,
    "end_token": 718,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42882,
      6045,
      743,
      1085,
      284,
      5994,
      9139,
      5965,
      611,
      407,
      12118,
      416,
      262,
      24955
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Returning None may lead to TypeErrors if not handled by the caller"
  },
  {
    "line": 106,
    "text": "        models = [m.lower() for m in models]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError if req_file is empty",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4981,
      796,
      685,
      76,
      13,
      21037,
      3419,
      329,
      285,
      287,
      4981,
      60
    ],
    "start_token": 718,
    "end_token": 737,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      611,
      43089,
      62,
      7753,
      318,
      6565
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError if req_file is empty"
  },
  {
    "line": 120,
    "text": "def get_all_files(folder_path, dataset, universe=\"\") -> (str, str):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if expected keys are missing in metrics",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      439,
      62,
      16624,
      7,
      43551,
      62,
      6978,
      11,
      27039,
      11,
      6881,
      2625,
      4943,
      4613,
      357,
      2536,
      11,
      965,
      2599
    ],
    "start_token": 737,
    "end_token": 759,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      2938,
      8251,
      389,
      4814,
      287,
      20731
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if expected keys are missing in metrics"
  },
  {
    "line": 124,
    "text": "    req_path = str(Path(f\"{folder_path}\") / f\"*.txt\")",
    "annotation": "\ud83e\udde0 ML Signal: Collecting specific metrics for analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      43089,
      62,
      6978,
      796,
      965,
      7,
      15235,
      7,
      69,
      1,
      90,
      43551,
      62,
      6978,
      92,
      4943,
      1220,
      277,
      1,
      24620,
      14116,
      4943
    ],
    "start_token": 759,
    "end_token": 784,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      2176,
      20731,
      329,
      3781
    ],
    "label": "ml_signal",
    "reason": "Collecting specific metrics for analysis"
  },
  {
    "line": 126,
    "text": "    req_file = glob.glob(req_path)",
    "annotation": "\ud83e\udde0 ML Signal: Collecting specific metrics for analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      43089,
      62,
      7753,
      796,
      15095,
      13,
      4743,
      672,
      7,
      42180,
      62,
      6978,
      8
    ],
    "start_token": 784,
    "end_token": 800,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      2176,
      20731,
      329,
      3781
    ],
    "label": "ml_signal",
    "reason": "Collecting specific metrics for analysis"
  },
  {
    "line": 128,
    "text": "        return None, None",
    "annotation": "\ud83e\udde0 ML Signal: Collecting specific metrics for analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045,
      11,
      6045
    ],
    "start_token": 800,
    "end_token": 811,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      2176,
      20731,
      329,
      3781
    ],
    "label": "ml_signal",
    "reason": "Collecting specific metrics for analysis"
  },
  {
    "line": 130,
    "text": "        return yaml_file[0], req_file[0]",
    "annotation": "\ud83e\udde0 ML Signal: Collecting specific metrics for analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      331,
      43695,
      62,
      7753,
      58,
      15,
      4357,
      43089,
      62,
      7753,
      58,
      15,
      60
    ],
    "start_token": 811,
    "end_token": 832,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      2176,
      20731,
      329,
      3781
    ],
    "label": "ml_signal",
    "reason": "Collecting specific metrics for analysis"
  },
  {
    "line": 132,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Collecting specific metrics for analysis",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 832,
    "end_token": 832,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      2176,
      20731,
      329,
      3781
    ],
    "label": "ml_signal",
    "reason": "Collecting specific metrics for analysis"
  },
  {
    "line": 134,
    "text": "def get_all_results(folders) -> dict:",
    "annotation": "\ud83e\udde0 ML Signal: Collecting specific metrics for analysis",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      439,
      62,
      43420,
      7,
      11379,
      364,
      8,
      4613,
      8633,
      25
    ],
    "start_token": 832,
    "end_token": 845,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      2176,
      20731,
      329,
      3781
    ],
    "label": "ml_signal",
    "reason": "Collecting specific metrics for analysis"
  },
  {
    "line": 136,
    "text": "    for fn in folders:",
    "annotation": "\ud83e\udde0 ML Signal: Collecting specific metrics for analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      24714,
      287,
      24512,
      25
    ],
    "start_token": 845,
    "end_token": 853,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      2176,
      20731,
      329,
      3781
    ],
    "label": "ml_signal",
    "reason": "Collecting specific metrics for analysis"
  },
  {
    "line": 133,
    "text": "# function to retrieve all the results",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names for readability",
    "confidence": 1.0,
    "tokens": [
      2,
      2163,
      284,
      19818,
      477,
      262,
      2482
    ],
    "start_token": 853,
    "end_token": 860,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names for readability"
  },
  {
    "line": 137,
    "text": "        try:",
    "annotation": "\u2705 Best Practice: Accessing dictionary values with keys for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 860,
    "end_token": 869,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8798,
      278,
      22155,
      3815,
      351,
      8251,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Accessing dictionary values with keys for clarity"
  },
  {
    "line": 145,
    "text": "        result[\"information_ratio_with_cost\"] = list()",
    "annotation": "\ud83e\udde0 ML Signal: Formatting numerical data for markdown table",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      14692,
      17018,
      62,
      10366,
      952,
      62,
      4480,
      62,
      15805,
      8973,
      796,
      1351,
      3419
    ],
    "start_token": 869,
    "end_token": 890,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18980,
      889,
      29052,
      1366,
      329,
      1317,
      2902,
      3084
    ],
    "label": "ml_signal",
    "reason": "Formatting numerical data for markdown table"
  },
  {
    "line": 147,
    "text": "        result[\"ic\"] = list()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of pprint without import statement",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      14692,
      291,
      8973,
      796,
      1351,
      3419
    ],
    "start_token": 890,
    "end_token": 904,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      279,
      4798,
      1231,
      1330,
      2643
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of pprint without import statement"
  },
  {
    "line": 149,
    "text": "        result[\"rank_ic\"] = list()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): File operation without exception handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      14692,
      43027,
      62,
      291,
      8973,
      796,
      1351,
      3419
    ],
    "start_token": 904,
    "end_token": 920,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      9220,
      4905,
      1231,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "File operation without exception handling"
  },
  {
    "line": 148,
    "text": "        result[\"icir\"] = list()",
    "annotation": "\u2705 Best Practice: Function name is descriptive and indicates its purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      14692,
      291,
      343,
      8973,
      796,
      1351,
      3419
    ],
    "start_token": 920,
    "end_token": 935,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      318,
      35644,
      290,
      9217,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Function name is descriptive and indicates its purpose"
  },
  {
    "line": 150,
    "text": "        result[\"rank_icir\"] = list()",
    "annotation": "\u2705 Best Practice: Using 'with' statement for file operations ensures proper resource management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      14692,
      43027,
      62,
      291,
      343,
      8973,
      796,
      1351,
      3419
    ],
    "start_token": 935,
    "end_token": 952,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      705,
      4480,
      6,
      2643,
      329,
      2393,
      4560,
      19047,
      1774,
      8271,
      4542
    ],
    "label": "best_practice",
    "reason": "Using 'with' statement for file operations ensures proper resource management"
  },
  {
    "line": 152,
    "text": "            if recorders[recorder_id].status == \"FINISHED\":",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): YAML loading can be risky if the content is not trusted",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1700,
      364,
      58,
      8344,
      2875,
      62,
      312,
      4083,
      13376,
      6624,
      366,
      20032,
      18422,
      1961,
      1298
    ],
    "start_token": 952,
    "end_token": 979,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      575,
      2390,
      43,
      11046,
      460,
      307,
      17564,
      611,
      262,
      2695,
      318,
      407,
      13467
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "YAML loading can be risky if the content is not trusted"
  },
  {
    "line": 155,
    "text": "                if \"1day.excess_return_with_cost.annualized_return\" not in metrics:",
    "annotation": "\u2705 Best Practice: Using try-except to handle potential KeyError",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      366,
      16,
      820,
      13,
      1069,
      919,
      62,
      7783,
      62,
      4480,
      62,
      15805,
      13,
      1236,
      723,
      1143,
      62,
      7783,
      1,
      407,
      287,
      20731,
      25
    ],
    "start_token": 979,
    "end_token": 1018,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1949,
      12,
      16341,
      284,
      5412,
      2785,
      7383,
      12331
    ],
    "label": "best_practice",
    "reason": "Using try-except to handle potential KeyError"
  },
  {
    "line": 159,
    "text": "                result[\"information_ratio_with_cost\"].append(metrics[\"1day.excess_return_with_cost.information_ratio\"])",
    "annotation": "\u2705 Best Practice: Returning original path if 'seed' key is not found",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      14692,
      17018,
      62,
      10366,
      952,
      62,
      4480,
      62,
      15805,
      1,
      4083,
      33295,
      7,
      4164,
      10466,
      14692,
      16,
      820,
      13,
      1069,
      919,
      62,
      7783,
      62,
      4480,
      62,
      15805,
      13,
      17018,
      62,
      10366,
      952,
      8973,
      8
    ],
    "start_token": 1018,
    "end_token": 1068,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      2656,
      3108,
      611,
      705,
      28826,
      6,
      1994,
      318,
      407,
      1043
    ],
    "label": "best_practice",
    "reason": "Returning original path if 'seed' key is not found"
  },
  {
    "line": 162,
    "text": "                result[\"icir\"].append(metrics[\"ICIR\"])",
    "annotation": "\u2705 Best Practice: Using os.path.join for cross-platform path construction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      14692,
      291,
      343,
      1,
      4083,
      33295,
      7,
      4164,
      10466,
      14692,
      2149,
      4663,
      8973,
      8
    ],
    "start_token": 1068,
    "end_token": 1098,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      28686,
      13,
      6978,
      13,
      22179,
      329,
      3272,
      12,
      24254,
      3108,
      5103
    ],
    "label": "best_practice",
    "reason": "Using os.path.join for cross-platform path construction"
  },
  {
    "line": 165,
    "text": "        results[fn] = result",
    "annotation": "\u2705 Best Practice: Using 'with' statement for file operations ensures proper resource management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2482,
      58,
      22184,
      60,
      796,
      1255
    ],
    "start_token": 1098,
    "end_token": 1111,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      705,
      4480,
      6,
      2643,
      329,
      2393,
      4560,
      19047,
      1774,
      8271,
      4542
    ],
    "label": "best_practice",
    "reason": "Using 'with' statement for file operations ensures proper resource management"
  },
  {
    "line": 164,
    "text": "                result[\"rank_icir\"].append(metrics[\"Rank ICIR\"])",
    "annotation": "\ud83e\udde0 ML Signal: Method initializes qlib with experiment management settings",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1255,
      14692,
      43027,
      62,
      291,
      343,
      1,
      4083,
      33295,
      7,
      4164,
      10466,
      14692,
      27520,
      12460,
      4663,
      8973,
      8
    ],
    "start_token": 1111,
    "end_token": 1144,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      4238,
      4340,
      10662,
      8019,
      351,
      6306,
      4542,
      6460
    ],
    "label": "ml_signal",
    "reason": "Method initializes qlib with experiment management settings"
  },
  {
    "line": 165,
    "text": "        results[fn] = result",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential path traversal if exp_folder_name is not validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2482,
      58,
      22184,
      60,
      796,
      1255
    ],
    "start_token": 1144,
    "end_token": 1157,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3108,
      33038,
      282,
      611,
      1033,
      62,
      43551,
      62,
      3672,
      318,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential path traversal if exp_folder_name is not validated"
  },
  {
    "line": 165,
    "text": "        results[fn] = result",
    "annotation": "\ud83e\udde0 ML Signal: qlib.init is used to set up experiment management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2482,
      58,
      22184,
      60,
      796,
      1255
    ],
    "start_token": 1157,
    "end_token": 1170,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10662,
      8019,
      13,
      15003,
      318,
      973,
      284,
      900,
      510,
      6306,
      4542
    ],
    "label": "ml_signal",
    "reason": "qlib.init is used to set up experiment management"
  },
  {
    "line": 165,
    "text": "        results[fn] = result",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of os.getcwd() without validation can lead to security risks if the current directory is not trusted",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2482,
      58,
      22184,
      60,
      796,
      1255
    ],
    "start_token": 1170,
    "end_token": 1183,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      28686,
      13,
      1136,
      66,
      16993,
      3419,
      1231,
      21201,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      262,
      1459,
      8619,
      318,
      407,
      13467
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of os.getcwd() without validation can lead to security risks if the current directory is not trusted"
  },
  {
    "line": 174,
    "text": "        ic = metrics[fn][\"ic\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Concatenating strings for file paths can lead to security issues if not properly handled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14158,
      796,
      20731,
      58,
      22184,
      7131,
      1,
      291,
      8973
    ],
    "start_token": 1183,
    "end_token": 1199,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1482,
      9246,
      268,
      803,
      13042,
      329,
      2393,
      13532,
      460,
      1085,
      284,
      2324,
      2428,
      611,
      407,
      6105,
      12118
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Concatenating strings for file paths can lead to security issues if not properly handled"
  },
  {
    "line": 176,
    "text": "        ric = metrics[fn][\"rank_ic\"]",
    "annotation": "\u2705 Best Practice: Decorator usage suggests enforcing argument constraints",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12410,
      796,
      20731,
      58,
      22184,
      7131,
      1,
      43027,
      62,
      291,
      8973
    ],
    "start_token": 1199,
    "end_token": 1217,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4280,
      273,
      1352,
      8748,
      5644,
      26587,
      4578,
      17778
    ],
    "label": "best_practice",
    "reason": "Decorator usage suggests enforcing argument constraints"
  },
  {
    "line": 188,
    "text": "# read yaml, remove seed kwargs of model, and then save file in the temp_dir",
    "annotation": "\u2705 Best Practice: Docstring provides detailed information about parameters and usage.",
    "confidence": 1.0,
    "tokens": [
      2,
      1100,
      331,
      43695,
      11,
      4781,
      9403,
      479,
      86,
      22046,
      286,
      2746,
      11,
      290,
      788,
      3613,
      2393,
      287,
      262,
      20218,
      62,
      15908
    ],
    "start_token": 1217,
    "end_token": 1239,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      6496,
      1321,
      546,
      10007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides detailed information about parameters and usage."
  },
  {
    "line": 233,
    "text": "        exp_folder_name: str = \"run_all_model_records\",",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of a library or framework.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1033,
      62,
      43551,
      62,
      3672,
      25,
      965,
      796,
      366,
      5143,
      62,
      439,
      62,
      19849,
      62,
      8344,
      3669,
      1600
    ],
    "start_token": 1239,
    "end_token": 1264,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      257,
      5888,
      393,
      9355,
      13
    ],
    "label": "ml_signal",
    "reason": "Initialization of a library or framework."
  },
  {
    "line": 235,
    "text": "        wait_when_err: bool = False,",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic retrieval of model folders based on input parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4043,
      62,
      12518,
      62,
      8056,
      25,
      20512,
      796,
      10352,
      11
    ],
    "start_token": 1264,
    "end_token": 1281,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      45069,
      286,
      2746,
      24512,
      1912,
      319,
      5128,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic retrieval of model folders based on input parameters."
  },
  {
    "line": 240,
    "text": "        for multiple times, and this will be fixed in the future development.",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic file retrieval based on dataset and universe.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      3294,
      1661,
      11,
      290,
      428,
      481,
      307,
      5969,
      287,
      262,
      2003,
      2478,
      13
    ],
    "start_token": 1281,
    "end_token": 1302,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      2393,
      45069,
      1912,
      319,
      27039,
      290,
      6881,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic file retrieval based on dataset and universe."
  },
  {
    "line": 246,
    "text": "        models : str or list",
    "annotation": "\ud83e\udde0 ML Signal: Environment setup for model execution.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4981,
      1058,
      965,
      393,
      1351
    ],
    "start_token": 1302,
    "end_token": 1314,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9344,
      9058,
      329,
      2746,
      9706,
      13
    ],
    "label": "ml_signal",
    "reason": "Environment setup for model execution."
  },
  {
    "line": 250,
    "text": "        dataset : str",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential command injection if `req_path` is not sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      27039,
      1058,
      965
    ],
    "start_token": 1314,
    "end_token": 1324,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3141,
      16954,
      611,
      4600,
      42180,
      62,
      6978,
      63,
      318,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential command injection if `req_path` is not sanitized."
  },
  {
    "line": 256,
    "text": "            the uri to install qlib with pip",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential command injection if `req_path` is not sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      262,
      2956,
      72,
      284,
      2721,
      10662,
      8019,
      351,
      7347
    ],
    "start_token": 1324,
    "end_token": 1344,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3141,
      16954,
      611,
      4600,
      42180,
      62,
      6978,
      63,
      318,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential command injection if `req_path` is not sanitized."
  },
  {
    "line": 263,
    "text": "            wait when errors raised when executing commands",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential command injection if `req_path` is not sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4043,
      618,
      8563,
      4376,
      618,
      23710,
      9729
    ],
    "start_token": 1344,
    "end_token": 1362,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3141,
      16954,
      611,
      4600,
      42180,
      62,
      6978,
      63,
      318,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential command injection if `req_path` is not sanitized."
  },
  {
    "line": 265,
    "text": "        Usage:",
    "annotation": "\ud83e\udde0 ML Signal: Generation of configuration files without seed for reproducibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      29566,
      25
    ],
    "start_token": 1362,
    "end_token": 1371,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16588,
      286,
      8398,
      3696,
      1231,
      9403,
      329,
      8186,
      66,
      2247,
      13
    ],
    "label": "ml_signal",
    "reason": "Generation of configuration files without seed for reproducibility."
  },
  {
    "line": 268,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential command injection if `env_path` is not sanitized.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1371,
    "end_token": 1371,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3141,
      16954,
      611,
      4600,
      24330,
      62,
      6978,
      63,
      318,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential command injection if `env_path` is not sanitized."
  },
  {
    "line": 273,
    "text": "            examples/benchmarks/LightGBM/workflow_config_lightgbm_Alpha158.yaml",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential command injection if `python_path` is not sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6096,
      14,
      26968,
      14306,
      14,
      15047,
      4579,
      44,
      14,
      1818,
      11125,
      62,
      11250,
      62,
      2971,
      70,
      20475,
      62,
      38077,
      21273,
      13,
      88,
      43695
    ],
    "start_token": 1371,
    "end_token": 1405,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3141,
      16954,
      611,
      4600,
      29412,
      62,
      6978,
      63,
      318,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential command injection if `python_path` is not sanitized."
  },
  {
    "line": 277,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential command injection if `python_path` is not sanitized.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1405,
    "end_token": 1405,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3141,
      16954,
      611,
      4600,
      29412,
      62,
      6978,
      63,
      318,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential command injection if `python_path` is not sanitized."
  },
  {
    "line": 280,
    "text": "            # Case 1 - run all models multiple times",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential command injection if `env_path` or `qlib_uri` is not sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      8913,
      352,
      532,
      1057,
      477,
      4981,
      3294,
      1661
    ],
    "start_token": 1405,
    "end_token": 1425,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3141,
      16954,
      611,
      4600,
      24330,
      62,
      6978,
      63,
      393,
      4600,
      80,
      8019,
      62,
      9900,
      63,
      318,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential command injection if `env_path` or `qlib_uri` is not sanitized."
  },
  {
    "line": 286,
    "text": "            # Case 3 - run specific models multiple times with specific dataset",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential command injection if `env_path` or `qlib_uri` is not sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      8913,
      513,
      532,
      1057,
      2176,
      4981,
      3294,
      1661,
      351,
      2176,
      27039
    ],
    "start_token": 1425,
    "end_token": 1448,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3141,
      16954,
      611,
      4600,
      24330,
      62,
      6978,
      63,
      393,
      4600,
      80,
      8019,
      62,
      9900,
      63,
      318,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential command injection if `env_path` or `qlib_uri` is not sanitized."
  },
  {
    "line": 294,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential command injection if `yaml_path`, `fn`, or `exp_folder_name` is not sanitized.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1448,
    "end_token": 1448,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3141,
      16954,
      611,
      4600,
      88,
      43695,
      62,
      6978,
      47671,
      4600,
      22184,
      47671,
      393,
      4600,
      11201,
      62,
      43551,
      62,
      3672,
      63,
      318,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential command injection if `yaml_path`, `fn`, or `exp_folder_name` is not sanitized."
  },
  {
    "line": 307,
    "text": "        errors = dict()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Deleting directories without confirmation can lead to data loss.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8563,
      796,
      8633,
      3419
    ],
    "start_token": 1448,
    "end_token": 1459,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42226,
      889,
      29196,
      1231,
      12641,
      460,
      1085,
      284,
      1366,
      2994,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Deleting directories without confirmation can lead to data loss."
  },
  {
    "line": 310,
    "text": "            # get all files",
    "annotation": "\ud83e\udde0 ML Signal: Collecting and displaying errors for analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      651,
      477,
      3696
    ],
    "start_token": 1459,
    "end_token": 1474,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      290,
      19407,
      8563,
      329,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Collecting and displaying errors for analysis."
  },
  {
    "line": 310,
    "text": "            # get all files",
    "annotation": "\ud83e\udde0 ML Signal: Collecting results after model execution.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      651,
      477,
      3696
    ],
    "start_token": 1474,
    "end_token": 1489,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9745,
      278,
      2482,
      706,
      2746,
      9706,
      13
    ],
    "label": "ml_signal",
    "reason": "Collecting results after model execution."
  },
  {
    "line": 297,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function to collect and process experiment results",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1489,
    "end_token": 1489,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      2824,
      290,
      1429,
      6306,
      2482
    ],
    "label": "ml_signal",
    "reason": "Function to collect and process experiment results"
  },
  {
    "line": 308,
    "text": "        # run all the model for iterations",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of overwriting files if not handled properly",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1057,
      477,
      262,
      2746,
      329,
      34820
    ],
    "start_token": 1489,
    "end_token": 1503,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      6993,
      799,
      278,
      3696,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of overwriting files if not handled properly"
  },
  {
    "line": 310,
    "text": "            # get all files",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk of overwriting files if not handled properly",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      651,
      477,
      3696
    ],
    "start_token": 1503,
    "end_token": 1518,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      286,
      6993,
      799,
      278,
      3696,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk of overwriting files if not handled properly"
  },
  {
    "line": 310,
    "text": "            # get all files",
    "annotation": "\u2705 Best Practice: Use of __name__ == \"__main__\" to allow or prevent parts of code from being run when the modules are imported",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      651,
      477,
      3696
    ],
    "start_token": 1518,
    "end_token": 1533,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      3672,
      834,
      6624,
      366,
      834,
      12417,
      834,
      1,
      284,
      1249,
      393,
      2948,
      3354,
      286,
      2438,
      422,
      852,
      1057,
      618,
      262,
      13103,
      389,
      17392
    ],
    "label": "best_practice",
    "reason": "Use of __name__ == \"__main__\" to allow or prevent parts of code from being run when the modules are imported"
  },
  {
    "line": 310,
    "text": "            # get all files",
    "annotation": "\ud83e\udde0 ML Signal: Use of fire library for command-line interface",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      651,
      477,
      3696
    ],
    "start_token": 1533,
    "end_token": 1548,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2046,
      5888,
      329,
      3141,
      12,
      1370,
      7071
    ],
    "label": "ml_signal",
    "reason": "Use of fire library for command-line interface"
  }
]
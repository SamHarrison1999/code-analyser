annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"⚠️ SAST Risk (Low): Missing import statement for functools, which can lead to NameError.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 25639, 1330, 2643, 329, 1257, 310, 10141, 11, 543, 460, 1085, 284, 6530, 12331, 13]",0.5,0,sast_risk,21,"Missing import statement for functools, which can lead to NameError.",Low,0,,[]
✅ Best Practice: Use functools.wraps to preserve metadata of the original function.,"[26486, 227, 6705, 19939, 25, 5765, 1257, 310, 10141, 13, 29988, 862, 284, 12201, 20150, 286, 262, 2656, 2163, 13]",1.0,0,best_practice,21,Use functools.wraps to preserve metadata of the original function.,,0,,[]
🧠 ML Signal: Use of inspect to dynamically analyze function arguments,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10104, 284, 32366, 16602, 2163, 7159]",1.0,0,ml_signal,25,Use of inspect to dynamically analyze function arguments,,0,,[]
🧠 ML Signal: Use of set operations to manage and validate function arguments,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 900, 4560, 284, 6687, 290, 26571, 2163, 7159]",1.0,7,ml_signal,27,Use of set operations to manage and validate function arguments,,0,# decorator to check the arguments,"[2, 11705, 1352, 284, 2198, 262, 7159]"
⚠️ SAST Risk (Low): Potential for raising exceptions based on user input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 8620, 13269, 1912, 319, 2836, 5128]",0.5,31,sast_risk,32,Potential for raising exceptions based on user input,Low,7,        argspec = inspect.getfullargspec(function_to_decorate),"[220, 220, 220, 220, 220, 220, 220, 1822, 16684, 796, 10104, 13, 1136, 12853, 853, 16684, 7, 8818, 62, 1462, 62, 12501, 16262, 8]"
🧠 ML Signal: Dynamic function invocation with variable arguments,"[8582, 100, 254, 10373, 26484, 25, 26977, 2163, 43219, 351, 7885, 7159]",0.5,50,ml_signal,35,Dynamic function invocation with variable arguments,,31,"            valid_names.remove(""self"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4938, 62, 14933, 13, 28956, 7203, 944, 4943]"
⚠️ SAST Risk (High): Using os.system with user input can lead to command injection vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 8554, 28686, 13, 10057, 351, 2836, 5128, 460, 1085, 284, 3141, 16954, 23805, 13]",1.0,66,sast_risk,34,Using os.system with user input can lead to command injection vulnerabilities.,High,50,"        if ""self"" in valid_names:","[220, 220, 220, 220, 220, 220, 220, 611, 366, 944, 1, 287, 4938, 62, 14933, 25]"
✅ Best Practice: Consider using os.kill instead of os.system for sending signals to processes.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 28686, 13, 12728, 2427, 286, 28686, 13, 10057, 329, 7216, 10425, 284, 7767, 13]",0.5,85,best_practice,35,Consider using os.kill instead of os.system for sending signals to processes.,,66,"            valid_names.remove(""self"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4938, 62, 14933, 13, 28956, 7203, 944, 4943]"
⚠️ SAST Risk (High): Using os.system to kill a process is unsafe and can be replaced with a safer alternative.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 8554, 28686, 13, 10057, 284, 1494, 257, 1429, 318, 21596, 290, 460, 307, 6928, 351, 257, 14178, 5559, 13]",0.5,106,sast_risk,37,Using os.system to kill a process is unsafe and can be replaced with a safer alternative.,High,85,            if arg_name not in valid_names:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1822, 62, 3672, 407, 287, 4938, 62, 14933, 25]"
🧠 ML Signal: Custom signal handlers can indicate specific application behavior or resilience patterns.,"[8582, 100, 254, 10373, 26484, 25, 8562, 6737, 32847, 460, 7603, 2176, 3586, 4069, 393, 31307, 7572, 13]",1.0,106,ml_signal,40,Custom signal handlers can indicate specific application behavior or resilience patterns.,,106,,[]
✅ Best Practice: Include type hints for the 'results' parameter for better code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 262, 705, 43420, 6, 11507, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,127,best_practice,37,Include type hints for the 'results' parameter for better code readability and maintainability.,,106,            if arg_name not in valid_names:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1822, 62, 3672, 407, 287, 4938, 62, 14933, 25]"
✅ Best Practice: Consider using defaultdict for cleaner initialization of nested dictionaries.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 4277, 11600, 329, 21723, 37588, 286, 28376, 48589, 3166, 13]",0.5,127,best_practice,40,Consider using defaultdict for cleaner initialization of nested dictionaries.,,127,,[]
✅ Best Practice: Use a temporary variable to store results[fn][metric] to avoid repeated dictionary lookups.,"[26486, 227, 6705, 19939, 25, 5765, 257, 8584, 7885, 284, 3650, 2482, 58, 22184, 7131, 4164, 1173, 60, 284, 3368, 5100, 22155, 804, 4739, 13]",1.0,138,best_practice,44,Use a temporary variable to store results[fn][metric] to avoid repeated dictionary lookups.,,127,# function to handle ctrl z and ctrl c,"[2, 2163, 284, 5412, 269, 14859, 1976, 290, 269, 14859, 269]"
⚠️ SAST Risk (Low): Ensure that results[fn][metric] is a list to avoid runtime errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 2482, 58, 22184, 7131, 4164, 1173, 60, 318, 257, 1351, 284, 3368, 19124, 8563, 13]",1.0,146,sast_risk,45,Ensure that results[fn][metric] is a list to avoid runtime errors.,Low,138,"def handler(signum, frame):","[4299, 21360, 7, 12683, 388, 11, 5739, 2599]"
⚠️ SAST Risk (Low): Ensure that results[fn][metric] has more than one element before calling stdev to avoid runtime errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 2482, 58, 22184, 7131, 4164, 1173, 60, 468, 517, 621, 530, 5002, 878, 4585, 336, 7959, 284, 3368, 19124, 8563, 13]",1.0,146,sast_risk,47,Ensure that results[fn][metric] has more than one element before calling stdev to avoid runtime errors.,Low,146,,[]
⚠️ SAST Risk (Medium): The use of `tempfile.mkdtemp()` can lead to security issues if the temporary directory is not properly managed or cleaned up.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 383, 779, 286, 4600, 29510, 7753, 13, 28015, 67, 29510, 3419, 63, 460, 1085, 284, 2324, 2428, 611, 262, 8584, 8619, 318, 407, 6105, 5257, 393, 20750, 510, 13]",1.0,165,sast_risk,46,The use of `tempfile.mkdtemp()` can lead to security issues if the temporary directory is not properly managed or cleaned up.,Medium,146,"    os.system(""kill -9 %d"" % os.getpid())","[220, 220, 220, 28686, 13, 10057, 7203, 12728, 532, 24, 4064, 67, 1, 4064, 28686, 13, 1136, 35317, 28955]"
✅ Best Practice: Using `Path` for file paths improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 4600, 15235, 63, 329, 2393, 13532, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,165,best_practice,48,Using `Path` for file paths improves code readability and maintainability.,,165,,[]
✅ Best Practice: Writing to `sys.stderr` is a good practice for logging error or status messages.,"[26486, 227, 6705, 19939, 25, 22183, 284, 4600, 17597, 13, 301, 1082, 81, 63, 318, 257, 922, 3357, 329, 18931, 4049, 393, 3722, 6218, 13]",1.0,165,best_practice,50,Writing to `sys.stderr` is a good practice for logging error or status messages.,,165,,[]
⚠️ SAST Risk (High): Using `execute` with unsanitized input can lead to command injection vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 8554, 4600, 41049, 63, 351, 5576, 272, 36951, 5128, 460, 1085, 284, 3141, 16954, 23805, 13]",1.0,180,sast_risk,52,Using `execute` with unsanitized input can lead to command injection vulnerabilities.,High,165,# function to calculate the mean and std of a list in the results dictionary,"[2, 2163, 284, 15284, 262, 1612, 290, 14367, 286, 257, 1351, 287, 262, 2482, 22155]"
✅ Best Practice: Using `Path` for file paths improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 4600, 15235, 63, 329, 2393, 13532, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,189,best_practice,54,Using `Path` for file paths improves code readability and maintainability.,,180,    mean_std = dict(),"[220, 220, 220, 1612, 62, 19282, 796, 8633, 3419]"
✅ Best Practice: Writing to `sys.stderr` is a good practice for logging error or status messages.,"[26486, 227, 6705, 19939, 25, 22183, 284, 4600, 17597, 13, 301, 1082, 81, 63, 318, 257, 922, 3357, 329, 18931, 4049, 393, 3722, 6218, 13]",1.0,205,best_practice,56,Writing to `sys.stderr` is a good practice for logging error or status messages.,,189,        mean_std[fn] = dict(),"[220, 220, 220, 220, 220, 220, 220, 1612, 62, 19282, 58, 22184, 60, 796, 8633, 3419]"
⚠️ SAST Risk (Medium): Accessing environment variables directly can lead to security issues if not handled properly.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8798, 278, 2858, 9633, 3264, 460, 1085, 284, 2324, 2428, 611, 407, 12118, 6105, 13]",1.0,251,sast_risk,58,Accessing environment variables directly can lead to security issues if not handled properly.,Medium,205,            mean = statistics.mean(results[fn][metric]) if len(results[fn][metric]) > 1 else results[fn][metric][0],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1612, 796, 7869, 13, 32604, 7, 43420, 58, 22184, 7131, 4164, 1173, 12962, 611, 18896, 7, 43420, 58, 22184, 7131, 4164, 1173, 12962, 1875, 352, 2073, 2482, 58, 22184, 7131, 4164, 1173, 7131, 15, 60]"
🧠 ML Signal: Returning multiple related paths can indicate a pattern of environment setup or configuration.,"[8582, 100, 254, 10373, 26484, 25, 42882, 3294, 3519, 13532, 460, 7603, 257, 3912, 286, 2858, 9058, 393, 8398, 13]",1.0,277,ml_signal,60,Returning multiple related paths can indicate a pattern of environment setup or configuration.,,251,"            mean_std[fn][metric] = [mean, std]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1612, 62, 19282, 58, 22184, 7131, 4164, 1173, 60, 796, 685, 32604, 11, 14367, 60]"
⚠️ SAST Risk (Medium): The use of shell=True can lead to shell injection vulnerabilities if cmd is not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 383, 779, 286, 7582, 28, 17821, 460, 1085, 284, 7582, 16954, 23805, 611, 23991, 318, 407, 6105, 5336, 36951, 13]",1.0,285,sast_risk,55,The use of shell=True can lead to shell injection vulnerabilities if cmd is not properly sanitized.,Medium,277,    for fn in results:,"[220, 220, 220, 329, 24714, 287, 2482, 25]"
✅ Best Practice: Consider using logging instead of print for better control over output levels and destinations.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072, 2974, 290, 23982, 13]",1.0,301,best_practice,56,Consider using logging instead of print for better control over output levels and destinations.,,285,        mean_std[fn] = dict(),"[220, 220, 220, 220, 220, 220, 220, 1612, 62, 19282, 58, 22184, 60, 796, 8633, 3419]"
✅ Best Practice: subprocess should be imported at the top of the file for clarity and maintainability.,"[26486, 227, 6705, 19939, 25, 850, 14681, 815, 307, 17392, 379, 262, 1353, 286, 262, 2393, 329, 16287, 290, 5529, 1799, 13]",1.0,347,best_practice,58,subprocess should be imported at the top of the file for clarity and maintainability.,,301,            mean = statistics.mean(results[fn][metric]) if len(results[fn][metric]) > 1 else results[fn][metric][0],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1612, 796, 7869, 13, 32604, 7, 43420, 58, 22184, 7131, 4164, 1173, 12962, 611, 18896, 7, 43420, 58, 22184, 7131, 4164, 1173, 12962, 1875, 352, 2073, 2482, 58, 22184, 7131, 4164, 1173, 7131, 15, 60]"
✅ Best Practice: sys should be imported at the top of the file for clarity and maintainability.,"[26486, 227, 6705, 19939, 25, 25064, 815, 307, 17392, 379, 262, 1353, 286, 262, 2393, 329, 16287, 290, 5529, 1799, 13]",1.0,386,best_practice,59,sys should be imported at the top of the file for clarity and maintainability.,,347,            std = statistics.stdev(results[fn][metric]) if len(results[fn][metric]) > 1 else 0,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14367, 796, 7869, 13, 301, 7959, 7, 43420, 58, 22184, 7131, 4164, 1173, 12962, 611, 18896, 7, 43420, 58, 22184, 7131, 4164, 1173, 12962, 1875, 352, 2073, 657]"
✅ Best Practice: time should be imported at the top of the file for clarity and maintainability.,"[26486, 227, 6705, 19939, 25, 640, 815, 307, 17392, 379, 262, 1353, 286, 262, 2393, 329, 16287, 290, 5529, 1799, 13]",1.0,412,best_practice,60,time should be imported at the top of the file for clarity and maintainability.,,386,"            mean_std[fn][metric] = [mean, std]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1612, 62, 19282, 58, 22184, 7131, 4164, 1173, 60, 796, 685, 32604, 11, 14367, 60]"
🧠 ML Signal: User interaction pattern with input can be used to train models on user behavior.,"[8582, 100, 254, 10373, 26484, 25, 11787, 10375, 3912, 351, 5128, 460, 307, 973, 284, 4512, 4981, 319, 2836, 4069, 13]",0.5,440,ml_signal,69,User interaction pattern with input can be used to train models on user behavior.,,412,"    sys.stderr.write(f""Creating Virtual Environment with path: {env_path}...\n"")","[220, 220, 220, 25064, 13, 301, 1082, 81, 13, 13564, 7, 69, 1, 32071, 15595, 9344, 351, 3108, 25, 1391, 24330, 62, 6978, 92, 986, 59, 77, 4943]"
🧠 ML Signal: Exception handling pattern can be used to train models on error management.,"[8582, 100, 254, 10373, 26484, 25, 35528, 9041, 3912, 460, 307, 973, 284, 4512, 4981, 319, 4049, 4542, 13]",0.5,450,ml_signal,73,Exception handling pattern can be used to train models on error management.,,440,    # get anaconda activate path,"[220, 220, 220, 1303, 651, 281, 330, 13533, 15155, 3108]"
✅ Best Practice: Specify the expected types for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 18291, 1958, 262, 2938, 3858, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,464,best_practice,72,Specify the expected types for function parameters and return type for better readability and maintainability.,,450,"    sys.stderr.write(""\n"")","[220, 220, 220, 25064, 13, 301, 1082, 81, 13, 13564, 7203, 59, 77, 4943]"
✅ Best Practice: Initialize variables at the start of the function for better readability.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 379, 262, 923, 286, 262, 2163, 329, 1365, 1100, 1799, 13]",0.5,503,best_practice,74,Initialize variables at the start of the function for better readability.,,464,"    conda_activate = Path(os.environ[""CONDA_PREFIX""]) / ""bin"" / ""activate""  # TODO: FIX ME!","[220, 220, 220, 1779, 64, 62, 39022, 796, 10644, 7, 418, 13, 268, 2268, 14692, 10943, 5631, 62, 47, 31688, 10426, 8973, 8, 1220, 366, 8800, 1, 1220, 366, 39022, 1, 220, 1303, 16926, 46, 25, 44855, 11948, 0]"
✅ Best Practice: Check for string type before processing to ensure correct handling of input.,"[26486, 227, 6705, 19939, 25, 6822, 329, 4731, 2099, 878, 7587, 284, 4155, 3376, 9041, 286, 5128, 13]",0.5,503,best_practice,76,Check for string type before processing to ensure correct handling of input.,,503,,[]
🧠 ML Signal: Splitting strings by a delimiter is a common pattern for processing CSV-like input.,"[8582, 100, 254, 10373, 26484, 25, 13341, 2535, 13042, 416, 257, 46728, 2676, 318, 257, 2219, 3912, 329, 7587, 44189, 12, 2339, 5128, 13]",0.5,509,ml_signal,78,Splitting strings by a delimiter is a common pattern for processing CSV-like input.,,503,# function to execute the cmd,"[2, 2163, 284, 12260, 262, 23991]"
🧠 ML Signal: Converting strings to lowercase is a common pattern for case-insensitive comparisons.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 13042, 284, 2793, 7442, 318, 257, 2219, 3912, 329, 1339, 12, 1040, 18464, 17909, 13]",0.5,521,ml_signal,80,Converting strings to lowercase is a common pattern for case-insensitive comparisons.,,509,"    print(""Running CMD:"", cmd)","[220, 220, 220, 3601, 7203, 28768, 327, 12740, 25, 1600, 23991, 8]"
✅ Best Practice: Check for list type to ensure correct handling of input.,"[26486, 227, 6705, 19939, 25, 6822, 329, 1351, 2099, 284, 4155, 3376, 9041, 286, 5128, 13]",0.5,536,best_practice,82,Check for list type to ensure correct handling of input.,,521,        for line in p.stdout:,"[220, 220, 220, 220, 220, 220, 220, 329, 1627, 287, 279, 13, 19282, 448, 25]"
🧠 ML Signal: Converting strings to lowercase is a common pattern for case-insensitive comparisons.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 13042, 284, 2793, 7442, 318, 257, 2219, 3912, 329, 1339, 12, 1040, 18464, 17909, 13]",0.5,554,ml_signal,84,Converting strings to lowercase is a common pattern for case-insensitive comparisons.,,536,"            if ""\b"" in line:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 37082, 65, 1, 287, 1627, 25]"
✅ Best Practice: Handle NoneType to provide a default behavior.,"[26486, 227, 6705, 19939, 25, 33141, 6045, 6030, 284, 2148, 257, 4277, 4069, 13]",0.5,577,best_practice,86,Handle NoneType to provide a default behavior.,,554,                time.sleep(0.1),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 15, 13, 16, 8]"
⚠️ SAST Risk (Medium): Use of os.scandir without validation can lead to directory traversal vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 28686, 13, 1416, 392, 343, 1231, 21201, 460, 1085, 284, 8619, 33038, 282, 23805, 13]",0.5,577,sast_risk,88,Use of os.scandir without validation can lead to directory traversal vulnerabilities.,Medium,577,,[]
✅ Best Practice: Raise informative errors for unsupported input types.,"[26486, 227, 6705, 19939, 25, 35123, 30304, 8563, 329, 24222, 5128, 3858, 13]",0.5,595,best_practice,91,Raise informative errors for unsupported input types.,,577,"            input(""Press Enter to Continue"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5128, 7203, 13800, 6062, 284, 10054, 4943]"
⚠️ SAST Risk (Medium): Use of os.scandir without validation can lead to directory traversal vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 28686, 13, 1416, 392, 343, 1231, 21201, 460, 1085, 284, 8619, 33038, 282, 23805, 13]",0.5,621,sast_risk,93,Use of os.scandir without validation can lead to directory traversal vulnerabilities.,Medium,595,"            raise RuntimeError(f""Error when executing command: {cmd}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 43160, 12331, 7, 69, 1, 12331, 618, 23710, 3141, 25, 1391, 28758, 92, 4943]"
⚠️ SAST Risk (Low): Use of xor function without import statement can lead to NameError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 2124, 273, 2163, 1231, 1330, 2643, 460, 1085, 284, 6530, 12331, 13]",0.5,626,sast_risk,95,Use of xor function without import statement can lead to NameError.,Low,621,    else:,"[220, 220, 220, 2073, 25]"
✅ Best Practice: Use Pathlib for path manipulations for better readability and cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 10644, 8019, 329, 3108, 7704, 5768, 329, 1365, 1100, 1799, 290, 3272, 12, 24254, 17764, 13]",1.0,626,best_practice,97,Use Pathlib for path manipulations for better readability and cross-platform compatibility.,,626,,[]
✅ Best Practice: Use resolve() to get the absolute path for clarity.,"[26486, 227, 6705, 19939, 25, 5765, 10568, 3419, 284, 651, 262, 4112, 3108, 329, 16287, 13]",0.5,641,best_practice,100,Use resolve() to get the absolute path for clarity.,,626,"def get_all_folders(models, exclude) -> dict:","[4299, 651, 62, 439, 62, 11379, 364, 7, 27530, 11, 19607, 8, 4613, 8633, 25]"
✅ Best Practice: Consider using pathlib.Path for path manipulations for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 12642, 1262, 3108, 8019, 13, 15235, 329, 3108, 7704, 5768, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,652,best_practice,89,Consider using pathlib.Path for path manipulations for better readability and maintainability,,641,    if p.returncode != 0:,"[220, 220, 220, 611, 279, 13, 7783, 8189, 14512, 657, 25]"
"✅ Best Practice: Use 'if universe:' instead of 'if universe != """":' for checking non-empty strings","[26486, 227, 6705, 19939, 25, 5765, 705, 361, 6881, 32105, 2427, 286, 705, 361, 6881, 14512, 366, 1298, 6, 329, 10627, 1729, 12, 28920, 13042]",1.0,670,best_practice,91,"Use 'if universe:' instead of 'if universe != """":' for checking non-empty strings",,652,"            input(""Press Enter to Continue"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5128, 7203, 13800, 6062, 284, 10054, 4943]"
✅ Best Practice: Consider using pathlib.Path for path manipulations for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 12642, 1262, 3108, 8019, 13, 15235, 329, 3108, 7704, 5768, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,683,best_practice,94,Consider using pathlib.Path for path manipulations for better readability and maintainability,,670,        return p.stderr,"[220, 220, 220, 220, 220, 220, 220, 1441, 279, 13, 301, 1082, 81]"
✅ Best Practice: Consider using pathlib.Path for path manipulations for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 12642, 1262, 3108, 8019, 13, 15235, 329, 3108, 7704, 5768, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,692,best_practice,96,Consider using pathlib.Path for path manipulations for better readability and maintainability,,683,        return None,"[220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
🧠 ML Signal: Usage of glob to find files based on patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 15095, 284, 1064, 3696, 1912, 319, 7572]",1.0,692,ml_signal,97,Usage of glob to find files based on patterns,,692,,[]
🧠 ML Signal: Usage of glob to find files based on patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 15095, 284, 1064, 3696, 1912, 319, 7572]",1.0,707,ml_signal,100,Usage of glob to find files based on patterns,,692,"def get_all_folders(models, exclude) -> dict:","[4299, 651, 62, 439, 62, 11379, 364, 7, 27530, 11, 19607, 8, 4613, 8633, 25]"
⚠️ SAST Risk (Low): Returning None may lead to TypeErrors if not handled by the caller,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42882, 6045, 743, 1085, 284, 5994, 9139, 5965, 611, 407, 12118, 416, 262, 24955]",1.0,718,sast_risk,102,Returning None may lead to TypeErrors if not handled by the caller,Low,707,"    if isinstance(models, str):","[220, 220, 220, 611, 318, 39098, 7, 27530, 11, 965, 2599]"
⚠️ SAST Risk (Low): Potential IndexError if req_file is empty,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 43089, 62, 7753, 318, 6565]",1.0,737,sast_risk,106,Potential IndexError if req_file is empty,Low,718,        models = [m.lower() for m in models],"[220, 220, 220, 220, 220, 220, 220, 4981, 796, 685, 76, 13, 21037, 3419, 329, 285, 287, 4981, 60]"
⚠️ SAST Risk (Low): Potential KeyError if expected keys are missing in metrics,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 2938, 8251, 389, 4814, 287, 20731]",0.5,759,sast_risk,120,Potential KeyError if expected keys are missing in metrics,Low,737,"def get_all_files(folder_path, dataset, universe="""") -> (str, str):","[4299, 651, 62, 439, 62, 16624, 7, 43551, 62, 6978, 11, 27039, 11, 6881, 2625, 4943, 4613, 357, 2536, 11, 965, 2599]"
🧠 ML Signal: Collecting specific metrics for analysis,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 2176, 20731, 329, 3781]",0.5,784,ml_signal,124,Collecting specific metrics for analysis,,759,"    req_path = str(Path(f""{folder_path}"") / f""*.txt"")","[220, 220, 220, 43089, 62, 6978, 796, 965, 7, 15235, 7, 69, 1, 90, 43551, 62, 6978, 92, 4943, 1220, 277, 1, 24620, 14116, 4943]"
🧠 ML Signal: Collecting specific metrics for analysis,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 2176, 20731, 329, 3781]",0.5,800,ml_signal,126,Collecting specific metrics for analysis,,784,    req_file = glob.glob(req_path),"[220, 220, 220, 43089, 62, 7753, 796, 15095, 13, 4743, 672, 7, 42180, 62, 6978, 8]"
🧠 ML Signal: Collecting specific metrics for analysis,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 2176, 20731, 329, 3781]",0.5,811,ml_signal,128,Collecting specific metrics for analysis,,800,"        return None, None","[220, 220, 220, 220, 220, 220, 220, 1441, 6045, 11, 6045]"
🧠 ML Signal: Collecting specific metrics for analysis,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 2176, 20731, 329, 3781]",0.5,832,ml_signal,130,Collecting specific metrics for analysis,,811,"        return yaml_file[0], req_file[0]","[220, 220, 220, 220, 220, 220, 220, 1441, 331, 43695, 62, 7753, 58, 15, 4357, 43089, 62, 7753, 58, 15, 60]"
🧠 ML Signal: Collecting specific metrics for analysis,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 2176, 20731, 329, 3781]",0.5,832,ml_signal,132,Collecting specific metrics for analysis,,832,,[]
🧠 ML Signal: Collecting specific metrics for analysis,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 2176, 20731, 329, 3781]",0.5,845,ml_signal,134,Collecting specific metrics for analysis,,832,def get_all_results(folders) -> dict:,"[4299, 651, 62, 439, 62, 43420, 7, 11379, 364, 8, 4613, 8633, 25]"
🧠 ML Signal: Collecting specific metrics for analysis,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 2176, 20731, 329, 3781]",0.5,853,ml_signal,136,Collecting specific metrics for analysis,,845,    for fn in folders:,"[220, 220, 220, 329, 24714, 287, 24512, 25]"
✅ Best Practice: Use of descriptive variable names for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 329, 1100, 1799]",1.0,860,best_practice,133,Use of descriptive variable names for readability,,853,# function to retrieve all the results,"[2, 2163, 284, 19818, 477, 262, 2482]"
✅ Best Practice: Accessing dictionary values with keys for clarity,"[26486, 227, 6705, 19939, 25, 8798, 278, 22155, 3815, 351, 8251, 329, 16287]",0.5,869,best_practice,137,Accessing dictionary values with keys for clarity,,860,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
🧠 ML Signal: Formatting numerical data for markdown table,"[8582, 100, 254, 10373, 26484, 25, 18980, 889, 29052, 1366, 329, 1317, 2902, 3084]",0.5,890,ml_signal,145,Formatting numerical data for markdown table,,869,"        result[""information_ratio_with_cost""] = list()","[220, 220, 220, 220, 220, 220, 220, 1255, 14692, 17018, 62, 10366, 952, 62, 4480, 62, 15805, 8973, 796, 1351, 3419]"
⚠️ SAST Risk (Low): Use of pprint without import statement,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 279, 4798, 1231, 1330, 2643]",1.0,904,sast_risk,147,Use of pprint without import statement,Low,890,"        result[""ic""] = list()","[220, 220, 220, 220, 220, 220, 220, 1255, 14692, 291, 8973, 796, 1351, 3419]"
⚠️ SAST Risk (Low): File operation without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 9220, 4905, 1231, 6631, 9041]",1.0,920,sast_risk,149,File operation without exception handling,Low,904,"        result[""rank_ic""] = list()","[220, 220, 220, 220, 220, 220, 220, 1255, 14692, 43027, 62, 291, 8973, 796, 1351, 3419]"
✅ Best Practice: Function name is descriptive and indicates its purpose,"[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 35644, 290, 9217, 663, 4007]",0.5,935,best_practice,148,Function name is descriptive and indicates its purpose,,920,"        result[""icir""] = list()","[220, 220, 220, 220, 220, 220, 220, 1255, 14692, 291, 343, 8973, 796, 1351, 3419]"
✅ Best Practice: Using 'with' statement for file operations ensures proper resource management,"[26486, 227, 6705, 19939, 25, 8554, 705, 4480, 6, 2643, 329, 2393, 4560, 19047, 1774, 8271, 4542]",0.5,952,best_practice,150,Using 'with' statement for file operations ensures proper resource management,,935,"        result[""rank_icir""] = list()","[220, 220, 220, 220, 220, 220, 220, 1255, 14692, 43027, 62, 291, 343, 8973, 796, 1351, 3419]"
⚠️ SAST Risk (Low): YAML loading can be risky if the content is not trusted,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 575, 2390, 43, 11046, 460, 307, 17564, 611, 262, 2695, 318, 407, 13467]",0.5,979,sast_risk,152,YAML loading can be risky if the content is not trusted,Low,952,"            if recorders[recorder_id].status == ""FINISHED"":","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1700, 364, 58, 8344, 2875, 62, 312, 4083, 13376, 6624, 366, 20032, 18422, 1961, 1298]"
✅ Best Practice: Using try-except to handle potential KeyError,"[26486, 227, 6705, 19939, 25, 8554, 1949, 12, 16341, 284, 5412, 2785, 7383, 12331]",0.5,1018,best_practice,155,Using try-except to handle potential KeyError,,979,"                if ""1day.excess_return_with_cost.annualized_return"" not in metrics:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 366, 16, 820, 13, 1069, 919, 62, 7783, 62, 4480, 62, 15805, 13, 1236, 723, 1143, 62, 7783, 1, 407, 287, 20731, 25]"
✅ Best Practice: Returning original path if 'seed' key is not found,"[26486, 227, 6705, 19939, 25, 42882, 2656, 3108, 611, 705, 28826, 6, 1994, 318, 407, 1043]",0.5,1068,best_practice,159,Returning original path if 'seed' key is not found,,1018,"                result[""information_ratio_with_cost""].append(metrics[""1day.excess_return_with_cost.information_ratio""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1255, 14692, 17018, 62, 10366, 952, 62, 4480, 62, 15805, 1, 4083, 33295, 7, 4164, 10466, 14692, 16, 820, 13, 1069, 919, 62, 7783, 62, 4480, 62, 15805, 13, 17018, 62, 10366, 952, 8973, 8]"
✅ Best Practice: Using os.path.join for cross-platform path construction,"[26486, 227, 6705, 19939, 25, 8554, 28686, 13, 6978, 13, 22179, 329, 3272, 12, 24254, 3108, 5103]",1.0,1098,best_practice,162,Using os.path.join for cross-platform path construction,,1068,"                result[""icir""].append(metrics[""ICIR""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1255, 14692, 291, 343, 1, 4083, 33295, 7, 4164, 10466, 14692, 2149, 4663, 8973, 8]"
✅ Best Practice: Using 'with' statement for file operations ensures proper resource management,"[26486, 227, 6705, 19939, 25, 8554, 705, 4480, 6, 2643, 329, 2393, 4560, 19047, 1774, 8271, 4542]",0.5,1111,best_practice,165,Using 'with' statement for file operations ensures proper resource management,,1098,        results[fn] = result,"[220, 220, 220, 220, 220, 220, 220, 2482, 58, 22184, 60, 796, 1255]"
🧠 ML Signal: Method initializes qlib with experiment management settings,"[8582, 100, 254, 10373, 26484, 25, 11789, 4238, 4340, 10662, 8019, 351, 6306, 4542, 6460]",1.0,1144,ml_signal,164,Method initializes qlib with experiment management settings,,1111,"                result[""rank_icir""].append(metrics[""Rank ICIR""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1255, 14692, 43027, 62, 291, 343, 1, 4083, 33295, 7, 4164, 10466, 14692, 27520, 12460, 4663, 8973, 8]"
⚠️ SAST Risk (Low): Potential path traversal if exp_folder_name is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3108, 33038, 282, 611, 1033, 62, 43551, 62, 3672, 318, 407, 31031]",0.5,1157,sast_risk,165,Potential path traversal if exp_folder_name is not validated,Low,1144,        results[fn] = result,"[220, 220, 220, 220, 220, 220, 220, 2482, 58, 22184, 60, 796, 1255]"
🧠 ML Signal: qlib.init is used to set up experiment management,"[8582, 100, 254, 10373, 26484, 25, 10662, 8019, 13, 15003, 318, 973, 284, 900, 510, 6306, 4542]",0.5,1170,ml_signal,165,qlib.init is used to set up experiment management,,1157,        results[fn] = result,"[220, 220, 220, 220, 220, 220, 220, 2482, 58, 22184, 60, 796, 1255]"
⚠️ SAST Risk (Low): Use of os.getcwd() without validation can lead to security risks if the current directory is not trusted,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28686, 13, 1136, 66, 16993, 3419, 1231, 21201, 460, 1085, 284, 2324, 7476, 611, 262, 1459, 8619, 318, 407, 13467]",0.5,1183,sast_risk,165,Use of os.getcwd() without validation can lead to security risks if the current directory is not trusted,Low,1170,        results[fn] = result,"[220, 220, 220, 220, 220, 220, 220, 2482, 58, 22184, 60, 796, 1255]"
⚠️ SAST Risk (Low): Concatenating strings for file paths can lead to security issues if not properly handled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1482, 9246, 268, 803, 13042, 329, 2393, 13532, 460, 1085, 284, 2324, 2428, 611, 407, 6105, 12118]",0.5,1199,sast_risk,174,Concatenating strings for file paths can lead to security issues if not properly handled,Low,1183,"        ic = metrics[fn][""ic""]","[220, 220, 220, 220, 220, 220, 220, 14158, 796, 20731, 58, 22184, 7131, 1, 291, 8973]"
✅ Best Practice: Decorator usage suggests enforcing argument constraints,"[26486, 227, 6705, 19939, 25, 4280, 273, 1352, 8748, 5644, 26587, 4578, 17778]",0.5,1217,best_practice,176,Decorator usage suggests enforcing argument constraints,,1199,"        ric = metrics[fn][""rank_ic""]","[220, 220, 220, 220, 220, 220, 220, 12410, 796, 20731, 58, 22184, 7131, 1, 43027, 62, 291, 8973]"
✅ Best Practice: Docstring provides detailed information about parameters and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 6496, 1321, 546, 10007, 290, 8748, 13]",1.0,1239,best_practice,188,Docstring provides detailed information about parameters and usage.,,1217,"# read yaml, remove seed kwargs of model, and then save file in the temp_dir","[2, 1100, 331, 43695, 11, 4781, 9403, 479, 86, 22046, 286, 2746, 11, 290, 788, 3613, 2393, 287, 262, 20218, 62, 15908]"
🧠 ML Signal: Initialization of a library or framework.,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 257, 5888, 393, 9355, 13]",0.5,1264,ml_signal,233,Initialization of a library or framework.,,1239,"        exp_folder_name: str = ""run_all_model_records"",","[220, 220, 220, 220, 220, 220, 220, 1033, 62, 43551, 62, 3672, 25, 965, 796, 366, 5143, 62, 439, 62, 19849, 62, 8344, 3669, 1600]"
🧠 ML Signal: Dynamic retrieval of model folders based on input parameters.,"[8582, 100, 254, 10373, 26484, 25, 26977, 45069, 286, 2746, 24512, 1912, 319, 5128, 10007, 13]",0.5,1281,ml_signal,235,Dynamic retrieval of model folders based on input parameters.,,1264,"        wait_when_err: bool = False,","[220, 220, 220, 220, 220, 220, 220, 4043, 62, 12518, 62, 8056, 25, 20512, 796, 10352, 11]"
🧠 ML Signal: Dynamic file retrieval based on dataset and universe.,"[8582, 100, 254, 10373, 26484, 25, 26977, 2393, 45069, 1912, 319, 27039, 290, 6881, 13]",1.0,1302,ml_signal,240,Dynamic file retrieval based on dataset and universe.,,1281,"        for multiple times, and this will be fixed in the future development.","[220, 220, 220, 220, 220, 220, 220, 329, 3294, 1661, 11, 290, 428, 481, 307, 5969, 287, 262, 2003, 2478, 13]"
🧠 ML Signal: Environment setup for model execution.,"[8582, 100, 254, 10373, 26484, 25, 9344, 9058, 329, 2746, 9706, 13]",1.0,1314,ml_signal,246,Environment setup for model execution.,,1302,        models : str or list,"[220, 220, 220, 220, 220, 220, 220, 4981, 1058, 965, 393, 1351]"
⚠️ SAST Risk (Low): Potential command injection if `req_path` is not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3141, 16954, 611, 4600, 42180, 62, 6978, 63, 318, 407, 5336, 36951, 13]",0.5,1324,sast_risk,250,Potential command injection if `req_path` is not sanitized.,Low,1314,        dataset : str,"[220, 220, 220, 220, 220, 220, 220, 27039, 1058, 965]"
⚠️ SAST Risk (Low): Potential command injection if `req_path` is not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3141, 16954, 611, 4600, 42180, 62, 6978, 63, 318, 407, 5336, 36951, 13]",0.5,1344,sast_risk,256,Potential command injection if `req_path` is not sanitized.,Low,1324,            the uri to install qlib with pip,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 2956, 72, 284, 2721, 10662, 8019, 351, 7347]"
⚠️ SAST Risk (Low): Potential command injection if `req_path` is not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3141, 16954, 611, 4600, 42180, 62, 6978, 63, 318, 407, 5336, 36951, 13]",0.5,1362,sast_risk,263,Potential command injection if `req_path` is not sanitized.,Low,1344,            wait when errors raised when executing commands,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4043, 618, 8563, 4376, 618, 23710, 9729]"
🧠 ML Signal: Generation of configuration files without seed for reproducibility.,"[8582, 100, 254, 10373, 26484, 25, 16588, 286, 8398, 3696, 1231, 9403, 329, 8186, 66, 2247, 13]",0.5,1371,ml_signal,265,Generation of configuration files without seed for reproducibility.,,1362,        Usage:,"[220, 220, 220, 220, 220, 220, 220, 29566, 25]"
⚠️ SAST Risk (Low): Potential command injection if `env_path` is not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3141, 16954, 611, 4600, 24330, 62, 6978, 63, 318, 407, 5336, 36951, 13]",0.5,1371,sast_risk,268,Potential command injection if `env_path` is not sanitized.,Low,1371,,[]
⚠️ SAST Risk (Low): Potential command injection if `python_path` is not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3141, 16954, 611, 4600, 29412, 62, 6978, 63, 318, 407, 5336, 36951, 13]",0.5,1405,sast_risk,273,Potential command injection if `python_path` is not sanitized.,Low,1371,            examples/benchmarks/LightGBM/workflow_config_lightgbm_Alpha158.yaml,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6096, 14, 26968, 14306, 14, 15047, 4579, 44, 14, 1818, 11125, 62, 11250, 62, 2971, 70, 20475, 62, 38077, 21273, 13, 88, 43695]"
⚠️ SAST Risk (Low): Potential command injection if `python_path` is not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3141, 16954, 611, 4600, 29412, 62, 6978, 63, 318, 407, 5336, 36951, 13]",0.5,1405,sast_risk,277,Potential command injection if `python_path` is not sanitized.,Low,1405,,[]
⚠️ SAST Risk (Low): Potential command injection if `env_path` or `qlib_uri` is not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3141, 16954, 611, 4600, 24330, 62, 6978, 63, 393, 4600, 80, 8019, 62, 9900, 63, 318, 407, 5336, 36951, 13]",0.5,1425,sast_risk,280,Potential command injection if `env_path` or `qlib_uri` is not sanitized.,Low,1405,            # Case 1 - run all models multiple times,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 8913, 352, 532, 1057, 477, 4981, 3294, 1661]"
⚠️ SAST Risk (Low): Potential command injection if `env_path` or `qlib_uri` is not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3141, 16954, 611, 4600, 24330, 62, 6978, 63, 393, 4600, 80, 8019, 62, 9900, 63, 318, 407, 5336, 36951, 13]",0.5,1448,sast_risk,286,Potential command injection if `env_path` or `qlib_uri` is not sanitized.,Low,1425,            # Case 3 - run specific models multiple times with specific dataset,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 8913, 513, 532, 1057, 2176, 4981, 3294, 1661, 351, 2176, 27039]"
"⚠️ SAST Risk (Low): Potential command injection if `yaml_path`, `fn`, or `exp_folder_name` is not sanitized.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3141, 16954, 611, 4600, 88, 43695, 62, 6978, 47671, 4600, 22184, 47671, 393, 4600, 11201, 62, 43551, 62, 3672, 63, 318, 407, 5336, 36951, 13]",0.5,1448,sast_risk,294,"Potential command injection if `yaml_path`, `fn`, or `exp_folder_name` is not sanitized.",Low,1448,,[]
⚠️ SAST Risk (Low): Deleting directories without confirmation can lead to data loss.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42226, 889, 29196, 1231, 12641, 460, 1085, 284, 1366, 2994, 13]",0.5,1459,sast_risk,307,Deleting directories without confirmation can lead to data loss.,Low,1448,        errors = dict(),"[220, 220, 220, 220, 220, 220, 220, 8563, 796, 8633, 3419]"
🧠 ML Signal: Collecting and displaying errors for analysis.,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 290, 19407, 8563, 329, 3781, 13]",0.5,1474,ml_signal,310,Collecting and displaying errors for analysis.,,1459,            # get all files,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 651, 477, 3696]"
🧠 ML Signal: Collecting results after model execution.,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 2482, 706, 2746, 9706, 13]",1.0,1489,ml_signal,310,Collecting results after model execution.,,1474,            # get all files,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 651, 477, 3696]"
🧠 ML Signal: Function to collect and process experiment results,"[8582, 100, 254, 10373, 26484, 25, 15553, 284, 2824, 290, 1429, 6306, 2482]",1.0,1489,ml_signal,297,Function to collect and process experiment results,,1489,,[]
⚠️ SAST Risk (Low): Potential risk of overwriting files if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 6993, 799, 278, 3696, 611, 407, 12118, 6105]",1.0,1503,sast_risk,308,Potential risk of overwriting files if not handled properly,Low,1489,        # run all the model for iterations,"[220, 220, 220, 220, 220, 220, 220, 1303, 1057, 477, 262, 2746, 329, 34820]"
⚠️ SAST Risk (Low): Potential risk of overwriting files if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 6993, 799, 278, 3696, 611, 407, 12118, 6105]",1.0,1518,sast_risk,310,Potential risk of overwriting files if not handled properly,Low,1503,            # get all files,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 651, 477, 3696]"
"✅ Best Practice: Use of __name__ == ""__main__"" to allow or prevent parts of code from being run when the modules are imported","[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3672, 834, 6624, 366, 834, 12417, 834, 1, 284, 1249, 393, 2948, 3354, 286, 2438, 422, 852, 1057, 618, 262, 13103, 389, 17392]",0.5,1533,best_practice,310,"Use of __name__ == ""__main__"" to allow or prevent parts of code from being run when the modules are imported",,1518,            # get all files,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 651, 477, 3696]"
🧠 ML Signal: Use of fire library for command-line interface,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2046, 5888, 329, 3141, 12, 1370, 7071]",0.5,1548,ml_signal,310,Use of fire library for command-line interface,,1533,            # get all files,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 651, 477, 3696]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of Path from pathlib for file path operations improves code portability and readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 422, 3108, 8019, 329, 2393, 3108, 4560, 19575, 2438, 2493, 1799, 290, 1100, 1799, 13]",1.0,6,best_practice,25,Use of Path from pathlib for file path operations improves code portability and readability.,,0,from pandas import DataFrame,"[6738, 19798, 292, 1330, 6060, 19778]"
"üß† ML Signal: Use of parallel processing with joblib, indicating performance optimization.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10730, 7587, 351, 1693, 8019, 11, 12739, 2854, 23989, 13]",0.5,18,ml_signal,27,"Use of parallel processing with joblib, indicating performance optimization.",,6,from pymongo.mongo_client import MongoClient,"[6738, 279, 4948, 25162, 13, 76, 25162, 62, 16366, 1330, 42591, 11792]"
‚úÖ Best Practice: Use of Path for constructing file paths.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 30580, 2393, 13532, 13]",1.0,33,best_practice,29,Use of Path for constructing file paths.,,18,DIRNAME = Path(__file__).absolute().resolve().parent,"[34720, 20608, 796, 10644, 7, 834, 7753, 834, 737, 48546, 22446, 411, 6442, 22446, 8000]"
‚úÖ Best Practice: Use of Path for constructing file paths.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 30580, 2393, 13532, 13]",1.0,35,best_practice,31,Use of Path for constructing file paths.,,33,# CONFIG,"[2, 25626]"
‚úÖ Best Practice: Use of Path for constructing file paths.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 30580, 2393, 13532, 13]",1.0,50,best_practice,33,Use of Path for constructing file paths.,,35,"LOG_FILE_PATH = DIRNAME / ""log_file""","[25294, 62, 25664, 62, 34219, 796, 360, 4663, 20608, 1220, 366, 6404, 62, 7753, 1]"
‚úÖ Best Practice: Use of Path for constructing file paths.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 30580, 2393, 13532, 13]",1.0,66,best_practice,35,Use of Path for constructing file paths.,,50,"DATABASE_PATH = DIRNAME / ""orig_data""","[35, 1404, 6242, 11159, 62, 34219, 796, 360, 4663, 20608, 1220, 366, 11612, 62, 7890, 1]"
‚úÖ Best Practice: Use of Path for constructing file paths.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 30580, 2393, 13532, 13]",1.0,88,best_practice,37,Use of Path for constructing file paths.,,66,"DATA_FINISH_INFO_PATH = DIRNAME / ""./data_finish_info""","[26947, 62, 20032, 18422, 62, 10778, 62, 34219, 796, 360, 4663, 20608, 1220, 366, 19571, 7890, 62, 15643, 680, 62, 10951, 1]"
"üß† ML Signal: Use of a list to define document types, indicating structured data handling.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1351, 284, 8160, 3188, 3858, 11, 12739, 20793, 1366, 9041, 13]",0.5,113,ml_signal,38,"Use of a list to define document types, indicating structured data handling.",,88,"DOC_TYPE = [""Tick"", ""Order"", ""OrderQueue"", ""Transaction"", ""Day"", ""Minute""]","[38715, 62, 25216, 796, 14631, 51, 624, 1600, 366, 18743, 1600, 366, 18743, 34991, 1600, 366, 48720, 1600, 366, 12393, 1600, 366, 9452, 1133, 8973]"
‚ö†Ô∏è SAST Risk (Low): Large constant value for MAX_SIZE could lead to excessive memory usage.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13601, 6937, 1988, 329, 25882, 62, 33489, 714, 1085, 284, 13181, 4088, 8748, 13]",0.5,129,sast_risk,41,Large constant value for MAX_SIZE could lead to excessive memory usage.,Low,113,"ARCTIC_SRV = ""127.0.0.1""","[1503, 4177, 2149, 62, 12562, 53, 796, 366, 16799, 13, 15, 13, 15, 13, 16, 1]"
‚úÖ Best Practice: Use of Path for constructing file paths.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 30580, 2393, 13532, 13]",1.0,129,best_practice,43,Use of Path for constructing file paths.,,129,,[]
‚ö†Ô∏è SAST Risk (Medium): Hardcoded IP address for ARCTIC_SRV could lead to security vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6912, 40976, 6101, 2209, 329, 5923, 4177, 2149, 62, 12562, 53, 714, 1085, 284, 2324, 23805, 13]",0.5,150,sast_risk,45,Hardcoded IP address for ARCTIC_SRV could lead to security vulnerabilities.,Medium,129,"    if str.lower(doc_type) == str.lower(""Tick""):","[220, 220, 220, 611, 965, 13, 21037, 7, 15390, 62, 4906, 8, 6624, 965, 13, 21037, 7203, 51, 624, 1, 2599]"
‚úÖ Best Practice: Use of str.lower() ensures case-insensitive comparison,"[26486, 227, 6705, 19939, 25, 5765, 286, 965, 13, 21037, 3419, 19047, 1339, 12, 1040, 18464, 7208]",1.0,165,best_practice,36,Use of str.lower() ensures case-insensitive comparison,,150,"DATA_INFO_PATH = DIRNAME / ""data_info""","[26947, 62, 10778, 62, 34219, 796, 360, 4663, 20608, 1220, 366, 7890, 62, 10951, 1]"
‚úÖ Best Practice: Use of str.lower() ensures case-insensitive comparison,"[26486, 227, 6705, 19939, 25, 5765, 286, 965, 13, 21037, 3419, 19047, 1339, 12, 1040, 18464, 7208]",1.0,190,best_practice,38,Use of str.lower() ensures case-insensitive comparison,,165,"DOC_TYPE = [""Tick"", ""Order"", ""OrderQueue"", ""Transaction"", ""Day"", ""Minute""]","[38715, 62, 25216, 796, 14631, 51, 624, 1600, 366, 18743, 1600, 366, 18743, 34991, 1600, 366, 48720, 1600, 366, 12393, 1600, 366, 9452, 1133, 8973]"
‚úÖ Best Practice: Use of str.lower() ensures consistent output format,"[26486, 227, 6705, 19939, 25, 5765, 286, 965, 13, 21037, 3419, 19047, 6414, 5072, 5794]",0.5,190,best_practice,42,Use of str.lower() ensures consistent output format,,190,,[]
üß† ML Signal: Function checks stock codes based on exchange place,"[8582, 100, 254, 10373, 26484, 25, 15553, 8794, 4283, 12416, 1912, 319, 5163, 1295]",0.5,206,ml_signal,41,Function checks stock codes based on exchange place,,190,"ARCTIC_SRV = ""127.0.0.1""","[1503, 4177, 2149, 62, 12562, 53, 796, 366, 16799, 13, 15, 13, 15, 13, 16, 1]"
‚úÖ Best Practice: Use of clear conditional checks for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 1598, 26340, 8794, 329, 1100, 1799]",0.5,206,best_practice,43,Use of clear conditional checks for readability,,206,,[]
‚úÖ Best Practice: Use of clear conditional checks for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 1598, 26340, 8794, 329, 1100, 1799]",0.5,218,best_practice,46,Use of clear conditional checks for readability,,206,"        return ""ticks""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 83, 3378, 1]"
‚úÖ Best Practice: Consider importing necessary modules at the beginning of the file for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 33332, 3306, 13103, 379, 262, 3726, 286, 262, 2393, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,223,best_practice,47,Consider importing necessary modules at the beginning of the file for better readability and maintainability.,,218,    else:,"[220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use descriptive variable names for better readability.,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799, 13]",1.0,232,best_practice,55,Use descriptive variable names for better readability.,,223,        return False,"[220, 220, 220, 220, 220, 220, 220, 1441, 10352]"
"‚ö†Ô∏è SAST Risk (Low): Potential logic flaw if exchange_place is not ""SH"" or ""SZ"".","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 9156, 11804, 611, 5163, 62, 5372, 318, 407, 366, 9693, 1, 393, 366, 50, 57, 1911]",1.0,232,sast_risk,57,"Potential logic flaw if exchange_place is not ""SH"" or ""SZ"".",Low,232,,[]
"‚ö†Ô∏è SAST Risk (Low): Potential logic flaw if exchange_place is not ""SH"" or ""SZ"".","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 9156, 11804, 611, 5163, 62, 5372, 318, 407, 366, 9693, 1, 393, 366, 50, 57, 1911]",1.0,236,sast_risk,60,"Potential logic flaw if exchange_place is not ""SH"" or ""SZ"".",Low,232,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Reading CSV files is a common operation that can be used to identify data processing patterns.,"[8582, 100, 254, 10373, 26484, 25, 11725, 44189, 3696, 318, 257, 2219, 4905, 326, 460, 307, 973, 284, 5911, 1366, 7587, 7572, 13]",1.0,247,ml_signal,63,Reading CSV files is a common operation that can be used to identify data processing patterns.,,236,    filepath: the path of csv,"[220, 220, 220, 2393, 6978, 25, 262, 3108, 286, 269, 21370]"
‚úÖ Best Practice: Avoid redundant code by reusing the 'code' variable instead of reassigning it.,"[26486, 227, 6705, 19939, 25, 24390, 30806, 2438, 416, 302, 3500, 262, 705, 8189, 6, 7885, 2427, 286, 12719, 38944, 340, 13]",0.5,251,best_practice,65,Avoid redundant code by reusing the 'code' variable instead of reassigning it.,,247,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use consistent string formatting for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 6414, 4731, 33313, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,263,best_practice,64,Use consistent string formatting for better readability and maintainability,,251,    arc: arclink created by a process,"[220, 220, 220, 10389, 25, 610, 565, 676, 2727, 416, 257, 1429]"
üß† ML Signal: Usage of pandas DataFrame and list operations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 6060, 19778, 290, 1351, 4560]",1.0,288,ml_signal,73,Usage of pandas DataFrame and list operations,,263,"    code = os.path.split(filepath)[-1].split("".csv"")[0]","[220, 220, 220, 2438, 796, 28686, 13, 6978, 13, 35312, 7, 7753, 6978, 38381, 12, 16, 4083, 35312, 7, 1911, 40664, 4943, 58, 15, 60]"
üß† ML Signal: Exception handling pattern,"[8582, 100, 254, 10373, 26484, 25, 35528, 9041, 3912]",0.5,310,ml_signal,78,Exception handling pattern,,288,"        if hms[0] == ""1"":  # >=10,","[220, 220, 220, 220, 220, 220, 220, 611, 289, 907, 58, 15, 60, 6624, 366, 16, 1298, 220, 1303, 18189, 940, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure through error messages,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 832, 4049, 6218]",1.0,323,sast_risk,83,Potential information disclosure through error messages,Low,310,            return (,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 357]"
üß† ML Signal: Usage of pandas DatetimeIndex,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 16092, 8079, 15732]",0.5,340,ml_signal,87,Usage of pandas DatetimeIndex,,323,    ## Discard the entire row if wrong data timestamp encoutered.,"[220, 220, 220, 22492, 8444, 446, 262, 2104, 5752, 611, 2642, 1366, 41033, 2207, 448, 1068, 13]"
‚úÖ Best Practice: Dropping unused columns to optimize DataFrame size,"[26486, 227, 6705, 19939, 25, 21045, 2105, 21958, 15180, 284, 27183, 6060, 19778, 2546]",0.5,354,best_practice,90,Dropping unused columns to optimize DataFrame size,,340,"    for index, t in enumerate(timestamp):","[220, 220, 220, 329, 6376, 11, 256, 287, 27056, 378, 7, 16514, 27823, 2599]"
üß† ML Signal: Iterating over DataFrame rows,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 6060, 19778, 15274]",1.0,366,ml_signal,96,Iterating over DataFrame rows,,354,    # to-do: writting to logs,"[220, 220, 220, 1303, 284, 12, 4598, 25, 1319, 2535, 284, 17259]"
üß† ML Signal: Function call pattern,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912]",0.5,394,ml_signal,102,Function call pattern,,366,"    timestamp = list(zip(list(df[""date""]), list(df[""time""])))  ## The cleaned timestamp","[220, 220, 220, 41033, 796, 1351, 7, 13344, 7, 4868, 7, 7568, 14692, 4475, 8973, 828, 1351, 7, 7568, 14692, 2435, 8973, 22305, 220, 22492, 383, 20750, 41033]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure through print statements,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 832, 3601, 6299]",1.0,424,sast_risk,107,Potential information disclosure through print statements,Low,394,"    df = df.drop(columns=[""date"", ""time"", ""name"", ""code"", ""wind_code""])","[220, 220, 220, 47764, 796, 47764, 13, 14781, 7, 28665, 82, 28, 14692, 4475, 1600, 366, 2435, 1600, 366, 3672, 1600, 366, 8189, 1600, 366, 7972, 62, 8189, 8973, 8]"
üß† ML Signal: Conditional logic for updating or writing data,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 329, 19698, 393, 3597, 1366]",0.5,424,ml_signal,111,Conditional logic for updating or writing data,,424,,[]
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure through print statements,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 832, 3601, 6299]",1.0,437,sast_risk,114,Potential information disclosure through print statements,Low,424,"        df[""ab""] = [","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 397, 8973, 796, 685]"
"‚ö†Ô∏è SAST Risk (Medium): Missing import statements for 'os', 'traceback', and 'Arctic' can lead to runtime errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25639, 1330, 6299, 329, 705, 418, 3256, 705, 40546, 1891, 3256, 290, 705, 3163, 11048, 6, 460, 1085, 284, 19124, 8563, 13]",1.0,467,sast_risk,107,"Missing import statements for 'os', 'traceback', and 'Arctic' can lead to runtime errors.",Medium,437,"    df = df.drop(columns=[""date"", ""time"", ""name"", ""code"", ""wind_code""])","[220, 220, 220, 47764, 796, 47764, 13, 14781, 7, 28665, 82, 28, 14692, 4475, 1600, 366, 2435, 1600, 366, 3672, 1600, 366, 8189, 1600, 366, 7972, 62, 8189, 8973, 8]"
üß† ML Signal: Using process ID (PID) to create unique log file names.,"[8582, 100, 254, 10373, 26484, 25, 8554, 1429, 4522, 357, 47, 2389, 8, 284, 2251, 3748, 2604, 2393, 3891, 13]",1.0,488,ml_signal,109,Using process ID (PID) to create unique log file names.,,467,"    df[""date""] = pd.to_datetime(pd_timestamp)","[220, 220, 220, 47764, 14692, 4475, 8973, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 30094, 62, 16514, 27823, 8]"
"üß† ML Signal: Extracting code from the file path, indicating file naming conventions.","[8582, 100, 254, 10373, 26484, 25, 29677, 278, 2438, 422, 262, 2393, 3108, 11, 12739, 2393, 19264, 21396, 13]",1.0,488,ml_signal,111,"Extracting code from the file path, indicating file naming conventions.",,488,,[]
"‚ö†Ô∏è SAST Risk (Medium): 'ARCTIC_SRV' is used without being defined or imported, leading to potential NameError.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 705, 1503, 4177, 2149, 62, 12562, 53, 6, 318, 973, 1231, 852, 5447, 393, 17392, 11, 3756, 284, 2785, 6530, 12331, 13]",0.5,502,sast_risk,113,"'ARCTIC_SRV' is used without being defined or imported, leading to potential NameError.",Medium,488,        ## extract ab1~ab50,"[220, 220, 220, 220, 220, 220, 220, 22492, 7925, 450, 16, 93, 397, 1120]"
‚úÖ Best Practice: Logging every 100th index for progress tracking.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 790, 1802, 400, 6376, 329, 4371, 9646, 13]",0.5,523,best_practice,116,Logging every 100th index for progress tracking.,,502,"            for timestamp, row in df.iterrows()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 41033, 11, 5752, 287, 47764, 13, 2676, 8516, 3419]"
üß† ML Signal: Function call pattern with specific parameters.,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 351, 2176, 10007, 13]",0.5,557,ml_signal,118,Function call pattern with specific parameters.,,523,"        df = df.drop(columns=[""ab"" + str(i) for i in range(1, 51)])","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 14781, 7, 28665, 82, 28, 14692, 397, 1, 1343, 965, 7, 72, 8, 329, 1312, 287, 2837, 7, 16, 11, 6885, 8, 12962]"
‚úÖ Best Practice: Checking for non-empty error list before proceeding.,"[26486, 227, 6705, 19939, 25, 39432, 329, 1729, 12, 28920, 4049, 1351, 878, 18788, 13]",0.5,581,best_practice,121,Checking for non-empty error list before proceeding.,,557,"    # arc.initialize_library(type, lib_type=CHUNK_STORE)","[220, 220, 220, 1303, 10389, 13, 36733, 1096, 62, 32016, 7, 4906, 11, 9195, 62, 4906, 28, 3398, 4944, 42, 62, 2257, 6965, 8]"
‚ö†Ô∏è SAST Risk (Low): Using 'open' without 'with' statement can lead to file descriptor leaks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 705, 9654, 6, 1231, 705, 4480, 6, 2643, 460, 1085, 284, 2393, 43087, 17316, 13]",0.5,581,sast_risk,123,Using 'open' without 'with' statement can lead to file descriptor leaks.,Low,581,,[]
üß† ML Signal: Logging error details to a file.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 4049, 3307, 284, 257, 2393, 13]",0.5,597,ml_signal,124,Logging error details to a file.,,581,"    symbol = """".join([exchange_place, code])","[220, 220, 220, 6194, 796, 366, 1911, 22179, 26933, 1069, 3803, 62, 5372, 11, 2438, 12962]"
üß† ML Signal: Capturing and logging exceptions.,"[8582, 100, 254, 10373, 26484, 25, 6790, 870, 290, 18931, 13269, 13]",0.5,619,ml_signal,129,Capturing and logging exceptions.,,597,"        lib.update(symbol, df, chunk_size=""D"")","[220, 220, 220, 220, 220, 220, 220, 9195, 13, 19119, 7, 1837, 23650, 11, 47764, 11, 16058, 62, 7857, 2625, 35, 4943]"
‚ö†Ô∏è SAST Risk (Low): Using 'open' without 'with' statement can lead to file descriptor leaks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 705, 9654, 6, 1231, 705, 4480, 6, 2643, 460, 1085, 284, 2393, 43087, 17316, 13]",0.5,641,sast_risk,132,Using 'open' without 'with' statement can lead to file descriptor leaks.,Low,619,"        lib.write(symbol, df, chunk_size=""D"")","[220, 220, 220, 220, 220, 220, 220, 9195, 13, 13564, 7, 1837, 23650, 11, 47764, 11, 16058, 62, 7857, 2625, 35, 4943]"
üß† ML Signal: Logging failure details to a file.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 5287, 3307, 284, 257, 2393, 13]",0.5,641,ml_signal,134,Logging failure details to a file.,,641,,[]
"üß† ML Signal: Resetting the Arctic connection, indicating resource management.","[8582, 100, 254, 10373, 26484, 25, 30027, 889, 262, 15723, 4637, 11, 12739, 8271, 4542, 13]",0.5,666,ml_signal,138,"Resetting the Arctic connection, indicating resource management.",,641,"    code = os.path.split(filepath)[-1].split("".csv"")[0]","[220, 220, 220, 2438, 796, 28686, 13, 6978, 13, 35312, 7, 7753, 6978, 38381, 12, 16, 4083, 35312, 7, 1911, 40664, 4943, 58, 15, 60]"
"‚ö†Ô∏è SAST Risk (Medium): Missing import statement for 'os', 'time', 'traceback', 'Parallel', 'delayed', 'N_JOBS', 'DOC_TYPE', 'DATABASE_PATH', 'DATA_PATH', 'DATA_INFO_PATH', 'DATA_FINISH_INFO_PATH', 'LOG_FILE_PATH'","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25639, 1330, 2643, 329, 705, 418, 3256, 705, 2435, 3256, 705, 40546, 1891, 3256, 705, 10044, 29363, 3256, 705, 12381, 16548, 3256, 705, 45, 62, 45006, 4462, 3256, 705, 38715, 62, 25216, 3256, 705, 35, 1404, 6242, 11159, 62, 34219, 3256, 705, 26947, 62, 34219, 3256, 705, 26947, 62, 10778, 62, 34219, 3256, 705, 26947, 62, 20032, 18422, 62, 10778, 62, 34219, 3256, 705, 25294, 62, 25664, 62, 34219, 6]",1.0,680,sast_risk,127,"Missing import statement for 'os', 'time', 'traceback', 'Parallel', 'delayed', 'N_JOBS', 'DOC_TYPE', 'DATABASE_PATH', 'DATA_PATH', 'DATA_INFO_PATH', 'DATA_FINISH_INFO_PATH', 'LOG_FILE_PATH'",Medium,666,        if df.empty == True:,"[220, 220, 220, 220, 220, 220, 220, 611, 47764, 13, 28920, 6624, 6407, 25]"
‚ö†Ô∏è SAST Risk (Low): Using os.getpid() can expose process IDs which might be sensitive in some contexts,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 28686, 13, 1136, 35317, 3419, 460, 15651, 1429, 32373, 543, 1244, 307, 8564, 287, 617, 26307]",0.5,702,sast_risk,129,Using os.getpid() can expose process IDs which might be sensitive in some contexts,Low,680,"        lib.update(symbol, df, chunk_size=""D"")","[220, 220, 220, 220, 220, 220, 220, 9195, 13, 19119, 7, 1837, 23650, 11, 47764, 11, 16058, 62, 7857, 2625, 35, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential for incorrect behavior if DOC_TYPE is not defined or is mutable,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11491, 4069, 611, 37760, 62, 25216, 318, 407, 5447, 393, 318, 4517, 540]",1.0,727,sast_risk,131,Potential for incorrect behavior if DOC_TYPE is not defined or is mutable,Low,702,"        print(""write {0}, date={1}"".format(symbol, date))","[220, 220, 220, 220, 220, 220, 220, 3601, 7203, 13564, 1391, 15, 5512, 3128, 34758, 16, 92, 1911, 18982, 7, 1837, 23650, 11, 3128, 4008]"
‚ö†Ô∏è SAST Risk (High): Use of os.system() with unsanitized input can lead to command injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 28686, 13, 10057, 3419, 351, 5576, 272, 36951, 5128, 460, 1085, 284, 3141, 16954, 23805]",1.0,752,sast_risk,138,Use of os.system() with unsanitized input can lead to command injection vulnerabilities,High,727,"    code = os.path.split(filepath)[-1].split("".csv"")[0]","[220, 220, 220, 2438, 796, 28686, 13, 6978, 13, 35312, 7, 7753, 6978, 38381, 12, 16, 4083, 35312, 7, 1911, 40664, 4943, 58, 15, 60]"
‚ö†Ô∏è SAST Risk (High): Use of os.system() with unsanitized input can lead to command injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 28686, 13, 10057, 3419, 351, 5576, 272, 36951, 5128, 460, 1085, 284, 3141, 16954, 23805]",1.0,777,sast_risk,138,Use of os.system() with unsanitized input can lead to command injection vulnerabilities,High,752,"    code = os.path.split(filepath)[-1].split("".csv"")[0]","[220, 220, 220, 2438, 796, 28686, 13, 6978, 13, 35312, 7, 7753, 6978, 38381, 12, 16, 4083, 35312, 7, 1911, 40664, 4943, 58, 15, 60]"
‚ö†Ô∏è SAST Risk (High): Use of os.system() with unsanitized input can lead to command injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 28686, 13, 10057, 3419, 351, 5576, 272, 36951, 5128, 460, 1085, 284, 3141, 16954, 23805]",1.0,813,sast_risk,143,Use of os.system() with unsanitized input can lead to command injection vulnerabilities,High,777,"        error_index_list = add_one_stock_daily_data(filepath, type, exchange_place, arc, date)","[220, 220, 220, 220, 220, 220, 220, 4049, 62, 9630, 62, 4868, 796, 751, 62, 505, 62, 13578, 62, 29468, 62, 7890, 7, 7753, 6978, 11, 2099, 11, 5163, 62, 5372, 11, 10389, 11, 3128, 8]"
‚ö†Ô∏è SAST Risk (High): Use of os.system() with unsanitized input can lead to command injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 28686, 13, 10057, 3419, 351, 5576, 272, 36951, 5128, 460, 1085, 284, 3141, 16954, 23805]",1.0,828,sast_risk,147,Use of os.system() with unsanitized input can lead to command injection vulnerabilities,High,813,            f.close(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 13, 19836, 3419]"
‚ö†Ô∏è SAST Risk (High): Use of os.system() with unsanitized input can lead to command injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 28686, 13, 10057, 3419, 351, 5576, 272, 36951, 5128, 460, 1085, 284, 3141, 16954, 23805]",1.0,836,sast_risk,149,Use of os.system() with unsanitized input can lead to command injection vulnerabilities,High,828,    except Exception as e:,"[220, 220, 220, 2845, 35528, 355, 304, 25]"
‚ö†Ô∏è SAST Risk (High): Use of os.system() with unsanitized input can lead to command injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 28686, 13, 10057, 3419, 351, 5576, 272, 36951, 5128, 460, 1085, 284, 3141, 16954, 23805]",1.0,852,sast_risk,151,Use of os.system() with unsanitized input can lead to command injection vulnerabilities,High,836,"        print(""error:"" + str(e))","[220, 220, 220, 220, 220, 220, 220, 3601, 7203, 18224, 11097, 1343, 965, 7, 68, 4008]"
‚ö†Ô∏è SAST Risk (High): Use of os.system() with unsanitized input can lead to command injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 28686, 13, 10057, 3419, 351, 5576, 272, 36951, 5128, 460, 1085, 284, 3141, 16954, 23805]",1.0,868,sast_risk,151,Use of os.system() with unsanitized input can lead to command injection vulnerabilities,High,852,"        print(""error:"" + str(e))","[220, 220, 220, 220, 220, 220, 220, 3601, 7203, 18224, 11097, 1343, 965, 7, 68, 4008]"
‚ö†Ô∏è SAST Risk (High): Use of os.system() with unsanitized input can lead to command injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 28686, 13, 10057, 3419, 351, 5576, 272, 36951, 5128, 460, 1085, 284, 3141, 16954, 23805]",1.0,884,sast_risk,151,Use of os.system() with unsanitized input can lead to command injection vulnerabilities,High,868,"        print(""error:"" + str(e))","[220, 220, 220, 220, 220, 220, 220, 3601, 7203, 18224, 11097, 1343, 965, 7, 68, 4008]"
‚ö†Ô∏è SAST Risk (High): Use of os.system() with unsanitized input can lead to command injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 28686, 13, 10057, 3419, 351, 5576, 272, 36951, 5128, 460, 1085, 284, 3141, 16954, 23805]",1.0,884,sast_risk,159,Use of os.system() with unsanitized input can lead to command injection vulnerabilities,High,884,,[]
‚úÖ Best Practice: Use of os.path.exists() to check file existence is a good practice,"[26486, 227, 6705, 19939, 25, 5765, 286, 28686, 13, 6978, 13, 1069, 1023, 3419, 284, 2198, 2393, 6224, 318, 257, 922, 3357]",0.5,903,best_practice,160,Use of os.path.exists() to check file existence is a good practice,,884,"def add_data(tick_date, doc_type, stock_name_dict):","[4299, 751, 62, 7890, 7, 42298, 62, 4475, 11, 2205, 62, 4906, 11, 4283, 62, 3672, 62, 11600, 2599]"
‚úÖ Best Practice: Use of set operations to find common elements is efficient,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 4560, 284, 1064, 2219, 4847, 318, 6942]",0.5,922,best_practice,160,Use of set operations to find common elements is efficient,,903,"def add_data(tick_date, doc_type, stock_name_dict):","[4299, 751, 62, 7890, 7, 42298, 62, 4475, 11, 2205, 62, 4906, 11, 4283, 62, 3672, 62, 11600, 2599]"
‚úÖ Best Practice: Use of set operations to find common elements is efficient,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 4560, 284, 1064, 2219, 4847, 318, 6942]",0.5,990,best_practice,174,Use of set operations to find common elements is efficient,,922,"            f""tar -xvzf {DATA_PATH}/{tick_date + '_{}.tar.gz'.format(doc_type)} -C {DATA_PATH}/ {tick_date + '_' + doc_type}/SZ""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 18870, 532, 87, 85, 89, 69, 1391, 26947, 62, 34219, 92, 14, 90, 42298, 62, 4475, 1343, 705, 23330, 27422, 18870, 13, 34586, 4458, 18982, 7, 15390, 62, 4906, 38165, 532, 34, 1391, 26947, 62, 34219, 92, 14, 1391, 42298, 62, 4475, 1343, 705, 62, 6, 1343, 2205, 62, 4906, 92, 14, 50, 57, 1]"
‚ö†Ô∏è SAST Risk (Low): Potential file path traversal if DATA_INFO_PATH is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 3108, 33038, 282, 611, 42865, 62, 10778, 62, 34219, 318, 407, 6105, 5336, 36951]",0.5,1041,sast_risk,187,Potential file path traversal if DATA_INFO_PATH is not properly sanitized,Low,990,"        is_files_exist = {""sh"": os.path.exists(temp_data_path_sh), ""sz"": os.path.exists(temp_data_path_sz)}","[220, 220, 220, 220, 220, 220, 220, 318, 62, 16624, 62, 38476, 796, 19779, 1477, 1298, 28686, 13, 6978, 13, 1069, 1023, 7, 29510, 62, 7890, 62, 6978, 62, 1477, 828, 366, 82, 89, 1298, 28686, 13, 6978, 13, 1069, 1023, 7, 29510, 62, 7890, 62, 6978, 62, 82, 89, 38165]"
‚úÖ Best Practice: Use of Parallel processing to improve performance,"[26486, 227, 6705, 19939, 25, 5765, 286, 42945, 7587, 284, 2987, 2854]",0.5,1053,best_practice,190,Use of Parallel processing to improve performance,,1041,            (,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 357]"
‚úÖ Best Practice: Use of Parallel processing to improve performance,"[26486, 227, 6705, 19939, 25, 5765, 286, 42945, 7587, 284, 2987, 2854]",0.5,1065,best_practice,198,Use of Parallel processing to improve performance,,1053,        sh_files = (,"[220, 220, 220, 220, 220, 220, 220, 427, 62, 16624, 796, 357]"
‚ö†Ô∏è SAST Risk (High): Use of os.system() with unsanitized input can lead to command injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 28686, 13, 10057, 3419, 351, 5576, 272, 36951, 5128, 460, 1085, 284, 3141, 16954, 23805]",1.0,1073,sast_risk,205,Use of os.system() with unsanitized input can lead to command injection vulnerabilities,High,1065,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (High): Use of os.system() with unsanitized input can lead to command injection vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 28686, 13, 10057, 3419, 351, 5576, 272, 36951, 5128, 460, 1085, 284, 3141, 16954, 23805]",1.0,1117,sast_risk,207,Use of os.system() with unsanitized input can lead to command injection vulnerabilities,High,1073,"        print(""sz_file_nums:{}, sh_file_nums:{}"".format(sz_file_nums, sh_file_nums))","[220, 220, 220, 220, 220, 220, 220, 3601, 7203, 82, 89, 62, 7753, 62, 77, 5700, 29164, 5512, 427, 62, 7753, 62, 77, 5700, 29164, 92, 1911, 18982, 7, 82, 89, 62, 7753, 62, 77, 5700, 11, 427, 62, 7753, 62, 77, 5700, 4008]"
‚ö†Ô∏è SAST Risk (Low): Potential file path traversal if DATA_FINISH_INFO_PATH is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 3108, 33038, 282, 611, 42865, 62, 20032, 18422, 62, 10778, 62, 34219, 318, 407, 6105, 5336, 36951]",1.0,1164,sast_risk,210,Potential file path traversal if DATA_FINISH_INFO_PATH is not properly sanitized,Low,1117,"        f.write(""sz:{}, sh:{}, date:{}:"".format(sz_file_nums, sh_file_nums, tick_date) + ""\n"")","[220, 220, 220, 220, 220, 220, 220, 277, 13, 13564, 7203, 82, 89, 29164, 5512, 427, 29164, 5512, 3128, 29164, 38362, 1911, 18982, 7, 82, 89, 62, 7753, 62, 77, 5700, 11, 427, 62, 7753, 62, 77, 5700, 11, 4378, 62, 4475, 8, 1343, 37082, 77, 4943]"
‚úÖ Best Practice: Use of traceback for detailed error information,"[26486, 227, 6705, 19939, 25, 5765, 286, 12854, 1891, 329, 6496, 4049, 1321]",0.5,1186,best_practice,215,Use of traceback for detailed error information,,1164,            Parallel(n_jobs=N_JOBS)(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 42945, 7, 77, 62, 43863, 28, 45, 62, 45006, 4462, 5769]"
‚ö†Ô∏è SAST Risk (Low): Potential file path traversal if LOG_FILE_PATH is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 3108, 33038, 282, 611, 41605, 62, 25664, 62, 34219, 318, 407, 6105, 5336, 36951]",0.5,1202,sast_risk,218,Potential file path traversal if LOG_FILE_PATH is not properly sanitized,Low,1186,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of MongoClient indicates interaction with a MongoDB database,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 42591, 11792, 9217, 10375, 351, 257, 42591, 11012, 6831]",0.5,1214,ml_signal,202,Use of MongoClient indicates interaction with a MongoDB database,,1202,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (High): Dropping a database can lead to data loss if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 21045, 2105, 257, 6831, 460, 1085, 284, 1366, 2994, 611, 407, 12118, 6105]",0.5,1234,sast_risk,203,Dropping a database can lead to data loss if not handled properly,High,1214,"            if is_files_exist[""sh""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 62, 16624, 62, 38476, 14692, 1477, 8973]"
‚ö†Ô∏è SAST Risk (High): Dropping a database is a destructive operation and should be used with caution,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 21045, 2105, 257, 6831, 318, 257, 17656, 4905, 290, 815, 307, 973, 351, 13041]",1.0,1242,sast_risk,205,Dropping a database is a destructive operation and should be used with caution,High,1234,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of Arctic library for data storage,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 15723, 5888, 329, 1366, 6143]",1.0,1250,ml_signal,205,Use of Arctic library for data storage,,1242,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Iterating over document types to initialize libraries,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 3188, 3858, 284, 41216, 12782]",1.0,1294,ml_signal,207,Iterating over document types to initialize libraries,,1250,"        print(""sz_file_nums:{}, sh_file_nums:{}"".format(sz_file_nums, sh_file_nums))","[220, 220, 220, 220, 220, 220, 220, 3601, 7203, 82, 89, 62, 7753, 62, 77, 5700, 29164, 5512, 427, 62, 7753, 62, 77, 5700, 29164, 92, 1911, 18982, 7, 82, 89, 62, 7753, 62, 77, 5700, 11, 427, 62, 7753, 62, 77, 5700, 4008]"
üß† ML Signal: Dynamic library name generation based on document type,"[8582, 100, 254, 10373, 26484, 25, 26977, 5888, 1438, 5270, 1912, 319, 3188, 2099]",1.0,1336,ml_signal,209,Dynamic library name generation based on document type,,1294,"        f = (DATA_INFO_PATH / ""data_info_log_{}_{}"".format(doc_type, tick_date)).open(""w+"")","[220, 220, 220, 220, 220, 220, 220, 277, 796, 357, 26947, 62, 10778, 62, 34219, 1220, 366, 7890, 62, 10951, 62, 6404, 23330, 92, 23330, 92, 1911, 18982, 7, 15390, 62, 4906, 11, 4378, 62, 4475, 29720, 9654, 7203, 86, 10, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if get_library_name or DOC_TYPE are user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 651, 62, 32016, 62, 3672, 393, 37760, 62, 25216, 389, 2836, 12, 14401]",1.0,1383,sast_risk,210,Potential risk if get_library_name or DOC_TYPE are user-controlled,Low,1336,"        f.write(""sz:{}, sh:{}, date:{}:"".format(sz_file_nums, sh_file_nums, tick_date) + ""\n"")","[220, 220, 220, 220, 220, 220, 220, 277, 13, 13564, 7203, 82, 89, 29164, 5512, 427, 29164, 5512, 3128, 29164, 38362, 1911, 18982, 7, 82, 89, 62, 7753, 62, 77, 5700, 11, 427, 62, 7753, 62, 77, 5700, 11, 4378, 62, 4475, 8, 1343, 37082, 77, 4943]"
üß† ML Signal: Use of Path object for file system operations,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10644, 2134, 329, 2393, 1080, 4560]",1.0,1425,ml_signal,209,Use of Path object for file system operations,,1383,"        f = (DATA_INFO_PATH / ""data_info_log_{}_{}"".format(doc_type, tick_date)).open(""w+"")","[220, 220, 220, 220, 220, 220, 220, 277, 796, 357, 26947, 62, 10778, 62, 34219, 1220, 366, 7890, 62, 10951, 62, 6404, 23330, 92, 23330, 92, 1911, 18982, 7, 15390, 62, 4906, 11, 4378, 62, 4475, 29720, 9654, 7203, 86, 10, 4943]"
"‚ö†Ô∏è SAST Risk (Medium): Potentially dangerous operation, deletes entire directory tree","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 4923, 4905, 11, 28128, 274, 2104, 8619, 5509]",0.5,1436,sast_risk,211,"Potentially dangerous operation, deletes entire directory tree",Medium,1425,        f.close(),"[220, 220, 220, 220, 220, 220, 220, 277, 13, 19836, 3419]"
‚úÖ Best Practice: Use of mkdir with parents=True and exist_ok=True for safe directory creation,"[26486, 227, 6705, 19939, 25, 5765, 286, 33480, 15908, 351, 3397, 28, 17821, 290, 2152, 62, 482, 28, 17821, 329, 3338, 8619, 6282]",0.5,1461,best_practice,214,Use of mkdir with parents=True and exist_ok=True for safe directory creation,,1436,"            # write is not thread-safe, update may be thread-safe","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 3551, 318, 407, 4704, 12, 21230, 11, 4296, 743, 307, 4704, 12, 21230]"
‚úÖ Best Practice: Use of list comprehension for filtering and transforming lists,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 35915, 329, 25431, 290, 25449, 8341]",0.5,1486,best_practice,214,Use of list comprehension for filtering and transforming lists,,1461,"            # write is not thread-safe, update may be thread-safe","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 3551, 318, 407, 4704, 12, 21230, 11, 4296, 743, 307, 4704, 12, 21230]"
üß† ML Signal: Usage of external library Arctic,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 5888, 15723]",0.5,1536,ml_signal,217,Usage of external library Arctic,,1486,"                    os.path.join(temp_data_path_sh, name + "".csv""), doc_type, ""SH"", index, tick_date","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 28686, 13, 6978, 13, 22179, 7, 29510, 62, 7890, 62, 6978, 62, 1477, 11, 1438, 1343, 27071, 40664, 12340, 2205, 62, 4906, 11, 366, 9693, 1600, 6376, 11, 4378, 62, 4475]"
üß† ML Signal: Setting quotas for resources,"[8582, 100, 254, 10373, 26484, 25, 25700, 38736, 329, 4133]",0.5,1548,ml_signal,220,Setting quotas for resources,,1536,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Resetting state of an external resource,"[8582, 100, 254, 10373, 26484, 25, 30027, 889, 1181, 286, 281, 7097, 8271]",0.5,1573,ml_signal,222,Resetting state of an external resource,,1548,"            # write is not thread-safe, update may be thread-safe","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 3551, 318, 407, 4704, 12, 21230, 11, 4296, 743, 307, 4704, 12, 21230]"
‚úÖ Best Practice: Use of set to remove duplicates,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 284, 4781, 14184, 16856]",0.5,1625,best_practice,225,Use of set to remove duplicates,,1573,"                    os.path.join(temp_data_path_sz, name + "".csv""), doc_type, ""SZ"", index, tick_date","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 28686, 13, 6978, 13, 22179, 7, 29510, 62, 7890, 62, 6978, 62, 82, 89, 11, 1438, 1343, 27071, 40664, 12340, 2205, 62, 4906, 11, 366, 50, 57, 1600, 6376, 11, 4378, 62, 4475]"
‚úÖ Best Practice: Converting integers to strings in a list,"[26486, 227, 6705, 19939, 25, 35602, 889, 37014, 284, 13042, 287, 257, 1351]",0.5,1655,best_practice,227,Converting integers to strings in a list,,1625,"                for index, name in enumerate(list(sz_files))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 6376, 11, 1438, 287, 27056, 378, 7, 4868, 7, 82, 89, 62, 16624, 4008]"
‚ö†Ô∏è SAST Risk (Low): File not closed using a context manager,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 9220, 407, 4838, 1262, 257, 4732, 4706]",0.5,1691,sast_risk,231,File not closed using a context manager,Low,1655,"        os.system(f""rm -rf {DATA_PATH}/{tick_date + '_' + doc_type}"")","[220, 220, 220, 220, 220, 220, 220, 28686, 13, 10057, 7, 69, 1, 26224, 532, 41871, 1391, 26947, 62, 34219, 92, 14, 90, 42298, 62, 4475, 1343, 705, 62, 6, 1343, 2205, 62, 4906, 92, 4943]"
‚úÖ Best Practice: Use of list comprehension for processing file lines,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 35915, 329, 7587, 2393, 3951]",0.5,1710,best_practice,232,Use of list comprehension for processing file lines,,1691,        total_time = time.time() - begin_time,"[220, 220, 220, 220, 220, 220, 220, 2472, 62, 2435, 796, 640, 13, 2435, 3419, 532, 2221, 62, 2435]"
‚úÖ Best Practice: Dictionary comprehension for better readability,"[26486, 227, 6705, 19939, 25, 28261, 35915, 329, 1365, 1100, 1799]",0.5,1721,best_practice,235,Dictionary comprehension for better readability,,1710,        f.close(),"[220, 220, 220, 220, 220, 220, 220, 277, 13, 19836, 3419]"
üß† ML Signal: Repeated initialization of Arctic object,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 37588, 286, 15723, 2134]",0.5,1763,ml_signal,241,Repeated initialization of Arctic object,,1721,"        f.write(""fail:"" + str(tick_date) + ""\n"" + str(e) + ""\n"" + str(info) + ""\n"")","[220, 220, 220, 220, 220, 220, 220, 277, 13, 13564, 7203, 32165, 11097, 1343, 965, 7, 42298, 62, 4475, 8, 1343, 37082, 77, 1, 1343, 965, 7, 68, 8, 1343, 37082, 77, 1, 1343, 965, 7, 10951, 8, 1343, 37082, 77, 4943]"
üß† ML Signal: Checking for existing symbols in a library,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 4683, 14354, 287, 257, 5888]",0.5,1763,ml_signal,243,Checking for existing symbols in a library,,1763,,[]
‚úÖ Best Practice: Use of pandas DataFrame for data handling,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 6060, 19778, 329, 1366, 9041]",0.5,1779,best_practice,250,Use of pandas DataFrame for data handling,,1763,"        client.drop_database(""arctic"")","[220, 220, 220, 220, 220, 220, 220, 5456, 13, 14781, 62, 48806, 7203, 283, 11048, 4943]"
üß† ML Signal: Writing data to a library,"[8582, 100, 254, 10373, 26484, 25, 22183, 1366, 284, 257, 5888]",0.5,1795,ml_signal,250,Writing data to a library,,1779,"        client.drop_database(""arctic"")","[220, 220, 220, 220, 220, 220, 220, 5456, 13, 14781, 62, 48806, 7203, 283, 11048, 4943]"
üß† ML Signal: Resetting state of an external resource,"[8582, 100, 254, 10373, 26484, 25, 30027, 889, 1181, 286, 281, 7097, 8271]",0.5,1811,ml_signal,250,Resetting state of an external resource,,1795,"        client.drop_database(""arctic"")","[220, 220, 220, 220, 220, 220, 220, 5456, 13, 14781, 62, 48806, 7203, 283, 11048, 4943]"
üß† ML Signal: Use of parallel processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10730, 7587]",0.5,1827,ml_signal,250,Use of parallel processing,,1811,"        client.drop_database(""arctic"")","[220, 220, 220, 220, 220, 220, 220, 5456, 13, 14781, 62, 48806, 7203, 283, 11048, 4943]"
üß† ML Signal: Use of fire library for command-line interface,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2046, 5888, 329, 3141, 12, 1370, 7071]",0.5,1843,ml_signal,250,Use of fire library for command-line interface,,1827,"        client.drop_database(""arctic"")","[220, 220, 220, 220, 220, 220, 220, 5456, 13, 14781, 62, 48806, 7203, 283, 11048, 4943]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific modules from a library indicates usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5888, 9217, 8748, 7572]",0.5,7,ml_signal,2,Importing specific modules from a library indicates usage patterns,,0,# Licensed under the MIT License.,"[2, 49962, 739, 262, 17168, 13789, 13]"
üß† ML Signal: Importing a library indicates usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 257, 5888, 9217, 8748, 7572]",0.5,15,ml_signal,4,Importing a library indicates usage patterns,,7,from arctic.arctic import Arctic,"[6738, 610, 11048, 13, 283, 11048, 1330, 15723]"
üß† ML Signal: Importing specific modules from a library indicates usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5888, 9217, 8748, 7572]",0.5,22,ml_signal,6,Importing specific modules from a library indicates usage patterns,,15,from qlib.data import D,"[6738, 10662, 8019, 13, 7890, 1330, 360]"
üß† ML Signal: Importing unittest suggests testing practices,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 555, 715, 395, 5644, 4856, 6593]",0.5,29,ml_signal,6,Importing unittest suggests testing practices,,22,from qlib.data import D,"[6738, 10662, 8019, 13, 7890, 1330, 360]"
‚úÖ Best Practice: Inheriting from unittest.TestCase to create a test class,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 555, 715, 395, 13, 14402, 20448, 284, 2251, 257, 1332, 1398]",0.5,32,best_practice,5,Inheriting from unittest.TestCase to create a test class,,29,import qlib,"[11748, 10662, 8019]"
üß† ML Signal: Usage of qlib.init with specific parameters can indicate a pattern for initializing a data provider,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10662, 8019, 13, 15003, 351, 2176, 10007, 460, 7603, 257, 3912, 329, 4238, 2890, 257, 1366, 10131]",1.0,32,ml_signal,16,Usage of qlib.init with specific parameters can indicate a pattern for initializing a data provider,,32,,[]
‚ö†Ô∏è SAST Risk (Low): Hardcoded provider URI may expose sensitive paths or configurations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 10131, 43975, 743, 15651, 8564, 13532, 393, 25412]",1.0,32,sast_risk,16,Hardcoded provider URI may expose sensitive paths or configurations,Low,32,,[]
‚úÖ Best Practice: Use constants or configuration files for repeated values like mem_cache_size_limit,"[26486, 227, 6705, 19939, 25, 5765, 38491, 393, 8398, 3696, 329, 5100, 3815, 588, 1066, 62, 23870, 62, 7857, 62, 32374]",1.0,32,best_practice,16,Use constants or configuration files for repeated values like mem_cache_size_limit,,32,,[]
üß† ML Signal: Custom expression provider configuration can indicate specific data processing needs,"[8582, 100, 254, 10373, 26484, 25, 8562, 5408, 10131, 8398, 460, 7603, 2176, 1366, 7587, 2476]",0.5,32,ml_signal,16,Custom expression provider configuration can indicate specific data processing needs,,32,,[]
üß† ML Signal: Custom feature provider configuration can indicate specific feature extraction needs,"[8582, 100, 254, 10373, 26484, 25, 8562, 3895, 10131, 8398, 460, 7603, 2176, 3895, 22236, 2476]",0.5,57,ml_signal,34,Custom feature provider configuration can indicate specific feature extraction needs,,32,"                ""class"": ""LocalDatasetProvider"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 4871, 1298, 366, 14565, 27354, 292, 316, 29495, 1600]"
üß† ML Signal: Custom dataset provider configuration can indicate specific dataset handling requirements,"[8582, 100, 254, 10373, 26484, 25, 8562, 27039, 10131, 8398, 460, 7603, 2176, 27039, 9041, 5359]",0.5,82,ml_signal,34,Custom dataset provider configuration can indicate specific dataset handling requirements,,57,"                ""class"": ""LocalDatasetProvider"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 4871, 1298, 366, 14565, 27354, 292, 316, 29495, 1600]"
üß† ML Signal: Initialization of stocks_list with specific stock codes can indicate a pattern for stock selection,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 14420, 62, 4868, 351, 2176, 4283, 12416, 460, 7603, 257, 3912, 329, 4283, 6356]",1.0,92,ml_signal,43,Initialization of stocks_list with specific stock codes can indicate a pattern for stock selection,,82,    def test_basic(self):,"[220, 220, 220, 825, 1332, 62, 35487, 7, 944, 2599]"
"üß† ML Signal: Function name suggests this is a test case, useful for identifying test patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 1438, 5644, 428, 318, 257, 1332, 1339, 11, 4465, 329, 13720, 1332, 7572]",0.5,138,ml_signal,36,"Function name suggests this is a test case, useful for identifying test patterns",,92,"                    ""align_time"": False,  # Order book is not fixed, so it can't be align to a shared fixed frequency calendar","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 31494, 62, 2435, 1298, 10352, 11, 220, 1303, 8284, 1492, 318, 407, 5969, 11, 523, 340, 460, 470, 307, 10548, 284, 257, 4888, 5969, 8373, 11845]"
‚ö†Ô∏è SAST Risk (Low): Printing data frames can expose sensitive data in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 1366, 13431, 460, 15651, 8564, 1366, 287, 17259]",0.5,164,sast_risk,44,Printing data frames can expose sensitive data in logs,Low,138,        # NOTE: this data contains a lot of zeros in $askX and $bidX,"[220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 428, 1366, 4909, 257, 1256, 286, 1976, 27498, 287, 720, 2093, 55, 290, 720, 14065, 55]"
üß† ML Signal: Use of a method named 'features' suggests feature extraction or data transformation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 3706, 705, 40890, 6, 5644, 3895, 22236, 393, 1366, 13389]",0.5,177,ml_signal,45,Use of a method named 'features' suggests feature extraction or data transformation,,164,        df = D.features(,"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 360, 13, 40890, 7]"
‚ö†Ô∏è SAST Risk (Low): Printing data frames can expose sensitive data in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 1366, 13431, 460, 15651, 8564, 1366, 287, 17259]",0.5,207,sast_risk,47,Printing data frames can expose sensitive data in logs,Low,177,"            fields=[""$ask1"", ""$ask2"", ""$bid1"", ""$bid2""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7032, 28, 14692, 3, 2093, 16, 1600, 17971, 2093, 17, 1600, 17971, 14065, 16, 1600, 17971, 14065, 17, 33116]"
"üß† ML Signal: Function definition with a specific naming pattern, useful for identifying test functions","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 19264, 3912, 11, 4465, 329, 13720, 1332, 5499]",0.5,224,ml_signal,48,"Function definition with a specific naming pattern, useful for identifying test functions",,207,"            freq=""ticks"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2030, 80, 2625, 83, 3378, 1600]"
"üß† ML Signal: Use of a method that extracts features, indicating data processing or transformation","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 326, 32139, 3033, 11, 12739, 1366, 7587, 393, 13389]",1.0,241,ml_signal,48,"Use of a method that extracts features, indicating data processing or transformation",,224,"            freq=""ticks"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2030, 80, 2625, 83, 3378, 1600]"
"üß† ML Signal: Use of a specific resampling method, indicating time series data manipulation","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 581, 321, 11347, 2446, 11, 12739, 640, 2168, 1366, 17512]",0.5,273,ml_signal,55,"Use of a specific resampling method, indicating time series data manipulation",,241,"        df = D.features(self.stocks_list, fields=[""$ask1""], freq=""ticks"")","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 360, 13, 40890, 7, 944, 13, 29522, 62, 4868, 11, 7032, 28, 14692, 3, 2093, 16, 33116, 2030, 80, 2625, 83, 3378, 4943]"
‚ö†Ô∏è SAST Risk (Low): Printing data frames can expose sensitive data in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 1366, 13431, 460, 15651, 8564, 1366, 287, 17259]",1.0,273,sast_risk,57,Printing data frames can expose sensitive data in logs,Low,273,,[]
üß† ML Signal: Use of a method named 'features' suggests a pattern for feature extraction in data processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 3706, 705, 40890, 6, 5644, 257, 3912, 329, 3895, 22236, 287, 1366, 7587]",0.5,273,ml_signal,57,Use of a method named 'features' suggests a pattern for feature extraction in data processing,,273,,[]
üß† ML Signal: Use of 'self.stocks_list' indicates a pattern of using instance variables for data input,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 705, 944, 13, 29522, 62, 4868, 6, 9217, 257, 3912, 286, 1262, 4554, 9633, 329, 1366, 5128]",0.5,273,ml_signal,57,Use of 'self.stocks_list' indicates a pattern of using instance variables for data input,,273,,[]
üß† ML Signal: Use of 'fields' parameter suggests a pattern for selecting specific data attributes,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 705, 25747, 6, 11507, 5644, 257, 3912, 329, 17246, 2176, 1366, 12608]",0.5,293,ml_signal,64,Use of 'fields' parameter suggests a pattern for selecting specific data attributes,,273,"            end_time=""20210101"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 2625, 1238, 2481, 486, 486, 1600]"
üß† ML Signal: Use of 'freq' parameter indicates a pattern for specifying data granularity,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 705, 19503, 80, 6, 11507, 9217, 257, 3912, 329, 31577, 1366, 19468, 33737]",0.5,313,ml_signal,64,Use of 'freq' parameter indicates a pattern for specifying data granularity,,293,"            end_time=""20210101"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 2625, 1238, 2481, 486, 486, 1600]"
üß† ML Signal: Use of 'start_time' and 'end_time' parameters suggests a pattern for time-bounded data queries,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 705, 9688, 62, 2435, 6, 290, 705, 437, 62, 2435, 6, 10007, 5644, 257, 3912, 329, 640, 12, 65, 6302, 1366, 20743]",0.5,321,ml_signal,65,Use of 'start_time' and 'end_time' parameters suggests a pattern for time-bounded data queries,,313,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Printing data frames can expose sensitive data in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 1366, 13431, 460, 15651, 8564, 1366, 287, 17259]",1.0,332,sast_risk,66,Printing data frames can expose sensitive data in logs,Low,321,        print(df),"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 7568, 8]"
üß† ML Signal: Usage of a method that fetches features from a data source,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 326, 11351, 2052, 3033, 422, 257, 1366, 2723]",1.0,343,ml_signal,66,Usage of a method that fetches features from a data source,,332,        print(df),"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 7568, 8]"
‚ö†Ô∏è SAST Risk (Low): Printing data frames can expose sensitive data in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 1366, 13431, 460, 15651, 8564, 1366, 287, 17259]",1.0,363,sast_risk,74,Printing data frames can expose sensitive data in logs,Low,343,"            end_time=""20210101"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 2625, 1238, 2481, 486, 486, 1600]"
üß† ML Signal: Expression pattern for financial data resampling,"[8582, 100, 254, 10373, 26484, 25, 41986, 3912, 329, 3176, 1366, 581, 321, 11347]",1.0,371,ml_signal,75,Expression pattern for financial data resampling,,363,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Dynamic generation of expressions for data resampling,"[8582, 100, 254, 10373, 26484, 25, 26977, 5270, 286, 14700, 329, 1366, 581, 321, 11347]",1.0,379,ml_signal,75,Dynamic generation of expressions for data resampling,,371,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of @staticmethod decorator for methods that do not access instance data,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 12708, 24396, 11705, 1352, 329, 5050, 326, 466, 407, 1895, 4554, 1366]",1.0,399,best_practice,84,Use of @staticmethod decorator for methods that do not access instance data,,379,"            end_time=""20210101"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 2625, 1238, 2481, 486, 486, 1600]"
üß† ML Signal: Use of string formatting and list comprehension,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 33313, 290, 1351, 35915]",1.0,418,ml_signal,81,Use of string formatting and list comprehension,,399,"            fields=[""$function_code""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7032, 28, 14692, 3, 8818, 62, 8189, 33116]"
‚úÖ Best Practice: Use of list comprehension for concise and efficient iteration,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 35915, 329, 35327, 290, 6942, 24415]",0.5,434,best_practice,82,Use of list comprehension for concise and efficient iteration,,418,"            freq=""order"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2030, 80, 2625, 2875, 1600]"
üß† ML Signal: String manipulation and dynamic variable naming pattern,"[8582, 100, 254, 10373, 26484, 25, 10903, 17512, 290, 8925, 7885, 19264, 3912]",0.5,454,ml_signal,84,String manipulation and dynamic variable naming pattern,,434,"            end_time=""20210101"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 2435, 2625, 1238, 2481, 486, 486, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if 'name' or 'method' are derived from untrusted input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 3672, 6, 393, 705, 24396, 6, 389, 10944, 422, 1418, 81, 8459, 5128]",1.0,462,sast_risk,85,Potential risk if 'name' or 'method' are derived from untrusted input,Low,454,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of f-string for clearer and more efficient string formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 22363, 290, 517, 6942, 4731, 33313]",0.5,473,best_practice,86,Use of f-string for clearer and more efficient string formatting,,462,        print(df),"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 7568, 8]"
üß† ML Signal: Iterating over a fixed range to generate expressions,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 5969, 2837, 284, 7716, 14700]",1.0,486,ml_signal,88,Iterating over a fixed range to generate expressions,,473,    # Here are some popular expressions for high-frequency,"[220, 220, 220, 1303, 3423, 389, 617, 2968, 14700, 329, 1029, 12, 35324]"
üß† ML Signal: Constructing dynamic column names based on loop variables,"[8582, 100, 254, 10373, 26484, 25, 28407, 278, 8925, 5721, 3891, 1912, 319, 9052, 9633]",1.0,531,ml_signal,90,Constructing dynamic column names based on loop variables,,486,"    expr_sum_buy_ask_1 = ""(TResample($ask1, '1min', 'last') + TResample($bid1, '1min', 'last'))""","[220, 220, 220, 44052, 62, 16345, 62, 17846, 62, 2093, 62, 16, 796, 30629, 51, 4965, 1403, 16763, 2093, 16, 11, 705, 16, 1084, 3256, 705, 12957, 11537, 1343, 309, 4965, 1403, 16763, 14065, 16, 11, 705, 16, 1084, 3256, 705, 12957, 6, 4008, 1]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `self.stocks_list` or `exprs` contain untrusted data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 944, 13, 29522, 62, 4868, 63, 393, 4600, 31937, 82, 63, 3994, 1418, 81, 8459, 1366]",0.5,543,sast_risk,92,Potential risk if `self.stocks_list` or `exprs` contain untrusted data,Low,531,"        ""TResample(""","[220, 220, 220, 220, 220, 220, 220, 366, 51, 4965, 1403, 7203]"
‚úÖ Best Practice: Assigning meaningful column names to the DataFrame,"[26486, 227, 6705, 19939, 25, 2195, 38944, 11570, 5721, 3891, 284, 262, 6060, 19778]",1.0,560,best_practice,94,Assigning meaningful column names to the DataFrame,,543,"        + "", '1min', 'sum')""","[220, 220, 220, 220, 220, 220, 220, 1343, 33172, 705, 16, 1084, 3256, 705, 16345, 11537, 1]"
‚ö†Ô∏è SAST Risk (Low): Printing DataFrame can expose sensitive data in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 6060, 19778, 460, 15651, 8564, 1366, 287, 17259]",1.0,566,sast_risk,97,Printing DataFrame can expose sensitive data in logs,Low,560,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
üß† ML Signal: Use of lambda functions for dynamic string generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499, 329, 8925, 4731, 5270]",1.0,583,ml_signal,94,Use of lambda functions for dynamic string generation,,566,"        + "", '1min', 'sum')""","[220, 220, 220, 220, 220, 220, 220, 1343, 33172, 705, 16, 1084, 3256, 705, 16345, 11537, 1]"
üß† ML Signal: Use of lambda functions for dynamic string generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499, 329, 8925, 4731, 5270]",1.0,589,ml_signal,97,Use of lambda functions for dynamic string generation,,583,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
‚úÖ Best Practice: Initialize lists before loops for better readability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8341, 878, 23607, 329, 1365, 1100, 1799]",0.5,600,best_practice,102,Initialize lists before loops for better readability,,589,        exprs = [],"[220, 220, 220, 220, 220, 220, 220, 1033, 3808, 796, 17635]"
üß† ML Signal: Use of extend method to add multiple items to a list,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 9117, 2446, 284, 751, 3294, 3709, 284, 257, 1351]",1.0,647,ml_signal,106,Use of extend method to add multiple items to a list,,600,"                exprs.append(f""TResample(${name}{i}, '1min', 'mean') / ({self.total_volume})"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1033, 3808, 13, 33295, 7, 69, 1, 51, 4965, 1403, 16763, 90, 3672, 18477, 72, 5512, 705, 16, 1084, 3256, 705, 32604, 11537, 1220, 37913, 944, 13, 23350, 62, 29048, 30072, 4943]"
üß† ML Signal: Use of extend method to add multiple items to a list,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 9117, 2446, 284, 751, 3294, 3709, 284, 257, 1351]",1.0,677,ml_signal,108,Use of extend method to add multiple items to a list,,647,"        df = D.features(self.stocks_list, fields=exprs, freq=""ticks"")","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 360, 13, 40890, 7, 944, 13, 29522, 62, 4868, 11, 7032, 28, 31937, 82, 11, 2030, 80, 2625, 83, 3378, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if D.features is not properly validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 360, 13, 40890, 318, 407, 6105, 31031, 393, 5336, 36951]",1.0,690,sast_risk,109,Potential risk if D.features is not properly validated or sanitized,Low,677,        df.columns = names,"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 3891]"
‚úÖ Best Practice: Assign meaningful column names for better data frame readability,"[26486, 227, 6705, 19939, 25, 2195, 570, 11570, 5721, 3891, 329, 1365, 1366, 5739, 1100, 1799]",1.0,701,best_practice,112,Assign meaningful column names for better data frame readability,,690,    # 2) some often used papers;,"[220, 220, 220, 1303, 362, 8, 617, 1690, 973, 9473, 26]"
‚ö†Ô∏è SAST Risk (Low): Printing data frames can expose sensitive data in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 1366, 13431, 460, 15651, 8564, 1366, 287, 17259]",1.0,713,sast_risk,114,Printing data frames can expose sensitive data in logs,Low,701,        spread_func = (,"[220, 220, 220, 220, 220, 220, 220, 4104, 62, 20786, 796, 357]"
üß† ML Signal: Use of lambda function for dynamic string formatting,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 2163, 329, 8925, 4731, 33313]",0.5,726,ml_signal,109,Use of lambda function for dynamic string formatting,,713,        df.columns = names,"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 3891]"
‚úÖ Best Practice: Consider using a named function instead of a lambda for better readability,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 3706, 2163, 2427, 286, 257, 37456, 329, 1365, 1100, 1799]",0.5,737,best_practice,112,Consider using a named function instead of a lambda for better readability,,726,    # 2) some often used papers;,"[220, 220, 220, 1303, 362, 8, 617, 1690, 973, 9473, 26]"
üß† ML Signal: Iterating over a range to generate expressions,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 2837, 284, 7716, 14700]",0.5,745,ml_signal,116,Iterating over a range to generate expressions,,737,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Dynamic generation of variable names,"[8582, 100, 254, 10373, 26484, 25, 26977, 5270, 286, 7885, 3891]",0.5,802,ml_signal,118,Dynamic generation of variable names,,745,"            lambda index: f""2 * TResample(($ask{index} + $bid{index})/2, '1min', 'last') / {self.expr_sum_buy_ask_1}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37456, 6376, 25, 277, 1, 17, 1635, 309, 4965, 1403, 7, 16763, 2093, 90, 9630, 92, 1343, 720, 14065, 90, 9630, 92, 20679, 17, 11, 705, 16, 1084, 3256, 705, 12957, 11537, 1220, 1391, 944, 13, 31937, 62, 16345, 62, 17846, 62, 2093, 62, 16, 36786]"
‚ö†Ô∏è SAST Risk (Low): Potential for index out of range if list is empty before extend,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6376, 503, 286, 2837, 611, 1351, 318, 6565, 878, 9117]",0.5,802,sast_risk,120,Potential for index out of range if list is empty before extend,Low,802,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for index out of range if list is empty before extend,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6376, 503, 286, 2837, 611, 1351, 318, 6565, 878, 9117]",0.5,812,sast_risk,122,Potential for index out of range if list is empty before extend,Low,802,        names = [],"[220, 220, 220, 220, 220, 220, 220, 3891, 796, 17635]"
üß† ML Signal: Use of external library function with dynamic parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 7097, 5888, 2163, 351, 8925, 10007]",0.5,842,ml_signal,124,Use of external library function with dynamic parameters,,812,"            exprs.extend([spread_func(i), mid_func(i)])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1033, 3808, 13, 2302, 437, 26933, 43639, 62, 20786, 7, 72, 828, 3095, 62, 20786, 7, 72, 8, 12962]"
üß† ML Signal: Assigning dynamic column names to a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 8925, 5721, 3891, 284, 257, 6060, 19778]",0.5,872,ml_signal,126,Assigning dynamic column names to a DataFrame,,842,"        df = D.features(self.stocks_list, fields=exprs, freq=""ticks"")","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 360, 13, 40890, 7, 944, 13, 29522, 62, 4868, 11, 7032, 28, 31937, 82, 11, 2030, 80, 2625, 83, 3378, 4943]"
üß† ML Signal: Outputting DataFrame to console,"[8582, 100, 254, 10373, 26484, 25, 25235, 889, 6060, 19778, 284, 8624]",0.5,883,ml_signal,128,Outputting DataFrame to console,,872,        print(df),"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 7568, 8]"
üß† ML Signal: Iterating over a list of strings to generate expressions dynamically,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 13042, 284, 7716, 14700, 32366]",1.0,918,ml_signal,125,Iterating over a list of strings to generate expressions dynamically,,883,"            names.extend([f""p_spread_{i}"", f""p_mid_{i}""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3891, 13, 2302, 437, 26933, 69, 1, 79, 62, 43639, 23330, 72, 92, 1600, 277, 1, 79, 62, 13602, 23330, 72, 92, 8973, 8]"
üß† ML Signal: Appending dynamically generated names to a list,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 32366, 7560, 3891, 284, 257, 1351]",0.5,931,ml_signal,127,Appending dynamically generated names to a list,,918,        df.columns = names,"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 3891]"
üß† ML Signal: Using a method to generate features based on dynamic expressions,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 2446, 284, 7716, 3033, 1912, 319, 8925, 14700]",1.0,931,ml_signal,129,Using a method to generate features based on dynamic expressions,,931,,[]
üß† ML Signal: Renaming DataFrame columns based on dynamically generated names,"[8582, 100, 254, 10373, 26484, 25, 7152, 3723, 6060, 19778, 15180, 1912, 319, 32366, 7560, 3891]",0.5,945,ml_signal,131,Renaming DataFrame columns based on dynamically generated names,,931,        expr3_func1 = (,"[220, 220, 220, 220, 220, 220, 220, 44052, 18, 62, 20786, 16, 796, 357]"
‚ö†Ô∏è SAST Risk (Low): Printing DataFrame can expose sensitive data in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 6060, 19778, 460, 15651, 8564, 1366, 287, 17259]",1.0,959,sast_risk,131,Printing DataFrame can expose sensitive data in logs,Low,945,        expr3_func1 = (,"[220, 220, 220, 220, 220, 220, 220, 44052, 18, 62, 20786, 16, 796, 357]"
üß† ML Signal: Use of formatted strings to dynamically create expressions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 39559, 13042, 284, 32366, 2251, 14700]",1.0,979,ml_signal,135,Use of formatted strings to dynamically create expressions,,959,"            for i in range(1, 10):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 1312, 287, 2837, 7, 16, 11, 838, 2599]"
üß† ML Signal: Use of a DataFrame to store and manipulate data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 6060, 19778, 284, 3650, 290, 18510, 1366]",0.5,1014,ml_signal,137,Use of a DataFrame to store and manipulate data,,979,"                names = [f""p_diff_{name}_{i}_{i+1}""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3891, 796, 685, 69, 1, 79, 62, 26069, 23330, 3672, 92, 23330, 72, 92, 23330, 72, 10, 16, 92, 8973]"
‚úÖ Best Practice: Assigning meaningful column names to a DataFrame,"[26486, 227, 6705, 19939, 25, 2195, 38944, 11570, 5721, 3891, 284, 257, 6060, 19778]",0.5,1049,best_practice,139,Assigning meaningful column names to a DataFrame,,1014,"        names.extend([""p_diff_ask_10_1"", ""p_diff_bid_1_10""])","[220, 220, 220, 220, 220, 220, 220, 3891, 13, 2302, 437, 7, 14692, 79, 62, 26069, 62, 2093, 62, 940, 62, 16, 1600, 366, 79, 62, 26069, 62, 14065, 62, 16, 62, 940, 8973, 8]"
‚ö†Ô∏è SAST Risk (Low): Printing data frames can expose sensitive data in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 1366, 13431, 460, 15651, 8564, 1366, 287, 17259]",1.0,1062,sast_risk,141,Printing data frames can expose sensitive data in logs,Low,1049,        df.columns = names,"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 3891]"
üß† ML Signal: Use of lambda function to dynamically generate expressions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 2163, 284, 32366, 7716, 14700]",1.0,1075,ml_signal,141,Use of lambda function to dynamically generate expressions,,1062,        df.columns = names,"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 3891]"
üß† ML Signal: Initialization of lists to store expressions and names,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 8341, 284, 3650, 14700, 290, 3891]",0.5,1086,ml_signal,145,Initialization of lists to store expressions and names,,1075,        exprs = [],"[220, 220, 220, 220, 220, 220, 220, 1033, 3808, 796, 17635]"
üß† ML Signal: Iterating over a fixed range and list of names,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 5969, 2837, 290, 1351, 286, 3891]",0.5,1129,ml_signal,148,Iterating over a fixed range and list of names,,1086,"            exprs.append(f""(({ self.total_func(name, 'mean')}) / 10) / {self.total_volume}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1033, 3808, 13, 33295, 7, 69, 18109, 15090, 2116, 13, 23350, 62, 20786, 7, 3672, 11, 705, 32604, 11537, 30072, 1220, 838, 8, 1220, 1391, 944, 13, 23350, 62, 29048, 92, 4943]"
üß† ML Signal: Appending formatted strings to a list,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 39559, 13042, 284, 257, 1351]",0.5,1159,ml_signal,151,Appending formatted strings to a list,,1129,"        df = D.features(self.stocks_list, fields=exprs, freq=""ticks"")","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 360, 13, 40890, 7, 944, 13, 29522, 62, 4868, 11, 7032, 28, 31937, 82, 11, 2030, 80, 2625, 83, 3378, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if D.features is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 360, 13, 40890, 318, 407, 6105, 31031]",0.5,1180,sast_risk,160,Potential risk if D.features is not properly validated,Low,1159,"        names = [""p_accspread"", ""v_accspread""]","[220, 220, 220, 220, 220, 220, 220, 3891, 796, 14631, 79, 62, 4134, 43639, 1600, 366, 85, 62, 4134, 43639, 8973]"
üß† ML Signal: Assigning new column names to a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 649, 5721, 3891, 284, 257, 6060, 19778]",1.0,1210,ml_signal,162,Assigning new column names to a DataFrame,,1180,"        df = D.features(self.stocks_list, fields=exprs, freq=""ticks"")","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 360, 13, 40890, 7, 944, 13, 29522, 62, 4868, 11, 7032, 28, 31937, 82, 11, 2030, 80, 2625, 83, 3378, 4943]"
‚ö†Ô∏è SAST Risk (Low): Printing data frames can expose sensitive data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 1366, 13431, 460, 15651, 8564, 1366]",1.0,1223,sast_risk,163,Printing data frames can expose sensitive data,Low,1210,        df.columns = names,"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 3891]"
üß† ML Signal: Function definition with parameters indicating a pattern for data processing,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 329, 1366, 7587]",0.5,1244,ml_signal,160,Function definition with parameters indicating a pattern for data processing,,1223,"        names = [""p_accspread"", ""v_accspread""]","[220, 220, 220, 220, 220, 220, 220, 3891, 796, 14631, 79, 62, 4134, 43639, 1600, 366, 85, 62, 4134, 43639, 8973]"
‚ö†Ô∏è SAST Risk (Low): Potential injection risk if inputs are not validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 16954, 2526, 611, 17311, 389, 407, 31031, 393, 5336, 36951]",1.0,1274,sast_risk,162,Potential injection risk if inputs are not validated or sanitized,Low,1244,"        df = D.features(self.stocks_list, fields=exprs, freq=""ticks"")","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 360, 13, 40890, 7, 944, 13, 29522, 62, 4868, 11, 7032, 28, 31937, 82, 11, 2030, 80, 2625, 83, 3378, 4943]"
üß† ML Signal: Use of string formatting with dynamic inputs,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 33313, 351, 8925, 17311]",0.5,1287,ml_signal,163,Use of string formatting with dynamic inputs,,1274,        df.columns = names,"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 3891]"
‚úÖ Best Practice: Use f-string for clear and concise string interpolation,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 8841, 329, 1598, 290, 35327, 4731, 39555, 341]",0.5,1300,best_practice,163,Use f-string for clear and concise string interpolation,,1287,        df.columns = names,"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 3891]"
üß† ML Signal: Use of lambda functions for dynamic string generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499, 329, 8925, 4731, 5270]",1.0,1313,ml_signal,163,Use of lambda functions for dynamic string generation,,1300,        df.columns = names,"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 3891]"
‚ö†Ô∏è SAST Risk (Low): Potential for code injection if inputs are not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 2438, 16954, 611, 17311, 389, 407, 5336, 36951]",0.5,1342,sast_risk,166,Potential for code injection if inputs are not sanitized,Low,1313,    #  (p|v)_diff_(ask|bid|asize|bsize)_(time_interval),"[220, 220, 220, 1303, 220, 357, 79, 91, 85, 8, 62, 26069, 41052, 2093, 91, 14065, 91, 292, 1096, 91, 1443, 1096, 8, 41052, 2435, 62, 3849, 2100, 8]"
üß† ML Signal: Pattern of using lambda functions to generate expressions,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 1262, 37456, 5499, 284, 7716, 14700]",0.5,1352,ml_signal,168,Pattern of using lambda functions to generate expressions,,1342,        t = 3,"[220, 220, 220, 220, 220, 220, 220, 256, 796, 513]"
üß† ML Signal: Use of descriptive variable names for data columns,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 35644, 7885, 3891, 329, 1366, 15180]",0.5,1421,ml_signal,170,Use of descriptive variable names for data columns,,1352,"            lambda name, index, method: f'2 * (TResample(${name}{index}, ""{t}s"", ""{method}"") - Ref(TResample(${name}{index}, ""{t}s"", ""{method}""), 1)) / {t}'","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37456, 1438, 11, 6376, 11, 2446, 25, 277, 6, 17, 1635, 357, 51, 4965, 1403, 16763, 90, 3672, 18477, 9630, 5512, 45144, 83, 92, 82, 1600, 45144, 24396, 92, 4943, 532, 6524, 7, 51, 4965, 1403, 16763, 90, 3672, 18477, 9630, 5512, 45144, 83, 92, 82, 1600, 45144, 24396, 92, 12340, 352, 4008, 1220, 1391, 83, 92, 6]"
üß† ML Signal: Use of a method to generate features from a list of expressions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 284, 7716, 3033, 422, 257, 1351, 286, 14700]",0.5,1432,ml_signal,172,Use of a method to generate features from a list of expressions,,1421,        exprs = [],"[220, 220, 220, 220, 220, 220, 220, 1033, 3808, 796, 17635]"
‚úÖ Best Practice: Assigning meaningful column names to a DataFrame,"[26486, 227, 6705, 19939, 25, 2195, 38944, 11570, 5721, 3891, 284, 257, 6060, 19778]",0.5,1442,best_practice,173,Assigning meaningful column names to a DataFrame,,1432,        names = [],"[220, 220, 220, 220, 220, 220, 220, 3891, 796, 17635]"
üß† ML Signal: Use of print statements for debugging or output,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3601, 6299, 329, 28769, 393, 5072]",0.5,1462,ml_signal,176,Use of print statements for debugging or output,,1442,                exprs.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1033, 3808, 13, 33295, 7]"
üß† ML Signal: Use of dictionary for mapping or translation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 329, 16855, 393, 11059]",1.0,1478,ml_signal,178,Use of dictionary for mapping or translation,,1462,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of lambda function to dynamically create expressions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 2163, 284, 32366, 2251, 14700]",1.0,1488,ml_signal,173,Use of lambda function to dynamically create expressions,,1478,        names = [],"[220, 220, 220, 220, 220, 220, 220, 3891, 796, 17635]"
üß† ML Signal: Use of lists to store expressions and names,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 8341, 284, 3650, 14700, 290, 3891]",1.0,1549,ml_signal,177,Use of lists to store expressions and names,,1488,"                    f""TResample({expr6_price_func(name, i, 'last')}, '1min', 'mean') / {self.expr_sum_buy_ask_1}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 51, 4965, 1403, 15090, 31937, 21, 62, 20888, 62, 20786, 7, 3672, 11, 1312, 11, 705, 12957, 11537, 5512, 705, 16, 1084, 3256, 705, 32604, 11537, 1220, 1391, 944, 13, 31937, 62, 16345, 62, 17846, 62, 2093, 62, 16, 36786]"
üß† ML Signal: Appending dynamically generated expressions to a list,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 32366, 7560, 14700, 284, 257, 1351]",1.0,1572,ml_signal,182,Appending dynamically generated expressions to a list,,1549,"            for name in [""asize"", ""bsize""]:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 1438, 287, 14631, 292, 1096, 1600, 366, 1443, 1096, 1, 5974]"
üß† ML Signal: Appending dynamically generated names to a list,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 32366, 7560, 3891, 284, 257, 1351]",1.0,1606,ml_signal,184,Appending dynamically generated names to a list,,1572,"                names.append(f""v_diff_{name}{i}_{t}s"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3891, 13, 33295, 7, 69, 1, 85, 62, 26069, 23330, 3672, 18477, 72, 92, 23330, 83, 92, 82, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if D.features is not properly validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 360, 13, 40890, 318, 407, 6105, 31031, 393, 5336, 36951]",1.0,1636,sast_risk,186,Potential risk if D.features is not properly validated or sanitized,Low,1606,"        df = D.features(self.stocks_list, fields=exprs, freq=""ticks"")","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 360, 13, 40890, 7, 944, 13, 29522, 62, 4868, 11, 7032, 28, 31937, 82, 11, 2030, 80, 2625, 83, 3378, 4943]"
‚úÖ Best Practice: Assigning meaningful column names to DataFrame,"[26486, 227, 6705, 19939, 25, 2195, 38944, 11570, 5721, 3891, 284, 6060, 19778]",0.5,1647,best_practice,188,Assigning meaningful column names to DataFrame,,1636,        print(df),"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 7568, 8]"
‚ö†Ô∏è SAST Risk (Low): Printing DataFrame can expose sensitive data in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 6060, 19778, 460, 15651, 8564, 1366, 287, 17259]",1.0,1647,sast_risk,189,Printing DataFrame can expose sensitive data in logs,Low,1647,,[]
üß† ML Signal: Function definition with parameters indicating a pattern for processing or transforming data,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 329, 7587, 393, 25449, 1366]",1.0,1677,ml_signal,186,Function definition with parameters indicating a pattern for processing or transforming data,,1647,"        df = D.features(self.stocks_list, fields=exprs, freq=""ticks"")","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 360, 13, 40890, 7, 944, 13, 29522, 62, 4868, 11, 7032, 28, 31937, 82, 11, 2030, 80, 2625, 83, 3378, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential for code injection if inputs are not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 2438, 16954, 611, 17311, 389, 407, 6105, 5336, 36951]",1.0,1688,sast_risk,188,Potential for code injection if inputs are not properly sanitized,Low,1677,        print(df),"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 7568, 8]"
üß† ML Signal: Use of f-string for dynamic string formatting,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 8925, 4731, 33313]",0.5,1688,ml_signal,189,Use of f-string for dynamic string formatting,,1688,,[]
‚úÖ Best Practice: Use of f-string for readability and performance,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 1100, 1799, 290, 2854]",1.0,1688,best_practice,189,Use of f-string for readability and performance,,1688,,[]
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and behavior of the test function.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 4069, 286, 262, 1332, 2163, 13]",0.5,1699,best_practice,188,Consider adding a docstring to describe the purpose and behavior of the test function.,,1688,        print(df),"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 7568, 8]"
‚úÖ Best Practice: Use a more descriptive name for the lambda function to improve readability.,"[26486, 227, 6705, 19939, 25, 5765, 257, 517, 35644, 1438, 329, 262, 37456, 2163, 284, 2987, 1100, 1799, 13]",0.5,1699,best_practice,189,Use a more descriptive name for the lambda function to improve readability.,,1699,,[]
üß† ML Signal: Iterating over fixed sets of values for 'funccode' and 'ordercode'.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 5969, 5621, 286, 3815, 329, 705, 12543, 535, 1098, 6, 290, 705, 585, 2798, 1098, 4458]",0.5,1728,ml_signal,196,Iterating over fixed sets of values for 'funccode' and 'ordercode'.,,1699,"    # create_dataset(7,  [""SH600000""], [expr7_2(""C"", 48)] )","[220, 220, 220, 1303, 2251, 62, 19608, 292, 316, 7, 22, 11, 220, 14631, 9693, 8054, 830, 33116, 685, 31937, 22, 62, 17, 7203, 34, 1600, 4764, 15437, 1267]"
üß† ML Signal: Appending generated expressions to a list.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 7560, 14700, 284, 257, 1351, 13]",1.0,1749,ml_signal,199,Appending generated expressions to a list.,,1728,"    def expr7_init(funccode, ordercode, time_interval):","[220, 220, 220, 825, 44052, 22, 62, 15003, 7, 12543, 535, 1098, 11, 1502, 8189, 11, 640, 62, 3849, 2100, 2599]"
üß† ML Signal: Appending generated names to a list.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 7560, 3891, 284, 257, 1351, 13]",1.0,1826,ml_signal,201,Appending generated names to a list.,,1749,"        return f""Rolling(Eq($function_code,  {ord(funccode)}) & Eq($order_kind ,{ord(ordercode)}), '{time_interval}s', 'sum') / Rolling($function_code, '{time_interval}s', 'count')""","[220, 220, 220, 220, 220, 220, 220, 1441, 277, 1, 26869, 278, 7, 36, 80, 16763, 8818, 62, 8189, 11, 220, 1391, 585, 7, 12543, 535, 1098, 8, 30072, 1222, 412, 80, 16763, 2875, 62, 11031, 837, 90, 585, 7, 585, 2798, 1098, 38165, 828, 705, 90, 2435, 62, 3849, 2100, 92, 82, 3256, 705, 16345, 11537, 1220, 21567, 16763, 8818, 62, 8189, 11, 705, 90, 2435, 62, 3849, 2100, 92, 82, 3256, 705, 9127, 11537, 1]"
‚ö†Ô∏è SAST Risk (Low): Ensure 'self.stocks_list' and 'exprs' are properly validated to prevent injection attacks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 944, 13, 29522, 62, 4868, 6, 290, 705, 31937, 82, 6, 389, 6105, 31031, 284, 2948, 16954, 3434, 13]",0.5,1826,sast_risk,202,Ensure 'self.stocks_list' and 'exprs' are properly validated to prevent injection attacks.,Low,1826,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure 'names' list matches the number of columns in 'df' to avoid potential errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 14933, 6, 1351, 7466, 262, 1271, 286, 15180, 287, 705, 7568, 6, 284, 3368, 2785, 8563, 13]",0.5,1851,sast_risk,205,Ensure 'names' list matches the number of columns in 'df' to avoid potential errors.,Low,1826,"        # NOTE: based on transaction frequency (i.e. freq=""transaction"")","[220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 1912, 319, 8611, 8373, 357, 72, 13, 68, 13, 2030, 80, 2625, 7645, 2673, 4943]"
‚ö†Ô∏è SAST Risk (Low): Printing data frames can expose sensitive data in logs.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 1366, 13431, 460, 15651, 8564, 1366, 287, 17259, 13]",0.5,1956,sast_risk,207,Printing data frames can expose sensitive data in logs.,Low,1851,"            lambda funccode, code, time_interval: f""TResample(Rolling(Eq($function_code,  {ord(funccode)}) & {code}($ask_order, $bid_order) , '{time_interval}s', 'sum')   / Rolling($function_code, '{time_interval}s', 'count') , '1min', 'mean')""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37456, 1257, 535, 1098, 11, 2438, 11, 640, 62, 3849, 2100, 25, 277, 1, 51, 4965, 1403, 7, 26869, 278, 7, 36, 80, 16763, 8818, 62, 8189, 11, 220, 1391, 585, 7, 12543, 535, 1098, 8, 30072, 1222, 1391, 8189, 92, 16763, 2093, 62, 2875, 11, 720, 14065, 62, 2875, 8, 837, 705, 90, 2435, 62, 3849, 2100, 92, 82, 3256, 705, 16345, 11537, 220, 220, 1220, 21567, 16763, 8818, 62, 8189, 11, 705, 90, 2435, 62, 3849, 2100, 92, 82, 3256, 705, 9127, 11537, 837, 705, 16, 1084, 3256, 705, 32604, 11537, 1]"
üß† ML Signal: Use of lambda functions for dynamic string formatting,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 5499, 329, 8925, 4731, 33313]",1.0,1956,ml_signal,202,Use of lambda functions for dynamic string formatting,,1956,,[]
üß† ML Signal: Use of list to store expressions for further processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 284, 3650, 14700, 329, 2252, 7587]",1.0,1969,ml_signal,206,Use of list to store expressions for further processing,,1956,        expr7_3 = (,"[220, 220, 220, 220, 220, 220, 220, 44052, 22, 62, 18, 796, 357]"
üß† ML Signal: Use of list to store column names for DataFrame,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 284, 3650, 5721, 3891, 329, 6060, 19778]",1.0,1977,ml_signal,208,Use of list to store column names for DataFrame,,1969,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if D.features is not properly validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 360, 13, 40890, 318, 407, 6105, 31031, 393, 5336, 36951]",1.0,2016,sast_risk,210,Potential risk if D.features is not properly validated or sanitized,Low,1977,"        exprs = [expr7_3(""C"", ""Gt"", ""3""), expr7_3(""C"", ""Lt"", ""3"")]","[220, 220, 220, 220, 220, 220, 220, 1033, 3808, 796, 685, 31937, 22, 62, 18, 7203, 34, 1600, 366, 38, 83, 1600, 366, 18, 12340, 44052, 22, 62, 18, 7203, 34, 1600, 366, 49578, 1600, 366, 18, 4943, 60]"
‚úÖ Best Practice: Explicitly setting DataFrame column names for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6060, 19778, 5721, 3891, 329, 16287]",1.0,2041,best_practice,211,Explicitly setting DataFrame column names for clarity,,2016,"        names = [""ca_intensity_3s"", ""cb_intensity_3s""]","[220, 220, 220, 220, 220, 220, 220, 3891, 796, 14631, 6888, 62, 47799, 62, 18, 82, 1600, 366, 21101, 62, 47799, 62, 18, 82, 8973]"
‚úÖ Best Practice: Use of print for debugging or output verification,"[26486, 227, 6705, 19939, 25, 5765, 286, 3601, 329, 28769, 393, 5072, 19637]",0.5,2052,best_practice,215,Use of print for debugging or output verification,,2041,        print(df),"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 7568, 8]"
üß† ML Signal: Use of f-strings for dynamic expression generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 37336, 329, 8925, 5408, 5270]",1.0,2077,ml_signal,211,Use of f-strings for dynamic expression generation,,2052,"        names = [""ca_intensity_3s"", ""cb_intensity_3s""]","[220, 220, 220, 220, 220, 220, 220, 3891, 796, 14631, 6888, 62, 47799, 62, 18, 82, 1600, 366, 21101, 62, 47799, 62, 18, 82, 8973]"
üß† ML Signal: Use of descriptive variable names for mapping expressions to names,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 35644, 7885, 3891, 329, 16855, 14700, 284, 3891]",0.5,2077,ml_signal,216,Use of descriptive variable names for mapping expressions to names,,2077,,[]
üß† ML Signal: Use of a method to generate features from expressions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 284, 7716, 3033, 422, 14700]",1.0,2077,ml_signal,218,Use of a method to generate features from expressions,,2077,,[]
‚úÖ Best Practice: Explicitly setting DataFrame column names for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6060, 19778, 5721, 3891, 329, 16287]",0.5,2092,best_practice,220,Explicitly setting DataFrame column names for clarity,,2077,        # NOTE: based on on order frequency,"[220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 1912, 319, 319, 1502, 8373]"
‚ö†Ô∏è SAST Risk (Low): Potential exposure of sensitive data through print statements,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 8564, 1366, 832, 3601, 6299]",0.5,2150,sast_risk,222,Potential exposure of sensitive data through print statements,Low,2092,"            lambda funccode, ordercode, time_interval: f""TResample({self.expr7_init(funccode, ordercode, time_interval)}, '1min', 'mean')""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37456, 1257, 535, 1098, 11, 1502, 8189, 11, 640, 62, 3849, 2100, 25, 277, 1, 51, 4965, 1403, 15090, 944, 13, 31937, 22, 62, 15003, 7, 12543, 535, 1098, 11, 1502, 8189, 11, 640, 62, 3849, 2100, 8, 5512, 705, 16, 1084, 3256, 705, 32604, 11537, 1]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and functionality of the test_exp_09_order method.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 11244, 286, 262, 1332, 62, 11201, 62, 2931, 62, 2875, 2446, 13]",0.5,2164,best_practice,219,Consider adding a docstring to describe the purpose and functionality of the test_exp_09_order method.,,2150,    def test_exp_07_2(self):,"[220, 220, 220, 825, 1332, 62, 11201, 62, 2998, 62, 17, 7, 944, 2599]"
‚úÖ Best Practice: Initialize lists outside of loops to avoid repeated initialization.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8341, 2354, 286, 23607, 284, 3368, 5100, 37588, 13]",0.5,2175,best_practice,221,Initialize lists outside of loops to avoid repeated initialization.,,2164,        expr7 = (,"[220, 220, 220, 220, 220, 220, 220, 44052, 22, 796, 357]"
üß† ML Signal: Iterating over combinations of codes suggests a pattern for generating expressions.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 17790, 286, 12416, 5644, 257, 3912, 329, 15453, 14700, 13]",0.5,2175,ml_signal,224,Iterating over combinations of codes suggests a pattern for generating expressions.,,2175,,[]
üß† ML Signal: Use of f-strings for dynamic expression generation.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 37336, 329, 8925, 5408, 5270, 13]",0.5,2194,ml_signal,227,Use of f-strings for dynamic expression generation.,,2175,"        for funccode in [""B"", ""S""]:","[220, 220, 220, 220, 220, 220, 220, 329, 1257, 535, 1098, 287, 14631, 33, 1600, 366, 50, 1, 5974]"
üß† ML Signal: Dynamic naming based on dictionary lookups and string concatenation.,"[8582, 100, 254, 10373, 26484, 25, 26977, 19264, 1912, 319, 22155, 804, 4739, 290, 4731, 1673, 36686, 341, 13]",0.5,2224,ml_signal,231,Dynamic naming based on dictionary lookups and string concatenation.,,2194,"        df = D.features(self.stocks_list, fields=exprs, freq=""transaction"")","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 360, 13, 40890, 7, 944, 13, 29522, 62, 4868, 11, 7032, 28, 31937, 82, 11, 2030, 80, 2625, 7645, 2673, 4943]"
‚ö†Ô∏è SAST Risk (Low): Ensure that self.stocks_list and exprs are validated to prevent injection or unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 2116, 13, 29522, 62, 4868, 290, 1033, 3808, 389, 31031, 284, 2948, 16954, 393, 10059, 4069, 13]",0.5,2235,sast_risk,233,Ensure that self.stocks_list and exprs are validated to prevent injection or unexpected behavior.,Low,2224,        print(df),"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 7568, 8]"
‚úÖ Best Practice: Ensure that the length of names matches the number of columns in df to avoid potential errors.,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 4129, 286, 3891, 7466, 262, 1271, 286, 15180, 287, 47764, 284, 3368, 2785, 8563, 13]",0.5,2241,best_practice,235,Ensure that the length of names matches the number of columns in df to avoid potential errors.,,2235,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
‚úÖ Best Practice: Consider using logging instead of print for better control over output in production environments.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072, 287, 3227, 12493, 13]",0.5,2317,best_practice,238,Consider using logging instead of print for better control over output in production environments.,,2241,"        return f""Rolling(Eq($function_code,  {ord(funccode)}) & {code}($ask_order, $bid_order) , '{time_interval}s', 'sum') / Rolling($function_code, '{time_interval}s', 'count')""","[220, 220, 220, 220, 220, 220, 220, 1441, 277, 1, 26869, 278, 7, 36, 80, 16763, 8818, 62, 8189, 11, 220, 1391, 585, 7, 12543, 535, 1098, 8, 30072, 1222, 1391, 8189, 92, 16763, 2093, 62, 2875, 11, 720, 14065, 62, 2875, 8, 837, 705, 90, 2435, 62, 3849, 2100, 92, 82, 3256, 705, 16345, 11537, 1220, 21567, 16763, 8818, 62, 8189, 11, 705, 90, 2435, 62, 3849, 2100, 92, 82, 3256, 705, 9127, 11537, 1]"
üß† ML Signal: Use of string formatting to create expressions dynamically,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 33313, 284, 2251, 14700, 32366]",1.0,2323,ml_signal,235,Use of string formatting to create expressions dynamically,,2317,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
‚ö†Ô∏è SAST Risk (Low): Potential for incorrect list comprehension inside append,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11491, 1351, 35915, 2641, 24443]",0.5,2323,sast_risk,239,Potential for incorrect list comprehension inside append,Low,2323,,[]
üß† ML Signal: Use of a custom method to generate features,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2183, 2446, 284, 7716, 3033]",0.5,2337,ml_signal,241,Use of a custom method to generate features,,2323,    def test_exp_08_1(self):,"[220, 220, 220, 825, 1332, 62, 11201, 62, 2919, 62, 16, 7, 944, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential mismatch between df columns and names list,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 46318, 1022, 47764, 15180, 290, 3891, 1351]",1.0,2432,sast_risk,243,Potential mismatch between df columns and names list,Low,2337,"            lambda funccode, ordercode, time_interval_short, time_interval_long: f""TResample(Gt({self.expr7_init(funccode, ordercode, time_interval_short)},{self.expr7_init(funccode, ordercode, time_interval_long)}), '1min', 'mean')""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37456, 1257, 535, 1098, 11, 1502, 8189, 11, 640, 62, 3849, 2100, 62, 19509, 11, 640, 62, 3849, 2100, 62, 6511, 25, 277, 1, 51, 4965, 1403, 7, 38, 83, 15090, 944, 13, 31937, 22, 62, 15003, 7, 12543, 535, 1098, 11, 1502, 8189, 11, 640, 62, 3849, 2100, 62, 19509, 8, 5512, 90, 944, 13, 31937, 22, 62, 15003, 7, 12543, 535, 1098, 11, 1502, 8189, 11, 640, 62, 3849, 2100, 62, 6511, 38165, 828, 705, 16, 1084, 3256, 705, 32604, 11537, 1]"
‚úÖ Best Practice: Use logging instead of print for better control over output,"[26486, 227, 6705, 19939, 25, 5765, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072]",1.0,2527,best_practice,243,Use logging instead of print for better control over output,,2432,"            lambda funccode, ordercode, time_interval_short, time_interval_long: f""TResample(Gt({self.expr7_init(funccode, ordercode, time_interval_short)},{self.expr7_init(funccode, ordercode, time_interval_long)}), '1min', 'mean')""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37456, 1257, 535, 1098, 11, 1502, 8189, 11, 640, 62, 3849, 2100, 62, 19509, 11, 640, 62, 3849, 2100, 62, 6511, 25, 277, 1, 51, 4965, 1403, 7, 38, 83, 15090, 944, 13, 31937, 22, 62, 15003, 7, 12543, 535, 1098, 11, 1502, 8189, 11, 640, 62, 3849, 2100, 62, 19509, 8, 5512, 90, 944, 13, 31937, 22, 62, 15003, 7, 12543, 535, 1098, 11, 1502, 8189, 11, 640, 62, 3849, 2100, 62, 6511, 38165, 828, 705, 16, 1084, 3256, 705, 32604, 11537, 1]"
‚úÖ Best Practice: Use of unittest framework for testing,"[26486, 227, 6705, 19939, 25, 5765, 286, 555, 715, 395, 9355, 329, 4856]",0.5,2622,best_practice,243,Use of unittest framework for testing,,2527,"            lambda funccode, ordercode, time_interval_short, time_interval_long: f""TResample(Gt({self.expr7_init(funccode, ordercode, time_interval_short)},{self.expr7_init(funccode, ordercode, time_interval_long)}), '1min', 'mean')""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37456, 1257, 535, 1098, 11, 1502, 8189, 11, 640, 62, 3849, 2100, 62, 19509, 11, 640, 62, 3849, 2100, 62, 6511, 25, 277, 1, 51, 4965, 1403, 7, 38, 83, 15090, 944, 13, 31937, 22, 62, 15003, 7, 12543, 535, 1098, 11, 1502, 8189, 11, 640, 62, 3849, 2100, 62, 19509, 8, 5512, 90, 944, 13, 31937, 22, 62, 15003, 7, 12543, 535, 1098, 11, 1502, 8189, 11, 640, 62, 3849, 2100, 62, 6511, 38165, 828, 705, 16, 1084, 3256, 705, 32604, 11537, 1]"

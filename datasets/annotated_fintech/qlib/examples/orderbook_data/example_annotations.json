[
  {
    "line": 2,
    "text": "# Licensed under the MIT License.",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 0.5,
    "tokens": [
      2,
      49962,
      739,
      262,
      17168,
      13789,
      13
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 4,
    "text": "from arctic.arctic import Arctic",
    "annotation": "\ud83e\udde0 ML Signal: Importing a library indicates usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      610,
      11048,
      13,
      283,
      11048,
      1330,
      15723
    ],
    "start_token": 7,
    "end_token": 15,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing a library indicates usage patterns"
  },
  {
    "line": 6,
    "text": "from qlib.data import D",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a library indicates usage patterns",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      7890,
      1330,
      360
    ],
    "start_token": 15,
    "end_token": 22,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5888,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a library indicates usage patterns"
  },
  {
    "line": 6,
    "text": "from qlib.data import D",
    "annotation": "\ud83e\udde0 ML Signal: Importing unittest suggests testing practices",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      7890,
      1330,
      360
    ],
    "start_token": 22,
    "end_token": 29,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      555,
      715,
      395,
      5644,
      4856,
      6593
    ],
    "label": "ml_signal",
    "reason": "Importing unittest suggests testing practices"
  },
  {
    "line": 5,
    "text": "import qlib",
    "annotation": "\u2705 Best Practice: Inheriting from unittest.TestCase to create a test class",
    "confidence": 0.5,
    "tokens": [
      11748,
      10662,
      8019
    ],
    "start_token": 29,
    "end_token": 32,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47025,
      1780,
      422,
      555,
      715,
      395,
      13,
      14402,
      20448,
      284,
      2251,
      257,
      1332,
      1398
    ],
    "label": "best_practice",
    "reason": "Inheriting from unittest.TestCase to create a test class"
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of qlib.init with specific parameters can indicate a pattern for initializing a data provider",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 32,
    "end_token": 32,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10662,
      8019,
      13,
      15003,
      351,
      2176,
      10007,
      460,
      7603,
      257,
      3912,
      329,
      4238,
      2890,
      257,
      1366,
      10131
    ],
    "label": "ml_signal",
    "reason": "Usage of qlib.init with specific parameters can indicate a pattern for initializing a data provider"
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded provider URI may expose sensitive paths or configurations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 32,
    "end_token": 32,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      10131,
      43975,
      743,
      15651,
      8564,
      13532,
      393,
      25412
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded provider URI may expose sensitive paths or configurations"
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\u2705 Best Practice: Use constants or configuration files for repeated values like mem_cache_size_limit",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 32,
    "end_token": 32,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      38491,
      393,
      8398,
      3696,
      329,
      5100,
      3815,
      588,
      1066,
      62,
      23870,
      62,
      7857,
      62,
      32374
    ],
    "label": "best_practice",
    "reason": "Use constants or configuration files for repeated values like mem_cache_size_limit"
  },
  {
    "line": 16,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Custom expression provider configuration can indicate specific data processing needs",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 32,
    "end_token": 32,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      5408,
      10131,
      8398,
      460,
      7603,
      2176,
      1366,
      7587,
      2476
    ],
    "label": "ml_signal",
    "reason": "Custom expression provider configuration can indicate specific data processing needs"
  },
  {
    "line": 34,
    "text": "                \"class\": \"LocalDatasetProvider\",",
    "annotation": "\ud83e\udde0 ML Signal: Custom feature provider configuration can indicate specific feature extraction needs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      4871,
      1298,
      366,
      14565,
      27354,
      292,
      316,
      29495,
      1600
    ],
    "start_token": 32,
    "end_token": 57,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      3895,
      10131,
      8398,
      460,
      7603,
      2176,
      3895,
      22236,
      2476
    ],
    "label": "ml_signal",
    "reason": "Custom feature provider configuration can indicate specific feature extraction needs"
  },
  {
    "line": 34,
    "text": "                \"class\": \"LocalDatasetProvider\",",
    "annotation": "\ud83e\udde0 ML Signal: Custom dataset provider configuration can indicate specific dataset handling requirements",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      4871,
      1298,
      366,
      14565,
      27354,
      292,
      316,
      29495,
      1600
    ],
    "start_token": 57,
    "end_token": 82,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      27039,
      10131,
      8398,
      460,
      7603,
      2176,
      27039,
      9041,
      5359
    ],
    "label": "ml_signal",
    "reason": "Custom dataset provider configuration can indicate specific dataset handling requirements"
  },
  {
    "line": 43,
    "text": "    def test_basic(self):",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of stocks_list with specific stock codes can indicate a pattern for stock selection",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      35487,
      7,
      944,
      2599
    ],
    "start_token": 82,
    "end_token": 92,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      14420,
      62,
      4868,
      351,
      2176,
      4283,
      12416,
      460,
      7603,
      257,
      3912,
      329,
      4283,
      6356
    ],
    "label": "ml_signal",
    "reason": "Initialization of stocks_list with specific stock codes can indicate a pattern for stock selection"
  },
  {
    "line": 36,
    "text": "                    \"align_time\": False,  # Order book is not fixed, so it can't be align to a shared fixed frequency calendar",
    "annotation": "\ud83e\udde0 ML Signal: Function name suggests this is a test case, useful for identifying test patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      31494,
      62,
      2435,
      1298,
      10352,
      11,
      220,
      1303,
      8284,
      1492,
      318,
      407,
      5969,
      11,
      523,
      340,
      460,
      470,
      307,
      10548,
      284,
      257,
      4888,
      5969,
      8373,
      11845
    ],
    "start_token": 92,
    "end_token": 138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      1438,
      5644,
      428,
      318,
      257,
      1332,
      1339,
      11,
      4465,
      329,
      13720,
      1332,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function name suggests this is a test case, useful for identifying test patterns"
  },
  {
    "line": 44,
    "text": "        # NOTE: this data contains a lot of zeros in $askX and $bidX",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing data frames can expose sensitive data in logs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      428,
      1366,
      4909,
      257,
      1256,
      286,
      1976,
      27498,
      287,
      720,
      2093,
      55,
      290,
      720,
      14065,
      55
    ],
    "start_token": 138,
    "end_token": 164,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      1366,
      13431,
      460,
      15651,
      8564,
      1366,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing data frames can expose sensitive data in logs"
  },
  {
    "line": 45,
    "text": "        df = D.features(",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method named 'features' suggests feature extraction or data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      360,
      13,
      40890,
      7
    ],
    "start_token": 164,
    "end_token": 177,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      3706,
      705,
      40890,
      6,
      5644,
      3895,
      22236,
      393,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of a method named 'features' suggests feature extraction or data transformation"
  },
  {
    "line": 47,
    "text": "            fields=[\"$ask1\", \"$ask2\", \"$bid1\", \"$bid2\"],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing data frames can expose sensitive data in logs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      28,
      14692,
      3,
      2093,
      16,
      1600,
      17971,
      2093,
      17,
      1600,
      17971,
      14065,
      16,
      1600,
      17971,
      14065,
      17,
      33116
    ],
    "start_token": 177,
    "end_token": 207,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      1366,
      13431,
      460,
      15651,
      8564,
      1366,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing data frames can expose sensitive data in logs"
  },
  {
    "line": 48,
    "text": "            freq=\"ticks\",",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a specific naming pattern, useful for identifying test functions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2030,
      80,
      2625,
      83,
      3378,
      1600
    ],
    "start_token": 207,
    "end_token": 224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2176,
      19264,
      3912,
      11,
      4465,
      329,
      13720,
      1332,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function definition with a specific naming pattern, useful for identifying test functions"
  },
  {
    "line": 48,
    "text": "            freq=\"ticks\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method that extracts features, indicating data processing or transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2030,
      80,
      2625,
      83,
      3378,
      1600
    ],
    "start_token": 224,
    "end_token": 241,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      326,
      32139,
      3033,
      11,
      12739,
      1366,
      7587,
      393,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of a method that extracts features, indicating data processing or transformation"
  },
  {
    "line": 55,
    "text": "        df = D.features(self.stocks_list, fields=[\"$ask1\"], freq=\"ticks\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of a specific resampling method, indicating time series data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      360,
      13,
      40890,
      7,
      944,
      13,
      29522,
      62,
      4868,
      11,
      7032,
      28,
      14692,
      3,
      2093,
      16,
      33116,
      2030,
      80,
      2625,
      83,
      3378,
      4943
    ],
    "start_token": 241,
    "end_token": 273,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2176,
      581,
      321,
      11347,
      2446,
      11,
      12739,
      640,
      2168,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Use of a specific resampling method, indicating time series data manipulation"
  },
  {
    "line": 57,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing data frames can expose sensitive data in logs",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 273,
    "end_token": 273,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      1366,
      13431,
      460,
      15651,
      8564,
      1366,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing data frames can expose sensitive data in logs"
  },
  {
    "line": 57,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method named 'features' suggests a pattern for feature extraction in data processing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 273,
    "end_token": 273,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      3706,
      705,
      40890,
      6,
      5644,
      257,
      3912,
      329,
      3895,
      22236,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of a method named 'features' suggests a pattern for feature extraction in data processing"
  },
  {
    "line": 57,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'self.stocks_list' indicates a pattern of using instance variables for data input",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 273,
    "end_token": 273,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      944,
      13,
      29522,
      62,
      4868,
      6,
      9217,
      257,
      3912,
      286,
      1262,
      4554,
      9633,
      329,
      1366,
      5128
    ],
    "label": "ml_signal",
    "reason": "Use of 'self.stocks_list' indicates a pattern of using instance variables for data input"
  },
  {
    "line": 64,
    "text": "            end_time=\"20210101\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'fields' parameter suggests a pattern for selecting specific data attributes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      2625,
      1238,
      2481,
      486,
      486,
      1600
    ],
    "start_token": 273,
    "end_token": 293,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      25747,
      6,
      11507,
      5644,
      257,
      3912,
      329,
      17246,
      2176,
      1366,
      12608
    ],
    "label": "ml_signal",
    "reason": "Use of 'fields' parameter suggests a pattern for selecting specific data attributes"
  },
  {
    "line": 64,
    "text": "            end_time=\"20210101\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'freq' parameter indicates a pattern for specifying data granularity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      2625,
      1238,
      2481,
      486,
      486,
      1600
    ],
    "start_token": 293,
    "end_token": 313,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      19503,
      80,
      6,
      11507,
      9217,
      257,
      3912,
      329,
      31577,
      1366,
      19468,
      33737
    ],
    "label": "ml_signal",
    "reason": "Use of 'freq' parameter indicates a pattern for specifying data granularity"
  },
  {
    "line": 65,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Use of 'start_time' and 'end_time' parameters suggests a pattern for time-bounded data queries",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 313,
    "end_token": 321,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      705,
      9688,
      62,
      2435,
      6,
      290,
      705,
      437,
      62,
      2435,
      6,
      10007,
      5644,
      257,
      3912,
      329,
      640,
      12,
      65,
      6302,
      1366,
      20743
    ],
    "label": "ml_signal",
    "reason": "Use of 'start_time' and 'end_time' parameters suggests a pattern for time-bounded data queries"
  },
  {
    "line": 66,
    "text": "        print(df)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing data frames can expose sensitive data in logs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      7568,
      8
    ],
    "start_token": 321,
    "end_token": 332,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      1366,
      13431,
      460,
      15651,
      8564,
      1366,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing data frames can expose sensitive data in logs"
  },
  {
    "line": 66,
    "text": "        print(df)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method that fetches features from a data source",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      7568,
      8
    ],
    "start_token": 332,
    "end_token": 343,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      326,
      11351,
      2052,
      3033,
      422,
      257,
      1366,
      2723
    ],
    "label": "ml_signal",
    "reason": "Usage of a method that fetches features from a data source"
  },
  {
    "line": 74,
    "text": "            end_time=\"20210101\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing data frames can expose sensitive data in logs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      2625,
      1238,
      2481,
      486,
      486,
      1600
    ],
    "start_token": 343,
    "end_token": 363,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      1366,
      13431,
      460,
      15651,
      8564,
      1366,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing data frames can expose sensitive data in logs"
  },
  {
    "line": 75,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Expression pattern for financial data resampling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 363,
    "end_token": 371,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41986,
      3912,
      329,
      3176,
      1366,
      581,
      321,
      11347
    ],
    "label": "ml_signal",
    "reason": "Expression pattern for financial data resampling"
  },
  {
    "line": 75,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic generation of expressions for data resampling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 371,
    "end_token": 379,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      5270,
      286,
      14700,
      329,
      1366,
      581,
      321,
      11347
    ],
    "label": "ml_signal",
    "reason": "Dynamic generation of expressions for data resampling"
  },
  {
    "line": 84,
    "text": "            end_time=\"20210101\",",
    "annotation": "\u2705 Best Practice: Use of @staticmethod decorator for methods that do not access instance data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      2625,
      1238,
      2481,
      486,
      486,
      1600
    ],
    "start_token": 379,
    "end_token": 399,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      12708,
      24396,
      11705,
      1352,
      329,
      5050,
      326,
      466,
      407,
      1895,
      4554,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of @staticmethod decorator for methods that do not access instance data"
  },
  {
    "line": 81,
    "text": "            fields=[\"$function_code\"],",
    "annotation": "\ud83e\udde0 ML Signal: Use of string formatting and list comprehension",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7032,
      28,
      14692,
      3,
      8818,
      62,
      8189,
      33116
    ],
    "start_token": 399,
    "end_token": 418,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4731,
      33313,
      290,
      1351,
      35915
    ],
    "label": "ml_signal",
    "reason": "Use of string formatting and list comprehension"
  },
  {
    "line": 82,
    "text": "            freq=\"order\",",
    "annotation": "\u2705 Best Practice: Use of list comprehension for concise and efficient iteration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2030,
      80,
      2625,
      2875,
      1600
    ],
    "start_token": 418,
    "end_token": 434,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1351,
      35915,
      329,
      35327,
      290,
      6942,
      24415
    ],
    "label": "best_practice",
    "reason": "Use of list comprehension for concise and efficient iteration"
  },
  {
    "line": 84,
    "text": "            end_time=\"20210101\",",
    "annotation": "\ud83e\udde0 ML Signal: String manipulation and dynamic variable naming pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      2435,
      2625,
      1238,
      2481,
      486,
      486,
      1600
    ],
    "start_token": 434,
    "end_token": 454,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10903,
      17512,
      290,
      8925,
      7885,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "String manipulation and dynamic variable naming pattern"
  },
  {
    "line": 85,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'name' or 'method' are derived from untrusted input",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 454,
    "end_token": 462,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      3672,
      6,
      393,
      705,
      24396,
      6,
      389,
      10944,
      422,
      1418,
      81,
      8459,
      5128
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'name' or 'method' are derived from untrusted input"
  },
  {
    "line": 86,
    "text": "        print(df)",
    "annotation": "\u2705 Best Practice: Use of f-string for clearer and more efficient string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      7568,
      8
    ],
    "start_token": 462,
    "end_token": 473,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      22363,
      290,
      517,
      6942,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Use of f-string for clearer and more efficient string formatting"
  },
  {
    "line": 88,
    "text": "    # Here are some popular expressions for high-frequency",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a fixed range to generate expressions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      3423,
      389,
      617,
      2968,
      14700,
      329,
      1029,
      12,
      35324
    ],
    "start_token": 473,
    "end_token": 486,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      5969,
      2837,
      284,
      7716,
      14700
    ],
    "label": "ml_signal",
    "reason": "Iterating over a fixed range to generate expressions"
  },
  {
    "line": 90,
    "text": "    expr_sum_buy_ask_1 = \"(TResample($ask1, '1min', 'last') + TResample($bid1, '1min', 'last'))\"",
    "annotation": "\ud83e\udde0 ML Signal: Constructing dynamic column names based on loop variables",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      44052,
      62,
      16345,
      62,
      17846,
      62,
      2093,
      62,
      16,
      796,
      30629,
      51,
      4965,
      1403,
      16763,
      2093,
      16,
      11,
      705,
      16,
      1084,
      3256,
      705,
      12957,
      11537,
      1343,
      309,
      4965,
      1403,
      16763,
      14065,
      16,
      11,
      705,
      16,
      1084,
      3256,
      705,
      12957,
      6,
      4008,
      1
    ],
    "start_token": 486,
    "end_token": 531,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28407,
      278,
      8925,
      5721,
      3891,
      1912,
      319,
      9052,
      9633
    ],
    "label": "ml_signal",
    "reason": "Constructing dynamic column names based on loop variables"
  },
  {
    "line": 92,
    "text": "        \"TResample(\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `self.stocks_list` or `exprs` contain untrusted data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      51,
      4965,
      1403,
      7203
    ],
    "start_token": 531,
    "end_token": 543,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      944,
      13,
      29522,
      62,
      4868,
      63,
      393,
      4600,
      31937,
      82,
      63,
      3994,
      1418,
      81,
      8459,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `self.stocks_list` or `exprs` contain untrusted data"
  },
  {
    "line": 94,
    "text": "        + \", '1min', 'sum')\"",
    "annotation": "\u2705 Best Practice: Assigning meaningful column names to the DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1343,
      33172,
      705,
      16,
      1084,
      3256,
      705,
      16345,
      11537,
      1
    ],
    "start_token": 543,
    "end_token": 560,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      11570,
      5721,
      3891,
      284,
      262,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Assigning meaningful column names to the DataFrame"
  },
  {
    "line": 97,
    "text": "    @staticmethod",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing DataFrame can expose sensitive data in logs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      12708,
      24396
    ],
    "start_token": 560,
    "end_token": 566,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      6060,
      19778,
      460,
      15651,
      8564,
      1366,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing DataFrame can expose sensitive data in logs"
  },
  {
    "line": 94,
    "text": "        + \", '1min', 'sum')\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda functions for dynamic string generation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1343,
      33172,
      705,
      16,
      1084,
      3256,
      705,
      16345,
      11537,
      1
    ],
    "start_token": 566,
    "end_token": 583,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      5499,
      329,
      8925,
      4731,
      5270
    ],
    "label": "ml_signal",
    "reason": "Use of lambda functions for dynamic string generation"
  },
  {
    "line": 97,
    "text": "    @staticmethod",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda functions for dynamic string generation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      12708,
      24396
    ],
    "start_token": 583,
    "end_token": 589,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      5499,
      329,
      8925,
      4731,
      5270
    ],
    "label": "ml_signal",
    "reason": "Use of lambda functions for dynamic string generation"
  },
  {
    "line": 102,
    "text": "        exprs = []",
    "annotation": "\u2705 Best Practice: Initialize lists before loops for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1033,
      3808,
      796,
      17635
    ],
    "start_token": 589,
    "end_token": 600,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      8341,
      878,
      23607,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Initialize lists before loops for better readability"
  },
  {
    "line": 106,
    "text": "                exprs.append(f\"TResample(${name}{i}, '1min', 'mean') / ({self.total_volume})\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of extend method to add multiple items to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1033,
      3808,
      13,
      33295,
      7,
      69,
      1,
      51,
      4965,
      1403,
      16763,
      90,
      3672,
      18477,
      72,
      5512,
      705,
      16,
      1084,
      3256,
      705,
      32604,
      11537,
      1220,
      37913,
      944,
      13,
      23350,
      62,
      29048,
      30072,
      4943
    ],
    "start_token": 600,
    "end_token": 647,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      9117,
      2446,
      284,
      751,
      3294,
      3709,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Use of extend method to add multiple items to a list"
  },
  {
    "line": 108,
    "text": "        df = D.features(self.stocks_list, fields=exprs, freq=\"ticks\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of extend method to add multiple items to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      360,
      13,
      40890,
      7,
      944,
      13,
      29522,
      62,
      4868,
      11,
      7032,
      28,
      31937,
      82,
      11,
      2030,
      80,
      2625,
      83,
      3378,
      4943
    ],
    "start_token": 647,
    "end_token": 677,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      9117,
      2446,
      284,
      751,
      3294,
      3709,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Use of extend method to add multiple items to a list"
  },
  {
    "line": 109,
    "text": "        df.columns = names",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if D.features is not properly validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      3891
    ],
    "start_token": 677,
    "end_token": 690,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      360,
      13,
      40890,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if D.features is not properly validated or sanitized"
  },
  {
    "line": 112,
    "text": "    # 2) some often used papers;",
    "annotation": "\u2705 Best Practice: Assign meaningful column names for better data frame readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      362,
      8,
      617,
      1690,
      973,
      9473,
      26
    ],
    "start_token": 690,
    "end_token": 701,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      570,
      11570,
      5721,
      3891,
      329,
      1365,
      1366,
      5739,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Assign meaningful column names for better data frame readability"
  },
  {
    "line": 114,
    "text": "        spread_func = (",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing data frames can expose sensitive data in logs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4104,
      62,
      20786,
      796,
      357
    ],
    "start_token": 701,
    "end_token": 713,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      1366,
      13431,
      460,
      15651,
      8564,
      1366,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing data frames can expose sensitive data in logs"
  },
  {
    "line": 109,
    "text": "        df.columns = names",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda function for dynamic string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      3891
    ],
    "start_token": 713,
    "end_token": 726,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      2163,
      329,
      8925,
      4731,
      33313
    ],
    "label": "ml_signal",
    "reason": "Use of lambda function for dynamic string formatting"
  },
  {
    "line": 112,
    "text": "    # 2) some often used papers;",
    "annotation": "\u2705 Best Practice: Consider using a named function instead of a lambda for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      362,
      8,
      617,
      1690,
      973,
      9473,
      26
    ],
    "start_token": 726,
    "end_token": 737,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      3706,
      2163,
      2427,
      286,
      257,
      37456,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Consider using a named function instead of a lambda for better readability"
  },
  {
    "line": 116,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a range to generate expressions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 737,
    "end_token": 745,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      2837,
      284,
      7716,
      14700
    ],
    "label": "ml_signal",
    "reason": "Iterating over a range to generate expressions"
  },
  {
    "line": 118,
    "text": "            lambda index: f\"2 * TResample(($ask{index} + $bid{index})/2, '1min', 'last') / {self.expr_sum_buy_ask_1}\"",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic generation of variable names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37456,
      6376,
      25,
      277,
      1,
      17,
      1635,
      309,
      4965,
      1403,
      7,
      16763,
      2093,
      90,
      9630,
      92,
      1343,
      720,
      14065,
      90,
      9630,
      92,
      20679,
      17,
      11,
      705,
      16,
      1084,
      3256,
      705,
      12957,
      11537,
      1220,
      1391,
      944,
      13,
      31937,
      62,
      16345,
      62,
      17846,
      62,
      2093,
      62,
      16,
      36786
    ],
    "start_token": 745,
    "end_token": 802,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      5270,
      286,
      7885,
      3891
    ],
    "label": "ml_signal",
    "reason": "Dynamic generation of variable names"
  },
  {
    "line": 120,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for index out of range if list is empty before extend",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 802,
    "end_token": 802,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6376,
      503,
      286,
      2837,
      611,
      1351,
      318,
      6565,
      878,
      9117
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for index out of range if list is empty before extend"
  },
  {
    "line": 122,
    "text": "        names = []",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for index out of range if list is empty before extend",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      17635
    ],
    "start_token": 802,
    "end_token": 812,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6376,
      503,
      286,
      2837,
      611,
      1351,
      318,
      6565,
      878,
      9117
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for index out of range if list is empty before extend"
  },
  {
    "line": 124,
    "text": "            exprs.extend([spread_func(i), mid_func(i)])",
    "annotation": "\ud83e\udde0 ML Signal: Use of external library function with dynamic parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1033,
      3808,
      13,
      2302,
      437,
      26933,
      43639,
      62,
      20786,
      7,
      72,
      828,
      3095,
      62,
      20786,
      7,
      72,
      8,
      12962
    ],
    "start_token": 812,
    "end_token": 842,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      7097,
      5888,
      2163,
      351,
      8925,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of external library function with dynamic parameters"
  },
  {
    "line": 126,
    "text": "        df = D.features(self.stocks_list, fields=exprs, freq=\"ticks\")",
    "annotation": "\ud83e\udde0 ML Signal: Assigning dynamic column names to a DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      360,
      13,
      40890,
      7,
      944,
      13,
      29522,
      62,
      4868,
      11,
      7032,
      28,
      31937,
      82,
      11,
      2030,
      80,
      2625,
      83,
      3378,
      4943
    ],
    "start_token": 842,
    "end_token": 872,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      8925,
      5721,
      3891,
      284,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Assigning dynamic column names to a DataFrame"
  },
  {
    "line": 128,
    "text": "        print(df)",
    "annotation": "\ud83e\udde0 ML Signal: Outputting DataFrame to console",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      7568,
      8
    ],
    "start_token": 872,
    "end_token": 883,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25235,
      889,
      6060,
      19778,
      284,
      8624
    ],
    "label": "ml_signal",
    "reason": "Outputting DataFrame to console"
  },
  {
    "line": 125,
    "text": "            names.extend([f\"p_spread_{i}\", f\"p_mid_{i}\"])",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of strings to generate expressions dynamically",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      13,
      2302,
      437,
      26933,
      69,
      1,
      79,
      62,
      43639,
      23330,
      72,
      92,
      1600,
      277,
      1,
      79,
      62,
      13602,
      23330,
      72,
      92,
      8973,
      8
    ],
    "start_token": 883,
    "end_token": 918,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      13042,
      284,
      7716,
      14700,
      32366
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of strings to generate expressions dynamically"
  },
  {
    "line": 127,
    "text": "        df.columns = names",
    "annotation": "\ud83e\udde0 ML Signal: Appending dynamically generated names to a list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      3891
    ],
    "start_token": 918,
    "end_token": 931,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      32366,
      7560,
      3891,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Appending dynamically generated names to a list"
  },
  {
    "line": 129,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Using a method to generate features based on dynamic expressions",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 931,
    "end_token": 931,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      257,
      2446,
      284,
      7716,
      3033,
      1912,
      319,
      8925,
      14700
    ],
    "label": "ml_signal",
    "reason": "Using a method to generate features based on dynamic expressions"
  },
  {
    "line": 131,
    "text": "        expr3_func1 = (",
    "annotation": "\ud83e\udde0 ML Signal: Renaming DataFrame columns based on dynamically generated names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      44052,
      18,
      62,
      20786,
      16,
      796,
      357
    ],
    "start_token": 931,
    "end_token": 945,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7152,
      3723,
      6060,
      19778,
      15180,
      1912,
      319,
      32366,
      7560,
      3891
    ],
    "label": "ml_signal",
    "reason": "Renaming DataFrame columns based on dynamically generated names"
  },
  {
    "line": 131,
    "text": "        expr3_func1 = (",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing DataFrame can expose sensitive data in logs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      44052,
      18,
      62,
      20786,
      16,
      796,
      357
    ],
    "start_token": 945,
    "end_token": 959,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      6060,
      19778,
      460,
      15651,
      8564,
      1366,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing DataFrame can expose sensitive data in logs"
  },
  {
    "line": 135,
    "text": "            for i in range(1, 10):",
    "annotation": "\ud83e\udde0 ML Signal: Use of formatted strings to dynamically create expressions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1312,
      287,
      2837,
      7,
      16,
      11,
      838,
      2599
    ],
    "start_token": 959,
    "end_token": 979,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      39559,
      13042,
      284,
      32366,
      2251,
      14700
    ],
    "label": "ml_signal",
    "reason": "Use of formatted strings to dynamically create expressions"
  },
  {
    "line": 137,
    "text": "                names = [f\"p_diff_{name}_{i}_{i+1}\"]",
    "annotation": "\ud83e\udde0 ML Signal: Use of a DataFrame to store and manipulate data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      685,
      69,
      1,
      79,
      62,
      26069,
      23330,
      3672,
      92,
      23330,
      72,
      92,
      23330,
      72,
      10,
      16,
      92,
      8973
    ],
    "start_token": 979,
    "end_token": 1014,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      6060,
      19778,
      284,
      3650,
      290,
      18510,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of a DataFrame to store and manipulate data"
  },
  {
    "line": 139,
    "text": "        names.extend([\"p_diff_ask_10_1\", \"p_diff_bid_1_10\"])",
    "annotation": "\u2705 Best Practice: Assigning meaningful column names to a DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      13,
      2302,
      437,
      7,
      14692,
      79,
      62,
      26069,
      62,
      2093,
      62,
      940,
      62,
      16,
      1600,
      366,
      79,
      62,
      26069,
      62,
      14065,
      62,
      16,
      62,
      940,
      8973,
      8
    ],
    "start_token": 1014,
    "end_token": 1049,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      11570,
      5721,
      3891,
      284,
      257,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Assigning meaningful column names to a DataFrame"
  },
  {
    "line": 141,
    "text": "        df.columns = names",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing data frames can expose sensitive data in logs",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      3891
    ],
    "start_token": 1049,
    "end_token": 1062,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      1366,
      13431,
      460,
      15651,
      8564,
      1366,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing data frames can expose sensitive data in logs"
  },
  {
    "line": 141,
    "text": "        df.columns = names",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda function to dynamically generate expressions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      3891
    ],
    "start_token": 1062,
    "end_token": 1075,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      2163,
      284,
      32366,
      7716,
      14700
    ],
    "label": "ml_signal",
    "reason": "Use of lambda function to dynamically generate expressions"
  },
  {
    "line": 145,
    "text": "        exprs = []",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of lists to store expressions and names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1033,
      3808,
      796,
      17635
    ],
    "start_token": 1075,
    "end_token": 1086,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      8341,
      284,
      3650,
      14700,
      290,
      3891
    ],
    "label": "ml_signal",
    "reason": "Initialization of lists to store expressions and names"
  },
  {
    "line": 148,
    "text": "            exprs.append(f\"(({ self.total_func(name, 'mean')}) / 10) / {self.total_volume}\")",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a fixed range and list of names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1033,
      3808,
      13,
      33295,
      7,
      69,
      18109,
      15090,
      2116,
      13,
      23350,
      62,
      20786,
      7,
      3672,
      11,
      705,
      32604,
      11537,
      30072,
      1220,
      838,
      8,
      1220,
      1391,
      944,
      13,
      23350,
      62,
      29048,
      92,
      4943
    ],
    "start_token": 1086,
    "end_token": 1129,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      5969,
      2837,
      290,
      1351,
      286,
      3891
    ],
    "label": "ml_signal",
    "reason": "Iterating over a fixed range and list of names"
  },
  {
    "line": 151,
    "text": "        df = D.features(self.stocks_list, fields=exprs, freq=\"ticks\")",
    "annotation": "\ud83e\udde0 ML Signal: Appending formatted strings to a list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      360,
      13,
      40890,
      7,
      944,
      13,
      29522,
      62,
      4868,
      11,
      7032,
      28,
      31937,
      82,
      11,
      2030,
      80,
      2625,
      83,
      3378,
      4943
    ],
    "start_token": 1129,
    "end_token": 1159,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      39559,
      13042,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Appending formatted strings to a list"
  },
  {
    "line": 160,
    "text": "        names = [\"p_accspread\", \"v_accspread\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if D.features is not properly validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      14631,
      79,
      62,
      4134,
      43639,
      1600,
      366,
      85,
      62,
      4134,
      43639,
      8973
    ],
    "start_token": 1159,
    "end_token": 1180,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      360,
      13,
      40890,
      318,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if D.features is not properly validated"
  },
  {
    "line": 162,
    "text": "        df = D.features(self.stocks_list, fields=exprs, freq=\"ticks\")",
    "annotation": "\ud83e\udde0 ML Signal: Assigning new column names to a DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      360,
      13,
      40890,
      7,
      944,
      13,
      29522,
      62,
      4868,
      11,
      7032,
      28,
      31937,
      82,
      11,
      2030,
      80,
      2625,
      83,
      3378,
      4943
    ],
    "start_token": 1180,
    "end_token": 1210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      649,
      5721,
      3891,
      284,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Assigning new column names to a DataFrame"
  },
  {
    "line": 163,
    "text": "        df.columns = names",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing data frames can expose sensitive data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      3891
    ],
    "start_token": 1210,
    "end_token": 1223,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      1366,
      13431,
      460,
      15651,
      8564,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing data frames can expose sensitive data"
  },
  {
    "line": 160,
    "text": "        names = [\"p_accspread\", \"v_accspread\"]",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters indicating a pattern for data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      14631,
      79,
      62,
      4134,
      43639,
      1600,
      366,
      85,
      62,
      4134,
      43639,
      8973
    ],
    "start_token": 1223,
    "end_token": 1244,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      12739,
      257,
      3912,
      329,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters indicating a pattern for data processing"
  },
  {
    "line": 162,
    "text": "        df = D.features(self.stocks_list, fields=exprs, freq=\"ticks\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential injection risk if inputs are not validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      360,
      13,
      40890,
      7,
      944,
      13,
      29522,
      62,
      4868,
      11,
      7032,
      28,
      31937,
      82,
      11,
      2030,
      80,
      2625,
      83,
      3378,
      4943
    ],
    "start_token": 1244,
    "end_token": 1274,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      16954,
      2526,
      611,
      17311,
      389,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential injection risk if inputs are not validated or sanitized"
  },
  {
    "line": 163,
    "text": "        df.columns = names",
    "annotation": "\ud83e\udde0 ML Signal: Use of string formatting with dynamic inputs",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      3891
    ],
    "start_token": 1274,
    "end_token": 1287,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4731,
      33313,
      351,
      8925,
      17311
    ],
    "label": "ml_signal",
    "reason": "Use of string formatting with dynamic inputs"
  },
  {
    "line": 163,
    "text": "        df.columns = names",
    "annotation": "\u2705 Best Practice: Use f-string for clear and concise string interpolation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      3891
    ],
    "start_token": 1287,
    "end_token": 1300,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      8841,
      329,
      1598,
      290,
      35327,
      4731,
      39555,
      341
    ],
    "label": "best_practice",
    "reason": "Use f-string for clear and concise string interpolation"
  },
  {
    "line": 163,
    "text": "        df.columns = names",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda functions for dynamic string generation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      3891
    ],
    "start_token": 1300,
    "end_token": 1313,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      5499,
      329,
      8925,
      4731,
      5270
    ],
    "label": "ml_signal",
    "reason": "Use of lambda functions for dynamic string generation"
  },
  {
    "line": 166,
    "text": "    #  (p|v)_diff_(ask|bid|asize|bsize)_(time_interval)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for code injection if inputs are not sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      220,
      357,
      79,
      91,
      85,
      8,
      62,
      26069,
      41052,
      2093,
      91,
      14065,
      91,
      292,
      1096,
      91,
      1443,
      1096,
      8,
      41052,
      2435,
      62,
      3849,
      2100,
      8
    ],
    "start_token": 1313,
    "end_token": 1342,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      2438,
      16954,
      611,
      17311,
      389,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for code injection if inputs are not sanitized"
  },
  {
    "line": 168,
    "text": "        t = 3",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of using lambda functions to generate expressions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      256,
      796,
      513
    ],
    "start_token": 1342,
    "end_token": 1352,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      1262,
      37456,
      5499,
      284,
      7716,
      14700
    ],
    "label": "ml_signal",
    "reason": "Pattern of using lambda functions to generate expressions"
  },
  {
    "line": 170,
    "text": "            lambda name, index, method: f'2 * (TResample(${name}{index}, \"{t}s\", \"{method}\") - Ref(TResample(${name}{index}, \"{t}s\", \"{method}\"), 1)) / {t}'",
    "annotation": "\ud83e\udde0 ML Signal: Use of descriptive variable names for data columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37456,
      1438,
      11,
      6376,
      11,
      2446,
      25,
      277,
      6,
      17,
      1635,
      357,
      51,
      4965,
      1403,
      16763,
      90,
      3672,
      18477,
      9630,
      5512,
      45144,
      83,
      92,
      82,
      1600,
      45144,
      24396,
      92,
      4943,
      532,
      6524,
      7,
      51,
      4965,
      1403,
      16763,
      90,
      3672,
      18477,
      9630,
      5512,
      45144,
      83,
      92,
      82,
      1600,
      45144,
      24396,
      92,
      12340,
      352,
      4008,
      1220,
      1391,
      83,
      92,
      6
    ],
    "start_token": 1352,
    "end_token": 1421,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      1366,
      15180
    ],
    "label": "ml_signal",
    "reason": "Use of descriptive variable names for data columns"
  },
  {
    "line": 172,
    "text": "        exprs = []",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method to generate features from a list of expressions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1033,
      3808,
      796,
      17635
    ],
    "start_token": 1421,
    "end_token": 1432,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      284,
      7716,
      3033,
      422,
      257,
      1351,
      286,
      14700
    ],
    "label": "ml_signal",
    "reason": "Use of a method to generate features from a list of expressions"
  },
  {
    "line": 173,
    "text": "        names = []",
    "annotation": "\u2705 Best Practice: Assigning meaningful column names to a DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      17635
    ],
    "start_token": 1432,
    "end_token": 1442,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      11570,
      5721,
      3891,
      284,
      257,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Assigning meaningful column names to a DataFrame"
  },
  {
    "line": 176,
    "text": "                exprs.append(",
    "annotation": "\ud83e\udde0 ML Signal: Use of print statements for debugging or output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1033,
      3808,
      13,
      33295,
      7
    ],
    "start_token": 1442,
    "end_token": 1462,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3601,
      6299,
      329,
      28769,
      393,
      5072
    ],
    "label": "ml_signal",
    "reason": "Use of print statements for debugging or output"
  },
  {
    "line": 178,
    "text": "                )",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary for mapping or translation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1462,
    "end_token": 1478,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      329,
      16855,
      393,
      11059
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary for mapping or translation"
  },
  {
    "line": 173,
    "text": "        names = []",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda function to dynamically create expressions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      17635
    ],
    "start_token": 1478,
    "end_token": 1488,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      2163,
      284,
      32366,
      2251,
      14700
    ],
    "label": "ml_signal",
    "reason": "Use of lambda function to dynamically create expressions"
  },
  {
    "line": 177,
    "text": "                    f\"TResample({expr6_price_func(name, i, 'last')}, '1min', 'mean') / {self.expr_sum_buy_ask_1}\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of lists to store expressions and names",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      51,
      4965,
      1403,
      15090,
      31937,
      21,
      62,
      20888,
      62,
      20786,
      7,
      3672,
      11,
      1312,
      11,
      705,
      12957,
      11537,
      5512,
      705,
      16,
      1084,
      3256,
      705,
      32604,
      11537,
      1220,
      1391,
      944,
      13,
      31937,
      62,
      16345,
      62,
      17846,
      62,
      2093,
      62,
      16,
      36786
    ],
    "start_token": 1488,
    "end_token": 1549,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      8341,
      284,
      3650,
      14700,
      290,
      3891
    ],
    "label": "ml_signal",
    "reason": "Use of lists to store expressions and names"
  },
  {
    "line": 182,
    "text": "            for name in [\"asize\", \"bsize\"]:",
    "annotation": "\ud83e\udde0 ML Signal: Appending dynamically generated expressions to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1438,
      287,
      14631,
      292,
      1096,
      1600,
      366,
      1443,
      1096,
      1,
      5974
    ],
    "start_token": 1549,
    "end_token": 1572,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      32366,
      7560,
      14700,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Appending dynamically generated expressions to a list"
  },
  {
    "line": 184,
    "text": "                names.append(f\"v_diff_{name}{i}_{t}s\")",
    "annotation": "\ud83e\udde0 ML Signal: Appending dynamically generated names to a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      13,
      33295,
      7,
      69,
      1,
      85,
      62,
      26069,
      23330,
      3672,
      18477,
      72,
      92,
      23330,
      83,
      92,
      82,
      4943
    ],
    "start_token": 1572,
    "end_token": 1606,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      32366,
      7560,
      3891,
      284,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Appending dynamically generated names to a list"
  },
  {
    "line": 186,
    "text": "        df = D.features(self.stocks_list, fields=exprs, freq=\"ticks\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if D.features is not properly validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      360,
      13,
      40890,
      7,
      944,
      13,
      29522,
      62,
      4868,
      11,
      7032,
      28,
      31937,
      82,
      11,
      2030,
      80,
      2625,
      83,
      3378,
      4943
    ],
    "start_token": 1606,
    "end_token": 1636,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      360,
      13,
      40890,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if D.features is not properly validated or sanitized"
  },
  {
    "line": 188,
    "text": "        print(df)",
    "annotation": "\u2705 Best Practice: Assigning meaningful column names to DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      7568,
      8
    ],
    "start_token": 1636,
    "end_token": 1647,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      11570,
      5721,
      3891,
      284,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Assigning meaningful column names to DataFrame"
  },
  {
    "line": 189,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing DataFrame can expose sensitive data in logs",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1647,
    "end_token": 1647,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      6060,
      19778,
      460,
      15651,
      8564,
      1366,
      287,
      17259
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing DataFrame can expose sensitive data in logs"
  },
  {
    "line": 186,
    "text": "        df = D.features(self.stocks_list, fields=exprs, freq=\"ticks\")",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters indicating a pattern for processing or transforming data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      360,
      13,
      40890,
      7,
      944,
      13,
      29522,
      62,
      4868,
      11,
      7032,
      28,
      31937,
      82,
      11,
      2030,
      80,
      2625,
      83,
      3378,
      4943
    ],
    "start_token": 1647,
    "end_token": 1677,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      12739,
      257,
      3912,
      329,
      7587,
      393,
      25449,
      1366
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters indicating a pattern for processing or transforming data"
  },
  {
    "line": 188,
    "text": "        print(df)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for code injection if inputs are not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      7568,
      8
    ],
    "start_token": 1677,
    "end_token": 1688,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      2438,
      16954,
      611,
      17311,
      389,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for code injection if inputs are not properly sanitized"
  },
  {
    "line": 189,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-string for dynamic string formatting",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1688,
    "end_token": 1688,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      8925,
      4731,
      33313
    ],
    "label": "ml_signal",
    "reason": "Use of f-string for dynamic string formatting"
  },
  {
    "line": 189,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of f-string for readability and performance",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1688,
    "end_token": 1688,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      8841,
      329,
      1100,
      1799,
      290,
      2854
    ],
    "label": "best_practice",
    "reason": "Use of f-string for readability and performance"
  },
  {
    "line": 188,
    "text": "        print(df)",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose and behavior of the test function.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      7568,
      8
    ],
    "start_token": 1688,
    "end_token": 1699,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      4069,
      286,
      262,
      1332,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose and behavior of the test function."
  },
  {
    "line": 189,
    "text": "",
    "annotation": "\u2705 Best Practice: Use a more descriptive name for the lambda function to improve readability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1699,
    "end_token": 1699,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      517,
      35644,
      1438,
      329,
      262,
      37456,
      2163,
      284,
      2987,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use a more descriptive name for the lambda function to improve readability."
  },
  {
    "line": 196,
    "text": "    # create_dataset(7,  [\"SH600000\"], [expr7_2(\"C\", 48)] )",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over fixed sets of values for 'funccode' and 'ordercode'.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      2251,
      62,
      19608,
      292,
      316,
      7,
      22,
      11,
      220,
      14631,
      9693,
      8054,
      830,
      33116,
      685,
      31937,
      22,
      62,
      17,
      7203,
      34,
      1600,
      4764,
      15437,
      1267
    ],
    "start_token": 1699,
    "end_token": 1728,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      5969,
      5621,
      286,
      3815,
      329,
      705,
      12543,
      535,
      1098,
      6,
      290,
      705,
      585,
      2798,
      1098,
      4458
    ],
    "label": "ml_signal",
    "reason": "Iterating over fixed sets of values for 'funccode' and 'ordercode'."
  },
  {
    "line": 199,
    "text": "    def expr7_init(funccode, ordercode, time_interval):",
    "annotation": "\ud83e\udde0 ML Signal: Appending generated expressions to a list.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      44052,
      22,
      62,
      15003,
      7,
      12543,
      535,
      1098,
      11,
      1502,
      8189,
      11,
      640,
      62,
      3849,
      2100,
      2599
    ],
    "start_token": 1728,
    "end_token": 1749,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      7560,
      14700,
      284,
      257,
      1351,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending generated expressions to a list."
  },
  {
    "line": 201,
    "text": "        return f\"Rolling(Eq($function_code,  {ord(funccode)}) & Eq($order_kind ,{ord(ordercode)}), '{time_interval}s', 'sum') / Rolling($function_code, '{time_interval}s', 'count')\"",
    "annotation": "\ud83e\udde0 ML Signal: Appending generated names to a list.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      277,
      1,
      26869,
      278,
      7,
      36,
      80,
      16763,
      8818,
      62,
      8189,
      11,
      220,
      1391,
      585,
      7,
      12543,
      535,
      1098,
      8,
      30072,
      1222,
      412,
      80,
      16763,
      2875,
      62,
      11031,
      837,
      90,
      585,
      7,
      585,
      2798,
      1098,
      38165,
      828,
      705,
      90,
      2435,
      62,
      3849,
      2100,
      92,
      82,
      3256,
      705,
      16345,
      11537,
      1220,
      21567,
      16763,
      8818,
      62,
      8189,
      11,
      705,
      90,
      2435,
      62,
      3849,
      2100,
      92,
      82,
      3256,
      705,
      9127,
      11537,
      1
    ],
    "start_token": 1749,
    "end_token": 1826,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      7560,
      3891,
      284,
      257,
      1351,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending generated names to a list."
  },
  {
    "line": 202,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'self.stocks_list' and 'exprs' are properly validated to prevent injection attacks.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1826,
    "end_token": 1826,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      944,
      13,
      29522,
      62,
      4868,
      6,
      290,
      705,
      31937,
      82,
      6,
      389,
      6105,
      31031,
      284,
      2948,
      16954,
      3434,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'self.stocks_list' and 'exprs' are properly validated to prevent injection attacks."
  },
  {
    "line": 205,
    "text": "        # NOTE: based on transaction frequency (i.e. freq=\"transaction\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'names' list matches the number of columns in 'df' to avoid potential errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      1912,
      319,
      8611,
      8373,
      357,
      72,
      13,
      68,
      13,
      2030,
      80,
      2625,
      7645,
      2673,
      4943
    ],
    "start_token": 1826,
    "end_token": 1851,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      14933,
      6,
      1351,
      7466,
      262,
      1271,
      286,
      15180,
      287,
      705,
      7568,
      6,
      284,
      3368,
      2785,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'names' list matches the number of columns in 'df' to avoid potential errors."
  },
  {
    "line": 207,
    "text": "            lambda funccode, code, time_interval: f\"TResample(Rolling(Eq($function_code,  {ord(funccode)}) & {code}($ask_order, $bid_order) , '{time_interval}s', 'sum')   / Rolling($function_code, '{time_interval}s', 'count') , '1min', 'mean')\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing data frames can expose sensitive data in logs.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37456,
      1257,
      535,
      1098,
      11,
      2438,
      11,
      640,
      62,
      3849,
      2100,
      25,
      277,
      1,
      51,
      4965,
      1403,
      7,
      26869,
      278,
      7,
      36,
      80,
      16763,
      8818,
      62,
      8189,
      11,
      220,
      1391,
      585,
      7,
      12543,
      535,
      1098,
      8,
      30072,
      1222,
      1391,
      8189,
      92,
      16763,
      2093,
      62,
      2875,
      11,
      720,
      14065,
      62,
      2875,
      8,
      837,
      705,
      90,
      2435,
      62,
      3849,
      2100,
      92,
      82,
      3256,
      705,
      16345,
      11537,
      220,
      220,
      1220,
      21567,
      16763,
      8818,
      62,
      8189,
      11,
      705,
      90,
      2435,
      62,
      3849,
      2100,
      92,
      82,
      3256,
      705,
      9127,
      11537,
      837,
      705,
      16,
      1084,
      3256,
      705,
      32604,
      11537,
      1
    ],
    "start_token": 1851,
    "end_token": 1956,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      1366,
      13431,
      460,
      15651,
      8564,
      1366,
      287,
      17259,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing data frames can expose sensitive data in logs."
  },
  {
    "line": 202,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda functions for dynamic string formatting",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1956,
    "end_token": 1956,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      5499,
      329,
      8925,
      4731,
      33313
    ],
    "label": "ml_signal",
    "reason": "Use of lambda functions for dynamic string formatting"
  },
  {
    "line": 206,
    "text": "        expr7_3 = (",
    "annotation": "\ud83e\udde0 ML Signal: Use of list to store expressions for further processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      44052,
      22,
      62,
      18,
      796,
      357
    ],
    "start_token": 1956,
    "end_token": 1969,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1351,
      284,
      3650,
      14700,
      329,
      2252,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of list to store expressions for further processing"
  },
  {
    "line": 208,
    "text": "        )",
    "annotation": "\ud83e\udde0 ML Signal: Use of list to store column names for DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1969,
    "end_token": 1977,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1351,
      284,
      3650,
      5721,
      3891,
      329,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Use of list to store column names for DataFrame"
  },
  {
    "line": 210,
    "text": "        exprs = [expr7_3(\"C\", \"Gt\", \"3\"), expr7_3(\"C\", \"Lt\", \"3\")]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if D.features is not properly validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1033,
      3808,
      796,
      685,
      31937,
      22,
      62,
      18,
      7203,
      34,
      1600,
      366,
      38,
      83,
      1600,
      366,
      18,
      12340,
      44052,
      22,
      62,
      18,
      7203,
      34,
      1600,
      366,
      49578,
      1600,
      366,
      18,
      4943,
      60
    ],
    "start_token": 1977,
    "end_token": 2016,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      360,
      13,
      40890,
      318,
      407,
      6105,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if D.features is not properly validated or sanitized"
  },
  {
    "line": 211,
    "text": "        names = [\"ca_intensity_3s\", \"cb_intensity_3s\"]",
    "annotation": "\u2705 Best Practice: Explicitly setting DataFrame column names for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      14631,
      6888,
      62,
      47799,
      62,
      18,
      82,
      1600,
      366,
      21101,
      62,
      47799,
      62,
      18,
      82,
      8973
    ],
    "start_token": 2016,
    "end_token": 2041,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      6060,
      19778,
      5721,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly setting DataFrame column names for clarity"
  },
  {
    "line": 215,
    "text": "        print(df)",
    "annotation": "\u2705 Best Practice: Use of print for debugging or output verification",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      7568,
      8
    ],
    "start_token": 2041,
    "end_token": 2052,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3601,
      329,
      28769,
      393,
      5072,
      19637
    ],
    "label": "best_practice",
    "reason": "Use of print for debugging or output verification"
  },
  {
    "line": 211,
    "text": "        names = [\"ca_intensity_3s\", \"cb_intensity_3s\"]",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-strings for dynamic expression generation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3891,
      796,
      14631,
      6888,
      62,
      47799,
      62,
      18,
      82,
      1600,
      366,
      21101,
      62,
      47799,
      62,
      18,
      82,
      8973
    ],
    "start_token": 2052,
    "end_token": 2077,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      37336,
      329,
      8925,
      5408,
      5270
    ],
    "label": "ml_signal",
    "reason": "Use of f-strings for dynamic expression generation"
  },
  {
    "line": 216,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of descriptive variable names for mapping expressions to names",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2077,
    "end_token": 2077,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      16855,
      14700,
      284,
      3891
    ],
    "label": "ml_signal",
    "reason": "Use of descriptive variable names for mapping expressions to names"
  },
  {
    "line": 218,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method to generate features from expressions",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2077,
    "end_token": 2077,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      284,
      7716,
      3033,
      422,
      14700
    ],
    "label": "ml_signal",
    "reason": "Use of a method to generate features from expressions"
  },
  {
    "line": 220,
    "text": "        # NOTE: based on on order frequency",
    "annotation": "\u2705 Best Practice: Explicitly setting DataFrame column names for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      24550,
      25,
      1912,
      319,
      319,
      1502,
      8373
    ],
    "start_token": 2077,
    "end_token": 2092,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      4634,
      6060,
      19778,
      5721,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly setting DataFrame column names for clarity"
  },
  {
    "line": 222,
    "text": "            lambda funccode, ordercode, time_interval: f\"TResample({self.expr7_init(funccode, ordercode, time_interval)}, '1min', 'mean')\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of sensitive data through print statements",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37456,
      1257,
      535,
      1098,
      11,
      1502,
      8189,
      11,
      640,
      62,
      3849,
      2100,
      25,
      277,
      1,
      51,
      4965,
      1403,
      15090,
      944,
      13,
      31937,
      22,
      62,
      15003,
      7,
      12543,
      535,
      1098,
      11,
      1502,
      8189,
      11,
      640,
      62,
      3849,
      2100,
      8,
      5512,
      705,
      16,
      1084,
      3256,
      705,
      32604,
      11537,
      1
    ],
    "start_token": 2092,
    "end_token": 2150,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      8564,
      1366,
      832,
      3601,
      6299
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of sensitive data through print statements"
  },
  {
    "line": 219,
    "text": "    def test_exp_07_2(self):",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose and functionality of the test_exp_09_order method.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      11201,
      62,
      2998,
      62,
      17,
      7,
      944,
      2599
    ],
    "start_token": 2150,
    "end_token": 2164,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      11244,
      286,
      262,
      1332,
      62,
      11201,
      62,
      2931,
      62,
      2875,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose and functionality of the test_exp_09_order method."
  },
  {
    "line": 221,
    "text": "        expr7 = (",
    "annotation": "\u2705 Best Practice: Initialize lists outside of loops to avoid repeated initialization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      44052,
      22,
      796,
      357
    ],
    "start_token": 2164,
    "end_token": 2175,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      8341,
      2354,
      286,
      23607,
      284,
      3368,
      5100,
      37588,
      13
    ],
    "label": "best_practice",
    "reason": "Initialize lists outside of loops to avoid repeated initialization."
  },
  {
    "line": 224,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over combinations of codes suggests a pattern for generating expressions.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2175,
    "end_token": 2175,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      17790,
      286,
      12416,
      5644,
      257,
      3912,
      329,
      15453,
      14700,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over combinations of codes suggests a pattern for generating expressions."
  },
  {
    "line": 227,
    "text": "        for funccode in [\"B\", \"S\"]:",
    "annotation": "\ud83e\udde0 ML Signal: Use of f-strings for dynamic expression generation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1257,
      535,
      1098,
      287,
      14631,
      33,
      1600,
      366,
      50,
      1,
      5974
    ],
    "start_token": 2175,
    "end_token": 2194,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      277,
      12,
      37336,
      329,
      8925,
      5408,
      5270,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of f-strings for dynamic expression generation."
  },
  {
    "line": 231,
    "text": "        df = D.features(self.stocks_list, fields=exprs, freq=\"transaction\")",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic naming based on dictionary lookups and string concatenation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      360,
      13,
      40890,
      7,
      944,
      13,
      29522,
      62,
      4868,
      11,
      7032,
      28,
      31937,
      82,
      11,
      2030,
      80,
      2625,
      7645,
      2673,
      4943
    ],
    "start_token": 2194,
    "end_token": 2224,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      19264,
      1912,
      319,
      22155,
      804,
      4739,
      290,
      4731,
      1673,
      36686,
      341,
      13
    ],
    "label": "ml_signal",
    "reason": "Dynamic naming based on dictionary lookups and string concatenation."
  },
  {
    "line": 233,
    "text": "        print(df)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that self.stocks_list and exprs are validated to prevent injection or unexpected behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      7568,
      8
    ],
    "start_token": 2224,
    "end_token": 2235,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      2116,
      13,
      29522,
      62,
      4868,
      290,
      1033,
      3808,
      389,
      31031,
      284,
      2948,
      16954,
      393,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that self.stocks_list and exprs are validated to prevent injection or unexpected behavior."
  },
  {
    "line": 235,
    "text": "    @staticmethod",
    "annotation": "\u2705 Best Practice: Ensure that the length of names matches the number of columns in df to avoid potential errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      12708,
      24396
    ],
    "start_token": 2235,
    "end_token": 2241,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      262,
      4129,
      286,
      3891,
      7466,
      262,
      1271,
      286,
      15180,
      287,
      47764,
      284,
      3368,
      2785,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure that the length of names matches the number of columns in df to avoid potential errors."
  },
  {
    "line": 238,
    "text": "        return f\"Rolling(Eq($function_code,  {ord(funccode)}) & {code}($ask_order, $bid_order) , '{time_interval}s', 'sum') / Rolling($function_code, '{time_interval}s', 'count')\"",
    "annotation": "\u2705 Best Practice: Consider using logging instead of print for better control over output in production environments.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      277,
      1,
      26869,
      278,
      7,
      36,
      80,
      16763,
      8818,
      62,
      8189,
      11,
      220,
      1391,
      585,
      7,
      12543,
      535,
      1098,
      8,
      30072,
      1222,
      1391,
      8189,
      92,
      16763,
      2093,
      62,
      2875,
      11,
      720,
      14065,
      62,
      2875,
      8,
      837,
      705,
      90,
      2435,
      62,
      3849,
      2100,
      92,
      82,
      3256,
      705,
      16345,
      11537,
      1220,
      21567,
      16763,
      8818,
      62,
      8189,
      11,
      705,
      90,
      2435,
      62,
      3849,
      2100,
      92,
      82,
      3256,
      705,
      9127,
      11537,
      1
    ],
    "start_token": 2241,
    "end_token": 2317,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072,
      287,
      3227,
      12493,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using logging instead of print for better control over output in production environments."
  },
  {
    "line": 235,
    "text": "    @staticmethod",
    "annotation": "\ud83e\udde0 ML Signal: Use of string formatting to create expressions dynamically",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      12708,
      24396
    ],
    "start_token": 2317,
    "end_token": 2323,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4731,
      33313,
      284,
      2251,
      14700,
      32366
    ],
    "label": "ml_signal",
    "reason": "Use of string formatting to create expressions dynamically"
  },
  {
    "line": 239,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for incorrect list comprehension inside append",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2323,
    "end_token": 2323,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11491,
      1351,
      35915,
      2641,
      24443
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for incorrect list comprehension inside append"
  },
  {
    "line": 241,
    "text": "    def test_exp_08_1(self):",
    "annotation": "\ud83e\udde0 ML Signal: Use of a custom method to generate features",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      11201,
      62,
      2919,
      62,
      16,
      7,
      944,
      2599
    ],
    "start_token": 2323,
    "end_token": 2337,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2183,
      2446,
      284,
      7716,
      3033
    ],
    "label": "ml_signal",
    "reason": "Use of a custom method to generate features"
  },
  {
    "line": 243,
    "text": "            lambda funccode, ordercode, time_interval_short, time_interval_long: f\"TResample(Gt({self.expr7_init(funccode, ordercode, time_interval_short)},{self.expr7_init(funccode, ordercode, time_interval_long)}), '1min', 'mean')\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential mismatch between df columns and names list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37456,
      1257,
      535,
      1098,
      11,
      1502,
      8189,
      11,
      640,
      62,
      3849,
      2100,
      62,
      19509,
      11,
      640,
      62,
      3849,
      2100,
      62,
      6511,
      25,
      277,
      1,
      51,
      4965,
      1403,
      7,
      38,
      83,
      15090,
      944,
      13,
      31937,
      22,
      62,
      15003,
      7,
      12543,
      535,
      1098,
      11,
      1502,
      8189,
      11,
      640,
      62,
      3849,
      2100,
      62,
      19509,
      8,
      5512,
      90,
      944,
      13,
      31937,
      22,
      62,
      15003,
      7,
      12543,
      535,
      1098,
      11,
      1502,
      8189,
      11,
      640,
      62,
      3849,
      2100,
      62,
      6511,
      38165,
      828,
      705,
      16,
      1084,
      3256,
      705,
      32604,
      11537,
      1
    ],
    "start_token": 2337,
    "end_token": 2432,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      46318,
      1022,
      47764,
      15180,
      290,
      3891,
      1351
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential mismatch between df columns and names list"
  },
  {
    "line": 243,
    "text": "            lambda funccode, ordercode, time_interval_short, time_interval_long: f\"TResample(Gt({self.expr7_init(funccode, ordercode, time_interval_short)},{self.expr7_init(funccode, ordercode, time_interval_long)}), '1min', 'mean')\"",
    "annotation": "\u2705 Best Practice: Use logging instead of print for better control over output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37456,
      1257,
      535,
      1098,
      11,
      1502,
      8189,
      11,
      640,
      62,
      3849,
      2100,
      62,
      19509,
      11,
      640,
      62,
      3849,
      2100,
      62,
      6511,
      25,
      277,
      1,
      51,
      4965,
      1403,
      7,
      38,
      83,
      15090,
      944,
      13,
      31937,
      22,
      62,
      15003,
      7,
      12543,
      535,
      1098,
      11,
      1502,
      8189,
      11,
      640,
      62,
      3849,
      2100,
      62,
      19509,
      8,
      5512,
      90,
      944,
      13,
      31937,
      22,
      62,
      15003,
      7,
      12543,
      535,
      1098,
      11,
      1502,
      8189,
      11,
      640,
      62,
      3849,
      2100,
      62,
      6511,
      38165,
      828,
      705,
      16,
      1084,
      3256,
      705,
      32604,
      11537,
      1
    ],
    "start_token": 2432,
    "end_token": 2527,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Use logging instead of print for better control over output"
  },
  {
    "line": 243,
    "text": "            lambda funccode, ordercode, time_interval_short, time_interval_long: f\"TResample(Gt({self.expr7_init(funccode, ordercode, time_interval_short)},{self.expr7_init(funccode, ordercode, time_interval_long)}), '1min', 'mean')\"",
    "annotation": "\u2705 Best Practice: Use of unittest framework for testing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37456,
      1257,
      535,
      1098,
      11,
      1502,
      8189,
      11,
      640,
      62,
      3849,
      2100,
      62,
      19509,
      11,
      640,
      62,
      3849,
      2100,
      62,
      6511,
      25,
      277,
      1,
      51,
      4965,
      1403,
      7,
      38,
      83,
      15090,
      944,
      13,
      31937,
      22,
      62,
      15003,
      7,
      12543,
      535,
      1098,
      11,
      1502,
      8189,
      11,
      640,
      62,
      3849,
      2100,
      62,
      19509,
      8,
      5512,
      90,
      944,
      13,
      31937,
      22,
      62,
      15003,
      7,
      12543,
      535,
      1098,
      11,
      1502,
      8189,
      11,
      640,
      62,
      3849,
      2100,
      62,
      6511,
      38165,
      828,
      705,
      16,
      1084,
      3256,
      705,
      32604,
      11537,
      1
    ],
    "start_token": 2527,
    "end_token": 2622,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      555,
      715,
      395,
      9355,
      329,
      4856
    ],
    "label": "best_practice",
    "reason": "Use of unittest framework for testing"
  }
]
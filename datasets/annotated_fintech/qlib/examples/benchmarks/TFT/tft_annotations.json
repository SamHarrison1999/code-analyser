[
  {
    "line": 6,
    "text": "import numpy as np",
    "annotation": "\u2705 Best Practice: Grouping imports into standard library, third-party, and local application sections improves readability.",
    "confidence": 0.5,
    "tokens": [
      11748,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 0,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      656,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      3586,
      9004,
      19575,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping imports into standard library, third-party, and local application sections improves readability."
  },
  {
    "line": 14,
    "text": "import os",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific datasets and models can indicate the type of ML tasks being performed.",
    "confidence": 0.5,
    "tokens": [
      11748,
      28686
    ],
    "start_token": 5,
    "end_token": 7,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      40522,
      290,
      4981,
      460,
      7603,
      262,
      2099,
      286,
      10373,
      8861,
      852,
      6157,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of specific datasets and models can indicate the type of ML tasks being performed."
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Defining allowed datasets can indicate constraints or preferences in data usage for ML tasks.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2896,
      3191,
      3142,
      40522,
      460,
      7603,
      17778,
      393,
      15387,
      287,
      1366,
      8748,
      329,
      10373,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Defining allowed datasets can indicate constraints or preferences in data usage for ML tasks."
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Dataset settings with feature and label columns are crucial for training ML models.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7,
    "end_token": 7,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16092,
      292,
      316,
      6460,
      351,
      3895,
      290,
      6167,
      15180,
      389,
      8780,
      329,
      3047,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Dataset settings with feature and label columns are crucial for training ML models."
  },
  {
    "line": 69,
    "text": "            \"VOLUME2\",",
    "annotation": "\ud83e\udde0 ML Signal: Function for data preprocessing, common in ML pipelines",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      44558,
      38340,
      17,
      1600
    ],
    "start_token": 7,
    "end_token": 23,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      329,
      1366,
      662,
      36948,
      11,
      2219,
      287,
      10373,
      31108
    ],
    "label": "ml_signal",
    "reason": "Function for data preprocessing, common in ML pipelines"
  },
  {
    "line": 70,
    "text": "            \"HIGH2\",",
    "annotation": "\u2705 Best Practice: Function definition for modularity and reusability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      39,
      18060,
      17,
      1600
    ],
    "start_token": 23,
    "end_token": 39,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      6770,
      329,
      26507,
      414,
      290,
      302,
      385,
      1799
    ],
    "label": "best_practice",
    "reason": "Function definition for modularity and reusability"
  },
  {
    "line": 72,
    "text": "            \"VOLUME8\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of DataFrame and groupby, common in data manipulation tasks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      44558,
      38340,
      23,
      1600
    ],
    "start_token": 39,
    "end_token": 55,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6060,
      19778,
      290,
      1448,
      1525,
      11,
      2219,
      287,
      1366,
      17512,
      8861
    ],
    "label": "ml_signal",
    "reason": "Use of DataFrame and groupby, common in data manipulation tasks"
  },
  {
    "line": 73,
    "text": "            \"VOLUME11\",",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      44558,
      38340,
      1157,
      1600
    ],
    "start_token": 55,
    "end_token": 71,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility"
  },
  {
    "line": 74,
    "text": "        ],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'instrument' column is not present in data_df",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16589
    ],
    "start_token": 71,
    "end_token": 79,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      259,
      43872,
      6,
      5721,
      318,
      407,
      1944,
      287,
      1366,
      62,
      7568
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'instrument' column is not present in data_df"
  },
  {
    "line": 71,
    "text": "            \"LOW4\",",
    "annotation": "\ud83e\udde0 ML Signal: Function to fill missing values in a DataFrame, common in data preprocessing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      43,
      3913,
      19,
      1600
    ],
    "start_token": 79,
    "end_token": 95,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      6070,
      4814,
      3815,
      287,
      257,
      6060,
      19778,
      11,
      2219,
      287,
      1366,
      662,
      36948
    ],
    "label": "ml_signal",
    "reason": "Function to fill missing values in a DataFrame, common in data preprocessing"
  },
  {
    "line": 73,
    "text": "            \"VOLUME11\",",
    "annotation": "\u2705 Best Practice: Use of .copy() to avoid modifying the original DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      44558,
      38340,
      1157,
      1600
    ],
    "start_token": 95,
    "end_token": 111,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      764,
      30073,
      3419,
      284,
      3368,
      30620,
      262,
      2656,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Use of .copy() to avoid modifying the original DataFrame"
  },
  {
    "line": 74,
    "text": "        ],",
    "annotation": "\ud83e\udde0 ML Signal: Identifying feature columns by excluding those containing 'label'",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16589
    ],
    "start_token": 111,
    "end_token": 119,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11440,
      4035,
      3895,
      15180,
      416,
      23494,
      883,
      7268,
      705,
      18242,
      6
    ],
    "label": "ml_signal",
    "reason": "Identifying feature columns by excluding those containing 'label'"
  },
  {
    "line": 77,
    "text": "}",
    "annotation": "\ud83e\udde0 ML Signal: Grouping by 'datetime' and filling NaN values with the mean, a common data imputation technique",
    "confidence": 0.5,
    "tokens": [
      92
    ],
    "start_token": 119,
    "end_token": 120,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4912,
      278,
      416,
      705,
      19608,
      8079,
      6,
      290,
      12591,
      11013,
      45,
      3815,
      351,
      262,
      1612,
      11,
      257,
      2219,
      1366,
      848,
      7094,
      8173
    ],
    "label": "ml_signal",
    "reason": "Grouping by 'datetime' and filling NaN values with the mean, a common data imputation technique"
  },
  {
    "line": 80,
    "text": "def get_shifted_label(data_df, shifts=5, col_shift=\"LABEL0\"):",
    "annotation": "\u2705 Best Practice: Assigning the filled DataFrame back to the original DataFrame's feature columns",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      1477,
      21715,
      62,
      18242,
      7,
      7890,
      62,
      7568,
      11,
      15381,
      28,
      20,
      11,
      951,
      62,
      30846,
      2625,
      48780,
      3698,
      15,
      1,
      2599
    ],
    "start_token": 120,
    "end_token": 145,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      38944,
      262,
      5901,
      6060,
      19778,
      736,
      284,
      262,
      2656,
      6060,
      19778,
      338,
      3895,
      15180
    ],
    "label": "best_practice",
    "reason": "Assigning the filled DataFrame back to the original DataFrame's feature columns"
  },
  {
    "line": 80,
    "text": "def get_shifted_label(data_df, shifts=5, col_shift=\"LABEL0\"):",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataFrame after preprocessing, typical in data transformation functions",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      1477,
      21715,
      62,
      18242,
      7,
      7890,
      62,
      7568,
      11,
      15381,
      28,
      20,
      11,
      951,
      62,
      30846,
      2625,
      48780,
      3698,
      15,
      1,
      2599
    ],
    "start_token": 145,
    "end_token": 170,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      19778,
      706,
      662,
      36948,
      11,
      7226,
      287,
      1366,
      13389,
      5499
    ],
    "label": "ml_signal",
    "reason": "Returning a DataFrame after preprocessing, typical in data transformation functions"
  },
  {
    "line": 79,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function processes data for a specific ML model (TFT model)",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 170,
    "end_token": 170,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      7767,
      1366,
      329,
      257,
      2176,
      10373,
      2746,
      357,
      51,
      9792,
      2746,
      8
    ],
    "label": "ml_signal",
    "reason": "Function processes data for a specific ML model (TFT model)"
  },
  {
    "line": 88,
    "text": "        test_df_res.loc[:, feature_cols].groupby(\"datetime\", group_keys=False).apply(lambda df: df.fillna(df.mean()))",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a configuration dictionary to determine feature and label columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1332,
      62,
      7568,
      62,
      411,
      13,
      17946,
      58,
      45299,
      3895,
      62,
      4033,
      82,
      4083,
      8094,
      1525,
      7203,
      19608,
      8079,
      1600,
      1448,
      62,
      13083,
      28,
      25101,
      737,
      39014,
      7,
      50033,
      47764,
      25,
      47764,
      13,
      20797,
      2616,
      7,
      7568,
      13,
      32604,
      3419,
      4008
    ],
    "start_token": 170,
    "end_token": 218,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      8398,
      22155,
      284,
      5004,
      3895,
      290,
      6167,
      15180
    ],
    "label": "ml_signal",
    "reason": "Usage of a configuration dictionary to determine feature and label columns"
  },
  {
    "line": 90,
    "text": "    test_df_res.loc[:, feature_cols] = test_feature_fna",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a configuration dictionary to determine feature and label columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1332,
      62,
      7568,
      62,
      411,
      13,
      17946,
      58,
      45299,
      3895,
      62,
      4033,
      82,
      60,
      796,
      1332,
      62,
      30053,
      62,
      69,
      2616
    ],
    "start_token": 218,
    "end_token": 242,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      8398,
      22155,
      284,
      5004,
      3895,
      290,
      6167,
      15180
    ],
    "label": "ml_signal",
    "reason": "Usage of a configuration dictionary to determine feature and label columns"
  },
  {
    "line": 92,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of loc for selecting specific columns ensures better readability and maintainability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 242,
    "end_token": 242,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1179,
      329,
      17246,
      2176,
      15180,
      19047,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of loc for selecting specific columns ensures better readability and maintainability"
  },
  {
    "line": 95,
    "text": "    \"\"\"Prepare data to fit the TFT model.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential data integrity issue if fill_test_na does not handle NaNs correctly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      37534,
      533,
      1366,
      284,
      4197,
      262,
      309,
      9792,
      2746,
      13
    ],
    "start_token": 242,
    "end_token": 256,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1366,
      11540,
      2071,
      611,
      6070,
      62,
      9288,
      62,
      2616,
      857,
      407,
      5412,
      11013,
      47503,
      9380
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential data integrity issue if fill_test_na does not handle NaNs correctly"
  },
  {
    "line": 97,
    "text": "    Args:",
    "annotation": "\u2705 Best Practice: swaplevel and sort_index improve data organization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      943,
      14542,
      25
    ],
    "start_token": 256,
    "end_token": 262,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      16075,
      5715,
      290,
      3297,
      62,
      9630,
      2987,
      1366,
      4009
    ],
    "label": "best_practice",
    "reason": "swaplevel and sort_index improve data organization"
  },
  {
    "line": 100,
    "text": "",
    "annotation": "\u2705 Best Practice: reset_index with level=0 is clear and explicit",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 262,
    "end_token": 262,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      13259,
      62,
      9630,
      351,
      1241,
      28,
      15,
      318,
      1598,
      290,
      7952
    ],
    "label": "best_practice",
    "reason": "reset_index with level=0 is clear and explicit"
  },
  {
    "line": 102,
    "text": "      Transformed DataFrame.",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of index to datetime for feature engineering",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      3602,
      12214,
      6060,
      19778,
      13
    ],
    "start_token": 262,
    "end_token": 272,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      6376,
      284,
      4818,
      8079,
      329,
      3895,
      8705
    ],
    "label": "ml_signal",
    "reason": "Conversion of index to datetime for feature engineering"
  },
  {
    "line": 103,
    "text": "",
    "annotation": "\u2705 Best Practice: Adding new columns for date features enhances model input",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 272,
    "end_token": 272,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18247,
      649,
      15180,
      329,
      3128,
      3033,
      32479,
      2746,
      5128
    ],
    "label": "best_practice",
    "reason": "Adding new columns for date features enhances model input"
  },
  {
    "line": 110,
    "text": "        temp_df = fill_test_na(temp_df)",
    "annotation": "\u2705 Best Practice: Adding a constant column can be useful for certain ML models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20218,
      62,
      7568,
      796,
      6070,
      62,
      9288,
      62,
      2616,
      7,
      29510,
      62,
      7568,
      8
    ],
    "start_token": 272,
    "end_token": 293,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18247,
      257,
      6937,
      5721,
      460,
      307,
      4465,
      329,
      1728,
      10373,
      4981
    ],
    "label": "best_practice",
    "reason": "Adding a constant column can be useful for certain ML models"
  },
  {
    "line": 110,
    "text": "        temp_df = fill_test_na(temp_df)",
    "annotation": "\u2705 Best Practice: Use of .copy() to avoid modifying the original DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      20218,
      62,
      7568,
      796,
      6070,
      62,
      9288,
      62,
      2616,
      7,
      29510,
      62,
      7568,
      8
    ],
    "start_token": 293,
    "end_token": 314,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      764,
      30073,
      3419,
      284,
      3368,
      30620,
      262,
      2656,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Use of .copy() to avoid modifying the original DataFrame"
  },
  {
    "line": 112,
    "text": "    temp_df = temp_df.sort_index()",
    "annotation": "\u2705 Best Practice: Use of .rename() for clarity and to avoid modifying the original DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      20218,
      62,
      7568,
      796,
      20218,
      62,
      7568,
      13,
      30619,
      62,
      9630,
      3419
    ],
    "start_token": 314,
    "end_token": 329,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      764,
      918,
      480,
      3419,
      329,
      16287,
      290,
      284,
      3368,
      30620,
      262,
      2656,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Use of .rename() for clarity and to avoid modifying the original DataFrame"
  },
  {
    "line": 114,
    "text": "    dates = pd.to_datetime(temp_df.index)",
    "annotation": "\u2705 Best Practice: Use of .set_index() and .sort_index() for efficient DataFrame operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9667,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      29510,
      62,
      7568,
      13,
      9630,
      8
    ],
    "start_token": 329,
    "end_token": 348,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      764,
      2617,
      62,
      9630,
      3419,
      290,
      764,
      30619,
      62,
      9630,
      3419,
      329,
      6942,
      6060,
      19778,
      4560
    ],
    "label": "best_practice",
    "reason": "Use of .set_index() and .sort_index() for efficient DataFrame operations"
  },
  {
    "line": 116,
    "text": "    temp_df[\"day_of_week\"] = dates.dayofweek",
    "annotation": "\u2705 Best Practice: Selecting specific columns for clarity and performance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      20218,
      62,
      7568,
      14692,
      820,
      62,
      1659,
      62,
      10464,
      8973,
      796,
      9667,
      13,
      820,
      1659,
      10464
    ],
    "start_token": 348,
    "end_token": 367,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9683,
      278,
      2176,
      15180,
      329,
      16287,
      290,
      2854
    ],
    "label": "best_practice",
    "reason": "Selecting specific columns for clarity and performance"
  },
  {
    "line": 118,
    "text": "    temp_df[\"year\"] = dates.year",
    "annotation": "\ud83e\udde0 ML Signal: Returns a DataFrame, which is a common pattern in data processing tasks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      20218,
      62,
      7568,
      14692,
      1941,
      8973,
      796,
      9667,
      13,
      1941
    ],
    "start_token": 367,
    "end_token": 380,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      257,
      6060,
      19778,
      11,
      543,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587,
      8861
    ],
    "label": "ml_signal",
    "reason": "Returns a DataFrame, which is a common pattern in data processing tasks"
  },
  {
    "line": 115,
    "text": "    temp_df[\"date\"] = dates",
    "annotation": "\u2705 Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      20218,
      62,
      7568,
      14692,
      4475,
      8973,
      796,
      9667
    ],
    "start_token": 380,
    "end_token": 391,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 117,
    "text": "    temp_df[\"month\"] = dates.month",
    "annotation": "\ud83e\udde0 ML Signal: The function processes a DataFrame, which is common in data manipulation tasks for ML.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      20218,
      62,
      7568,
      14692,
      8424,
      8973,
      796,
      9667,
      13,
      8424
    ],
    "start_token": 391,
    "end_token": 404,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      2163,
      7767,
      257,
      6060,
      19778,
      11,
      543,
      318,
      2219,
      287,
      1366,
      17512,
      8861,
      329,
      10373,
      13
    ],
    "label": "ml_signal",
    "reason": "The function processes a DataFrame, which is common in data manipulation tasks for ML."
  },
  {
    "line": 118,
    "text": "    temp_df[\"year\"] = dates.year",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      20218,
      62,
      7568,
      14692,
      1941,
      8973,
      796,
      9667,
      13,
      1941
    ],
    "start_token": 404,
    "end_token": 417,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability."
  },
  {
    "line": 120,
    "text": "    return temp_df",
    "annotation": "\ud83e\udde0 ML Signal: Shifting labels is a common preprocessing step in time series forecasting.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      20218,
      62,
      7568
    ],
    "start_token": 417,
    "end_token": 424,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      911,
      13309,
      14722,
      318,
      257,
      2219,
      662,
      36948,
      2239,
      287,
      640,
      2168,
      41164,
      13
    ],
    "label": "ml_signal",
    "reason": "Shifting labels is a common preprocessing step in time series forecasting."
  },
  {
    "line": 122,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Dropping NaN values without handling could lead to data loss if not intended.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 424,
    "end_token": 424,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      21045,
      2105,
      11013,
      45,
      3815,
      1231,
      9041,
      714,
      1085,
      284,
      1366,
      2994,
      611,
      407,
      5292,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Dropping NaN values without handling could lead to data loss if not intended."
  },
  {
    "line": 120,
    "text": "    return temp_df",
    "annotation": "\ud83e\udde0 ML Signal: Function for transforming DataFrame, common in data preprocessing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      20218,
      62,
      7568
    ],
    "start_token": 424,
    "end_token": 431,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      329,
      25449,
      6060,
      19778,
      11,
      2219,
      287,
      1366,
      662,
      36948
    ],
    "label": "ml_signal",
    "reason": "Function for transforming DataFrame, common in data preprocessing"
  },
  {
    "line": 122,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing a specific column in a DataFrame",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 431,
    "end_token": 431,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      257,
      2176,
      5721,
      287,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Accessing a specific column in a DataFrame"
  },
  {
    "line": 124,
    "text": "    \"\"\"Transform the TFT predicted data into Qlib format.",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential SettingWithCopyWarning if df_res is a view",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      41762,
      262,
      309,
      9792,
      11001,
      1366,
      656,
      1195,
      8019,
      5794,
      13
    ],
    "start_token": 431,
    "end_token": 446,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      25700,
      3152,
      29881,
      20361,
      611,
      47764,
      62,
      411,
      318,
      257,
      1570
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential SettingWithCopyWarning if df_res is a view"
  },
  {
    "line": 126,
    "text": "    Args:",
    "annotation": "\u2705 Best Practice: Explicitly return the result for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      943,
      14542,
      25
    ],
    "start_token": 446,
    "end_token": 452,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      1441,
      262,
      1255,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly return the result for clarity"
  },
  {
    "line": 126,
    "text": "    Args:",
    "annotation": "\u2705 Best Practice: Class docstring provides a brief description of the class",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      943,
      14542,
      25
    ],
    "start_token": 452,
    "end_token": 458,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      4506,
      6764,
      286,
      262,
      1398
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a brief description of the class"
  },
  {
    "line": 127,
    "text": "      df: Original DataFrame.",
    "annotation": "\ud83e\udde0 ML Signal: Use of a dictionary to store model parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      47764,
      25,
      13745,
      6060,
      19778,
      13
    ],
    "start_token": 458,
    "end_token": 469,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3650,
      2746,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of a dictionary to store model parameters"
  },
  {
    "line": 129,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Default parameters for a machine learning model",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 469,
    "end_token": 469,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      10007,
      329,
      257,
      4572,
      4673,
      2746
    ],
    "label": "ml_signal",
    "reason": "Default parameters for a machine learning model"
  },
  {
    "line": 131,
    "text": "      Transformed DataFrame.",
    "annotation": "\u2705 Best Practice: Using update to merge dictionaries for flexibility",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      3602,
      12214,
      6060,
      19778,
      13
    ],
    "start_token": 469,
    "end_token": 479,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      4296,
      284,
      20121,
      48589,
      3166,
      329,
      13688
    ],
    "label": "best_practice",
    "reason": "Using update to merge dictionaries for flexibility"
  },
  {
    "line": 130,
    "text": "    Returns:",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      16409,
      25
    ],
    "start_token": 479,
    "end_token": 484,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability"
  },
  {
    "line": 131,
    "text": "      Transformed DataFrame.",
    "annotation": "\ud83e\udde0 ML Signal: Usage of dataset preparation method indicates a common pattern in ML workflows",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      3602,
      12214,
      6060,
      19778,
      13
    ],
    "start_token": 484,
    "end_token": 494,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      27039,
      11824,
      2446,
      9217,
      257,
      2219,
      3912,
      287,
      10373,
      670,
      44041
    ],
    "label": "ml_signal",
    "reason": "Usage of dataset preparation method indicates a common pattern in ML workflows"
  },
  {
    "line": 134,
    "text": "    df_res = df.copy()",
    "annotation": "\u2705 Best Practice: Use of descriptive parameter names improves code readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      62,
      411,
      796,
      47764,
      13,
      30073,
      3419
    ],
    "start_token": 494,
    "end_token": 505,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      11507,
      3891,
      19575,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive parameter names improves code readability"
  },
  {
    "line": 137,
    "text": "    df_res = df_res[[col_name]]",
    "annotation": "\ud83e\udde0 ML Signal: Transforming data is a common step in ML data preprocessing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      62,
      411,
      796,
      47764,
      62,
      411,
      30109,
      4033,
      62,
      3672,
      11907
    ],
    "start_token": 505,
    "end_token": 520,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3602,
      15464,
      1366,
      318,
      257,
      2219,
      2239,
      287,
      10373,
      1366,
      662,
      36948
    ],
    "label": "ml_signal",
    "reason": "Transforming data is a common step in ML data preprocessing"
  },
  {
    "line": 162,
    "text": "    def _prepare_data(self, dataset: DatasetH):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): GPU configuration might lead to resource exhaustion if not handled properly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      46012,
      533,
      62,
      7890,
      7,
      944,
      11,
      27039,
      25,
      16092,
      292,
      316,
      39,
      2599
    ],
    "start_token": 520,
    "end_token": 539,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      11362,
      8398,
      1244,
      1085,
      284,
      8271,
      32493,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "GPU configuration might lead to resource exhaustion if not handled properly"
  },
  {
    "line": 171,
    "text": "        LABEL_COL = DATASET_SETTING[DATASET][\"label_col\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential race condition if multiple processes attempt to create the directory simultaneously",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      406,
      6242,
      3698,
      62,
      25154,
      796,
      360,
      1404,
      1921,
      2767,
      62,
      28480,
      48996,
      58,
      35,
      1404,
      1921,
      2767,
      7131,
      1,
      18242,
      62,
      4033,
      8973
    ],
    "start_token": 539,
    "end_token": 570,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3234,
      4006,
      611,
      3294,
      7767,
      2230,
      284,
      2251,
      262,
      8619,
      11640
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential race condition if multiple processes attempt to create the directory simultaneously"
  },
  {
    "line": 177,
    "text": "        dtrain.loc[:, LABEL_COL] = get_shifted_label(dtrain, shifts=LABEL_SHIFT, col_shift=LABEL_COL)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using `tf.reset_default_graph()` can lead to issues in multi-threaded environments",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      288,
      27432,
      13,
      17946,
      58,
      45299,
      406,
      6242,
      3698,
      62,
      25154,
      60,
      796,
      651,
      62,
      1477,
      21715,
      62,
      18242,
      7,
      67,
      27432,
      11,
      15381,
      28,
      48780,
      3698,
      62,
      9693,
      32297,
      11,
      951,
      62,
      30846,
      28,
      48780,
      3698,
      62,
      25154,
      8
    ],
    "start_token": 570,
    "end_token": 617,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      4600,
      27110,
      13,
      42503,
      62,
      12286,
      62,
      34960,
      3419,
      63,
      460,
      1085,
      284,
      2428,
      287,
      5021,
      12,
      16663,
      276,
      12493
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using `tf.reset_default_graph()` can lead to issues in multi-threaded environments"
  },
  {
    "line": 188,
    "text": "        self.label_shift = LABEL_SHIFT",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential race condition if multiple processes attempt to create the directory simultaneously",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      18242,
      62,
      30846,
      796,
      406,
      6242,
      3698,
      62,
      9693,
      32297
    ],
    "start_token": 617,
    "end_token": 636,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3234,
      4006,
      611,
      3294,
      7767,
      2230,
      284,
      2251,
      262,
      8619,
      11640
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential race condition if multiple processes attempt to create the directory simultaneously"
  },
  {
    "line": 190,
    "text": "        self.label_col = LABEL_COL",
    "annotation": "\u2705 Best Practice: Use list comprehension for concise and efficient column filtering",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      18242,
      62,
      4033,
      796,
      406,
      6242,
      3698,
      62,
      25154
    ],
    "start_token": 636,
    "end_token": 654,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1351,
      35915,
      329,
      35327,
      290,
      6942,
      5721,
      25431
    ],
    "label": "best_practice",
    "reason": "Use list comprehension for concise and efficient column filtering"
  },
  {
    "line": 192,
    "text": "        use_gpu = (True, self.gpu_id)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential misuse of TensorFlow session management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      779,
      62,
      46999,
      796,
      357,
      17821,
      11,
      2116,
      13,
      46999,
      62,
      312,
      8
    ],
    "start_token": 654,
    "end_token": 674,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      29169,
      286,
      309,
      22854,
      37535,
      6246,
      4542
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential misuse of TensorFlow session management"
  },
  {
    "line": 194,
    "text": "        ModelClass = libs.tft_model.TemporalFusionTransformer",
    "annotation": "\ud83e\udde0 ML Signal: Logging the completion time of training",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9104,
      9487,
      796,
      9195,
      82,
      13,
      83,
      701,
      62,
      19849,
      13,
      12966,
      35738,
      37,
      4241,
      8291,
      16354
    ],
    "start_token": 674,
    "end_token": 698,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      262,
      11939,
      640,
      286,
      3047
    ],
    "label": "ml_signal",
    "reason": "Logging the completion time of training"
  },
  {
    "line": 197,
    "text": "                \"Data formatters should inherit from\"",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom transformation function on the dataset",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      6601,
      5794,
      1010,
      815,
      16955,
      422,
      1
    ],
    "start_token": 698,
    "end_token": 721,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      13389,
      2163,
      319,
      262,
      27039
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom transformation function on the dataset"
  },
  {
    "line": 199,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Shifting labels in the dataset, which is a common preprocessing step in time series forecasting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 721,
    "end_token": 733,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      911,
      13309,
      14722,
      287,
      262,
      27039,
      11,
      543,
      318,
      257,
      2219,
      662,
      36948,
      2239,
      287,
      640,
      2168,
      41164
    ],
    "label": "ml_signal",
    "reason": "Shifting labels in the dataset, which is a common preprocessing step in time series forecasting"
  },
  {
    "line": 201,
    "text": "        default_keras_session = tf.keras.backend.get_session()",
    "annotation": "\ud83e\udde0 ML Signal: Processing data with a specific function, indicating a custom data pipeline",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4277,
      62,
      6122,
      292,
      62,
      29891,
      796,
      48700,
      13,
      6122,
      292,
      13,
      1891,
      437,
      13,
      1136,
      62,
      29891,
      3419
    ],
    "start_token": 733,
    "end_token": 759,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28403,
      1366,
      351,
      257,
      2176,
      2163,
      11,
      12739,
      257,
      2183,
      1366,
      11523
    ],
    "label": "ml_signal",
    "reason": "Processing data with a specific function, indicating a custom data pipeline"
  },
  {
    "line": 203,
    "text": "        if use_gpu[0]:",
    "annotation": "\ud83e\udde0 ML Signal: Decision to use GPU for prediction, which is relevant for model performance optimization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      779,
      62,
      46999,
      58,
      15,
      5974
    ],
    "start_token": 759,
    "end_token": 773,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26423,
      284,
      779,
      11362,
      329,
      17724,
      11,
      543,
      318,
      5981,
      329,
      2746,
      2854,
      23989
    ],
    "label": "ml_signal",
    "reason": "Decision to use GPU for prediction, which is relevant for model performance optimization"
  },
  {
    "line": 205,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using TensorFlow's default session can lead to issues in multi-threaded environments",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 773,
    "end_token": 782,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      309,
      22854,
      37535,
      338,
      4277,
      6246,
      460,
      1085,
      284,
      2428,
      287,
      5021,
      12,
      16663,
      276,
      12493
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using TensorFlow's default session can lead to issues in multi-threaded environments"
  },
  {
    "line": 207,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Retrieving fixed parameters for the experiment, indicating a structured experiment setup",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 782,
    "end_token": 782,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      37418,
      5969,
      10007,
      329,
      262,
      6306,
      11,
      12739,
      257,
      20793,
      6306,
      9058
    ],
    "label": "ml_signal",
    "reason": "Retrieving fixed parameters for the experiment, indicating a structured experiment setup"
  },
  {
    "line": 209,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Retrieving default model parameters, indicating a structured model configuration",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 782,
    "end_token": 782,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      37418,
      4277,
      2746,
      10007,
      11,
      12739,
      257,
      20793,
      2746,
      8398
    ],
    "label": "ml_signal",
    "reason": "Retrieving default model parameters, indicating a structured model configuration"
  },
  {
    "line": 211,
    "text": "        fixed_params = self.data_formatter.get_experiment_params()",
    "annotation": "\u2705 Best Practice: Merging dictionaries using unpacking for clarity and conciseness",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5969,
      62,
      37266,
      796,
      2116,
      13,
      7890,
      62,
      687,
      1436,
      13,
      1136,
      62,
      23100,
      3681,
      62,
      37266,
      3419
    ],
    "start_token": 782,
    "end_token": 807,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4638,
      2667,
      48589,
      3166,
      1262,
      8593,
      5430,
      329,
      16287,
      290,
      1673,
      271,
      9449
    ],
    "label": "best_practice",
    "reason": "Merging dictionaries using unpacking for clarity and conciseness"
  },
  {
    "line": 214,
    "text": "        params = {**params, **fixed_params}",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Resetting the default graph can lead to issues if not managed properly in a multi-threaded environment",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      42287,
      796,
      1391,
      1174,
      37266,
      11,
      12429,
      34021,
      62,
      37266,
      92
    ],
    "start_token": 807,
    "end_token": 825,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      30027,
      889,
      262,
      4277,
      4823,
      460,
      1085,
      284,
      2428,
      611,
      407,
      5257,
      6105,
      287,
      257,
      5021,
      12,
      16663,
      276,
      2858
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Resetting the default graph can lead to issues if not managed properly in a multi-threaded environment"
  },
  {
    "line": 217,
    "text": "            os.makedirs(self.model_folder)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Setting a session can lead to issues in multi-threaded environments",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      28686,
      13,
      76,
      4335,
      17062,
      7,
      944,
      13,
      19849,
      62,
      43551,
      8
    ],
    "start_token": 825,
    "end_token": 848,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      25700,
      257,
      6246,
      460,
      1085,
      284,
      2428,
      287,
      5021,
      12,
      16663,
      276,
      12493
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Setting a session can lead to issues in multi-threaded environments"
  },
  {
    "line": 219,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Predicting with a model and returning targets, indicating a structured prediction process",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 848,
    "end_token": 848,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49461,
      278,
      351,
      257,
      2746,
      290,
      8024,
      6670,
      11,
      12739,
      257,
      20793,
      17724,
      1429
    ],
    "label": "ml_signal",
    "reason": "Predicting with a model and returning targets, indicating a structured prediction process"
  },
  {
    "line": 219,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Formatting predictions, indicating a custom post-processing step",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 848,
    "end_token": 848,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18980,
      889,
      16277,
      11,
      12739,
      257,
      2183,
      1281,
      12,
      36948,
      2239
    ],
    "label": "ml_signal",
    "reason": "Formatting predictions, indicating a custom post-processing step"
  },
  {
    "line": 226,
    "text": "        with self.tf_graph.as_default():",
    "annotation": "\ud83e\udde0 ML Signal: Formatting predictions for different percentiles, indicating probabilistic forecasting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      351,
      2116,
      13,
      27110,
      62,
      34960,
      13,
      292,
      62,
      12286,
      33529
    ],
    "start_token": 848,
    "end_token": 866,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18980,
      889,
      16277,
      329,
      1180,
      1411,
      2915,
      11,
      12739,
      1861,
      14991,
      2569,
      41164
    ],
    "label": "ml_signal",
    "reason": "Formatting predictions for different percentiles, indicating probabilistic forecasting"
  },
  {
    "line": 226,
    "text": "        with self.tf_graph.as_default():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Resetting the session to the default can lead to issues in multi-threaded environments",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      351,
      2116,
      13,
      27110,
      62,
      34960,
      13,
      292,
      62,
      12286,
      33529
    ],
    "start_token": 866,
    "end_token": 884,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      30027,
      889,
      262,
      6246,
      284,
      262,
      4277,
      460,
      1085,
      284,
      2428,
      287,
      5021,
      12,
      16663,
      276,
      12493
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Resetting the session to the default can lead to issues in multi-threaded environments"
  },
  {
    "line": 228,
    "text": "            tf.keras.backend.set_session(self.sess)",
    "annotation": "\ud83e\udde0 ML Signal: Formatting scores, indicating a custom evaluation metric",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      48700,
      13,
      6122,
      292,
      13,
      1891,
      437,
      13,
      2617,
      62,
      29891,
      7,
      944,
      13,
      82,
      408,
      8
    ],
    "start_token": 884,
    "end_token": 912,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18980,
      889,
      8198,
      11,
      12739,
      257,
      2183,
      12660,
      18663
    ],
    "label": "ml_signal",
    "reason": "Formatting scores, indicating a custom evaluation metric"
  },
  {
    "line": 228,
    "text": "            tf.keras.backend.set_session(self.sess)",
    "annotation": "\ud83e\udde0 ML Signal: Averaging predictions, indicating an ensemble or combined prediction approach",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      48700,
      13,
      6122,
      292,
      13,
      1891,
      437,
      13,
      2617,
      62,
      29891,
      7,
      944,
      13,
      82,
      408,
      8
    ],
    "start_token": 912,
    "end_token": 940,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      317,
      332,
      3039,
      16277,
      11,
      12739,
      281,
      34549,
      393,
      5929,
      17724,
      3164
    ],
    "label": "ml_signal",
    "reason": "Averaging predictions, indicating an ensemble or combined prediction approach"
  },
  {
    "line": 219,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method named 'finetune' suggests this is a machine learning model operation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 940,
    "end_token": 940,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3706,
      705,
      15643,
      316,
      1726,
      6,
      5644,
      428,
      318,
      257,
      4572,
      4673,
      2746,
      4905
    ],
    "label": "ml_signal",
    "reason": "Method named 'finetune' suggests this is a machine learning model operation"
  },
  {
    "line": 228,
    "text": "            tf.keras.backend.set_session(self.sess)",
    "annotation": "\u2705 Best Practice: Using 'pass' in a method indicates it's a placeholder for future implementation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      48700,
      13,
      6122,
      292,
      13,
      1891,
      437,
      13,
      2617,
      62,
      29891,
      7,
      944,
      13,
      82,
      408,
      8
    ],
    "start_token": 940,
    "end_token": 968,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      705,
      6603,
      6,
      287,
      257,
      2446,
      9217,
      340,
      338,
      257,
      46076,
      329,
      2003,
      7822
    ],
    "label": "best_practice",
    "reason": "Using 'pass' in a method indicates it's a placeholder for future implementation"
  },
  {
    "line": 228,
    "text": "            tf.keras.backend.set_session(self.sess)",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      48700,
      13,
      6122,
      292,
      13,
      1891,
      437,
      13,
      2617,
      62,
      29891,
      7,
      944,
      13,
      82,
      408,
      8
    ],
    "start_token": 968,
    "end_token": 996,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and parameters."
  },
  {
    "line": 238,
    "text": "            def extract_numerical_data(data):",
    "annotation": "\u2705 Best Practice: Using a list to manage attributes that need to be temporarily removed is clear and maintainable.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      825,
      7925,
      62,
      77,
      6975,
      605,
      62,
      7890,
      7,
      7890,
      2599
    ],
    "start_token": 996,
    "end_token": 1018,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      1351,
      284,
      6687,
      12608,
      326,
      761,
      284,
      307,
      13413,
      4615,
      318,
      1598,
      290,
      5529,
      540,
      13
    ],
    "label": "best_practice",
    "reason": "Using a list to manage attributes that need to be temporarily removed is clear and maintainable."
  },
  {
    "line": 242,
    "text": "            # p50_loss = utils.numpy_normalised_quantile_loss(",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over attributes to temporarily set them to None before pickling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      279,
      1120,
      62,
      22462,
      796,
      3384,
      4487,
      13,
      77,
      32152,
      62,
      11265,
      1417,
      62,
      40972,
      576,
      62,
      22462,
      7
    ],
    "start_token": 1018,
    "end_token": 1049,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      12608,
      284,
      13413,
      900,
      606,
      284,
      6045,
      878,
      2298,
      1359,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over attributes to temporarily set them to None before pickling."
  },
  {
    "line": 244,
    "text": "            #    0.5)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `to_pickle` method of the superclass does not handle paths securely.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      220,
      220,
      657,
      13,
      20,
      8
    ],
    "start_token": 1049,
    "end_token": 1068,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      1462,
      62,
      27729,
      293,
      63,
      2446,
      286,
      262,
      2208,
      4871,
      857,
      407,
      5412,
      13532,
      30835,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `to_pickle` method of the superclass does not handle paths securely."
  },
  {
    "line": 244,
    "text": "            #    0.5)",
    "annotation": "\ud83e\udde0 ML Signal: Restoring original attributes after pickling process.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      220,
      220,
      657,
      13,
      20,
      8
    ],
    "start_token": 1068,
    "end_token": 1087,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8324,
      3255,
      2656,
      12608,
      706,
      2298,
      1359,
      1429,
      13
    ],
    "label": "ml_signal",
    "reason": "Restoring original attributes after pickling process."
  }
]
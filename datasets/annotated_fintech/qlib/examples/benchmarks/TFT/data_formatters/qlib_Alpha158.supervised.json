[
  {
    "line": 7,
    "text": "#",
    "annotation": "\u2705 Best Practice: Import specific classes or functions instead of entire modules to improve readability and avoid namespace pollution.",
    "confidence": 1.0,
    "tokens": [
      2
    ],
    "start_token": 0,
    "end_token": 1,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      2176,
      6097,
      393,
      5499,
      2427,
      286,
      2104,
      13103,
      284,
      2987,
      1100,
      1799,
      290,
      3368,
      25745,
      12231,
      13
    ],
    "label": "best_practice",
    "reason": "Import specific classes or functions instead of entire modules to improve readability and avoid namespace pollution."
  },
  {
    "line": 10,
    "text": "# Unless required by applicable law or agreed to in writing, software",
    "annotation": "\ud83e\udde0 ML Signal: The class is designed to format data for a specific dataset, which is a common pattern in ML pipelines.",
    "confidence": 1.0,
    "tokens": [
      2,
      17486,
      2672,
      416,
      9723,
      1099,
      393,
      4987,
      284,
      287,
      3597,
      11,
      3788
    ],
    "start_token": 1,
    "end_token": 14,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      1398,
      318,
      3562,
      284,
      5794,
      1366,
      329,
      257,
      2176,
      27039,
      11,
      543,
      318,
      257,
      2219,
      3912,
      287,
      10373,
      31108,
      13
    ],
    "label": "ml_signal",
    "reason": "The class is designed to format data for a specific dataset, which is a common pattern in ML pipelines."
  },
  {
    "line": 17,
    "text": "\"\"\"Custom formatting functions for Alpha158 dataset.",
    "annotation": "\ud83e\udde0 ML Signal: The column definition includes data types and input types, which are crucial for ML model training.",
    "confidence": 1.0,
    "tokens": [
      37811,
      15022,
      33313,
      5499,
      329,
      12995,
      21273,
      27039,
      13
    ],
    "start_token": 14,
    "end_token": 23,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      5721,
      6770,
      3407,
      1366,
      3858,
      290,
      5128,
      3858,
      11,
      543,
      389,
      8780,
      329,
      10373,
      2746,
      3047,
      13
    ],
    "label": "ml_signal",
    "reason": "The column definition includes data types and input types, which are crucial for ML model training."
  },
  {
    "line": 17,
    "text": "\"\"\"Custom formatting functions for Alpha158 dataset.",
    "annotation": "\ud83e\udde0 ML Signal: CATEGORICAL and ID types are often used for entity recognition in ML.",
    "confidence": 1.0,
    "tokens": [
      37811,
      15022,
      33313,
      5499,
      329,
      12995,
      21273,
      27039,
      13
    ],
    "start_token": 23,
    "end_token": 32,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      327,
      6158,
      38,
      1581,
      20151,
      290,
      4522,
      3858,
      389,
      1690,
      973,
      329,
      9312,
      9465,
      287,
      10373,
      13
    ],
    "label": "ml_signal",
    "reason": "CATEGORICAL and ID types are often used for entity recognition in ML."
  },
  {
    "line": 17,
    "text": "\"\"\"Custom formatting functions for Alpha158 dataset.",
    "annotation": "\ud83e\udde0 ML Signal: REAL_VALUED and TARGET types are used for regression or prediction tasks.",
    "confidence": 1.0,
    "tokens": [
      37811,
      15022,
      33313,
      5499,
      329,
      12995,
      21273,
      27039,
      13
    ],
    "start_token": 32,
    "end_token": 41,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32744,
      62,
      23428,
      52,
      1961,
      290,
      309,
      46095,
      3858,
      389,
      973,
      329,
      20683,
      393,
      17724,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "REAL_VALUED and TARGET types are used for regression or prediction tasks."
  },
  {
    "line": 17,
    "text": "\"\"\"Custom formatting functions for Alpha158 dataset.",
    "annotation": "\ud83e\udde0 ML Signal: DATE and TIME types are used for time series analysis.",
    "confidence": 1.0,
    "tokens": [
      37811,
      15022,
      33313,
      5499,
      329,
      12995,
      21273,
      27039,
      13
    ],
    "start_token": 41,
    "end_token": 50,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      360,
      6158,
      290,
      20460,
      3858,
      389,
      973,
      329,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "DATE and TIME types are used for time series analysis."
  },
  {
    "line": 17,
    "text": "\"\"\"Custom formatting functions for Alpha158 dataset.",
    "annotation": "\ud83e\udde0 ML Signal: CATEGORICAL and KNOWN_INPUT types are used for features known at prediction time.",
    "confidence": 1.0,
    "tokens": [
      37811,
      15022,
      33313,
      5499,
      329,
      12995,
      21273,
      27039,
      13
    ],
    "start_token": 50,
    "end_token": 59,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      327,
      6158,
      38,
      1581,
      20151,
      290,
      22466,
      14165,
      62,
      1268,
      30076,
      3858,
      389,
      973,
      329,
      3033,
      1900,
      379,
      17724,
      640,
      13
    ],
    "label": "ml_signal",
    "reason": "CATEGORICAL and KNOWN_INPUT types are used for features known at prediction time."
  },
  {
    "line": 17,
    "text": "\"\"\"Custom formatting functions for Alpha158 dataset.",
    "annotation": "\ud83e\udde0 ML Signal: REAL_VALUED and OBSERVED_INPUT types are used for features observed at prediction time.",
    "confidence": 1.0,
    "tokens": [
      37811,
      15022,
      33313,
      5499,
      329,
      12995,
      21273,
      27039,
      13
    ],
    "start_token": 59,
    "end_token": 68,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32744,
      62,
      23428,
      52,
      1961,
      290,
      440,
      4462,
      1137,
      53,
      1961,
      62,
      1268,
      30076,
      3858,
      389,
      973,
      329,
      3033,
      6515,
      379,
      17724,
      640,
      13
    ],
    "label": "ml_signal",
    "reason": "REAL_VALUED and OBSERVED_INPUT types are used for features observed at prediction time."
  },
  {
    "line": 50,
    "text": "        (\"KLEN\", DataTypes.REAL_VALUED, InputTypes.OBSERVED_INPUT),",
    "annotation": "\ud83e\udde0 ML Signal: CATEGORICAL and STATIC_INPUT types are used for features that do not change over time.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5855,
      42,
      43,
      1677,
      1600,
      6060,
      31431,
      13,
      2200,
      1847,
      62,
      23428,
      52,
      1961,
      11,
      23412,
      31431,
      13,
      46,
      4462,
      1137,
      53,
      1961,
      62,
      1268,
      30076,
      828
    ],
    "start_token": 68,
    "end_token": 102,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      327,
      6158,
      38,
      1581,
      20151,
      290,
      15486,
      2149,
      62,
      1268,
      30076,
      3858,
      389,
      973,
      329,
      3033,
      326,
      466,
      407,
      1487,
      625,
      640,
      13
    ],
    "label": "ml_signal",
    "reason": "CATEGORICAL and STATIC_INPUT types are used for features that do not change over time."
  },
  {
    "line": 47,
    "text": "        (\"RESI5\", DataTypes.REAL_VALUED, InputTypes.OBSERVED_INPUT),",
    "annotation": "\u2705 Best Practice: Initialize instance variables in the constructor for clarity and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5855,
      19535,
      40,
      20,
      1600,
      6060,
      31431,
      13,
      2200,
      1847,
      62,
      23428,
      52,
      1961,
      11,
      23412,
      31431,
      13,
      46,
      4462,
      1137,
      53,
      1961,
      62,
      1268,
      30076,
      828
    ],
    "start_token": 102,
    "end_token": 136,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      4554,
      9633,
      287,
      262,
      23772,
      329,
      16287,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Initialize instance variables in the constructor for clarity and maintainability"
  },
  {
    "line": 62,
    "text": "        (\"RSQR20\", DataTypes.REAL_VALUED, InputTypes.OBSERVED_INPUT),",
    "annotation": "\u2705 Best Practice: Logging or printing messages can help in debugging and understanding the flow of execution.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5855,
      6998,
      48,
      49,
      1238,
      1600,
      6060,
      31431,
      13,
      2200,
      1847,
      62,
      23428,
      52,
      1961,
      11,
      23412,
      31431,
      13,
      46,
      4462,
      1137,
      53,
      1961,
      62,
      1268,
      30076,
      828
    ],
    "start_token": 136,
    "end_token": 171,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      393,
      13570,
      6218,
      460,
      1037,
      287,
      28769,
      290,
      4547,
      262,
      5202,
      286,
      9706,
      13
    ],
    "label": "best_practice",
    "reason": "Logging or printing messages can help in debugging and understanding the flow of execution."
  },
  {
    "line": 64,
    "text": "        (\"CORD10\", DataTypes.REAL_VALUED, InputTypes.OBSERVED_INPUT),",
    "annotation": "\ud83e\udde0 ML Signal: Using a year-based boundary to split data is a common pattern in time series analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5855,
      34,
      12532,
      940,
      1600,
      6060,
      31431,
      13,
      2200,
      1847,
      62,
      23428,
      52,
      1961,
      11,
      23412,
      31431,
      13,
      46,
      4462,
      1137,
      53,
      1961,
      62,
      1268,
      30076,
      828
    ],
    "start_token": 171,
    "end_token": 205,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      257,
      614,
      12,
      3106,
      18645,
      284,
      6626,
      1366,
      318,
      257,
      2219,
      3912,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Using a year-based boundary to split data is a common pattern in time series analysis."
  },
  {
    "line": 66,
    "text": "        (\"KLOW\", DataTypes.REAL_VALUED, InputTypes.OBSERVED_INPUT),",
    "annotation": "\ud83e\udde0 ML Signal: Splitting data into train, validation, and test sets is a common practice in machine learning.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5855,
      42,
      43,
      3913,
      1600,
      6060,
      31431,
      13,
      2200,
      1847,
      62,
      23428,
      52,
      1961,
      11,
      23412,
      31431,
      13,
      46,
      4462,
      1137,
      53,
      1961,
      62,
      1268,
      30076,
      828
    ],
    "start_token": 205,
    "end_token": 239,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13341,
      2535,
      1366,
      656,
      4512,
      11,
      21201,
      11,
      290,
      1332,
      5621,
      318,
      257,
      2219,
      3357,
      287,
      4572,
      4673,
      13
    ],
    "label": "ml_signal",
    "reason": "Splitting data into train, validation, and test sets is a common practice in machine learning."
  },
  {
    "line": 70,
    "text": "    def __init__(self):",
    "annotation": "\ud83e\udde0 ML Signal: Setting scalers on the training data is a common preprocessing step in ML pipelines.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      2599
    ],
    "start_token": 239,
    "end_token": 249,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      16578,
      364,
      319,
      262,
      3047,
      1366,
      318,
      257,
      2219,
      662,
      36948,
      2239,
      287,
      10373,
      31108,
      13
    ],
    "label": "ml_signal",
    "reason": "Setting scalers on the training data is a common preprocessing step in ML pipelines."
  },
  {
    "line": 70,
    "text": "    def __init__(self):",
    "annotation": "\ud83e\udde0 ML Signal: Transforming inputs is a typical step in preparing data for machine learning models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      2599
    ],
    "start_token": 249,
    "end_token": 259,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3602,
      15464,
      17311,
      318,
      257,
      7226,
      2239,
      287,
      10629,
      1366,
      329,
      4572,
      4673,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Transforming inputs is a typical step in preparing data for machine learning models."
  },
  {
    "line": 74,
    "text": "        self._real_scalers = None",
    "annotation": "\u2705 Best Practice: Consider using logging instead of print for better control over output",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      5305,
      62,
      1416,
      282,
      364,
      796,
      6045
    ],
    "start_token": 259,
    "end_token": 275,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Consider using logging instead of print for better control over output"
  },
  {
    "line": 76,
    "text": "        self._target_scaler = None",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method to get column definitions indicates a pattern for dynamic data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      16793,
      62,
      1416,
      36213,
      796,
      6045
    ],
    "start_token": 275,
    "end_token": 290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      284,
      651,
      5721,
      17336,
      9217,
      257,
      3912,
      329,
      8925,
      1366,
      9041
    ],
    "label": "ml_signal",
    "reason": "Usage of a method to get column definitions indicates a pattern for dynamic data handling"
  },
  {
    "line": 78,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic retrieval of ID column based on input type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 290,
    "end_token": 290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      45069,
      286,
      4522,
      5721,
      1912,
      319,
      5128,
      2099
    ],
    "label": "ml_signal",
    "reason": "Dynamic retrieval of ID column based on input type"
  },
  {
    "line": 79,
    "text": "    def split_data(self, df, valid_boundary=2016, test_boundary=2018):",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic retrieval of target column based on input type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      6626,
      62,
      7890,
      7,
      944,
      11,
      47764,
      11,
      4938,
      62,
      7784,
      560,
      28,
      5304,
      11,
      1332,
      62,
      7784,
      560,
      28,
      7908,
      2599
    ],
    "start_token": 290,
    "end_token": 316,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      45069,
      286,
      2496,
      5721,
      1912,
      319,
      5128,
      2099
    ],
    "label": "ml_signal",
    "reason": "Dynamic retrieval of target column based on input type"
  },
  {
    "line": 82,
    "text": "        This also calibrates scaling object, and transforms data for each split.",
    "annotation": "\ud83e\udde0 ML Signal: Identifying unique identifiers in the dataset",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      770,
      635,
      33801,
      689,
      20796,
      2134,
      11,
      290,
      31408,
      1366,
      329,
      1123,
      6626,
      13
    ],
    "start_token": 316,
    "end_token": 337,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11440,
      4035,
      3748,
      42814,
      287,
      262,
      27039
    ],
    "label": "ml_signal",
    "reason": "Identifying unique identifiers in the dataset"
  },
  {
    "line": 84,
    "text": "        Args:",
    "annotation": "\ud83e\udde0 ML Signal: Extracting real-valued columns for scaling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      943,
      14542,
      25
    ],
    "start_token": 337,
    "end_token": 347,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      1103,
      12,
      39728,
      15180,
      329,
      20796
    ],
    "label": "ml_signal",
    "reason": "Extracting real-valued columns for scaling"
  },
  {
    "line": 90,
    "text": "          Tuple of transformed (train, valid, test) data.",
    "annotation": "\ud83e\udde0 ML Signal: Fitting a standard scaler to real-valued data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      309,
      29291,
      286,
      14434,
      357,
      27432,
      11,
      4938,
      11,
      1332,
      8,
      1366,
      13
    ],
    "start_token": 347,
    "end_token": 369,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      2535,
      257,
      3210,
      16578,
      263,
      284,
      1103,
      12,
      39728,
      1366
    ],
    "label": "ml_signal",
    "reason": "Fitting a standard scaler to real-valued data"
  },
  {
    "line": 91,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Fitting a standard scaler to target data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 369,
    "end_token": 377,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      2535,
      257,
      3210,
      16578,
      263,
      284,
      2496,
      1366
    ],
    "label": "ml_signal",
    "reason": "Fitting a standard scaler to target data"
  },
  {
    "line": 95,
    "text": "        index = df[\"year\"]",
    "annotation": "\ud83e\udde0 ML Signal: Extracting categorical columns for encoding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6376,
      796,
      47764,
      14692,
      1941,
      8973
    ],
    "start_token": 377,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      4253,
      12409,
      15180,
      329,
      21004
    ],
    "label": "ml_signal",
    "reason": "Extracting categorical columns for encoding"
  },
  {
    "line": 99,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Converting categorical data to string for consistent encoding",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 390,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      4253,
      12409,
      1366,
      284,
      4731,
      329,
      6414,
      21004
    ],
    "label": "ml_signal",
    "reason": "Converting categorical data to string for consistent encoding"
  },
  {
    "line": 106,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Fitting a label encoder to categorical data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 390,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      2535,
      257,
      6167,
      2207,
      12342,
      284,
      4253,
      12409,
      1366
    ],
    "label": "ml_signal",
    "reason": "Fitting a label encoder to categorical data"
  },
  {
    "line": 106,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Counting unique classes in categorical data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 390,
    "end_token": 390,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2764,
      278,
      3748,
      6097,
      287,
      4253,
      12409,
      1366
    ],
    "label": "ml_signal",
    "reason": "Counting unique classes in categorical data"
  },
  {
    "line": 108,
    "text": "          df: Data to use to calibrate scalers.",
    "annotation": "\ud83e\udde0 ML Signal: Storing fitted categorical scalers",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      25,
      6060,
      284,
      779,
      284,
      33801,
      378,
      16578,
      364,
      13
    ],
    "start_token": 390,
    "end_token": 410,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      18235,
      4253,
      12409,
      16578,
      364
    ],
    "label": "ml_signal",
    "reason": "Storing fitted categorical scalers"
  },
  {
    "line": 110,
    "text": "        print(\"Setting scalers with training data...\")",
    "annotation": "\ud83e\udde0 ML Signal: Storing number of classes per categorical input",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7203,
      34149,
      16578,
      364,
      351,
      3047,
      1366,
      9313,
      8
    ],
    "start_token": 410,
    "end_token": 427,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      1271,
      286,
      6097,
      583,
      4253,
      12409,
      5128
    ],
    "label": "ml_signal",
    "reason": "Storing number of classes per categorical input"
  },
  {
    "line": 107,
    "text": "        Args:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for NoneType error if scalers are not set",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      943,
      14542,
      25
    ],
    "start_token": 427,
    "end_token": 437,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6045,
      6030,
      4049,
      611,
      16578,
      364,
      389,
      407,
      900
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for NoneType error if scalers are not set"
  },
  {
    "line": 110,
    "text": "        print(\"Setting scalers with training data...\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of column definitions for feature transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7203,
      34149,
      16578,
      364,
      351,
      3047,
      1366,
      9313,
      8
    ],
    "start_token": 437,
    "end_token": 454,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      5721,
      17336,
      329,
      3895,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of column definitions for feature transformation"
  },
  {
    "line": 113,
    "text": "        id_column = utils.get_single_col_by_input_type(InputTypes.ID, column_definitions)",
    "annotation": "\ud83e\udde0 ML Signal: Extraction of real-valued columns for transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4686,
      62,
      28665,
      796,
      3384,
      4487,
      13,
      1136,
      62,
      29762,
      62,
      4033,
      62,
      1525,
      62,
      15414,
      62,
      4906,
      7,
      20560,
      31431,
      13,
      2389,
      11,
      5721,
      62,
      4299,
      50101,
      8
    ],
    "start_token": 454,
    "end_token": 490,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      7861,
      286,
      1103,
      12,
      39728,
      15180,
      329,
      13389
    ],
    "label": "ml_signal",
    "reason": "Extraction of real-valued columns for transformation"
  },
  {
    "line": 116,
    "text": "        # Extract identifiers in case required",
    "annotation": "\ud83e\udde0 ML Signal: Extraction of categorical columns for transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      29677,
      42814,
      287,
      1339,
      2672
    ],
    "start_token": 490,
    "end_token": 503,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5683,
      7861,
      286,
      4253,
      12409,
      15180,
      329,
      13389
    ],
    "label": "ml_signal",
    "reason": "Extraction of categorical columns for transformation"
  },
  {
    "line": 120,
    "text": "        real_inputs = utils.extract_cols_from_data_type(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes _real_scalers is properly initialized and used",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1103,
      62,
      15414,
      82,
      796,
      3384,
      4487,
      13,
      2302,
      974,
      62,
      4033,
      82,
      62,
      6738,
      62,
      7890,
      62,
      4906,
      7
    ],
    "start_token": 503,
    "end_token": 530,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      4808,
      5305,
      62,
      1416,
      282,
      364,
      318,
      6105,
      23224,
      290,
      973
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes _real_scalers is properly initialized and used"
  },
  {
    "line": 122,
    "text": "        )",
    "annotation": "\u2705 Best Practice: Convert categorical columns to string for consistent transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 530,
    "end_token": 538,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      4253,
      12409,
      15180,
      284,
      4731,
      329,
      6414,
      13389
    ],
    "label": "best_practice",
    "reason": "Convert categorical columns to string for consistent transformation"
  },
  {
    "line": 122,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes _cat_scalers[col] is properly initialized and used",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 538,
    "end_token": 546,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      4808,
      9246,
      62,
      1416,
      282,
      364,
      58,
      4033,
      60,
      318,
      6105,
      23224,
      290,
      973
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes _cat_scalers[col] is properly initialized and used"
  },
  {
    "line": 128,
    "text": "        )  # used for predictions",
    "annotation": "\u2705 Best Practice: Use of .copy() to avoid modifying the original dataframe",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267,
      220,
      1303,
      973,
      329,
      16277
    ],
    "start_token": 546,
    "end_token": 559,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      764,
      30073,
      3419,
      284,
      3368,
      30620,
      262,
      2656,
      1366,
      14535
    ],
    "label": "best_practice",
    "reason": "Use of .copy() to avoid modifying the original dataframe"
  },
  {
    "line": 130,
    "text": "        # Format categorical scalers",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over dataframe columns to apply transformations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      18980,
      4253,
      12409,
      16578,
      364
    ],
    "start_token": 559,
    "end_token": 572,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      1366,
      14535,
      15180,
      284,
      4174,
      38226
    ],
    "label": "ml_signal",
    "reason": "Iterating over dataframe columns to apply transformations"
  },
  {
    "line": 132,
    "text": "            DataTypes.CATEGORICAL, column_definitions, {InputTypes.ID, InputTypes.TIME}",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic to exclude certain columns from transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6060,
      31431,
      13,
      34,
      6158,
      38,
      1581,
      20151,
      11,
      5721,
      62,
      4299,
      50101,
      11,
      1391,
      20560,
      31431,
      13,
      2389,
      11,
      23412,
      31431,
      13,
      34694,
      92
    ],
    "start_token": 572,
    "end_token": 608,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      284,
      19607,
      1728,
      15180,
      422,
      13389
    ],
    "label": "ml_signal",
    "reason": "Conditional logic to exclude certain columns from transformation"
  },
  {
    "line": 135,
    "text": "        categorical_scalers = {}",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for incorrect inverse transformation if _target_scaler is not properly configured",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4253,
      12409,
      62,
      1416,
      282,
      364,
      796,
      23884
    ],
    "start_token": 608,
    "end_token": 623,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11491,
      34062,
      13389,
      611,
      4808,
      16793,
      62,
      1416,
      36213,
      318,
      407,
      6105,
      17839
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for incorrect inverse transformation if _target_scaler is not properly configured"
  },
  {
    "line": 136,
    "text": "        num_classes = []",
    "annotation": "\u2705 Best Practice: Use of a dictionary to store related configuration parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      997,
      62,
      37724,
      796,
      17635
    ],
    "start_token": 623,
    "end_token": 635,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3650,
      3519,
      8398,
      10007
    ],
    "label": "best_practice",
    "reason": "Use of a dictionary to store related configuration parameters"
  },
  {
    "line": 136,
    "text": "        num_classes = []",
    "annotation": "\ud83e\udde0 ML Signal: Use of time steps in model parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      997,
      62,
      37724,
      796,
      17635
    ],
    "start_token": 635,
    "end_token": 647,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      640,
      4831,
      287,
      2746,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of time steps in model parameters"
  },
  {
    "line": 143,
    "text": "        # Set categorical scaler outputs",
    "annotation": "\ud83e\udde0 ML Signal: Use of encoder steps in model parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5345,
      4253,
      12409,
      16578,
      263,
      23862
    ],
    "start_token": 647,
    "end_token": 661,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2207,
      12342,
      4831,
      287,
      2746,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of encoder steps in model parameters"
  },
  {
    "line": 143,
    "text": "        # Set categorical scaler outputs",
    "annotation": "\ud83e\udde0 ML Signal: Use of epochs in model parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      5345,
      4253,
      12409,
      16578,
      263,
      23862
    ],
    "start_token": 661,
    "end_token": 675,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      36835,
      82,
      287,
      2746,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of epochs in model parameters"
  },
  {
    "line": 144,
    "text": "        self._cat_scalers = categorical_scalers",
    "annotation": "\ud83e\udde0 ML Signal: Use of early stopping in model parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13557,
      9246,
      62,
      1416,
      282,
      364,
      796,
      4253,
      12409,
      62,
      1416,
      282,
      364
    ],
    "start_token": 675,
    "end_token": 696,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1903,
      12225,
      287,
      2746,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of early stopping in model parameters"
  },
  {
    "line": 146,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of multiprocessing workers in model parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 696,
    "end_token": 696,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      18540,
      305,
      919,
      278,
      3259,
      287,
      2746,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of multiprocessing workers in model parameters"
  },
  {
    "line": 146,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning a dictionary for easy access to configuration parameters",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 696,
    "end_token": 696,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      22155,
      329,
      2562,
      1895,
      284,
      8398,
      10007
    ],
    "label": "best_practice",
    "reason": "Returning a dictionary for easy access to configuration parameters"
  },
  {
    "line": 146,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function returns a dictionary of model hyperparameters, useful for ML model configuration",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 696,
    "end_token": 696,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      5860,
      257,
      22155,
      286,
      2746,
      8718,
      17143,
      7307,
      11,
      4465,
      329,
      10373,
      2746,
      8398
    ],
    "label": "ml_signal",
    "reason": "Function returns a dictionary of model hyperparameters, useful for ML model configuration"
  },
  {
    "line": 155,
    "text": "        Returns:",
    "annotation": "\u2705 Best Practice: Returning a dictionary allows for easy extension and modification of model parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409,
      25
    ],
    "start_token": 696,
    "end_token": 705,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      22155,
      3578,
      329,
      2562,
      7552,
      290,
      17613,
      286,
      2746,
      10007
    ],
    "label": "best_practice",
    "reason": "Returning a dictionary allows for easy extension and modification of model parameters"
  }
]
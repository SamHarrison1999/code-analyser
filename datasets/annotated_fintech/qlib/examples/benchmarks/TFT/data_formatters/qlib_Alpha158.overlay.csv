annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
✅ Best Practice: Import specific classes or functions instead of entire modules to improve readability and avoid namespace pollution.,"[26486, 227, 6705, 19939, 25, 17267, 2176, 6097, 393, 5499, 2427, 286, 2104, 13103, 284, 2987, 1100, 1799, 290, 3368, 25745, 12231, 13]",1.0,1,best_practice,7,Import specific classes or functions instead of entire modules to improve readability and avoid namespace pollution.,,0,#,[2]
"🧠 ML Signal: The class is designed to format data for a specific dataset, which is a common pattern in ML pipelines.","[8582, 100, 254, 10373, 26484, 25, 383, 1398, 318, 3562, 284, 5794, 1366, 329, 257, 2176, 27039, 11, 543, 318, 257, 2219, 3912, 287, 10373, 31108, 13]",1.0,14,ml_signal,10,"The class is designed to format data for a specific dataset, which is a common pattern in ML pipelines.",,1,"# Unless required by applicable law or agreed to in writing, software","[2, 17486, 2672, 416, 9723, 1099, 393, 4987, 284, 287, 3597, 11, 3788]"
"🧠 ML Signal: The column definition includes data types and input types, which are crucial for ML model training.","[8582, 100, 254, 10373, 26484, 25, 383, 5721, 6770, 3407, 1366, 3858, 290, 5128, 3858, 11, 543, 389, 8780, 329, 10373, 2746, 3047, 13]",1.0,23,ml_signal,17,"The column definition includes data types and input types, which are crucial for ML model training.",,14,"""""""Custom formatting functions for Alpha158 dataset.","[37811, 15022, 33313, 5499, 329, 12995, 21273, 27039, 13]"
🧠 ML Signal: CATEGORICAL and ID types are often used for entity recognition in ML.,"[8582, 100, 254, 10373, 26484, 25, 327, 6158, 38, 1581, 20151, 290, 4522, 3858, 389, 1690, 973, 329, 9312, 9465, 287, 10373, 13]",1.0,32,ml_signal,17,CATEGORICAL and ID types are often used for entity recognition in ML.,,23,"""""""Custom formatting functions for Alpha158 dataset.","[37811, 15022, 33313, 5499, 329, 12995, 21273, 27039, 13]"
🧠 ML Signal: REAL_VALUED and TARGET types are used for regression or prediction tasks.,"[8582, 100, 254, 10373, 26484, 25, 32744, 62, 23428, 52, 1961, 290, 309, 46095, 3858, 389, 973, 329, 20683, 393, 17724, 8861, 13]",1.0,41,ml_signal,17,REAL_VALUED and TARGET types are used for regression or prediction tasks.,,32,"""""""Custom formatting functions for Alpha158 dataset.","[37811, 15022, 33313, 5499, 329, 12995, 21273, 27039, 13]"
🧠 ML Signal: DATE and TIME types are used for time series analysis.,"[8582, 100, 254, 10373, 26484, 25, 360, 6158, 290, 20460, 3858, 389, 973, 329, 640, 2168, 3781, 13]",1.0,50,ml_signal,17,DATE and TIME types are used for time series analysis.,,41,"""""""Custom formatting functions for Alpha158 dataset.","[37811, 15022, 33313, 5499, 329, 12995, 21273, 27039, 13]"
🧠 ML Signal: CATEGORICAL and KNOWN_INPUT types are used for features known at prediction time.,"[8582, 100, 254, 10373, 26484, 25, 327, 6158, 38, 1581, 20151, 290, 22466, 14165, 62, 1268, 30076, 3858, 389, 973, 329, 3033, 1900, 379, 17724, 640, 13]",1.0,59,ml_signal,17,CATEGORICAL and KNOWN_INPUT types are used for features known at prediction time.,,50,"""""""Custom formatting functions for Alpha158 dataset.","[37811, 15022, 33313, 5499, 329, 12995, 21273, 27039, 13]"
🧠 ML Signal: REAL_VALUED and OBSERVED_INPUT types are used for features observed at prediction time.,"[8582, 100, 254, 10373, 26484, 25, 32744, 62, 23428, 52, 1961, 290, 440, 4462, 1137, 53, 1961, 62, 1268, 30076, 3858, 389, 973, 329, 3033, 6515, 379, 17724, 640, 13]",1.0,68,ml_signal,17,REAL_VALUED and OBSERVED_INPUT types are used for features observed at prediction time.,,59,"""""""Custom formatting functions for Alpha158 dataset.","[37811, 15022, 33313, 5499, 329, 12995, 21273, 27039, 13]"
🧠 ML Signal: CATEGORICAL and STATIC_INPUT types are used for features that do not change over time.,"[8582, 100, 254, 10373, 26484, 25, 327, 6158, 38, 1581, 20151, 290, 15486, 2149, 62, 1268, 30076, 3858, 389, 973, 329, 3033, 326, 466, 407, 1487, 625, 640, 13]",1.0,102,ml_signal,50,CATEGORICAL and STATIC_INPUT types are used for features that do not change over time.,,68,"        (""KLEN"", DataTypes.REAL_VALUED, InputTypes.OBSERVED_INPUT),","[220, 220, 220, 220, 220, 220, 220, 5855, 42, 43, 1677, 1600, 6060, 31431, 13, 2200, 1847, 62, 23428, 52, 1961, 11, 23412, 31431, 13, 46, 4462, 1137, 53, 1961, 62, 1268, 30076, 828]"
✅ Best Practice: Initialize instance variables in the constructor for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 20768, 1096, 4554, 9633, 287, 262, 23772, 329, 16287, 290, 5529, 1799]",1.0,136,best_practice,47,Initialize instance variables in the constructor for clarity and maintainability,,102,"        (""RESI5"", DataTypes.REAL_VALUED, InputTypes.OBSERVED_INPUT),","[220, 220, 220, 220, 220, 220, 220, 5855, 19535, 40, 20, 1600, 6060, 31431, 13, 2200, 1847, 62, 23428, 52, 1961, 11, 23412, 31431, 13, 46, 4462, 1137, 53, 1961, 62, 1268, 30076, 828]"
✅ Best Practice: Logging or printing messages can help in debugging and understanding the flow of execution.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 393, 13570, 6218, 460, 1037, 287, 28769, 290, 4547, 262, 5202, 286, 9706, 13]",0.5,171,best_practice,62,Logging or printing messages can help in debugging and understanding the flow of execution.,,136,"        (""RSQR20"", DataTypes.REAL_VALUED, InputTypes.OBSERVED_INPUT),","[220, 220, 220, 220, 220, 220, 220, 5855, 6998, 48, 49, 1238, 1600, 6060, 31431, 13, 2200, 1847, 62, 23428, 52, 1961, 11, 23412, 31431, 13, 46, 4462, 1137, 53, 1961, 62, 1268, 30076, 828]"
🧠 ML Signal: Using a year-based boundary to split data is a common pattern in time series analysis.,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 614, 12, 3106, 18645, 284, 6626, 1366, 318, 257, 2219, 3912, 287, 640, 2168, 3781, 13]",0.5,205,ml_signal,64,Using a year-based boundary to split data is a common pattern in time series analysis.,,171,"        (""CORD10"", DataTypes.REAL_VALUED, InputTypes.OBSERVED_INPUT),","[220, 220, 220, 220, 220, 220, 220, 5855, 34, 12532, 940, 1600, 6060, 31431, 13, 2200, 1847, 62, 23428, 52, 1961, 11, 23412, 31431, 13, 46, 4462, 1137, 53, 1961, 62, 1268, 30076, 828]"
"🧠 ML Signal: Splitting data into train, validation, and test sets is a common practice in machine learning.","[8582, 100, 254, 10373, 26484, 25, 13341, 2535, 1366, 656, 4512, 11, 21201, 11, 290, 1332, 5621, 318, 257, 2219, 3357, 287, 4572, 4673, 13]",0.5,239,ml_signal,66,"Splitting data into train, validation, and test sets is a common practice in machine learning.",,205,"        (""KLOW"", DataTypes.REAL_VALUED, InputTypes.OBSERVED_INPUT),","[220, 220, 220, 220, 220, 220, 220, 5855, 42, 43, 3913, 1600, 6060, 31431, 13, 2200, 1847, 62, 23428, 52, 1961, 11, 23412, 31431, 13, 46, 4462, 1137, 53, 1961, 62, 1268, 30076, 828]"
🧠 ML Signal: Setting scalers on the training data is a common preprocessing step in ML pipelines.,"[8582, 100, 254, 10373, 26484, 25, 25700, 16578, 364, 319, 262, 3047, 1366, 318, 257, 2219, 662, 36948, 2239, 287, 10373, 31108, 13]",0.5,249,ml_signal,70,Setting scalers on the training data is a common preprocessing step in ML pipelines.,,239,    def __init__(self):,"[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 2599]"
🧠 ML Signal: Transforming inputs is a typical step in preparing data for machine learning models.,"[8582, 100, 254, 10373, 26484, 25, 3602, 15464, 17311, 318, 257, 7226, 2239, 287, 10629, 1366, 329, 4572, 4673, 4981, 13]",0.5,259,ml_signal,70,Transforming inputs is a typical step in preparing data for machine learning models.,,249,    def __init__(self):,"[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 2599]"
✅ Best Practice: Consider using logging instead of print for better control over output,"[26486, 227, 6705, 19939, 25, 12642, 1262, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072]",1.0,275,best_practice,74,Consider using logging instead of print for better control over output,,259,        self._real_scalers = None,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 5305, 62, 1416, 282, 364, 796, 6045]"
🧠 ML Signal: Usage of a method to get column definitions indicates a pattern for dynamic data handling,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 651, 5721, 17336, 9217, 257, 3912, 329, 8925, 1366, 9041]",0.5,290,ml_signal,76,Usage of a method to get column definitions indicates a pattern for dynamic data handling,,275,        self._target_scaler = None,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 16793, 62, 1416, 36213, 796, 6045]"
🧠 ML Signal: Dynamic retrieval of ID column based on input type,"[8582, 100, 254, 10373, 26484, 25, 26977, 45069, 286, 4522, 5721, 1912, 319, 5128, 2099]",0.5,290,ml_signal,78,Dynamic retrieval of ID column based on input type,,290,,[]
🧠 ML Signal: Dynamic retrieval of target column based on input type,"[8582, 100, 254, 10373, 26484, 25, 26977, 45069, 286, 2496, 5721, 1912, 319, 5128, 2099]",0.5,316,ml_signal,79,Dynamic retrieval of target column based on input type,,290,"    def split_data(self, df, valid_boundary=2016, test_boundary=2018):","[220, 220, 220, 825, 6626, 62, 7890, 7, 944, 11, 47764, 11, 4938, 62, 7784, 560, 28, 5304, 11, 1332, 62, 7784, 560, 28, 7908, 2599]"
🧠 ML Signal: Identifying unique identifiers in the dataset,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 3748, 42814, 287, 262, 27039]",1.0,337,ml_signal,82,Identifying unique identifiers in the dataset,,316,"        This also calibrates scaling object, and transforms data for each split.","[220, 220, 220, 220, 220, 220, 220, 770, 635, 33801, 689, 20796, 2134, 11, 290, 31408, 1366, 329, 1123, 6626, 13]"
🧠 ML Signal: Extracting real-valued columns for scaling,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 1103, 12, 39728, 15180, 329, 20796]",0.5,347,ml_signal,84,Extracting real-valued columns for scaling,,337,        Args:,"[220, 220, 220, 220, 220, 220, 220, 943, 14542, 25]"
🧠 ML Signal: Fitting a standard scaler to real-valued data,"[8582, 100, 254, 10373, 26484, 25, 376, 2535, 257, 3210, 16578, 263, 284, 1103, 12, 39728, 1366]",0.5,369,ml_signal,90,Fitting a standard scaler to real-valued data,,347,"          Tuple of transformed (train, valid, test) data.","[220, 220, 220, 220, 220, 220, 220, 220, 220, 309, 29291, 286, 14434, 357, 27432, 11, 4938, 11, 1332, 8, 1366, 13]"
🧠 ML Signal: Fitting a standard scaler to target data,"[8582, 100, 254, 10373, 26484, 25, 376, 2535, 257, 3210, 16578, 263, 284, 2496, 1366]",0.5,377,ml_signal,91,Fitting a standard scaler to target data,,369,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Extracting categorical columns for encoding,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 4253, 12409, 15180, 329, 21004]",0.5,390,ml_signal,95,Extracting categorical columns for encoding,,377,"        index = df[""year""]","[220, 220, 220, 220, 220, 220, 220, 6376, 796, 47764, 14692, 1941, 8973]"
🧠 ML Signal: Converting categorical data to string for consistent encoding,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 4253, 12409, 1366, 284, 4731, 329, 6414, 21004]",0.5,390,ml_signal,99,Converting categorical data to string for consistent encoding,,390,,[]
🧠 ML Signal: Fitting a label encoder to categorical data,"[8582, 100, 254, 10373, 26484, 25, 376, 2535, 257, 6167, 2207, 12342, 284, 4253, 12409, 1366]",0.5,390,ml_signal,106,Fitting a label encoder to categorical data,,390,,[]
🧠 ML Signal: Counting unique classes in categorical data,"[8582, 100, 254, 10373, 26484, 25, 2764, 278, 3748, 6097, 287, 4253, 12409, 1366]",0.5,390,ml_signal,106,Counting unique classes in categorical data,,390,,[]
🧠 ML Signal: Storing fitted categorical scalers,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 18235, 4253, 12409, 16578, 364]",0.5,410,ml_signal,108,Storing fitted categorical scalers,,390,          df: Data to use to calibrate scalers.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 25, 6060, 284, 779, 284, 33801, 378, 16578, 364, 13]"
🧠 ML Signal: Storing number of classes per categorical input,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 1271, 286, 6097, 583, 4253, 12409, 5128]",0.5,427,ml_signal,110,Storing number of classes per categorical input,,410,"        print(""Setting scalers with training data..."")","[220, 220, 220, 220, 220, 220, 220, 3601, 7203, 34149, 16578, 364, 351, 3047, 1366, 9313, 8]"
⚠️ SAST Risk (Low): Potential for NoneType error if scalers are not set,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 6030, 4049, 611, 16578, 364, 389, 407, 900]",1.0,437,sast_risk,107,Potential for NoneType error if scalers are not set,Low,427,        Args:,"[220, 220, 220, 220, 220, 220, 220, 943, 14542, 25]"
🧠 ML Signal: Use of column definitions for feature transformation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 5721, 17336, 329, 3895, 13389]",1.0,454,ml_signal,110,Use of column definitions for feature transformation,,437,"        print(""Setting scalers with training data..."")","[220, 220, 220, 220, 220, 220, 220, 3601, 7203, 34149, 16578, 364, 351, 3047, 1366, 9313, 8]"
🧠 ML Signal: Extraction of real-valued columns for transformation,"[8582, 100, 254, 10373, 26484, 25, 5683, 7861, 286, 1103, 12, 39728, 15180, 329, 13389]",1.0,490,ml_signal,113,Extraction of real-valued columns for transformation,,454,"        id_column = utils.get_single_col_by_input_type(InputTypes.ID, column_definitions)","[220, 220, 220, 220, 220, 220, 220, 4686, 62, 28665, 796, 3384, 4487, 13, 1136, 62, 29762, 62, 4033, 62, 1525, 62, 15414, 62, 4906, 7, 20560, 31431, 13, 2389, 11, 5721, 62, 4299, 50101, 8]"
🧠 ML Signal: Extraction of categorical columns for transformation,"[8582, 100, 254, 10373, 26484, 25, 5683, 7861, 286, 4253, 12409, 15180, 329, 13389]",1.0,503,ml_signal,116,Extraction of categorical columns for transformation,,490,        # Extract identifiers in case required,"[220, 220, 220, 220, 220, 220, 220, 1303, 29677, 42814, 287, 1339, 2672]"
⚠️ SAST Risk (Low): Assumes _real_scalers is properly initialized and used,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 4808, 5305, 62, 1416, 282, 364, 318, 6105, 23224, 290, 973]",0.5,530,sast_risk,120,Assumes _real_scalers is properly initialized and used,Low,503,        real_inputs = utils.extract_cols_from_data_type(,"[220, 220, 220, 220, 220, 220, 220, 1103, 62, 15414, 82, 796, 3384, 4487, 13, 2302, 974, 62, 4033, 82, 62, 6738, 62, 7890, 62, 4906, 7]"
✅ Best Practice: Convert categorical columns to string for consistent transformation,"[26486, 227, 6705, 19939, 25, 38240, 4253, 12409, 15180, 284, 4731, 329, 6414, 13389]",1.0,538,best_practice,122,Convert categorical columns to string for consistent transformation,,530,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
⚠️ SAST Risk (Low): Assumes _cat_scalers[col] is properly initialized and used,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 4808, 9246, 62, 1416, 282, 364, 58, 4033, 60, 318, 6105, 23224, 290, 973]",0.5,546,sast_risk,122,Assumes _cat_scalers[col] is properly initialized and used,Low,538,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
✅ Best Practice: Use of .copy() to avoid modifying the original dataframe,"[26486, 227, 6705, 19939, 25, 5765, 286, 764, 30073, 3419, 284, 3368, 30620, 262, 2656, 1366, 14535]",1.0,559,best_practice,128,Use of .copy() to avoid modifying the original dataframe,,546,        )  # used for predictions,"[220, 220, 220, 220, 220, 220, 220, 1267, 220, 1303, 973, 329, 16277]"
🧠 ML Signal: Iterating over dataframe columns to apply transformations,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 1366, 14535, 15180, 284, 4174, 38226]",0.5,572,ml_signal,130,Iterating over dataframe columns to apply transformations,,559,        # Format categorical scalers,"[220, 220, 220, 220, 220, 220, 220, 1303, 18980, 4253, 12409, 16578, 364]"
🧠 ML Signal: Conditional logic to exclude certain columns from transformation,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 284, 19607, 1728, 15180, 422, 13389]",0.5,608,ml_signal,132,Conditional logic to exclude certain columns from transformation,,572,"            DataTypes.CATEGORICAL, column_definitions, {InputTypes.ID, InputTypes.TIME}","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6060, 31431, 13, 34, 6158, 38, 1581, 20151, 11, 5721, 62, 4299, 50101, 11, 1391, 20560, 31431, 13, 2389, 11, 23412, 31431, 13, 34694, 92]"
⚠️ SAST Risk (Low): Potential for incorrect inverse transformation if _target_scaler is not properly configured,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11491, 34062, 13389, 611, 4808, 16793, 62, 1416, 36213, 318, 407, 6105, 17839]",0.5,623,sast_risk,135,Potential for incorrect inverse transformation if _target_scaler is not properly configured,Low,608,        categorical_scalers = {},"[220, 220, 220, 220, 220, 220, 220, 4253, 12409, 62, 1416, 282, 364, 796, 23884]"
✅ Best Practice: Use of a dictionary to store related configuration parameters,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 22155, 284, 3650, 3519, 8398, 10007]",0.5,635,best_practice,136,Use of a dictionary to store related configuration parameters,,623,        num_classes = [],"[220, 220, 220, 220, 220, 220, 220, 997, 62, 37724, 796, 17635]"
🧠 ML Signal: Use of time steps in model parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 640, 4831, 287, 2746, 10007]",0.5,647,ml_signal,136,Use of time steps in model parameters,,635,        num_classes = [],"[220, 220, 220, 220, 220, 220, 220, 997, 62, 37724, 796, 17635]"
🧠 ML Signal: Use of encoder steps in model parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2207, 12342, 4831, 287, 2746, 10007]",0.5,661,ml_signal,143,Use of encoder steps in model parameters,,647,        # Set categorical scaler outputs,"[220, 220, 220, 220, 220, 220, 220, 1303, 5345, 4253, 12409, 16578, 263, 23862]"
🧠 ML Signal: Use of epochs in model parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 36835, 82, 287, 2746, 10007]",0.5,675,ml_signal,143,Use of epochs in model parameters,,661,        # Set categorical scaler outputs,"[220, 220, 220, 220, 220, 220, 220, 1303, 5345, 4253, 12409, 16578, 263, 23862]"
🧠 ML Signal: Use of early stopping in model parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1903, 12225, 287, 2746, 10007]",0.5,696,ml_signal,144,Use of early stopping in model parameters,,675,        self._cat_scalers = categorical_scalers,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 9246, 62, 1416, 282, 364, 796, 4253, 12409, 62, 1416, 282, 364]"
🧠 ML Signal: Use of multiprocessing workers in model parameters,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 18540, 305, 919, 278, 3259, 287, 2746, 10007]",0.5,696,ml_signal,146,Use of multiprocessing workers in model parameters,,696,,[]
✅ Best Practice: Returning a dictionary for easy access to configuration parameters,"[26486, 227, 6705, 19939, 25, 42882, 257, 22155, 329, 2562, 1895, 284, 8398, 10007]",0.5,696,best_practice,146,Returning a dictionary for easy access to configuration parameters,,696,,[]
"🧠 ML Signal: Function returns a dictionary of model hyperparameters, useful for ML model configuration","[8582, 100, 254, 10373, 26484, 25, 15553, 5860, 257, 22155, 286, 2746, 8718, 17143, 7307, 11, 4465, 329, 10373, 2746, 8398]",1.0,696,ml_signal,146,"Function returns a dictionary of model hyperparameters, useful for ML model configuration",,696,,[]
✅ Best Practice: Returning a dictionary allows for easy extension and modification of model parameters,"[26486, 227, 6705, 19939, 25, 42882, 257, 22155, 3578, 329, 2562, 7552, 290, 17613, 286, 2746, 10007]",0.5,705,best_practice,155,Returning a dictionary allows for easy extension and modification of model parameters,,696,        Returns:,"[220, 220, 220, 220, 220, 220, 220, 16409, 25]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Consider importing the enum module to ensure the code runs correctly.,"[26486, 227, 6705, 19939, 25, 12642, 33332, 262, 33829, 8265, 284, 4155, 262, 2438, 4539, 9380, 13]",0.5,18,best_practice,12,Consider importing the enum module to ensure the code runs correctly.,,0,"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","[2, 42881, 34764, 11015, 6375, 7102, 49828, 11053, 3963, 15529, 509, 12115, 11, 2035, 4911, 393, 17142, 13]"
‚úÖ Best Practice: Use of enum.IntEnum for defining constant values improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 33829, 13, 5317, 4834, 388, 329, 16215, 6937, 3815, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,26,best_practice,17,Use of enum.IntEnum for defining constant values improves code readability and maintainability.,,18,"""""""Default data formatting functions for experiments.","[37811, 19463, 1366, 33313, 5499, 329, 10256, 13]"
‚úÖ Best Practice: Class docstring provides a clear description of the class purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 290, 8748]",1.0,35,best_practice,25,Class docstring provides a clear description of the class purpose and usage,,26,3) Reverts the normalisation for predictions,"[18, 8, 797, 24040, 262, 3487, 5612, 329, 16277]"
‚úÖ Best Practice: Method decorator indicates that this method must be implemented by subclasses,"[26486, 227, 6705, 19939, 25, 11789, 11705, 1352, 9217, 326, 428, 2446, 1276, 307, 9177, 416, 850, 37724]",0.5,38,best_practice,31,Method decorator indicates that this method must be implemented by subclasses,,35,import abc,"[11748, 450, 66]"
‚úÖ Best Practice: Raising NotImplementedError in a method indicates it's intended to be overridden in subclasses.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 287, 257, 2446, 9217, 340, 338, 5292, 284, 307, 23170, 4651, 287, 850, 37724, 13]",0.5,38,best_practice,33,Raising NotImplementedError in a method indicates it's intended to be overridden in subclasses.,,38,,[]
‚úÖ Best Practice: Using @abc.abstractmethod enforces that subclasses must implement this method.,"[26486, 227, 6705, 19939, 25, 8554, 2488, 39305, 13, 397, 8709, 24396, 551, 27087, 326, 850, 37724, 1276, 3494, 428, 2446, 13]",0.5,41,best_practice,35,Using @abc.abstractmethod enforces that subclasses must implement this method.,,38,# Type definitions,"[2, 5994, 17336]"
‚úÖ Best Practice: Raising NotImplementedError in a method indicates it's intended to be overridden in subclasses.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 287, 257, 2446, 9217, 340, 338, 5292, 284, 307, 23170, 4651, 287, 850, 37724, 13]",0.5,54,best_practice,37,Raising NotImplementedError in a method indicates it's intended to be overridden in subclasses.,,41,"    """"""Defines numerical types of each column.""""""","[220, 220, 220, 37227, 7469, 1127, 29052, 3858, 286, 1123, 5721, 526, 15931]"
‚úÖ Best Practice: Using @abc.abstractmethod enforces that subclasses must implement this method.,"[26486, 227, 6705, 19939, 25, 8554, 2488, 39305, 13, 397, 8709, 24396, 551, 27087, 326, 850, 37724, 1276, 3494, 428, 2446, 13]",0.5,64,best_practice,39,Using @abc.abstractmethod enforces that subclasses must implement this method.,,54,    REAL_VALUED = 0,"[220, 220, 220, 32744, 62, 23428, 52, 1961, 796, 657]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",1.0,74,best_practice,40,Include a docstring to describe the method's purpose,,64,    CATEGORICAL = 1,"[220, 220, 220, 327, 6158, 38, 1581, 20151, 796, 352]"
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if not overridden","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 23170, 4651]",0.5,74,sast_risk,43,"Method is not implemented, which could lead to runtime errors if not overridden",Low,74,,[]
‚úÖ Best Practice: Use of @abc.abstractmethod indicates this method must be implemented by subclasses,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 39305, 13, 397, 8709, 24396, 9217, 428, 2446, 1276, 307, 9177, 416, 850, 37724]",1.0,87,best_practice,45,Use of @abc.abstractmethod indicates this method must be implemented by subclasses,,74,"    """"""Defines input types of each column.""""""","[220, 220, 220, 37227, 7469, 1127, 5128, 3858, 286, 1123, 5721, 526, 15931]"
"üß† ML Signal: Method signature suggests data splitting, a common ML preprocessing step","[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 5644, 1366, 26021, 11, 257, 2219, 10373, 662, 36948, 2239]",0.5,100,ml_signal,45,"Method signature suggests data splitting, a common ML preprocessing step",,87,"    """"""Defines input types of each column.""""""","[220, 220, 220, 37227, 7469, 1127, 5128, 3858, 286, 1123, 5721, 526, 15931]"
‚úÖ Best Practice: Raising NotImplementedError in abstract methods is a good practice to enforce implementation in subclasses.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 287, 12531, 5050, 318, 257, 922, 3357, 284, 4605, 7822, 287, 850, 37724, 13]",1.0,110,best_practice,50,Raising NotImplementedError in abstract methods is a good practice to enforce implementation in subclasses.,,100,    STATIC_INPUT = 3,"[220, 220, 220, 15486, 2149, 62, 1268, 30076, 796, 513]"
‚úÖ Best Practice: Using abc.abstractmethod decorator indicates that this method is intended to be overridden in subclasses.,"[26486, 227, 6705, 19939, 25, 8554, 450, 66, 13, 397, 8709, 24396, 11705, 1352, 9217, 326, 428, 2446, 318, 5292, 284, 307, 23170, 4651, 287, 850, 37724, 13]",0.5,126,best_practice,52,Using abc.abstractmethod decorator indicates that this method is intended to be overridden in subclasses.,,110,    TIME = 5  # Single column exclusively used as a time index,"[220, 220, 220, 20460, 796, 642, 220, 1303, 14206, 5721, 11541, 973, 355, 257, 640, 6376]"
"‚ö†Ô∏è SAST Risk (Low): Method raises NotImplementedError, which can cause runtime errors if not overridden.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 543, 460, 2728, 19124, 8563, 611, 407, 23170, 4651, 13]",1.0,140,sast_risk,70,"Method raises NotImplementedError, which can cause runtime errors if not overridden.",Low,126,"        """"""Performs feature transformation.""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 5990, 23914, 3895, 13389, 526, 15931]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and usage.,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 8748, 13]",0.5,149,best_practice,73,Include a docstring to describe the method's purpose and usage.,,140,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
üß† ML Signal: Method related to handling categorical input for ML models.,"[8582, 100, 254, 10373, 26484, 25, 11789, 3519, 284, 9041, 4253, 12409, 5128, 329, 10373, 4981, 13]",0.5,149,ml_signal,77,Method related to handling categorical input for ML models.,,149,,[]
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and return value,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 1441, 1988]",1.0,158,best_practice,78,Docstring provides a clear explanation of the method's purpose and return value,,149,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
üß† ML Signal: Returns a tuple indicating the use of all available samples for calibration,"[8582, 100, 254, 10373, 26484, 25, 16409, 257, 46545, 12739, 262, 779, 286, 477, 1695, 8405, 329, 36537]",0.5,169,ml_signal,85,Returns a tuple indicating the use of all available samples for calibration,,158,    def _column_definition(self):,"[220, 220, 220, 825, 4808, 28665, 62, 46758, 7, 944, 2599]"
üß† ML Signal: Method returning a specific data structure or format,"[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 257, 2176, 1366, 4645, 393, 5794]",0.5,183,ml_signal,87,Method returning a specific data structure or format,,169,        raise NotImplementedError(),"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 3419]"
‚úÖ Best Practice: Consider renaming the function to indicate its purpose more clearly.,"[26486, 227, 6705, 19939, 25, 12642, 8851, 3723, 262, 2163, 284, 7603, 663, 4007, 517, 4084, 13]",1.0,183,best_practice,88,Consider renaming the function to indicate its purpose more clearly.,,183,,[]
üß† ML Signal: Pattern for checking the uniqueness of a specific input type in a list.,"[8582, 100, 254, 10373, 26484, 25, 23939, 329, 10627, 262, 49650, 286, 257, 2176, 5128, 2099, 287, 257, 1351, 13]",0.5,195,ml_signal,90,Pattern for checking the uniqueness of a specific input type in a list.,,183,    def get_fixed_params(self):,"[220, 220, 220, 825, 651, 62, 34021, 62, 37266, 7, 944, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential for ValueError if input_type is not found exactly once.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11052, 12331, 611, 5128, 62, 4906, 318, 407, 1043, 3446, 1752, 13]",1.0,195,sast_risk,92,Potential for ValueError if input_type is not found exactly once.,Low,195,,[]
üß† ML Signal: Function call pattern for validating input types.,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 329, 4938, 803, 5128, 3858, 13]",0.5,229,ml_signal,95,Function call pattern for validating input types.,,195,          'num_encoder_steps': Determines length of LSTM encoder (i.e. history),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 22510, 62, 12685, 12342, 62, 20214, 10354, 360, 13221, 274, 4129, 286, 406, 2257, 44, 2207, 12342, 357, 72, 13, 68, 13, 2106, 8]"
üß† ML Signal: Function call pattern for validating input types.,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 329, 4938, 803, 5128, 3858, 13]",0.5,252,ml_signal,96,Function call pattern for validating input types.,,229,          'num_epochs': Maximum number of epochs for training,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 22510, 62, 538, 5374, 82, 10354, 22246, 1271, 286, 36835, 82, 329, 3047]"
üß† ML Signal: Pattern for filtering a list based on a specific condition.,"[8582, 100, 254, 10373, 26484, 25, 23939, 329, 25431, 257, 1351, 1912, 319, 257, 2176, 4006, 13]",0.5,261,ml_signal,101,Pattern for filtering a list based on a specific condition.,,252,        Returns:,"[220, 220, 220, 220, 220, 220, 220, 16409, 25]"
üß† ML Signal: Pattern for filtering a list based on a specific condition.,"[8582, 100, 254, 10373, 26484, 25, 23939, 329, 25431, 257, 1351, 1912, 319, 257, 2176, 4006, 13]",0.5,270,ml_signal,101,Pattern for filtering a list based on a specific condition.,,261,        Returns:,"[220, 220, 220, 220, 220, 220, 220, 16409, 25]"
üß† ML Signal: Pattern for filtering and excluding specific types from a list.,"[8582, 100, 254, 10373, 26484, 25, 23939, 329, 25431, 290, 23494, 2176, 3858, 422, 257, 1351, 13]",0.5,279,ml_signal,101,Pattern for filtering and excluding specific types from a list.,,270,        Returns:,"[220, 220, 220, 220, 220, 220, 220, 16409, 25]"
üß† ML Signal: Pattern for filtering and excluding specific types from a list.,"[8582, 100, 254, 10373, 26484, 25, 23939, 329, 25431, 290, 23494, 2176, 3858, 422, 257, 1351, 13]",0.5,303,ml_signal,109,Pattern for filtering and excluding specific types from a list.,,279,"              'multiprocessing_workers': 5,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 16680, 541, 305, 919, 278, 62, 22896, 10354, 642, 11]"
‚úÖ Best Practice: Returning a concatenated list of filtered results.,"[26486, 227, 6705, 19939, 25, 42882, 257, 1673, 36686, 515, 1351, 286, 29083, 2482, 13]",1.0,308,best_practice,115,Returning a concatenated list of filtered results.,,303,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Use of a private method to encapsulate functionality,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2839, 2446, 284, 32652, 5039, 11244]",1.0,330,best_practice,107,Use of a private method to encapsulate functionality,,308,"              'num_epochs': 100,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 22510, 62, 538, 5374, 82, 10354, 1802, 11]"
üß† ML Signal: List comprehension used for concise data processing,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 973, 329, 35327, 1366, 7587]",1.0,340,ml_signal,110,List comprehension used for concise data processing,,330,          },"[220, 220, 220, 220, 220, 220, 220, 220, 220, 1782]"
‚úÖ Best Practice: Use of docstring to describe the function's purpose,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 262, 2163, 338, 4007]",0.5,353,best_practice,112,Use of docstring to describe the function's purpose,,340,        raise NotImplementedError,"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331]"
‚úÖ Best Practice: Function name is descriptive and follows naming conventions,"[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 35644, 290, 5679, 19264, 21396]",0.5,366,best_practice,112,Function name is descriptive and follows naming conventions,,353,        raise NotImplementedError,"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331]"
üß† ML Signal: List comprehension usage indicates a pattern of filtering and transforming data,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 8748, 9217, 257, 3912, 286, 25431, 290, 25449, 1366]",1.0,377,ml_signal,114,List comprehension usage indicates a pattern of filtering and transforming data,,366,    # Shared functions across data-formatters,"[220, 220, 220, 1303, 39403, 5499, 1973, 1366, 12, 18982, 1010]"
‚úÖ Best Practice: List comprehension is used for concise and efficient iteration,"[26486, 227, 6705, 19939, 25, 7343, 35915, 318, 973, 329, 35327, 290, 6942, 24415]",0.5,382,best_practice,115,List comprehension is used for concise and efficient iteration,,377,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Use of a helper function to improve code readability and reusability,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 31904, 2163, 284, 2987, 2438, 1100, 1799, 290, 302, 385, 1799]",0.5,393,best_practice,114,Use of a helper function to improve code readability and reusability,,382,    # Shared functions across data-formatters,"[220, 220, 220, 1303, 39403, 5499, 1973, 1366, 12, 18982, 1010]"
‚úÖ Best Practice: List comprehension for concise and efficient iteration,"[26486, 227, 6705, 19939, 25, 7343, 35915, 329, 35327, 290, 6942, 24415]",1.0,409,best_practice,116,List comprehension for concise and efficient iteration,,393,    def num_classes_per_cat_input(self):,"[220, 220, 220, 825, 997, 62, 37724, 62, 525, 62, 9246, 62, 15414, 7, 944, 2599]"
‚úÖ Best Practice: List comprehension for concise and efficient filtering,"[26486, 227, 6705, 19939, 25, 7343, 35915, 329, 35327, 290, 6942, 25431]",1.0,429,best_practice,119,List comprehension for concise and efficient filtering,,409,        This is seqeuently required for keras embedding layers.,"[220, 220, 220, 220, 220, 220, 220, 770, 318, 33756, 12496, 1473, 2672, 329, 41927, 292, 11525, 12083, 11685, 13]"
üß† ML Signal: Identifying categorical inputs for potential feature engineering,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 4253, 12409, 17311, 329, 2785, 3895, 8705]",1.0,448,ml_signal,121,Identifying categorical inputs for potential feature engineering,,429,        return self._num_classes_per_cat_input,"[220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13557, 22510, 62, 37724, 62, 525, 62, 9246, 62, 15414]"
üß† ML Signal: Identifying real-valued inputs for potential feature engineering,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 1103, 12, 39728, 17311, 329, 2785, 3895, 8705]",1.0,461,ml_signal,132,Identifying real-valued inputs for potential feature engineering,,448,"        return -1, -1","[220, 220, 220, 220, 220, 220, 220, 1441, 532, 16, 11, 532, 16]"
‚úÖ Best Practice: Use of a dictionary to organize related configuration data,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 22155, 284, 16481, 3519, 8398, 1366]",0.5,474,best_practice,132,Use of a dictionary to organize related configuration data,,461,"        return -1, -1","[220, 220, 220, 220, 220, 220, 220, 1441, 532, 16, 11, 532, 16]"
üß† ML Signal: Tracking input size for model input layer configuration,"[8582, 100, 254, 10373, 26484, 25, 37169, 5128, 2546, 329, 2746, 5128, 7679, 8398]",0.5,487,ml_signal,132,Tracking input size for model input layer configuration,,474,"        return -1, -1","[220, 220, 220, 220, 220, 220, 220, 1441, 532, 16, 11, 532, 16]"
üß† ML Signal: Tracking output size for model output layer configuration,"[8582, 100, 254, 10373, 26484, 25, 37169, 5072, 2546, 329, 2746, 5072, 7679, 8398]",0.5,499,ml_signal,134,Tracking output size for model output layer configuration,,487,    def get_column_definition(self):,"[220, 220, 220, 825, 651, 62, 28665, 62, 46758, 7, 944, 2599]"
üß† ML Signal: Tracking category counts for categorical feature encoding,"[8582, 100, 254, 10373, 26484, 25, 37169, 6536, 9853, 329, 4253, 12409, 3895, 21004]",0.5,520,ml_signal,135,Tracking category counts for categorical feature encoding,,499,"        """"""Returns formatted column definition in order expected by the TFT.""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 35561, 39559, 5721, 6770, 287, 1502, 2938, 416, 262, 309, 9792, 526, 15931]"
üß† ML Signal: Identifying target input locations for supervised learning,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 2496, 5128, 7064, 329, 28679, 4673]",0.5,541,ml_signal,135,Identifying target input locations for supervised learning,,520,"        """"""Returns formatted column definition in order expected by the TFT.""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 35561, 39559, 5721, 6770, 287, 1502, 2938, 416, 262, 309, 9792, 526, 15931]"
üß† ML Signal: Identifying static input locations for model input configuration,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 9037, 5128, 7064, 329, 2746, 5128, 8398]",0.5,576,ml_signal,142,Identifying static input locations for model input configuration,,541,            length = len([tup for tup in column_definition if tup[2] == input_type]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4129, 796, 18896, 26933, 83, 929, 329, 256, 929, 287, 5721, 62, 46758, 611, 256, 929, 58, 17, 60, 6624, 5128, 62, 4906, 12962]"
üß† ML Signal: Identifying known regular inputs for time series forecasting,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 1900, 3218, 17311, 329, 640, 2168, 41164]",1.0,611,ml_signal,142,Identifying known regular inputs for time series forecasting,,576,            length = len([tup for tup in column_definition if tup[2] == input_type]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4129, 796, 18896, 26933, 83, 929, 329, 256, 929, 287, 5721, 62, 46758, 611, 256, 929, 58, 17, 60, 6624, 5128, 62, 4906, 12962]"
üß† ML Signal: Identifying known categorical inputs for time series forecasting,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 1900, 4253, 12409, 17311, 329, 640, 2168, 41164]",1.0,627,ml_signal,144,Identifying known categorical inputs for time series forecasting,,611,            if length != 1:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 4129, 14512, 352, 25]"
üß† ML Signal: Checking for required keys in parameters is a common pattern in ML experiments,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 2672, 8251, 287, 10007, 318, 257, 2219, 3912, 287, 10373, 10256]",1.0,662,ml_signal,142,Checking for required keys in parameters is a common pattern in ML experiments,,627,            length = len([tup for tup in column_definition if tup[2] == input_type]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4129, 796, 18896, 26933, 83, 929, 329, 256, 929, 287, 5721, 62, 46758, 611, 256, 929, 58, 17, 60, 6624, 5128, 62, 4906, 12962]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if get_fixed_params() does not return a dictionary-like object,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 651, 62, 34021, 62, 37266, 3419, 857, 407, 1441, 257, 22155, 12, 2339, 2134]",1.0,700,sast_risk,145,Potential KeyError if get_fixed_params() does not return a dictionary-like object,Low,662,"                raise ValueError(""Illegal number of inputs ({}) of type {}"".format(length, input_type))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 33666, 18011, 1271, 286, 17311, 37913, 30072, 286, 2099, 23884, 1911, 18982, 7, 13664, 11, 5128, 62, 4906, 4008]"
‚ö†Ô∏è SAST Risk (Low): Error message could expose internal parameter names,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 714, 15651, 5387, 11507, 3891]",1.0,719,sast_risk,147,Error message could expose internal parameter names,Low,700,        _check_single_column(InputTypes.ID),"[220, 220, 220, 220, 220, 220, 220, 4808, 9122, 62, 29762, 62, 28665, 7, 20560, 31431, 13, 2389, 8]"
üß† ML Signal: Use of column definitions is common in data preprocessing for ML models,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 5721, 17336, 318, 2219, 287, 1366, 662, 36948, 329, 10373, 4981]",1.0,738,ml_signal,148,Use of column definitions is common in data preprocessing for ML models,,719,        _check_single_column(InputTypes.TIME),"[220, 220, 220, 220, 220, 220, 220, 4808, 9122, 62, 29762, 62, 28665, 7, 20560, 31431, 13, 34694, 8]"
üß† ML Signal: Updating parameters with input indices is a pattern in ML model setup,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 10007, 351, 5128, 36525, 318, 257, 3912, 287, 10373, 2746, 9058]",1.0,757,ml_signal,148,Updating parameters with input indices is a pattern in ML model setup,,738,        _check_single_column(InputTypes.TIME),"[220, 220, 220, 220, 220, 220, 220, 4808, 9122, 62, 29762, 62, 28665, 7, 20560, 31431, 13, 34694, 8]"

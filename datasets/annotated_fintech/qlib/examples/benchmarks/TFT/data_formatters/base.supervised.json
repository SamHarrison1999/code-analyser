[
  {
    "line": 12,
    "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
    "annotation": "\u2705 Best Practice: Consider importing the enum module to ensure the code runs correctly.",
    "confidence": 0.5,
    "tokens": [
      2,
      42881,
      34764,
      11015,
      6375,
      7102,
      49828,
      11053,
      3963,
      15529,
      509,
      12115,
      11,
      2035,
      4911,
      393,
      17142,
      13
    ],
    "start_token": 0,
    "end_token": 18,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      33332,
      262,
      33829,
      8265,
      284,
      4155,
      262,
      2438,
      4539,
      9380,
      13
    ],
    "label": "best_practice",
    "reason": "Consider importing the enum module to ensure the code runs correctly."
  },
  {
    "line": 17,
    "text": "\"\"\"Default data formatting functions for experiments.",
    "annotation": "\u2705 Best Practice: Use of enum.IntEnum for defining constant values improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      37811,
      19463,
      1366,
      33313,
      5499,
      329,
      10256,
      13
    ],
    "start_token": 18,
    "end_token": 26,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      33829,
      13,
      5317,
      4834,
      388,
      329,
      16215,
      6937,
      3815,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of enum.IntEnum for defining constant values improves code readability and maintainability."
  },
  {
    "line": 25,
    "text": "3) Reverts the normalisation for predictions",
    "annotation": "\u2705 Best Practice: Class docstring provides a clear description of the class purpose and usage",
    "confidence": 1.0,
    "tokens": [
      18,
      8,
      797,
      24040,
      262,
      3487,
      5612,
      329,
      16277
    ],
    "start_token": 26,
    "end_token": 35,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      2205,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      1398,
      4007,
      290,
      8748
    ],
    "label": "best_practice",
    "reason": "Class docstring provides a clear description of the class purpose and usage"
  },
  {
    "line": 31,
    "text": "import abc",
    "annotation": "\u2705 Best Practice: Method decorator indicates that this method must be implemented by subclasses",
    "confidence": 0.5,
    "tokens": [
      11748,
      450,
      66
    ],
    "start_token": 35,
    "end_token": 38,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      11705,
      1352,
      9217,
      326,
      428,
      2446,
      1276,
      307,
      9177,
      416,
      850,
      37724
    ],
    "label": "best_practice",
    "reason": "Method decorator indicates that this method must be implemented by subclasses"
  },
  {
    "line": 33,
    "text": "",
    "annotation": "\u2705 Best Practice: Raising NotImplementedError in a method indicates it's intended to be overridden in subclasses.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 38,
    "end_token": 38,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      287,
      257,
      2446,
      9217,
      340,
      338,
      5292,
      284,
      307,
      23170,
      4651,
      287,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Raising NotImplementedError in a method indicates it's intended to be overridden in subclasses."
  },
  {
    "line": 35,
    "text": "# Type definitions",
    "annotation": "\u2705 Best Practice: Using @abc.abstractmethod enforces that subclasses must implement this method.",
    "confidence": 0.5,
    "tokens": [
      2,
      5994,
      17336
    ],
    "start_token": 38,
    "end_token": 41,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2488,
      39305,
      13,
      397,
      8709,
      24396,
      551,
      27087,
      326,
      850,
      37724,
      1276,
      3494,
      428,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Using @abc.abstractmethod enforces that subclasses must implement this method."
  },
  {
    "line": 37,
    "text": "    \"\"\"Defines numerical types of each column.\"\"\"",
    "annotation": "\u2705 Best Practice: Raising NotImplementedError in a method indicates it's intended to be overridden in subclasses.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      7469,
      1127,
      29052,
      3858,
      286,
      1123,
      5721,
      526,
      15931
    ],
    "start_token": 41,
    "end_token": 54,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      287,
      257,
      2446,
      9217,
      340,
      338,
      5292,
      284,
      307,
      23170,
      4651,
      287,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Raising NotImplementedError in a method indicates it's intended to be overridden in subclasses."
  },
  {
    "line": 39,
    "text": "    REAL_VALUED = 0",
    "annotation": "\u2705 Best Practice: Using @abc.abstractmethod enforces that subclasses must implement this method.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      32744,
      62,
      23428,
      52,
      1961,
      796,
      657
    ],
    "start_token": 54,
    "end_token": 64,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2488,
      39305,
      13,
      397,
      8709,
      24396,
      551,
      27087,
      326,
      850,
      37724,
      1276,
      3494,
      428,
      2446,
      13
    ],
    "label": "best_practice",
    "reason": "Using @abc.abstractmethod enforces that subclasses must implement this method."
  },
  {
    "line": 40,
    "text": "    CATEGORICAL = 1",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      327,
      6158,
      38,
      1581,
      20151,
      796,
      352
    ],
    "start_token": 64,
    "end_token": 74,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose"
  },
  {
    "line": 43,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method is not implemented, which could lead to runtime errors if not overridden",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 74,
    "end_token": 74,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      318,
      407,
      9177,
      11,
      543,
      714,
      1085,
      284,
      19124,
      8563,
      611,
      407,
      23170,
      4651
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method is not implemented, which could lead to runtime errors if not overridden"
  },
  {
    "line": 45,
    "text": "    \"\"\"Defines input types of each column.\"\"\"",
    "annotation": "\u2705 Best Practice: Use of @abc.abstractmethod indicates this method must be implemented by subclasses",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      7469,
      1127,
      5128,
      3858,
      286,
      1123,
      5721,
      526,
      15931
    ],
    "start_token": 74,
    "end_token": 87,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      39305,
      13,
      397,
      8709,
      24396,
      9217,
      428,
      2446,
      1276,
      307,
      9177,
      416,
      850,
      37724
    ],
    "label": "best_practice",
    "reason": "Use of @abc.abstractmethod indicates this method must be implemented by subclasses"
  },
  {
    "line": 45,
    "text": "    \"\"\"Defines input types of each column.\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method signature suggests data splitting, a common ML preprocessing step",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      7469,
      1127,
      5128,
      3858,
      286,
      1123,
      5721,
      526,
      15931
    ],
    "start_token": 87,
    "end_token": 100,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      5644,
      1366,
      26021,
      11,
      257,
      2219,
      10373,
      662,
      36948,
      2239
    ],
    "label": "ml_signal",
    "reason": "Method signature suggests data splitting, a common ML preprocessing step"
  },
  {
    "line": 50,
    "text": "    STATIC_INPUT = 3",
    "annotation": "\u2705 Best Practice: Raising NotImplementedError in abstract methods is a good practice to enforce implementation in subclasses.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      15486,
      2149,
      62,
      1268,
      30076,
      796,
      513
    ],
    "start_token": 100,
    "end_token": 110,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      1892,
      3546,
      1154,
      12061,
      12331,
      287,
      12531,
      5050,
      318,
      257,
      922,
      3357,
      284,
      4605,
      7822,
      287,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Raising NotImplementedError in abstract methods is a good practice to enforce implementation in subclasses."
  },
  {
    "line": 52,
    "text": "    TIME = 5  # Single column exclusively used as a time index",
    "annotation": "\u2705 Best Practice: Using abc.abstractmethod decorator indicates that this method is intended to be overridden in subclasses.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      20460,
      796,
      642,
      220,
      1303,
      14206,
      5721,
      11541,
      973,
      355,
      257,
      640,
      6376
    ],
    "start_token": 110,
    "end_token": 126,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      450,
      66,
      13,
      397,
      8709,
      24396,
      11705,
      1352,
      9217,
      326,
      428,
      2446,
      318,
      5292,
      284,
      307,
      23170,
      4651,
      287,
      850,
      37724,
      13
    ],
    "label": "best_practice",
    "reason": "Using abc.abstractmethod decorator indicates that this method is intended to be overridden in subclasses."
  },
  {
    "line": 70,
    "text": "        \"\"\"Performs feature transformation.\"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method raises NotImplementedError, which can cause runtime errors if not overridden.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      5990,
      23914,
      3895,
      13389,
      526,
      15931
    ],
    "start_token": 126,
    "end_token": 140,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      12073,
      1892,
      3546,
      1154,
      12061,
      12331,
      11,
      543,
      460,
      2728,
      19124,
      8563,
      611,
      407,
      23170,
      4651,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method raises NotImplementedError, which can cause runtime errors if not overridden."
  },
  {
    "line": 73,
    "text": "    @abc.abstractmethod",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      39305,
      13,
      397,
      8709,
      24396
    ],
    "start_token": 140,
    "end_token": 149,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and usage."
  },
  {
    "line": 77,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method related to handling categorical input for ML models.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 149,
    "end_token": 149,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      3519,
      284,
      9041,
      4253,
      12409,
      5128,
      329,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Method related to handling categorical input for ML models."
  },
  {
    "line": 78,
    "text": "    @abc.abstractmethod",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the method's purpose and return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      39305,
      13,
      397,
      8709,
      24396
    ],
    "start_token": 149,
    "end_token": 158,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2446,
      338,
      4007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the method's purpose and return value"
  },
  {
    "line": 85,
    "text": "    def _column_definition(self):",
    "annotation": "\ud83e\udde0 ML Signal: Returns a tuple indicating the use of all available samples for calibration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      28665,
      62,
      46758,
      7,
      944,
      2599
    ],
    "start_token": 158,
    "end_token": 169,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      257,
      46545,
      12739,
      262,
      779,
      286,
      477,
      1695,
      8405,
      329,
      36537
    ],
    "label": "ml_signal",
    "reason": "Returns a tuple indicating the use of all available samples for calibration"
  },
  {
    "line": 87,
    "text": "        raise NotImplementedError()",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a specific data structure or format",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331,
      3419
    ],
    "start_token": 169,
    "end_token": 183,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      2176,
      1366,
      4645,
      393,
      5794
    ],
    "label": "ml_signal",
    "reason": "Method returning a specific data structure or format"
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider renaming the function to indicate its purpose more clearly.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 183,
    "end_token": 183,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      8851,
      3723,
      262,
      2163,
      284,
      7603,
      663,
      4007,
      517,
      4084,
      13
    ],
    "label": "best_practice",
    "reason": "Consider renaming the function to indicate its purpose more clearly."
  },
  {
    "line": 90,
    "text": "    def get_fixed_params(self):",
    "annotation": "\ud83e\udde0 ML Signal: Pattern for checking the uniqueness of a specific input type in a list.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      34021,
      62,
      37266,
      7,
      944,
      2599
    ],
    "start_token": 183,
    "end_token": 195,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      329,
      10627,
      262,
      49650,
      286,
      257,
      2176,
      5128,
      2099,
      287,
      257,
      1351,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern for checking the uniqueness of a specific input type in a list."
  },
  {
    "line": 92,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for ValueError if input_type is not found exactly once.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 195,
    "end_token": 195,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      11052,
      12331,
      611,
      5128,
      62,
      4906,
      318,
      407,
      1043,
      3446,
      1752,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for ValueError if input_type is not found exactly once."
  },
  {
    "line": 95,
    "text": "          'num_encoder_steps': Determines length of LSTM encoder (i.e. history)",
    "annotation": "\ud83e\udde0 ML Signal: Function call pattern for validating input types.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      22510,
      62,
      12685,
      12342,
      62,
      20214,
      10354,
      360,
      13221,
      274,
      4129,
      286,
      406,
      2257,
      44,
      2207,
      12342,
      357,
      72,
      13,
      68,
      13,
      2106,
      8
    ],
    "start_token": 195,
    "end_token": 229,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      3912,
      329,
      4938,
      803,
      5128,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Function call pattern for validating input types."
  },
  {
    "line": 96,
    "text": "          'num_epochs': Maximum number of epochs for training",
    "annotation": "\ud83e\udde0 ML Signal: Function call pattern for validating input types.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      22510,
      62,
      538,
      5374,
      82,
      10354,
      22246,
      1271,
      286,
      36835,
      82,
      329,
      3047
    ],
    "start_token": 229,
    "end_token": 252,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      3912,
      329,
      4938,
      803,
      5128,
      3858,
      13
    ],
    "label": "ml_signal",
    "reason": "Function call pattern for validating input types."
  },
  {
    "line": 101,
    "text": "        Returns:",
    "annotation": "\ud83e\udde0 ML Signal: Pattern for filtering a list based on a specific condition.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409,
      25
    ],
    "start_token": 252,
    "end_token": 261,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      329,
      25431,
      257,
      1351,
      1912,
      319,
      257,
      2176,
      4006,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern for filtering a list based on a specific condition."
  },
  {
    "line": 101,
    "text": "        Returns:",
    "annotation": "\ud83e\udde0 ML Signal: Pattern for filtering a list based on a specific condition.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409,
      25
    ],
    "start_token": 261,
    "end_token": 270,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      329,
      25431,
      257,
      1351,
      1912,
      319,
      257,
      2176,
      4006,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern for filtering a list based on a specific condition."
  },
  {
    "line": 101,
    "text": "        Returns:",
    "annotation": "\ud83e\udde0 ML Signal: Pattern for filtering and excluding specific types from a list.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409,
      25
    ],
    "start_token": 270,
    "end_token": 279,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      329,
      25431,
      290,
      23494,
      2176,
      3858,
      422,
      257,
      1351,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern for filtering and excluding specific types from a list."
  },
  {
    "line": 109,
    "text": "              'multiprocessing_workers': 5,",
    "annotation": "\ud83e\udde0 ML Signal: Pattern for filtering and excluding specific types from a list.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      16680,
      541,
      305,
      919,
      278,
      62,
      22896,
      10354,
      642,
      11
    ],
    "start_token": 279,
    "end_token": 303,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      329,
      25431,
      290,
      23494,
      2176,
      3858,
      422,
      257,
      1351,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern for filtering and excluding specific types from a list."
  },
  {
    "line": 115,
    "text": "    @property",
    "annotation": "\u2705 Best Practice: Returning a concatenated list of filtered results.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 303,
    "end_token": 308,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      1673,
      36686,
      515,
      1351,
      286,
      29083,
      2482,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a concatenated list of filtered results."
  },
  {
    "line": 107,
    "text": "              'num_epochs': 100,",
    "annotation": "\u2705 Best Practice: Use of a private method to encapsulate functionality",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      22510,
      62,
      538,
      5374,
      82,
      10354,
      1802,
      11
    ],
    "start_token": 308,
    "end_token": 330,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      2839,
      2446,
      284,
      32652,
      5039,
      11244
    ],
    "label": "best_practice",
    "reason": "Use of a private method to encapsulate functionality"
  },
  {
    "line": 110,
    "text": "          }",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension used for concise data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 330,
    "end_token": 340,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      973,
      329,
      35327,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "List comprehension used for concise data processing"
  },
  {
    "line": 112,
    "text": "        raise NotImplementedError",
    "annotation": "\u2705 Best Practice: Use of docstring to describe the function's purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 340,
    "end_token": 353,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe the function's purpose"
  },
  {
    "line": 112,
    "text": "        raise NotImplementedError",
    "annotation": "\u2705 Best Practice: Function name is descriptive and follows naming conventions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      1892,
      3546,
      1154,
      12061,
      12331
    ],
    "start_token": 353,
    "end_token": 366,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      318,
      35644,
      290,
      5679,
      19264,
      21396
    ],
    "label": "best_practice",
    "reason": "Function name is descriptive and follows naming conventions"
  },
  {
    "line": 114,
    "text": "    # Shared functions across data-formatters",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension usage indicates a pattern of filtering and transforming data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1303,
      39403,
      5499,
      1973,
      1366,
      12,
      18982,
      1010
    ],
    "start_token": 366,
    "end_token": 377,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      8748,
      9217,
      257,
      3912,
      286,
      25431,
      290,
      25449,
      1366
    ],
    "label": "ml_signal",
    "reason": "List comprehension usage indicates a pattern of filtering and transforming data"
  },
  {
    "line": 115,
    "text": "    @property",
    "annotation": "\u2705 Best Practice: List comprehension is used for concise and efficient iteration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 377,
    "end_token": 382,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7343,
      35915,
      318,
      973,
      329,
      35327,
      290,
      6942,
      24415
    ],
    "label": "best_practice",
    "reason": "List comprehension is used for concise and efficient iteration"
  },
  {
    "line": 114,
    "text": "    # Shared functions across data-formatters",
    "annotation": "\u2705 Best Practice: Use of a helper function to improve code readability and reusability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      39403,
      5499,
      1973,
      1366,
      12,
      18982,
      1010
    ],
    "start_token": 382,
    "end_token": 393,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      31904,
      2163,
      284,
      2987,
      2438,
      1100,
      1799,
      290,
      302,
      385,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of a helper function to improve code readability and reusability"
  },
  {
    "line": 116,
    "text": "    def num_classes_per_cat_input(self):",
    "annotation": "\u2705 Best Practice: List comprehension for concise and efficient iteration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      997,
      62,
      37724,
      62,
      525,
      62,
      9246,
      62,
      15414,
      7,
      944,
      2599
    ],
    "start_token": 393,
    "end_token": 409,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7343,
      35915,
      329,
      35327,
      290,
      6942,
      24415
    ],
    "label": "best_practice",
    "reason": "List comprehension for concise and efficient iteration"
  },
  {
    "line": 119,
    "text": "        This is seqeuently required for keras embedding layers.",
    "annotation": "\u2705 Best Practice: List comprehension for concise and efficient filtering",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      770,
      318,
      33756,
      12496,
      1473,
      2672,
      329,
      41927,
      292,
      11525,
      12083,
      11685,
      13
    ],
    "start_token": 409,
    "end_token": 429,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7343,
      35915,
      329,
      35327,
      290,
      6942,
      25431
    ],
    "label": "best_practice",
    "reason": "List comprehension for concise and efficient filtering"
  },
  {
    "line": 121,
    "text": "        return self._num_classes_per_cat_input",
    "annotation": "\ud83e\udde0 ML Signal: Identifying categorical inputs for potential feature engineering",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13557,
      22510,
      62,
      37724,
      62,
      525,
      62,
      9246,
      62,
      15414
    ],
    "start_token": 429,
    "end_token": 448,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11440,
      4035,
      4253,
      12409,
      17311,
      329,
      2785,
      3895,
      8705
    ],
    "label": "ml_signal",
    "reason": "Identifying categorical inputs for potential feature engineering"
  },
  {
    "line": 132,
    "text": "        return -1, -1",
    "annotation": "\ud83e\udde0 ML Signal: Identifying real-valued inputs for potential feature engineering",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      532,
      16,
      11,
      532,
      16
    ],
    "start_token": 448,
    "end_token": 461,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11440,
      4035,
      1103,
      12,
      39728,
      17311,
      329,
      2785,
      3895,
      8705
    ],
    "label": "ml_signal",
    "reason": "Identifying real-valued inputs for potential feature engineering"
  },
  {
    "line": 132,
    "text": "        return -1, -1",
    "annotation": "\u2705 Best Practice: Use of a dictionary to organize related configuration data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      532,
      16,
      11,
      532,
      16
    ],
    "start_token": 461,
    "end_token": 474,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      22155,
      284,
      16481,
      3519,
      8398,
      1366
    ],
    "label": "best_practice",
    "reason": "Use of a dictionary to organize related configuration data"
  },
  {
    "line": 132,
    "text": "        return -1, -1",
    "annotation": "\ud83e\udde0 ML Signal: Tracking input size for model input layer configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      532,
      16,
      11,
      532,
      16
    ],
    "start_token": 474,
    "end_token": 487,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      5128,
      2546,
      329,
      2746,
      5128,
      7679,
      8398
    ],
    "label": "ml_signal",
    "reason": "Tracking input size for model input layer configuration"
  },
  {
    "line": 134,
    "text": "    def get_column_definition(self):",
    "annotation": "\ud83e\udde0 ML Signal: Tracking output size for model output layer configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      651,
      62,
      28665,
      62,
      46758,
      7,
      944,
      2599
    ],
    "start_token": 487,
    "end_token": 499,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      5072,
      2546,
      329,
      2746,
      5072,
      7679,
      8398
    ],
    "label": "ml_signal",
    "reason": "Tracking output size for model output layer configuration"
  },
  {
    "line": 135,
    "text": "        \"\"\"Returns formatted column definition in order expected by the TFT.\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Tracking category counts for categorical feature encoding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      35561,
      39559,
      5721,
      6770,
      287,
      1502,
      2938,
      416,
      262,
      309,
      9792,
      526,
      15931
    ],
    "start_token": 499,
    "end_token": 520,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      37169,
      6536,
      9853,
      329,
      4253,
      12409,
      3895,
      21004
    ],
    "label": "ml_signal",
    "reason": "Tracking category counts for categorical feature encoding"
  },
  {
    "line": 135,
    "text": "        \"\"\"Returns formatted column definition in order expected by the TFT.\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Identifying target input locations for supervised learning",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      35561,
      39559,
      5721,
      6770,
      287,
      1502,
      2938,
      416,
      262,
      309,
      9792,
      526,
      15931
    ],
    "start_token": 520,
    "end_token": 541,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11440,
      4035,
      2496,
      5128,
      7064,
      329,
      28679,
      4673
    ],
    "label": "ml_signal",
    "reason": "Identifying target input locations for supervised learning"
  },
  {
    "line": 142,
    "text": "            length = len([tup for tup in column_definition if tup[2] == input_type])",
    "annotation": "\ud83e\udde0 ML Signal: Identifying static input locations for model input configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4129,
      796,
      18896,
      26933,
      83,
      929,
      329,
      256,
      929,
      287,
      5721,
      62,
      46758,
      611,
      256,
      929,
      58,
      17,
      60,
      6624,
      5128,
      62,
      4906,
      12962
    ],
    "start_token": 541,
    "end_token": 576,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11440,
      4035,
      9037,
      5128,
      7064,
      329,
      2746,
      5128,
      8398
    ],
    "label": "ml_signal",
    "reason": "Identifying static input locations for model input configuration"
  },
  {
    "line": 142,
    "text": "            length = len([tup for tup in column_definition if tup[2] == input_type])",
    "annotation": "\ud83e\udde0 ML Signal: Identifying known regular inputs for time series forecasting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4129,
      796,
      18896,
      26933,
      83,
      929,
      329,
      256,
      929,
      287,
      5721,
      62,
      46758,
      611,
      256,
      929,
      58,
      17,
      60,
      6624,
      5128,
      62,
      4906,
      12962
    ],
    "start_token": 576,
    "end_token": 611,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11440,
      4035,
      1900,
      3218,
      17311,
      329,
      640,
      2168,
      41164
    ],
    "label": "ml_signal",
    "reason": "Identifying known regular inputs for time series forecasting"
  },
  {
    "line": 144,
    "text": "            if length != 1:",
    "annotation": "\ud83e\udde0 ML Signal: Identifying known categorical inputs for time series forecasting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      4129,
      14512,
      352,
      25
    ],
    "start_token": 611,
    "end_token": 627,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11440,
      4035,
      1900,
      4253,
      12409,
      17311,
      329,
      640,
      2168,
      41164
    ],
    "label": "ml_signal",
    "reason": "Identifying known categorical inputs for time series forecasting"
  },
  {
    "line": 142,
    "text": "            length = len([tup for tup in column_definition if tup[2] == input_type])",
    "annotation": "\ud83e\udde0 ML Signal: Checking for required keys in parameters is a common pattern in ML experiments",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4129,
      796,
      18896,
      26933,
      83,
      929,
      329,
      256,
      929,
      287,
      5721,
      62,
      46758,
      611,
      256,
      929,
      58,
      17,
      60,
      6624,
      5128,
      62,
      4906,
      12962
    ],
    "start_token": 627,
    "end_token": 662,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      2672,
      8251,
      287,
      10007,
      318,
      257,
      2219,
      3912,
      287,
      10373,
      10256
    ],
    "label": "ml_signal",
    "reason": "Checking for required keys in parameters is a common pattern in ML experiments"
  },
  {
    "line": 145,
    "text": "                raise ValueError(\"Illegal number of inputs ({}) of type {}\".format(length, input_type))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if get_fixed_params() does not return a dictionary-like object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      11052,
      12331,
      7203,
      33666,
      18011,
      1271,
      286,
      17311,
      37913,
      30072,
      286,
      2099,
      23884,
      1911,
      18982,
      7,
      13664,
      11,
      5128,
      62,
      4906,
      4008
    ],
    "start_token": 662,
    "end_token": 700,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      651,
      62,
      34021,
      62,
      37266,
      3419,
      857,
      407,
      1441,
      257,
      22155,
      12,
      2339,
      2134
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if get_fixed_params() does not return a dictionary-like object"
  },
  {
    "line": 147,
    "text": "        _check_single_column(InputTypes.ID)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Error message could expose internal parameter names",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      9122,
      62,
      29762,
      62,
      28665,
      7,
      20560,
      31431,
      13,
      2389,
      8
    ],
    "start_token": 700,
    "end_token": 719,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      13047,
      3275,
      714,
      15651,
      5387,
      11507,
      3891
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Error message could expose internal parameter names"
  },
  {
    "line": 148,
    "text": "        _check_single_column(InputTypes.TIME)",
    "annotation": "\ud83e\udde0 ML Signal: Use of column definitions is common in data preprocessing for ML models",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      9122,
      62,
      29762,
      62,
      28665,
      7,
      20560,
      31431,
      13,
      34694,
      8
    ],
    "start_token": 719,
    "end_token": 738,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      5721,
      17336,
      318,
      2219,
      287,
      1366,
      662,
      36948,
      329,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Use of column definitions is common in data preprocessing for ML models"
  },
  {
    "line": 148,
    "text": "        _check_single_column(InputTypes.TIME)",
    "annotation": "\ud83e\udde0 ML Signal: Updating parameters with input indices is a pattern in ML model setup",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      9122,
      62,
      29762,
      62,
      28665,
      7,
      20560,
      31431,
      13,
      34694,
      8
    ],
    "start_token": 738,
    "end_token": 757,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      10007,
      351,
      5128,
      36525,
      318,
      257,
      3912,
      287,
      10373,
      2746,
      9058
    ],
    "label": "ml_signal",
    "reason": "Updating parameters with input indices is a pattern in ML model setup"
  }
]
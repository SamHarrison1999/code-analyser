annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Alias for better readability and to avoid namespace conflicts,"[26486, 227, 6705, 19939, 25, 978, 4448, 329, 1365, 1100, 1799, 290, 284, 3368, 25745, 12333]",0.5,0,best_practice,15,Alias for better readability and to avoid namespace conflicts,,0,,[]
"üß† ML Signal: Class for managing hyperparameter optimization, useful for ML model training","[8582, 100, 254, 10373, 26484, 25, 5016, 329, 11149, 8718, 17143, 2357, 23989, 11, 4465, 329, 10373, 2746, 3047]",0.5,0,ml_signal,27,"Class for managing hyperparameter optimization, useful for ML model training",,0,,[]
‚úÖ Best Practice: Docstring provides a clear description of the class and its attributes,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 290, 663, 12608]",0.5,2,best_practice,28,Docstring provides a clear description of the class and its attributes,,0,import collections,"[11748, 17268]"
üß† ML Signal: Storing hyperparameter ranges for model optimization,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 8718, 17143, 2357, 16069, 329, 2746, 23989]",1.0,2,ml_signal,36,Storing hyperparameter ranges for model optimization,,2,,[]
"üß† ML Signal: Using a DataFrame to store results, indicating data analysis","[8582, 100, 254, 10373, 26484, 25, 8554, 257, 6060, 19778, 284, 3650, 2482, 11, 12739, 1366, 3781]",1.0,21,ml_signal,39,"Using a DataFrame to store results, indicating data analysis",,2,"    """"""Manages hyperparameter optimisation using random search for a single GPU.","[220, 220, 220, 37227, 5124, 1095, 8718, 17143, 2357, 6436, 5612, 1262, 4738, 2989, 329, 257, 2060, 11362, 13]"
üß† ML Signal: Storing fixed parameters for model configuration,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 5969, 10007, 329, 2746, 8398]",1.0,26,ml_signal,41,Storing fixed parameters for model configuration,,21,    Attributes:,"[220, 220, 220, 49213, 25]"
"üß† ML Signal: Using a DataFrame to store saved parameters, indicating data analysis","[8582, 100, 254, 10373, 26484, 25, 8554, 257, 6060, 19778, 284, 3650, 7448, 10007, 11, 12739, 1366, 3781]",1.0,39,ml_signal,43,"Using a DataFrame to store saved parameters, indicating data analysis",,26,      results: Dataframe of validation results.,"[220, 220, 220, 220, 220, 2482, 25, 6060, 14535, 286, 21201, 2482, 13]"
üß† ML Signal: Initializing best score with infinity for optimization,"[8582, 100, 254, 10373, 26484, 25, 20768, 2890, 1266, 4776, 351, 37174, 329, 23989]",1.0,54,ml_signal,45,Initializing best score with infinity for optimization,,39,      saved_params: Dataframe of parameters trained.,"[220, 220, 220, 220, 220, 7448, 62, 37266, 25, 6060, 14535, 286, 10007, 8776, 13]"
üß† ML Signal: Storing folder path for model artifacts,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 9483, 3108, 329, 2746, 20316]",1.0,68,ml_signal,47,Storing folder path for model artifacts,,54,      optimal_name: Key to best configuration.,"[220, 220, 220, 220, 220, 16586, 62, 3672, 25, 7383, 284, 1266, 8398, 13]"
‚úÖ Best Practice: Ensuring the folder exists before using it,"[26486, 227, 6705, 19939, 25, 48221, 870, 262, 9483, 7160, 878, 1262, 340]",1.0,101,best_practice,51,Ensuring the folder exists before using it,,68,"    def __init__(self, param_ranges, fixed_params, model_folder, override_w_fixed_params=True):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 5772, 62, 81, 6231, 11, 5969, 62, 37266, 11, 2746, 62, 43551, 11, 20957, 62, 86, 62, 34021, 62, 37266, 28, 17821, 2599]"
üß† ML Signal: Flag to determine if fixed parameters should be overridden,"[8582, 100, 254, 10373, 26484, 25, 19762, 284, 5004, 611, 5969, 10007, 815, 307, 23170, 4651]",1.0,114,ml_signal,52,Flag to determine if fixed parameters should be overridden,,101,"        """"""Instantiates model.","[220, 220, 220, 220, 220, 220, 220, 37227, 6310, 17096, 689, 2746, 13]"
‚úÖ Best Practice: Consider using logging instead of print for better control over output,"[26486, 227, 6705, 19939, 25, 12642, 1262, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072]",1.0,147,best_practice,51,Consider using logging instead of print for better control over output,,114,"    def __init__(self, param_ranges, fixed_params, model_folder, override_w_fixed_params=True):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 5772, 62, 81, 6231, 11, 5969, 62, 37266, 11, 2746, 62, 43551, 11, 20957, 62, 86, 62, 34021, 62, 37266, 28, 17821, 2599]"
‚ö†Ô∏è SAST Risk (Low): os.path.join can be vulnerable to directory traversal if inputs are not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 28686, 13, 6978, 13, 22179, 460, 307, 8826, 284, 8619, 33038, 282, 611, 17311, 389, 407, 31031]",1.0,147,sast_risk,53,os.path.join can be vulnerable to directory traversal if inputs are not validated,Low,147,,[]
‚ö†Ô∏è SAST Risk (Low): os.path.join can be vulnerable to directory traversal if inputs are not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 28686, 13, 6978, 13, 22179, 460, 307, 8826, 284, 8619, 33038, 282, 611, 17311, 389, 407, 31031]",1.0,171,sast_risk,55,os.path.join can be vulnerable to directory traversal if inputs are not validated,Low,147,          param_ranges: Discrete hyperparameter range for random search.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 5772, 62, 81, 6231, 25, 8444, 8374, 8718, 17143, 2357, 2837, 329, 4738, 2989, 13]"
üß† ML Signal: Checking for the existence of files before processing,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 262, 6224, 286, 3696, 878, 7587]",1.0,191,ml_signal,57,Checking for the existence of files before processing,,171,          model_folder: Folder to store optimisation artifacts.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 2746, 62, 43551, 25, 48107, 284, 3650, 6436, 5612, 20316, 13]"
üß† ML Signal: Loading data from CSV files into DataFrames,"[8582, 100, 254, 10373, 26484, 25, 12320, 1366, 422, 44189, 3696, 656, 6060, 35439]",0.5,208,ml_signal,59,Loading data from CSV files into DataFrames,,191,            parameters with new supplied values.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10007, 351, 649, 14275, 3815, 13]"
üß† ML Signal: Loading data from CSV files into DataFrames,"[8582, 100, 254, 10373, 26484, 25, 12320, 1366, 422, 44189, 3696, 656, 6060, 35439]",0.5,208,ml_signal,61,Loading data from CSV files into DataFrames,,208,,[]
üß† ML Signal: Checking if DataFrame is empty,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 6060, 19778, 318, 6565]",0.5,208,ml_signal,63,Checking if DataFrame is empty,,208,,[]
üß† ML Signal: Applying a function to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 2163, 284, 257, 6060, 19778, 5721]",0.5,225,ml_signal,65,Applying a function to a DataFrame column,,208,        self.results = pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 43420, 796, 279, 67, 13, 6601, 19778, 3419]"
üß† ML Signal: Finding the minimum value in a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 27063, 262, 5288, 1988, 287, 257, 6060, 19778, 5721]",1.0,245,ml_signal,67,Finding the minimum value in a DataFrame column,,225,        self.saved_params = pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 82, 9586, 62, 37266, 796, 279, 67, 13, 6601, 19778, 3419]"
üß† ML Signal: Boolean indexing in DataFrames,"[8582, 100, 254, 10373, 26484, 25, 41146, 6376, 278, 287, 6060, 35439]",0.5,261,ml_signal,69,Boolean indexing in DataFrames,,245,        self.best_score = np.Inf,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 13466, 62, 26675, 796, 45941, 13, 18943]"
üß† ML Signal: Accessing DataFrame index,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 6376]",0.5,261,ml_signal,71,Accessing DataFrame index,,261,,[]
"üß† ML Signal: Method for retrieving parameters by key, useful for model configuration","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 50122, 10007, 416, 1994, 11, 4465, 329, 2746, 8398]",0.5,277,ml_signal,66,"Method for retrieving parameters by key, useful for model configuration",,261,        self.fixed_params = fixed_params,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 34021, 62, 37266, 796, 5969, 62, 37266]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'name' is not in 'params',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 3672, 6, 318, 407, 287, 705, 37266, 6]",0.5,277,sast_risk,68,Potential KeyError if 'name' is not in 'params',Low,277,,[]
"üß† ML Signal: Conditional logic for overriding parameters, indicating dynamic configuration","[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 329, 44987, 10007, 11, 12739, 8925, 8398]",0.5,292,ml_signal,70,"Conditional logic for overriding parameters, indicating dynamic configuration",,277,"        self.optimal_name = """"","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 8738, 4402, 62, 3672, 796, 13538]"
"üß† ML Signal: Iterating over fixed parameters, indicating a pattern of parameter management","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 5969, 10007, 11, 12739, 257, 3912, 286, 11507, 4542]",1.0,301,ml_signal,72,"Iterating over fixed parameters, indicating a pattern of parameter management",,292,        # Setup,"[220, 220, 220, 220, 220, 220, 220, 1303, 31122]"
‚úÖ Best Practice: Explicitly setting dictionary values for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 22155, 3815, 329, 16287]",1.0,318,best_practice,74,Explicitly setting dictionary values for clarity,,301,        self.hyperparam_folder = model_folder,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 49229, 17143, 62, 43551, 796, 2746, 62, 43551]"
‚úÖ Best Practice: Returning a dictionary copy to prevent external modifications,"[26486, 227, 6705, 19939, 25, 42882, 257, 22155, 4866, 284, 2948, 7097, 19008]",0.5,318,best_practice,76,Returning a dictionary copy to prevent external modifications,,318,,[]
‚úÖ Best Practice: Method docstring provides a clear description of the method's purpose,"[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 338, 4007]",1.0,327,best_practice,72,Method docstring provides a clear description of the method's purpose,,318,        # Setup,"[220, 220, 220, 220, 220, 220, 220, 1303, 31122]"
üß† ML Signal: Accessing a property that likely stores the name of the optimal model or configuration,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 3119, 326, 1884, 7000, 262, 1438, 286, 262, 16586, 2746, 393, 8398]",1.0,354,ml_signal,75,Accessing a property that likely stores the name of the optimal model or configuration,,327,        utils.create_folder_if_not_exist(self.hyperparam_folder),"[220, 220, 220, 220, 220, 220, 220, 3384, 4487, 13, 17953, 62, 43551, 62, 361, 62, 1662, 62, 38476, 7, 944, 13, 49229, 17143, 62, 43551, 8]"
üß† ML Signal: Method call to retrieve parameters based on a model or configuration name,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 284, 19818, 10007, 1912, 319, 257, 2746, 393, 8398, 1438]",1.0,379,ml_signal,77,Method call to retrieve parameters based on a model or configuration name,,354,        self._override_w_fixed_params = override_w_fixed_params,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 2502, 13154, 62, 86, 62, 34021, 62, 37266, 796, 20957, 62, 86, 62, 34021, 62, 37266]"
‚ö†Ô∏è SAST Risk (High): Use of shutil.rmtree can delete important files if hyperparam_folder is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 4423, 346, 13, 81, 16762, 631, 460, 12233, 1593, 3696, 611, 8718, 17143, 62, 43551, 318, 407, 31031]",1.0,379,sast_risk,76,Use of shutil.rmtree can delete important files if hyperparam_folder is not validated,High,379,,[]
‚úÖ Best Practice: Consider adding error handling for file operations,"[26486, 227, 6705, 19939, 25, 12642, 4375, 4049, 9041, 329, 2393, 4560]",0.5,404,best_practice,77,Consider adding error handling for file operations,,379,        self._override_w_fixed_params = override_w_fixed_params,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 2502, 13154, 62, 86, 62, 34021, 62, 37266, 796, 20957, 62, 86, 62, 34021, 62, 37266]"
‚úÖ Best Practice: Ensure the directory is created after clearing,"[26486, 227, 6705, 19939, 25, 48987, 262, 8619, 318, 2727, 706, 17304]",0.5,414,best_practice,79,Ensure the directory is created after clearing,,404,    def load_results(self):,"[220, 220, 220, 825, 3440, 62, 43420, 7, 944, 2599]"
üß† ML Signal: Resetting results to an empty DataFrame indicates a pattern of iterative experimentation,"[8582, 100, 254, 10373, 26484, 25, 30027, 889, 2482, 284, 281, 6565, 6060, 19778, 9217, 257, 3912, 286, 11629, 876, 29315]",1.0,414,ml_signal,81,Resetting results to an empty DataFrame indicates a pattern of iterative experimentation,,414,,[]
üß† ML Signal: Resetting saved parameters to an empty DataFrame indicates a pattern of iterative experimentation,"[8582, 100, 254, 10373, 26484, 25, 30027, 889, 7448, 10007, 284, 281, 6565, 6060, 19778, 9217, 257, 3912, 286, 11629, 876, 29315]",1.0,433,ml_signal,83,Resetting saved parameters to an empty DataFrame indicates a pattern of iterative experimentation,,414,          A boolean indicating if previous results can be loaded.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 317, 25131, 12739, 611, 2180, 2482, 460, 307, 9639, 13]"
üß† ML Signal: Use of parameter validation logic,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11507, 21201, 9156]",0.5,441,ml_signal,84,Use of parameter validation logic,,433,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: List comprehension for filtering invalid fields,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 329, 25431, 12515, 7032]",1.0,441,ml_signal,86,List comprehension for filtering invalid fields,,441,,[]
üß† ML Signal: List comprehension for filtering missing fields,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 329, 25431, 4814, 7032]",1.0,470,ml_signal,88,List comprehension for filtering missing fields,,441,"        params_file = os.path.join(self.hyperparam_folder, ""params.csv"")","[220, 220, 220, 220, 220, 220, 220, 42287, 62, 7753, 796, 28686, 13, 6978, 13, 22179, 7, 944, 13, 49229, 17143, 62, 43551, 11, 366, 37266, 13, 40664, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure in error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 287, 4049, 3275]",1.0,502,sast_risk,91,Potential information disclosure in error message,Low,470,"            self.results = pd.read_csv(results_file, index_col=0)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 43420, 796, 279, 67, 13, 961, 62, 40664, 7, 43420, 62, 7753, 11, 6376, 62, 4033, 28, 15, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure in error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 287, 4049, 3275]",1.0,521,sast_risk,94,Potential information disclosure in error message,Low,502,            if not self.results.empty:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 2116, 13, 43420, 13, 28920, 25]"
‚úÖ Best Practice: Ensure params is a dictionary before processing,"[26486, 227, 6705, 19939, 25, 48987, 42287, 318, 257, 22155, 878, 7587]",0.5,521,best_practice,93,Ensure params is a dictionary before processing,,521,,[]
‚úÖ Best Practice: Use list comprehension for concise and readable code,"[26486, 227, 6705, 19939, 25, 5765, 1351, 35915, 329, 35327, 290, 31744, 2438]",0.5,558,best_practice,95,Use list comprehension for concise and readable code,,521,"                self.results.at[""loss""] = self.results.loc[""loss""].apply(float)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 43420, 13, 265, 14692, 22462, 8973, 796, 2116, 13, 43420, 13, 17946, 14692, 22462, 1, 4083, 39014, 7, 22468, 8]"
‚úÖ Best Practice: Sorting ensures consistent order for generating unique keys,"[26486, 227, 6705, 19939, 25, 311, 24707, 19047, 6414, 1502, 329, 15453, 3748, 8251]",1.0,558,best_practice,97,Sorting ensures consistent order for generating unique keys,,558,,[]
üß† ML Signal: Pattern of generating unique keys from dictionary parameters,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 15453, 3748, 8251, 422, 22155, 10007]",0.5,592,ml_signal,98,Pattern of generating unique keys from dictionary parameters,,558,"                is_optimal = self.results.loc[""loss""] == self.best_score","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 318, 62, 8738, 4402, 796, 2116, 13, 43420, 13, 17946, 14692, 22462, 8973, 6624, 2116, 13, 13466, 62, 26675]"
‚ö†Ô∏è SAST Risk (Low): Lack of type checking for self.results.index could lead to unexpected errors if it's not iterable.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 38289, 286, 2099, 10627, 329, 2116, 13, 43420, 13, 9630, 714, 1085, 284, 10059, 8563, 611, 340, 338, 407, 11629, 540, 13]",0.5,592,sast_risk,104,Lack of type checking for self.results.index could lead to unexpected errors if it's not iterable.,Low,592,,[]
‚ö†Ô∏è SAST Risk (Low): Lack of type checking for self.param_ranges could lead to unexpected errors if it's not a dictionary.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 38289, 286, 2099, 10627, 329, 2116, 13, 17143, 62, 81, 6231, 714, 1085, 284, 10059, 8563, 611, 340, 338, 407, 257, 22155, 13]",1.0,607,sast_risk,107,Lack of type checking for self.param_ranges could lead to unexpected errors if it's not a dictionary.,Low,592,        params = self.saved_params,"[220, 220, 220, 220, 220, 220, 220, 42287, 796, 2116, 13, 82, 9586, 62, 37266]"
"‚úÖ Best Practice: Sorting keys ensures consistent order, which can prevent non-deterministic behavior.","[26486, 227, 6705, 19939, 25, 311, 24707, 8251, 19047, 6414, 1502, 11, 543, 460, 2948, 1729, 12, 67, 2357, 49228, 4069, 13]",0.5,624,best_practice,109,"Sorting keys ensures consistent order, which can prevent non-deterministic behavior.",,607,        selected_params = dict(params[name]),"[220, 220, 220, 220, 220, 220, 220, 6163, 62, 37266, 796, 8633, 7, 37266, 58, 3672, 12962]"
üß† ML Signal: Random choice of hyperparameters indicates a search strategy for model optimization,"[8582, 100, 254, 10373, 26484, 25, 14534, 3572, 286, 8718, 17143, 7307, 9217, 257, 2989, 4811, 329, 2746, 23989]",0.5,624,ml_signal,110,Random choice of hyperparameters indicates a search strategy for model optimization,,624,,[]
üß† ML Signal: Iterative approach to hyperparameter tuning,"[8582, 100, 254, 10373, 26484, 25, 40806, 876, 3164, 284, 8718, 17143, 2357, 24549]",1.0,624,ml_signal,116,Iterative approach to hyperparameter tuning,,624,,[]
üß† ML Signal: Naming convention for parameter sets could be used to track experiments,"[8582, 100, 254, 10373, 26484, 25, 399, 3723, 9831, 329, 11507, 5621, 714, 307, 973, 284, 2610, 10256]",0.5,642,ml_signal,118,Naming convention for parameter sets could be used to track experiments,,624,"        """"""Returns the optimal hyperparameters thus far.""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 35561, 262, 16586, 8718, 17143, 7307, 4145, 1290, 526, 15931]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError without specific context,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 1231, 2176, 4732]",0.5,642,sast_risk,121,Raising a generic ValueError without specific context,Low,642,,[]
‚ö†Ô∏è SAST Risk (Low): Handling of NaN loss values by setting them to infinity,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 49500, 286, 11013, 45, 2994, 3815, 416, 4634, 606, 284, 37174]",0.5,642,sast_risk,130,Handling of NaN loss values by setting them to infinity,Low,642,,[]
‚ö†Ô∏è SAST Risk (Low): Directory creation without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 27387, 6282, 1231, 6631, 9041]",0.5,642,sast_risk,133,Directory creation without exception handling,Low,642,,[]
üß† ML Signal: Usage of hyperparameters to generate a unique name,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8718, 17143, 7307, 284, 7716, 257, 3748, 1438]",0.5,667,ml_signal,136,Usage of hyperparameters to generate a unique name,,642,        missing_fields = [k for k in valid_fields if k not in params],"[220, 220, 220, 220, 220, 220, 220, 4814, 62, 25747, 796, 685, 74, 329, 479, 287, 4938, 62, 25747, 611, 479, 407, 287, 42287, 60]"
üß† ML Signal: Logic to determine if the current model is optimal,"[8582, 100, 254, 10373, 26484, 25, 30146, 284, 5004, 611, 262, 1459, 2746, 318, 16586]",0.5,679,ml_signal,138,Logic to determine if the current model is optimal,,667,        if invalid_fields:,"[220, 220, 220, 220, 220, 220, 220, 611, 12515, 62, 25747, 25]"
‚úÖ Best Practice: Informative print statement for debugging,"[26486, 227, 6705, 19939, 25, 45255, 876, 3601, 2643, 329, 28769]",1.0,679,best_practice,142,Informative print statement for debugging,,679,,[]
‚ö†Ô∏è SAST Risk (Medium): Potential risk if model.save() does not handle exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 611, 2746, 13, 21928, 3419, 857, 407, 5412, 13269]",0.5,699,sast_risk,144,Potential risk if model.save() does not handle exceptions,Medium,679,"        """"""Returns a unique key for the supplied set of params.""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 35561, 257, 3748, 1994, 329, 262, 14275, 900, 286, 42287, 526, 15931]"
üß† ML Signal: Updating the best score and optimal model name,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 262, 1266, 4776, 290, 16586, 2746, 1438]",0.5,714,ml_signal,146,Updating the best score and optimal model name,,699,        self._check_params(params),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 9122, 62, 37266, 7, 37266, 8]"
üß† ML Signal: Storing results and parameters for each model,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 2482, 290, 10007, 329, 1123, 2746]",0.5,725,ml_signal,149,Storing results and parameters for each model,,714,        fields.sort(),"[220, 220, 220, 220, 220, 220, 220, 7032, 13, 30619, 3419]"
‚ö†Ô∏è SAST Risk (Low): File operations without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 9220, 4560, 1231, 6631, 9041]",0.5,736,sast_risk,149,File operations without exception handling,Low,725,        fields.sort(),"[220, 220, 220, 220, 220, 220, 220, 7032, 13, 30619, 3419]"
‚ö†Ô∏è SAST Risk (Low): File operations without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 9220, 4560, 1231, 6631, 9041]",0.5,747,sast_risk,149,File operations without exception handling,Low,736,        fields.sort(),"[220, 220, 220, 220, 220, 220, 220, 7032, 13, 30619, 3419]"
üß† ML Signal: Return value indicates if the current model is the best,"[8582, 100, 254, 10373, 26484, 25, 8229, 1988, 9217, 611, 262, 1459, 2746, 318, 262, 1266]",0.5,757,ml_signal,156,Return value indicates if the current model is the best,,747,        Args:,"[220, 220, 220, 220, 220, 220, 220, 943, 14542, 25]"
‚úÖ Best Practice: Use of np.ceil for calculating max_workers ensures correct rounding up.,"[26486, 227, 6705, 19939, 25, 5765, 286, 45941, 13, 344, 346, 329, 26019, 3509, 62, 22896, 19047, 3376, 38185, 510, 13]",0.5,757,best_practice,178,Use of np.ceil for calculating max_workers ensures correct rounding up.,,757,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for ValueError if worker_number is greater than max_workers.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11052, 12331, 611, 8383, 62, 17618, 318, 3744, 621, 3509, 62, 22896, 13]",0.5,776,sast_risk,179,Potential for ValueError if worker_number is greater than max_workers.,Low,757,        for _ in range(self._max_tries):,"[220, 220, 220, 220, 220, 220, 220, 329, 4808, 287, 2837, 7, 944, 13557, 9806, 62, 83, 1678, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential for ValueError if worker_number is greater than search_iterations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11052, 12331, 611, 8383, 62, 17618, 318, 3744, 621, 2989, 62, 2676, 602, 13]",0.5,797,sast_risk,183,Potential for ValueError if worker_number is greater than search_iterations.,Low,776,            if name not in ranges_to_skip:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1438, 407, 287, 16069, 62, 1462, 62, 48267, 25]"
üß† ML Signal: Logging worker creation can be useful for tracking and debugging.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8383, 6282, 460, 307, 4465, 329, 9646, 290, 28769, 13]",0.5,816,ml_signal,192,Logging worker creation can be useful for tracking and debugging.,,797,          parameters: Hyperparameters used in optimisation.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 10007, 25, 15079, 17143, 7307, 973, 287, 6436, 5612, 13]"
‚úÖ Best Practice: Use of os.path.join for path construction improves cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 28686, 13, 6978, 13, 22179, 329, 3108, 5103, 19575, 3272, 12, 24254, 17764, 13]",0.5,834,best_practice,194,Use of os.path.join for path construction improves cross-platform compatibility.,,816,          model: Model to serialised if required.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 2746, 25, 9104, 284, 11389, 1417, 611, 2672, 13]"
‚úÖ Best Practice: Use of super() to call parent class constructor is a good practice.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 2560, 1398, 23772, 318, 257, 922, 3357, 13]",0.5,834,best_practice,196,Use of super() to call parent class constructor is a good practice.,,834,,[]
‚úÖ Best Practice: Use of os.path.join for path construction improves cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 28686, 13, 6978, 13, 22179, 329, 3108, 5103, 19575, 3272, 12, 24254, 17764, 13]",0.5,856,best_practice,198,Use of os.path.join for path construction improves cross-platform compatibility.,,834,          Boolean flag indicating if the model is the best seen so far.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 41146, 6056, 12739, 611, 262, 2746, 318, 262, 1266, 1775, 523, 1290, 13]"
üß† ML Signal: Option to clear serialized parameters indicates flexibility in hyperparameter management.,"[8582, 100, 254, 10373, 26484, 25, 16018, 284, 1598, 11389, 1143, 10007, 9217, 13688, 287, 8718, 17143, 2357, 4542, 13]",0.5,856,ml_signal,200,Option to clear serialized parameters indicates flexibility in hyperparameter management.,,856,,[]
üß† ML Signal: Logging regeneration of hyperparameter list can be useful for tracking and debugging.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 27597, 286, 8718, 17143, 2357, 1351, 460, 307, 4465, 329, 9646, 290, 28769, 13]",0.5,872,ml_signal,202,Logging regeneration of hyperparameter list can be useful for tracking and debugging.,,856,            loss = np.Inf,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2994, 796, 45941, 13, 18943]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if os.path.exists and shutil.rmtree are not atomic.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 28686, 13, 6978, 13, 1069, 1023, 290, 4423, 346, 13, 81, 16762, 631, 389, 407, 17226, 13]",0.5,872,sast_risk,203,Potential risk if os.path.exists and shutil.rmtree are not atomic.,Low,872,,[]
‚úÖ Best Practice: Use of utility function to create folder if not exists improves code reuse and readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10361, 2163, 284, 2251, 9483, 611, 407, 7160, 19575, 2438, 32349, 290, 1100, 1799, 13]",0.5,890,best_practice,207,Use of utility function to create folder if not exists improves code reuse and readability.,,872,        name = self._get_name(parameters),"[220, 220, 220, 220, 220, 220, 220, 1438, 796, 2116, 13557, 1136, 62, 3672, 7, 17143, 7307, 8]"
‚úÖ Best Practice: Use of os.path.join for path construction improves cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 28686, 13, 6978, 13, 22179, 329, 3108, 5103, 19575, 3272, 12, 24254, 17764, 13]",0.5,915,best_practice,209,Use of os.path.join for path construction improves cross-platform compatibility.,,890,        is_optimal = self.results.empty or loss < self.best_score,"[220, 220, 220, 220, 220, 220, 220, 318, 62, 8738, 4402, 796, 2116, 13, 43420, 13, 28920, 393, 2994, 1279, 2116, 13, 13466, 62, 26675]"
üß† ML Signal: Loading serialized hyperparameters indicates a pattern of data persistence and retrieval.,"[8582, 100, 254, 10373, 26484, 25, 12320, 11389, 1143, 8718, 17143, 7307, 9217, 257, 3912, 286, 1366, 30802, 290, 45069, 13]",0.5,939,ml_signal,215,Loading serialized hyperparameters indicates a pattern of data persistence and retrieval.,,915,"                print(""Optimal model found, updating"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7203, 27871, 4402, 2746, 1043, 11, 19698, 4943]"
üß† ML Signal: Worker-specific search queue suggests distributed processing pattern.,"[8582, 100, 254, 10373, 26484, 25, 35412, 12, 11423, 2989, 16834, 5644, 9387, 7587, 3912, 13]",0.5,965,ml_signal,216,Worker-specific search queue suggests distributed processing pattern.,,939,                model.save(self.hyperparam_folder),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2746, 13, 21928, 7, 944, 13, 49229, 17143, 62, 43551, 8]"
"‚úÖ Best Practice: Method name should follow PEP 8 naming conventions, consider renaming to `is_optimisation_completed`.","[26486, 227, 6705, 19939, 25, 11789, 1438, 815, 1061, 350, 8905, 807, 19264, 21396, 11, 2074, 8851, 3723, 284, 4600, 271, 62, 40085, 5612, 62, 785, 16838, 44646]",0.5,989,best_practice,205,"Method name should follow PEP 8 naming conventions, consider renaming to `is_optimisation_completed`.",,965,            os.makedirs(self.hyperparam_folder),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 28686, 13, 76, 4335, 17062, 7, 944, 13, 49229, 17143, 62, 43551, 8]"
‚úÖ Best Practice: Simplify return statement to `return not self.worker_search_queue`.,"[26486, 227, 6705, 19939, 25, 45157, 1958, 1441, 2643, 284, 4600, 7783, 407, 2116, 13, 28816, 62, 12947, 62, 36560, 44646]",0.5,1007,best_practice,207,Simplify return statement to `return not self.worker_search_queue`.,,989,        name = self._get_name(parameters),"[220, 220, 220, 220, 220, 220, 220, 1438, 796, 2116, 13557, 1136, 62, 3672, 7, 17143, 7307, 8]"
üß† ML Signal: Usage of hyperparameters suggests this is part of a machine learning workflow,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8718, 17143, 7307, 5644, 428, 318, 636, 286, 257, 4572, 4673, 30798]",1.0,1032,ml_signal,209,Usage of hyperparameters suggests this is part of a machine learning workflow,,1007,        is_optimal = self.results.empty or loss < self.best_score,"[220, 220, 220, 220, 220, 220, 220, 318, 62, 8738, 4402, 796, 2116, 13, 43420, 13, 28920, 393, 2994, 1279, 2116, 13, 13466, 62, 26675]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if worker_search_queue is empty,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 8383, 62, 12947, 62, 36560, 318, 6565]",0.5,1044,sast_risk,211,Potential IndexError if worker_search_queue is empty,Low,1032,        # save the first model,"[220, 220, 220, 220, 220, 220, 220, 1303, 3613, 262, 717, 2746]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if param_name is not in global_hyperparam_df,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 5772, 62, 3672, 318, 407, 287, 3298, 62, 49229, 17143, 62, 7568]",0.5,1063,sast_risk,213,Potential KeyError if param_name is not in global_hyperparam_df,Low,1044,"            # Try saving first, before updating info","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 9993, 8914, 717, 11, 878, 19698, 7508]"
‚úÖ Best Practice: Use logging instead of print for better control over output,"[26486, 227, 6705, 19939, 25, 5765, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072]",1.0,1087,best_practice,215,Use logging instead of print for better control over output,,1063,"                print(""Optimal model found, updating"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7203, 27871, 4402, 2746, 1043, 11, 19698, 4943]"
‚úÖ Best Practice: Use f-strings for better readability and performance,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 37336, 329, 1365, 1100, 1799, 290, 2854]",0.5,1116,best_practice,220,Use f-strings for better readability and performance,,1087,"        self.results[name] = pd.Series({""loss"": loss, ""info"": info})","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 43420, 58, 3672, 60, 796, 279, 67, 13, 27996, 7, 4895, 22462, 1298, 2994, 11, 366, 10951, 1298, 7508, 30072]"
‚ö†Ô∏è SAST Risk (Low): Potential use of unvalidated file path,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 779, 286, 555, 12102, 515, 2393, 3108]",0.5,1128,sast_risk,226,Potential use of unvalidated file path,Low,1116,        return is_optimal,"[220, 220, 220, 220, 220, 220, 220, 1441, 318, 62, 8738, 4402]"
‚ö†Ô∏è SAST Risk (Low): Potential use of unvalidated file path,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 779, 286, 555, 12102, 515, 2393, 3108]",0.5,1128,sast_risk,228,Potential use of unvalidated file path,Low,1128,,[]
üß† ML Signal: Regenerating data when file is not found,"[8582, 100, 254, 10373, 26484, 25, 40721, 803, 1366, 618, 2393, 318, 407, 1043]",0.5,1136,ml_signal,232,Regenerating data when file is not found,,1128,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
"üß† ML Signal: Usage of a method to generate hyperparameter combinations, indicating a machine learning workflow.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 7716, 8718, 17143, 2357, 17790, 11, 12739, 257, 4572, 4673, 30798, 13]",1.0,1149,ml_signal,236,"Usage of a method to generate hyperparameter combinations, indicating a machine learning workflow.",,1136,"        root_model_folder,","[220, 220, 220, 220, 220, 220, 220, 6808, 62, 19849, 62, 43551, 11]"
"‚ö†Ô∏è SAST Risk (Low): Use of print statements for logging, which may not be suitable for production environments.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3601, 6299, 329, 18931, 11, 543, 743, 407, 307, 11080, 329, 3227, 12493, 13]",1.0,1160,sast_risk,237,"Use of print statements for logging, which may not be suitable for production environments.",Low,1149,"        worker_number,","[220, 220, 220, 220, 220, 220, 220, 8383, 62, 17618, 11]"
‚úÖ Best Practice: Consider using a logging framework instead of print for better control over logging levels and outputs.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 18931, 9355, 2427, 286, 3601, 329, 1365, 1630, 625, 18931, 2974, 290, 23862, 13]",0.5,1171,best_practice,237,Consider using a logging framework instead of print for better control over logging levels and outputs.,,1160,"        worker_number,","[220, 220, 220, 220, 220, 220, 220, 8383, 62, 17618, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of overwriting existing files without warning.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 6993, 799, 278, 4683, 3696, 1231, 6509, 13]",0.5,1186,sast_risk,245,Potential risk of overwriting existing files without warning.,Low,1171,        hyperparameter combinations and serialises them,"[220, 220, 220, 220, 220, 220, 220, 8718, 17143, 2357, 17790, 290, 11389, 2696, 606]"
"üß† ML Signal: Returning a DataFrame of hyperparameter combinations, relevant for ML model training or tuning.","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 286, 8718, 17143, 2357, 17790, 11, 5981, 329, 10373, 2746, 3047, 393, 24549, 13]",0.5,1201,ml_signal,245,"Returning a DataFrame of hyperparameter combinations, relevant for ML model training or tuning.",,1186,        hyperparameter combinations and serialises them,"[220, 220, 220, 220, 220, 220, 220, 8718, 17143, 2357, 17790, 290, 11389, 2696, 606]"
üß† ML Signal: Setting a random seed for reproducibility in experiments,"[8582, 100, 254, 10373, 26484, 25, 25700, 257, 4738, 9403, 329, 8186, 66, 2247, 287, 10256]",0.5,1214,ml_signal,249,Setting a random seed for reproducibility in experiments,,1201,        resulting in parameter overlaps.,"[220, 220, 220, 220, 220, 220, 220, 7186, 287, 11507, 12893, 1686, 13]"
üß† ML Signal: Iterating over a fixed number of search iterations for hyperparameter tuning,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 5969, 1271, 286, 2989, 34820, 329, 8718, 17143, 2357, 24549]",1.0,1233,ml_signal,253,Iterating over a fixed number of search iterations for hyperparameter tuning,,1214,          fixed_params: Fixed model parameters per experiment.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 5969, 62, 37266, 25, 10832, 2746, 10007, 583, 6306, 13]"
üß† ML Signal: Using a method to get the next set of hyperparameters,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 2446, 284, 651, 262, 1306, 900, 286, 8718, 17143, 7307]",0.5,1256,ml_signal,255,Using a method to get the next set of hyperparameters,,1233,          worker_number: Worker index defining which set of hyperparameters to,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 8383, 62, 17618, 25, 35412, 6376, 16215, 543, 900, 286, 8718, 17143, 7307, 284]"
üß† ML Signal: Generating a unique name for each set of hyperparameters,"[8582, 100, 254, 10373, 26484, 25, 2980, 803, 257, 3748, 1438, 329, 1123, 900, 286, 8718, 17143, 7307]",0.5,1277,ml_signal,257,Generating a unique name for each set of hyperparameters,,1256,          search_iterations: Maximum number of random search iterations.,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 2989, 62, 2676, 602, 25, 22246, 1271, 286, 4738, 2989, 34820, 13]"
üß† ML Signal: Creating a DataFrame to store hyperparameter combinations,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 6060, 19778, 284, 3650, 8718, 17143, 2357, 17790]",0.5,1285,ml_signal,261,Creating a DataFrame to store hyperparameter combinations,,1277,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Call to superclass method ensures proper inheritance behavior,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 4871, 2446, 19047, 1774, 24155, 4069]",1.0,1293,best_practice,261,Call to superclass method ensures proper inheritance behavior,,1285,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"üß† ML Signal: Resets internal state, indicating a pattern of state management","[8582, 100, 254, 10373, 26484, 25, 1874, 1039, 5387, 1181, 11, 12739, 257, 3912, 286, 1181, 4542]",1.0,1325,ml_signal,263,"Resets internal state, indicating a pattern of state management",,1293,        max_workers = int(np.ceil(search_iterations / num_iterations_per_worker)),"[220, 220, 220, 220, 220, 220, 220, 3509, 62, 22896, 796, 493, 7, 37659, 13, 344, 346, 7, 12947, 62, 2676, 602, 1220, 997, 62, 2676, 602, 62, 525, 62, 28816, 4008]"
‚úÖ Best Practice: Use of superclass method to ensure proper inheritance and method extension,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 4871, 2446, 284, 4155, 1774, 24155, 290, 2446, 7552]",1.0,1362,best_practice,268,Use of superclass method to ensure proper inheritance and method extension,,1325,"                ""Worker number ({}) cannot be larger than the total number of workers!"".format(max_workers)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 12468, 263, 1271, 37913, 30072, 2314, 307, 4025, 621, 262, 2472, 1271, 286, 3259, 48220, 18982, 7, 9806, 62, 22896, 8]"
üß† ML Signal: Conditional logic based on the success of a method call,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 1943, 286, 257, 2446, 869]",1.0,1377,ml_signal,271,Conditional logic based on the success of a method call,,1362,            raise ValueError(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7]"
üß† ML Signal: Return of a boolean value indicating success or failure,"[8582, 100, 254, 10373, 26484, 25, 8229, 286, 257, 25131, 1988, 12739, 1943, 393, 5287]",1.0,1404,ml_signal,273,Return of a boolean value indicating success or failure,,1377,"                    worker_number, search_iterations","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8383, 62, 17618, 11, 2989, 62, 2676, 602]"
üß† ML Signal: Use of a DataFrame to manage hyperparameter combinations,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 6060, 19778, 284, 6687, 8718, 17143, 2357, 17790]",1.0,1430,ml_signal,277,Use of a DataFrame to manage hyperparameter combinations,,1404,"        print(""*** Creating hyperparameter manager for worker {} ***"".format(worker_number))","[220, 220, 220, 220, 220, 220, 220, 3601, 7203, 8162, 30481, 8718, 17143, 2357, 4706, 329, 8383, 23884, 17202, 1911, 18982, 7, 28816, 62, 17618, 4008]"
üß† ML Signal: Filtering DataFrame based on worker number,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 6060, 19778, 1912, 319, 8383, 1271]",1.0,1460,ml_signal,279,Filtering DataFrame based on worker number,,1430,"        hyperparam_folder = os.path.join(root_model_folder, str(worker_number))","[220, 220, 220, 220, 220, 220, 220, 8718, 17143, 62, 43551, 796, 28686, 13, 6978, 13, 22179, 7, 15763, 62, 19849, 62, 43551, 11, 965, 7, 28816, 62, 17618, 4008]"
üß† ML Signal: Identifying unprocessed hyperparameter combinations,"[8582, 100, 254, 10373, 26484, 25, 11440, 4035, 555, 14681, 276, 8718, 17143, 2357, 17790]",1.0,1460,ml_signal,281,Identifying unprocessed hyperparameter combinations,,1460,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for large memory usage with Deque if left_overs is large,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1588, 4088, 8748, 351, 1024, 4188, 611, 1364, 62, 13801, 318, 1588]",1.0,1491,sast_risk,282,Potential for large memory usage with Deque if left_overs is large,Low,1460,"        serialised_ranges_folder = os.path.join(root_model_folder, ""hyperparams"")","[220, 220, 220, 220, 220, 220, 220, 11389, 1417, 62, 81, 6231, 62, 43551, 796, 28686, 13, 6978, 13, 22179, 7, 15763, 62, 19849, 62, 43551, 11, 366, 49229, 37266, 4943]"
‚úÖ Best Practice: Use of DataFrame.copy() to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 286, 6060, 19778, 13, 30073, 3419, 284, 3368, 30620, 262, 2656, 6060, 19778]",1.0,1519,best_practice,288,Use of DataFrame.copy() to avoid modifying the original DataFrame,,1491,        utils.create_folder_if_not_exist(serialised_ranges_folder),"[220, 220, 220, 220, 220, 220, 220, 3384, 4487, 13, 17953, 62, 43551, 62, 361, 62, 1662, 62, 38476, 7, 46911, 1417, 62, 81, 6231, 62, 43551, 8]"
üß† ML Signal: Use of total_search_iterations could indicate a pattern in distributed computing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2472, 62, 12947, 62, 2676, 602, 714, 7603, 257, 3912, 287, 9387, 14492]",0.5,1564,ml_signal,290,Use of total_search_iterations could indicate a pattern in distributed computing,,1519,"        self.serialised_ranges_path = os.path.join(serialised_ranges_folder, ""ranges_{}.csv"".format(search_iterations))","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 46911, 1417, 62, 81, 6231, 62, 6978, 796, 28686, 13, 6978, 13, 22179, 7, 46911, 1417, 62, 81, 6231, 62, 43551, 11, 366, 81, 6231, 23330, 27422, 40664, 1911, 18982, 7, 12947, 62, 2676, 602, 4008]"
üß† ML Signal: Use of num_iterations_per_worker could indicate a pattern in workload distribution,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 997, 62, 2676, 602, 62, 525, 62, 28816, 714, 7603, 257, 3912, 287, 26211, 6082]",0.5,1580,ml_signal,292,Use of num_iterations_per_worker could indicate a pattern in workload distribution,,1564,        self.worker_num = worker_number,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 28816, 62, 22510, 796, 8383, 62, 17618]"
‚úÖ Best Practice: Use of np.ceil to ensure all iterations are covered by workers,"[26486, 227, 6705, 19939, 25, 5765, 286, 45941, 13, 344, 346, 284, 4155, 477, 34820, 389, 5017, 416, 3259]",1.0,1606,best_practice,294,Use of np.ceil to ensure all iterations are covered by workers,,1580,        self.num_iterations_per_worker = num_iterations_per_worker,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 22510, 62, 2676, 602, 62, 525, 62, 28816, 796, 997, 62, 2676, 602, 62, 525, 62, 28816]"
‚úÖ Best Practice: Use of np.concatenate and np.tile for efficient array creation,"[26486, 227, 6705, 19939, 25, 5765, 286, 45941, 13, 1102, 9246, 268, 378, 290, 45941, 13, 40927, 329, 6942, 7177, 6282]",1.0,1632,best_practice,294,Use of np.concatenate and np.tile for efficient array creation,,1606,        self.num_iterations_per_worker = num_iterations_per_worker,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 22510, 62, 2676, 602, 62, 525, 62, 28816, 796, 997, 62, 2676, 602, 62, 525, 62, 28816]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if len(output) > len(worker_idx),"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 18896, 7, 22915, 8, 1875, 18896, 7, 28816, 62, 312, 87, 8]",1.0,1658,sast_risk,294,Potential IndexError if len(output) > len(worker_idx),Low,1632,        self.num_iterations_per_worker = num_iterations_per_worker,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 22510, 62, 2676, 602, 62, 525, 62, 28816, 796, 997, 62, 2676, 602, 62, 525, 62, 28816]"

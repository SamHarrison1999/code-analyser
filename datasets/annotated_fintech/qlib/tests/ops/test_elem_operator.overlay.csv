annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
✅ Best Practice: Class names should follow the CapWords convention.,"[26486, 227, 6705, 19939, 25, 5016, 3891, 815, 1061, 262, 4476, 37117, 9831, 13]",0.5,0,best_practice,9,Class names should follow the CapWords convention.,,0,,[]
✅ Best Practice: Method names in tests should be descriptive of the test case.,"[26486, 227, 6705, 19939, 25, 11789, 3891, 287, 5254, 815, 307, 35644, 286, 262, 1332, 1339, 13]",1.0,12,best_practice,12,Method names in tests should be descriptive of the test case.,,0,    def setUp(self) -> None:,"[220, 220, 220, 825, 900, 4933, 7, 944, 8, 4613, 6045, 25]"
🧠 ML Signal: Usage of setup method in unit tests indicates a pattern for initializing test environments.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 9058, 2446, 287, 4326, 5254, 9217, 257, 3912, 329, 4238, 2890, 1332, 12493, 13]",0.5,33,ml_signal,14,Usage of setup method in unit tests indicates a pattern for initializing test environments.,,12,"        self.start_time = ""2022-01-01""","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9688, 62, 2435, 796, 366, 1238, 1828, 12, 486, 12, 486, 1]"
✅ Best Practice: Method names in tests should be descriptive of the test case.,"[26486, 227, 6705, 19939, 25, 11789, 3891, 287, 5254, 815, 307, 35644, 286, 262, 1332, 1339, 13]",1.0,66,best_practice,17,Method names in tests should be descriptive of the test case.,,33,"        self.mock_df = MOCK_DF[MOCK_DF[""symbol""] == self.instrument]","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 76, 735, 62, 7568, 796, 337, 11290, 62, 8068, 58, 44, 11290, 62, 8068, 14692, 1837, 23650, 8973, 6624, 2116, 13, 259, 43872, 60]"
🧠 ML Signal: Testing object initialization is a common pattern for ensuring correct object setup.,"[8582, 100, 254, 10373, 26484, 25, 23983, 2134, 37588, 318, 257, 2219, 3912, 329, 13359, 3376, 2134, 9058, 13]",1.0,76,ml_signal,19,Testing object initialization is a common pattern for ensuring correct object setup.,,66,    def test_Abs(self):,"[220, 220, 220, 825, 1332, 62, 24849, 7, 944, 2599]"
✅ Best Practice: Assertions should provide clear error messages for easier debugging.,"[26486, 227, 6705, 19939, 25, 2195, 861, 507, 815, 2148, 1598, 4049, 6218, 329, 4577, 28769, 13]",0.5,114,best_practice,21,Assertions should provide clear error messages for easier debugging.,,76,"        result = ExpressionD.expression(self.instrument, field, self.start_time, self.end_time, self.freq)","[220, 220, 220, 220, 220, 220, 220, 1255, 796, 41986, 35, 13, 38011, 7, 944, 13, 259, 43872, 11, 2214, 11, 2116, 13, 9688, 62, 2435, 11, 2116, 13, 437, 62, 2435, 11, 2116, 13, 19503, 80, 8]"
✅ Best Practice: Method names in tests should be descriptive of the test case.,"[26486, 227, 6705, 19939, 25, 11789, 3891, 287, 5254, 815, 307, 35644, 286, 262, 1332, 1339, 13]",1.0,139,best_practice,24,Method names in tests should be descriptive of the test case.,,114,"        prev_close = self.mock_df[""close""].shift(1)","[220, 220, 220, 220, 220, 220, 220, 8654, 62, 19836, 796, 2116, 13, 76, 735, 62, 7568, 14692, 19836, 1, 4083, 30846, 7, 16, 8]"
🧠 ML Signal: Evaluating expressions is a common pattern in data processing libraries.,"[8582, 100, 254, 10373, 26484, 25, 26439, 11927, 14700, 318, 257, 2219, 3912, 287, 1366, 7587, 12782, 13]",0.5,157,ml_signal,27,Evaluating expressions is a common pattern in data processing libraries.,,139,        golden = change.abs().to_numpy(),"[220, 220, 220, 220, 220, 220, 220, 10861, 796, 1487, 13, 8937, 22446, 1462, 62, 77, 32152, 3419]"
✅ Best Practice: Assertions should provide clear error messages for easier debugging.,"[26486, 227, 6705, 19939, 25, 2195, 861, 507, 815, 2148, 1598, 4049, 6218, 329, 4577, 28769, 13]",0.5,157,best_practice,29,Assertions should provide clear error messages for easier debugging.,,157,,[]
✅ Best Practice: Use of pytest for parameterized testing.,"[26486, 227, 6705, 19939, 25, 5765, 286, 12972, 9288, 329, 11507, 1143, 4856, 13]",1.0,195,best_practice,32,Use of pytest for parameterized testing.,,157,"        result = ExpressionD.expression(self.instrument, field, self.start_time, self.end_time, self.freq)","[220, 220, 220, 220, 220, 220, 220, 1255, 796, 41986, 35, 13, 38011, 7, 944, 13, 259, 43872, 11, 2214, 11, 2116, 13, 9688, 62, 2435, 11, 2116, 13, 437, 62, 2435, 11, 2116, 13, 19503, 80, 8]"
✅ Best Practice: Function names in tests should be descriptive of the test case.,"[26486, 227, 6705, 19939, 25, 15553, 3891, 287, 5254, 815, 307, 35644, 286, 262, 1332, 1339, 13]",1.0,212,best_practice,37,Function names in tests should be descriptive of the test case.,,195,        change[change > 0] = 1.0,"[220, 220, 220, 220, 220, 220, 220, 1487, 58, 3803, 1875, 657, 60, 796, 352, 13, 15]"
🧠 ML Signal: Parameterized tests are a pattern for testing multiple inputs efficiently.,"[8582, 100, 254, 10373, 26484, 25, 25139, 2357, 1143, 5254, 389, 257, 3912, 329, 4856, 3294, 17311, 18306, 13]",0.5,228,ml_signal,39,Parameterized tests are a pattern for testing multiple inputs efficiently.,,212,        golden = change.to_numpy(),"[220, 220, 220, 220, 220, 220, 220, 10861, 796, 1487, 13, 1462, 62, 77, 32152, 3419]"
✅ Best Practice: Assertions should provide clear error messages for easier debugging.,"[26486, 227, 6705, 19939, 25, 2195, 861, 507, 815, 2148, 1598, 4049, 6218, 329, 4577, 28769, 13]",0.5,240,best_practice,43,Assertions should provide clear error messages for easier debugging.,,228,class TestOperatorDataSetting(TestOperatorData):,"[4871, 6208, 18843, 1352, 6601, 34149, 7, 14402, 18843, 1352, 6601, 2599]"
⚠️ SAST Risk (Low): Potential for unhandled exceptions if input_data is None.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 555, 38788, 13269, 611, 5128, 62, 7890, 318, 6045, 13]",0.5,240,sast_risk,47,Potential for unhandled exceptions if input_data is None.,Low,240,,[]
✅ Best Practice: Class definition should include a docstring explaining its purpose and usage.,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 11170, 663, 4007, 290, 8748, 13]",1.0,240,best_practice,9,Class definition should include a docstring explaining its purpose and usage.,,240,,[]
🧠 ML Signal: Initialization of instance variables in a setup method,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 4554, 9633, 287, 257, 9058, 2446]",0.5,240,ml_signal,10,Initialization of instance variables in a setup method,,240,,[]
🧠 ML Signal: Initialization of instance variables in a setup method,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 4554, 9633, 287, 257, 9058, 2446]",0.5,252,ml_signal,12,Initialization of instance variables in a setup method,,240,    def setUp(self) -> None:,"[220, 220, 220, 825, 900, 4933, 7, 944, 8, 4613, 6045, 25]"
🧠 ML Signal: Initialization of instance variables in a setup method,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 4554, 9633, 287, 257, 9058, 2446]",0.5,273,ml_signal,14,Initialization of instance variables in a setup method,,252,"        self.start_time = ""2022-01-01""","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9688, 62, 2435, 796, 366, 1238, 1828, 12, 486, 12, 486, 1]"
🧠 ML Signal: Initialization of instance variables in a setup method,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 4554, 9633, 287, 257, 9058, 2446]",0.5,288,ml_signal,16,Initialization of instance variables in a setup method,,273,"        self.freq = ""day""","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19503, 80, 796, 366, 820, 1]"
🧠 ML Signal: Filtering a DataFrame based on a condition,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 257, 6060, 19778, 1912, 319, 257, 4006]",0.5,288,ml_signal,18,Filtering a DataFrame based on a condition,,288,,[]
🧠 ML Signal: Use of a specific expression pattern for financial data analysis,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 5408, 3912, 329, 3176, 1366, 3781]",1.0,321,ml_signal,17,Use of a specific expression pattern for financial data analysis,,288,"        self.mock_df = MOCK_DF[MOCK_DF[""symbol""] == self.instrument]","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 76, 735, 62, 7568, 796, 337, 11290, 62, 8068, 58, 44, 11290, 62, 8068, 14692, 1837, 23650, 8973, 6624, 2116, 13, 259, 43872, 60]"
✅ Best Practice: Asserting that the minimum value is non-negative for absolute values,"[26486, 227, 6705, 19939, 25, 2195, 861, 278, 326, 262, 5288, 1988, 318, 1729, 12, 31591, 329, 4112, 3815]",1.0,331,best_practice,19,Asserting that the minimum value is non-negative for absolute values,,321,    def test_Abs(self):,"[220, 220, 220, 825, 1332, 62, 24849, 7, 944, 2599]"
🧠 ML Signal: Conversion of result to numpy array for further numerical operations,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1255, 284, 299, 32152, 7177, 329, 2252, 29052, 4560]",1.0,369,ml_signal,21,Conversion of result to numpy array for further numerical operations,,331,"        result = ExpressionD.expression(self.instrument, field, self.start_time, self.end_time, self.freq)","[220, 220, 220, 220, 220, 220, 220, 1255, 796, 41986, 35, 13, 38011, 7, 944, 13, 259, 43872, 11, 2214, 11, 2116, 13, 9688, 62, 2435, 11, 2116, 13, 437, 62, 2435, 11, 2116, 13, 19503, 80, 8]"
🧠 ML Signal: Use of shift operation to reference previous data points,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6482, 4905, 284, 4941, 2180, 1366, 2173]",0.5,385,ml_signal,23,Use of shift operation to reference previous data points,,369,        result = result.to_numpy(),"[220, 220, 220, 220, 220, 220, 220, 1255, 796, 1255, 13, 1462, 62, 77, 32152, 3419]"
🧠 ML Signal: Calculation of change between consecutive data points,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 1487, 1022, 12785, 1366, 2173]",0.5,399,ml_signal,26,Calculation of change between consecutive data points,,385,        change = prev_close - close,"[220, 220, 220, 220, 220, 220, 220, 1487, 796, 8654, 62, 19836, 532, 1969]"
🧠 ML Signal: Use of absolute value function for change calculation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4112, 1988, 2163, 329, 1487, 17952]",1.0,425,ml_signal,28,Use of absolute value function for change calculation,,399,"        self.assertIsNone(np.testing.assert_allclose(result, golden))","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30493, 3792, 14202, 7, 37659, 13, 33407, 13, 30493, 62, 439, 19836, 7, 20274, 11, 10861, 4008]"
✅ Best Practice: Use of numpy testing utilities for array comparison,"[26486, 227, 6705, 19939, 25, 5765, 286, 299, 32152, 4856, 20081, 329, 7177, 7208]",1.0,435,best_practice,30,Use of numpy testing utilities for array comparison,,425,    def test_Sign(self):,"[220, 220, 220, 825, 1332, 62, 11712, 7, 944, 2599]"
🧠 ML Signal: Use of a specific expression pattern for financial data analysis,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 5408, 3912, 329, 3176, 1366, 3781]",1.0,453,ml_signal,27,Use of a specific expression pattern for financial data analysis,,435,        golden = change.abs().to_numpy(),"[220, 220, 220, 220, 220, 220, 220, 10861, 796, 1487, 13, 8937, 22446, 1462, 62, 77, 32152, 3419]"
🧠 ML Signal: Conversion of result to numpy array for numerical operations,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1255, 284, 299, 32152, 7177, 329, 29052, 4560]",1.0,453,ml_signal,29,Conversion of result to numpy array for numerical operations,,453,,[]
✅ Best Practice: Use of shift to access previous row values in a DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 286, 6482, 284, 1895, 2180, 5752, 3815, 287, 257, 6060, 19778]",0.5,474,best_practice,31,Use of shift to access previous row values in a DataFrame,,453,"        field = ""Sign($close-Ref($close, 1))""","[220, 220, 220, 220, 220, 220, 220, 2214, 796, 366, 11712, 16763, 19836, 12, 8134, 16763, 19836, 11, 352, 4008, 1]"
✅ Best Practice: Calculation of change between current and previous values,"[26486, 227, 6705, 19939, 25, 2199, 14902, 286, 1487, 1022, 1459, 290, 2180, 3815]",1.0,499,best_practice,34,Calculation of change between current and previous values,,474,"        prev_close = self.mock_df[""close""].shift(1)","[220, 220, 220, 220, 220, 220, 220, 8654, 62, 19836, 796, 2116, 13, 76, 735, 62, 7568, 14692, 19836, 1, 4083, 30846, 7, 16, 8]"
✅ Best Practice: Explicitly setting positive changes to 1.0,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 3967, 2458, 284, 352, 13, 15]",0.5,513,best_practice,36,Explicitly setting positive changes to 1.0,,499,        change = close - prev_close,"[220, 220, 220, 220, 220, 220, 220, 1487, 796, 1969, 532, 8654, 62, 19836]"
✅ Best Practice: Explicitly setting negative changes to -1.0,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 4633, 2458, 284, 532, 16, 13, 15]",0.5,531,best_practice,38,Explicitly setting negative changes to -1.0,,513,        change[change < 0] = -1.0,"[220, 220, 220, 220, 220, 220, 220, 1487, 58, 3803, 1279, 657, 60, 796, 532, 16, 13, 15]"
🧠 ML Signal: Conversion of DataFrame to numpy array for comparison,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 6060, 19778, 284, 299, 32152, 7177, 329, 7208]",1.0,557,ml_signal,40,Conversion of DataFrame to numpy array for comparison,,531,"        self.assertIsNone(np.testing.assert_allclose(result, golden))","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30493, 3792, 14202, 7, 37659, 13, 33407, 13, 30493, 62, 439, 19836, 7, 20274, 11, 10861, 4008]"
⚠️ SAST Risk (Low): Potential for assertion to raise an exception if arrays are not close,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 19190, 284, 5298, 281, 6631, 611, 26515, 389, 407, 1969]",0.5,557,sast_risk,42,Potential for assertion to raise an exception if arrays are not close,Low,557,,[]
"✅ Best Practice: Class docstring is missing, consider adding one for better documentation.","[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 318, 4814, 11, 2074, 4375, 530, 329, 1365, 10314, 13]",0.5,574,best_practice,37,"Class docstring is missing, consider adding one for better documentation.",,557,        change[change > 0] = 1.0,"[220, 220, 220, 220, 220, 220, 220, 1487, 58, 3803, 1875, 657, 60, 796, 352, 13, 15]"
🧠 ML Signal: Use of assertEqual indicates a test case for equality,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 36, 13255, 9217, 257, 1332, 1339, 329, 10537]",0.5,592,ml_signal,38,Use of assertEqual indicates a test case for equality,,574,        change[change < 0] = -1.0,"[220, 220, 220, 220, 220, 220, 220, 1487, 58, 3803, 1279, 657, 60, 796, 532, 16, 13, 15]"
🧠 ML Signal: Use of assertGreater indicates a test case for comparison,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 13681, 263, 9217, 257, 1332, 1339, 329, 7208]",0.5,618,ml_signal,40,Use of assertGreater indicates a test case for comparison,,592,"        self.assertIsNone(np.testing.assert_allclose(result, golden))","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30493, 3792, 14202, 7, 37659, 13, 33407, 13, 30493, 62, 439, 19836, 7, 20274, 11, 10861, 4008]"
🧠 ML Signal: Usage of a specific method from DatasetProvider with parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 2446, 422, 16092, 292, 316, 29495, 351, 10007]",1.0,618,ml_signal,48,Usage of a specific method from DatasetProvider with parameters,,618,,[]
✅ Best Practice: Explicitly setting column names for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 5721, 3891, 329, 16287, 290, 5529, 1799]",1.0,631,best_practice,51,Explicitly setting column names for clarity and maintainability,,618,"        freq = ""day""","[220, 220, 220, 220, 220, 220, 220, 2030, 80, 796, 366, 820, 1]"
🧠 ML Signal: Use of pytest marker to categorize tests,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12972, 9288, 18364, 284, 17851, 1096, 5254]",1.0,647,ml_signal,54,Use of pytest marker to categorize tests,,631,"            ""Abs($change)"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 24849, 16763, 3803, 42501]"
🧠 ML Signal: Usage of assertGreater indicates a test for positive values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6818, 13681, 263, 9217, 257, 1332, 329, 3967, 3815]",1.0,663,ml_signal,54,Usage of assertGreater indicates a test for positive values,,647,"            ""Abs($change)"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 24849, 16763, 3803, 42501]"
🧠 ML Signal: Accessing dictionary with a key suggests a pattern of data retrieval,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 351, 257, 1994, 5644, 257, 3912, 286, 1366, 45069]",0.5,678,ml_signal,56,Accessing dictionary with a key suggests a pattern of data retrieval,,663,"        columns = [""change"", ""abs""]","[220, 220, 220, 220, 220, 220, 220, 15180, 796, 14631, 3803, 1600, 366, 8937, 8973]"
"⚠️ SAST Risk (Low): Potential KeyError if ""abs"" key is not present in self.data","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 366, 8937, 1, 1994, 318, 407, 1944, 287, 2116, 13, 7890]",0.5,700,sast_risk,57,"Potential KeyError if ""abs"" key is not present in self.data",Low,678,        self.data = DatasetProvider.inst_calculator(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7890, 796, 16092, 292, 316, 29495, 13, 8625, 62, 9948, 3129, 1352, 7]"
🧠 ML Signal: Indexing into a list suggests a pattern of accessing specific elements,"[8582, 100, 254, 10373, 26484, 25, 12901, 278, 656, 257, 1351, 5644, 257, 3912, 286, 22534, 2176, 4847]",1.0,722,ml_signal,57,Indexing into a list suggests a pattern of accessing specific elements,,700,        self.data = DatasetProvider.inst_calculator(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7890, 796, 16092, 292, 316, 29495, 13, 8625, 62, 9948, 3129, 1352, 7]"
✅ Best Practice: Standard unittest main invocation for running tests,"[26486, 227, 6705, 19939, 25, 8997, 555, 715, 395, 1388, 43219, 329, 2491, 5254]",0.5,744,best_practice,57,Standard unittest main invocation for running tests,,722,        self.data = DatasetProvider.inst_calculator(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7890, 796, 16092, 292, 316, 29495, 13, 8625, 62, 9948, 3129, 1352, 7]"

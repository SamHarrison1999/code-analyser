annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of Path for file system paths improves cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764, 13]",1.0,0,best_practice,9,Use of Path for file system paths improves cross-platform compatibility.,,0,,[]
‚úÖ Best Practice: Use of Path for file system paths improves cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764, 13]",1.0,7,best_practice,13,Use of Path for file system paths improves cross-platform compatibility.,,0,from qlib.data import D,"[6738, 10662, 8019, 13, 7890, 1330, 360]"
‚úÖ Best Practice: Use of Path for file system paths improves cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764, 13]",1.0,34,best_practice,15,Use of Path for file system paths improves cross-platform compatibility.,,7,"sys.path.append(str(Path(__file__).resolve().parent.parent.joinpath(""scripts"")))","[17597, 13, 6978, 13, 33295, 7, 2536, 7, 15235, 7, 834, 7753, 834, 737, 411, 6442, 22446, 8000, 13, 8000, 13, 22179, 6978, 7203, 46521, 1, 22305]"
‚úÖ Best Practice: Use of mkdir with exist_ok=True to avoid errors if the directory already exists.,"[26486, 227, 6705, 19939, 25, 5765, 286, 33480, 15908, 351, 2152, 62, 482, 28, 17821, 284, 3368, 8563, 611, 262, 8619, 1541, 7160, 13]",1.0,48,best_practice,17,Use of mkdir with exist_ok=True to avoid errors if the directory already exists.,,34,"from dump_bin import DumpDataAll, DumpDataFix","[6738, 10285, 62, 8800, 1330, 360, 931, 6601, 3237, 11, 360, 931, 6601, 22743]"
‚úÖ Best Practice: Use of Path for file system paths improves cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764, 13]",1.0,48,best_practice,19,Use of Path for file system paths improves cross-platform compatibility.,,48,,[]
‚úÖ Best Practice: Use of mkdir with exist_ok=True to avoid errors if the directory already exists.,"[26486, 227, 6705, 19939, 25, 5765, 286, 33480, 15908, 351, 2152, 62, 482, 28, 17821, 284, 3368, 8563, 611, 262, 8619, 1541, 7160, 13]",1.0,61,best_practice,21,Use of mkdir with exist_ok=True to avoid errors if the directory already exists.,,48,"SOURCE_DIR = DATA_DIR.joinpath(""source"")","[47690, 62, 34720, 796, 42865, 62, 34720, 13, 22179, 6978, 7203, 10459, 4943]"
üß† ML Signal: Use of class-level constants for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 38491, 329, 8398]",0.5,61,ml_signal,18,Use of class-level constants for configuration,,61,,[]
üß† ML Signal: Use of list comprehension and lambda for data transformation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 35915, 290, 37456, 329, 1366, 13389]",0.5,82,ml_signal,20,Use of list comprehension and lambda for data transformation,,61,"DATA_DIR = Path(__file__).parent.joinpath(""test_dump_data"")","[26947, 62, 34720, 796, 10644, 7, 834, 7753, 834, 737, 8000, 13, 22179, 6978, 7203, 9288, 62, 39455, 62, 7890, 4943]"
üß† ML Signal: Use of class-level variables for shared test data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 9633, 329, 4888, 1332, 1366]",0.5,99,ml_signal,22,Use of class-level variables for shared test data,,82,"SOURCE_DIR.mkdir(exist_ok=True, parents=True)","[47690, 62, 34720, 13, 28015, 15908, 7, 38476, 62, 482, 28, 17821, 11, 3397, 28, 17821, 8]"
üß† ML Signal: Use of class-level variables for shared test data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 9633, 329, 4888, 1332, 1366]",0.5,117,ml_signal,24,Use of class-level variables for shared test data,,99,"QLIB_DIR.mkdir(exist_ok=True, parents=True)","[9711, 9865, 62, 34720, 13, 28015, 15908, 7, 38476, 62, 482, 28, 17821, 11, 3397, 28, 17821, 8]"
üß† ML Signal: Use of class-level variables for shared test data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 9633, 329, 4888, 1332, 1366]",0.5,117,ml_signal,26,Use of class-level variables for shared test data,,117,,[]
"üß† ML Signal: Downloads data, indicating a setup for data-driven tests or ML model training.","[8582, 100, 254, 10373, 26484, 25, 50093, 1366, 11, 12739, 257, 9058, 329, 1366, 12, 15808, 5254, 393, 10373, 2746, 3047, 13]",0.5,117,ml_signal,25,"Downloads data, indicating a setup for data-driven tests or ML model training.",,117,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if the download source is untrusted or if the data is sensitive.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 262, 4321, 2723, 318, 1418, 81, 8459, 393, 611, 262, 1366, 318, 8564, 13]",1.0,117,sast_risk,26,Potential risk if the download source is untrusted or if the data is sensitive.,Low,117,,[]
"üß† ML Signal: Initializes data for testing, suggesting a pattern for data preparation in ML workflows.","[8582, 100, 254, 10373, 26484, 25, 20768, 4340, 1366, 329, 4856, 11, 9524, 257, 3912, 329, 1366, 11824, 287, 10373, 670, 44041, 13]",0.5,139,ml_signal,28,"Initializes data for testing, suggesting a pattern for data preparation in ML workflows.",,117,"    FIELDS = ""open,close,high,low,volume"".split("","")","[220, 220, 220, 18930, 3698, 5258, 796, 366, 9654, 11, 19836, 11, 8929, 11, 9319, 11, 29048, 1911, 35312, 7, 2430, 8]"
"üß† ML Signal: Extracts and processes stock names, indicating data transformation steps.","[8582, 100, 254, 10373, 26484, 25, 29677, 82, 290, 7767, 4283, 3891, 11, 12739, 1366, 13389, 4831, 13]",0.5,166,ml_signal,29,"Extracts and processes stock names, indicating data transformation steps.",,139,"    QLIB_FIELDS = list(map(lambda x: f""${x}"", FIELDS))","[220, 220, 220, 1195, 40347, 62, 11674, 3698, 5258, 796, 1351, 7, 8899, 7, 50033, 2124, 25, 277, 1, 38892, 87, 92, 1600, 18930, 3698, 5258, 4008]"
‚úÖ Best Practice: Convert path to string for compatibility with qlib.init.,"[26486, 227, 6705, 19939, 25, 38240, 3108, 284, 4731, 329, 17764, 351, 10662, 8019, 13, 15003, 13]",0.5,193,best_practice,29,Convert path to string for compatibility with qlib.init.,,166,"    QLIB_FIELDS = list(map(lambda x: f""${x}"", FIELDS))","[220, 220, 220, 1195, 40347, 62, 11674, 3698, 5258, 796, 1351, 7, 8899, 7, 50033, 2124, 25, 277, 1, 38892, 87, 92, 1600, 18930, 3698, 5258, 4008]"
"üß† ML Signal: Initializes qlib, a tool often used in ML for financial data analysis.","[8582, 100, 254, 10373, 26484, 25, 20768, 4340, 10662, 8019, 11, 257, 2891, 1690, 973, 287, 10373, 329, 3176, 1366, 3781, 13]",0.5,193,ml_signal,35,"Initializes qlib, a tool often used in ML for financial data analysis.",,193,,[]
‚ö†Ô∏è SAST Risk (High): Deleting directories without validation can lead to data loss or security issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 42226, 889, 29196, 1231, 21201, 460, 1085, 284, 1366, 2994, 393, 2324, 2428, 13]",1.0,199,sast_risk,36,Deleting directories without validation can lead to data loss or security issues.,High,193,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
üß† ML Signal: Method name follows a pattern that could indicate a test function,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5679, 257, 3912, 326, 714, 7603, 257, 1332, 2163]",1.0,213,ml_signal,37,Method name follows a pattern that could indicate a test function,,199,    def setUpClass(cls) -> None:,"[220, 220, 220, 825, 900, 4933, 9487, 7, 565, 82, 8, 4613, 6045, 25]"
"üß† ML Signal: Usage of a method on an object, indicating object-oriented design","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 319, 281, 2134, 11, 12739, 2134, 12, 17107, 1486]",1.0,264,ml_signal,39,"Usage of a method on an object, indicating object-oriented design",,213,"        TestDumpData.DUMP_DATA = DumpDataAll(csv_path=SOURCE_DIR, qlib_dir=QLIB_DIR, include_fields=cls.FIELDS)","[220, 220, 220, 220, 220, 220, 220, 6208, 35, 931, 6601, 13, 35, 20476, 62, 26947, 796, 360, 931, 6601, 3237, 7, 40664, 62, 6978, 28, 47690, 62, 34720, 11, 10662, 8019, 62, 15908, 28, 9711, 9865, 62, 34720, 11, 2291, 62, 25747, 28, 565, 82, 13, 11674, 3698, 5258, 8]"
‚úÖ Best Practice: Method name should be descriptive of its purpose or behavior,"[26486, 227, 6705, 19939, 25, 11789, 1438, 815, 307, 35644, 286, 663, 4007, 393, 4069]",1.0,315,best_practice,39,Method name should be descriptive of its purpose or behavior,,264,"        TestDumpData.DUMP_DATA = DumpDataAll(csv_path=SOURCE_DIR, qlib_dir=QLIB_DIR, include_fields=cls.FIELDS)","[220, 220, 220, 220, 220, 220, 220, 6208, 35, 931, 6601, 13, 35, 20476, 62, 26947, 796, 360, 931, 6601, 3237, 7, 40664, 62, 6978, 28, 47690, 62, 34720, 11, 10662, 8019, 62, 15908, 28, 9711, 9865, 62, 34720, 11, 2291, 62, 25747, 28, 565, 82, 13, 11674, 3698, 5258, 8]"
‚úÖ Best Practice: Use of set to ensure unique elements,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 284, 4155, 3748, 4847]",1.0,361,best_practice,40,Use of set to ensure unique elements,,315,"        TestDumpData.STOCK_NAMES = list(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob(""*.csv"")))","[220, 220, 220, 220, 220, 220, 220, 6208, 35, 931, 6601, 13, 2257, 11290, 62, 45, 29559, 796, 1351, 7, 8899, 7, 50033, 2124, 25, 2124, 13, 3672, 58, 21912, 19, 4083, 45828, 22784, 311, 31033, 62, 34720, 13, 4743, 672, 7203, 24620, 40664, 1, 22305]"
‚ö†Ô∏è SAST Risk (Low): File path manipulation can lead to security risks if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 9220, 3108, 17512, 460, 1085, 284, 2324, 7476, 611, 407, 12118, 6105]",0.5,369,sast_risk,46,File path manipulation can lead to security risks if not handled properly,Low,361,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of external data source (CSV file) for processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 7097, 1366, 2723, 357, 7902, 53, 2393, 8, 329, 7587]",0.5,383,ml_signal,49,Use of external data source (CSV file) for processing,,369,    def tearDownClass(cls) -> None:,"[220, 220, 220, 825, 11626, 8048, 9487, 7, 565, 82, 8, 4613, 6045, 25]"
‚úÖ Best Practice: Use of assert with a clear error message for debugging,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 351, 257, 1598, 4049, 3275, 329, 28769]",0.5,383,best_practice,51,Use of assert with a clear error message for debugging,,383,,[]
üß† ML Signal: Use of lambda function to transform data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 2163, 284, 6121, 1366]",0.5,389,ml_signal,48,Use of lambda function to transform data,,383,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Use of set to ensure unique elements,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 284, 4155, 3748, 4847]",0.5,403,best_practice,49,Use of set to ensure unique elements,,389,    def tearDownClass(cls) -> None:,"[220, 220, 220, 825, 11626, 8048, 9487, 7, 565, 82, 8, 4613, 6045, 25]"
üß† ML Signal: Use of external library function to list instruments,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 7097, 5888, 2163, 284, 1351, 12834]",0.5,403,ml_signal,51,Use of external library function to list instruments,,403,,[]
‚úÖ Best Practice: Use of assert statement for validation,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 2643, 329, 21201]",1.0,419,best_practice,53,Use of assert statement for validation,,403,        self.DUMP_DATA.dump(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 35, 20476, 62, 26947, 13, 39455, 3419]"
üß† ML Signal: Use of a method to extract features from data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 284, 7925, 3033, 422, 1366]",1.0,435,ml_signal,53,Use of a method to extract features from data,,419,        self.DUMP_DATA.dump(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 35, 20476, 62, 26947, 13, 39455, 3419]"
üß† ML Signal: Storing a subset of data for testing or validation,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 257, 24637, 286, 1366, 329, 4856, 393, 21201]",1.0,450,ml_signal,55,Storing a subset of data for testing or validation,,435,    def test_1_dump_calendars(self):,"[220, 220, 220, 825, 1332, 62, 16, 62, 39455, 62, 9948, 44942, 7, 944, 2599]"
‚úÖ Best Practice: Using assertions to validate data integrity,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 1366, 11540]",1.0,463,best_practice,57,Using assertions to validate data integrity,,450,            map(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3975, 7]"
‚úÖ Best Practice: Ensuring the columns match expected fields,"[26486, 227, 6705, 19939, 25, 48221, 870, 262, 15180, 2872, 2938, 7032]",1.0,512,best_practice,59,Ensuring the columns match expected fields,,463,"                pd.read_csv(QLIB_DIR.joinpath(""calendars"", ""day.txt""), header=None).loc[:, 0].values,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 961, 62, 40664, 7, 9711, 9865, 62, 34720, 13, 22179, 6978, 7203, 9948, 44942, 1600, 366, 820, 13, 14116, 12340, 13639, 28, 14202, 737, 17946, 58, 45299, 657, 4083, 27160, 11]"
"üß† ML Signal: Accessing the first element of a list, indicating a pattern of using predefined or fixed data","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 262, 717, 5002, 286, 257, 1351, 11, 12739, 257, 3912, 286, 1262, 2747, 18156, 393, 5969, 1366]",0.5,561,ml_signal,59,"Accessing the first element of a list, indicating a pattern of using predefined or fixed data",,512,"                pd.read_csv(QLIB_DIR.joinpath(""calendars"", ""day.txt""), header=None).loc[:, 0].values,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 961, 62, 40664, 7, 9711, 9865, 62, 34720, 13, 22179, 6978, 7203, 9948, 44942, 1600, 366, 820, 13, 14116, 12340, 13639, 28, 14202, 737, 17946, 58, 45299, 657, 4083, 27160, 11]"
‚úÖ Best Practice: Using pathlib's joinpath for file paths improves cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 8554, 3108, 8019, 338, 4654, 6978, 329, 2393, 13532, 19575, 3272, 12, 24254, 17764]",0.5,602,best_practice,63,Using pathlib's joinpath for file paths improves cross-platform compatibility,,561,"        assert len(ori_calendars - res_calendars) == len(res_calendars - ori_calendars) == 0, ""dump calendars failed""","[220, 220, 220, 220, 220, 220, 220, 6818, 18896, 7, 10145, 62, 9948, 44942, 532, 581, 62, 9948, 44942, 8, 6624, 18896, 7, 411, 62, 9948, 44942, 532, 22812, 62, 9948, 44942, 8, 6624, 657, 11, 366, 39455, 50215, 4054, 1]"
"üß† ML Signal: Using a method to extract features, indicating a pattern of feature engineering","[8582, 100, 254, 10373, 26484, 25, 8554, 257, 2446, 284, 7925, 3033, 11, 12739, 257, 3912, 286, 3895, 8705]",0.5,641,ml_signal,66,"Using a method to extract features, indicating a pattern of feature engineering",,602,"        ori_ins = set(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob(""*.csv"")))","[220, 220, 220, 220, 220, 220, 220, 22812, 62, 1040, 796, 900, 7, 8899, 7, 50033, 2124, 25, 2124, 13, 3672, 58, 21912, 19, 4083, 45828, 22784, 311, 31033, 62, 34720, 13, 4743, 672, 7203, 24620, 40664, 1, 22305]"
‚úÖ Best Practice: Providing a message in assertions helps in debugging test failures,"[26486, 227, 6705, 19939, 25, 7518, 2530, 257, 3275, 287, 29965, 5419, 287, 28769, 1332, 15536]",0.5,676,best_practice,67,Providing a message in assertions helps in debugging test failures,,641,"        res_ins = set(D.list_instruments(D.instruments(""all""), as_list=True))","[220, 220, 220, 220, 220, 220, 220, 581, 62, 1040, 796, 900, 7, 35, 13, 4868, 62, 259, 2536, 2886, 7, 35, 13, 259, 2536, 2886, 7203, 439, 12340, 355, 62, 4868, 28, 17821, 4008]"
‚ö†Ô∏è SAST Risk (Low): Using dropna() without specifying axis or threshold might lead to unintended data loss,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 4268, 2616, 3419, 1231, 31577, 16488, 393, 11387, 1244, 1085, 284, 30261, 1366, 2994]",0.5,711,sast_risk,67,Using dropna() without specifying axis or threshold might lead to unintended data loss,Low,676,"        res_ins = set(D.list_instruments(D.instruments(""all""), as_list=True))","[220, 220, 220, 220, 220, 220, 220, 581, 62, 1040, 796, 900, 7, 35, 13, 4868, 62, 259, 2536, 2886, 7, 35, 13, 259, 2536, 2886, 7203, 439, 12340, 355, 62, 4868, 28, 17821, 4008]"
‚úÖ Best Practice: Providing a message in assertions helps in debugging test failures,"[26486, 227, 6705, 19939, 25, 7518, 2530, 257, 3275, 287, 29965, 5419, 287, 28769, 1332, 15536]",0.5,746,best_practice,67,Providing a message in assertions helps in debugging test failures,,711,"        res_ins = set(D.list_instruments(D.instruments(""all""), as_list=True))","[220, 220, 220, 220, 220, 220, 220, 581, 62, 1040, 796, 900, 7, 35, 13, 4868, 62, 259, 2536, 2886, 7, 35, 13, 259, 2536, 2886, 7203, 439, 12340, 355, 62, 4868, 28, 17821, 4008]"
‚úÖ Best Practice: Using unittest.main() for running tests is a standard practice,"[26486, 227, 6705, 19939, 25, 8554, 555, 715, 395, 13, 12417, 3419, 329, 2491, 5254, 318, 257, 3210, 3357]",0.5,781,best_practice,67,Using unittest.main() for running tests is a standard practice,,746,"        res_ins = set(D.list_instruments(D.instruments(""all""), as_list=True))","[220, 220, 220, 220, 220, 220, 220, 581, 62, 1040, 796, 900, 7, 35, 13, 4868, 62, 259, 2536, 2886, 7, 35, 13, 259, 2536, 2886, 7203, 439, 12340, 355, 62, 4868, 28, 17821, 4008]"

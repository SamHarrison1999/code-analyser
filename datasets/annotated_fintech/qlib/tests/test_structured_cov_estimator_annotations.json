[
  {
    "line": 4,
    "text": "import unittest",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Importing from qlib.model.riskmodel could introduce risks if the module is not secure or trusted",
    "confidence": 0.5,
    "tokens": [
      11748,
      555,
      715,
      395
    ],
    "start_token": 0,
    "end_token": 4,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      17267,
      278,
      422,
      10662,
      8019,
      13,
      19849,
      13,
      19121,
      19849,
      714,
      10400,
      7476,
      611,
      262,
      8265,
      318,
      407,
      5713,
      393,
      13467
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Importing from qlib.model.riskmodel could introduce risks if the module is not secure or trusted"
  },
  {
    "line": 5,
    "text": "import numpy as np",
    "annotation": "\u2705 Best Practice: Inheriting from unittest.TestCase is a standard way to create test cases in Python",
    "confidence": 0.5,
    "tokens": [
      11748,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 4,
    "end_token": 9,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47025,
      1780,
      422,
      555,
      715,
      395,
      13,
      14402,
      20448,
      318,
      257,
      3210,
      835,
      284,
      2251,
      1332,
      2663,
      287,
      11361
    ],
    "label": "best_practice",
    "reason": "Inheriting from unittest.TestCase is a standard way to create test cases in Python"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a custom estimator with specific parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 9,
    "end_token": 9,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2183,
      3959,
      1352,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of a custom estimator with specific parameters"
  },
  {
    "line": 12,
    "text": "    def test_random_covariance(self):",
    "annotation": "\ud83e\udde0 ML Signal: Random data generation for testing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      25120,
      62,
      66,
      709,
      2743,
      590,
      7,
      944,
      2599
    ],
    "start_token": 9,
    "end_token": 24,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14534,
      1366,
      5270,
      329,
      4856
    ],
    "label": "ml_signal",
    "reason": "Random data generation for testing"
  },
  {
    "line": 14,
    "text": "        NUM_VARIABLE = 10",
    "annotation": "\ud83e\udde0 ML Signal: Use of a custom prediction method",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36871,
      62,
      53,
      1503,
      3539,
      19146,
      796,
      838
    ],
    "start_token": 24,
    "end_token": 39,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2183,
      17724,
      2446
    ],
    "label": "ml_signal",
    "reason": "Use of a custom prediction method"
  },
  {
    "line": 16,
    "text": "        EPS = 1e-6",
    "annotation": "\ud83e\udde0 ML Signal: Use of numpy's covariance function for comparison",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47013,
      796,
      352,
      68,
      12,
      21
    ],
    "start_token": 39,
    "end_token": 52,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      299,
      32152,
      338,
      44829,
      590,
      2163,
      329,
      7208
    ],
    "label": "ml_signal",
    "reason": "Use of numpy's covariance function for comparison"
  },
  {
    "line": 18,
    "text": "        estimator = StructuredCovEstimator(scale_return=False, assume_centered=True)",
    "annotation": "\u2705 Best Practice: Use of absolute difference for comparison",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3959,
      1352,
      796,
      32112,
      1522,
      34,
      709,
      22362,
      320,
      1352,
      7,
      9888,
      62,
      7783,
      28,
      25101,
      11,
      7048,
      62,
      38050,
      28,
      17821,
      8
    ],
    "start_token": 52,
    "end_token": 82,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4112,
      3580,
      329,
      7208
    ],
    "label": "best_practice",
    "reason": "Use of absolute difference for comparison"
  },
  {
    "line": 20,
    "text": "        X = np.random.rand(NUM_OBSERVATION, NUM_VARIABLE)",
    "annotation": "\u2705 Best Practice: Use of a threshold to determine similarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1395,
      796,
      45941,
      13,
      25120,
      13,
      25192,
      7,
      41359,
      62,
      46,
      4462,
      1137,
      53,
      6234,
      11,
      36871,
      62,
      53,
      1503,
      3539,
      19146,
      8
    ],
    "start_token": 82,
    "end_token": 112,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      11387,
      284,
      5004,
      26789
    ],
    "label": "best_practice",
    "reason": "Use of a threshold to determine similarity"
  },
  {
    "line": 22,
    "text": "        est_cov = estimator.predict(X, is_price=False)",
    "annotation": "\u2705 Best Practice: Use of assert to validate test conditions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1556,
      62,
      66,
      709,
      796,
      3959,
      1352,
      13,
      79,
      17407,
      7,
      55,
      11,
      318,
      62,
      20888,
      28,
      25101,
      8
    ],
    "start_token": 112,
    "end_token": 138,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      284,
      26571,
      1332,
      3403
    ],
    "label": "best_practice",
    "reason": "Use of assert to validate test conditions"
  },
  {
    "line": 21,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of specific parameters in StructuredCovEstimator could indicate common usage patterns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 138,
    "end_token": 138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2176,
      10007,
      287,
      32112,
      1522,
      34,
      709,
      22362,
      320,
      1352,
      714,
      7603,
      2219,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Use of specific parameters in StructuredCovEstimator could indicate common usage patterns"
  },
  {
    "line": 23,
    "text": "        np_cov = np.cov(X.T)  # While numpy assume row means variable, qlib assume the other wise.",
    "annotation": "\ud83e\udde0 ML Signal: Random data generation for testing is a common pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      45941,
      62,
      66,
      709,
      796,
      45941,
      13,
      66,
      709,
      7,
      55,
      13,
      51,
      8,
      220,
      1303,
      2893,
      299,
      32152,
      7048,
      5752,
      1724,
      7885,
      11,
      10662,
      8019,
      7048,
      262,
      584,
      10787,
      13
    ],
    "start_token": 138,
    "end_token": 176,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14534,
      1366,
      5270,
      329,
      4856,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Random data generation for testing is a common pattern"
  },
  {
    "line": 25,
    "text": "        delta = abs(est_cov - np_cov)",
    "annotation": "\ud83e\udde0 ML Signal: Predict method usage on estimator object",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25979,
      796,
      2352,
      7,
      395,
      62,
      66,
      709,
      532,
      45941,
      62,
      66,
      709,
      8
    ],
    "start_token": 176,
    "end_token": 197,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49461,
      2446,
      8748,
      319,
      3959,
      1352,
      2134
    ],
    "label": "ml_signal",
    "reason": "Predict method usage on estimator object"
  },
  {
    "line": 27,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of numpy's covariance function for comparison",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 197,
    "end_token": 197,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      299,
      32152,
      338,
      44829,
      590,
      2163,
      329,
      7208
    ],
    "label": "ml_signal",
    "reason": "Use of numpy's covariance function for comparison"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of absolute difference to compare floating-point numbers",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 197,
    "end_token": 197,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4112,
      3580,
      284,
      8996,
      12462,
      12,
      4122,
      3146
    ],
    "label": "best_practice",
    "reason": "Use of absolute difference to compare floating-point numbers"
  },
  {
    "line": 31,
    "text": "        # Test if nan_option is correctly passed.",
    "annotation": "\u2705 Best Practice: Use of all() to ensure all elements meet a condition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      6208,
      611,
      15709,
      62,
      18076,
      318,
      9380,
      3804,
      13
    ],
    "start_token": 197,
    "end_token": 214,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      477,
      3419,
      284,
      4155,
      477,
      4847,
      1826,
      257,
      4006
    ],
    "label": "best_practice",
    "reason": "Use of all() to ensure all elements meet a condition"
  },
  {
    "line": 33,
    "text": "        NUM_OBSERVATION = 200",
    "annotation": "\ud83e\udde0 ML Signal: Use of assertTrue for test validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36871,
      62,
      46,
      4462,
      1137,
      53,
      6234,
      796,
      939
    ],
    "start_token": 214,
    "end_token": 230,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6818,
      17821,
      329,
      1332,
      21201
    ],
    "label": "ml_signal",
    "reason": "Use of assertTrue for test validation"
  },
  {
    "line": 31,
    "text": "        # Test if nan_option is correctly passed.",
    "annotation": "\ud83e\udde0 ML Signal: Use of a specific estimator with parameters could indicate a pattern in model training or evaluation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      6208,
      611,
      15709,
      62,
      18076,
      318,
      9380,
      3804,
      13
    ],
    "start_token": 230,
    "end_token": 247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2176,
      3959,
      1352,
      351,
      10007,
      714,
      7603,
      257,
      3912,
      287,
      2746,
      3047,
      393,
      12660
    ],
    "label": "ml_signal",
    "reason": "Use of a specific estimator with parameters could indicate a pattern in model training or evaluation"
  },
  {
    "line": 33,
    "text": "        NUM_OBSERVATION = 200",
    "annotation": "\ud83e\udde0 ML Signal: Random data generation for testing can indicate a pattern in test data preparation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36871,
      62,
      46,
      4462,
      1137,
      53,
      6234,
      796,
      939
    ],
    "start_token": 247,
    "end_token": 263,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14534,
      1366,
      5270,
      329,
      4856,
      460,
      7603,
      257,
      3912,
      287,
      1332,
      1366,
      11824
    ],
    "label": "ml_signal",
    "reason": "Random data generation for testing can indicate a pattern in test data preparation"
  },
  {
    "line": 35,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calling predict with specific parameters can indicate a pattern in model usage",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 263,
    "end_token": 263,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      32677,
      4331,
      351,
      2176,
      10007,
      460,
      7603,
      257,
      3912,
      287,
      2746,
      8748
    ],
    "label": "ml_signal",
    "reason": "Calling predict with specific parameters can indicate a pattern in model usage"
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\u2705 Best Practice: Asserting that the result is not None ensures the function returns expected outputs",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 263,
    "end_token": 263,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2195,
      861,
      278,
      326,
      262,
      1255,
      318,
      407,
      6045,
      19047,
      262,
      2163,
      5860,
      2938,
      23862
    ],
    "label": "best_practice",
    "reason": "Asserting that the result is not None ensures the function returns expected outputs"
  },
  {
    "line": 39,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of StructuredCovEstimator with specific parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 263,
    "end_token": 263,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      32112,
      1522,
      34,
      709,
      22362,
      320,
      1352,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Usage of StructuredCovEstimator with specific parameters"
  },
  {
    "line": 42,
    "text": "",
    "annotation": "\u2705 Best Practice: Use a while loop to ensure sqrt_cov is not complex",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 263,
    "end_token": 263,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      981,
      9052,
      284,
      4155,
      19862,
      17034,
      62,
      66,
      709,
      318,
      407,
      3716
    ],
    "label": "best_practice",
    "reason": "Use a while loop to ensure sqrt_cov is not complex"
  },
  {
    "line": 44,
    "text": "        if_identical = (delta < EPS).all()",
    "annotation": "\ud83e\udde0 ML Signal: Random covariance matrix generation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      62,
      738,
      605,
      796,
      357,
      67,
      12514,
      1279,
      47013,
      737,
      439,
      3419
    ],
    "start_token": 263,
    "end_token": 283,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14534,
      44829,
      590,
      17593,
      5270
    ],
    "label": "ml_signal",
    "reason": "Random covariance matrix generation"
  },
  {
    "line": 48,
    "text": "    def test_decompose_covariance(self):",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of square root of covariance matrix",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      12501,
      3361,
      577,
      62,
      66,
      709,
      2743,
      590,
      7,
      944,
      2599
    ],
    "start_token": 283,
    "end_token": 300,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      6616,
      6808,
      286,
      44829,
      590,
      17593
    ],
    "label": "ml_signal",
    "reason": "Calculation of square root of covariance matrix"
  },
  {
    "line": 50,
    "text": "        NUM_VARIABLE = 10",
    "annotation": "\ud83e\udde0 ML Signal: Generation of random observations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36871,
      62,
      53,
      1503,
      3539,
      19146,
      796,
      838
    ],
    "start_token": 300,
    "end_token": 315,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16588,
      286,
      4738,
      13050
    ],
    "label": "ml_signal",
    "reason": "Generation of random observations"
  },
  {
    "line": 52,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Prediction using estimator",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 315,
    "end_token": 315,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      46690,
      1262,
      3959,
      1352
    ],
    "label": "ml_signal",
    "reason": "Prediction using estimator"
  },
  {
    "line": 54,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of numpy covariance",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 315,
    "end_token": 315,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      299,
      32152,
      44829,
      590
    ],
    "label": "ml_signal",
    "reason": "Calculation of numpy covariance"
  },
  {
    "line": 56,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of delta between estimated and numpy covariance",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 315,
    "end_token": 315,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      25979,
      1022,
      6108,
      290,
      299,
      32152,
      44829,
      590
    ],
    "label": "ml_signal",
    "reason": "Calculation of delta between estimated and numpy covariance"
  },
  {
    "line": 58,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Comparison of delta with EPS",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 315,
    "end_token": 315,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      34420,
      286,
      25979,
      351,
      47013
    ],
    "label": "ml_signal",
    "reason": "Comparison of delta with EPS"
  },
  {
    "line": 60,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Assertion to check if covariances are identical",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 315,
    "end_token": 315,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      295,
      284,
      2198,
      611,
      39849,
      3699,
      728,
      389,
      10411
    ],
    "label": "ml_signal",
    "reason": "Assertion to check if covariances are identical"
  },
  {
    "line": 57,
    "text": "        F, cov_b, var_u = estimator.predict(X, is_price=False, return_decomposed_components=True)",
    "annotation": "\ud83e\udde0 ML Signal: Use of StructuredCovEstimator with specific parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      376,
      11,
      39849,
      62,
      65,
      11,
      1401,
      62,
      84,
      796,
      3959,
      1352,
      13,
      79,
      17407,
      7,
      55,
      11,
      318,
      62,
      20888,
      28,
      25101,
      11,
      1441,
      62,
      12501,
      3361,
      1335,
      62,
      5589,
      3906,
      28,
      17821,
      8
    ],
    "start_token": 315,
    "end_token": 357,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      32112,
      1522,
      34,
      709,
      22362,
      320,
      1352,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Use of StructuredCovEstimator with specific parameters"
  },
  {
    "line": 59,
    "text": "        self.assertTrue(F is not None and cov_b is not None and var_u is not None)",
    "annotation": "\ud83e\udde0 ML Signal: Random matrix generation for testing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30493,
      17821,
      7,
      37,
      318,
      407,
      6045,
      290,
      39849,
      62,
      65,
      318,
      407,
      6045,
      290,
      1401,
      62,
      84,
      318,
      407,
      6045,
      8
    ],
    "start_token": 357,
    "end_token": 388,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14534,
      17593,
      5270,
      329,
      4856
    ],
    "label": "ml_signal",
    "reason": "Random matrix generation for testing"
  },
  {
    "line": 61,
    "text": "    def test_constructed_covariance(self):",
    "annotation": "\ud83e\udde0 ML Signal: Random matrix generation for testing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      1102,
      16242,
      62,
      66,
      709,
      2743,
      590,
      7,
      944,
      2599
    ],
    "start_token": 388,
    "end_token": 404,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14534,
      17593,
      5270,
      329,
      4856
    ],
    "label": "ml_signal",
    "reason": "Random matrix generation for testing"
  },
  {
    "line": 63,
    "text": "        # There should be some significant correlation since X is specially crafted.",
    "annotation": "\ud83e\udde0 ML Signal: Random matrix generation for testing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      1318,
      815,
      307,
      617,
      2383,
      16096,
      1201,
      1395,
      318,
      20905,
      18025,
      13
    ],
    "start_token": 404,
    "end_token": 424,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14534,
      17593,
      5270,
      329,
      4856
    ],
    "label": "ml_signal",
    "reason": "Random matrix generation for testing"
  },
  {
    "line": 65,
    "text": "        NUM_OBSERVATION = 500",
    "annotation": "\ud83e\udde0 ML Signal: Matrix operations to simulate data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36871,
      62,
      46,
      4462,
      1137,
      53,
      6234,
      796,
      5323
    ],
    "start_token": 424,
    "end_token": 440,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24936,
      4560,
      284,
      29308,
      1366
    ],
    "label": "ml_signal",
    "reason": "Matrix operations to simulate data"
  },
  {
    "line": 67,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of estimator's predict method",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 440,
    "end_token": 440,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3959,
      1352,
      338,
      4331,
      2446
    ],
    "label": "ml_signal",
    "reason": "Use of estimator's predict method"
  },
  {
    "line": 68,
    "text": "        estimator = StructuredCovEstimator(scale_return=False, assume_centered=True, num_factors=NUM_VARIABLE - 1)",
    "annotation": "\ud83e\udde0 ML Signal: Use of numpy's covariance function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3959,
      1352,
      796,
      32112,
      1522,
      34,
      709,
      22362,
      320,
      1352,
      7,
      9888,
      62,
      7783,
      28,
      25101,
      11,
      7048,
      62,
      38050,
      28,
      17821,
      11,
      997,
      62,
      22584,
      669,
      28,
      41359,
      62,
      53,
      1503,
      3539,
      19146,
      532,
      352,
      8
    ],
    "start_token": 440,
    "end_token": 484,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      299,
      32152,
      338,
      44829,
      590,
      2163
    ],
    "label": "ml_signal",
    "reason": "Use of numpy's covariance function"
  },
  {
    "line": 68,
    "text": "        estimator = StructuredCovEstimator(scale_return=False, assume_centered=True, num_factors=NUM_VARIABLE - 1)",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of delta for comparison",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3959,
      1352,
      796,
      32112,
      1522,
      34,
      709,
      22362,
      320,
      1352,
      7,
      9888,
      62,
      7783,
      28,
      25101,
      11,
      7048,
      62,
      38050,
      28,
      17821,
      11,
      997,
      62,
      22584,
      669,
      28,
      41359,
      62,
      53,
      1503,
      3539,
      19146,
      532,
      352,
      8
    ],
    "start_token": 484,
    "end_token": 528,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      25979,
      329,
      7208
    ],
    "label": "ml_signal",
    "reason": "Calculation of delta for comparison"
  },
  {
    "line": 68,
    "text": "        estimator = StructuredCovEstimator(scale_return=False, assume_centered=True, num_factors=NUM_VARIABLE - 1)",
    "annotation": "\ud83e\udde0 ML Signal: Use of threshold to determine similarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3959,
      1352,
      796,
      32112,
      1522,
      34,
      709,
      22362,
      320,
      1352,
      7,
      9888,
      62,
      7783,
      28,
      25101,
      11,
      7048,
      62,
      38050,
      28,
      17821,
      11,
      997,
      62,
      22584,
      669,
      28,
      41359,
      62,
      53,
      1503,
      3539,
      19146,
      532,
      352,
      8
    ],
    "start_token": 528,
    "end_token": 572,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11387,
      284,
      5004,
      26789
    ],
    "label": "ml_signal",
    "reason": "Use of threshold to determine similarity"
  },
  {
    "line": 68,
    "text": "        estimator = StructuredCovEstimator(scale_return=False, assume_centered=True, num_factors=NUM_VARIABLE - 1)",
    "annotation": "\ud83e\udde0 ML Signal: Assertion to validate test outcome",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3959,
      1352,
      796,
      32112,
      1522,
      34,
      709,
      22362,
      320,
      1352,
      7,
      9888,
      62,
      7783,
      28,
      25101,
      11,
      7048,
      62,
      38050,
      28,
      17821,
      11,
      997,
      62,
      22584,
      669,
      28,
      41359,
      62,
      53,
      1503,
      3539,
      19146,
      532,
      352,
      8
    ],
    "start_token": 572,
    "end_token": 616,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      861,
      295,
      284,
      26571,
      1332,
      8055
    ],
    "label": "ml_signal",
    "reason": "Assertion to validate test outcome"
  },
  {
    "line": 68,
    "text": "        estimator = StructuredCovEstimator(scale_return=False, assume_centered=True, num_factors=NUM_VARIABLE - 1)",
    "annotation": "\u2705 Best Practice: Standard unittest main invocation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3959,
      1352,
      796,
      32112,
      1522,
      34,
      709,
      22362,
      320,
      1352,
      7,
      9888,
      62,
      7783,
      28,
      25101,
      11,
      7048,
      62,
      38050,
      28,
      17821,
      11,
      997,
      62,
      22584,
      669,
      28,
      41359,
      62,
      53,
      1503,
      3539,
      19146,
      532,
      352,
      8
    ],
    "start_token": 616,
    "end_token": 660,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8997,
      555,
      715,
      395,
      1388,
      43219
    ],
    "label": "best_practice",
    "reason": "Standard unittest main invocation"
  }
]
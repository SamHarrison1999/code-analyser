[
  {
    "line": 11,
    "text": "from qlib.backtest.decision import Order, OrderDir",
    "annotation": "\ud83e\udde0 ML Signal: Constant value that might be used as a feature or label in ML models",
    "confidence": 0.5,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      1891,
      9288,
      13,
      12501,
      1166,
      1330,
      8284,
      11,
      8284,
      35277
    ],
    "start_token": 0,
    "end_token": 14,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20217,
      1988,
      326,
      1244,
      307,
      973,
      355,
      257,
      3895,
      393,
      6167,
      287,
      10373,
      4981
    ],
    "label": "ml_signal",
    "reason": "Constant value that might be used as a feature or label in ML models"
  },
  {
    "line": 14,
    "text": "from qlib.rl.order_execution.simulator_qlib import SingleAssetOrderExecution",
    "annotation": "\u2705 Best Practice: Use of pytest.mark.skipif to conditionally skip tests based on Python version",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      2875,
      62,
      18558,
      1009,
      13,
      14323,
      8927,
      62,
      80,
      8019,
      1330,
      14206,
      45869,
      18743,
      23002,
      1009
    ],
    "start_token": 14,
    "end_token": 36,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      12972,
      9288,
      13,
      4102,
      13,
      48267,
      361,
      284,
      4006,
      453,
      14267,
      5254,
      1912,
      319,
      11361,
      2196
    ],
    "label": "best_practice",
    "reason": "Use of pytest.mark.skipif to conditionally skip tests based on Python version"
  },
  {
    "line": 12,
    "text": "from qlib.backtest.executor import SimulatorExecutor",
    "annotation": "\u2705 Best Practice: Type annotations are used for function parameters and return type",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      1891,
      9288,
      13,
      18558,
      38409,
      1330,
      13942,
      23002,
      38409
    ],
    "start_token": 36,
    "end_token": 49,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      37647,
      389,
      973,
      329,
      2163,
      10007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Type annotations are used for function parameters and return type"
  },
  {
    "line": 13,
    "text": "from qlib.rl.order_execution import CategoricalActionInterpreter",
    "annotation": "\u2705 Best Practice: Default value for epsilon is provided, making the function flexible",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      2875,
      62,
      18558,
      1009,
      1330,
      327,
      2397,
      12409,
      12502,
      9492,
      3866,
      353
    ],
    "start_token": 49,
    "end_token": 67,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      1988,
      329,
      304,
      862,
      33576,
      318,
      2810,
      11,
      1642,
      262,
      2163,
      12846
    ],
    "label": "best_practice",
    "reason": "Default value for epsilon is provided, making the function flexible"
  },
  {
    "line": 14,
    "text": "from qlib.rl.order_execution.simulator_qlib import SingleAssetOrderExecution",
    "annotation": "\ud83e\udde0 ML Signal: Function checks for closeness of two floating-point numbers, a common pattern in numerical computations",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      2875,
      62,
      18558,
      1009,
      13,
      14323,
      8927,
      62,
      80,
      8019,
      1330,
      14206,
      45869,
      18743,
      23002,
      1009
    ],
    "start_token": 67,
    "end_token": 89,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      8794,
      329,
      3542,
      9449,
      286,
      734,
      12462,
      12,
      4122,
      3146,
      11,
      257,
      2219,
      3912,
      287,
      29052,
      2653,
      602
    ],
    "label": "ml_signal",
    "reason": "Function checks for closeness of two floating-point numbers, a common pattern in numerical computations"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of abs() function for calculating absolute difference",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 89,
    "end_token": 89,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2352,
      3419,
      2163,
      329,
      26019,
      4112,
      3580
    ],
    "label": "best_practice",
    "reason": "Use of abs() function for calculating absolute difference"
  },
  {
    "line": 14,
    "text": "from qlib.rl.order_execution.simulator_qlib import SingleAssetOrderExecution",
    "annotation": "\ud83e\udde0 ML Signal: Function returning a specific object pattern",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      45895,
      13,
      2875,
      62,
      18558,
      1009,
      13,
      14323,
      8927,
      62,
      80,
      8019,
      1330,
      14206,
      45869,
      18743,
      23002,
      1009
    ],
    "start_token": 89,
    "end_token": 111,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      8024,
      257,
      2176,
      2134,
      3912
    ],
    "label": "ml_signal",
    "reason": "Function returning a specific object pattern"
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded stock_id and timestamps may lead to inflexibility or misuse",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 111,
    "end_token": 111,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      4283,
      62,
      312,
      290,
      4628,
      395,
      9430,
      743,
      1085,
      284,
      1167,
      2588,
      2247,
      393,
      29169
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded stock_id and timestamps may lead to inflexibility or misuse"
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of undefined variable TOTAL_POSITION",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 111,
    "end_token": 111,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      28721,
      7885,
      36247,
      62,
      37997,
      17941
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of undefined variable TOTAL_POSITION"
  },
  {
    "line": 21,
    "text": "def is_close(a: float, b: float, epsilon: float = 1e-4) -> bool:",
    "annotation": "\ud83e\udde0 ML Signal: Consistent use of enum for direction",
    "confidence": 1.0,
    "tokens": [
      4299,
      318,
      62,
      19836,
      7,
      64,
      25,
      12178,
      11,
      275,
      25,
      12178,
      11,
      304,
      862,
      33576,
      25,
      12178,
      796,
      352,
      68,
      12,
      19,
      8,
      4613,
      20512,
      25
    ],
    "start_token": 111,
    "end_token": 138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3515,
      7609,
      779,
      286,
      33829,
      329,
      4571
    ],
    "label": "ml_signal",
    "reason": "Consistent use of enum for direction"
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of specific timestamps for start and end time",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 138,
    "end_token": 138,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2176,
      4628,
      395,
      9430,
      329,
      923,
      290,
      886,
      640
    ],
    "label": "ml_signal",
    "reason": "Use of specific timestamps for start and end time"
  },
  {
    "line": 22,
    "text": "    return abs(a - b) <= epsilon",
    "annotation": "\ud83e\udde0 ML Signal: Function signature and return type hint can be used to infer function behavior and expected output.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      2352,
      7,
      64,
      532,
      275,
      8,
      19841,
      304,
      862,
      33576
    ],
    "start_token": 138,
    "end_token": 152,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      290,
      1441,
      2099,
      9254,
      460,
      307,
      973,
      284,
      13249,
      2163,
      4069,
      290,
      2938,
      5072,
      13
    ],
    "label": "ml_signal",
    "reason": "Function signature and return type hint can be used to infer function behavior and expected output."
  },
  {
    "line": 23,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of dictionary to store configuration settings improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 152,
    "end_token": 152,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      22155,
      284,
      3650,
      8398,
      6460,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of dictionary to store configuration settings improves readability and maintainability."
  },
  {
    "line": 57,
    "text": "                            \"verbose\": False,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential timezone issues with pd.Timestamp if order.start_time is naive.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      19011,
      577,
      1298,
      10352,
      11
    ],
    "start_token": 152,
    "end_token": 185,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      640,
      11340,
      2428,
      351,
      279,
      67,
      13,
      14967,
      27823,
      611,
      1502,
      13,
      9688,
      62,
      2435,
      318,
      24354,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential timezone issues with pd.Timestamp if order.start_time is naive."
  },
  {
    "line": 57,
    "text": "                            \"verbose\": False,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential timezone issues with pd.Timestamp if order.start_time is naive.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      19011,
      577,
      1298,
      10352,
      11
    ],
    "start_token": 185,
    "end_token": 218,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      640,
      11340,
      2428,
      351,
      279,
      67,
      13,
      14967,
      27823,
      611,
      1502,
      13,
      9688,
      62,
      2435,
      318,
      24354,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential timezone issues with pd.Timestamp if order.start_time is naive."
  },
  {
    "line": 57,
    "text": "                            \"verbose\": False,",
    "annotation": "\u2705 Best Practice: Use of dictionary to store configuration settings improves readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      19011,
      577,
      1298,
      10352,
      11
    ],
    "start_token": 218,
    "end_token": 251,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      22155,
      284,
      3650,
      8398,
      6460,
      19575,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of dictionary to store configuration settings improves readability and maintainability."
  },
  {
    "line": 75,
    "text": "        \"deal_price\": (\"If($ask == 0, $bid, $ask)\", \"If($bid == 0, $ask, $bid)\"),",
    "annotation": "\ud83e\udde0 ML Signal: Returning a tuple of configurations can indicate a pattern of configuration management.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      31769,
      62,
      20888,
      1298,
      5855,
      1532,
      16763,
      2093,
      6624,
      657,
      11,
      720,
      14065,
      11,
      720,
      2093,
      42501,
      366,
      1532,
      16763,
      14065,
      6624,
      657,
      11,
      720,
      2093,
      11,
      720,
      14065,
      8,
      12340
    ],
    "start_token": 251,
    "end_token": 290,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      46545,
      286,
      25412,
      460,
      7603,
      257,
      3912,
      286,
      8398,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning a tuple of configurations can indicate a pattern of configuration management."
  },
  {
    "line": 74,
    "text": "        \"limit_threshold\": (\"$ask == 0\", \"$bid == 0\"),",
    "annotation": "\u2705 Best Practice: Use of Path for file system paths improves cross-platform compatibility.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      32374,
      62,
      400,
      10126,
      1298,
      5855,
      3,
      2093,
      6624,
      657,
      1600,
      17971,
      14065,
      6624,
      657,
      12340
    ],
    "start_token": 290,
    "end_token": 314,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      329,
      2393,
      1080,
      13532,
      19575,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Path for file system paths improves cross-platform compatibility."
  },
  {
    "line": 75,
    "text": "        \"deal_price\": (\"If($ask == 0, $bid, $ask)\", \"If($bid == 0, $ask, $bid)\"),",
    "annotation": "\u2705 Best Practice: Clear and descriptive dictionary keys improve code readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      31769,
      62,
      20888,
      1298,
      5855,
      1532,
      16763,
      2093,
      6624,
      657,
      11,
      720,
      14065,
      11,
      720,
      2093,
      42501,
      366,
      1532,
      16763,
      14065,
      6624,
      657,
      11,
      720,
      2093,
      11,
      720,
      14065,
      8,
      12340
    ],
    "start_token": 314,
    "end_token": 353,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11459,
      290,
      35644,
      22155,
      8251,
      2987,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Clear and descriptive dictionary keys improve code readability."
  },
  {
    "line": 75,
    "text": "        \"deal_price\": (\"If($ask == 0, $bid, $ask)\", \"If($bid == 0, $ask, $bid)\"),",
    "annotation": "\ud83e\udde0 ML Signal: Use of specific feature columns indicates a pattern for feature selection in ML models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      31769,
      62,
      20888,
      1298,
      5855,
      1532,
      16763,
      2093,
      6624,
      657,
      11,
      720,
      14065,
      11,
      720,
      2093,
      42501,
      366,
      1532,
      16763,
      14065,
      6624,
      657,
      11,
      720,
      2093,
      11,
      720,
      14065,
      8,
      12340
    ],
    "start_token": 353,
    "end_token": 392,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2176,
      3895,
      15180,
      9217,
      257,
      3912,
      329,
      3895,
      6356,
      287,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of specific feature columns indicates a pattern for feature selection in ML models."
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of historical feature columns suggests a pattern for time-series data handling in ML models.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 392,
    "end_token": 392,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      6754,
      3895,
      15180,
      5644,
      257,
      3912,
      329,
      640,
      12,
      25076,
      1366,
      9041,
      287,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of historical feature columns suggests a pattern for time-series data handling in ML models."
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Function call to get_configs indicates a pattern for dynamic configuration retrieval.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 392,
    "end_token": 392,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      651,
      62,
      11250,
      82,
      9217,
      257,
      3912,
      329,
      8925,
      8398,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Function call to get_configs indicates a pattern for dynamic configuration retrieval."
  },
  {
    "line": 94,
    "text": "    qlib_config = {",
    "annotation": "\ud83e\udde0 ML Signal: Returning an instance of SingleAssetOrderExecution suggests a pattern for order execution in trading systems.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10662,
      8019,
      62,
      11250,
      796,
      1391
    ],
    "start_token": 392,
    "end_token": 401,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      281,
      4554,
      286,
      14206,
      45869,
      18743,
      23002,
      1009,
      5644,
      257,
      3912,
      329,
      1502,
      9706,
      287,
      7313,
      3341,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning an instance of SingleAssetOrderExecution suggests a pattern for order execution in trading systems."
  },
  {
    "line": 98,
    "text": "        \"feature_columns_today\": [",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a simulator pattern, common in testing environments",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      30053,
      62,
      28665,
      82,
      62,
      40838,
      1298,
      685
    ],
    "start_token": 401,
    "end_token": 417,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      35375,
      3912,
      11,
      2219,
      287,
      4856,
      12493
    ],
    "label": "ml_signal",
    "reason": "Usage of a simulator pattern, common in testing environments"
  },
  {
    "line": 100,
    "text": "            \"$bidV\", \"$bidV1\", \"$bidV3\", \"$bidV5\", \"$askV\", \"$askV1\", \"$askV3\", \"$askV5\",",
    "annotation": "\ud83e\udde0 ML Signal: Retrieving state from an object, indicating stateful behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17971,
      14065,
      53,
      1600,
      17971,
      14065,
      53,
      16,
      1600,
      17971,
      14065,
      53,
      18,
      1600,
      17971,
      14065,
      53,
      20,
      1600,
      17971,
      2093,
      53,
      1600,
      17971,
      2093,
      53,
      16,
      1600,
      17971,
      2093,
      53,
      18,
      1600,
      17971,
      2093,
      53,
      20,
      1600
    ],
    "start_token": 417,
    "end_token": 466,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      37418,
      1181,
      422,
      281,
      2134,
      11,
      12739,
      1181,
      913,
      4069
    ],
    "label": "ml_signal",
    "reason": "Retrieving state from an object, indicating stateful behavior"
  },
  {
    "line": 102,
    "text": "        \"feature_columns_yesterday\": [",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded timestamp, could lead to brittle tests",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      30053,
      62,
      28665,
      82,
      62,
      8505,
      6432,
      1298,
      685
    ],
    "start_token": 466,
    "end_token": 483,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      41033,
      11,
      714,
      1085,
      284,
      49307,
      5254
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded timestamp, could lead to brittle tests"
  },
  {
    "line": 104,
    "text": "            \"$bidV_1\", \"$bidV1_1\", \"$bidV3_1\", \"$bidV5_1\", \"$askV_1\", \"$askV1_1\", \"$askV3_1\", \"$askV5_1\",",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants in assertions, indicating expected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17971,
      14065,
      53,
      62,
      16,
      1600,
      17971,
      14065,
      53,
      16,
      62,
      16,
      1600,
      17971,
      14065,
      53,
      18,
      62,
      16,
      1600,
      17971,
      14065,
      53,
      20,
      62,
      16,
      1600,
      17971,
      2093,
      53,
      62,
      16,
      1600,
      17971,
      2093,
      53,
      16,
      62,
      16,
      1600,
      17971,
      2093,
      53,
      18,
      62,
      16,
      1600,
      17971,
      2093,
      53,
      20,
      62,
      16,
      1600
    ],
    "start_token": 483,
    "end_token": 548,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      287,
      29965,
      11,
      12739,
      2938,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of constants in assertions, indicating expected behavior"
  },
  {
    "line": 107,
    "text": "    # fmt: on",
    "annotation": "\ud83e\udde0 ML Signal: Simulator step function, indicating iterative process",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      46996,
      25,
      319
    ],
    "start_token": 548,
    "end_token": 555,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13942,
      2239,
      2163,
      11,
      12739,
      11629,
      876,
      1429
    ],
    "label": "ml_signal",
    "reason": "Simulator step function, indicating iterative process"
  },
  {
    "line": 109,
    "text": "    executor_config, exchange_config = get_configs(order)",
    "annotation": "\ud83e\udde0 ML Signal: Re-fetching state after an operation, indicating state change",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3121,
      273,
      62,
      11250,
      11,
      5163,
      62,
      11250,
      796,
      651,
      62,
      11250,
      82,
      7,
      2875,
      8
    ],
    "start_token": 555,
    "end_token": 574,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      797,
      12,
      69,
      7569,
      278,
      1181,
      706,
      281,
      4905,
      11,
      12739,
      1181,
      1487
    ],
    "label": "ml_signal",
    "reason": "Re-fetching state after an operation, indicating state change"
  },
  {
    "line": 111,
    "text": "    return SingleAssetOrderExecution(",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded timestamp, could lead to brittle tests",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      14206,
      45869,
      18743,
      23002,
      1009,
      7
    ],
    "start_token": 574,
    "end_token": 584,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      41033,
      11,
      714,
      1085,
      284,
      49307,
      5254
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded timestamp, could lead to brittle tests"
  },
  {
    "line": 113,
    "text": "        qlib_config=qlib_config,",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants in assertions, indicating expected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10662,
      8019,
      62,
      11250,
      28,
      80,
      8019,
      62,
      11250,
      11
    ],
    "start_token": 584,
    "end_token": 601,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      287,
      29965,
      11,
      12739,
      2938,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of constants in assertions, indicating expected behavior"
  },
  {
    "line": 115,
    "text": "        exchange_config=exchange_config,",
    "annotation": "\ud83e\udde0 ML Signal: Checking length of a collection, indicating expected data size",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5163,
      62,
      11250,
      28,
      1069,
      3803,
      62,
      11250,
      11
    ],
    "start_token": 601,
    "end_token": 617,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      4129,
      286,
      257,
      4947,
      11,
      12739,
      2938,
      1366,
      2546
    ],
    "label": "ml_signal",
    "reason": "Checking length of a collection, indicating expected data size"
  },
  {
    "line": 117,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded timestamp, could lead to brittle tests",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 617,
    "end_token": 617,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      41033,
      11,
      714,
      1085,
      284,
      49307,
      5254
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded timestamp, could lead to brittle tests"
  },
  {
    "line": 119,
    "text": "@python_version_request",
    "annotation": "\ud83e\udde0 ML Signal: Use of is_close for floating-point comparison, indicating precision handling",
    "confidence": 0.5,
    "tokens": [
      31,
      29412,
      62,
      9641,
      62,
      25927
    ],
    "start_token": 617,
    "end_token": 623,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      62,
      19836,
      329,
      12462,
      12,
      4122,
      7208,
      11,
      12739,
      15440,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of is_close for floating-point comparison, indicating precision handling"
  },
  {
    "line": 121,
    "text": "    order = get_order()",
    "annotation": "\ud83e\udde0 ML Signal: Use of is_close for floating-point comparison, indicating precision handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1502,
      796,
      651,
      62,
      2875,
      3419
    ],
    "start_token": 623,
    "end_token": 632,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      62,
      19836,
      329,
      12462,
      12,
      4122,
      7208,
      11,
      12739,
      15440,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of is_close for floating-point comparison, indicating precision handling"
  },
  {
    "line": 121,
    "text": "    order = get_order()",
    "annotation": "\ud83e\udde0 ML Signal: Use of vectorized operations, indicating data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1502,
      796,
      651,
      62,
      2875,
      3419
    ],
    "start_token": 632,
    "end_token": 641,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      15879,
      1143,
      4560,
      11,
      12739,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of vectorized operations, indicating data processing"
  },
  {
    "line": 126,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of vectorized operations, indicating data processing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 641,
    "end_token": 641,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      15879,
      1143,
      4560,
      11,
      12739,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of vectorized operations, indicating data processing"
  },
  {
    "line": 127,
    "text": "    AMOUNT = 300.0",
    "annotation": "\ud83e\udde0 ML Signal: Use of is_close for floating-point comparison, indicating precision handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3001,
      28270,
      796,
      5867,
      13,
      15
    ],
    "start_token": 641,
    "end_token": 650,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      62,
      19836,
      329,
      12462,
      12,
      4122,
      7208,
      11,
      12739,
      15440,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of is_close for floating-point comparison, indicating precision handling"
  },
  {
    "line": 129,
    "text": "    state = simulator.get_state()",
    "annotation": "\ud83e\udde0 ML Signal: Use of is_close for floating-point comparison, indicating precision handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1181,
      796,
      35375,
      13,
      1136,
      62,
      5219,
      3419
    ],
    "start_token": 650,
    "end_token": 661,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      62,
      19836,
      329,
      12462,
      12,
      4122,
      7208,
      11,
      12739,
      15440,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of is_close for floating-point comparison, indicating precision handling"
  },
  {
    "line": 131,
    "text": "    assert state.position == TOTAL_POSITION - AMOUNT",
    "annotation": "\ud83e\udde0 ML Signal: Use of is_close for floating-point comparison, indicating precision handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      1181,
      13,
      9150,
      6624,
      36247,
      62,
      37997,
      17941,
      532,
      3001,
      28270
    ],
    "start_token": 661,
    "end_token": 676,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      62,
      19836,
      329,
      12462,
      12,
      4122,
      7208,
      11,
      12739,
      15440,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of is_close for floating-point comparison, indicating precision handling"
  },
  {
    "line": 133,
    "text": "    assert state.history_exec.index[0] == pd.Timestamp(\"2019-03-04 09:30:00\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of is_close for floating-point comparison, indicating precision handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      1181,
      13,
      23569,
      62,
      18558,
      13,
      9630,
      58,
      15,
      60,
      6624,
      279,
      67,
      13,
      14967,
      27823,
      7203,
      23344,
      12,
      3070,
      12,
      3023,
      7769,
      25,
      1270,
      25,
      405,
      4943
    ],
    "start_token": 676,
    "end_token": 708,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      62,
      19836,
      329,
      12462,
      12,
      4122,
      7208,
      11,
      12739,
      15440,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of is_close for floating-point comparison, indicating precision handling"
  },
  {
    "line": 135,
    "text": "    assert is_close(state.history_exec[\"market_volume\"].iloc[0], 109382.382812)",
    "annotation": "\ud83e\udde0 ML Signal: Use of is_close for floating-point comparison, indicating precision handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      62,
      19836,
      7,
      5219,
      13,
      23569,
      62,
      18558,
      14692,
      10728,
      62,
      29048,
      1,
      4083,
      346,
      420,
      58,
      15,
      4357,
      16003,
      36243,
      13,
      2548,
      2078,
      1065,
      8
    ],
    "start_token": 708,
    "end_token": 739,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      318,
      62,
      19836,
      329,
      12462,
      12,
      4122,
      7208,
      11,
      12739,
      15440,
      9041
    ],
    "label": "ml_signal",
    "reason": "Use of is_close for floating-point comparison, indicating precision handling"
  },
  {
    "line": 137,
    "text": "    assert (state.history_exec[\"amount\"] == AMOUNT / 30).all()",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants in assertions, indicating expected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      357,
      5219,
      13,
      23569,
      62,
      18558,
      14692,
      17287,
      8973,
      6624,
      3001,
      28270,
      1220,
      1542,
      737,
      439,
      3419
    ],
    "start_token": 739,
    "end_token": 760,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      287,
      29965,
      11,
      12739,
      2938,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of constants in assertions, indicating expected behavior"
  },
  {
    "line": 139,
    "text": "    assert is_close(state.history_exec[\"trade_price\"].iloc[0], 149.566483)",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants in assertions, indicating expected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      62,
      19836,
      7,
      5219,
      13,
      23569,
      62,
      18558,
      14692,
      25351,
      62,
      20888,
      1,
      4083,
      346,
      420,
      58,
      15,
      4357,
      24041,
      13,
      3980,
      2414,
      5999,
      8
    ],
    "start_token": 760,
    "end_token": 790,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      287,
      29965,
      11,
      12739,
      2938,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of constants in assertions, indicating expected behavior"
  },
  {
    "line": 141,
    "text": "    assert is_close(state.history_exec[\"position\"].iloc[0], TOTAL_POSITION - AMOUNT / 30)",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants in assertions, indicating expected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      62,
      19836,
      7,
      5219,
      13,
      23569,
      62,
      18558,
      14692,
      9150,
      1,
      4083,
      346,
      420,
      58,
      15,
      4357,
      36247,
      62,
      37997,
      17941,
      532,
      3001,
      28270,
      1220,
      1542,
      8
    ],
    "start_token": 790,
    "end_token": 822,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      287,
      29965,
      11,
      12739,
      2938,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of constants in assertions, indicating expected behavior"
  },
  {
    "line": 143,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of conditional logic in assertions, indicating complex behavior",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 822,
    "end_token": 822,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      26340,
      9156,
      287,
      29965,
      11,
      12739,
      3716,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of conditional logic in assertions, indicating complex behavior"
  },
  {
    "line": 127,
    "text": "    AMOUNT = 300.0",
    "annotation": "\ud83e\udde0 ML Signal: Function to test simulator behavior, useful for ML models to learn expected outcomes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3001,
      28270,
      796,
      5867,
      13,
      15
    ],
    "start_token": 822,
    "end_token": 831,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      284,
      1332,
      35375,
      4069,
      11,
      4465,
      329,
      10373,
      4981,
      284,
      2193,
      2938,
      10906
    ],
    "label": "ml_signal",
    "reason": "Function to test simulator behavior, useful for ML models to learn expected outcomes"
  },
  {
    "line": 129,
    "text": "    state = simulator.get_state()",
    "annotation": "\ud83e\udde0 ML Signal: Simulator setup with an order, indicating a pattern of initializing test scenarios",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1181,
      796,
      35375,
      13,
      1136,
      62,
      5219,
      3419
    ],
    "start_token": 831,
    "end_token": 842,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13942,
      9058,
      351,
      281,
      1502,
      11,
      12739,
      257,
      3912,
      286,
      4238,
      2890,
      1332,
      13858
    ],
    "label": "ml_signal",
    "reason": "Simulator setup with an order, indicating a pattern of initializing test scenarios"
  },
  {
    "line": 133,
    "text": "    assert state.history_exec.index[0] == pd.Timestamp(\"2019-03-04 09:30:00\")",
    "annotation": "\ud83e\udde0 ML Signal: Iterative process to simulate steps, useful for learning loop patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      1181,
      13,
      23569,
      62,
      18558,
      13,
      9630,
      58,
      15,
      60,
      6624,
      279,
      67,
      13,
      14967,
      27823,
      7203,
      23344,
      12,
      3070,
      12,
      3023,
      7769,
      25,
      1270,
      25,
      405,
      4943
    ],
    "start_token": 842,
    "end_token": 874,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      876,
      1429,
      284,
      29308,
      4831,
      11,
      4465,
      329,
      4673,
      9052,
      7572
    ],
    "label": "ml_signal",
    "reason": "Iterative process to simulate steps, useful for learning loop patterns"
  },
  {
    "line": 137,
    "text": "    assert (state.history_exec[\"amount\"] == AMOUNT / 30).all()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      357,
      5219,
      13,
      23569,
      62,
      18558,
      14692,
      17287,
      8973,
      6624,
      3001,
      28270,
      1220,
      1542,
      737,
      439,
      3419
    ],
    "start_token": 874,
    "end_token": 895,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements, which can be disabled in production"
  },
  {
    "line": 139,
    "text": "    assert is_close(state.history_exec[\"trade_price\"].iloc[0], 149.566483)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      62,
      19836,
      7,
      5219,
      13,
      23569,
      62,
      18558,
      14692,
      25351,
      62,
      20888,
      1,
      4083,
      346,
      420,
      58,
      15,
      4357,
      24041,
      13,
      3980,
      2414,
      5999,
      8
    ],
    "start_token": 895,
    "end_token": 925,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements, which can be disabled in production"
  },
  {
    "line": 141,
    "text": "    assert is_close(state.history_exec[\"position\"].iloc[0], TOTAL_POSITION - AMOUNT / 30)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      62,
      19836,
      7,
      5219,
      13,
      23569,
      62,
      18558,
      14692,
      9150,
      1,
      4083,
      346,
      420,
      58,
      15,
      4357,
      36247,
      62,
      37997,
      17941,
      532,
      3001,
      28270,
      1220,
      1542,
      8
    ],
    "start_token": 925,
    "end_token": 957,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements, which can be disabled in production"
  },
  {
    "line": 143,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 957,
    "end_token": 957,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements, which can be disabled in production"
  },
  {
    "line": 144,
    "text": "    assert is_close(state.history_steps[\"market_volume\"].iloc[0], 1254848.5756835938)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      62,
      19836,
      7,
      5219,
      13,
      23569,
      62,
      20214,
      14692,
      10728,
      62,
      29048,
      1,
      4083,
      346,
      420,
      58,
      15,
      4357,
      13151,
      2780,
      2780,
      13,
      36189,
      3104,
      30743,
      2548,
      8
    ],
    "start_token": 957,
    "end_token": 990,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements, which can be disabled in production"
  },
  {
    "line": 147,
    "text": "    assert state.history_steps[\"ffr\"].iloc[0] == AMOUNT / TOTAL_POSITION",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6818,
      1181,
      13,
      23569,
      62,
      20214,
      14692,
      487,
      81,
      1,
      4083,
      346,
      420,
      58,
      15,
      60,
      6624,
      3001,
      28270,
      1220,
      36247,
      62,
      37997,
      17941
    ],
    "start_token": 990,
    "end_token": 1017,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements, which can be disabled in production"
  },
  {
    "line": 149,
    "text": "        state.history_steps[\"pa\"].iloc[0] * (1.0 if order.direction == OrderDir.SELL else -1.0),",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1181,
      13,
      23569,
      62,
      20214,
      14692,
      8957,
      1,
      4083,
      346,
      420,
      58,
      15,
      60,
      1635,
      357,
      16,
      13,
      15,
      611,
      1502,
      13,
      37295,
      6624,
      8284,
      35277,
      13,
      5188,
      3069,
      2073,
      532,
      16,
      13,
      15,
      828
    ],
    "start_token": 1017,
    "end_token": 1059,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements, which can be disabled in production"
  },
  {
    "line": 151,
    "text": "    )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1267
    ],
    "start_token": 1059,
    "end_token": 1063,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements, which can be disabled in production"
  },
  {
    "line": 153,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1063,
    "end_token": 1063,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements, which can be disabled in production"
  },
  {
    "line": 155,
    "text": "def test_simulator_stop_twap() -> None:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      4299,
      1332,
      62,
      14323,
      8927,
      62,
      11338,
      62,
      4246,
      499,
      3419,
      4613,
      6045,
      25
    ],
    "start_token": 1063,
    "end_token": 1077,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements, which can be disabled in production"
  },
  {
    "line": 157,
    "text": "    simulator = get_simulator(order)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert statements, which can be disabled in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      35375,
      796,
      651,
      62,
      14323,
      8927,
      7,
      2875,
      8
    ],
    "start_token": 1077,
    "end_token": 1089,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      6299,
      11,
      543,
      460,
      307,
      10058,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert statements, which can be disabled in production"
  },
  {
    "line": 148,
    "text": "    assert is_close(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to get an order, indicating a pattern of dynamic input retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6818,
      318,
      62,
      19836,
      7
    ],
    "start_token": 1089,
    "end_token": 1097,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      651,
      281,
      1502,
      11,
      12739,
      257,
      3912,
      286,
      8925,
      5128,
      45069
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to get an order, indicating a pattern of dynamic input retrieval"
  },
  {
    "line": 150,
    "text": "        (state.history_steps[\"trade_price\"].iloc[0] / simulator.twap_price - 1) * 10000,",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to get a simulator, indicating a pattern of dynamic environment setup",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      357,
      5219,
      13,
      23569,
      62,
      20214,
      14692,
      25351,
      62,
      20888,
      1,
      4083,
      346,
      420,
      58,
      15,
      60,
      1220,
      35375,
      13,
      4246,
      499,
      62,
      20888,
      532,
      352,
      8,
      1635,
      33028,
      11
    ],
    "start_token": 1097,
    "end_token": 1134,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      651,
      257,
      35375,
      11,
      12739,
      257,
      3912,
      286,
      8925,
      2858,
      9058
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to get a simulator, indicating a pattern of dynamic environment setup"
  },
  {
    "line": 152,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Instantiation of an interpreter with specific values, indicating a pattern of parameterized action interpretation",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1134,
    "end_token": 1134,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      24470,
      3920,
      286,
      281,
      28846,
      351,
      2176,
      3815,
      11,
      12739,
      257,
      3912,
      286,
      11507,
      1143,
      2223,
      10794
    ],
    "label": "ml_signal",
    "reason": "Instantiation of an interpreter with specific values, indicating a pattern of parameterized action interpretation"
  },
  {
    "line": 155,
    "text": "def test_simulator_stop_twap() -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Initial state retrieval from a simulator, indicating a pattern of state-based simulation",
    "confidence": 0.5,
    "tokens": [
      4299,
      1332,
      62,
      14323,
      8927,
      62,
      11338,
      62,
      4246,
      499,
      3419,
      4613,
      6045,
      25
    ],
    "start_token": 1134,
    "end_token": 1148,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1181,
      45069,
      422,
      257,
      35375,
      11,
      12739,
      257,
      3912,
      286,
      1181,
      12,
      3106,
      18640
    ],
    "label": "ml_signal",
    "reason": "Initial state retrieval from a simulator, indicating a pattern of state-based simulation"
  },
  {
    "line": 157,
    "text": "    simulator = get_simulator(order)",
    "annotation": "\u2705 Best Practice: Initialize lists before loops to avoid repeated initialization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      35375,
      796,
      651,
      62,
      14323,
      8927,
      7,
      2875,
      8
    ],
    "start_token": 1148,
    "end_token": 1160,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      8341,
      878,
      23607,
      284,
      3368,
      5100,
      37588
    ],
    "label": "best_practice",
    "reason": "Initialize lists before loops to avoid repeated initialization"
  },
  {
    "line": 158,
    "text": "    NUM_STEPS = 7",
    "annotation": "\ud83e\udde0 ML Signal: Step function usage with dynamic actions, indicating a pattern of iterative simulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      36871,
      62,
      30516,
      3705,
      796,
      767
    ],
    "start_token": 1160,
    "end_token": 1169,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5012,
      2163,
      8748,
      351,
      8925,
      4028,
      11,
      12739,
      257,
      3912,
      286,
      11629,
      876,
      18640
    ],
    "label": "ml_signal",
    "reason": "Step function usage with dynamic actions, indicating a pattern of iterative simulation"
  },
  {
    "line": 158,
    "text": "    NUM_STEPS = 7",
    "annotation": "\ud83e\udde0 ML Signal: State update pattern after each simulation step",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      36871,
      62,
      30516,
      3705,
      796,
      767
    ],
    "start_token": 1169,
    "end_token": 1178,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1812,
      4296,
      3912,
      706,
      1123,
      18640,
      2239
    ],
    "label": "ml_signal",
    "reason": "State update pattern after each simulation step"
  },
  {
    "line": 158,
    "text": "    NUM_STEPS = 7",
    "annotation": "\u2705 Best Practice: Use append to add elements to a list, ensuring clarity and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      36871,
      62,
      30516,
      3705,
      796,
      767
    ],
    "start_token": 1178,
    "end_token": 1187,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      24443,
      284,
      751,
      4847,
      284,
      257,
      1351,
      11,
      13359,
      16287,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use append to add elements to a list, ensuring clarity and maintainability"
  },
  {
    "line": 158,
    "text": "    NUM_STEPS = 7",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential floating-point precision issues in equality comparison",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      36871,
      62,
      30516,
      3705,
      796,
      767
    ],
    "start_token": 1187,
    "end_token": 1196,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12462,
      12,
      4122,
      15440,
      2428,
      287,
      10537,
      7208
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential floating-point precision issues in equality comparison"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
🧠 ML Signal: Constant value that might be used as a feature or label in ML models,"[8582, 100, 254, 10373, 26484, 25, 20217, 1988, 326, 1244, 307, 973, 355, 257, 3895, 393, 6167, 287, 10373, 4981]",0.5,14,ml_signal,11,Constant value that might be used as a feature or label in ML models,,0,"from qlib.backtest.decision import Order, OrderDir","[6738, 10662, 8019, 13, 1891, 9288, 13, 12501, 1166, 1330, 8284, 11, 8284, 35277]"
✅ Best Practice: Use of pytest.mark.skipif to conditionally skip tests based on Python version,"[26486, 227, 6705, 19939, 25, 5765, 286, 12972, 9288, 13, 4102, 13, 48267, 361, 284, 4006, 453, 14267, 5254, 1912, 319, 11361, 2196]",1.0,36,best_practice,14,Use of pytest.mark.skipif to conditionally skip tests based on Python version,,14,from qlib.rl.order_execution.simulator_qlib import SingleAssetOrderExecution,"[6738, 10662, 8019, 13, 45895, 13, 2875, 62, 18558, 1009, 13, 14323, 8927, 62, 80, 8019, 1330, 14206, 45869, 18743, 23002, 1009]"
✅ Best Practice: Type annotations are used for function parameters and return type,"[26486, 227, 6705, 19939, 25, 5994, 37647, 389, 973, 329, 2163, 10007, 290, 1441, 2099]",1.0,49,best_practice,12,Type annotations are used for function parameters and return type,,36,from qlib.backtest.executor import SimulatorExecutor,"[6738, 10662, 8019, 13, 1891, 9288, 13, 18558, 38409, 1330, 13942, 23002, 38409]"
"✅ Best Practice: Default value for epsilon is provided, making the function flexible","[26486, 227, 6705, 19939, 25, 15161, 1988, 329, 304, 862, 33576, 318, 2810, 11, 1642, 262, 2163, 12846]",1.0,67,best_practice,13,"Default value for epsilon is provided, making the function flexible",,49,from qlib.rl.order_execution import CategoricalActionInterpreter,"[6738, 10662, 8019, 13, 45895, 13, 2875, 62, 18558, 1009, 1330, 327, 2397, 12409, 12502, 9492, 3866, 353]"
"🧠 ML Signal: Function checks for closeness of two floating-point numbers, a common pattern in numerical computations","[8582, 100, 254, 10373, 26484, 25, 15553, 8794, 329, 3542, 9449, 286, 734, 12462, 12, 4122, 3146, 11, 257, 2219, 3912, 287, 29052, 2653, 602]",1.0,89,ml_signal,14,"Function checks for closeness of two floating-point numbers, a common pattern in numerical computations",,67,from qlib.rl.order_execution.simulator_qlib import SingleAssetOrderExecution,"[6738, 10662, 8019, 13, 45895, 13, 2875, 62, 18558, 1009, 13, 14323, 8927, 62, 80, 8019, 1330, 14206, 45869, 18743, 23002, 1009]"
✅ Best Practice: Use of abs() function for calculating absolute difference,"[26486, 227, 6705, 19939, 25, 5765, 286, 2352, 3419, 2163, 329, 26019, 4112, 3580]",1.0,89,best_practice,15,Use of abs() function for calculating absolute difference,,89,,[]
🧠 ML Signal: Function returning a specific object pattern,"[8582, 100, 254, 10373, 26484, 25, 15553, 8024, 257, 2176, 2134, 3912]",1.0,111,ml_signal,14,Function returning a specific object pattern,,89,from qlib.rl.order_execution.simulator_qlib import SingleAssetOrderExecution,"[6738, 10662, 8019, 13, 45895, 13, 2875, 62, 18558, 1009, 13, 14323, 8927, 62, 80, 8019, 1330, 14206, 45869, 18743, 23002, 1009]"
⚠️ SAST Risk (Low): Hardcoded stock_id and timestamps may lead to inflexibility or misuse,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 4283, 62, 312, 290, 4628, 395, 9430, 743, 1085, 284, 1167, 2588, 2247, 393, 29169]",0.5,111,sast_risk,15,Hardcoded stock_id and timestamps may lead to inflexibility or misuse,Low,111,,[]
⚠️ SAST Risk (Low): Use of undefined variable TOTAL_POSITION,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 7885, 36247, 62, 37997, 17941]",0.5,111,sast_risk,19,Use of undefined variable TOTAL_POSITION,Low,111,,[]
🧠 ML Signal: Consistent use of enum for direction,"[8582, 100, 254, 10373, 26484, 25, 3515, 7609, 779, 286, 33829, 329, 4571]",1.0,138,ml_signal,21,Consistent use of enum for direction,,111,"def is_close(a: float, b: float, epsilon: float = 1e-4) -> bool:","[4299, 318, 62, 19836, 7, 64, 25, 12178, 11, 275, 25, 12178, 11, 304, 862, 33576, 25, 12178, 796, 352, 68, 12, 19, 8, 4613, 20512, 25]"
🧠 ML Signal: Use of specific timestamps for start and end time,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 4628, 395, 9430, 329, 923, 290, 886, 640]",0.5,138,ml_signal,23,Use of specific timestamps for start and end time,,138,,[]
🧠 ML Signal: Function signature and return type hint can be used to infer function behavior and expected output.,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 290, 1441, 2099, 9254, 460, 307, 973, 284, 13249, 2163, 4069, 290, 2938, 5072, 13]",0.5,152,ml_signal,22,Function signature and return type hint can be used to infer function behavior and expected output.,,138,    return abs(a - b) <= epsilon,"[220, 220, 220, 1441, 2352, 7, 64, 532, 275, 8, 19841, 304, 862, 33576]"
✅ Best Practice: Use of dictionary to store configuration settings improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 284, 3650, 8398, 6460, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,152,best_practice,23,Use of dictionary to store configuration settings improves readability and maintainability.,,152,,[]
⚠️ SAST Risk (Low): Potential timezone issues with pd.Timestamp if order.start_time is naive.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 2428, 351, 279, 67, 13, 14967, 27823, 611, 1502, 13, 9688, 62, 2435, 318, 24354, 13]",0.5,185,sast_risk,57,Potential timezone issues with pd.Timestamp if order.start_time is naive.,Low,152,"                            ""verbose"": False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 19011, 577, 1298, 10352, 11]"
⚠️ SAST Risk (Low): Potential timezone issues with pd.Timestamp if order.start_time is naive.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 2428, 351, 279, 67, 13, 14967, 27823, 611, 1502, 13, 9688, 62, 2435, 318, 24354, 13]",0.5,218,sast_risk,57,Potential timezone issues with pd.Timestamp if order.start_time is naive.,Low,185,"                            ""verbose"": False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 19011, 577, 1298, 10352, 11]"
✅ Best Practice: Use of dictionary to store configuration settings improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 22155, 284, 3650, 8398, 6460, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,251,best_practice,57,Use of dictionary to store configuration settings improves readability and maintainability.,,218,"                            ""verbose"": False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 19011, 577, 1298, 10352, 11]"
🧠 ML Signal: Returning a tuple of configurations can indicate a pattern of configuration management.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 46545, 286, 25412, 460, 7603, 257, 3912, 286, 8398, 4542, 13]",0.5,290,ml_signal,75,Returning a tuple of configurations can indicate a pattern of configuration management.,,251,"        ""deal_price"": (""If($ask == 0, $bid, $ask)"", ""If($bid == 0, $ask, $bid)""),","[220, 220, 220, 220, 220, 220, 220, 366, 31769, 62, 20888, 1298, 5855, 1532, 16763, 2093, 6624, 657, 11, 720, 14065, 11, 720, 2093, 42501, 366, 1532, 16763, 14065, 6624, 657, 11, 720, 2093, 11, 720, 14065, 8, 12340]"
✅ Best Practice: Use of Path for file system paths improves cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764, 13]",1.0,314,best_practice,74,Use of Path for file system paths improves cross-platform compatibility.,,290,"        ""limit_threshold"": (""$ask == 0"", ""$bid == 0""),","[220, 220, 220, 220, 220, 220, 220, 366, 32374, 62, 400, 10126, 1298, 5855, 3, 2093, 6624, 657, 1600, 17971, 14065, 6624, 657, 12340]"
✅ Best Practice: Clear and descriptive dictionary keys improve code readability.,"[26486, 227, 6705, 19939, 25, 11459, 290, 35644, 22155, 8251, 2987, 2438, 1100, 1799, 13]",1.0,353,best_practice,75,Clear and descriptive dictionary keys improve code readability.,,314,"        ""deal_price"": (""If($ask == 0, $bid, $ask)"", ""If($bid == 0, $ask, $bid)""),","[220, 220, 220, 220, 220, 220, 220, 366, 31769, 62, 20888, 1298, 5855, 1532, 16763, 2093, 6624, 657, 11, 720, 14065, 11, 720, 2093, 42501, 366, 1532, 16763, 14065, 6624, 657, 11, 720, 2093, 11, 720, 14065, 8, 12340]"
🧠 ML Signal: Use of specific feature columns indicates a pattern for feature selection in ML models.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 3895, 15180, 9217, 257, 3912, 329, 3895, 6356, 287, 10373, 4981, 13]",0.5,392,ml_signal,75,Use of specific feature columns indicates a pattern for feature selection in ML models.,,353,"        ""deal_price"": (""If($ask == 0, $bid, $ask)"", ""If($bid == 0, $ask, $bid)""),","[220, 220, 220, 220, 220, 220, 220, 366, 31769, 62, 20888, 1298, 5855, 1532, 16763, 2093, 6624, 657, 11, 720, 14065, 11, 720, 2093, 42501, 366, 1532, 16763, 14065, 6624, 657, 11, 720, 2093, 11, 720, 14065, 8, 12340]"
🧠 ML Signal: Use of historical feature columns suggests a pattern for time-series data handling in ML models.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6754, 3895, 15180, 5644, 257, 3912, 329, 640, 12, 25076, 1366, 9041, 287, 10373, 4981, 13]",0.5,392,ml_signal,88,Use of historical feature columns suggests a pattern for time-series data handling in ML models.,,392,,[]
🧠 ML Signal: Function call to get_configs indicates a pattern for dynamic configuration retrieval.,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 651, 62, 11250, 82, 9217, 257, 3912, 329, 8925, 8398, 45069, 13]",0.5,392,ml_signal,89,Function call to get_configs indicates a pattern for dynamic configuration retrieval.,,392,,[]
🧠 ML Signal: Returning an instance of SingleAssetOrderExecution suggests a pattern for order execution in trading systems.,"[8582, 100, 254, 10373, 26484, 25, 42882, 281, 4554, 286, 14206, 45869, 18743, 23002, 1009, 5644, 257, 3912, 329, 1502, 9706, 287, 7313, 3341, 13]",0.5,401,ml_signal,94,Returning an instance of SingleAssetOrderExecution suggests a pattern for order execution in trading systems.,,392,    qlib_config = {,"[220, 220, 220, 10662, 8019, 62, 11250, 796, 1391]"
"🧠 ML Signal: Usage of a simulator pattern, common in testing environments","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 35375, 3912, 11, 2219, 287, 4856, 12493]",0.5,417,ml_signal,98,"Usage of a simulator pattern, common in testing environments",,401,"        ""feature_columns_today"": [","[220, 220, 220, 220, 220, 220, 220, 366, 30053, 62, 28665, 82, 62, 40838, 1298, 685]"
"🧠 ML Signal: Retrieving state from an object, indicating stateful behavior","[8582, 100, 254, 10373, 26484, 25, 4990, 37418, 1181, 422, 281, 2134, 11, 12739, 1181, 913, 4069]",0.5,466,ml_signal,100,"Retrieving state from an object, indicating stateful behavior",,417,"            ""$bidV"", ""$bidV1"", ""$bidV3"", ""$bidV5"", ""$askV"", ""$askV1"", ""$askV3"", ""$askV5"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17971, 14065, 53, 1600, 17971, 14065, 53, 16, 1600, 17971, 14065, 53, 18, 1600, 17971, 14065, 53, 20, 1600, 17971, 2093, 53, 1600, 17971, 2093, 53, 16, 1600, 17971, 2093, 53, 18, 1600, 17971, 2093, 53, 20, 1600]"
"⚠️ SAST Risk (Low): Hardcoded timestamp, could lead to brittle tests","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 41033, 11, 714, 1085, 284, 49307, 5254]",0.5,483,sast_risk,102,"Hardcoded timestamp, could lead to brittle tests",Low,466,"        ""feature_columns_yesterday"": [","[220, 220, 220, 220, 220, 220, 220, 366, 30053, 62, 28665, 82, 62, 8505, 6432, 1298, 685]"
"🧠 ML Signal: Use of constants in assertions, indicating expected behavior","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 38491, 287, 29965, 11, 12739, 2938, 4069]",0.5,548,ml_signal,104,"Use of constants in assertions, indicating expected behavior",,483,"            ""$bidV_1"", ""$bidV1_1"", ""$bidV3_1"", ""$bidV5_1"", ""$askV_1"", ""$askV1_1"", ""$askV3_1"", ""$askV5_1"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 17971, 14065, 53, 62, 16, 1600, 17971, 14065, 53, 16, 62, 16, 1600, 17971, 14065, 53, 18, 62, 16, 1600, 17971, 14065, 53, 20, 62, 16, 1600, 17971, 2093, 53, 62, 16, 1600, 17971, 2093, 53, 16, 62, 16, 1600, 17971, 2093, 53, 18, 62, 16, 1600, 17971, 2093, 53, 20, 62, 16, 1600]"
"🧠 ML Signal: Simulator step function, indicating iterative process","[8582, 100, 254, 10373, 26484, 25, 13942, 2239, 2163, 11, 12739, 11629, 876, 1429]",0.5,555,ml_signal,107,"Simulator step function, indicating iterative process",,548,    # fmt: on,"[220, 220, 220, 1303, 46996, 25, 319]"
"🧠 ML Signal: Re-fetching state after an operation, indicating state change","[8582, 100, 254, 10373, 26484, 25, 797, 12, 69, 7569, 278, 1181, 706, 281, 4905, 11, 12739, 1181, 1487]",0.5,574,ml_signal,109,"Re-fetching state after an operation, indicating state change",,555,"    executor_config, exchange_config = get_configs(order)","[220, 220, 220, 3121, 273, 62, 11250, 11, 5163, 62, 11250, 796, 651, 62, 11250, 82, 7, 2875, 8]"
"⚠️ SAST Risk (Low): Hardcoded timestamp, could lead to brittle tests","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 41033, 11, 714, 1085, 284, 49307, 5254]",0.5,584,sast_risk,111,"Hardcoded timestamp, could lead to brittle tests",Low,574,    return SingleAssetOrderExecution(,"[220, 220, 220, 1441, 14206, 45869, 18743, 23002, 1009, 7]"
"🧠 ML Signal: Use of constants in assertions, indicating expected behavior","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 38491, 287, 29965, 11, 12739, 2938, 4069]",0.5,601,ml_signal,113,"Use of constants in assertions, indicating expected behavior",,584,"        qlib_config=qlib_config,","[220, 220, 220, 220, 220, 220, 220, 10662, 8019, 62, 11250, 28, 80, 8019, 62, 11250, 11]"
"🧠 ML Signal: Checking length of a collection, indicating expected data size","[8582, 100, 254, 10373, 26484, 25, 39432, 4129, 286, 257, 4947, 11, 12739, 2938, 1366, 2546]",0.5,617,ml_signal,115,"Checking length of a collection, indicating expected data size",,601,"        exchange_config=exchange_config,","[220, 220, 220, 220, 220, 220, 220, 5163, 62, 11250, 28, 1069, 3803, 62, 11250, 11]"
"⚠️ SAST Risk (Low): Hardcoded timestamp, could lead to brittle tests","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 41033, 11, 714, 1085, 284, 49307, 5254]",0.5,617,sast_risk,117,"Hardcoded timestamp, could lead to brittle tests",Low,617,,[]
"🧠 ML Signal: Use of is_close for floating-point comparison, indicating precision handling","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 62, 19836, 329, 12462, 12, 4122, 7208, 11, 12739, 15440, 9041]",0.5,623,ml_signal,119,"Use of is_close for floating-point comparison, indicating precision handling",,617,@python_version_request,"[31, 29412, 62, 9641, 62, 25927]"
"🧠 ML Signal: Use of is_close for floating-point comparison, indicating precision handling","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 62, 19836, 329, 12462, 12, 4122, 7208, 11, 12739, 15440, 9041]",0.5,632,ml_signal,121,"Use of is_close for floating-point comparison, indicating precision handling",,623,    order = get_order(),"[220, 220, 220, 1502, 796, 651, 62, 2875, 3419]"
"🧠 ML Signal: Use of vectorized operations, indicating data processing","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 15879, 1143, 4560, 11, 12739, 1366, 7587]",0.5,641,ml_signal,121,"Use of vectorized operations, indicating data processing",,632,    order = get_order(),"[220, 220, 220, 1502, 796, 651, 62, 2875, 3419]"
"🧠 ML Signal: Use of vectorized operations, indicating data processing","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 15879, 1143, 4560, 11, 12739, 1366, 7587]",0.5,641,ml_signal,126,"Use of vectorized operations, indicating data processing",,641,,[]
"🧠 ML Signal: Use of is_close for floating-point comparison, indicating precision handling","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 62, 19836, 329, 12462, 12, 4122, 7208, 11, 12739, 15440, 9041]",0.5,650,ml_signal,127,"Use of is_close for floating-point comparison, indicating precision handling",,641,    AMOUNT = 300.0,"[220, 220, 220, 3001, 28270, 796, 5867, 13, 15]"
"🧠 ML Signal: Use of is_close for floating-point comparison, indicating precision handling","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 62, 19836, 329, 12462, 12, 4122, 7208, 11, 12739, 15440, 9041]",0.5,661,ml_signal,129,"Use of is_close for floating-point comparison, indicating precision handling",,650,    state = simulator.get_state(),"[220, 220, 220, 1181, 796, 35375, 13, 1136, 62, 5219, 3419]"
"🧠 ML Signal: Use of is_close for floating-point comparison, indicating precision handling","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 62, 19836, 329, 12462, 12, 4122, 7208, 11, 12739, 15440, 9041]",0.5,676,ml_signal,131,"Use of is_close for floating-point comparison, indicating precision handling",,661,    assert state.position == TOTAL_POSITION - AMOUNT,"[220, 220, 220, 6818, 1181, 13, 9150, 6624, 36247, 62, 37997, 17941, 532, 3001, 28270]"
"🧠 ML Signal: Use of is_close for floating-point comparison, indicating precision handling","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 62, 19836, 329, 12462, 12, 4122, 7208, 11, 12739, 15440, 9041]",0.5,708,ml_signal,133,"Use of is_close for floating-point comparison, indicating precision handling",,676,"    assert state.history_exec.index[0] == pd.Timestamp(""2019-03-04 09:30:00"")","[220, 220, 220, 6818, 1181, 13, 23569, 62, 18558, 13, 9630, 58, 15, 60, 6624, 279, 67, 13, 14967, 27823, 7203, 23344, 12, 3070, 12, 3023, 7769, 25, 1270, 25, 405, 4943]"
"🧠 ML Signal: Use of is_close for floating-point comparison, indicating precision handling","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 62, 19836, 329, 12462, 12, 4122, 7208, 11, 12739, 15440, 9041]",0.5,739,ml_signal,135,"Use of is_close for floating-point comparison, indicating precision handling",,708,"    assert is_close(state.history_exec[""market_volume""].iloc[0], 109382.382812)","[220, 220, 220, 6818, 318, 62, 19836, 7, 5219, 13, 23569, 62, 18558, 14692, 10728, 62, 29048, 1, 4083, 346, 420, 58, 15, 4357, 16003, 36243, 13, 2548, 2078, 1065, 8]"
"🧠 ML Signal: Use of constants in assertions, indicating expected behavior","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 38491, 287, 29965, 11, 12739, 2938, 4069]",0.5,760,ml_signal,137,"Use of constants in assertions, indicating expected behavior",,739,"    assert (state.history_exec[""amount""] == AMOUNT / 30).all()","[220, 220, 220, 6818, 357, 5219, 13, 23569, 62, 18558, 14692, 17287, 8973, 6624, 3001, 28270, 1220, 1542, 737, 439, 3419]"
"🧠 ML Signal: Use of constants in assertions, indicating expected behavior","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 38491, 287, 29965, 11, 12739, 2938, 4069]",0.5,790,ml_signal,139,"Use of constants in assertions, indicating expected behavior",,760,"    assert is_close(state.history_exec[""trade_price""].iloc[0], 149.566483)","[220, 220, 220, 6818, 318, 62, 19836, 7, 5219, 13, 23569, 62, 18558, 14692, 25351, 62, 20888, 1, 4083, 346, 420, 58, 15, 4357, 24041, 13, 3980, 2414, 5999, 8]"
"🧠 ML Signal: Use of constants in assertions, indicating expected behavior","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 38491, 287, 29965, 11, 12739, 2938, 4069]",0.5,822,ml_signal,141,"Use of constants in assertions, indicating expected behavior",,790,"    assert is_close(state.history_exec[""position""].iloc[0], TOTAL_POSITION - AMOUNT / 30)","[220, 220, 220, 6818, 318, 62, 19836, 7, 5219, 13, 23569, 62, 18558, 14692, 9150, 1, 4083, 346, 420, 58, 15, 4357, 36247, 62, 37997, 17941, 532, 3001, 28270, 1220, 1542, 8]"
"🧠 ML Signal: Use of conditional logic in assertions, indicating complex behavior","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 26340, 9156, 287, 29965, 11, 12739, 3716, 4069]",0.5,822,ml_signal,143,"Use of conditional logic in assertions, indicating complex behavior",,822,,[]
"🧠 ML Signal: Function to test simulator behavior, useful for ML models to learn expected outcomes","[8582, 100, 254, 10373, 26484, 25, 15553, 284, 1332, 35375, 4069, 11, 4465, 329, 10373, 4981, 284, 2193, 2938, 10906]",1.0,831,ml_signal,127,"Function to test simulator behavior, useful for ML models to learn expected outcomes",,822,    AMOUNT = 300.0,"[220, 220, 220, 3001, 28270, 796, 5867, 13, 15]"
"🧠 ML Signal: Simulator setup with an order, indicating a pattern of initializing test scenarios","[8582, 100, 254, 10373, 26484, 25, 13942, 9058, 351, 281, 1502, 11, 12739, 257, 3912, 286, 4238, 2890, 1332, 13858]",1.0,842,ml_signal,129,"Simulator setup with an order, indicating a pattern of initializing test scenarios",,831,    state = simulator.get_state(),"[220, 220, 220, 1181, 796, 35375, 13, 1136, 62, 5219, 3419]"
"🧠 ML Signal: Iterative process to simulate steps, useful for learning loop patterns","[8582, 100, 254, 10373, 26484, 25, 40806, 876, 1429, 284, 29308, 4831, 11, 4465, 329, 4673, 9052, 7572]",0.5,874,ml_signal,133,"Iterative process to simulate steps, useful for learning loop patterns",,842,"    assert state.history_exec.index[0] == pd.Timestamp(""2019-03-04 09:30:00"")","[220, 220, 220, 6818, 1181, 13, 23569, 62, 18558, 13, 9630, 58, 15, 60, 6624, 279, 67, 13, 14967, 27823, 7203, 23344, 12, 3070, 12, 3023, 7769, 25, 1270, 25, 405, 4943]"
"⚠️ SAST Risk (Low): Use of assert statements, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 11, 543, 460, 307, 10058, 287, 3227]",1.0,895,sast_risk,137,"Use of assert statements, which can be disabled in production",Low,874,"    assert (state.history_exec[""amount""] == AMOUNT / 30).all()","[220, 220, 220, 6818, 357, 5219, 13, 23569, 62, 18558, 14692, 17287, 8973, 6624, 3001, 28270, 1220, 1542, 737, 439, 3419]"
"⚠️ SAST Risk (Low): Use of assert statements, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 11, 543, 460, 307, 10058, 287, 3227]",1.0,925,sast_risk,139,"Use of assert statements, which can be disabled in production",Low,895,"    assert is_close(state.history_exec[""trade_price""].iloc[0], 149.566483)","[220, 220, 220, 6818, 318, 62, 19836, 7, 5219, 13, 23569, 62, 18558, 14692, 25351, 62, 20888, 1, 4083, 346, 420, 58, 15, 4357, 24041, 13, 3980, 2414, 5999, 8]"
"⚠️ SAST Risk (Low): Use of assert statements, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 11, 543, 460, 307, 10058, 287, 3227]",1.0,957,sast_risk,141,"Use of assert statements, which can be disabled in production",Low,925,"    assert is_close(state.history_exec[""position""].iloc[0], TOTAL_POSITION - AMOUNT / 30)","[220, 220, 220, 6818, 318, 62, 19836, 7, 5219, 13, 23569, 62, 18558, 14692, 9150, 1, 4083, 346, 420, 58, 15, 4357, 36247, 62, 37997, 17941, 532, 3001, 28270, 1220, 1542, 8]"
"⚠️ SAST Risk (Low): Use of assert statements, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 11, 543, 460, 307, 10058, 287, 3227]",1.0,957,sast_risk,143,"Use of assert statements, which can be disabled in production",Low,957,,[]
"⚠️ SAST Risk (Low): Use of assert statements, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 11, 543, 460, 307, 10058, 287, 3227]",1.0,990,sast_risk,144,"Use of assert statements, which can be disabled in production",Low,957,"    assert is_close(state.history_steps[""market_volume""].iloc[0], 1254848.5756835938)","[220, 220, 220, 6818, 318, 62, 19836, 7, 5219, 13, 23569, 62, 20214, 14692, 10728, 62, 29048, 1, 4083, 346, 420, 58, 15, 4357, 13151, 2780, 2780, 13, 36189, 3104, 30743, 2548, 8]"
"⚠️ SAST Risk (Low): Use of assert statements, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 11, 543, 460, 307, 10058, 287, 3227]",1.0,1017,sast_risk,147,"Use of assert statements, which can be disabled in production",Low,990,"    assert state.history_steps[""ffr""].iloc[0] == AMOUNT / TOTAL_POSITION","[220, 220, 220, 6818, 1181, 13, 23569, 62, 20214, 14692, 487, 81, 1, 4083, 346, 420, 58, 15, 60, 6624, 3001, 28270, 1220, 36247, 62, 37997, 17941]"
"⚠️ SAST Risk (Low): Use of assert statements, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 11, 543, 460, 307, 10058, 287, 3227]",1.0,1059,sast_risk,149,"Use of assert statements, which can be disabled in production",Low,1017,"        state.history_steps[""pa""].iloc[0] * (1.0 if order.direction == OrderDir.SELL else -1.0),","[220, 220, 220, 220, 220, 220, 220, 1181, 13, 23569, 62, 20214, 14692, 8957, 1, 4083, 346, 420, 58, 15, 60, 1635, 357, 16, 13, 15, 611, 1502, 13, 37295, 6624, 8284, 35277, 13, 5188, 3069, 2073, 532, 16, 13, 15, 828]"
"⚠️ SAST Risk (Low): Use of assert statements, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 11, 543, 460, 307, 10058, 287, 3227]",1.0,1063,sast_risk,151,"Use of assert statements, which can be disabled in production",Low,1059,    ),"[220, 220, 220, 1267]"
"⚠️ SAST Risk (Low): Use of assert statements, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 11, 543, 460, 307, 10058, 287, 3227]",1.0,1063,sast_risk,153,"Use of assert statements, which can be disabled in production",Low,1063,,[]
"⚠️ SAST Risk (Low): Use of assert statements, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 11, 543, 460, 307, 10058, 287, 3227]",1.0,1077,sast_risk,155,"Use of assert statements, which can be disabled in production",Low,1063,def test_simulator_stop_twap() -> None:,"[4299, 1332, 62, 14323, 8927, 62, 11338, 62, 4246, 499, 3419, 4613, 6045, 25]"
"⚠️ SAST Risk (Low): Use of assert statements, which can be disabled in production","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 6299, 11, 543, 460, 307, 10058, 287, 3227]",1.0,1089,sast_risk,157,"Use of assert statements, which can be disabled in production",Low,1077,    simulator = get_simulator(order),"[220, 220, 220, 35375, 796, 651, 62, 14323, 8927, 7, 2875, 8]"
"🧠 ML Signal: Usage of a function to get an order, indicating a pattern of dynamic input retrieval","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 651, 281, 1502, 11, 12739, 257, 3912, 286, 8925, 5128, 45069]",0.5,1097,ml_signal,148,"Usage of a function to get an order, indicating a pattern of dynamic input retrieval",,1089,    assert is_close(,"[220, 220, 220, 6818, 318, 62, 19836, 7]"
"🧠 ML Signal: Usage of a function to get a simulator, indicating a pattern of dynamic environment setup","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 651, 257, 35375, 11, 12739, 257, 3912, 286, 8925, 2858, 9058]",0.5,1134,ml_signal,150,"Usage of a function to get a simulator, indicating a pattern of dynamic environment setup",,1097,"        (state.history_steps[""trade_price""].iloc[0] / simulator.twap_price - 1) * 10000,","[220, 220, 220, 220, 220, 220, 220, 357, 5219, 13, 23569, 62, 20214, 14692, 25351, 62, 20888, 1, 4083, 346, 420, 58, 15, 60, 1220, 35375, 13, 4246, 499, 62, 20888, 532, 352, 8, 1635, 33028, 11]"
"🧠 ML Signal: Instantiation of an interpreter with specific values, indicating a pattern of parameterized action interpretation","[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 281, 28846, 351, 2176, 3815, 11, 12739, 257, 3912, 286, 11507, 1143, 2223, 10794]",0.5,1134,ml_signal,152,"Instantiation of an interpreter with specific values, indicating a pattern of parameterized action interpretation",,1134,,[]
"🧠 ML Signal: Initial state retrieval from a simulator, indicating a pattern of state-based simulation","[8582, 100, 254, 10373, 26484, 25, 20768, 1181, 45069, 422, 257, 35375, 11, 12739, 257, 3912, 286, 1181, 12, 3106, 18640]",0.5,1148,ml_signal,155,"Initial state retrieval from a simulator, indicating a pattern of state-based simulation",,1134,def test_simulator_stop_twap() -> None:,"[4299, 1332, 62, 14323, 8927, 62, 11338, 62, 4246, 499, 3419, 4613, 6045, 25]"
✅ Best Practice: Initialize lists before loops to avoid repeated initialization,"[26486, 227, 6705, 19939, 25, 20768, 1096, 8341, 878, 23607, 284, 3368, 5100, 37588]",0.5,1160,best_practice,157,Initialize lists before loops to avoid repeated initialization,,1148,    simulator = get_simulator(order),"[220, 220, 220, 35375, 796, 651, 62, 14323, 8927, 7, 2875, 8]"
"🧠 ML Signal: Step function usage with dynamic actions, indicating a pattern of iterative simulation","[8582, 100, 254, 10373, 26484, 25, 5012, 2163, 8748, 351, 8925, 4028, 11, 12739, 257, 3912, 286, 11629, 876, 18640]",0.5,1169,ml_signal,158,"Step function usage with dynamic actions, indicating a pattern of iterative simulation",,1160,    NUM_STEPS = 7,"[220, 220, 220, 36871, 62, 30516, 3705, 796, 767]"
🧠 ML Signal: State update pattern after each simulation step,"[8582, 100, 254, 10373, 26484, 25, 1812, 4296, 3912, 706, 1123, 18640, 2239]",0.5,1178,ml_signal,158,State update pattern after each simulation step,,1169,    NUM_STEPS = 7,"[220, 220, 220, 36871, 62, 30516, 3705, 796, 767]"
"✅ Best Practice: Use append to add elements to a list, ensuring clarity and maintainability","[26486, 227, 6705, 19939, 25, 5765, 24443, 284, 751, 4847, 284, 257, 1351, 11, 13359, 16287, 290, 5529, 1799]",0.5,1187,best_practice,158,"Use append to add elements to a list, ensuring clarity and maintainability",,1178,    NUM_STEPS = 7,"[220, 220, 220, 36871, 62, 30516, 3705, 796, 767]"
⚠️ SAST Risk (Low): Potential floating-point precision issues in equality comparison,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12462, 12, 4122, 15440, 2428, 287, 10537, 7208]",0.5,1196,sast_risk,158,Potential floating-point precision issues in equality comparison,Low,1187,    NUM_STEPS = 7,"[220, 220, 220, 36871, 62, 30516, 3705, 796, 767]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
🧠 ML Signal: Conditional test skipping based on Python version,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 1332, 31017, 1912, 319, 11361, 2196]",1.0,20,ml_signal,19,Conditional test skipping based on Python version,,0,from qlib.rl.data.pickle_styled import PickleProcessedDataProvider,"[6738, 10662, 8019, 13, 45895, 13, 7890, 13, 27729, 293, 62, 34365, 992, 1330, 12346, 293, 18709, 276, 6601, 29495]"
✅ Best Practice: Use of Path for file system paths improves cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764]",1.0,40,best_practice,22,Use of Path for file system paths improves cross-platform compatibility,,20,"from qlib.rl.utils import ConsoleWriter, CsvWriter, EnvWrapperStatus","[6738, 10662, 8019, 13, 45895, 13, 26791, 1330, 24371, 34379, 11, 327, 21370, 34379, 11, 2039, 85, 36918, 2848, 19580]"
✅ Best Practice: Use of Path for file system paths improves cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764]",1.0,77,best_practice,24,Use of Path for file system paths improves cross-platform compatibility,,40,"pytestmark = pytest.mark.skipif(sys.version_info < (3, 8), reason=""Pickle styled data only supports Python >= 3.8"")","[9078, 9288, 4102, 796, 12972, 9288, 13, 4102, 13, 48267, 361, 7, 17597, 13, 9641, 62, 10951, 1279, 357, 18, 11, 807, 828, 1738, 2625, 31686, 293, 45552, 1366, 691, 6971, 11361, 18189, 513, 13, 23, 4943]"
✅ Best Practice: Use of Path for file system paths improves cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764]",1.0,77,best_practice,26,Use of Path for file system paths improves cross-platform compatibility,,77,,[]
✅ Best Practice: Use of Path for file system paths improves cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764]",1.0,91,best_practice,28,Use of Path for file system paths improves cross-platform compatibility,,77,"DATA_DIR = DATA_ROOT_DIR / ""us""","[26947, 62, 34720, 796, 42865, 62, 13252, 2394, 62, 34720, 1220, 366, 385, 1]"
✅ Best Practice: Use of Path for file system paths improves cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764]",1.0,106,best_practice,30,Use of Path for file system paths improves cross-platform compatibility,,91,"FEATURE_DATA_DIR = DATA_DIR / ""processed""","[15112, 40086, 62, 26947, 62, 34720, 796, 42865, 62, 34720, 1220, 366, 14681, 276, 1]"
✅ Best Practice: Use of Path for file system paths improves cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764]",1.0,106,best_practice,32,Use of Path for file system paths improves cross-platform compatibility,,106,,[]
✅ Best Practice: Use of Path for file system paths improves cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764]",1.0,125,best_practice,34,Use of Path for file system paths improves cross-platform compatibility,,106,"CN_FEATURE_DATA_DIR = CN_DATA_DIR / ""processed""","[44175, 62, 15112, 40086, 62, 26947, 62, 34720, 796, 31171, 62, 26947, 62, 34720, 1220, 366, 14681, 276, 1]"
✅ Best Practice: Use of Path for file system paths improves cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764]",1.0,145,best_practice,36,Use of Path for file system paths improves cross-platform compatibility,,125,"CN_POLICY_WEIGHTS_DIR = CN_DATA_DIR / ""weights""","[44175, 62, 45472, 2149, 56, 62, 8845, 34874, 62, 34720, 796, 31171, 62, 26947, 62, 34720, 1220, 366, 43775, 1]"
✅ Best Practice: Use of Path for file system paths improves cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 329, 2393, 1080, 13532, 19575, 3272, 12, 24254, 17764]",1.0,145,best_practice,38,Use of Path for file system paths improves cross-platform compatibility,,145,,[]
🧠 ML Signal: Function definition with a specific name pattern indicating a test function,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 1438, 3912, 12739, 257, 1332, 2163]",1.0,159,ml_signal,28,Function definition with a specific name pattern indicating a test function,,145,"DATA_DIR = DATA_ROOT_DIR / ""us""","[26947, 62, 34720, 796, 42865, 62, 13252, 2394, 62, 34720, 1220, 366, 385, 1]"
🧠 ML Signal: Usage of a custom function to load data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 2163, 284, 3440, 1366]",1.0,174,ml_signal,30,Usage of a custom function to load data,,159,"FEATURE_DATA_DIR = DATA_DIR / ""processed""","[15112, 40086, 62, 26947, 62, 34720, 796, 42865, 62, 34720, 1220, 366, 14681, 276, 1]"
✅ Best Practice: Asserting expected length of data for validation,"[26486, 227, 6705, 19939, 25, 2195, 861, 278, 2938, 4129, 286, 1366, 329, 21201]",1.0,174,best_practice,32,Asserting expected length of data for validation,,174,,[]
🧠 ML Signal: Instantiation of a custom data provider class,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 2183, 1366, 10131, 1398]",1.0,193,ml_signal,34,Instantiation of a custom data provider class,,174,"CN_FEATURE_DATA_DIR = CN_DATA_DIR / ""processed""","[44175, 62, 15112, 40086, 62, 26947, 62, 34720, 796, 31171, 62, 26947, 62, 34720, 1220, 366, 14681, 276, 1]"
🧠 ML Signal: Usage of a method to retrieve data with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 19818, 1366, 351, 2176, 10007]",1.0,213,ml_signal,36,Usage of a method to retrieve data with specific parameters,,193,"CN_POLICY_WEIGHTS_DIR = CN_DATA_DIR / ""weights""","[44175, 62, 45472, 2149, 56, 62, 8845, 34874, 62, 34720, 796, 31171, 62, 26947, 62, 34720, 1220, 366, 43775, 1]"
✅ Best Practice: Asserting expected length of data for validation,"[26486, 227, 6705, 19939, 25, 2195, 861, 278, 2938, 4129, 286, 1366, 329, 21201]",1.0,213,best_practice,38,Asserting expected length of data for validation,,213,,[]
"🧠 ML Signal: Function name indicates a test case, useful for identifying test functions","[8582, 100, 254, 10373, 26484, 25, 15553, 1438, 9217, 257, 1332, 1339, 11, 4465, 329, 13720, 1332, 5499]",1.0,232,ml_signal,34,"Function name indicates a test case, useful for identifying test functions",,213,"CN_FEATURE_DATA_DIR = CN_DATA_DIR / ""processed""","[44175, 62, 15112, 40086, 62, 26947, 62, 34720, 796, 31171, 62, 26947, 62, 34720, 1220, 366, 14681, 276, 1]"
"🧠 ML Signal: Order creation with specific parameters, useful for learning order patterns","[8582, 100, 254, 10373, 26484, 25, 8284, 6282, 351, 2176, 10007, 11, 4465, 329, 4673, 1502, 7572]",1.0,252,ml_signal,36,"Order creation with specific parameters, useful for learning order patterns",,232,"CN_POLICY_WEIGHTS_DIR = CN_DATA_DIR / ""weights""","[44175, 62, 45472, 2149, 56, 62, 8845, 34874, 62, 34720, 796, 31171, 62, 26947, 62, 34720, 1220, 366, 43775, 1]"
"🧠 ML Signal: Simulator initialization with order and data directory, useful for learning initialization patterns","[8582, 100, 254, 10373, 26484, 25, 13942, 37588, 351, 1502, 290, 1366, 8619, 11, 4465, 329, 4673, 37588, 7572]",1.0,252,ml_signal,38,"Simulator initialization with order and data directory, useful for learning initialization patterns",,252,,[]
"🧠 ML Signal: Retrieving state from simulator, useful for learning state management","[8582, 100, 254, 10373, 26484, 25, 4990, 37418, 1181, 422, 35375, 11, 4465, 329, 4673, 1181, 4542]",1.0,300,ml_signal,40,"Retrieving state from simulator, useful for learning state management",,252,"    data = pickle_styled.load_simple_intraday_backtest_data(BACKTEST_DATA_DIR, ""AAL"", ""2013-12-11"", ""close"", 0)","[220, 220, 220, 1366, 796, 2298, 293, 62, 34365, 992, 13, 2220, 62, 36439, 62, 600, 6335, 323, 62, 1891, 9288, 62, 7890, 7, 31098, 51, 6465, 62, 26947, 62, 34720, 11, 366, 32, 1847, 1600, 366, 6390, 12, 1065, 12, 1157, 1600, 366, 19836, 1600, 657, 8]"
"🧠 ML Signal: Assertion to check initial state time, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 4238, 1181, 640, 11, 4465, 329, 4673, 2938, 1181, 27188]",1.0,300,ml_signal,42,"Assertion to check initial state time, useful for learning expected state transitions",,300,,[]
"🧠 ML Signal: Assertion to check initial position, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 4238, 2292, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,331,ml_signal,44,"Assertion to check initial position, useful for learning expected state transitions",,300,"    data = provider.get_data(""AAL"", ""2013-12-11"", 5, data.get_time_index())","[220, 220, 220, 1366, 796, 10131, 13, 1136, 62, 7890, 7203, 32, 1847, 1600, 366, 6390, 12, 1065, 12, 1157, 1600, 642, 11, 1366, 13, 1136, 62, 2435, 62, 9630, 28955]"
"🧠 ML Signal: Simulator step function call, useful for learning step execution patterns","[8582, 100, 254, 10373, 26484, 25, 13942, 2239, 2163, 869, 11, 4465, 329, 4673, 2239, 9706, 7572]",1.0,331,ml_signal,46,"Simulator step function call, useful for learning step execution patterns",,331,,[]
"🧠 ML Signal: Retrieving state after step, useful for learning state management","[8582, 100, 254, 10373, 26484, 25, 4990, 37418, 1181, 706, 2239, 11, 4465, 329, 4673, 1181, 4542]",1.0,341,ml_signal,48,"Retrieving state after step, useful for learning state management",,331,def test_simulator_first_step():,"[4299, 1332, 62, 14323, 8927, 62, 11085, 62, 9662, 33529]"
"🧠 ML Signal: Assertion to check history execution length, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 2106, 9706, 4129, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,341,ml_signal,50,"Assertion to check history execution length, useful for learning expected state transitions",,341,,[]
"🧠 ML Signal: Assertion to check first index of history execution, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 717, 6376, 286, 2106, 9706, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,352,ml_signal,52,"Assertion to check first index of history execution, useful for learning expected state transitions",,341,    state = simulator.get_state(),"[220, 220, 220, 1181, 796, 35375, 13, 1136, 62, 5219, 3419]"
"🧠 ML Signal: Assertion to check market volume, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 1910, 6115, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,363,ml_signal,54,"Assertion to check market volume, useful for learning expected state transitions",,352,    assert state.position == 30.0,"[220, 220, 220, 6818, 1181, 13, 9150, 6624, 1542, 13, 15]"
"🧠 ML Signal: Assertion to check market price with tolerance, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 1910, 2756, 351, 15621, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,374,ml_signal,56,"Assertion to check market price with tolerance, useful for learning expected state transitions",,363,    simulator.step(15.0),"[220, 220, 220, 35375, 13, 9662, 7, 1314, 13, 15, 8]"
"🧠 ML Signal: Assertion to check amount consistency, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 2033, 15794, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,385,ml_signal,56,"Assertion to check amount consistency, useful for learning expected state transitions",,374,    simulator.step(15.0),"[220, 220, 220, 35375, 13, 9662, 7, 1314, 13, 15, 8]"
"🧠 ML Signal: Assertion to check deal amount consistency, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 1730, 2033, 15794, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,411,ml_signal,60,"Assertion to check deal amount consistency, useful for learning expected state transitions",,385,"    assert state.history_exec[""market_volume""].iloc[0] == 450072.0","[220, 220, 220, 6818, 1181, 13, 23569, 62, 18558, 14692, 10728, 62, 29048, 1, 4083, 346, 420, 58, 15, 60, 6624, 604, 4059, 4761, 13, 15]"
"🧠 ML Signal: Assertion to check trade price with tolerance, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 3292, 2756, 351, 15621, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,431,ml_signal,62,"Assertion to check trade price with tolerance, useful for learning expected state transitions",,411,"    assert (state.history_exec[""amount""] == 0.5).all()","[220, 220, 220, 6818, 357, 5219, 13, 23569, 62, 18558, 14692, 17287, 8973, 6624, 657, 13, 20, 737, 439, 3419]"
"🧠 ML Signal: Assertion to check trade value with tolerance, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 3292, 1988, 351, 15621, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,464,ml_signal,64,"Assertion to check trade value with tolerance, useful for learning expected state transitions",,431,"    assert abs(state.history_exec[""trade_price""].iloc[0] - 25.370001) < 1e-4","[220, 220, 220, 6818, 2352, 7, 5219, 13, 23569, 62, 18558, 14692, 25351, 62, 20888, 1, 4083, 346, 420, 58, 15, 60, 532, 1679, 13, 2718, 18005, 8, 1279, 352, 68, 12, 19]"
"🧠 ML Signal: Assertion to check position after execution, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 2292, 706, 9706, 11, 4465, 329, 4673, 2938, 1181, 27188]",1.0,486,ml_signal,66,"Assertion to check position after execution, useful for learning expected state transitions",,464,"    assert state.history_exec[""position""].iloc[0] == 29.5","[220, 220, 220, 6818, 1181, 13, 23569, 62, 18558, 14692, 9150, 1, 4083, 346, 420, 58, 15, 60, 6624, 2808, 13, 20]"
"🧠 ML Signal: Assertion to check fill factor rate, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 6070, 5766, 2494, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,486,ml_signal,68,"Assertion to check fill factor rate, useful for learning expected state transitions",,486,,[]
"🧠 ML Signal: Assertion to check market volume in steps, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 1910, 6115, 287, 4831, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,508,ml_signal,70,"Assertion to check market volume in steps, useful for learning expected state transitions",,486,"    assert state.history_steps[""amount""].iloc[0] == 15.0","[220, 220, 220, 6818, 1181, 13, 23569, 62, 20214, 14692, 17287, 1, 4083, 346, 420, 58, 15, 60, 6624, 1315, 13, 15]"
"🧠 ML Signal: Assertion to check amount in steps, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 2033, 287, 4831, 11, 4465, 329, 4673, 2938, 1181, 27188]",1.0,531,ml_signal,72,"Assertion to check amount in steps, useful for learning expected state transitions",,508,"    assert state.history_steps[""ffr""].iloc[0] == 0.5","[220, 220, 220, 6818, 1181, 13, 23569, 62, 20214, 14692, 487, 81, 1, 4083, 346, 420, 58, 15, 60, 6624, 657, 13, 20]"
"🧠 ML Signal: Assertion to check deal amount in steps, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 1730, 2033, 287, 4831, 11, 4465, 329, 4673, 2938, 1181, 27188]",1.0,552,ml_signal,74,"Assertion to check deal amount in steps, useful for learning expected state transitions",,531,"        state.history_steps[""pa""].iloc[0]","[220, 220, 220, 220, 220, 220, 220, 1181, 13, 23569, 62, 20214, 14692, 8957, 1, 4083, 346, 420, 58, 15, 60]"
"🧠 ML Signal: Assertion to check fill factor rate in steps, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 6070, 5766, 2494, 287, 4831, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,556,ml_signal,76,"Assertion to check fill factor rate in steps, useful for learning expected state transitions",,552,    ),"[220, 220, 220, 1267]"
"🧠 ML Signal: Assertion to check price adjustment calculation, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 2756, 15068, 17952, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,567,ml_signal,78,"Assertion to check price adjustment calculation, useful for learning expected state transitions",,556,    assert state.position == 15.0,"[220, 220, 220, 6818, 1181, 13, 9150, 6624, 1315, 13, 15]"
"🧠 ML Signal: Assertion to check position after step, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 2292, 706, 2239, 11, 4465, 329, 4673, 2938, 1181, 27188]",1.0,617,ml_signal,83,"Assertion to check position after step, useful for learning expected state transitions",,567,"    order = Order(""AAL"", 13.0, 0, pd.Timestamp(""2013-12-11 00:00:00""), pd.Timestamp(""2013-12-11 23:59:59""))","[220, 220, 220, 1502, 796, 8284, 7203, 32, 1847, 1600, 1511, 13, 15, 11, 657, 11, 279, 67, 13, 14967, 27823, 7203, 6390, 12, 1065, 12, 1157, 3571, 25, 405, 25, 405, 12340, 279, 67, 13, 14967, 27823, 7203, 6390, 12, 1065, 12, 1157, 2242, 25, 3270, 25, 3270, 48774]"
"🧠 ML Signal: Assertion to check current time after step, useful for learning expected state transitions","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 284, 2198, 1459, 640, 706, 2239, 11, 4465, 329, 4673, 2938, 1181, 27188]",0.5,635,ml_signal,85,"Assertion to check current time after step, useful for learning expected state transitions",,617,"    simulator = SingleAssetOrderExecutionSimple(order, DATA_DIR)","[220, 220, 220, 35375, 796, 14206, 45869, 18743, 23002, 1009, 26437, 7, 2875, 11, 42865, 62, 34720, 8]"
"🧠 ML Signal: Function name indicates a test case, useful for identifying test patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 1438, 9217, 257, 1332, 1339, 11, 4465, 329, 13720, 1332, 7572]",0.5,655,ml_signal,62,"Function name indicates a test case, useful for identifying test patterns",,635,"    assert (state.history_exec[""amount""] == 0.5).all()","[220, 220, 220, 6818, 357, 5219, 13, 23569, 62, 18558, 14692, 17287, 8973, 6624, 657, 13, 20, 737, 439, 3419]"
"🧠 ML Signal: Order creation pattern, useful for understanding object initialization","[8582, 100, 254, 10373, 26484, 25, 8284, 6282, 3912, 11, 4465, 329, 4547, 2134, 37588]",0.5,688,ml_signal,64,"Order creation pattern, useful for understanding object initialization",,655,"    assert abs(state.history_exec[""trade_price""].iloc[0] - 25.370001) < 1e-4","[220, 220, 220, 6818, 2352, 7, 5219, 13, 23569, 62, 18558, 14692, 25351, 62, 20888, 1, 4083, 346, 420, 58, 15, 60, 532, 1679, 13, 2718, 18005, 8, 1279, 352, 68, 12, 19]"
"🧠 ML Signal: Simulator initialization pattern, useful for understanding object initialization","[8582, 100, 254, 10373, 26484, 25, 13942, 37588, 3912, 11, 4465, 329, 4547, 2134, 37588]",0.5,710,ml_signal,66,"Simulator initialization pattern, useful for understanding object initialization",,688,"    assert state.history_exec[""position""].iloc[0] == 29.5","[220, 220, 220, 6818, 1181, 13, 23569, 62, 18558, 14692, 9150, 1, 4083, 346, 420, 58, 15, 60, 6624, 2808, 13, 20]"
"🧠 ML Signal: Loop pattern, useful for understanding iteration over a fixed range","[8582, 100, 254, 10373, 26484, 25, 26304, 3912, 11, 4465, 329, 4547, 24415, 625, 257, 5969, 2837]",0.5,710,ml_signal,68,"Loop pattern, useful for understanding iteration over a fixed range",,710,,[]
"🧠 ML Signal: Method call pattern, useful for understanding object behavior","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 11, 4465, 329, 4547, 2134, 4069]",0.5,732,ml_signal,70,"Method call pattern, useful for understanding object behavior",,710,"    assert state.history_steps[""amount""].iloc[0] == 15.0","[220, 220, 220, 6818, 1181, 13, 23569, 62, 20214, 14692, 17287, 1, 4083, 346, 420, 58, 15, 60, 6624, 1315, 13, 15]"
"🧠 ML Signal: Method call pattern, useful for understanding object behavior","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 11, 4465, 329, 4547, 2134, 4069]",0.5,755,ml_signal,72,"Method call pattern, useful for understanding object behavior",,732,"    assert state.history_steps[""ffr""].iloc[0] == 0.5","[220, 220, 220, 6818, 1181, 13, 23569, 62, 20214, 14692, 487, 81, 1, 4083, 346, 420, 58, 15, 60, 6624, 657, 13, 20]"
"🧠 ML Signal: Assertion pattern, useful for understanding expected outcomes","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 3912, 11, 4465, 329, 4547, 2938, 10906]",0.5,776,ml_signal,74,"Assertion pattern, useful for understanding expected outcomes",,755,"        state.history_steps[""pa""].iloc[0]","[220, 220, 220, 220, 220, 220, 220, 1181, 13, 23569, 62, 20214, 14692, 8957, 1, 4083, 346, 420, 58, 15, 60]"
"🧠 ML Signal: Assertion pattern, useful for understanding expected outcomes","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 3912, 11, 4465, 329, 4547, 2938, 10906]",0.5,780,ml_signal,76,"Assertion pattern, useful for understanding expected outcomes",,776,    ),"[220, 220, 220, 1267]"
"🧠 ML Signal: Assertion pattern, useful for understanding expected outcomes","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 3912, 11, 4465, 329, 4547, 2938, 10906]",0.5,791,ml_signal,78,"Assertion pattern, useful for understanding expected outcomes",,780,    assert state.position == 15.0,"[220, 220, 220, 6818, 1181, 13, 9150, 6624, 1315, 13, 15]"
"🧠 ML Signal: Assertion pattern, useful for understanding expected outcomes","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 3912, 11, 4465, 329, 4547, 2938, 10906]",0.5,791,ml_signal,80,"Assertion pattern, useful for understanding expected outcomes",,791,,[]
"🧠 ML Signal: Assertion pattern, useful for understanding expected outcomes","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 3912, 11, 4465, 329, 4547, 2938, 10906]",0.5,802,ml_signal,82,"Assertion pattern, useful for understanding expected outcomes",,791,def test_simulator_stop_twap():,"[4299, 1332, 62, 14323, 8927, 62, 11338, 62, 4246, 499, 33529]"
"🧠 ML Signal: Assertion pattern, useful for understanding expected outcomes","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 3912, 11, 4465, 329, 4547, 2938, 10906]",0.5,802,ml_signal,84,"Assertion pattern, useful for understanding expected outcomes",,802,,[]
"🧠 ML Signal: Assertion pattern, useful for understanding expected outcomes","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 3912, 11, 4465, 329, 4547, 2938, 10906]",0.5,812,ml_signal,86,"Assertion pattern, useful for understanding expected outcomes",,802,    for _ in range(13):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1485, 2599]"
"🧠 ML Signal: Assertion pattern, useful for understanding expected outcomes","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 3912, 11, 4465, 329, 4547, 2938, 10906]",0.5,812,ml_signal,88,"Assertion pattern, useful for understanding expected outcomes",,812,,[]
"🧠 ML Signal: Assertion pattern, useful for understanding expected outcomes","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 295, 3912, 11, 4465, 329, 4547, 2938, 10906]",0.5,826,ml_signal,90,"Assertion pattern, useful for understanding expected outcomes",,812,    assert len(state.history_exec) == 390,"[220, 220, 220, 6818, 18896, 7, 5219, 13, 23569, 62, 18558, 8, 6624, 33882]"
"🧠 ML Signal: Method call pattern, useful for understanding object behavior","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 11, 4465, 329, 4547, 2134, 4069]",0.5,864,ml_signal,92,"Method call pattern, useful for understanding object behavior",,826,"    assert state.history_steps[""position""].iloc[0] == 12 and state.history_steps[""position""].iloc[-1] == 0","[220, 220, 220, 6818, 1181, 13, 23569, 62, 20214, 14692, 9150, 1, 4083, 346, 420, 58, 15, 60, 6624, 1105, 290, 1181, 13, 23569, 62, 20214, 14692, 9150, 1, 4083, 346, 420, 58, 12, 16, 60, 6624, 657]"
"🧠 ML Signal: Function name indicates a test, useful for identifying test patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 1438, 9217, 257, 1332, 11, 4465, 329, 13720, 1332, 7572]",1.0,875,ml_signal,78,"Function name indicates a test, useful for identifying test patterns",,864,    assert state.position == 15.0,"[220, 220, 220, 6818, 1181, 13, 9150, 6624, 1315, 13, 15]"
"🧠 ML Signal: Usage of Order class with specific parameters, useful for learning object initialization patterns","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8284, 1398, 351, 2176, 10007, 11, 4465, 329, 4673, 2134, 37588, 7572]",0.5,875,ml_signal,80,"Usage of Order class with specific parameters, useful for learning object initialization patterns",,875,,[]
"🧠 ML Signal: Use of pytest.raises to test for exceptions, useful for learning testing patterns","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12972, 9288, 13, 430, 2696, 284, 1332, 329, 13269, 11, 4465, 329, 4673, 4856, 7572]",1.0,886,ml_signal,82,"Use of pytest.raises to test for exceptions, useful for learning testing patterns",,875,def test_simulator_stop_twap():,"[4299, 1332, 62, 14323, 8927, 62, 11338, 62, 4246, 499, 33529]"
"🧠 ML Signal: Instantiation of SingleAssetOrderExecutionSimple, useful for learning object creation patterns","[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 14206, 45869, 18743, 23002, 1009, 26437, 11, 4465, 329, 4673, 2134, 6282, 7572]",1.0,886,ml_signal,84,"Instantiation of SingleAssetOrderExecutionSimple, useful for learning object creation patterns",,886,,[]
"🧠 ML Signal: Method call with specific argument, useful for learning method usage patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 2176, 4578, 11, 4465, 329, 4673, 2446, 8748, 7572]",1.0,896,ml_signal,86,"Method call with specific argument, useful for learning method usage patterns",,886,    for _ in range(13):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1485, 2599]"
"🧠 ML Signal: Re-instantiation of the simulator, useful for learning object lifecycle patterns","[8582, 100, 254, 10373, 26484, 25, 797, 12, 8625, 415, 3920, 286, 262, 35375, 11, 4465, 329, 4673, 2134, 3868, 47510, 7572]",1.0,896,ml_signal,88,"Re-instantiation of the simulator, useful for learning object lifecycle patterns",,896,,[]
"🧠 ML Signal: Method call with specific argument, useful for learning method usage patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 2176, 4578, 11, 4465, 329, 4673, 2446, 8748, 7572]",1.0,910,ml_signal,90,"Method call with specific argument, useful for learning method usage patterns",,896,    assert len(state.history_exec) == 390,"[220, 220, 220, 6818, 18896, 7, 5219, 13, 23569, 62, 18558, 8, 6624, 33882]"
"🧠 ML Signal: Use of pytest.raises to test for exceptions, useful for learning testing patterns","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12972, 9288, 13, 430, 2696, 284, 1332, 329, 13269, 11, 4465, 329, 4673, 4856, 7572]",1.0,948,ml_signal,92,"Use of pytest.raises to test for exceptions, useful for learning testing patterns",,910,"    assert state.history_steps[""position""].iloc[0] == 12 and state.history_steps[""position""].iloc[-1] == 0","[220, 220, 220, 6818, 1181, 13, 23569, 62, 20214, 14692, 9150, 1, 4083, 346, 420, 58, 15, 60, 6624, 1105, 290, 1181, 13, 23569, 62, 20214, 14692, 9150, 1, 4083, 346, 420, 58, 12, 16, 60, 6624, 657]"
"🧠 ML Signal: Method call with specific argument, useful for learning method usage patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 2176, 4578, 11, 4465, 329, 4673, 2446, 8748, 7572]",1.0,969,ml_signal,94,"Method call with specific argument, useful for learning method usage patterns",,948,"    assert (state.metrics[""ffr""] - 1) < 1e-3","[220, 220, 220, 6818, 357, 5219, 13, 4164, 10466, 14692, 487, 81, 8973, 532, 352, 8, 1279, 352, 68, 12, 18]"
🧠 ML Signal: Usage of assert statements to validate expected outcomes,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6818, 6299, 284, 26571, 2938, 10906]",0.5,984,ml_signal,87,Usage of assert statements to validate expected outcomes,,969,        simulator.step(1.0),"[220, 220, 220, 220, 220, 220, 220, 35375, 13, 9662, 7, 16, 13, 15, 8]"
🧠 ML Signal: Instantiation of a simulator object with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 35375, 2134, 351, 2176, 10007]",0.5,998,ml_signal,90,Instantiation of a simulator object with specific parameters,,984,    assert len(state.history_exec) == 390,"[220, 220, 220, 6818, 18896, 7, 5219, 13, 23569, 62, 18558, 8, 6624, 33882]"
🧠 ML Signal: Validation of simulator's initial state,"[8582, 100, 254, 10373, 26484, 25, 3254, 24765, 286, 35375, 338, 4238, 1181]",0.5,1036,ml_signal,92,Validation of simulator's initial state,,998,"    assert state.history_steps[""position""].iloc[0] == 12 and state.history_steps[""position""].iloc[-1] == 0","[220, 220, 220, 6818, 1181, 13, 23569, 62, 20214, 14692, 9150, 1, 4083, 346, 420, 58, 15, 60, 6624, 1105, 290, 1181, 13, 23569, 62, 20214, 14692, 9150, 1, 4083, 346, 420, 58, 12, 16, 60, 6624, 657]"
🧠 ML Signal: Validation of simulator's initial time,"[8582, 100, 254, 10373, 26484, 25, 3254, 24765, 286, 35375, 338, 4238, 640]",0.5,1057,ml_signal,94,Validation of simulator's initial time,,1036,"    assert (state.metrics[""ffr""] - 1) < 1e-3","[220, 220, 220, 6818, 357, 5219, 13, 4164, 10466, 14692, 487, 81, 8973, 532, 352, 8, 1279, 352, 68, 12, 18]"
🧠 ML Signal: Simulator step function usage with a parameter,"[8582, 100, 254, 10373, 26484, 25, 13942, 2239, 2163, 8748, 351, 257, 11507]",1.0,1088,ml_signal,96,Simulator step function usage with a parameter,,1057,"    assert np.isclose(state.metrics[""market_volume""], state.backtest_data.get_volume().sum())","[220, 220, 220, 6818, 45941, 13, 271, 19836, 7, 5219, 13, 4164, 10466, 14692, 10728, 62, 29048, 33116, 1181, 13, 1891, 9288, 62, 7890, 13, 1136, 62, 29048, 22446, 16345, 28955]"
🧠 ML Signal: Validation of simulator's time after stepping,"[8582, 100, 254, 10373, 26484, 25, 3254, 24765, 286, 35375, 338, 640, 706, 17413]",0.5,1119,ml_signal,98,Validation of simulator's time after stepping,,1088,"    assert abs(state.metrics[""trade_price""] - state.metrics[""market_price""]) < 1e-4","[220, 220, 220, 6818, 2352, 7, 5219, 13, 4164, 10466, 14692, 25351, 62, 20888, 8973, 532, 1181, 13, 4164, 10466, 14692, 10728, 62, 20888, 8973, 8, 1279, 352, 68, 12, 19]"
🧠 ML Signal: Repeated simulator step function usage,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 35375, 2239, 2163, 8748]",1.0,1127,ml_signal,101,Repeated simulator step function usage,,1119,    assert simulator.done(),"[220, 220, 220, 6818, 35375, 13, 28060, 3419]"
🧠 ML Signal: Validation of simulator's execution history length,"[8582, 100, 254, 10373, 26484, 25, 3254, 24765, 286, 35375, 338, 9706, 2106, 4129]",0.5,1137,ml_signal,104,Validation of simulator's execution history length,,1127,def test_simulator_stop_early():,"[4299, 1332, 62, 14323, 8927, 62, 11338, 62, 11458, 33529]"
🧠 ML Signal: Validation of simulator's completion state,"[8582, 100, 254, 10373, 26484, 25, 3254, 24765, 286, 35375, 338, 11939, 1181]",0.5,1137,ml_signal,106,Validation of simulator's completion state,,1137,,[]
🧠 ML Signal: Validation of simulator's execution history amount,"[8582, 100, 254, 10373, 26484, 25, 3254, 24765, 286, 35375, 338, 9706, 2106, 2033]",0.5,1159,ml_signal,108,Validation of simulator's execution history amount,,1137,"        simulator = SingleAssetOrderExecutionSimple(order, DATA_DIR)","[220, 220, 220, 220, 220, 220, 220, 35375, 796, 14206, 45869, 18743, 23002, 1009, 26437, 7, 2875, 11, 42865, 62, 34720, 8]"
🧠 ML Signal: Validation of simulator's metrics,"[8582, 100, 254, 10373, 26484, 25, 3254, 24765, 286, 35375, 338, 20731]",0.5,1159,ml_signal,110,Validation of simulator's metrics,,1159,,[]
🧠 ML Signal: Function definition with a specific name pattern indicating a test function,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 1438, 3912, 12739, 257, 1332, 2163]",1.0,1167,ml_signal,101,Function definition with a specific name pattern indicating a test function,,1159,    assert simulator.done(),"[220, 220, 220, 6818, 35375, 13, 28060, 3419]"
🧠 ML Signal: Instantiation of an Order object with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 281, 8284, 2134, 351, 2176, 10007]",1.0,1167,ml_signal,103,Instantiation of an Order object with specific parameters,,1167,,[]
🧠 ML Signal: Instantiation of a simulator object with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 35375, 2134, 351, 2176, 10007]",1.0,1217,ml_signal,105,Instantiation of a simulator object with specific parameters,,1167,"    order = Order(""AAL"", 1.0, 1, pd.Timestamp(""2013-12-11 00:00:00""), pd.Timestamp(""2013-12-11 23:59:59""))","[220, 220, 220, 1502, 796, 8284, 7203, 32, 1847, 1600, 352, 13, 15, 11, 352, 11, 279, 67, 13, 14967, 27823, 7203, 6390, 12, 1065, 12, 1157, 3571, 25, 405, 25, 405, 12340, 279, 67, 13, 14967, 27823, 7203, 6390, 12, 1065, 12, 1157, 2242, 25, 3270, 25, 3270, 48774]"
✅ Best Practice: Use of assert statements for testing expected outcomes,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 6299, 329, 4856, 2938, 10906]",1.0,1230,best_practice,107,Use of assert statements for testing expected outcomes,,1217,    with pytest.raises(ValueError):,"[220, 220, 220, 351, 12972, 9288, 13, 430, 2696, 7, 11395, 12331, 2599]"
✅ Best Practice: Use of assert statements for testing expected outcomes,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 6299, 329, 4856, 2938, 10906]",1.0,1245,best_practice,109,Use of assert statements for testing expected outcomes,,1230,        simulator.step(2.0),"[220, 220, 220, 220, 220, 220, 220, 35375, 13, 9662, 7, 17, 13, 15, 8]"
"🧠 ML Signal: Usage of a specific interpreter with parameters, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 28846, 351, 10007, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1267,ml_signal,108,"Usage of a specific interpreter with parameters, indicating a pattern for model training",,1245,"        simulator = SingleAssetOrderExecutionSimple(order, DATA_DIR)","[220, 220, 220, 220, 220, 220, 220, 35375, 796, 14206, 45869, 18743, 23002, 1009, 26437, 7, 2875, 11, 42865, 62, 34720, 8]"
"🧠 ML Signal: Usage of a specific interpreter with parameters, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 28846, 351, 10007, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1267,ml_signal,110,"Usage of a specific interpreter with parameters, indicating a pattern for model training",,1267,,[]
"🧠 ML Signal: Usage of a specific interpreter with parameters, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 28846, 351, 10007, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1278,ml_signal,112,"Usage of a specific interpreter with parameters, indicating a pattern for model training",,1267,    simulator.step(1.0),"[220, 220, 220, 35375, 13, 9662, 7, 16, 13, 15, 8]"
"🧠 ML Signal: Usage of a specific interpreter, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 28846, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1293,ml_signal,114,"Usage of a specific interpreter, indicating a pattern for model training",,1278,    with pytest.raises(AssertionError):,"[220, 220, 220, 351, 12972, 9288, 13, 430, 2696, 7, 8021, 861, 295, 12331, 2599]"
✅ Best Practice: Using a dictionary for keyword arguments improves readability and maintainability,"[26486, 227, 6705, 19939, 25, 8554, 257, 22155, 329, 21179, 7159, 19575, 1100, 1799, 290, 5529, 1799]",1.0,1293,best_practice,116,Using a dictionary for keyword arguments improves readability and maintainability,,1293,,[]
"🧠 ML Signal: Setting up environment wrapper with specific status, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 25700, 510, 2858, 29908, 351, 2176, 3722, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1303,ml_signal,118,"Setting up environment wrapper with specific status, indicating a pattern for model training",,1293,def test_simulator_start_middle():,"[4299, 1332, 62, 14323, 8927, 62, 9688, 62, 27171, 33529]"
"🧠 ML Signal: Observing the state of the simulator, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 11086, 14344, 262, 1181, 286, 262, 35375, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1303,ml_signal,120,"Observing the state of the simulator, indicating a pattern for model training",,1303,,[]
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1321,best_practice,122,Using assertions to validate expected outcomes,,1303,    assert len(simulator.ticks_for_order) == 330,"[220, 220, 220, 6818, 18896, 7, 14323, 8927, 13, 83, 3378, 62, 1640, 62, 2875, 8, 6624, 25508]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1332,best_practice,124,Using assertions to validate expected outcomes,,1321,    simulator.step(2.0),"[220, 220, 220, 35375, 13, 9662, 7, 17, 13, 15, 8]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1332,best_practice,126,Using assertions to validate expected outcomes,,1332,,[]
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1347,best_practice,128,Using assertions to validate expected outcomes,,1332,        simulator.step(1.0),"[220, 220, 220, 220, 220, 220, 220, 35375, 13, 9662, 7, 16, 13, 15, 8]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1358,best_practice,130,Using assertions to validate expected outcomes,,1347,    simulator.step(2.0),"[220, 220, 220, 35375, 13, 9662, 7, 17, 13, 15, 8]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1366,best_practice,132,Using assertions to validate expected outcomes,,1358,    assert simulator.done(),"[220, 220, 220, 6818, 35375, 13, 28060, 3419]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1389,best_practice,134,Using assertions to validate expected outcomes,,1366,"    assert abs(simulator.metrics[""ffr""] - 1) < 1e-4","[220, 220, 220, 6818, 2352, 7, 14323, 8927, 13, 4164, 10466, 14692, 487, 81, 8973, 532, 352, 8, 1279, 352, 68, 12, 19]"
"🧠 ML Signal: Setting up environment wrapper with specific status, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 25700, 510, 2858, 29908, 351, 2176, 3722, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1389,ml_signal,136,"Setting up environment wrapper with specific status, indicating a pattern for model training",,1389,,[]
"🧠 ML Signal: Observing the state of the simulator, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 11086, 14344, 262, 1181, 286, 262, 35375, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1396,ml_signal,137,"Observing the state of the simulator, indicating a pattern for model training",,1389,def test_interpreter():,"[4299, 1332, 62, 3849, 3866, 353, 33529]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1414,best_practice,140,Using assertions to validate expected outcomes,,1396,"    simulator = SingleAssetOrderExecutionSimple(order, DATA_DIR)","[220, 220, 220, 35375, 796, 14206, 45869, 18743, 23002, 1009, 26437, 7, 2875, 11, 42865, 62, 34720, 8]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1441,best_practice,142,Using assertions to validate expected outcomes,,1414,"    assert simulator.cur_time == pd.Timestamp(""2013-12-11 10:15:00"")","[220, 220, 220, 6818, 35375, 13, 22019, 62, 2435, 6624, 279, 67, 13, 14967, 27823, 7203, 6390, 12, 1065, 12, 1157, 838, 25, 1314, 25, 405, 4943]"
"🧠 ML Signal: Stepping the simulator, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 2441, 2105, 262, 35375, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1449,ml_signal,144,"Stepping the simulator, indicating a pattern for model training",,1441,    # emulate a env status,"[220, 220, 220, 1303, 33836, 257, 17365, 3722]"
"🧠 ML Signal: Setting up environment wrapper with specific status, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 25700, 510, 2858, 29908, 351, 2176, 3722, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1465,ml_signal,145,"Setting up environment wrapper with specific status, indicating a pattern for model training",,1449,    class EmulateEnvWrapper(NamedTuple):,"[220, 220, 220, 1398, 2295, 5039, 4834, 85, 36918, 2848, 7, 45, 2434, 51, 29291, 2599]"
"🧠 ML Signal: Observing the state of the simulator, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 11086, 14344, 262, 1181, 286, 262, 35375, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1497,ml_signal,148,"Observing the state of the simulator, indicating a pattern for model training",,1465,"    interpreter = FullHistoryStateInterpreter(13, 390, 5, PickleProcessedDataProvider(FEATURE_DATA_DIR))","[220, 220, 220, 28846, 796, 6462, 18122, 9012, 9492, 3866, 353, 7, 1485, 11, 33882, 11, 642, 11, 12346, 293, 18709, 276, 6601, 29495, 7, 15112, 40086, 62, 26947, 62, 34720, 4008]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1514,best_practice,150,Using assertions to validate expected outcomes,,1497,    interpreter_action = CategoricalActionInterpreter(20),"[220, 220, 220, 28846, 62, 2673, 796, 327, 2397, 12409, 12502, 9492, 3866, 353, 7, 1238, 8]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1514,best_practice,152,Using assertions to validate expected outcomes,,1514,,[]
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1514,best_practice,154,Using assertions to validate expected outcomes,,1514,,[]
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1554,best_practice,156,Using assertions to validate expected outcomes,,1514,"    interpreter.env = EmulateEnvWrapper(status=EnvWrapperStatus(cur_step=0, done=False, **wrapper_status_kwargs))","[220, 220, 220, 28846, 13, 24330, 796, 2295, 5039, 4834, 85, 36918, 2848, 7, 13376, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 15, 11, 1760, 28, 25101, 11, 12429, 48553, 62, 13376, 62, 46265, 22046, 4008]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1568,best_practice,158,Using assertions to validate expected outcomes,,1554,    obs = interpreter(simulator.get_state()),"[220, 220, 220, 10201, 796, 28846, 7, 14323, 8927, 13, 1136, 62, 5219, 28955]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1580,best_practice,160,Using assertions to validate expected outcomes,,1568,"    assert obs[""cur_step""] == 0","[220, 220, 220, 6818, 10201, 14692, 22019, 62, 9662, 8973, 6624, 657]"
"🧠 ML Signal: Interpreting action from the simulator state, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 4225, 3866, 889, 2223, 422, 262, 35375, 1181, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1597,ml_signal,162,"Interpreting action from the simulator state, indicating a pattern for model training",,1580,"    assert obs[""position_history""][0] == 15.0","[220, 220, 220, 6818, 10201, 14692, 9150, 62, 23569, 1, 7131, 15, 60, 6624, 1315, 13, 15]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1618,best_practice,164,Using assertions to validate expected outcomes,,1597,"    assert np.sum(obs[""data_processed""][45:]) == 0","[220, 220, 220, 6818, 45941, 13, 16345, 7, 8158, 14692, 7890, 62, 14681, 276, 1, 7131, 2231, 25, 12962, 6624, 657]"
"🧠 ML Signal: Setting up environment wrapper with specific status, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 25700, 510, 2858, 29908, 351, 2176, 3722, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1618,ml_signal,166,"Setting up environment wrapper with specific status, indicating a pattern for model training",,1618,,[]
"🧠 ML Signal: Interpreting action from the simulator state, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 4225, 3866, 889, 2223, 422, 262, 35375, 1181, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1634,ml_signal,170,"Interpreting action from the simulator state, indicating a pattern for model training",,1618,    obs = interpreter_step(simulator.get_state()),"[220, 220, 220, 10201, 796, 28846, 62, 9662, 7, 14323, 8927, 13, 1136, 62, 5219, 28955]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1646,best_practice,172,Using assertions to validate expected outcomes,,1634,"    assert obs[""position""] == 15.0","[220, 220, 220, 6818, 10201, 14692, 9150, 8973, 6624, 1315, 13, 15]"
"🧠 ML Signal: Stepping the simulator multiple times, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 2441, 2105, 262, 35375, 3294, 1661, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1652,ml_signal,174,"Stepping the simulator multiple times, indicating a pattern for model training",,1646,    # second step,"[220, 220, 220, 1303, 1218, 2239]"
"🧠 ML Signal: Stepping the simulator, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 2441, 2105, 262, 35375, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1652,ml_signal,177,"Stepping the simulator, indicating a pattern for model training",,1652,,[]
"🧠 ML Signal: Setting up environment wrapper with specific status, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 25700, 510, 2858, 29908, 351, 2176, 3722, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1666,ml_signal,178,"Setting up environment wrapper with specific status, indicating a pattern for model training",,1652,    obs = interpreter(simulator.get_state()),"[220, 220, 220, 10201, 796, 28846, 7, 14323, 8927, 13, 1136, 62, 5219, 28955]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1695,best_practice,183,Using assertions to validate expected outcomes,,1666,"    assert all(np.sum(obs[""data_processed""][i]) != 0 for i in range(60))","[220, 220, 220, 6818, 477, 7, 37659, 13, 16345, 7, 8158, 14692, 7890, 62, 14681, 276, 1, 7131, 72, 12962, 14512, 657, 329, 1312, 287, 2837, 7, 1899, 4008]"
"🧠 ML Signal: Observing the state of the simulator, indicating a pattern for model training","[8582, 100, 254, 10373, 26484, 25, 11086, 14344, 262, 1181, 286, 262, 35375, 11, 12739, 257, 3912, 329, 2746, 3047]",0.5,1695,ml_signal,185,"Observing the state of the simulator, indicating a pattern for model training",,1695,,[]
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1713,best_practice,187,Using assertions to validate expected outcomes,,1695,"    action = interpreter_action(simulator.get_state(), 1)","[220, 220, 220, 2223, 796, 28846, 62, 2673, 7, 14323, 8927, 13, 1136, 62, 5219, 22784, 352, 8]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1722,best_practice,188,Using assertions to validate expected outcomes,,1713,    assert action == 15 / 20,"[220, 220, 220, 6818, 2223, 6624, 1315, 1220, 1160]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1731,best_practice,188,Using assertions to validate expected outcomes,,1722,    assert action == 15 / 20,"[220, 220, 220, 6818, 2223, 6624, 1315, 1220, 1160]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1740,best_practice,188,Using assertions to validate expected outcomes,,1731,    assert action == 15 / 20,"[220, 220, 220, 6818, 2223, 6624, 1315, 1220, 1160]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1755,best_practice,198,Using assertions to validate expected outcomes,,1740,        simulator.step(0.0),"[220, 220, 220, 220, 220, 220, 220, 35375, 13, 9662, 7, 15, 13, 15, 8]"
✅ Best Practice: Using assertions to validate expected outcomes,"[26486, 227, 6705, 19939, 25, 8554, 29965, 284, 26571, 2938, 10906]",0.5,1770,best_practice,198,Using assertions to validate expected outcomes,,1755,        simulator.step(0.0),"[220, 220, 220, 220, 220, 220, 220, 35375, 13, 9662, 7, 15, 13, 15, 8]"
🧠 ML Signal: Function definition with a specific name pattern indicating a test function,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 1438, 3912, 12739, 257, 1332, 2163]",1.0,1810,ml_signal,156,Function definition with a specific name pattern indicating a test function,,1770,"    interpreter.env = EmulateEnvWrapper(status=EnvWrapperStatus(cur_step=0, done=False, **wrapper_status_kwargs))","[220, 220, 220, 28846, 13, 24330, 796, 2295, 5039, 4834, 85, 36918, 2848, 7, 13376, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 15, 11, 1760, 28, 25101, 11, 12429, 48553, 62, 13376, 62, 46265, 22046, 4008]"
🧠 ML Signal: Instantiation of an Order object with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 281, 8284, 2134, 351, 2176, 10007]",1.0,1824,ml_signal,158,Instantiation of an Order object with specific parameters,,1810,    obs = interpreter(simulator.get_state()),"[220, 220, 220, 10201, 796, 28846, 7, 14323, 8927, 13, 1136, 62, 5219, 28955]"
🧠 ML Signal: Instantiation of a simulator object with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 35375, 2134, 351, 2176, 10007]",1.0,1836,ml_signal,160,Instantiation of a simulator object with specific parameters,,1824,"    assert obs[""cur_step""] == 0","[220, 220, 220, 6818, 10201, 14692, 22019, 62, 9662, 8973, 6624, 657]"
✅ Best Practice: Use of assert statement for testing expected outcomes,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 2643, 329, 4856, 2938, 10906]",1.0,1853,best_practice,162,Use of assert statement for testing expected outcomes,,1836,"    assert obs[""position_history""][0] == 15.0","[220, 220, 220, 6818, 10201, 14692, 9150, 62, 23569, 1, 7131, 15, 60, 6624, 1315, 13, 15]"
🧠 ML Signal: Usage of a specific action interpreter for categorical actions,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 2223, 28846, 329, 4253, 12409, 4028]",0.5,1882,ml_signal,163,Usage of a specific action interpreter for categorical actions,,1853,"    assert all(np.sum(obs[""data_processed""][i]) != 0 for i in range(45))","[220, 220, 220, 6818, 477, 7, 37659, 13, 16345, 7, 8158, 14692, 7890, 62, 14681, 276, 1, 7131, 72, 12962, 14512, 657, 329, 1312, 287, 2837, 7, 2231, 4008]"
🧠 ML Signal: Use of a dictionary to store initial state and history information,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 22155, 284, 3650, 4238, 1181, 290, 2106, 1321]",0.5,1903,ml_signal,165,Use of a dictionary to store initial state and history information,,1882,"    assert obs[""data_processed_prev""].shape == (390, 5)","[220, 220, 220, 6818, 10201, 14692, 7890, 62, 14681, 276, 62, 47050, 1, 4083, 43358, 6624, 357, 25964, 11, 642, 8]"
🧠 ML Signal: Initialization of a recurrent network with a specific observation space,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 257, 42465, 3127, 351, 257, 2176, 13432, 2272]",1.0,1912,ml_signal,167,Initialization of a recurrent network with a specific observation space,,1903,    # first step: second interpreter,"[220, 220, 220, 1303, 717, 2239, 25, 1218, 28846]"
🧠 ML Signal: Use of PPO algorithm with specific network and action space,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 350, 16402, 11862, 351, 2176, 3127, 290, 2223, 2272]",0.5,1912,ml_signal,169,Use of PPO algorithm with specific network and action space,,1912,,[]
🧠 ML Signal: Iterative environment emulation with step tracking,"[8582, 100, 254, 10373, 26484, 25, 40806, 876, 2858, 47065, 351, 2239, 9646]",0.5,1924,ml_signal,172,Iterative environment emulation with step tracking,,1912,"    assert obs[""position""] == 15.0","[220, 220, 220, 6818, 10201, 14692, 9150, 8973, 6624, 1315, 13, 15]"
🧠 ML Signal: Creation of a batch with observations for policy input,"[8582, 100, 254, 10373, 26484, 25, 21582, 286, 257, 15458, 351, 13050, 329, 2450, 5128]",0.5,1930,ml_signal,174,Creation of a batch with observations for policy input,,1924,    # second step,"[220, 220, 220, 1303, 1218, 2239]"
"⚠️ SAST Risk (Low): Potential risk if output[""act""] is not within expected range","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 5072, 14692, 529, 8973, 318, 407, 1626, 2938, 2837]",1.0,1944,sast_risk,178,"Potential risk if output[""act""] is not within expected range",Low,1930,    obs = interpreter(simulator.get_state()),"[220, 220, 220, 10201, 796, 28846, 7, 14323, 8927, 13, 1136, 62, 5219, 28955]"
⚠️ SAST Risk (Low): Assertions without exception handling could lead to unhandled exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 507, 1231, 6631, 9041, 714, 1085, 284, 555, 38788, 13269]",0.5,1973,sast_risk,183,Assertions without exception handling could lead to unhandled exceptions,Low,1944,"    assert all(np.sum(obs[""data_processed""][i]) != 0 for i in range(60))","[220, 220, 220, 6818, 477, 7, 37659, 13, 16345, 7, 8158, 14692, 7890, 62, 14681, 276, 1, 7131, 72, 12962, 14512, 657, 329, 1312, 287, 2837, 7, 1899, 4008]"
✅ Best Practice: Use of parameterized tests to cover multiple scenarios,"[26486, 227, 6705, 19939, 25, 5765, 286, 11507, 1143, 5254, 284, 3002, 3294, 13858]",0.5,1991,best_practice,187,Use of parameterized tests to cover multiple scenarios,,1973,"    action = interpreter_action(simulator.get_state(), 1)","[220, 220, 220, 2223, 796, 28846, 62, 2673, 7, 14323, 8927, 13, 1136, 62, 5219, 22784, 352, 8]"
🧠 ML Signal: Function definition for testing a trading strategy,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 329, 4856, 257, 7313, 4811]",0.5,2003,ml_signal,180,Function definition for testing a trading strategy,,1991,"    assert obs[""cur_step""] == 1","[220, 220, 220, 6818, 10201, 14692, 22019, 62, 9662, 8973, 6624, 352]"
🧠 ML Signal: Logging configuration setup,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8398, 9058]",0.5,2031,ml_signal,182,Logging configuration setup,,2003,"    assert obs[""position_history""][:2].tolist() == [15.0, 10.0]","[220, 220, 220, 6818, 10201, 14692, 9150, 62, 23569, 1, 7131, 25, 17, 4083, 83, 349, 396, 3419, 6624, 685, 1314, 13, 15, 11, 838, 13, 15, 60]"
🧠 ML Signal: Loading orders from a specific directory,"[8582, 100, 254, 10373, 26484, 25, 12320, 6266, 422, 257, 2176, 8619]",0.5,2052,ml_signal,184,Loading orders from a specific directory,,2031,"    assert np.sum(obs[""data_processed""][60:]) == 0","[220, 220, 220, 6818, 45941, 13, 16345, 7, 8158, 14692, 7890, 62, 14681, 276, 1, 7131, 1899, 25, 12962, 6624, 657]"
⚠️ SAST Risk (Low): Assertion without error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 1231, 4049, 3275]",0.5,2060,sast_risk,186,Assertion without error message,Low,2052,    # second step: action,"[220, 220, 220, 1303, 1218, 2239, 25, 2223]"
🧠 ML Signal: State interpreter initialization with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 1812, 28846, 37588, 351, 2176, 10007]",0.5,2069,ml_signal,188,State interpreter initialization with specific parameters,,2060,    assert action == 15 / 20,"[220, 220, 220, 6818, 2223, 6624, 1315, 1220, 1160]"
🧠 ML Signal: Action interpreter initialization,"[8582, 100, 254, 10373, 26484, 25, 7561, 28846, 37588]",0.5,2078,ml_signal,188,Action interpreter initialization,,2069,    assert action == 15 / 20,"[220, 220, 220, 6818, 2223, 6624, 1315, 1220, 1160]"
🧠 ML Signal: Policy initialization with state and action spaces,"[8582, 100, 254, 10373, 26484, 25, 7820, 37588, 351, 1181, 290, 2223, 9029]",0.5,2087,ml_signal,188,Policy initialization with state and action spaces,,2078,    assert action == 15 / 20,"[220, 220, 220, 6818, 2223, 6624, 1315, 1220, 1160]"
🧠 ML Signal: CSV writer setup for output,"[8582, 100, 254, 10373, 26484, 25, 44189, 6260, 9058, 329, 5072]",0.5,2102,ml_signal,198,CSV writer setup for output,,2087,        simulator.step(0.0),"[220, 220, 220, 220, 220, 220, 220, 35375, 13, 9662, 7, 15, 13, 15, 8]"
🧠 ML Signal: Backtesting function call with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 5157, 33407, 2163, 869, 351, 2176, 10007]",0.5,2117,ml_signal,198,Backtesting function call with specific parameters,,2102,        simulator.step(0.0),"[220, 220, 220, 220, 220, 220, 220, 35375, 13, 9662, 7, 15, 13, 15, 8]"
🧠 ML Signal: Reading metrics from CSV output,"[8582, 100, 254, 10373, 26484, 25, 11725, 20731, 422, 44189, 5072]",0.5,2117,ml_signal,207,Reading metrics from CSV output,,2117,,[]
⚠️ SAST Risk (Low): Assertion without error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 1231, 4049, 3275]",0.5,2129,sast_risk,209,Assertion without error message,Low,2117,"    assert obs[""cur_tick""] == 375","[220, 220, 220, 6818, 10201, 14692, 22019, 62, 42298, 8973, 6624, 29414]"
⚠️ SAST Risk (Low): Assertion without error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 1231, 4049, 3275]",0.5,2141,sast_risk,211,Assertion without error message,Low,2129,"    assert obs[""position""] == 0.0","[220, 220, 220, 6818, 10201, 14692, 9150, 8973, 6624, 657, 13, 15]"
⚠️ SAST Risk (Low): Assertion without error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 1231, 4049, 3275]",0.5,2170,sast_risk,213,Assertion without error message,Low,2141,"    assert all(np.sum(obs[""data_processed""][i]) != 0 for i in range(375))","[220, 220, 220, 6818, 477, 7, 37659, 13, 16345, 7, 8158, 14692, 7890, 62, 14681, 276, 1, 7131, 72, 12962, 14512, 657, 329, 1312, 287, 2837, 7, 22318, 4008]"
⚠️ SAST Risk (Low): Assertion without error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 861, 295, 1231, 4049, 3275]",0.5,2199,sast_risk,213,Assertion without error message,Low,2170,"    assert all(np.sum(obs[""data_processed""][i]) != 0 for i in range(375))","[220, 220, 220, 6818, 477, 7, 37659, 13, 16345, 7, 8158, 14692, 7890, 62, 14681, 276, 1, 7131, 72, 12962, 14512, 657, 329, 1312, 287, 2837, 7, 22318, 4008]"
🧠 ML Signal: Function definition for testing a specific strategy,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 329, 4856, 257, 2176, 4811]",1.0,2235,ml_signal,203,Function definition for testing a specific strategy,,2199,"        status=EnvWrapperStatus(cur_step=12, done=simulator.done(), **wrapper_status_kwargs)","[220, 220, 220, 220, 220, 220, 220, 3722, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 1065, 11, 1760, 28, 14323, 8927, 13, 28060, 22784, 12429, 48553, 62, 13376, 62, 46265, 22046, 8]"
🧠 ML Signal: Setting logging configuration,"[8582, 100, 254, 10373, 26484, 25, 25700, 18931, 8398]",1.0,2235,ml_signal,205,Setting logging configuration,,2235,,[]
⚠️ SAST Risk (Low): Loading orders from a potentially untrusted source,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12320, 6266, 422, 257, 6196, 1418, 81, 8459, 2723]",0.5,2235,sast_risk,207,Loading orders from a potentially untrusted source,Low,2235,,[]
🧠 ML Signal: Asserting the number of orders loaded,"[8582, 100, 254, 10373, 26484, 25, 2195, 861, 278, 262, 1271, 286, 6266, 9639]",1.0,2247,ml_signal,209,Asserting the number of orders loaded,,2235,"    assert obs[""cur_tick""] == 375","[220, 220, 220, 6818, 10201, 14692, 22019, 62, 42298, 8973, 6624, 29414]"
🧠 ML Signal: Initializing state interpreter with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 20768, 2890, 1181, 28846, 351, 2176, 10007]",1.0,2259,ml_signal,211,Initializing state interpreter with specific parameters,,2247,"    assert obs[""position""] == 0.0","[220, 220, 220, 6818, 10201, 14692, 9150, 8973, 6624, 657, 13, 15]"
🧠 ML Signal: Initializing action interpreter with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 20768, 2890, 2223, 28846, 351, 2176, 10007]",1.0,2288,ml_signal,213,Initializing action interpreter with specific parameters,,2259,"    assert all(np.sum(obs[""data_processed""][i]) != 0 for i in range(375))","[220, 220, 220, 6818, 477, 7, 37659, 13, 16345, 7, 8158, 14692, 7890, 62, 14681, 276, 1, 7131, 72, 12962, 14512, 657, 329, 1312, 287, 2837, 7, 22318, 4008]"
🧠 ML Signal: Creating a recurrent network with a specific observation space,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 42465, 3127, 351, 257, 2176, 13432, 2272]",0.5,2317,ml_signal,213,Creating a recurrent network with a specific observation space,,2288,"    assert all(np.sum(obs[""data_processed""][i]) != 0 for i in range(375))","[220, 220, 220, 6818, 477, 7, 37659, 13, 16345, 7, 8158, 14692, 7890, 62, 14681, 276, 1, 7131, 72, 12962, 14512, 657, 329, 1312, 287, 2837, 7, 22318, 4008]"
🧠 ML Signal: Initializing PPO policy with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 20768, 2890, 350, 16402, 2450, 351, 2176, 10007]",0.5,2346,ml_signal,213,Initializing PPO policy with specific parameters,,2317,"    assert all(np.sum(obs[""data_processed""][i]) != 0 for i in range(375))","[220, 220, 220, 6818, 477, 7, 37659, 13, 16345, 7, 8158, 14692, 7890, 62, 14681, 276, 1, 7131, 72, 12962, 14512, 657, 329, 1312, 287, 2837, 7, 22318, 4008]"
"⚠️ SAST Risk (Medium): Loading model state from a file, potential for model tampering","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 12320, 2746, 1181, 422, 257, 2393, 11, 2785, 329, 2746, 42471]",0.5,2364,sast_risk,222,"Loading model state from a file, potential for model tampering",Medium,2346,    assert len(simulator.ticks_for_order) == 390,"[220, 220, 220, 6818, 18896, 7, 14323, 8927, 13, 83, 3378, 62, 1640, 62, 2875, 8, 6624, 33882]"
✅ Best Practice: Using a CSV writer to log output,"[26486, 227, 6705, 19939, 25, 8554, 257, 44189, 6260, 284, 2604, 5072]",0.5,2382,best_practice,222,Using a CSV writer to log output,,2364,    assert len(simulator.ticks_for_order) == 390,"[220, 220, 220, 6818, 18896, 7, 14323, 8927, 13, 83, 3378, 62, 1640, 62, 2875, 8, 6624, 33882]"
🧠 ML Signal: Running a backtest with specific parameters and concurrency,"[8582, 100, 254, 10373, 26484, 25, 18162, 257, 736, 9288, 351, 2176, 10007, 290, 1673, 13382]",1.0,2382,ml_signal,223,Running a backtest with specific parameters and concurrency,,2382,,[]
"⚠️ SAST Risk (Low): Reading metrics from a file, potential for data integrity issues","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11725, 20731, 422, 257, 2393, 11, 2785, 329, 1366, 11540, 2428]",0.5,2414,sast_risk,233,"Reading metrics from a file, potential for data integrity issues",Low,2382,"    policy = PPO(network, interpreter.observation_space, action_interp.action_space, 1e-3)","[220, 220, 220, 2450, 796, 350, 16402, 7, 27349, 11, 28846, 13, 672, 3168, 341, 62, 13200, 11, 2223, 62, 3849, 79, 13, 2673, 62, 13200, 11, 352, 68, 12, 18, 8]"
🧠 ML Signal: Asserting the length of metrics matches the number of orders,"[8582, 100, 254, 10373, 26484, 25, 2195, 861, 278, 262, 4129, 286, 20731, 7466, 262, 1271, 286, 6266]",1.0,2424,ml_signal,235,Asserting the length of metrics matches the number of orders,,2414,    for i in range(14):,"[220, 220, 220, 329, 1312, 287, 2837, 7, 1415, 2599]"
🧠 ML Signal: Asserting specific statistical properties of the metrics,"[8582, 100, 254, 10373, 26484, 25, 2195, 861, 278, 2176, 13905, 6608, 286, 262, 20731]",0.5,2468,ml_signal,236,Asserting specific statistical properties of the metrics,,2424,"        interpreter.env = EmulateEnvWrapper(status=EnvWrapperStatus(cur_step=i, done=False, **wrapper_status_kwargs))","[220, 220, 220, 220, 220, 220, 220, 28846, 13, 24330, 796, 2295, 5039, 4834, 85, 36918, 2848, 7, 13376, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 72, 11, 1760, 28, 25101, 11, 12429, 48553, 62, 13376, 62, 46265, 22046, 4008]"
🧠 ML Signal: Function definition for testing a PPO training process,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 329, 4856, 257, 350, 16402, 3047, 1429]",0.5,2486,ml_signal,228,Function definition for testing a PPO training process,,2468,    action_interp = CategoricalActionInterpreter(13),"[220, 220, 220, 2223, 62, 3849, 79, 796, 327, 2397, 12409, 12502, 9492, 3866, 353, 7, 1485, 8]"
"🧠 ML Signal: Setting logging configuration, indicating logging is important for this process","[8582, 100, 254, 10373, 26484, 25, 25700, 18931, 8398, 11, 12739, 18931, 318, 1593, 329, 428, 1429]",0.5,2519,ml_signal,230,"Setting logging configuration, indicating logging is important for this process",,2486,"    wrapper_status_kwargs = dict(initial_state=order, obs_history=[], action_history=[], reward_history=[])","[220, 220, 220, 29908, 62, 13376, 62, 46265, 22046, 796, 8633, 7, 36733, 62, 5219, 28, 2875, 11, 10201, 62, 23569, 41888, 4357, 2223, 62, 23569, 41888, 4357, 6721, 62, 23569, 41888, 12962]"
⚠️ SAST Risk (Low): Potential deserialization of untrusted data with pickle,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 748, 48499, 1634, 286, 1418, 81, 8459, 1366, 351, 2298, 293]",0.5,2537,sast_risk,232,Potential deserialization of untrusted data with pickle,Low,2519,    network = Recurrent(interpreter.observation_space),"[220, 220, 220, 3127, 796, 3311, 6657, 7, 3849, 3866, 353, 13, 672, 3168, 341, 62, 13200, 8]"
"🧠 ML Signal: Asserting the number of orders, indicating expected data size","[8582, 100, 254, 10373, 26484, 25, 2195, 861, 278, 262, 1271, 286, 6266, 11, 12739, 2938, 1366, 2546]",0.5,2537,ml_signal,234,"Asserting the number of orders, indicating expected data size",,2537,,[]
🧠 ML Signal: Initialization of state interpreter with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 1181, 28846, 351, 2176, 10007]",0.5,2581,ml_signal,236,Initialization of state interpreter with specific parameters,,2537,"        interpreter.env = EmulateEnvWrapper(status=EnvWrapperStatus(cur_step=i, done=False, **wrapper_status_kwargs))","[220, 220, 220, 220, 220, 220, 220, 28846, 13, 24330, 796, 2295, 5039, 4834, 85, 36918, 2848, 7, 13376, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 72, 11, 1760, 28, 25101, 11, 12429, 48553, 62, 13376, 62, 46265, 22046, 4008]"
🧠 ML Signal: Initialization of action interpreter with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 2223, 28846, 351, 2176, 10007]",0.5,2625,ml_signal,236,Initialization of action interpreter with specific parameters,,2581,"        interpreter.env = EmulateEnvWrapper(status=EnvWrapperStatus(cur_step=i, done=False, **wrapper_status_kwargs))","[220, 220, 220, 220, 220, 220, 220, 28846, 13, 24330, 796, 2295, 5039, 4834, 85, 36918, 2848, 7, 13376, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 72, 11, 1760, 28, 25101, 11, 12429, 48553, 62, 13376, 62, 46265, 22046, 4008]"
🧠 ML Signal: Network initialization with observation space,"[8582, 100, 254, 10373, 26484, 25, 7311, 37588, 351, 13432, 2272]",0.5,2669,ml_signal,236,Network initialization with observation space,,2625,"        interpreter.env = EmulateEnvWrapper(status=EnvWrapperStatus(cur_step=i, done=False, **wrapper_status_kwargs))","[220, 220, 220, 220, 220, 220, 220, 28846, 13, 24330, 796, 2295, 5039, 4834, 85, 36918, 2848, 7, 13376, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 72, 11, 1760, 28, 25101, 11, 12429, 48553, 62, 13376, 62, 46265, 22046, 4008]"
🧠 ML Signal: PPO policy initialization with network and spaces,"[8582, 100, 254, 10373, 26484, 25, 350, 16402, 2450, 37588, 351, 3127, 290, 9029]",0.5,2713,ml_signal,236,PPO policy initialization with network and spaces,,2669,"        interpreter.env = EmulateEnvWrapper(status=EnvWrapperStatus(cur_step=i, done=False, **wrapper_status_kwargs))","[220, 220, 220, 220, 220, 220, 220, 28846, 13, 24330, 796, 2295, 5039, 4834, 85, 36918, 2848, 7, 13376, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 72, 11, 1760, 28, 25101, 11, 12429, 48553, 62, 13376, 62, 46265, 22046, 4008]"
🧠 ML Signal: Training function call with multiple parameters and configurations,"[8582, 100, 254, 10373, 26484, 25, 13614, 2163, 869, 351, 3294, 10007, 290, 25412]",0.5,2757,ml_signal,236,Training function call with multiple parameters and configurations,,2713,"        interpreter.env = EmulateEnvWrapper(status=EnvWrapperStatus(cur_step=i, done=False, **wrapper_status_kwargs))","[220, 220, 220, 220, 220, 220, 220, 28846, 13, 24330, 796, 2295, 5039, 4834, 85, 36918, 2848, 7, 13376, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 72, 11, 1760, 28, 25101, 11, 12429, 48553, 62, 13376, 62, 46265, 22046, 4008]"
🧠 ML Signal: Partial function application for environment setup,"[8582, 100, 254, 10373, 26484, 25, 43689, 2163, 3586, 329, 2858, 9058]",0.5,2801,ml_signal,236,Partial function application for environment setup,,2757,"        interpreter.env = EmulateEnvWrapper(status=EnvWrapperStatus(cur_step=i, done=False, **wrapper_status_kwargs))","[220, 220, 220, 220, 220, 220, 220, 28846, 13, 24330, 796, 2295, 5039, 4834, 85, 36918, 2848, 7, 13376, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 72, 11, 1760, 28, 25101, 11, 12429, 48553, 62, 13376, 62, 46265, 22046, 4008]"
🧠 ML Signal: Reward function specification,"[8582, 100, 254, 10373, 26484, 25, 32307, 2163, 20855]",0.5,2845,ml_signal,236,Reward function specification,,2801,"        interpreter.env = EmulateEnvWrapper(status=EnvWrapperStatus(cur_step=i, done=False, **wrapper_status_kwargs))","[220, 220, 220, 220, 220, 220, 220, 28846, 13, 24330, 796, 2295, 5039, 4834, 85, 36918, 2848, 7, 13376, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 72, 11, 1760, 28, 25101, 11, 12429, 48553, 62, 13376, 62, 46265, 22046, 4008]"
🧠 ML Signal: Vessel configuration for training episodes and updates,"[8582, 100, 254, 10373, 26484, 25, 44734, 8398, 329, 3047, 8640, 290, 5992]",0.5,2889,ml_signal,236,Vessel configuration for training episodes and updates,,2845,"        interpreter.env = EmulateEnvWrapper(status=EnvWrapperStatus(cur_step=i, done=False, **wrapper_status_kwargs))","[220, 220, 220, 220, 220, 220, 220, 28846, 13, 24330, 796, 2295, 5039, 4834, 85, 36918, 2848, 7, 13376, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 72, 11, 1760, 28, 25101, 11, 12429, 48553, 62, 13376, 62, 46265, 22046, 4008]"
🧠 ML Signal: Trainer configuration for iterations and logging,"[8582, 100, 254, 10373, 26484, 25, 31924, 8398, 329, 34820, 290, 18931]",0.5,2933,ml_signal,236,Trainer configuration for iterations and logging,,2889,"        interpreter.env = EmulateEnvWrapper(status=EnvWrapperStatus(cur_step=i, done=False, **wrapper_status_kwargs))","[220, 220, 220, 220, 220, 220, 220, 28846, 13, 24330, 796, 2295, 5039, 4834, 85, 36918, 2848, 7, 13376, 28, 4834, 85, 36918, 2848, 19580, 7, 22019, 62, 9662, 28, 72, 11, 1760, 28, 25101, 11, 12429, 48553, 62, 13376, 62, 46265, 22046, 4008]"

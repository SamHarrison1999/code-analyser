annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
🧠 ML Signal: Modifying sys.path to include specific directories for module imports,"[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 25064, 13, 6978, 284, 2291, 2176, 29196, 329, 8265, 17944]",1.0,6,ml_signal,10,Modifying sys.path to include specific directories for module imports,,0,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
🧠 ML Signal: Modifying sys.path to include specific directories for module imports,"[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 25064, 13, 6978, 284, 2291, 2176, 29196, 329, 8265, 17944]",1.0,13,ml_signal,13,Modifying sys.path to include specific directories for module imports,,6,from qlib.data import D,"[6738, 10662, 8019, 13, 7890, 1330, 360]"
✅ Best Practice: Setting display options for pandas to improve readability of DataFrame outputs,"[26486, 227, 6705, 19939, 25, 25700, 3359, 3689, 329, 19798, 292, 284, 2987, 1100, 1799, 286, 6060, 19778, 23862]",1.0,40,best_practice,16,Setting display options for pandas to improve readability of DataFrame outputs,,13,"sys.path.append(str(Path(__file__).resolve().parent.parent.joinpath(""scripts"")))","[17597, 13, 6978, 13, 33295, 7, 2536, 7, 15235, 7, 834, 7753, 834, 737, 411, 6442, 22446, 8000, 13, 8000, 13, 22179, 6978, 7203, 46521, 1, 22305]"
✅ Best Practice: Setting display options for pandas to improve readability of DataFrame outputs,"[26486, 227, 6705, 19939, 25, 25700, 3359, 3689, 329, 19798, 292, 284, 2987, 1100, 1799, 286, 6060, 19778, 23862]",1.0,40,best_practice,18,Setting display options for pandas to improve readability of DataFrame outputs,,40,,[]
🧠 ML Signal: Using Path to manage file system paths,"[8582, 100, 254, 10373, 26484, 25, 8554, 10644, 284, 6687, 2393, 1080, 13532]",0.5,44,ml_signal,20,Using Path to manage file system paths,,40,from collector import Run,"[6738, 22967, 1330, 5660]"
🧠 ML Signal: Using Path to manage file system paths,"[8582, 100, 254, 10373, 26484, 25, 8554, 10644, 284, 6687, 2393, 1080, 13532]",0.5,44,ml_signal,21,Using Path to manage file system paths,,44,,[]
✅ Best Practice: Using mkdir with exist_ok=True to avoid errors if the directory already exists,"[26486, 227, 6705, 19939, 25, 8554, 33480, 15908, 351, 2152, 62, 482, 28, 17821, 284, 3368, 8563, 611, 262, 8619, 1541, 7160]",1.0,59,best_practice,24,Using mkdir with exist_ok=True to avoid errors if the directory already exists,,44,"pd.set_option(""display.max_columns"", None)","[30094, 13, 2617, 62, 18076, 7203, 13812, 13, 9806, 62, 28665, 82, 1600, 6045, 8]"
🧠 ML Signal: Using Path to manage file system paths,"[8582, 100, 254, 10373, 26484, 25, 8554, 10644, 284, 6687, 2393, 1080, 13532]",0.5,80,ml_signal,26,Using Path to manage file system paths,,59,"DATA_DIR = Path(__file__).parent.joinpath(""test_pit_data"")","[26947, 62, 34720, 796, 10644, 7, 834, 7753, 834, 737, 8000, 13, 22179, 6978, 7203, 9288, 62, 15544, 62, 7890, 4943]"
✅ Best Practice: Using mkdir with exist_ok=True to avoid errors if the directory already exists,"[26486, 227, 6705, 19939, 25, 8554, 33480, 15908, 351, 2152, 62, 482, 28, 17821, 284, 3368, 8563, 611, 262, 8619, 1541, 7160]",1.0,97,best_practice,28,Using mkdir with exist_ok=True to avoid errors if the directory already exists,,80,"SOURCE_DIR.mkdir(exist_ok=True, parents=True)","[47690, 62, 34720, 13, 28015, 15908, 7, 38476, 62, 482, 28, 17821, 11, 3397, 28, 17821, 8]"
✅ Best Practice: Use of @classmethod for setup that applies to all test methods,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 329, 9058, 326, 8991, 284, 477, 1332, 5050]",0.5,97,best_practice,21,Use of @classmethod for setup that applies to all test methods,,97,,[]
⚠️ SAST Risk (High): Deleting directories without validation can lead to data loss or security issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 42226, 889, 29196, 1231, 21201, 460, 1085, 284, 1366, 2994, 393, 2324, 2428, 13]",1.0,112,sast_risk,24,Deleting directories without validation can lead to data loss or security issues.,High,97,"pd.set_option(""display.max_columns"", None)","[30094, 13, 2617, 62, 18076, 7203, 13812, 13, 9806, 62, 28665, 82, 1600, 6045, 8]"
✅ Best Practice: Convert path to string after resolving to ensure the path is absolute and in a consistent format.,"[26486, 227, 6705, 19939, 25, 38240, 3108, 284, 4731, 706, 31038, 284, 4155, 262, 3108, 318, 4112, 290, 287, 257, 6414, 5794, 13]",0.5,129,best_practice,27,Convert path to string after resolving to ensure the path is absolute and in a consistent format.,,112,"SOURCE_DIR = DATA_DIR.joinpath(""stock_data/source"")","[47690, 62, 34720, 796, 42865, 62, 34720, 13, 22179, 6978, 7203, 13578, 62, 7890, 14, 10459, 4943]"
✅ Best Practice: Convert path to string after resolving to ensure the path is absolute and in a consistent format.,"[26486, 227, 6705, 19939, 25, 38240, 3108, 284, 4731, 706, 31038, 284, 4155, 262, 3108, 318, 4112, 290, 287, 257, 6414, 5794, 13]",0.5,146,best_practice,29,Convert path to string after resolving to ensure the path is absolute and in a consistent format.,,129,"QLIB_DIR = DATA_DIR.joinpath(""qlib_data"")","[9711, 9865, 62, 34720, 796, 42865, 62, 34720, 13, 22179, 6978, 7203, 80, 8019, 62, 7890, 4943]"
✅ Best Practice: Convert path to string after resolving to ensure the path is absolute and in a consistent format.,"[26486, 227, 6705, 19939, 25, 38240, 3108, 284, 4731, 706, 31038, 284, 4155, 262, 3108, 318, 4112, 290, 287, 257, 6414, 5794, 13]",0.5,164,best_practice,30,Convert path to string after resolving to ensure the path is absolute and in a consistent format.,,146,"QLIB_DIR.mkdir(exist_ok=True, parents=True)","[9711, 9865, 62, 34720, 13, 28015, 15908, 7, 38476, 62, 482, 28, 17821, 11, 3397, 28, 17821, 8]"
"🧠 ML Signal: Usage of data fetching with specific parameters, indicating a pattern for data preparation.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1366, 21207, 278, 351, 2176, 10007, 11, 12739, 257, 3912, 329, 1366, 11824, 13]",0.5,176,ml_signal,33,"Usage of data fetching with specific parameters, indicating a pattern for data preparation.",,164,class TestPIT(unittest.TestCase):,"[4871, 6208, 47, 2043, 7, 403, 715, 395, 13, 14402, 20448, 2599]"
"🧠 ML Signal: Usage of data fetching with specific parameters, indicating a pattern for data preparation.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1366, 21207, 278, 351, 2176, 10007, 11, 12739, 257, 3912, 329, 1366, 11824, 13]",0.5,190,ml_signal,39,"Usage of data fetching with specific parameters, indicating a pattern for data preparation.",,176,    def setUpClass(cls) -> None:,"[220, 220, 220, 825, 900, 4933, 9487, 7, 565, 82, 8, 4613, 6045, 25]"
"🧠 ML Signal: Normalizing data with specific parameters, indicating a pattern for data processing.","[8582, 100, 254, 10373, 26484, 25, 14435, 2890, 1366, 351, 2176, 10007, 11, 12739, 257, 3912, 329, 1366, 7587, 13]",0.5,204,ml_signal,39,"Normalizing data with specific parameters, indicating a pattern for data processing.",,190,    def setUpClass(cls) -> None:,"[220, 220, 220, 825, 900, 4933, 9487, 7, 565, 82, 8, 4613, 6045, 25]"
"🧠 ML Signal: Dumping data with specific parameters, indicating a pattern for data output.","[8582, 100, 254, 10373, 26484, 25, 360, 25218, 1366, 351, 2176, 10007, 11, 12739, 257, 3912, 329, 1366, 5072, 13]",0.5,212,ml_signal,45,"Dumping data with specific parameters, indicating a pattern for data output.",,204,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
✅ Best Practice: Method name 'setUp' follows the naming convention for setup methods in test cases,"[26486, 227, 6705, 19939, 25, 11789, 1438, 705, 2617, 4933, 6, 5679, 262, 19264, 9831, 329, 9058, 5050, 287, 1332, 2663]",0.5,227,best_practice,43,Method name 'setUp' follows the naming convention for setup methods in test cases,,212,        GetData().qlib_data(,"[220, 220, 220, 220, 220, 220, 220, 3497, 6601, 22446, 80, 8019, 62, 7890, 7]"
🧠 ML Signal: Usage of pathlib for path operations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3108, 8019, 329, 3108, 4560]",0.5,235,ml_signal,45,Usage of pathlib for path operations,,227,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
🧠 ML Signal: Initialization of a library with a specific provider URI,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 257, 5888, 351, 257, 2176, 10131, 43975]",0.5,235,ml_signal,47,Initialization of a library with a specific provider URI,,235,,[]
"✅ Best Practice: Method name 'to_str' suggests conversion to string, which aligns with the method's functionality.","[26486, 227, 6705, 19939, 25, 11789, 1438, 705, 1462, 62, 2536, 6, 5644, 11315, 284, 4731, 11, 543, 10548, 82, 351, 262, 2446, 338, 11244, 13]",1.0,281,best_practice,46,"Method name 'to_str' suggests conversion to string, which aligns with the method's functionality.",,235,"        GetData().qlib_data(name=""qlib_data"", target_dir=pit_dir, region=""pit"", delete_old=False, exists_skip=True)","[220, 220, 220, 220, 220, 220, 220, 3497, 6601, 22446, 80, 8019, 62, 7890, 7, 3672, 2625, 80, 8019, 62, 7890, 1600, 2496, 62, 15908, 28, 15544, 62, 15908, 11, 3814, 2625, 15544, 1600, 12233, 62, 727, 28, 25101, 11, 7160, 62, 48267, 28, 17821, 8]"
🧠 ML Signal: Usage of str() indicates conversion of an object to a string.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 965, 3419, 9217, 11315, 286, 281, 2134, 284, 257, 4731, 13]",0.5,321,ml_signal,48,Usage of str() indicates conversion of an object to a string.,,281,"        # NOTE: This code does the same thing as line 43, but since baostock is not stable in downloading data, we have chosen to download offline data.","[220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 770, 2438, 857, 262, 976, 1517, 355, 1627, 5946, 11, 475, 1201, 26605, 455, 735, 318, 407, 8245, 287, 22023, 1366, 11, 356, 423, 7147, 284, 4321, 18043, 1366, 13]"
✅ Best Practice: Using str() ensures that the object is converted to a string representation.,"[26486, 227, 6705, 19939, 25, 8554, 965, 3419, 19047, 326, 262, 2134, 318, 11513, 284, 257, 4731, 10552, 13]",1.0,334,best_practice,49,Using str() ensures that the object is converted to a string representation.,,321,        # bs.login(),"[220, 220, 220, 220, 220, 220, 220, 1303, 275, 82, 13, 38235, 3419]"
"✅ Best Practice: """".join() is an efficient way to remove all whitespace from a string.","[26486, 227, 6705, 19939, 25, 366, 1911, 22179, 3419, 318, 281, 6942, 835, 284, 4781, 477, 13216, 10223, 422, 257, 4731, 13]",1.0,344,best_practice,50,""""".join() is an efficient way to remove all whitespace from a string.",,334,        # Run(,"[220, 220, 220, 220, 220, 220, 220, 1303, 5660, 7]"
✅ Best Practice: Method name should be more descriptive to indicate its purpose,"[26486, 227, 6705, 19939, 25, 11789, 1438, 815, 307, 517, 35644, 284, 7603, 663, 4007]",1.0,384,best_practice,48,Method name should be more descriptive to indicate its purpose,,344,"        # NOTE: This code does the same thing as line 43, but since baostock is not stable in downloading data, we have chosen to download offline data.","[220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 770, 2438, 857, 262, 976, 1517, 355, 1627, 5946, 11, 475, 1201, 26605, 455, 735, 318, 407, 8245, 287, 22023, 1366, 11, 356, 423, 7147, 284, 4321, 18043, 1366, 13]"
✅ Best Practice: Use of assertEqual for testing equality is a good practice,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 36, 13255, 329, 4856, 10537, 318, 257, 922, 3357]",1.0,394,best_practice,50,Use of assertEqual for testing equality is a good practice,,384,        # Run(,"[220, 220, 220, 220, 220, 220, 220, 1303, 5660, 7]"
🧠 ML Signal: Use of assertEqual indicates a testing pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 36, 13255, 9217, 257, 4856, 3912]",1.0,414,ml_signal,51,Use of assertEqual indicates a testing pattern,,394,"        #     source_dir=pit_dir,","[220, 220, 220, 220, 220, 220, 220, 1303, 220, 220, 220, 220, 2723, 62, 15908, 28, 15544, 62, 15908, 11]"
🧠 ML Signal: Usage of specific financial fields for querying data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 3176, 7032, 329, 42517, 1112, 1366]",1.0,458,ml_signal,53,Usage of specific financial fields for querying data,,414,"        # ).download_data(start=""2000-01-01"", end=""2020-01-01"", symbol_regex=""^(600519|000725).*"")","[220, 220, 220, 220, 220, 220, 220, 1303, 6739, 15002, 62, 7890, 7, 9688, 2625, 11024, 12, 486, 12, 486, 1600, 886, 2625, 42334, 12, 486, 12, 486, 1600, 6194, 62, 260, 25636, 2625, 61, 7, 8054, 47785, 91, 830, 45151, 737, 9, 4943]"
⚠️ SAST Risk (Low): Hardcoded financial field names could lead to inflexibility,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 3176, 2214, 3891, 714, 1085, 284, 1167, 2588, 2247]",0.5,472,sast_risk,54,Hardcoded financial field names could lead to inflexibility,Low,458,        # bs.logout(),"[220, 220, 220, 220, 220, 220, 220, 1303, 275, 82, 13, 6404, 448, 3419]"
🧠 ML Signal: Validation of data using statistical description,"[8582, 100, 254, 10373, 26484, 25, 3254, 24765, 286, 1366, 1262, 13905, 6764]",0.5,481,ml_signal,66,Validation of data using statistical description,,472,    def setUp(self):,"[220, 220, 220, 825, 900, 4933, 7, 944, 2599]"
🧠 ML Signal: Validation of data using recent data points,"[8582, 100, 254, 10373, 26484, 25, 3254, 24765, 286, 1366, 1262, 2274, 1366, 2173]",0.5,495,ml_signal,78,Validation of data using recent data points,,481,"        instruments = [""sh600519""]","[220, 220, 220, 220, 220, 220, 220, 12834, 796, 14631, 1477, 8054, 47785, 8973]"
🧠 ML Signal: Usage of specific financial fields for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 3176, 7032, 329, 1366, 45069]",0.5,509,ml_signal,78,Usage of specific financial fields for data retrieval,,495,"        instruments = [""sh600519""]","[220, 220, 220, 220, 220, 220, 220, 12834, 796, 14631, 1477, 8054, 47785, 8973]"
⚠️ SAST Risk (Low): Overwriting data column with a constant value,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3827, 16502, 1366, 5721, 351, 257, 6937, 1988]",0.5,536,sast_risk,80,Overwriting data column with a constant value,Low,509,        # Mao Tai published 2019Q2 report at 2019-07-13 & 2019-07-18,"[220, 220, 220, 220, 220, 220, 220, 1303, 22828, 11144, 3199, 13130, 48, 17, 989, 379, 13130, 12, 2998, 12, 1485, 1222, 13130, 12, 2998, 12, 1507]"
🧠 ML Signal: Validation of data against expected output,"[8582, 100, 254, 10373, 26484, 25, 3254, 24765, 286, 1366, 1028, 2938, 5072]",1.0,546,ml_signal,98,Validation of data against expected output,,536,        instrument datetime,"[220, 220, 220, 220, 220, 220, 220, 8875, 4818, 8079]"
✅ Best Practice: Use of pytest marker to categorize slow tests,"[26486, 227, 6705, 19939, 25, 5765, 286, 12972, 9288, 18364, 284, 17851, 1096, 3105, 5254]",0.5,581,best_practice,99,Use of pytest marker to categorize slow tests,,546,        sh600519   2019-07-15      0.000000      0.305041,"[220, 220, 220, 220, 220, 220, 220, 427, 8054, 47785, 220, 220, 13130, 12, 2998, 12, 1314, 220, 220, 220, 220, 220, 657, 13, 10535, 220, 220, 220, 220, 220, 657, 13, 1270, 1120, 3901]"
🧠 ML Signal: Usage of specific financial expressions in fields,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 3176, 14700, 287, 7032]",0.5,581,ml_signal,106,Usage of specific financial expressions in fields,,581,,[]
🧠 ML Signal: Usage of specific instrument identifiers,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 8875, 42814]",0.5,613,ml_signal,108,Usage of specific instrument identifiers,,581,"        fields = [""P($$roewa_q)"", ""P($$yoyni_q)"", ""$close""]","[220, 220, 220, 220, 220, 220, 220, 7032, 796, 14631, 47, 7, 13702, 305, 413, 64, 62, 80, 42501, 366, 47, 7, 13702, 88, 726, 8461, 62, 80, 42501, 17971, 19836, 8973]"
⚠️ SAST Risk (Low): Potential risk if D.features is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 360, 13, 40890, 318, 407, 6105, 31031]",1.0,645,sast_risk,108,Potential risk if D.features is not properly validated,Low,613,"        fields = [""P($$roewa_q)"", ""P($$yoyni_q)"", ""$close""]","[220, 220, 220, 220, 220, 220, 220, 7032, 796, 14631, 47, 7, 13702, 305, 413, 64, 62, 80, 42501, 366, 47, 7, 13702, 88, 726, 8461, 62, 80, 42501, 17971, 19836, 8973]"
🧠 ML Signal: Usage of date ranges and frequency in data retrieval,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3128, 16069, 290, 8373, 287, 1366, 45069]",0.5,677,ml_signal,108,Usage of date ranges and frequency in data retrieval,,645,"        fields = [""P($$roewa_q)"", ""P($$yoyni_q)"", ""$close""]","[220, 220, 220, 220, 220, 220, 220, 7032, 796, 14631, 47, 7, 13702, 305, 413, 64, 62, 80, 42501, 366, 47, 7, 13702, 88, 726, 8461, 62, 80, 42501, 17971, 19836, 8973]"
🧠 ML Signal: Comparison of actual data with expected results,"[8582, 100, 254, 10373, 26484, 25, 34420, 286, 4036, 1366, 351, 2938, 2482]",0.5,687,ml_signal,131,Comparison of actual data with expected results,,677,    def test_expr(self):,"[220, 220, 220, 825, 1332, 62, 31937, 7, 944, 2599]"
⚠️ SAST Risk (Low): Potential risk if check_same does not handle data safely,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 2198, 62, 31642, 857, 407, 5412, 1366, 11512]",0.5,714,sast_risk,133,Potential risk if check_same does not handle data safely,Low,687,"            ""P(Mean($$roewa_q, 1))"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 47, 7, 5308, 272, 7, 13702, 305, 413, 64, 62, 80, 11, 352, 4008, 1600]"
🧠 ML Signal: Use of specific fields and instruments for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 7032, 290, 12834, 329, 1366, 45069]",0.5,714,ml_signal,129,Use of specific fields and instruments for data retrieval,,714,,[]
🧠 ML Signal: Use of specific instruments for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 12834, 329, 1366, 45069]",0.5,724,ml_signal,131,Use of specific instruments for data retrieval,,714,    def test_expr(self):,"[220, 220, 220, 825, 1332, 62, 31937, 7, 944, 2599]"
🧠 ML Signal: Use of a specific method to retrieve features,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 2446, 284, 19818, 3033]",0.5,751,ml_signal,133,Use of a specific method to retrieve features,,724,"            ""P(Mean($$roewa_q, 1))"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 47, 7, 5308, 272, 7, 13702, 305, 413, 64, 62, 80, 11, 352, 4008, 1600]"
🧠 ML Signal: Use of a specific method to retrieve features with a defined end_time,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 2446, 284, 19818, 3033, 351, 257, 5447, 886, 62, 2435]",0.5,772,ml_signal,134,Use of a specific method to retrieve features with a defined end_time,,751,"            ""P($$roewa_q)"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 47, 7, 13702, 305, 413, 64, 62, 80, 42501]"
🧠 ML Signal: Accessing a specific column from the data,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 2176, 5721, 422, 262, 1366]",0.5,793,ml_signal,134,Accessing a specific column from the data,,772,"            ""P($$roewa_q)"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 47, 7, 13702, 305, 413, 64, 62, 80, 42501]"
🧠 ML Signal: Multiline string used for expected data,"[8582, 100, 254, 10373, 26484, 25, 7854, 346, 500, 4731, 973, 329, 2938, 1366]",0.5,814,ml_signal,134,Multiline string used for expected data,,793,"            ""P($$roewa_q)"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 47, 7, 13702, 305, 413, 64, 62, 80, 42501]"
🧠 ML Signal: Use of a method to check for duplicates and compare with expected data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 284, 2198, 329, 14184, 16856, 290, 8996, 351, 2938, 1366]",0.5,846,ml_signal,198,Use of a method to check for duplicates and compare with expected data,,814,                    2013-03-29    0.450047,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2211, 12, 3070, 12, 1959, 220, 220, 220, 657, 13, 2231, 405, 2857]"
✅ Best Practice: Use of ~s.duplicated().values to filter out duplicates,"[26486, 227, 6705, 19939, 25, 5765, 286, 5299, 82, 13, 646, 489, 3474, 22446, 27160, 284, 8106, 503, 14184, 16856]",0.5,878,best_practice,199,Use of ~s.duplicated().values to filter out duplicates,,846,                    2013-04-18    0.099958,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2211, 12, 3023, 12, 1507, 220, 220, 220, 657, 13, 15, 17032, 3365]"
🧠 ML Signal: Use of financial instruments and fields for feature extraction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3176, 12834, 290, 7032, 329, 3895, 22236]",0.5,910,ml_signal,194,Use of financial instruments and fields for feature extraction,,878,                    2012-04-11    0.403925,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2321, 12, 3023, 12, 1157, 220, 220, 220, 657, 13, 1821, 2670, 1495]"
🧠 ML Signal: Use of specific financial metrics for analysis,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2176, 3176, 20731, 329, 3781]",0.5,942,ml_signal,196,Use of specific financial metrics for analysis,,910,                    2012-08-10    0.264847,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2321, 12, 2919, 12, 940, 220, 220, 220, 657, 13, 2075, 2780, 2857]"
✅ Best Practice: Use of list concatenation for adding more fields,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 1673, 36686, 341, 329, 4375, 517, 7032]",1.0,974,best_practice,198,Use of list concatenation for adding more fields,,942,                    2013-03-29    0.450047,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2211, 12, 3070, 12, 1959, 220, 220, 220, 657, 13, 2231, 405, 2857]"
🧠 ML Signal: Inclusion of stock price in the analysis,"[8582, 100, 254, 10373, 26484, 25, 554, 4717, 286, 4283, 2756, 287, 262, 3781]",0.5,1005,ml_signal,200,Inclusion of stock price in the analysis,,974,                    2013-09-02    0.210442,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2211, 12, 2931, 12, 2999, 220, 220, 220, 657, 13, 21536, 39506]"
⚠️ SAST Risk (Low): Potential risk if D.features is not properly validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 360, 13, 40890, 318, 407, 6105, 31031, 393, 5336, 36951]",0.5,1036,sast_risk,200,Potential risk if D.features is not properly validated or sanitized,Low,1005,                    2013-09-02    0.210442,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2211, 12, 2931, 12, 2999, 220, 220, 220, 657, 13, 21536, 39506]"
⚠️ SAST Risk (Low): Potential risk if check_same does not handle exceptions or errors properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 2198, 62, 31642, 857, 407, 5412, 13269, 393, 8563, 6105]",0.5,1068,sast_risk,219,Potential risk if check_same does not handle exceptions or errors properly,Low,1036,                    2018-08-02    0.170563,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2864, 12, 2919, 12, 2999, 220, 220, 220, 657, 13, 1558, 2713, 5066]"
🧠 ML Signal: Usage of financial instrument identifiers,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 8875, 42814]",0.5,1100,ml_signal,219,Usage of financial instrument identifiers,,1068,                    2018-08-02    0.170563,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2864, 12, 2919, 12, 2999, 220, 220, 220, 657, 13, 1558, 2713, 5066]"
🧠 ML Signal: Usage of financial metrics and time references,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 20731, 290, 640, 10288]",0.5,1132,ml_signal,219,Usage of financial metrics and time references,,1100,                    2018-08-02    0.170563,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2864, 12, 2919, 12, 2999, 220, 220, 220, 657, 13, 1558, 2713, 5066]"
🧠 ML Signal: Usage of a data retrieval function with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 1366, 45069, 2163, 351, 2176, 10007]",0.5,1155,ml_signal,226,Usage of a data retrieval function with specific parameters,,1132,"        Name: P($$roewa_q), dtype: float32","[220, 220, 220, 220, 220, 220, 220, 6530, 25, 350, 7, 13702, 305, 413, 64, 62, 80, 828, 288, 4906, 25, 12178, 2624]"
🧠 ML Signal: Usage of a custom check function for data validation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 2198, 2163, 329, 1366, 21201]",0.5,1299,ml_signal,244,Usage of a custom check function for data validation,,1155,                   2019-01-08      0.255220      0.243892                                           1.484224                           1.661578   64.212196              16.388237,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13130, 12, 486, 12, 2919, 220, 220, 220, 220, 220, 657, 13, 1495, 4309, 1238, 220, 220, 220, 220, 220, 657, 13, 1731, 2548, 5892, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 352, 13, 2780, 3682, 1731, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 352, 13, 2791, 1314, 3695, 220, 220, 5598, 13, 21777, 25272, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1467, 13, 30460, 24693]"
✅ Best Practice: Use of a main guard to allow or prevent parts of code from being run when the modules are imported,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 1388, 4860, 284, 1249, 393, 2948, 3354, 286, 2438, 422, 852, 1057, 618, 262, 13103, 389, 17392]",1.0,1443,best_practice,244,Use of a main guard to allow or prevent parts of code from being run when the modules are imported,,1299,                   2019-01-08      0.255220      0.243892                                           1.484224                           1.661578   64.212196              16.388237,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13130, 12, 486, 12, 2919, 220, 220, 220, 220, 220, 657, 13, 1495, 4309, 1238, 220, 220, 220, 220, 220, 657, 13, 1731, 2548, 5892, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 352, 13, 2780, 3682, 1731, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 352, 13, 2791, 1314, 3695, 220, 220, 5598, 13, 21777, 25272, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1467, 13, 30460, 24693]"
🧠 ML Signal: Usage of unittest framework for test execution,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 555, 715, 395, 9355, 329, 1332, 9706]",0.5,1587,ml_signal,244,Usage of unittest framework for test execution,,1443,                   2019-01-08      0.255220      0.243892                                           1.484224                           1.661578   64.212196              16.388237,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13130, 12, 486, 12, 2919, 220, 220, 220, 220, 220, 657, 13, 1495, 4309, 1238, 220, 220, 220, 220, 220, 657, 13, 1731, 2548, 5892, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 352, 13, 2780, 3682, 1731, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 352, 13, 2791, 1314, 3695, 220, 220, 5598, 13, 21777, 25272, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1467, 13, 30460, 24693]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific normalization processors indicates usage of data preprocessing techniques common in ML workflows,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 3487, 1634, 20399, 9217, 8748, 286, 1366, 662, 36948, 7605, 2219, 287, 10373, 670, 44041]",1.0,7,ml_signal,6,Importing specific normalization processors indicates usage of data preprocessing techniques common in ML workflows,,0,from qlib.data import D,"[6738, 10662, 8019, 13, 7890, 1330, 360]"
‚úÖ Best Practice: Class should have a docstring explaining its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 8748]",1.0,14,best_practice,6,Class should have a docstring explaining its purpose and usage,,7,from qlib.data import D,"[6738, 10662, 8019, 13, 7890, 1330, 360]"
‚úÖ Best Practice: Class variables should have a comment or docstring explaining their purpose,"[26486, 227, 6705, 19939, 25, 5016, 9633, 815, 423, 257, 2912, 393, 2205, 8841, 11170, 511, 4007]",1.0,43,best_practice,8,Class variables should have a comment or docstring explaining their purpose,,14,"from qlib.data.dataset.processor import MinMaxNorm, ZScoreNorm, CSZScoreNorm, CSZFillna","[6738, 10662, 8019, 13, 7890, 13, 19608, 292, 316, 13, 41341, 1330, 1855, 11518, 35393, 11, 1168, 26595, 35393, 11, 9429, 57, 26595, 35393, 11, 9429, 57, 33762, 2616]"
‚úÖ Best Practice: Use of numpy functions for efficient min/max calculations,"[26486, 227, 6705, 19939, 25, 5765, 286, 299, 32152, 5499, 329, 6942, 949, 14, 9806, 16765]",1.0,43,best_practice,10,Use of numpy functions for efficient min/max calculations,,43,,[]
‚úÖ Best Practice: Handling edge cases where min and max are equal,"[26486, 227, 6705, 19939, 25, 49500, 5743, 2663, 810, 949, 290, 3509, 389, 4961]",1.0,43,best_practice,13,Handling edge cases where min and max are equal,,43,,[]
‚úÖ Best Practice: Setting default values to avoid division by zero,"[26486, 227, 6705, 19939, 25, 25700, 4277, 3815, 284, 3368, 7297, 416, 6632]",1.0,71,best_practice,17,Setting default values to avoid division by zero,,43,"            max_val = np.nanmax(df.values, axis=0)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3509, 62, 2100, 796, 45941, 13, 12647, 9806, 7, 7568, 13, 27160, 11, 16488, 28, 15, 8]"
‚úÖ Best Practice: Vectorized operations for performance,"[26486, 227, 6705, 19939, 25, 20650, 1143, 4560, 329, 2854]",1.0,90,best_practice,20,Vectorized operations for performance,,71,                if _con:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 4808, 1102, 25]"
üß† ML Signal: Use of feature selection and data slicing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3895, 6356, 290, 1366, 49289]",0.5,134,ml_signal,23,Use of feature selection and data slicing,,90,            df.loc(axis=1)[df.columns] = (df.values - min_val) / (max_val - min_val),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 17946, 7, 22704, 28, 16, 38381, 7568, 13, 28665, 82, 60, 796, 357, 7568, 13, 27160, 532, 949, 62, 2100, 8, 1220, 357, 9806, 62, 2100, 532, 949, 62, 2100, 8]"
üß† ML Signal: Adding a constant feature to the dataset,"[8582, 100, 254, 10373, 26484, 25, 18247, 257, 6937, 3895, 284, 262, 27039]",1.0,134,ml_signal,25,Adding a constant feature to the dataset,,134,,[]
‚úÖ Best Practice: Creating a copy of the dataframe to avoid modifying the original,"[26486, 227, 6705, 19939, 25, 30481, 257, 4866, 286, 262, 1366, 14535, 284, 3368, 30620, 262, 2656]",1.0,149,best_practice,27,Creating a copy of the dataframe to avoid modifying the original,,134,"        origin_df[""test""] = 0","[220, 220, 220, 220, 220, 220, 220, 8159, 62, 7568, 14692, 9288, 8973, 796, 657]"
üß† ML Signal: Initialization of a MinMaxNorm object with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 257, 1855, 11518, 35393, 2134, 351, 2176, 10007]",1.0,195,ml_signal,29,Initialization of a MinMaxNorm object with specific parameters,,149,"        mmn = MinMaxNorm(fields_group=None, fit_start_time=""2021-05-31"", fit_end_time=""2021-06-11"")","[220, 220, 220, 220, 220, 220, 220, 8085, 77, 796, 1855, 11518, 35393, 7, 25747, 62, 8094, 28, 14202, 11, 4197, 62, 9688, 62, 2435, 2625, 1238, 2481, 12, 2713, 12, 3132, 1600, 4197, 62, 437, 62, 2435, 2625, 1238, 2481, 12, 3312, 12, 1157, 4943]"
üß† ML Signal: Fitting a normalization model to the data,"[8582, 100, 254, 10373, 26484, 25, 376, 2535, 257, 3487, 1634, 2746, 284, 262, 1366]",1.0,211,ml_signal,31,Fitting a normalization model to the data,,195,        mmn.__call__(df),"[220, 220, 220, 220, 220, 220, 220, 8085, 77, 13, 834, 13345, 834, 7, 7568, 8]"
üß† ML Signal: Applying the normalization model to the data,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 262, 3487, 1634, 2746, 284, 262, 1366]",1.0,230,ml_signal,33,Applying the normalization model to the data,,211,        assert (df == origin_df).all().all(),"[220, 220, 220, 220, 220, 220, 220, 6818, 357, 7568, 6624, 8159, 62, 7568, 737, 439, 22446, 439, 3419]"
üß† ML Signal: Normalizing the original dataframe,"[8582, 100, 254, 10373, 26484, 25, 14435, 2890, 262, 2656, 1366, 14535]",0.5,242,ml_signal,35,Normalizing the original dataframe,,230,    def test_ZScoreNorm(self):,"[220, 220, 220, 825, 1332, 62, 57, 26595, 35393, 7, 944, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential for false positives if dataframes are not identical,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3991, 38548, 611, 1366, 37805, 389, 407, 10411]",1.0,270,sast_risk,37,Potential for false positives if dataframes are not identical,Low,242,"            mean_train = np.nanmean(df.values, axis=0)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1612, 62, 27432, 796, 45941, 13, 12647, 32604, 7, 7568, 13, 27160, 11, 16488, 28, 15, 8]"
üß† ML Signal: Normalization is a common preprocessing step in ML pipelines,"[8582, 100, 254, 10373, 26484, 25, 14435, 1634, 318, 257, 2219, 662, 36948, 2239, 287, 10373, 31108]",1.0,316,ml_signal,29,Normalization is a common preprocessing step in ML pipelines,,270,"        mmn = MinMaxNorm(fields_group=None, fit_start_time=""2021-05-31"", fit_end_time=""2021-06-11"")","[220, 220, 220, 220, 220, 220, 220, 8085, 77, 796, 1855, 11518, 35393, 7, 25747, 62, 8094, 28, 14202, 11, 4197, 62, 9688, 62, 2435, 2625, 1238, 2481, 12, 2713, 12, 3132, 1600, 4197, 62, 437, 62, 2435, 2625, 1238, 2481, 12, 3312, 12, 1157, 4943]"
‚úÖ Best Practice: Handle division by zero by setting std to 1 where std is 0,"[26486, 227, 6705, 19939, 25, 33141, 7297, 416, 6632, 416, 4634, 14367, 284, 352, 810, 14367, 318, 657]",0.5,334,best_practice,32,Handle division by zero by setting std to 1 where std is 0,,316,        origin_df = normalize(origin_df),"[220, 220, 220, 220, 220, 220, 220, 8159, 62, 7568, 796, 3487, 1096, 7, 47103, 62, 7568, 8]"
‚úÖ Best Practice: Use of vectorized operations for performance,"[26486, 227, 6705, 19939, 25, 5765, 286, 15879, 1143, 4560, 329, 2854]",0.5,362,best_practice,38,Use of vectorized operations for performance,,334,"            std_train = np.nanstd(df.values, axis=0)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14367, 62, 27432, 796, 45941, 13, 12647, 19282, 7, 7568, 13, 27160, 11, 16488, 28, 15, 8]"
üß† ML Signal: Feature selection and data slicing for model input,"[8582, 100, 254, 10373, 26484, 25, 27018, 6356, 290, 1366, 49289, 329, 2746, 5128]",0.5,381,ml_signal,41,Feature selection and data slicing for model input,,362,                if _con:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 4808, 1102, 25]"
üß† ML Signal: Adding a new feature/column to the dataset,"[8582, 100, 254, 10373, 26484, 25, 18247, 257, 649, 3895, 14, 28665, 284, 262, 27039]",0.5,408,ml_signal,43,Adding a new feature/column to the dataset,,381,                    mean_train[_i] = 0,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1612, 62, 27432, 29795, 72, 60, 796, 657]"
‚úÖ Best Practice: Use of copy to avoid modifying the original dataframe,"[26486, 227, 6705, 19939, 25, 5765, 286, 4866, 284, 3368, 30620, 262, 2656, 1366, 14535]",1.0,421,best_practice,45,Use of copy to avoid modifying the original dataframe,,408,            return df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
"üß† ML Signal: Instantiation of a normalization object, common in ML workflows","[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 3487, 1634, 2134, 11, 2219, 287, 10373, 670, 44041]",0.5,461,ml_signal,47,"Instantiation of a normalization object, common in ML workflows",,421,"        origin_df = D.features([self.TEST_INST], [""$high"", ""$open"", ""$low"", ""$close""]).tail(10)","[220, 220, 220, 220, 220, 220, 220, 8159, 62, 7568, 796, 360, 13, 40890, 26933, 944, 13, 51, 6465, 62, 38604, 4357, 14631, 3, 8929, 1600, 17971, 9654, 1600, 17971, 9319, 1600, 17971, 19836, 8973, 737, 13199, 7, 940, 8]"
üß† ML Signal: Fitting a model or transformation to the data,"[8582, 100, 254, 10373, 26484, 25, 376, 2535, 257, 2746, 393, 13389, 284, 262, 1366]",1.0,476,ml_signal,49,Fitting a model or transformation to the data,,461,        df = origin_df.copy(),"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 8159, 62, 7568, 13, 30073, 3419]"
üß† ML Signal: Applying a transformation or model to the data,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 13389, 393, 2746, 284, 262, 1366]",1.0,490,ml_signal,51,Applying a transformation or model to the data,,476,        zsn.fit(df),"[220, 220, 220, 220, 220, 220, 220, 1976, 16184, 13, 11147, 7, 7568, 8]"
üß† ML Signal: Reapplying normalization to compare results,"[8582, 100, 254, 10373, 26484, 25, 797, 1324, 3157, 3487, 1634, 284, 8996, 2482]",1.0,508,ml_signal,53,Reapplying normalization to compare results,,490,        origin_df = normalize(origin_df),"[220, 220, 220, 220, 220, 220, 220, 8159, 62, 7568, 796, 3487, 1096, 7, 47103, 62, 7568, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for false positives if dataframes are not identical,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3991, 38548, 611, 1366, 37805, 389, 407, 10411]",0.5,508,sast_risk,55,Potential for false positives if dataframes are not identical,Low,508,,[]
‚úÖ Best Practice: Method names should follow snake_case convention for consistency and readability.,"[26486, 227, 6705, 19939, 25, 11789, 3891, 815, 1061, 17522, 62, 7442, 9831, 329, 15794, 290, 1100, 1799, 13]",0.5,508,best_practice,46,Method names should follow snake_case convention for consistency and readability.,,508,,[]
"üß† ML Signal: Usage of a specific market ""csi300"" could indicate a focus on a particular dataset or domain.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 1910, 366, 6359, 72, 6200, 1, 714, 7603, 257, 2962, 319, 257, 1948, 27039, 393, 7386, 13]",0.5,523,ml_signal,48,"Usage of a specific market ""csi300"" could indicate a focus on a particular dataset or domain.",,508,"        origin_df[""test""] = 0","[220, 220, 220, 220, 220, 220, 220, 8159, 62, 7568, 14692, 9288, 8973, 796, 657]"
üß† ML Signal: Grouping and slicing data in this manner may indicate a pattern of data preprocessing.,"[8582, 100, 254, 10373, 26484, 25, 4912, 278, 290, 49289, 1366, 287, 428, 5642, 743, 7603, 257, 3912, 286, 1366, 662, 36948, 13]",0.5,569,ml_signal,50,Grouping and slicing data in this manner may indicate a pattern of data preprocessing.,,523,"        zsn = ZScoreNorm(fields_group=None, fit_start_time=""2021-05-31"", fit_end_time=""2021-06-11"")","[220, 220, 220, 220, 220, 220, 220, 1976, 16184, 796, 1168, 26595, 35393, 7, 25747, 62, 8094, 28, 14202, 11, 4197, 62, 9688, 62, 2435, 2625, 1238, 2481, 12, 2713, 12, 3132, 1600, 4197, 62, 437, 62, 2435, 2625, 1238, 2481, 12, 3312, 12, 1157, 4943]"
‚úÖ Best Practice: Use of .copy() to avoid modifying the original DataFrame.,"[26486, 227, 6705, 19939, 25, 5765, 286, 764, 30073, 3419, 284, 3368, 30620, 262, 2656, 6060, 19778, 13]",1.0,585,best_practice,52,Use of .copy() to avoid modifying the original DataFrame.,,569,        zsn.__call__(df),"[220, 220, 220, 220, 220, 220, 220, 1976, 16184, 13, 834, 13345, 834, 7, 7568, 8]"
üß† ML Signal: Invocation of CSZFillna suggests a pattern of handling missing data.,"[8582, 100, 254, 10373, 26484, 25, 10001, 5040, 286, 9429, 57, 33762, 2616, 5644, 257, 3912, 286, 9041, 4814, 1366, 13]",0.5,604,ml_signal,54,Invocation of CSZFillna suggests a pattern of handling missing data.,,585,        assert (df == origin_df).all().all(),"[220, 220, 220, 220, 220, 220, 220, 6818, 357, 7568, 6624, 8159, 62, 7568, 737, 439, 22446, 439, 3419]"
‚ö†Ô∏è SAST Risk (Low): Use of bitwise negation operator `~` on boolean result; consider using `not` for clarity.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 1643, 3083, 2469, 341, 10088, 4600, 93, 63, 319, 25131, 1255, 26, 2074, 1262, 4600, 1662, 63, 329, 16287, 13]",0.5,617,sast_risk,56,Use of bitwise negation operator `~` on boolean result; consider using `not` for clarity.,Low,604,    def test_CSZFillna(self):,"[220, 220, 220, 825, 1332, 62, 7902, 57, 33762, 2616, 7, 944, 2599]"
"üß† ML Signal: Usage of a specific market ""csi300"" could indicate a focus on a particular dataset or domain.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 1910, 366, 6359, 72, 6200, 1, 714, 7603, 257, 2962, 319, 257, 1948, 27039, 393, 7386, 13]",0.5,635,ml_signal,53,"Usage of a specific market ""csi300"" could indicate a focus on a particular dataset or domain.",,617,        origin_df = normalize(origin_df),"[220, 220, 220, 220, 220, 220, 220, 8159, 62, 7568, 796, 3487, 1096, 7, 47103, 62, 7568, 8]"
‚úÖ Best Practice: Using groupby with group_keys=False for cleaner DataFrame operations.,"[26486, 227, 6705, 19939, 25, 8554, 1448, 1525, 351, 1448, 62, 13083, 28, 25101, 329, 21723, 6060, 19778, 4560, 13]",0.5,635,best_practice,55,Using groupby with group_keys=False for cleaner DataFrame operations.,,635,,[]
‚úÖ Best Practice: Copying DataFrame to avoid modifying the original data.,"[26486, 227, 6705, 19939, 25, 6955, 1112, 6060, 19778, 284, 3368, 30620, 262, 2656, 1366, 13]",1.0,678,best_practice,57,Copying DataFrame to avoid modifying the original data.,,635,"        origin_df = D.features(D.instruments(market=""csi300""), fields=[""$high"", ""$open"", ""$low"", ""$close""])","[220, 220, 220, 220, 220, 220, 220, 8159, 62, 7568, 796, 360, 13, 40890, 7, 35, 13, 259, 2536, 2886, 7, 10728, 2625, 6359, 72, 6200, 12340, 7032, 28, 14692, 3, 8929, 1600, 17971, 9654, 1600, 17971, 9319, 1600, 17971, 19836, 8973, 8]"
üß† ML Signal: Invocation of CSZScoreNorm suggests a normalization or preprocessing step.,"[8582, 100, 254, 10373, 26484, 25, 10001, 5040, 286, 9429, 57, 26595, 35393, 5644, 257, 3487, 1634, 393, 662, 36948, 2239, 13]",0.5,693,ml_signal,59,Invocation of CSZScoreNorm suggests a normalization or preprocessing step.,,678,        df = origin_df.copy(),"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 8159, 62, 7568, 13, 30073, 3419]"
‚ö†Ô∏è SAST Risk (Low): Direct comparison of floating-point numbers can lead to precision issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 7208, 286, 12462, 12, 4122, 3146, 460, 1085, 284, 15440, 2428, 13]",0.5,708,sast_risk,59,Direct comparison of floating-point numbers can lead to precision issues.,Low,693,        df = origin_df.copy(),"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 8159, 62, 7568, 13, 30073, 3419]"
‚úÖ Best Practice: Standard way to execute tests in Python.,"[26486, 227, 6705, 19939, 25, 8997, 835, 284, 12260, 5254, 287, 11361, 13]",0.5,723,best_practice,59,Standard way to execute tests in Python.,,708,        df = origin_df.copy(),"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 8159, 62, 7568, 13, 30073, 3419]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Low): Mutable default arguments like lists can lead to unexpected behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13859, 540, 4277, 7159, 588, 8341, 460, 1085, 284, 10059, 4069]",1.0,15,sast_risk,21,Mutable default arguments like lists can lead to unexpected behavior,Low,0,"        fit_end_time=None,","[220, 220, 220, 220, 220, 220, 220, 4197, 62, 437, 62, 2435, 28, 14202, 11]"
‚ö†Ô∏è SAST Risk (Low): Mutable default arguments like lists can lead to unexpected behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13859, 540, 4277, 7159, 588, 8341, 460, 1085, 284, 10059, 4069]",1.0,19,sast_risk,23,Mutable default arguments like lists can lead to unexpected behavior,Low,15,    ):,"[220, 220, 220, 15179]"
"üß† ML Signal: Use of a data loader pattern, common in ML pipelines","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1366, 40213, 3912, 11, 2219, 287, 10373, 31108]",0.5,45,ml_signal,31,"Use of a data loader pattern, common in ML pipelines",,19,"                ""config"": self.get_feature_config(),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 11250, 1298, 2116, 13, 1136, 62, 30053, 62, 11250, 22784]"
"üß† ML Signal: Function returns a tuple of fields and names, indicating a pattern for feature configuration","[8582, 100, 254, 10373, 26484, 25, 15553, 5860, 257, 46545, 286, 7032, 290, 3891, 11, 12739, 257, 3912, 329, 3895, 8398]",0.5,64,ml_signal,40,"Function returns a tuple of fields and names, indicating a pattern for feature configuration",,45,"            data_loader=data_loader,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 62, 29356, 28, 7890, 62, 29356, 11]"
üß† ML Signal: Use of financial indicators in field names suggests a pattern for financial data processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3176, 21337, 287, 2214, 3891, 5644, 257, 3912, 329, 3176, 1366, 7587]",0.5,85,ml_signal,42,Use of financial indicators in field names suggests a pattern for financial data processing,,64,"            learn_processors=learn_processors,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2193, 62, 14681, 669, 28, 35720, 62, 14681, 669, 11]"
üß† ML Signal: Naming convention for features indicates a pattern for feature engineering,"[8582, 100, 254, 10373, 26484, 25, 399, 3723, 9831, 329, 3033, 9217, 257, 3912, 329, 3895, 8705]",0.5,93,ml_signal,44,Naming convention for features indicates a pattern for feature engineering,,85,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Returning multiple values as a tuple is a common and clear pattern,"[26486, 227, 6705, 19939, 25, 42882, 3294, 3815, 355, 257, 46545, 318, 257, 2219, 290, 1598, 3912]",1.0,105,best_practice,46,Returning multiple values as a tuple is a common and clear pattern,,93,    def get_feature_config(self):,"[220, 220, 220, 825, 651, 62, 30053, 62, 11250, 7, 944, 2599]"
"‚úÖ Best Practice: Class variables are used for configuration, improving readability and maintainability.","[26486, 227, 6705, 19939, 25, 5016, 9633, 389, 973, 329, 8398, 11, 10068, 1100, 1799, 290, 5529, 1799, 13]",0.5,105,best_practice,45,"Class variables are used for configuration, improving readability and maintainability.",,105,,[]
‚úÖ Best Practice: Using ISO 8601 date format for clarity and consistency.,"[26486, 227, 6705, 19939, 25, 8554, 19694, 9849, 486, 3128, 5794, 329, 16287, 290, 15794, 13]",0.5,144,best_practice,47,Using ISO 8601 date format for clarity and consistency.,,105,"        fields = [""Ref($open, 1)"", ""Ref($close, 1)"", ""Ref($volume, 1)"", ""$open"", ""$close"", ""$volume""]","[220, 220, 220, 220, 220, 220, 220, 7032, 796, 14631, 8134, 16763, 9654, 11, 352, 42501, 366, 8134, 16763, 19836, 11, 352, 42501, 366, 8134, 16763, 29048, 11, 352, 42501, 17971, 9654, 1600, 17971, 19836, 1600, 17971, 29048, 8973]"
‚úÖ Best Practice: Using ISO 8601 date format for clarity and consistency.,"[26486, 227, 6705, 19939, 25, 8554, 19694, 9849, 486, 3128, 5794, 329, 16287, 290, 15794, 13]",0.5,155,best_practice,49,Using ISO 8601 date format for clarity and consistency.,,144,"        return fields, names","[220, 220, 220, 220, 220, 220, 220, 1441, 7032, 11, 3891]"
‚úÖ Best Practice: Using ISO 8601 date format for clarity and consistency.,"[26486, 227, 6705, 19939, 25, 8554, 19694, 9849, 486, 3128, 5794, 329, 16287, 290, 15794, 13]",0.5,155,best_practice,50,Using ISO 8601 date format for clarity and consistency.,,155,,[]
‚úÖ Best Practice: Using ISO 8601 date format for clarity and consistency.,"[26486, 227, 6705, 19939, 25, 8554, 19694, 9849, 486, 3128, 5794, 329, 16287, 290, 15794, 13]",0.5,155,best_practice,50,Using ISO 8601 date format for clarity and consistency.,,155,,[]
‚úÖ Best Practice: Using a dictionary for keyword arguments improves code readability and flexibility.,"[26486, 227, 6705, 19939, 25, 8554, 257, 22155, 329, 21179, 7159, 19575, 2438, 1100, 1799, 290, 13688, 13]",0.5,171,best_practice,57,Using a dictionary for keyword arguments improves code readability and flexibility.,,155,"    train_end_time = ""2015-12-31""","[220, 220, 220, 4512, 62, 437, 62, 2435, 796, 366, 4626, 12, 1065, 12, 3132, 1]"
üß† ML Signal: Consistent use of start and end times for data handling.,"[8582, 100, 254, 10373, 26484, 25, 3515, 7609, 779, 286, 923, 290, 886, 1661, 329, 1366, 9041, 13]",0.5,187,ml_signal,57,Consistent use of start and end times for data handling.,,171,"    train_end_time = ""2015-12-31""","[220, 220, 220, 4512, 62, 437, 62, 2435, 796, 366, 4626, 12, 1065, 12, 3132, 1]"
üß† ML Signal: Consistent use of start and end times for data handling.,"[8582, 100, 254, 10373, 26484, 25, 3515, 7609, 779, 286, 923, 290, 886, 1661, 329, 1366, 9041, 13]",0.5,187,ml_signal,59,Consistent use of start and end times for data handling.,,187,,[]
üß† ML Signal: Consistent use of start and end times for data handling.,"[8582, 100, 254, 10373, 26484, 25, 3515, 7609, 779, 286, 923, 290, 886, 1661, 329, 1366, 9041, 13]",0.5,203,ml_signal,61,Consistent use of start and end times for data handling.,,187,"        ""start_time"": start_time,","[220, 220, 220, 220, 220, 220, 220, 366, 9688, 62, 2435, 1298, 923, 62, 2435, 11]"
üß† ML Signal: Consistent use of start and end times for data handling.,"[8582, 100, 254, 10373, 26484, 25, 3515, 7609, 779, 286, 923, 290, 886, 1661, 329, 1366, 9041, 13]",0.5,221,ml_signal,63,Consistent use of start and end times for data handling.,,203,"        ""fit_start_time"": start_time,","[220, 220, 220, 220, 220, 220, 220, 366, 11147, 62, 9688, 62, 2435, 1298, 923, 62, 2435, 11]"
"üß† ML Signal: Use of market variable to specify instruments, indicating a pattern for data selection.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1910, 7885, 284, 11986, 12834, 11, 12739, 257, 3912, 329, 1366, 6356, 13]",0.5,225,ml_signal,66,"Use of market variable to specify instruments, indicating a pattern for data selection.",,221,    },"[220, 220, 220, 1782]"
üß† ML Signal: Usage of keyword arguments to initialize an object,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 21179, 7159, 284, 41216, 281, 2134]",0.5,225,ml_signal,59,Usage of keyword arguments to initialize an object,,225,,[]
üß† ML Signal: Usage of a method to retrieve instruments based on market,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 19818, 12834, 1912, 319, 1910]",0.5,243,ml_signal,63,Usage of a method to retrieve instruments based on market,,225,"        ""fit_start_time"": start_time,","[220, 220, 220, 220, 220, 220, 220, 366, 11147, 62, 9688, 62, 2435, 1298, 923, 62, 2435, 11]"
üß† ML Signal: Usage of a method to list instruments with specific time range,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 1351, 12834, 351, 2176, 640, 2837]",0.5,247,ml_signal,66,Usage of a method to list instruments with specific time range,,243,    },"[220, 220, 220, 1782]"
‚úÖ Best Practice: Use of context manager for timing operations,"[26486, 227, 6705, 19939, 25, 5765, 286, 4732, 4706, 329, 10576, 4560]",1.0,258,best_practice,69,Use of context manager for timing operations,,247,        # init data handler,"[220, 220, 220, 220, 220, 220, 220, 1303, 2315, 1366, 21360]"
üß† ML Signal: Random selection of an index from a list,"[8582, 100, 254, 10373, 26484, 25, 14534, 6356, 286, 281, 6376, 422, 257, 1351]",0.5,273,ml_signal,72,Random selection of an index from a list,,258,        # init data handler with hasing storage,"[220, 220, 220, 220, 220, 220, 220, 1303, 2315, 1366, 21360, 351, 468, 278, 6143]"
üß† ML Signal: Fetching data using a selector pattern,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 1366, 1262, 257, 31870, 3912]",0.5,293,ml_signal,75,Fetching data using a selector pattern,,273,"        fetch_start_time = ""2019-01-01""","[220, 220, 220, 220, 220, 220, 220, 21207, 62, 9688, 62, 2435, 796, 366, 23344, 12, 486, 12, 486, 1]"
üß† ML Signal: Random selection of multiple indices from a list,"[8582, 100, 254, 10373, 26484, 25, 14534, 6356, 286, 3294, 36525, 422, 257, 1351]",0.5,310,ml_signal,78,Random selection of multiple indices from a list,,293,        instruments = D.list_instruments(,"[220, 220, 220, 220, 220, 220, 220, 12834, 796, 360, 13, 4868, 62, 259, 2536, 2886, 7]"
‚úÖ Best Practice: Use of unittest framework for test execution,"[26486, 227, 6705, 19939, 25, 5765, 286, 555, 715, 395, 9355, 329, 1332, 9706]",0.5,348,best_practice,85,Use of unittest framework for test execution,,310,"                random_index = np.random.randint(len(instruments), size=1)[0]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4738, 62, 9630, 796, 45941, 13, 25120, 13, 25192, 600, 7, 11925, 7, 259, 2536, 2886, 828, 2546, 28, 16, 38381, 15, 60]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific test classes and modules indicates a pattern of testing practices,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 1332, 6097, 290, 13103, 9217, 257, 3912, 286, 4856, 6593]",1.0,4,ml_signal,4,Importing specific test classes and modules indicates a pattern of testing practices,,0,import unittest,"[11748, 555, 715, 395]"
üß† ML Signal: Importing specific classes from a module indicates usage patterns of the library,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 8748, 7572, 286, 262, 5888]",0.5,6,ml_signal,6,Importing specific classes from a module indicates usage patterns of the library,,4,import sys,"[11748, 25064]"
üß† ML Signal: Importing specific classes from a module indicates usage patterns of the library,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 6097, 422, 257, 8265, 9217, 8748, 7572, 286, 262, 5888]",0.5,12,ml_signal,10,Importing specific classes from a module indicates usage patterns of the library,,6,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
üß† ML Signal: Use of pytest for testing indicates a pattern for test automation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12972, 9288, 329, 4856, 9217, 257, 3912, 329, 1332, 22771]",1.0,18,ml_signal,10,Use of pytest for testing indicates a pattern for test automation,,12,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
üß† ML Signal: Timing performance of data access,"[8582, 100, 254, 10373, 26484, 25, 5045, 278, 2854, 286, 1366, 1895]",0.5,56,ml_signal,45,Timing performance of data access,,18,"        tsds_train = tsdh.prepare(""train"", data_key=DataHandlerLP.DK_L)  # Test the correctness","[220, 220, 220, 220, 220, 220, 220, 40379, 9310, 62, 27432, 796, 256, 21282, 71, 13, 46012, 533, 7203, 27432, 1600, 1366, 62, 2539, 28, 6601, 25060, 19930, 13, 48510, 62, 43, 8, 220, 1303, 6208, 262, 29409]"
üß† ML Signal: Checking shape of data batch,"[8582, 100, 254, 10373, 26484, 25, 39432, 5485, 286, 1366, 15458]",0.5,77,ml_signal,50,Checking shape of data batch,,56,            _ = tsds_train[idx],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 796, 40379, 9310, 62, 27432, 58, 312, 87, 60]"
üß† ML Signal: Timing performance of batch data access,"[8582, 100, 254, 10373, 26484, 25, 5045, 278, 2854, 286, 15458, 1366, 1895]",0.5,77,ml_signal,52,Timing performance of batch data access,,77,,[]
‚ö†Ô∏è SAST Risk (Low): Potential floating-point comparison issue,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12462, 12, 4122, 7208, 2071]",0.5,92,sast_risk,63,Potential floating-point comparison issue,Low,77,        # 1) sample by int index directly,"[220, 220, 220, 220, 220, 220, 220, 1303, 352, 8, 6291, 416, 493, 6376, 3264]"
üß† ML Signal: Checking shape of data in DataLoader,"[8582, 100, 254, 10373, 26484, 25, 39432, 5485, 286, 1366, 287, 6060, 17401]",0.5,92,ml_signal,77,Checking shape of data in DataLoader,,92,,[]
üß† ML Signal: Accessing index information,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6376, 1321]",0.5,92,ml_signal,80,Accessing index information,,92,,[]
‚úÖ Best Practice: Class name should follow CamelCase naming convention,"[26486, 227, 6705, 19939, 25, 5016, 1438, 815, 1061, 43281, 20448, 19264, 9831]",0.5,100,best_practice,76,Class name should follow CamelCase naming convention,,92,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of numpy to generate random data for testing,"[26486, 227, 6705, 19939, 25, 5765, 286, 299, 32152, 284, 7716, 4738, 1366, 329, 4856]",0.5,122,best_practice,85,Use of numpy to generate random data for testing,,100,            from qlib.model.utils import IndexSampler,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 422, 10662, 8019, 13, 19849, 13, 26791, 1330, 12901, 16305, 20053]"
‚úÖ Best Practice: Creating a DataFrame with a MultiIndex for structured data,"[26486, 227, 6705, 19939, 25, 30481, 257, 6060, 19778, 351, 257, 15237, 15732, 329, 20793, 1366]",0.5,142,best_practice,87,Creating a DataFrame with a MultiIndex for structured data,,122,            i = len(tsds) - 1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1312, 796, 18896, 7, 912, 9310, 8, 532, 352]"
üß† ML Signal: Usage of a custom data sampler class for time series data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 1366, 6072, 20053, 1398, 329, 640, 2168, 1366]",0.5,158,ml_signal,89,Usage of a custom data sampler class for time series data,,142,            tsds[i],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 40379, 9310, 58, 72, 60]"
‚ö†Ô∏è SAST Risk (Low): Printing dataset contents may expose sensitive data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 27039, 10154, 743, 15651, 8564, 1366]",0.5,182,sast_risk,93,Printing dataset contents may expose sensitive data,Low,158,            test_loader = DataLoader(s_w_i),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1332, 62, 29356, 796, 6060, 17401, 7, 82, 62, 86, 62, 72, 8]"
‚ö†Ô∏è SAST Risk (Low): Printing dataset contents may expose sensitive data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 27039, 10154, 743, 15651, 8564, 1366]",0.5,202,sast_risk,96,Printing dataset contents may expose sensitive data,Low,182,"            for data, i in test_loader:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 1366, 11, 1312, 287, 1332, 62, 29356, 25]"
‚úÖ Best Practice: Assertions to verify the length and content of the dataset,"[26486, 227, 6705, 19939, 25, 2195, 861, 507, 284, 11767, 262, 4129, 290, 2695, 286, 262, 27039]",0.5,219,best_practice,98,Assertions to verify the length and content of the dataset,,202,            print(data.shape),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 7890, 13, 43358, 8]"
‚úÖ Best Practice: Use of numpy functions for numerical checks,"[26486, 227, 6705, 19939, 25, 5765, 286, 299, 32152, 5499, 329, 29052, 8794]",0.5,237,best_practice,99,Use of numpy functions for numerical checks,,219,            print(idx[i]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 312, 87, 58, 72, 12962]"
‚úÖ Best Practice: Assertions to ensure dataset consistency,"[26486, 227, 6705, 19939, 25, 2195, 861, 507, 284, 4155, 27039, 15794]",1.0,251,best_practice,102,Assertions to ensure dataset consistency,,237,class TestTSDataSampler(unittest.TestCase):,"[4871, 6208, 4694, 6601, 16305, 20053, 7, 403, 715, 395, 13, 14402, 20448, 2599]"
üß† ML Signal: Use of random data generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4738, 1366, 5270]",1.0,298,ml_signal,107,Use of random data generation,,251,"        datetime_list = [""2000-01-31"", ""2000-02-29"", ""2000-03-31"", ""2000-04-30"", ""2000-05-31""]","[220, 220, 220, 220, 220, 220, 220, 4818, 8079, 62, 4868, 796, 14631, 11024, 12, 486, 12, 3132, 1600, 366, 11024, 12, 2999, 12, 1959, 1600, 366, 11024, 12, 3070, 12, 3132, 1600, 366, 11024, 12, 3023, 12, 1270, 1600, 366, 11024, 12, 2713, 12, 3132, 8973]"
üß† ML Signal: Use of custom class TSDataSampler,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2183, 1398, 26136, 6601, 16305, 20053]",0.5,334,ml_signal,110,Use of custom class TSDataSampler,,298,"            [pd.to_datetime(datetime_list), instruments], names=[""datetime"", ""instrument""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 685, 30094, 13, 1462, 62, 19608, 8079, 7, 19608, 8079, 62, 4868, 828, 12834, 4357, 3891, 28, 14692, 19608, 8079, 1600, 366, 259, 43872, 8973]"
üß† ML Signal: Printing dataset for debugging,"[8582, 100, 254, 10373, 26484, 25, 44118, 27039, 329, 28769]",0.5,373,ml_signal,114,Printing dataset for debugging,,334,"        dataset = TSDataSampler(test_df, datetime_list[0], datetime_list[-1], step_len=2)","[220, 220, 220, 220, 220, 220, 220, 27039, 796, 26136, 6601, 16305, 20053, 7, 9288, 62, 7568, 11, 4818, 8079, 62, 4868, 58, 15, 4357, 4818, 8079, 62, 4868, 58, 12, 16, 4357, 2239, 62, 11925, 28, 17, 8]"
üß† ML Signal: Printing dataset for debugging,"[8582, 100, 254, 10373, 26484, 25, 44118, 27039, 329, 28769]",0.5,388,ml_signal,117,Printing dataset for debugging,,373,        print(dataset[0]),"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 19608, 292, 316, 58, 15, 12962]"
‚ö†Ô∏è SAST Risk (Low): Potential for IndexError if dataset[i] is out of bounds,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 12901, 12331, 611, 27039, 58, 72, 60, 318, 503, 286, 22303]",1.0,406,sast_risk,120,Potential for IndexError if dataset[i] is out of bounds,Low,388,        assert len(dataset[0]) == 2,"[220, 220, 220, 220, 220, 220, 220, 6818, 18896, 7, 19608, 292, 316, 58, 15, 12962, 6624, 362]"
‚ö†Ô∏è SAST Risk (Low): Potential for IndexError if dataset[i] is out of bounds,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 12901, 12331, 611, 27039, 58, 72, 60, 318, 503, 286, 22303]",1.0,432,sast_risk,121,Potential for IndexError if dataset[i] is out of bounds,Low,406,        self.assertTrue(np.isnan(dataset[0][0])),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30493, 17821, 7, 37659, 13, 271, 12647, 7, 19608, 292, 316, 58, 15, 7131, 15, 60, 4008]"
‚ö†Ô∏è SAST Risk (Low): Potential for IndexError if dataset[0][1] or dataset[1][0] is out of bounds,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 12901, 12331, 611, 27039, 58, 15, 7131, 16, 60, 393, 27039, 58, 16, 7131, 15, 60, 318, 503, 286, 22303]",1.0,458,sast_risk,121,Potential for IndexError if dataset[0][1] or dataset[1][0] is out of bounds,Low,432,        self.assertTrue(np.isnan(dataset[0][0])),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30493, 17821, 7, 37659, 13, 271, 12647, 7, 19608, 292, 316, 58, 15, 7131, 15, 60, 4008]"
‚ö†Ô∏è SAST Risk (Low): Potential for IndexError if dataset[0][2] or dataset[1][1] is out of bounds,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 12901, 12331, 611, 27039, 58, 15, 7131, 17, 60, 393, 27039, 58, 16, 7131, 16, 60, 318, 503, 286, 22303]",1.0,484,sast_risk,121,Potential for IndexError if dataset[0][2] or dataset[1][1] is out of bounds,Low,458,        self.assertTrue(np.isnan(dataset[0][0])),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30493, 17821, 7, 37659, 13, 271, 12647, 7, 19608, 292, 316, 58, 15, 7131, 15, 60, 4008]"
‚úÖ Best Practice: Use of __name__ guard for script execution,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3672, 834, 4860, 329, 4226, 9706]",0.5,510,best_practice,121,Use of __name__ guard for script execution,,484,        self.assertTrue(np.isnan(dataset[0][0])),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30493, 17821, 7, 37659, 13, 271, 12647, 7, 19608, 292, 316, 58, 15, 7131, 15, 60, 4008]"
‚úÖ Best Practice: Use of high verbosity level for detailed test output,"[26486, 227, 6705, 19939, 25, 5765, 286, 1029, 15942, 16579, 1241, 329, 6496, 1332, 5072]",0.5,536,best_practice,121,Use of high verbosity level for detailed test output,,510,        self.assertTrue(np.isnan(dataset[0][0])),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 30493, 17821, 7, 37659, 13, 271, 12647, 7, 19608, 292, 316, 58, 15, 7131, 15, 60, 4008]"

annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"üß† ML Signal: Usage of Path to manipulate file paths, which is common in data processing tasks","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10644, 284, 18510, 2393, 13532, 11, 543, 318, 2219, 287, 1366, 7587, 8861]",0.5,13,ml_signal,11,"Usage of Path to manipulate file paths, which is common in data processing tasks",,0,from qlib.data.storage.file_storage import (,"[6738, 10662, 8019, 13, 7890, 13, 35350, 13, 7753, 62, 35350, 1330, 357]"
"üß† ML Signal: Usage of Path to create directories, which is common in data storage tasks","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10644, 284, 2251, 29196, 11, 543, 318, 2219, 287, 1366, 6143, 8861]",0.5,24,ml_signal,13,"Usage of Path to create directories, which is common in data storage tasks",,13,"    FileInstrumentStorage as InstrumentStorage,","[220, 220, 220, 9220, 818, 43872, 31425, 355, 42410, 31425, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential directory traversal if __file__ is manipulated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 11593, 7753, 834, 318, 25036]",0.5,25,sast_risk,15,Potential directory traversal if __file__ is manipulated,Low,24,),[8]
‚úÖ Best Practice: Use of mkdir with exist_ok=True to avoid exceptions if the directory already exists,"[26486, 227, 6705, 19939, 25, 5765, 286, 33480, 15908, 351, 2152, 62, 482, 28, 17821, 284, 3368, 13269, 611, 262, 8619, 1541, 7160]",1.0,25,best_practice,16,Use of mkdir with exist_ok=True to avoid exceptions if the directory already exists,,25,,[]
"‚úÖ Best Practice: Class definition should follow PEP 8 naming conventions, which is followed here.","[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 1061, 350, 8905, 807, 19264, 21396, 11, 543, 318, 3940, 994, 13]",0.5,26,best_practice,15,"Class definition should follow PEP 8 naming conventions, which is followed here.",,25,),[8]
üß† ML Signal: Testing object creation with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 23983, 2134, 6282, 351, 2176, 10007]",1.0,26,ml_signal,16,Testing object creation with specific parameters,,26,,[]
üß† ML Signal: Checking if the object supports slicing and is iterable,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 262, 2134, 6971, 49289, 290, 318, 11629, 540]",1.0,52,ml_signal,18,Checking if the object supports slicing and is iterable,,26,"DATA_DIR = Path(__file__).parent.joinpath(f""{_file_name}_data"")","[26947, 62, 34720, 796, 10644, 7, 834, 7753, 834, 737, 8000, 13, 22179, 6978, 7, 69, 1, 90, 62, 7753, 62, 3672, 92, 62, 7890, 4943]"
üß† ML Signal: Checking if the data attribute is iterable,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 262, 1366, 11688, 318, 11629, 540]",1.0,70,ml_signal,20,Checking if the data attribute is iterable,,52,"QLIB_DIR.mkdir(exist_ok=True, parents=True)","[9711, 9865, 62, 34720, 13, 28015, 15908, 7, 38476, 62, 482, 28, 17821, 11, 3397, 28, 17821, 8]"
‚úÖ Best Practice: Using print statements for debugging and output verification,"[26486, 227, 6705, 19939, 25, 8554, 3601, 6299, 329, 28769, 290, 5072, 19637]",1.0,70,best_practice,22,Using print statements for debugging and output verification,,70,,[]
‚úÖ Best Practice: Using print statements for debugging and output verification,"[26486, 227, 6705, 19939, 25, 8554, 3601, 6299, 329, 28769, 290, 5072, 19637]",1.0,83,best_practice,24,Using print statements for debugging and output verification,,70,    def test_calendar_storage(self):,"[220, 220, 220, 825, 1332, 62, 9948, 9239, 62, 35350, 7, 944, 2599]"
‚úÖ Best Practice: Using print statements for debugging and output verification,"[26486, 227, 6705, 19939, 25, 8554, 3601, 6299, 329, 28769, 290, 5072, 19637]",1.0,130,best_practice,26,Using print statements for debugging and output verification,,83,"        assert isinstance(calendar[:], Iterable), f""{calendar.__class__.__name__}.__getitem__(s: slice) is not Iterable""","[220, 220, 220, 220, 220, 220, 220, 6818, 318, 39098, 7, 9948, 9239, 58, 25, 4357, 40806, 540, 828, 277, 1, 90, 9948, 9239, 13, 834, 4871, 834, 13, 834, 3672, 834, 27422, 834, 1136, 9186, 834, 7, 82, 25, 16416, 8, 318, 407, 40806, 540, 1]"
üß† ML Signal: Testing object creation with different parameters,"[8582, 100, 254, 10373, 26484, 25, 23983, 2134, 6282, 351, 1180, 10007]",1.0,130,ml_signal,28,Testing object creation with different parameters,,130,,[]
üß† ML Signal: Testing exception handling for invalid data access,"[8582, 100, 254, 10373, 26484, 25, 23983, 6631, 9041, 329, 12515, 1366, 1895]",0.5,153,ml_signal,30,Testing exception handling for invalid data access,,130,"        print(f""calendar[0]: {calendar[0]}"")","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 69, 1, 9948, 9239, 58, 15, 5974, 1391, 9948, 9239, 58, 15, 48999, 4943]"
üß† ML Signal: Testing exception handling for invalid slicing,"[8582, 100, 254, 10373, 26484, 25, 23983, 6631, 9041, 329, 12515, 49289]",0.5,176,ml_signal,30,Testing exception handling for invalid slicing,,153,"        print(f""calendar[0]: {calendar[0]}"")","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 69, 1, 9948, 9239, 58, 15, 5974, 1391, 9948, 9239, 58, 15, 48999, 4943]"
üß† ML Signal: Testing exception handling for invalid index access,"[8582, 100, 254, 10373, 26484, 25, 23983, 6631, 9041, 329, 12515, 6376, 1895]",0.5,199,ml_signal,30,Testing exception handling for invalid index access,,176,"        print(f""calendar[0]: {calendar[0]}"")","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 69, 1, 9948, 9239, 58, 15, 5974, 1391, 9948, 9239, 58, 15, 48999, 4943]"
üß† ML Signal: Testing function for instrument storage behavior,"[8582, 100, 254, 10373, 26484, 25, 23983, 2163, 329, 8875, 6143, 4069]",0.5,226,ml_signal,29,Testing function for instrument storage behavior,,199,"        print(f""calendar[1: 5]: {calendar[1:5]}"")","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 69, 1, 9948, 9239, 58, 16, 25, 642, 5974, 1391, 9948, 9239, 58, 16, 25, 20, 48999, 4943]"
‚úÖ Best Practice: Docstring provides detailed explanation of the test case,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 6496, 7468, 286, 262, 1332, 1339]",0.5,249,best_practice,30,Docstring provides detailed explanation of the test case,,226,"        print(f""calendar[0]: {calendar[0]}"")","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 69, 1, 9948, 9239, 58, 15, 5974, 1391, 9948, 9239, 58, 15, 48999, 4943]"
üß† ML Signal: Iterating over instrument data to validate structure,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 8875, 1366, 284, 26571, 4645]",1.0,272,ml_signal,30,Iterating over instrument data to validate structure,,249,"        print(f""calendar[0]: {calendar[0]}"")","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 69, 1, 9948, 9239, 58, 15, 5974, 1391, 9948, 9239, 58, 15, 48999, 4943]"
"‚ö†Ô∏è SAST Risk (Low): Type checking with assert, could be disabled in optimized mode","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5994, 10627, 351, 6818, 11, 714, 307, 10058, 287, 23392, 4235]",0.5,295,sast_risk,30,"Type checking with assert, could be disabled in optimized mode",Low,272,"        print(f""calendar[0]: {calendar[0]}"")","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 69, 1, 9948, 9239, 58, 15, 5974, 1391, 9948, 9239, 58, 15, 48999, 4943]"
"‚ö†Ô∏è SAST Risk (Low): Type checking with assert, could be disabled in optimized mode","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5994, 10627, 351, 6818, 11, 714, 307, 10058, 287, 23392, 4235]",0.5,318,sast_risk,30,"Type checking with assert, could be disabled in optimized mode",Low,295,"        print(f""calendar[0]: {calendar[0]}"")","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 69, 1, 9948, 9239, 58, 15, 5974, 1391, 9948, 9239, 58, 15, 48999, 4943]"
üß† ML Signal: Accessing specific instrument data for validation,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 8875, 1366, 329, 21201]",1.0,341,ml_signal,30,Accessing specific instrument data for validation,,318,"        print(f""calendar[0]: {calendar[0]}"")","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 69, 1, 9948, 9239, 58, 15, 5974, 1391, 9948, 9239, 58, 15, 48999, 4943]"
"‚ö†Ô∏è SAST Risk (Low): Hardcoded provider_uri, potential for misuse","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 10131, 62, 9900, 11, 2785, 329, 29169]",0.5,354,sast_risk,56,"Hardcoded provider_uri, potential for misuse",Low,341,            Calendar:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 26506, 25]"
üß† ML Signal: Testing error handling with invalid provider_uri,"[8582, 100, 254, 10373, 26484, 25, 23983, 4049, 9041, 351, 12515, 10131, 62, 9900]",0.5,367,ml_signal,56,Testing error handling with invalid provider_uri,,354,            Calendar:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 26506, 25]"
üß† ML Signal: Testing error handling with invalid instrument key,"[8582, 100, 254, 10373, 26484, 25, 23983, 4049, 9041, 351, 12515, 8875, 1994]",0.5,380,ml_signal,56,Testing error handling with invalid instrument key,,367,            Calendar:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 26506, 25]"
üß† ML Signal: Testing for specific exceptions can indicate expected failure modes,"[8582, 100, 254, 10373, 26484, 25, 23983, 329, 2176, 13269, 460, 7603, 2938, 5287, 12881]",0.5,396,ml_signal,111,Testing for specific exceptions can indicate expected failure modes,,380,            Stock data(close):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10500, 1366, 7, 19836, 2599]"
üß† ML Signal: Use of assertRaises indicates testing for exception handling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 21762, 2696, 9217, 4856, 329, 6631, 9041]",0.5,476,ml_signal,113,Use of assertRaises indicates testing for exception handling,,396,                SH600000     1          ...      3         ...      4           5               6,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6006, 8054, 830, 220, 220, 220, 220, 352, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2644, 220, 220, 220, 220, 220, 513, 220, 220, 220, 220, 220, 220, 220, 220, 2644, 220, 220, 220, 220, 220, 604, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 642, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 718]"
üß† ML Signal: Use of isinstance to check types can indicate expected data types,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 318, 39098, 284, 2198, 3858, 460, 7603, 2938, 1366, 3858]",0.5,476,ml_signal,117,Use of isinstance to check types can indicate expected data types,,476,,[]
üß† ML Signal: Use of assert to check conditions can indicate expected behavior,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 284, 2198, 3403, 460, 7603, 2938, 4069]",0.5,492,ml_signal,120,Use of assert to check conditions can indicate expected behavior,,476,                [,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 685]"
‚úÖ Best Practice: Using f-strings for formatted output is more readable,"[26486, 227, 6705, 19939, 25, 8554, 277, 12, 37336, 329, 39559, 5072, 318, 517, 31744]",0.5,513,best_practice,122,Using f-strings for formatted output is more readable,,492,"                    ...,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2644, 11]"
‚úÖ Best Practice: Using f-strings for formatted output is more readable,"[26486, 227, 6705, 19939, 25, 8554, 277, 12, 37336, 329, 39559, 5072, 318, 517, 31744]",0.5,529,best_practice,124,Using f-strings for formatted output is more readable,,513,                ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
"‚ö†Ô∏è SAST Risk (Low): Hardcoding provider_uri as ""not_fount"" may lead to misconfigurations","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 66, 7656, 10131, 62, 9900, 355, 366, 1662, 62, 69, 608, 1, 743, 1085, 284, 2984, 11250, 20074]",1.0,558,sast_risk,126,"Hardcoding provider_uri as ""not_fount"" may lead to misconfigurations",Low,529,"                ====> [(0, 1), ..., (59, 6)]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24844, 14804, 47527, 15, 11, 352, 828, 2644, 11, 357, 3270, 11, 718, 15437]"
üß† ML Signal: Use of assertRaises indicates testing for exception handling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 21762, 2696, 9217, 4856, 329, 6631, 9041]",0.5,587,ml_signal,126,Use of assertRaises indicates testing for exception handling,,558,"                ====> [(0, 1), ..., (59, 6)]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24844, 14804, 47527, 15, 11, 352, 828, 2644, 11, 357, 3270, 11, 718, 15437]"
üß† ML Signal: Use of assertRaises indicates testing for exception handling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 21762, 2696, 9217, 4856, 329, 6631, 9041]",0.5,616,ml_signal,126,Use of assertRaises indicates testing for exception handling,,587,"                ====> [(0, 1), ..., (59, 6)]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24844, 14804, 47527, 15, 11, 352, 828, 2644, 11, 357, 3270, 11, 718, 15437]"
üß† ML Signal: Use of assertRaises indicates testing for exception handling,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6818, 21762, 2696, 9217, 4856, 329, 6631, 9041]",0.5,645,ml_signal,126,Use of assertRaises indicates testing for exception handling,,616,"                ====> [(0, 1), ..., (59, 6)]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 24844, 14804, 47527, 15, 11, 352, 828, 2644, 11, 357, 3270, 11, 718, 15437]"

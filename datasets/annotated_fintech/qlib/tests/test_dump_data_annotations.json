[
  {
    "line": 9,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of Path for file system paths improves cross-platform compatibility.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 0,
    "end_token": 0,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      329,
      2393,
      1080,
      13532,
      19575,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Path for file system paths improves cross-platform compatibility."
  },
  {
    "line": 13,
    "text": "from qlib.data import D",
    "annotation": "\u2705 Best Practice: Use of Path for file system paths improves cross-platform compatibility.",
    "confidence": 1.0,
    "tokens": [
      6738,
      10662,
      8019,
      13,
      7890,
      1330,
      360
    ],
    "start_token": 0,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      329,
      2393,
      1080,
      13532,
      19575,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Path for file system paths improves cross-platform compatibility."
  },
  {
    "line": 15,
    "text": "sys.path.append(str(Path(__file__).resolve().parent.parent.joinpath(\"scripts\")))",
    "annotation": "\u2705 Best Practice: Use of Path for file system paths improves cross-platform compatibility.",
    "confidence": 1.0,
    "tokens": [
      17597,
      13,
      6978,
      13,
      33295,
      7,
      2536,
      7,
      15235,
      7,
      834,
      7753,
      834,
      737,
      411,
      6442,
      22446,
      8000,
      13,
      8000,
      13,
      22179,
      6978,
      7203,
      46521,
      1,
      22305
    ],
    "start_token": 7,
    "end_token": 34,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      329,
      2393,
      1080,
      13532,
      19575,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Path for file system paths improves cross-platform compatibility."
  },
  {
    "line": 17,
    "text": "from dump_bin import DumpDataAll, DumpDataFix",
    "annotation": "\u2705 Best Practice: Use of mkdir with exist_ok=True to avoid errors if the directory already exists.",
    "confidence": 1.0,
    "tokens": [
      6738,
      10285,
      62,
      8800,
      1330,
      360,
      931,
      6601,
      3237,
      11,
      360,
      931,
      6601,
      22743
    ],
    "start_token": 34,
    "end_token": 48,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      33480,
      15908,
      351,
      2152,
      62,
      482,
      28,
      17821,
      284,
      3368,
      8563,
      611,
      262,
      8619,
      1541,
      7160,
      13
    ],
    "label": "best_practice",
    "reason": "Use of mkdir with exist_ok=True to avoid errors if the directory already exists."
  },
  {
    "line": 19,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of Path for file system paths improves cross-platform compatibility.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 48,
    "end_token": 48,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      329,
      2393,
      1080,
      13532,
      19575,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Path for file system paths improves cross-platform compatibility."
  },
  {
    "line": 21,
    "text": "SOURCE_DIR = DATA_DIR.joinpath(\"source\")",
    "annotation": "\u2705 Best Practice: Use of mkdir with exist_ok=True to avoid errors if the directory already exists.",
    "confidence": 1.0,
    "tokens": [
      47690,
      62,
      34720,
      796,
      42865,
      62,
      34720,
      13,
      22179,
      6978,
      7203,
      10459,
      4943
    ],
    "start_token": 48,
    "end_token": 61,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      33480,
      15908,
      351,
      2152,
      62,
      482,
      28,
      17821,
      284,
      3368,
      8563,
      611,
      262,
      8619,
      1541,
      7160,
      13
    ],
    "label": "best_practice",
    "reason": "Use of mkdir with exist_ok=True to avoid errors if the directory already exists."
  },
  {
    "line": 18,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of class-level constants for configuration",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 61,
    "end_token": 61,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      38491,
      329,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of class-level constants for configuration"
  },
  {
    "line": 20,
    "text": "DATA_DIR = Path(__file__).parent.joinpath(\"test_dump_data\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of list comprehension and lambda for data transformation",
    "confidence": 0.5,
    "tokens": [
      26947,
      62,
      34720,
      796,
      10644,
      7,
      834,
      7753,
      834,
      737,
      8000,
      13,
      22179,
      6978,
      7203,
      9288,
      62,
      39455,
      62,
      7890,
      4943
    ],
    "start_token": 61,
    "end_token": 82,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1351,
      35915,
      290,
      37456,
      329,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of list comprehension and lambda for data transformation"
  },
  {
    "line": 22,
    "text": "SOURCE_DIR.mkdir(exist_ok=True, parents=True)",
    "annotation": "\ud83e\udde0 ML Signal: Use of class-level variables for shared test data",
    "confidence": 0.5,
    "tokens": [
      47690,
      62,
      34720,
      13,
      28015,
      15908,
      7,
      38476,
      62,
      482,
      28,
      17821,
      11,
      3397,
      28,
      17821,
      8
    ],
    "start_token": 82,
    "end_token": 99,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      9633,
      329,
      4888,
      1332,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of class-level variables for shared test data"
  },
  {
    "line": 24,
    "text": "QLIB_DIR.mkdir(exist_ok=True, parents=True)",
    "annotation": "\ud83e\udde0 ML Signal: Use of class-level variables for shared test data",
    "confidence": 0.5,
    "tokens": [
      9711,
      9865,
      62,
      34720,
      13,
      28015,
      15908,
      7,
      38476,
      62,
      482,
      28,
      17821,
      11,
      3397,
      28,
      17821,
      8
    ],
    "start_token": 99,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      9633,
      329,
      4888,
      1332,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of class-level variables for shared test data"
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of class-level variables for shared test data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 117,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1398,
      12,
      5715,
      9633,
      329,
      4888,
      1332,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of class-level variables for shared test data"
  },
  {
    "line": 25,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Downloads data, indicating a setup for data-driven tests or ML model training.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 117,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      50093,
      1366,
      11,
      12739,
      257,
      9058,
      329,
      1366,
      12,
      15808,
      5254,
      393,
      10373,
      2746,
      3047,
      13
    ],
    "label": "ml_signal",
    "reason": "Downloads data, indicating a setup for data-driven tests or ML model training."
  },
  {
    "line": 26,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if the download source is untrusted or if the data is sensitive.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 117,
    "end_token": 117,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      262,
      4321,
      2723,
      318,
      1418,
      81,
      8459,
      393,
      611,
      262,
      1366,
      318,
      8564,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if the download source is untrusted or if the data is sensitive."
  },
  {
    "line": 28,
    "text": "    FIELDS = \"open,close,high,low,volume\".split(\",\")",
    "annotation": "\ud83e\udde0 ML Signal: Initializes data for testing, suggesting a pattern for data preparation in ML workflows.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      18930,
      3698,
      5258,
      796,
      366,
      9654,
      11,
      19836,
      11,
      8929,
      11,
      9319,
      11,
      29048,
      1911,
      35312,
      7,
      2430,
      8
    ],
    "start_token": 117,
    "end_token": 139,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      4340,
      1366,
      329,
      4856,
      11,
      9524,
      257,
      3912,
      329,
      1366,
      11824,
      287,
      10373,
      670,
      44041,
      13
    ],
    "label": "ml_signal",
    "reason": "Initializes data for testing, suggesting a pattern for data preparation in ML workflows."
  },
  {
    "line": 29,
    "text": "    QLIB_FIELDS = list(map(lambda x: f\"${x}\", FIELDS))",
    "annotation": "\ud83e\udde0 ML Signal: Extracts and processes stock names, indicating data transformation steps.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1195,
      40347,
      62,
      11674,
      3698,
      5258,
      796,
      1351,
      7,
      8899,
      7,
      50033,
      2124,
      25,
      277,
      1,
      38892,
      87,
      92,
      1600,
      18930,
      3698,
      5258,
      4008
    ],
    "start_token": 139,
    "end_token": 166,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      82,
      290,
      7767,
      4283,
      3891,
      11,
      12739,
      1366,
      13389,
      4831,
      13
    ],
    "label": "ml_signal",
    "reason": "Extracts and processes stock names, indicating data transformation steps."
  },
  {
    "line": 29,
    "text": "    QLIB_FIELDS = list(map(lambda x: f\"${x}\", FIELDS))",
    "annotation": "\u2705 Best Practice: Convert path to string for compatibility with qlib.init.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1195,
      40347,
      62,
      11674,
      3698,
      5258,
      796,
      1351,
      7,
      8899,
      7,
      50033,
      2124,
      25,
      277,
      1,
      38892,
      87,
      92,
      1600,
      18930,
      3698,
      5258,
      4008
    ],
    "start_token": 166,
    "end_token": 193,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      3108,
      284,
      4731,
      329,
      17764,
      351,
      10662,
      8019,
      13,
      15003,
      13
    ],
    "label": "best_practice",
    "reason": "Convert path to string for compatibility with qlib.init."
  },
  {
    "line": 35,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Initializes qlib, a tool often used in ML for financial data analysis.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 193,
    "end_token": 193,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      4340,
      10662,
      8019,
      11,
      257,
      2891,
      1690,
      973,
      287,
      10373,
      329,
      3176,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Initializes qlib, a tool often used in ML for financial data analysis."
  },
  {
    "line": 36,
    "text": "    @classmethod",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Deleting directories without validation can lead to data loss or security issues.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 193,
    "end_token": 199,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      42226,
      889,
      29196,
      1231,
      21201,
      460,
      1085,
      284,
      1366,
      2994,
      393,
      2324,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Deleting directories without validation can lead to data loss or security issues."
  },
  {
    "line": 37,
    "text": "    def setUpClass(cls) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Method name follows a pattern that could indicate a test function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      900,
      4933,
      9487,
      7,
      565,
      82,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 199,
    "end_token": 213,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      5679,
      257,
      3912,
      326,
      714,
      7603,
      257,
      1332,
      2163
    ],
    "label": "ml_signal",
    "reason": "Method name follows a pattern that could indicate a test function"
  },
  {
    "line": 39,
    "text": "        TestDumpData.DUMP_DATA = DumpDataAll(csv_path=SOURCE_DIR, qlib_dir=QLIB_DIR, include_fields=cls.FIELDS)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method on an object, indicating object-oriented design",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6208,
      35,
      931,
      6601,
      13,
      35,
      20476,
      62,
      26947,
      796,
      360,
      931,
      6601,
      3237,
      7,
      40664,
      62,
      6978,
      28,
      47690,
      62,
      34720,
      11,
      10662,
      8019,
      62,
      15908,
      28,
      9711,
      9865,
      62,
      34720,
      11,
      2291,
      62,
      25747,
      28,
      565,
      82,
      13,
      11674,
      3698,
      5258,
      8
    ],
    "start_token": 213,
    "end_token": 264,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      319,
      281,
      2134,
      11,
      12739,
      2134,
      12,
      17107,
      1486
    ],
    "label": "ml_signal",
    "reason": "Usage of a method on an object, indicating object-oriented design"
  },
  {
    "line": 39,
    "text": "        TestDumpData.DUMP_DATA = DumpDataAll(csv_path=SOURCE_DIR, qlib_dir=QLIB_DIR, include_fields=cls.FIELDS)",
    "annotation": "\u2705 Best Practice: Method name should be descriptive of its purpose or behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6208,
      35,
      931,
      6601,
      13,
      35,
      20476,
      62,
      26947,
      796,
      360,
      931,
      6601,
      3237,
      7,
      40664,
      62,
      6978,
      28,
      47690,
      62,
      34720,
      11,
      10662,
      8019,
      62,
      15908,
      28,
      9711,
      9865,
      62,
      34720,
      11,
      2291,
      62,
      25747,
      28,
      565,
      82,
      13,
      11674,
      3698,
      5258,
      8
    ],
    "start_token": 264,
    "end_token": 315,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      815,
      307,
      35644,
      286,
      663,
      4007,
      393,
      4069
    ],
    "label": "best_practice",
    "reason": "Method name should be descriptive of its purpose or behavior"
  },
  {
    "line": 40,
    "text": "        TestDumpData.STOCK_NAMES = list(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob(\"*.csv\")))",
    "annotation": "\u2705 Best Practice: Use of set to ensure unique elements",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6208,
      35,
      931,
      6601,
      13,
      2257,
      11290,
      62,
      45,
      29559,
      796,
      1351,
      7,
      8899,
      7,
      50033,
      2124,
      25,
      2124,
      13,
      3672,
      58,
      21912,
      19,
      4083,
      45828,
      22784,
      311,
      31033,
      62,
      34720,
      13,
      4743,
      672,
      7203,
      24620,
      40664,
      1,
      22305
    ],
    "start_token": 315,
    "end_token": 361,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      900,
      284,
      4155,
      3748,
      4847
    ],
    "label": "best_practice",
    "reason": "Use of set to ensure unique elements"
  },
  {
    "line": 46,
    "text": "        )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): File path manipulation can lead to security risks if not handled properly",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 361,
    "end_token": 369,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      9220,
      3108,
      17512,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "File path manipulation can lead to security risks if not handled properly"
  },
  {
    "line": 49,
    "text": "    def tearDownClass(cls) -> None:",
    "annotation": "\ud83e\udde0 ML Signal: Use of external data source (CSV file) for processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11626,
      8048,
      9487,
      7,
      565,
      82,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 369,
    "end_token": 383,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      7097,
      1366,
      2723,
      357,
      7902,
      53,
      2393,
      8,
      329,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of external data source (CSV file) for processing"
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of assert with a clear error message for debugging",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 383,
    "end_token": 383,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      351,
      257,
      1598,
      4049,
      3275,
      329,
      28769
    ],
    "label": "best_practice",
    "reason": "Use of assert with a clear error message for debugging"
  },
  {
    "line": 48,
    "text": "    @classmethod",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda function to transform data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      4871,
      24396
    ],
    "start_token": 383,
    "end_token": 389,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      2163,
      284,
      6121,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of lambda function to transform data"
  },
  {
    "line": 49,
    "text": "    def tearDownClass(cls) -> None:",
    "annotation": "\u2705 Best Practice: Use of set to ensure unique elements",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11626,
      8048,
      9487,
      7,
      565,
      82,
      8,
      4613,
      6045,
      25
    ],
    "start_token": 389,
    "end_token": 403,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      900,
      284,
      4155,
      3748,
      4847
    ],
    "label": "best_practice",
    "reason": "Use of set to ensure unique elements"
  },
  {
    "line": 51,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of external library function to list instruments",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 403,
    "end_token": 403,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      7097,
      5888,
      2163,
      284,
      1351,
      12834
    ],
    "label": "ml_signal",
    "reason": "Use of external library function to list instruments"
  },
  {
    "line": 53,
    "text": "        self.DUMP_DATA.dump()",
    "annotation": "\u2705 Best Practice: Use of assert statement for validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      35,
      20476,
      62,
      26947,
      13,
      39455,
      3419
    ],
    "start_token": 403,
    "end_token": 419,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6818,
      2643,
      329,
      21201
    ],
    "label": "best_practice",
    "reason": "Use of assert statement for validation"
  },
  {
    "line": 53,
    "text": "        self.DUMP_DATA.dump()",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method to extract features from data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      35,
      20476,
      62,
      26947,
      13,
      39455,
      3419
    ],
    "start_token": 419,
    "end_token": 435,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      284,
      7925,
      3033,
      422,
      1366
    ],
    "label": "ml_signal",
    "reason": "Use of a method to extract features from data"
  },
  {
    "line": 55,
    "text": "    def test_1_dump_calendars(self):",
    "annotation": "\ud83e\udde0 ML Signal: Storing a subset of data for testing or validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      16,
      62,
      39455,
      62,
      9948,
      44942,
      7,
      944,
      2599
    ],
    "start_token": 435,
    "end_token": 450,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      257,
      24637,
      286,
      1366,
      329,
      4856,
      393,
      21201
    ],
    "label": "ml_signal",
    "reason": "Storing a subset of data for testing or validation"
  },
  {
    "line": 57,
    "text": "            map(",
    "annotation": "\u2705 Best Practice: Using assertions to validate data integrity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3975,
      7
    ],
    "start_token": 450,
    "end_token": 463,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      29965,
      284,
      26571,
      1366,
      11540
    ],
    "label": "best_practice",
    "reason": "Using assertions to validate data integrity"
  },
  {
    "line": 59,
    "text": "                pd.read_csv(QLIB_DIR.joinpath(\"calendars\", \"day.txt\"), header=None).loc[:, 0].values,",
    "annotation": "\u2705 Best Practice: Ensuring the columns match expected fields",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      67,
      13,
      961,
      62,
      40664,
      7,
      9711,
      9865,
      62,
      34720,
      13,
      22179,
      6978,
      7203,
      9948,
      44942,
      1600,
      366,
      820,
      13,
      14116,
      12340,
      13639,
      28,
      14202,
      737,
      17946,
      58,
      45299,
      657,
      4083,
      27160,
      11
    ],
    "start_token": 463,
    "end_token": 512,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48221,
      870,
      262,
      15180,
      2872,
      2938,
      7032
    ],
    "label": "best_practice",
    "reason": "Ensuring the columns match expected fields"
  },
  {
    "line": 59,
    "text": "                pd.read_csv(QLIB_DIR.joinpath(\"calendars\", \"day.txt\"), header=None).loc[:, 0].values,",
    "annotation": "\ud83e\udde0 ML Signal: Accessing the first element of a list, indicating a pattern of using predefined or fixed data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      67,
      13,
      961,
      62,
      40664,
      7,
      9711,
      9865,
      62,
      34720,
      13,
      22179,
      6978,
      7203,
      9948,
      44942,
      1600,
      366,
      820,
      13,
      14116,
      12340,
      13639,
      28,
      14202,
      737,
      17946,
      58,
      45299,
      657,
      4083,
      27160,
      11
    ],
    "start_token": 512,
    "end_token": 561,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      262,
      717,
      5002,
      286,
      257,
      1351,
      11,
      12739,
      257,
      3912,
      286,
      1262,
      2747,
      18156,
      393,
      5969,
      1366
    ],
    "label": "ml_signal",
    "reason": "Accessing the first element of a list, indicating a pattern of using predefined or fixed data"
  },
  {
    "line": 63,
    "text": "        assert len(ori_calendars - res_calendars) == len(res_calendars - ori_calendars) == 0, \"dump calendars failed\"",
    "annotation": "\u2705 Best Practice: Using pathlib's joinpath for file paths improves cross-platform compatibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6818,
      18896,
      7,
      10145,
      62,
      9948,
      44942,
      532,
      581,
      62,
      9948,
      44942,
      8,
      6624,
      18896,
      7,
      411,
      62,
      9948,
      44942,
      532,
      22812,
      62,
      9948,
      44942,
      8,
      6624,
      657,
      11,
      366,
      39455,
      50215,
      4054,
      1
    ],
    "start_token": 561,
    "end_token": 602,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      3108,
      8019,
      338,
      4654,
      6978,
      329,
      2393,
      13532,
      19575,
      3272,
      12,
      24254,
      17764
    ],
    "label": "best_practice",
    "reason": "Using pathlib's joinpath for file paths improves cross-platform compatibility"
  },
  {
    "line": 66,
    "text": "        ori_ins = set(map(lambda x: x.name[:-4].upper(), SOURCE_DIR.glob(\"*.csv\")))",
    "annotation": "\ud83e\udde0 ML Signal: Using a method to extract features, indicating a pattern of feature engineering",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      22812,
      62,
      1040,
      796,
      900,
      7,
      8899,
      7,
      50033,
      2124,
      25,
      2124,
      13,
      3672,
      58,
      21912,
      19,
      4083,
      45828,
      22784,
      311,
      31033,
      62,
      34720,
      13,
      4743,
      672,
      7203,
      24620,
      40664,
      1,
      22305
    ],
    "start_token": 602,
    "end_token": 641,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      257,
      2446,
      284,
      7925,
      3033,
      11,
      12739,
      257,
      3912,
      286,
      3895,
      8705
    ],
    "label": "ml_signal",
    "reason": "Using a method to extract features, indicating a pattern of feature engineering"
  },
  {
    "line": 67,
    "text": "        res_ins = set(D.list_instruments(D.instruments(\"all\"), as_list=True))",
    "annotation": "\u2705 Best Practice: Providing a message in assertions helps in debugging test failures",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      581,
      62,
      1040,
      796,
      900,
      7,
      35,
      13,
      4868,
      62,
      259,
      2536,
      2886,
      7,
      35,
      13,
      259,
      2536,
      2886,
      7203,
      439,
      12340,
      355,
      62,
      4868,
      28,
      17821,
      4008
    ],
    "start_token": 641,
    "end_token": 676,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7518,
      2530,
      257,
      3275,
      287,
      29965,
      5419,
      287,
      28769,
      1332,
      15536
    ],
    "label": "best_practice",
    "reason": "Providing a message in assertions helps in debugging test failures"
  },
  {
    "line": 67,
    "text": "        res_ins = set(D.list_instruments(D.instruments(\"all\"), as_list=True))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using dropna() without specifying axis or threshold might lead to unintended data loss",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      581,
      62,
      1040,
      796,
      900,
      7,
      35,
      13,
      4868,
      62,
      259,
      2536,
      2886,
      7,
      35,
      13,
      259,
      2536,
      2886,
      7203,
      439,
      12340,
      355,
      62,
      4868,
      28,
      17821,
      4008
    ],
    "start_token": 676,
    "end_token": 711,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4268,
      2616,
      3419,
      1231,
      31577,
      16488,
      393,
      11387,
      1244,
      1085,
      284,
      30261,
      1366,
      2994
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using dropna() without specifying axis or threshold might lead to unintended data loss"
  },
  {
    "line": 67,
    "text": "        res_ins = set(D.list_instruments(D.instruments(\"all\"), as_list=True))",
    "annotation": "\u2705 Best Practice: Providing a message in assertions helps in debugging test failures",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      581,
      62,
      1040,
      796,
      900,
      7,
      35,
      13,
      4868,
      62,
      259,
      2536,
      2886,
      7,
      35,
      13,
      259,
      2536,
      2886,
      7203,
      439,
      12340,
      355,
      62,
      4868,
      28,
      17821,
      4008
    ],
    "start_token": 711,
    "end_token": 746,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7518,
      2530,
      257,
      3275,
      287,
      29965,
      5419,
      287,
      28769,
      1332,
      15536
    ],
    "label": "best_practice",
    "reason": "Providing a message in assertions helps in debugging test failures"
  },
  {
    "line": 67,
    "text": "        res_ins = set(D.list_instruments(D.instruments(\"all\"), as_list=True))",
    "annotation": "\u2705 Best Practice: Using unittest.main() for running tests is a standard practice",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      581,
      62,
      1040,
      796,
      900,
      7,
      35,
      13,
      4868,
      62,
      259,
      2536,
      2886,
      7,
      35,
      13,
      259,
      2536,
      2886,
      7203,
      439,
      12340,
      355,
      62,
      4868,
      28,
      17821,
      4008
    ],
    "start_token": 746,
    "end_token": 781,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      555,
      715,
      395,
      13,
      12417,
      3419,
      329,
      2491,
      5254,
      318,
      257,
      3210,
      3357
    ],
    "label": "best_practice",
    "reason": "Using unittest.main() for running tests is a standard practice"
  }
]
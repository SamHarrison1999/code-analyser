annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of @classmethod decorator to define a method that operates on the class itself rather than instances.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 4871, 24396, 11705, 1352, 284, 8160, 257, 2446, 326, 14051, 319, 262, 1398, 2346, 2138, 621, 10245, 13]",1.0,0,best_practice,10,Use of @classmethod decorator to define a method that operates on the class itself rather than instances.,,0,,[]
‚úÖ Best Practice: setUpClass is a standard method name in unittest for setting up class-level fixtures.,"[26486, 227, 6705, 19939, 25, 900, 4933, 9487, 318, 257, 3210, 2446, 1438, 287, 555, 715, 395, 329, 4634, 510, 1398, 12, 5715, 34609, 13]",0.5,6,best_practice,13,setUpClass is a standard method name in unittest for setting up class-level fixtures.,,0,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
"üß† ML Signal: Usage of class method to initialize class-level data, indicating a pattern for data setup in tests.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1398, 2446, 284, 41216, 1398, 12, 5715, 1366, 11, 12739, 257, 3912, 329, 1366, 9058, 287, 5254, 13]",0.5,35,ml_signal,15,"Usage of class method to initialize class-level data, indicating a pattern for data setup in tests.",,6,"        super().setUpClass(enable_1min=True, enable_1d_type=""full"")","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 2617, 4933, 9487, 7, 21633, 62, 16, 1084, 28, 17821, 11, 7139, 62, 16, 67, 62, 4906, 2625, 12853, 4943]"
‚úÖ Best Practice: Descriptive test method name indicating the purpose of the test.,"[26486, 227, 6705, 19939, 25, 2935, 6519, 425, 1332, 2446, 1438, 12739, 262, 4007, 286, 262, 1332, 13]",0.5,64,best_practice,15,Descriptive test method name indicating the purpose of the test.,,35,"        super().setUpClass(enable_1min=True, enable_1d_type=""full"")","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 2617, 4933, 9487, 7, 21633, 62, 16, 1084, 28, 17821, 11, 7139, 62, 16, 67, 62, 4906, 2625, 12853, 4943]"
"üß† ML Signal: Pattern of running a backtest with provided data, useful for identifying test execution in ML models.","[8582, 100, 254, 10373, 26484, 25, 23939, 286, 2491, 257, 736, 9288, 351, 2810, 1366, 11, 4465, 329, 13720, 1332, 9706, 287, 10373, 4981, 13]",0.5,78,ml_signal,21,"Pattern of running a backtest with provided data, useful for identifying test execution in ML models.",,64,"            ""amount"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 17287, 1600]"
"‚úÖ Best Practice: Assertion to ensure the result is not None, a common pattern in testing to validate outcomes.","[26486, 227, 6705, 19939, 25, 2195, 861, 295, 284, 4155, 262, 1255, 318, 407, 6045, 11, 257, 2219, 3912, 287, 4856, 284, 26571, 10906, 13]",0.5,92,best_practice,21,"Assertion to ensure the result is not None, a common pattern in testing to validate outcomes.",,78,"            ""amount"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 17287, 1600]"
"‚úÖ Best Practice: Assertion to check a specific attribute of the result, ensuring the test verifies expected behavior.","[26486, 227, 6705, 19939, 25, 2195, 861, 295, 284, 2198, 257, 2176, 11688, 286, 262, 1255, 11, 13359, 262, 1332, 3326, 6945, 2938, 4069, 13]",0.5,102,best_practice,24,"Assertion to check a specific attribute of the result, ensuring the test verifies expected behavior.",,92,        orders = [,"[220, 220, 220, 220, 220, 220, 220, 6266, 796, 685]"
‚úÖ Best Practice: Use of class method setup for initializing class-level fixtures,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 2446, 9058, 329, 4238, 2890, 1398, 12, 5715, 34609]",0.5,108,best_practice,13,Use of class method setup for initializing class-level fixtures,,102,    @classmethod,"[220, 220, 220, 2488, 4871, 24396]"
‚úÖ Best Practice: Calling super() to ensure proper initialization of the parent class,"[26486, 227, 6705, 19939, 25, 32677, 2208, 3419, 284, 4155, 1774, 37588, 286, 262, 2560, 1398]",0.5,137,best_practice,15,Calling super() to ensure proper initialization of the parent class,,108,"        super().setUpClass(enable_1min=True, enable_1d_type=""full"")","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 2617, 4933, 9487, 7, 21633, 62, 16, 1084, 28, 17821, 11, 7139, 62, 16, 67, 62, 4906, 2625, 12853, 4943]"
‚úÖ Best Practice: Define headers as a separate list for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 2896, 500, 24697, 355, 257, 4553, 1351, 329, 16287, 290, 5529, 1799]",0.5,166,best_practice,15,Define headers as a separate list for clarity and maintainability,,137,"        super().setUpClass(enable_1min=True, enable_1d_type=""full"")","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 2617, 4933, 9487, 7, 21633, 62, 16, 1084, 28, 17821, 11, 7139, 62, 16, 67, 62, 4906, 2625, 12853, 4943]"
‚úÖ Best Practice: Use a list of lists to define orders for flexibility in adding more orders,"[26486, 227, 6705, 19939, 25, 5765, 257, 1351, 286, 8341, 284, 8160, 6266, 329, 13688, 287, 4375, 517, 6266]",0.5,180,best_practice,21,Use a list of lists to define orders for flexibility in adding more orders,,166,"            ""amount"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 17287, 1600]"
"üß† ML Signal: Returns a DataFrame, indicating usage of pandas for data manipulation","[8582, 100, 254, 10373, 26484, 25, 16409, 257, 6060, 19778, 11, 12739, 8748, 286, 19798, 292, 329, 1366, 17512]",0.5,188,ml_signal,26,"Returns a DataFrame, indicating usage of pandas for data manipulation",,180,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `ret_val` is not properly initialized or expected keys are missing.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 1186, 62, 2100, 63, 318, 407, 6105, 23224, 393, 2938, 8251, 389, 4814, 13]",0.5,215,sast_risk,111,Potential risk if `ret_val` is not properly initialized or expected keys are missing.,Low,188,"                ""generate_portfolio_metrics"": False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 8612, 378, 62, 634, 13652, 62, 4164, 10466, 1298, 10352, 11]"
‚ö†Ô∏è SAST Risk (Low): `format_decisions` might expose sensitive decision data if not handled properly.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4600, 18982, 62, 12501, 3279, 63, 1244, 15651, 8564, 2551, 1366, 611, 407, 12118, 6105, 13]",0.5,242,sast_risk,113,`format_decisions` might expose sensitive decision data if not handled properly.,Low,215,"                    ""show_indicator"": True,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 12860, 62, 521, 26407, 1298, 6407, 11]"
‚ö†Ô∏è SAST Risk (Low): Printing sensitive information can lead to information leakage.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 8564, 1321, 460, 1085, 284, 1321, 47988, 13]",0.5,264,sast_risk,115,Printing sensitive information can lead to information leakage.,Low,242,"                ""track_data"": True,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 11659, 62, 7890, 1298, 6407, 11]"
"‚úÖ Best Practice: Use `if __name__ == ""__main__"":` to ensure the script runs as intended when executed directly.","[26486, 227, 6705, 19939, 25, 5765, 4600, 361, 11593, 3672, 834, 6624, 366, 834, 12417, 834, 1298, 63, 284, 4155, 262, 4226, 4539, 355, 5292, 618, 10945, 3264, 13]",0.5,286,best_practice,115,"Use `if __name__ == ""__main__"":` to ensure the script runs as intended when executed directly.",,264,"                ""track_data"": True,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 11659, 62, 7890, 1298, 6407, 11]"
‚úÖ Best Practice: Use `unittest.main()` to automatically run all test methods in the module.,"[26486, 227, 6705, 19939, 25, 5765, 4600, 403, 715, 395, 13, 12417, 3419, 63, 284, 6338, 1057, 477, 1332, 5050, 287, 262, 8265, 13]",0.5,308,best_practice,115,Use `unittest.main()` to automatically run all test methods in the module.,,286,"                ""track_data"": True,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 11659, 62, 7890, 1298, 6407, 11]"

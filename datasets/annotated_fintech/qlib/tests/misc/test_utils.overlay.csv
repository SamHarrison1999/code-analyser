annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Group imports from the same package together for better readability.,"[26486, 227, 6705, 19939, 25, 4912, 17944, 422, 262, 976, 5301, 1978, 329, 1365, 1100, 1799, 13]",0.5,7,best_practice,8,Group imports from the same package together for better readability.,,0,from qlib.config import C,"[6738, 10662, 8019, 13, 11250, 1330, 327]"
‚úÖ Best Practice: Group imports from the same package together for better readability.,"[26486, 227, 6705, 19939, 25, 4912, 17944, 422, 262, 976, 5301, 1978, 329, 1365, 1100, 1799, 13]",0.5,25,best_practice,10,Group imports from the same package together for better readability.,,7,"from qlib.constant import REG_CN, REG_US, REG_TW","[6738, 10662, 8019, 13, 9979, 415, 1330, 23337, 62, 44175, 11, 23337, 62, 2937, 11, 23337, 62, 34551]"
‚úÖ Best Practice: Group imports from the same package together for better readability.,"[26486, 227, 6705, 19939, 25, 4912, 17944, 422, 262, 976, 5301, 1978, 329, 1365, 1100, 1799, 13]",0.5,37,best_practice,12,Group imports from the same package together for better readability.,,25,from qlib.utils.data import guess_horizon,"[6738, 10662, 8019, 13, 26791, 13, 7890, 1330, 4724, 62, 17899, 8637]"
‚úÖ Best Practice: Group imports from the same package together for better readability.,"[26486, 227, 6705, 19939, 25, 4912, 17944, 422, 262, 976, 5301, 1978, 329, 1365, 1100, 1799, 13]",0.5,66,best_practice,14,Group imports from the same package together for better readability.,,37,"REG_MAP = {REG_CN: CN_TIME, REG_US: US_TIME, REG_TW: TW_TIME}","[31553, 62, 33767, 796, 1391, 31553, 62, 44175, 25, 31171, 62, 34694, 11, 23337, 62, 2937, 25, 1294, 62, 34694, 11, 23337, 62, 34551, 25, 17306, 62, 34694, 92]"
‚úÖ Best Practice: Group imports from the same package together for better readability.,"[26486, 227, 6705, 19939, 25, 4912, 17944, 422, 262, 976, 5301, 1978, 329, 1365, 1100, 1799, 13]",0.5,66,best_practice,15,Group imports from the same package together for better readability.,,66,,[]
üß† ML Signal: Use of constants and mappings can indicate feature engineering or data preprocessing steps.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 38491, 290, 285, 39242, 460, 7603, 3895, 8705, 393, 1366, 662, 36948, 4831, 13]",0.5,66,ml_signal,15,Use of constants and mappings can indicate feature engineering or data preprocessing steps.,,66,,[]
‚úÖ Best Practice: Use of pd.Timestamp to ensure date consistency,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 14967, 27823, 284, 4155, 3128, 15794]",1.0,99,best_practice,22,Use of pd.Timestamp to ensure date consistency,,66,        - mid open time of stock market is [13:00 - shift*pd.Timedelta(minutes=1)],"[220, 220, 220, 220, 220, 220, 220, 532, 3095, 1280, 640, 286, 4283, 1910, 318, 685, 1485, 25, 405, 532, 6482, 9, 30094, 13, 14967, 276, 12514, 7, 1084, 1769, 28, 16, 15437]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if C.min_data_shift is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 327, 13, 1084, 62, 7890, 62, 30846, 318, 407, 31031]",0.5,103,sast_risk,24,Potential risk if C.min_data_shift is not validated,Low,99,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if REG_MAP does not contain the region,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 23337, 62, 33767, 857, 407, 3994, 262, 3814]",0.5,122,sast_risk,25,Potential risk if REG_MAP does not contain the region,Low,103,"    # TODO: actually, this version is much faster when no cache or optimization","[220, 220, 220, 1303, 16926, 46, 25, 1682, 11, 428, 2196, 318, 881, 5443, 618, 645, 12940, 393, 23989]"
‚úÖ Best Practice: Use of pd.Timedelta for time calculations,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 14967, 276, 12514, 329, 640, 16765]",1.0,130,best_practice,30,Use of pd.Timedelta for time calculations,,122,    open_time = (,"[220, 220, 220, 1280, 62, 2435, 796, 357]"
‚úÖ Best Practice: Use of pd.Timedelta for time calculations,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 14967, 276, 12514, 329, 640, 16765]",1.0,138,best_practice,35,Use of pd.Timedelta for time calculations,,130,    close_time = (,"[220, 220, 220, 1969, 62, 2435, 796, 357]"
‚úÖ Best Practice: Use of pd.Timedelta for time calculations,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 14967, 276, 12514, 329, 640, 16765]",1.0,152,best_practice,41,Use of pd.Timedelta for time calculations,,138,        mid_close_time = (,"[220, 220, 220, 220, 220, 220, 220, 3095, 62, 19836, 62, 2435, 796, 357]"
‚úÖ Best Practice: Use of pd.Timedelta for time calculations,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 14967, 276, 12514, 329, 640, 16765]",1.0,166,best_practice,47,Use of pd.Timedelta for time calculations,,152,            day_time,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1110, 62, 2435]"
üß† ML Signal: Conditional logic based on time ranges,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 640, 16069]",0.5,187,ml_signal,56,Conditional logic based on time ranges,,166,        minute_index = (x - open_time).seconds // 60,"[220, 220, 220, 220, 220, 220, 220, 5664, 62, 9630, 796, 357, 87, 532, 1280, 62, 2435, 737, 43012, 3373, 3126]"
‚úÖ Best Practice: Use of integer division for minute calculation,"[26486, 227, 6705, 19939, 25, 5765, 286, 18253, 7297, 329, 5664, 17952]",1.0,212,best_practice,58,Use of integer division for minute calculation,,187,        minute_index = (x - mid_open_time).seconds // 60 + 120,"[220, 220, 220, 220, 220, 220, 220, 5664, 62, 9630, 796, 357, 87, 532, 3095, 62, 9654, 62, 2435, 737, 43012, 3373, 3126, 1343, 7982]"
‚úÖ Best Practice: Use of integer division for minute calculation,"[26486, 227, 6705, 19939, 25, 5765, 286, 18253, 7297, 329, 5664, 17952]",1.0,212,best_practice,61,Use of integer division for minute calculation,,212,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if x is out of expected range,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 2124, 318, 503, 286, 2938, 2837]",0.5,232,sast_risk,64,Potential risk if x is out of expected range,Low,212,    if 0 <= minute_index < 120 or region_time != CN_TIME:,"[220, 220, 220, 611, 657, 19841, 5664, 62, 9630, 1279, 7982, 393, 3814, 62, 2435, 14512, 31171, 62, 34694, 25]"
‚úÖ Best Practice: Use of integer division for minute calculation,"[26486, 227, 6705, 19939, 25, 5765, 286, 18253, 7297, 329, 5664, 17952]",1.0,245,best_practice,66,Use of integer division for minute calculation,,232,    elif 120 <= minute_index < 240:,"[220, 220, 220, 1288, 361, 7982, 19841, 5664, 62, 9630, 1279, 14956, 25]"
üß† ML Signal: Conditional logic based on minute_index and region_time,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 5664, 62, 9630, 290, 3814, 62, 2435]",0.5,250,ml_signal,68,Conditional logic based on minute_index and region_time,,245,    else:,"[220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of pd.Timedelta for time calculations,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 14967, 276, 12514, 329, 640, 16765]",1.0,250,best_practice,70,Use of pd.Timedelta for time calculations,,250,,[]
‚úÖ Best Practice: Use of pd.Timedelta for time calculations,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 14967, 276, 12514, 329, 640, 16765]",1.0,258,best_practice,72,Use of pd.Timedelta for time calculations,,250,class TimeUtils(TestCase):,"[4871, 3862, 18274, 4487, 7, 14402, 20448, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if minute_index is out of expected range,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 5664, 62, 9630, 318, 503, 286, 2938, 2837]",0.5,266,sast_risk,72,Potential risk if minute_index is out of expected range,Low,258,class TimeUtils(TestCase):,"[4871, 3862, 18274, 4487, 7, 14402, 20448, 2599]"
‚úÖ Best Practice: Use of classmethod decorator for methods that operate on the class itself,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 24396, 11705, 1352, 329, 5050, 326, 8076, 319, 262, 1398, 2346]",1.0,286,best_practice,62,Use of classmethod decorator for methods that operate on the class itself,,266,    minute_index = minute_index // sam_minutes * sam_minutes,"[220, 220, 220, 5664, 62, 9630, 796, 5664, 62, 9630, 3373, 6072, 62, 1084, 1769, 1635, 6072, 62, 1084, 1769]"
‚úÖ Best Practice: Setting up class-level resources for tests,"[26486, 227, 6705, 19939, 25, 25700, 510, 1398, 12, 5715, 4133, 329, 5254]",1.0,314,best_practice,65,Setting up class-level resources for tests,,286,        return open_time + minute_index * pd.Timedelta(minutes=1),"[220, 220, 220, 220, 220, 220, 220, 1441, 1280, 62, 2435, 1343, 5664, 62, 9630, 1635, 279, 67, 13, 14967, 276, 12514, 7, 1084, 1769, 28, 16, 8]"
‚úÖ Best Practice: Setting up instance-level resources for tests,"[26486, 227, 6705, 19939, 25, 25700, 510, 4554, 12, 5715, 4133, 329, 5254]",1.0,348,best_practice,69,Setting up instance-level resources for tests,,314,"        raise ValueError(""calendar minute_index error, check `min_data_shift` in qlib.config.C"")","[220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 9948, 9239, 5664, 62, 9630, 4049, 11, 2198, 4600, 1084, 62, 7890, 62, 30846, 63, 287, 10662, 8019, 13, 11250, 13, 34, 4943]"
"üß† ML Signal: Test method that checks time elapsed, useful for performance testing patterns","[8582, 100, 254, 10373, 26484, 25, 6208, 2446, 326, 8794, 640, 42118, 11, 4465, 329, 2854, 4856, 7572]",0.5,356,ml_signal,72,"Test method that checks time elapsed, useful for performance testing patterns",,348,class TimeUtils(TestCase):,"[4871, 3862, 18274, 4487, 7, 14402, 20448, 2599]"
‚úÖ Best Practice: Asserting conditions in tests to validate behavior,"[26486, 227, 6705, 19939, 25, 2195, 861, 278, 3403, 287, 5254, 284, 26571, 4069]",1.0,364,best_practice,72,Asserting conditions in tests to validate behavior,,356,class TimeUtils(TestCase):,"[4871, 3862, 18274, 4487, 7, 14402, 20448, 2599]"
‚úÖ Best Practice: Cleaning up resources after each test,"[26486, 227, 6705, 19939, 25, 5985, 278, 510, 4133, 706, 1123, 1332]",0.5,396,best_practice,83,Cleaning up resources after each test,,364,"            for time in np.random.choice(cal, size=random_n, replace=True):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 640, 287, 45941, 13, 25120, 13, 25541, 7, 9948, 11, 2546, 28, 25120, 62, 77, 11, 6330, 28, 17821, 2599]"
‚úÖ Best Practice: Cleaning up class-level resources after all tests,"[26486, 227, 6705, 19939, 25, 5985, 278, 510, 1398, 12, 5715, 4133, 706, 477, 5254]",1.0,434,best_practice,84,Cleaning up class-level resources after all tests,,396,"                sam_minutes = np.random.choice([1, 2, 3, 4, 5, 6])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6072, 62, 1084, 1769, 796, 45941, 13, 25120, 13, 25541, 26933, 16, 11, 362, 11, 513, 11, 604, 11, 642, 11, 718, 12962]"
‚úÖ Best Practice: Use of setUpClass for initializing resources for test cases,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 4933, 9487, 329, 4238, 2890, 4133, 329, 1332, 2663]",0.5,454,best_practice,64,Use of setUpClass for initializing resources for test cases,,434,    if 0 <= minute_index < 120 or region_time != CN_TIME:,"[220, 220, 220, 611, 657, 19841, 5664, 62, 9630, 1279, 7982, 393, 3814, 62, 2435, 14512, 31171, 62, 34694, 25]"
‚ö†Ô∏è SAST Risk (Low): init() function call without context; ensure it's safe and intended,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2315, 3419, 2163, 869, 1231, 4732, 26, 4155, 340, 338, 3338, 290, 5292]",0.5,467,sast_risk,66,init() function call without context; ensure it's safe and intended,Low,454,    elif 120 <= minute_index < 240:,"[220, 220, 220, 1288, 361, 7982, 19841, 5664, 62, 9630, 1279, 14956, 25]"
"üß† ML Signal: Use of a list to store region constants, indicating a pattern of handling multiple regions","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1351, 284, 3650, 3814, 38491, 11, 12739, 257, 3912, 286, 9041, 3294, 7652]",0.5,472,ml_signal,68,"Use of a list to store region constants, indicating a pattern of handling multiple regions",,467,    else:,"[220, 220, 220, 2073, 25]"
"üß† ML Signal: Use of np.random.choice indicates random sampling, which is a common pattern in data generation","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 45941, 13, 25120, 13, 25541, 9217, 4738, 19232, 11, 543, 318, 257, 2219, 3912, 287, 1366, 5270]",0.5,472,ml_signal,70,"Use of np.random.choice indicates random sampling, which is a common pattern in data generation",,472,,[]
üß† ML Signal: Random choice of sample minutes suggests variability in generated data,"[8582, 100, 254, 10373, 26484, 25, 14534, 3572, 286, 6291, 2431, 5644, 25364, 287, 7560, 1366]",1.0,480,ml_signal,72,Random choice of sample minutes suggests variability in generated data,,472,class TimeUtils(TestCase):,"[4871, 3862, 18274, 4487, 7, 14402, 20448, 2599]"
‚úÖ Best Practice: Use of pd.Timestamp for datetime creation is clear and concise,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 14967, 27823, 329, 4818, 8079, 6282, 318, 1598, 290, 35327]",1.0,488,best_practice,72,Use of pd.Timestamp for datetime creation is clear and concise,,480,class TimeUtils(TestCase):,"[4871, 3862, 18274, 4487, 7, 14402, 20448, 2599]"
üß† ML Signal: Yielding arguments is a pattern for generator functions,"[8582, 100, 254, 10373, 26484, 25, 575, 30449, 7159, 318, 257, 3912, 329, 17301, 5499]",0.5,513,ml_signal,87,Yielding arguments is a pattern for generator functions,,488,"                        2021,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 33448, 11]"
üß† ML Signal: Iterating over regions suggests a pattern of processing data by geographical or logical segments,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 7652, 5644, 257, 3912, 286, 7587, 1366, 416, 27465, 393, 12219, 17894]",0.5,542,ml_signal,90,Iterating over regions suggests a pattern of processing data by geographical or logical segments,,513,"                        hour=time.hour,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1711, 28, 2435, 13, 9769, 11]"
‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks can be disabled in optimized mode,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 460, 307, 10058, 287, 23392, 4235]",1.0,573,sast_risk,93,Use of assert for runtime checks can be disabled in optimized mode,Low,542,"                        microsecond=time.microsecond,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4580, 12227, 28, 2435, 13, 24055, 12227, 11]"
‚úÖ Best Practice: Converting generator to list for repeated iteration improves readability,"[26486, 227, 6705, 19939, 25, 35602, 889, 17301, 284, 1351, 329, 5100, 24415, 19575, 1100, 1799]",1.0,589,best_practice,95,Converting generator to list for repeated iteration improves readability,,573,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Function call within a loop indicates repeated operations on data,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 1626, 257, 9052, 9217, 5100, 4560, 319, 1366]",1.0,601,ml_signal,99,Function call within a loop indicates repeated operations on data,,589,        for region in regions:,"[220, 220, 220, 220, 220, 220, 220, 329, 3814, 287, 7652, 25]"
üß† ML Signal: Function call within a loop indicates repeated operations on data,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 1626, 257, 9052, 9217, 5100, 4560, 319, 1366]",1.0,601,ml_signal,103,Function call within a loop indicates repeated operations on data,,601,,[]
‚úÖ Best Practice: Use of classmethod for methods that operate on the class itself rather than instances,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 24396, 329, 5050, 326, 8076, 319, 262, 1398, 2346, 2138, 621, 10245]",1.0,625,best_practice,96,Use of classmethod for methods that operate on the class itself rather than instances,,601,"                args = dt, sam_minutes","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 26498, 796, 288, 83, 11, 6072, 62, 1084, 1769]"
üß† ML Signal: Test methods often indicate expected behavior and usage patterns,"[8582, 100, 254, 10373, 26484, 25, 6208, 5050, 1690, 7603, 2938, 4069, 290, 8748, 7572]",0.5,625,ml_signal,103,Test methods often indicate expected behavior and usage patterns,,625,,[]
‚ö†Ô∏è SAST Risk (Low): Directly appending to a list without validation can lead to unexpected data types,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 598, 1571, 284, 257, 1351, 1231, 21201, 460, 1085, 284, 10059, 1366, 3858]",0.5,650,sast_risk,105,Directly appending to a list without validation can lead to unexpected data types,Low,625,            args_l = list(gen_args(cal_time)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 26498, 62, 75, 796, 1351, 7, 5235, 62, 22046, 7, 9948, 62, 2435, 4008]"
‚úÖ Best Practice: Incrementing an index variable to track the number of elements,"[26486, 227, 6705, 19939, 25, 10791, 434, 278, 281, 6376, 7885, 284, 2610, 262, 1271, 286, 4847]",0.5,670,best_practice,107,Incrementing an index variable to track the number of elements,,650,            with TimeInspector.logt():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 3862, 818, 4443, 273, 13, 6404, 83, 33529]"
üß† ML Signal: Test methods often indicate expected behavior and usage patterns,"[8582, 100, 254, 10373, 26484, 25, 6208, 5050, 1690, 7603, 2938, 4069, 290, 8748, 7572]",0.5,670,ml_signal,110,Test methods often indicate expected behavior and usage patterns,,670,,[]
‚ö†Ô∏è SAST Risk (Low): Popping from a list without checking if it's empty can raise an IndexError,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7695, 2105, 422, 257, 1351, 1231, 10627, 611, 340, 338, 6565, 460, 5298, 281, 12901, 12331]",0.5,690,sast_risk,111,Popping from a list without checking if it's empty can raise an IndexError,Low,670,            with TimeInspector.logt():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 3862, 818, 4443, 273, 13, 6404, 83, 33529]"
‚úÖ Best Practice: Decrementing an index variable to track the number of elements,"[26486, 227, 6705, 19939, 25, 36400, 434, 278, 281, 6376, 7885, 284, 2610, 262, 1271, 286, 4847]",0.5,710,best_practice,111,Decrementing an index variable to track the number of elements,,690,            with TimeInspector.logt():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 3862, 818, 4443, 273, 13, 6404, 83, 33529]"
üß† ML Signal: Test methods often indicate expected behavior and usage patterns,"[8582, 100, 254, 10373, 26484, 25, 6208, 5050, 1690, 7603, 2938, 4069, 290, 8748, 7572]",0.5,730,ml_signal,111,Test methods often indicate expected behavior and usage patterns,,710,            with TimeInspector.logt():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 3862, 818, 4443, 273, 13, 6404, 83, 33529]"
‚úÖ Best Practice: Using clear() to remove all items from a list is more efficient than removing items one by one,"[26486, 227, 6705, 19939, 25, 8554, 1598, 3419, 284, 4781, 477, 3709, 422, 257, 1351, 318, 517, 6942, 621, 10829, 3709, 530, 416, 530]",0.5,750,best_practice,111,Using clear() to remove all items from a list is more efficient than removing items one by one,,730,            with TimeInspector.logt():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 3862, 818, 4443, 273, 13, 6404, 83, 33529]"
‚úÖ Best Practice: Resetting the index to 0 after clearing the list,"[26486, 227, 6705, 19939, 25, 30027, 889, 262, 6376, 284, 657, 706, 17304, 262, 1351]",0.5,770,best_practice,111,Resetting the index to 0 after clearing the list,,750,            with TimeInspector.logt():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 3862, 818, 4443, 273, 13, 6404, 83, 33529]"
‚úÖ Best Practice: Use of setUpClass for initializing resources for test cases,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 4933, 9487, 329, 4238, 2890, 4133, 329, 1332, 2663]",1.0,770,best_practice,98,Use of setUpClass for initializing resources for test cases,,770,,[]
‚ö†Ô∏è SAST Risk (Medium): Calling an undefined function 'init' could lead to runtime errors if 'init' is not imported or defined elsewhere,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32677, 281, 28721, 2163, 705, 15003, 6, 714, 1085, 284, 19124, 8563, 611, 705, 15003, 6, 318, 407, 17392, 393, 5447, 8057]",0.5,795,sast_risk,100,Calling an undefined function 'init' could lead to runtime errors if 'init' is not imported or defined elsewhere,Medium,770,            cal_time = get_min_cal(region=region),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2386, 62, 2435, 796, 651, 62, 1084, 62, 9948, 7, 36996, 28, 36996, 8]"
üß† ML Signal: Use of financial time series data pattern in labels,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3176, 640, 2168, 1366, 3912, 287, 14722]",0.5,836,ml_signal,102,Use of financial time series data pattern in labels,,795,"                assert cal_sam_minute(*args, region) == cal_sam_minute_new(*args, region=region)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6818, 2386, 62, 37687, 62, 11374, 46491, 22046, 11, 3814, 8, 6624, 2386, 62, 37687, 62, 11374, 62, 3605, 46491, 22046, 11, 3814, 28, 36996, 8]"
‚úÖ Best Practice: Use of assert statements for testing expected outcomes,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 6299, 329, 4856, 2938, 10906]",0.5,854,best_practice,104,Use of assert statements for testing expected outcomes,,836,            # test the performance of the code,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 1332, 262, 2854, 286, 262, 2438]"
üß† ML Signal: Use of financial time series data pattern in labels,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3176, 640, 2168, 1366, 3912, 287, 14722]",0.5,874,ml_signal,107,Use of financial time series data pattern in labels,,854,            with TimeInspector.logt():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 3862, 818, 4443, 273, 13, 6404, 83, 33529]"
‚úÖ Best Practice: Use of assert statements for testing expected outcomes,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 6299, 329, 4856, 2938, 10906]",0.5,905,best_practice,109,Use of assert statements for testing expected outcomes,,874,"                    cal_sam_minute(*args, region=region)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2386, 62, 37687, 62, 11374, 46491, 22046, 11, 3814, 28, 36996, 8]"
üß† ML Signal: Use of financial time series data pattern in labels,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3176, 640, 2168, 1366, 3912, 287, 14722]",0.5,925,ml_signal,111,Use of financial time series data pattern in labels,,905,            with TimeInspector.logt():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 3862, 818, 4443, 273, 13, 6404, 83, 33529]"
‚úÖ Best Practice: Use of assert statements for testing expected outcomes,"[26486, 227, 6705, 19939, 25, 5765, 286, 6818, 6299, 329, 4856, 2938, 10906]",0.5,945,best_practice,111,Use of assert statements for testing expected outcomes,,925,            with TimeInspector.logt():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 3862, 818, 4443, 273, 13, 6404, 83, 33529]"
‚úÖ Best Practice: Standard way to run unit tests in Python,"[26486, 227, 6705, 19939, 25, 8997, 835, 284, 1057, 4326, 5254, 287, 11361]",0.5,965,best_practice,111,Standard way to run unit tests in Python,,945,            with TimeInspector.logt():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 3862, 818, 4443, 273, 13, 6404, 83, 33529]"

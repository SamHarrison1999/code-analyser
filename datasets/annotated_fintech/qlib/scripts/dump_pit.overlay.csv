annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of fire library for creating CLIs easily,"[26486, 227, 6705, 19939, 25, 5765, 286, 2046, 5888, 329, 4441, 7852, 3792, 3538]",0.5,5,best_practice,12,Use of fire library for creating CLIs easily,,0,from typing import Iterable,"[6738, 19720, 1330, 40806, 540]"
‚úÖ Best Practice: Use of pandas for data manipulation,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 329, 1366, 17512]",0.5,16,best_practice,14,Use of pandas for data manipulation,,5,from concurrent.futures import ProcessPoolExecutor,"[6738, 24580, 13, 69, 315, 942, 1330, 10854, 27201, 23002, 38409]"
‚úÖ Best Practice: Use of tqdm for progress bar in loops,"[26486, 227, 6705, 19939, 25, 5765, 286, 256, 80, 36020, 329, 4371, 2318, 287, 23607]",0.5,18,best_practice,16,Use of tqdm for progress bar in loops,,16,import fire,"[11748, 2046]"
‚úÖ Best Practice: Use of loguru for logging,"[26486, 227, 6705, 19939, 25, 5765, 286, 2604, 14717, 329, 18931]",0.5,26,best_practice,18,Use of loguru for logging,,18,from tqdm import tqdm,"[6738, 256, 80, 36020, 1330, 256, 80, 36020]"
üß† ML Signal: Importing specific functions from a module,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265]",0.5,44,ml_signal,20,Importing specific functions from a module,,26,"from qlib.utils import fname_to_code, get_period_offset","[6738, 10662, 8019, 13, 26791, 1330, 277, 3672, 62, 1462, 62, 8189, 11, 651, 62, 41007, 62, 28968]"
üß† ML Signal: Importing specific configuration from a module,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 8398, 422, 257, 8265]",0.5,44,ml_signal,22,Importing specific configuration from a module,,44,,[]
"üß† ML Signal: Class definition for data handling, indicating a pattern for data processing","[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 329, 1366, 9041, 11, 12739, 257, 3912, 329, 1366, 7587]",0.5,52,ml_signal,18,"Class definition for data handling, indicating a pattern for data processing",,44,from tqdm import tqdm,"[6738, 256, 80, 36020, 1330, 256, 80, 36020]"
üß† ML Signal: Constants for directory and file naming conventions,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 329, 8619, 290, 2393, 19264, 21396]",0.5,70,ml_signal,20,Constants for directory and file naming conventions,,52,"from qlib.utils import fname_to_code, get_period_offset","[6738, 10662, 8019, 13, 26791, 1330, 277, 3672, 62, 1462, 62, 8189, 11, 651, 62, 41007, 62, 28968]"
üß† ML Signal: Constants for CSV file handling,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 329, 44189, 2393, 9041]",0.5,70,ml_signal,22,Constants for CSV file handling,,70,,[]
üß† ML Signal: Constants for file suffixes,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 329, 2393, 35488, 274]",0.5,77,ml_signal,24,Constants for file suffixes,,70,class DumpPitData:,"[4871, 360, 931, 47, 270, 6601, 25]"
üß† ML Signal: Constants for data intervals,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 329, 1366, 20016]",0.5,91,ml_signal,27,Constants for data intervals,,77,"    DATA_FILE_SUFFIX = "".data""","[220, 220, 220, 42865, 62, 25664, 62, 12564, 5777, 10426, 796, 27071, 7890, 1]"
üß† ML Signal: Usage of external configuration for data types,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 8398, 329, 1366, 3858]",0.5,105,ml_signal,27,Usage of external configuration for data types,,91,"    DATA_FILE_SUFFIX = "".data""","[220, 220, 220, 42865, 62, 25664, 62, 12564, 5777, 10426, 796, 27071, 7890, 1]"
üß† ML Signal: Concatenation of data types for structured data,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 341, 286, 1366, 3858, 329, 20793, 1366]",0.5,117,ml_signal,35,Concatenation of data types for structured data,,105,"    DATA_DTYPE = """".join(","[220, 220, 220, 42865, 62, 35, 25216, 796, 366, 1911, 22179, 7]"
üß† ML Signal: Handling of missing data with a specific constant,"[8582, 100, 254, 10373, 26484, 25, 49500, 286, 4814, 1366, 351, 257, 2176, 6937]",0.5,125,ml_signal,41,Handling of missing data with a specific constant,,117,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Calculation of data type sizes for structured data,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 1366, 2099, 10620, 329, 20793, 1366]",0.5,133,ml_signal,41,Calculation of data type sizes for structured data,,125,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Constants for operational modes,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 329, 13919, 12881]",0.5,141,ml_signal,41,Constants for operational modes,,133,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
‚úÖ Best Practice: Check if exclude_fields is a string before splitting,"[26486, 227, 6705, 19939, 25, 6822, 611, 19607, 62, 25747, 318, 257, 4731, 878, 26021]",0.5,155,best_practice,82,Check if exclude_fields is a string before splitting,,141,            number of threads,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1271, 286, 14390]"
‚úÖ Best Practice: Check if include_fields is a string before splitting,"[26486, 227, 6705, 19939, 25, 6822, 611, 2291, 62, 25747, 318, 257, 4731, 878, 26021]",0.5,173,best_practice,85,Check if include_fields is a string before splitting,,155,"        file_suffix: str, default "".csv""","[220, 220, 220, 220, 220, 220, 220, 2393, 62, 37333, 844, 25, 965, 11, 4277, 27071, 40664, 1]"
‚úÖ Best Practice: Use tuple and filter to ensure fields are non-empty and stripped,"[26486, 227, 6705, 19939, 25, 5765, 46545, 290, 8106, 284, 4155, 7032, 389, 1729, 12, 28920, 290, 18818]",0.5,186,best_practice,88,Use tuple and filter to ensure fields are non-empty and stripped,,173,            dump fields,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10285, 7032]"
‚úÖ Best Practice: Use tuple and filter to ensure fields are non-empty and stripped,"[26486, 227, 6705, 19939, 25, 5765, 46545, 290, 8106, 284, 4155, 7032, 389, 1729, 12, 28920, 290, 18818]",0.5,200,best_practice,90,Use tuple and filter to ensure fields are non-empty and stripped,,186,            fields not dumped,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7032, 407, 24105]"
üß† ML Signal: Usage of sorted and glob to list files in a directory,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 23243, 290, 15095, 284, 1351, 3696, 287, 257, 8619]",0.5,208,ml_signal,93,Usage of sorted and glob to list files in a directory,,200,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Check if limit_nums is not None before slicing,"[26486, 227, 6705, 19939, 25, 6822, 611, 4179, 62, 77, 5700, 318, 407, 6045, 878, 49289]",0.5,226,best_practice,95,Check if limit_nums is not None before slicing,,208,"        if isinstance(exclude_fields, str):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 1069, 9152, 62, 25747, 11, 965, 2599]"
‚úÖ Best Practice: Use Path.expanduser for consistent path handling,"[26486, 227, 6705, 19939, 25, 5765, 10644, 13, 11201, 392, 7220, 329, 6414, 3108, 9041]",0.5,264,best_practice,99,Use Path.expanduser for consistent path handling,,226,"        self._exclude_fields = tuple(filter(lambda x: len(x) > 0, map(str.strip, exclude_fields)))","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 1069, 9152, 62, 25747, 796, 46545, 7, 24455, 7, 50033, 2124, 25, 18896, 7, 87, 8, 1875, 657, 11, 3975, 7, 2536, 13, 36311, 11, 19607, 62, 25747, 22305]"
‚úÖ Best Practice: Check if backup_dir is not None before calling backup method,"[26486, 227, 6705, 19939, 25, 6822, 611, 11559, 62, 15908, 318, 407, 6045, 878, 4585, 11559, 2446]",0.5,282,best_practice,101,Check if backup_dir is not None before calling backup method,,264,        self.file_suffix = file_suffix,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 7753, 62, 37333, 844, 796, 2393, 62, 37333, 844]"
‚ö†Ô∏è SAST Risk (Medium): Using shutil.copytree without exception handling can lead to unhandled exceptions if the source or target directories are invalid or inaccessible.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 4423, 346, 13, 30073, 21048, 1231, 6631, 9041, 460, 1085, 284, 555, 38788, 13269, 611, 262, 2723, 393, 2496, 29196, 389, 12515, 393, 40604, 13]",0.5,332,sast_risk,102,Using shutil.copytree without exception handling can lead to unhandled exceptions if the source or target directories are invalid or inaccessible.,Medium,282,"        self.csv_files = sorted(csv_path.glob(f""*{self.file_suffix}"") if csv_path.is_dir() else [csv_path])","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 40664, 62, 16624, 796, 23243, 7, 40664, 62, 6978, 13, 4743, 672, 7, 69, 1, 9, 90, 944, 13, 7753, 62, 37333, 844, 92, 4943, 611, 269, 21370, 62, 6978, 13, 271, 62, 15908, 3419, 2073, 685, 40664, 62, 6978, 12962]"
‚úÖ Best Practice: Consider adding exception handling to manage potential errors during the copy process.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 6631, 9041, 284, 6687, 2785, 8563, 1141, 262, 4866, 1429, 13]",0.5,348,best_practice,103,Consider adding exception handling to manage potential errors during the copy process.,,332,        if limit_nums is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 4179, 62, 77, 5700, 318, 407, 6045, 25]"
"üß† ML Signal: Usage of shutil.copytree indicates a pattern of directory duplication, which can be a feature for ML models to learn about file operations.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4423, 346, 13, 30073, 21048, 9217, 257, 3912, 286, 8619, 50124, 11, 543, 460, 307, 257, 3895, 329, 10373, 4981, 284, 2193, 546, 2393, 4560, 13]",0.5,373,ml_signal,105,"Usage of shutil.copytree indicates a pattern of directory duplication, which can be a feature for ML models to learn about file operations.",,348,        self.qlib_dir = Path(qlib_dir).expanduser(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 80, 8019, 62, 15908, 796, 10644, 7, 80, 8019, 62, 15908, 737, 11201, 392, 7220, 3419]"
‚úÖ Best Practice: Type hinting for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,404,best_practice,104,Type hinting for the return type improves code readability and maintainability,,373,            self.csv_files = self.csv_files[: int(limit_nums)],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 40664, 62, 16624, 796, 2116, 13, 40664, 62, 16624, 58, 25, 493, 7, 32374, 62, 77, 5700, 15437]"
üß† ML Signal: Usage of pandas to read CSV files is a common pattern in data processing tasks,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 284, 1100, 44189, 3696, 318, 257, 2219, 3912, 287, 1366, 7587, 8861]",1.0,439,ml_signal,106,Usage of pandas to read CSV files is a common pattern in data processing tasks,,404,        self.backup_dir = backup_dir if backup_dir is None else Path(backup_dir).expanduser(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1891, 929, 62, 15908, 796, 11559, 62, 15908, 611, 11559, 62, 15908, 318, 6045, 2073, 10644, 7, 1891, 929, 62, 15908, 737, 11201, 392, 7220, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potential for large memory usage if the CSV file is very large,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1588, 4088, 8748, 611, 262, 44189, 2393, 318, 845, 1588]",0.5,454,sast_risk,107,Potential for large memory usage if the CSV file is very large,Low,439,        if backup_dir is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 11559, 62, 15908, 318, 407, 6045, 25]"
üß† ML Signal: Converting data types to optimize memory usage is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 1366, 3858, 284, 27183, 4088, 8748, 318, 257, 2219, 3912]",0.5,454,ml_signal,109,Converting data types to optimize memory usage is a common pattern,,454,,[]
‚ö†Ô∏è SAST Risk (Low): Assumes date_column_name exists and is in the expected format,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 3128, 62, 28665, 62, 3672, 7160, 290, 318, 287, 262, 2938, 5794]",0.5,474,sast_risk,111,Assumes date_column_name exists and is in the expected format,Low,454,        self.date_column_name = date_column_name,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 4475, 62, 28665, 62, 3672, 796, 3128, 62, 28665, 62, 3672]"
‚úÖ Best Practice: Type hinting for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,474,best_practice,109,Type hinting for the return type improves code readability and maintainability,,474,,[]
üß† ML Signal: Usage of string slicing and manipulation to extract information from a file name,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4731, 49289, 290, 17512, 284, 7925, 1321, 422, 257, 2393, 1438]",0.5,494,ml_signal,111,Usage of string slicing and manipulation to extract information from a file name,,474,        self.date_column_name = date_column_name,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 4475, 62, 28665, 62, 3672, 796, 3128, 62, 28665, 62, 3672]"
üß† ML Signal: Use of a method to convert file names to a specific code format,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 284, 10385, 2393, 3891, 284, 257, 2176, 2438, 5794]",0.5,514,ml_signal,112,Use of a method to convert file names to a specific code format,,494,        self.period_column_name = period_column_name,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 41007, 62, 28665, 62, 3672, 796, 2278, 62, 28665, 62, 3672]"
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,534,best_practice,111,Type hinting improves code readability and maintainability,,514,        self.date_column_name = date_column_name,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 4475, 62, 28665, 62, 3672, 796, 3128, 62, 28665, 62, 3672]"
‚úÖ Best Practice: Using set operations for efficient field inclusion/exclusion,"[26486, 227, 6705, 19939, 25, 8554, 900, 4560, 329, 6942, 2214, 14900, 14, 1069, 4717]",0.5,554,best_practice,112,Using set operations for efficient field inclusion/exclusion,,534,        self.period_column_name = period_column_name,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 41007, 62, 28665, 62, 3672, 796, 2278, 62, 28665, 62, 3672]"
üß† ML Signal: Conditional logic based on instance attributes,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 4554, 12608]",0.5,574,ml_signal,112,Conditional logic based on instance attributes,,554,        self.period_column_name = period_column_name,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 41007, 62, 28665, 62, 3672, 796, 2278, 62, 28665, 62, 3672]"
üß† ML Signal: Use of set operations to filter data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 900, 4560, 284, 8106, 1366]",0.5,610,ml_signal,119,Use of set operations to filter data,,574,"        shutil.copytree(str(self.qlib_dir.resolve()), str(target_dir.resolve()))","[220, 220, 220, 220, 220, 220, 220, 4423, 346, 13, 30073, 21048, 7, 2536, 7, 944, 13, 80, 8019, 62, 15908, 13, 411, 6442, 3419, 828, 965, 7, 16793, 62, 15908, 13, 411, 6442, 3419, 4008]"
üß† ML Signal: Conditional logic based on instance attributes,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 4554, 12608]",0.5,635,ml_signal,121,Conditional logic based on instance attributes,,610,"    def get_source_data(self, file_path: Path) -> pd.DataFrame:","[220, 220, 220, 825, 651, 62, 10459, 62, 7890, 7, 944, 11, 2393, 62, 6978, 25, 10644, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
üß† ML Signal: Function signature and parameter names can be used to infer the purpose and usage of the function.,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 290, 11507, 3891, 460, 307, 973, 284, 13249, 262, 4007, 290, 8748, 286, 262, 2163, 13]",0.5,667,ml_signal,122,Function signature and parameter names can be used to infer the purpose and usage of the function.,,635,"        df = pd.read_csv(str(file_path.resolve()), low_memory=False)","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 40664, 7, 2536, 7, 7753, 62, 6978, 13, 411, 6442, 3419, 828, 1877, 62, 31673, 28, 25101, 8]"
‚úÖ Best Practice: Using pathlib for path operations improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 3108, 8019, 329, 3108, 4560, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,709,best_practice,124,Using pathlib for path operations improves code readability and maintainability.,,667,"        df[self.date_column_name] = df[self.date_column_name].str.replace(""-"", """").astype(""int32"")","[220, 220, 220, 220, 220, 220, 220, 47764, 58, 944, 13, 4475, 62, 28665, 62, 3672, 60, 796, 47764, 58, 944, 13, 4475, 62, 28665, 62, 3672, 4083, 2536, 13, 33491, 7203, 12, 1600, 366, 11074, 459, 2981, 7203, 600, 2624, 4943]"
‚ö†Ô∏è SAST Risk (Low): Directory creation with user-controlled input could lead to directory traversal if not properly validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 27387, 6282, 351, 2836, 12, 14401, 5128, 714, 1085, 284, 8619, 33038, 282, 611, 407, 6105, 31031, 13]",0.5,751,sast_risk,124,Directory creation with user-controlled input could lead to directory traversal if not properly validated.,Low,709,"        df[self.date_column_name] = df[self.date_column_name].str.replace(""-"", """").astype(""int32"")","[220, 220, 220, 220, 220, 220, 220, 47764, 58, 944, 13, 4475, 62, 28665, 62, 3672, 60, 796, 47764, 58, 944, 13, 4475, 62, 28665, 62, 3672, 4083, 2536, 13, 33491, 7203, 12, 1600, 366, 11074, 459, 2981, 7203, 600, 2624, 4943]"
üß† ML Signal: The pattern of constructing file paths can be used to learn about file naming conventions.,"[8582, 100, 254, 10373, 26484, 25, 383, 3912, 286, 30580, 2393, 13532, 460, 307, 973, 284, 2193, 546, 2393, 19264, 21396, 13]",0.5,775,ml_signal,128,The pattern of constructing file paths can be used to learn about file naming conventions.,,751,"    def get_symbol_from_file(self, file_path: Path) -> str:","[220, 220, 220, 825, 651, 62, 1837, 23650, 62, 6738, 62, 7753, 7, 944, 11, 2393, 62, 6978, 25, 10644, 8, 4613, 965, 25]"
‚úÖ Best Practice: Using f-strings for string formatting is more readable and efficient.,"[26486, 227, 6705, 19939, 25, 8554, 277, 12, 37336, 329, 4731, 33313, 318, 517, 31744, 290, 6942, 13]",0.5,799,best_practice,128,Using f-strings for string formatting is more readable and efficient.,,775,"    def get_symbol_from_file(self, file_path: Path) -> str:","[220, 220, 220, 825, 651, 62, 1837, 23650, 62, 6738, 62, 7753, 7, 944, 11, 2393, 62, 6978, 25, 10644, 8, 4613, 965, 25]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,803,best_practice,155,Use of descriptive variable names improves code readability.,,799,    ):,"[220, 220, 220, 15179]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,817,best_practice,157,Use of descriptive variable names improves code readability.,,803,        dump data as the following format:,"[220, 220, 220, 220, 220, 220, 220, 10285, 1366, 355, 262, 1708, 5794, 25]"
‚úÖ Best Practice: Logging provides insight into the program's execution flow.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 3769, 11281, 656, 262, 1430, 338, 9706, 5202, 13]",0.5,842,best_practice,160,Logging provides insight into the program's execution flow.,,817,"                [date, period, value, _next]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 685, 4475, 11, 2278, 11, 1988, 11, 4808, 19545, 60]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,868,best_practice,163,Use of descriptive variable names improves code readability.,,842,"                [first_year, index, index, ...]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 685, 11085, 62, 1941, 11, 6376, 11, 6376, 11, 2644, 60]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,905,best_practice,165,Use of descriptive variable names improves code readability.,,868,        `<field.data>` contains the data as the point-in-time (PIT) order: `value` of `period`,"[220, 220, 220, 220, 220, 220, 220, 4600, 27, 3245, 13, 7890, 29, 63, 4909, 262, 1366, 355, 262, 966, 12, 259, 12, 2435, 357, 47, 2043, 8, 1502, 25, 4600, 8367, 63, 286, 4600, 41007, 63]"
‚úÖ Best Practice: Logging provides insight into the program's execution flow.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 3769, 11281, 656, 262, 1430, 338, 9706, 5202, 13]",0.5,933,best_practice,168,Logging provides insight into the program's execution flow.,,905,        `<field>.index` contains the index of value for each period (quarter or year). To save,"[220, 220, 220, 220, 220, 220, 220, 4600, 27, 3245, 28401, 9630, 63, 4909, 262, 6376, 286, 1988, 329, 1123, 2278, 357, 24385, 393, 614, 737, 1675, 3613]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,941,best_practice,171,Use of descriptive variable names improves code readability.,,933,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,951,best_practice,173,Use of descriptive variable names improves code readability.,,941,        symbol: str,"[220, 220, 220, 220, 220, 220, 220, 6194, 25, 965]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,961,best_practice,175,Use of descriptive variable names improves code readability.,,951,        interval: str,"[220, 220, 220, 220, 220, 220, 220, 16654, 25, 965]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,973,best_practice,182,Use of descriptive variable names improves code readability.,,961,        if df.empty:,"[220, 220, 220, 220, 220, 220, 220, 611, 47764, 13, 28920, 25]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,985,best_practice,184,Use of descriptive variable names improves code readability.,,973,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
‚úÖ Best Practice: Logging provides insight into the program's execution flow.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 3769, 11281, 656, 262, 1430, 338, 9706, 5202, 13]",0.5,1014,best_practice,194,Logging provides insight into the program's execution flow.,,985,            end_year = df_sub[self.period_column_name].max(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 1941, 796, 47764, 62, 7266, 58, 944, 13, 41007, 62, 28665, 62, 3672, 4083, 9806, 3419]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,1044,best_practice,206,Use of descriptive variable names improves code readability.,,1014,                    start_year = first_year + n_years,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 1941, 796, 717, 62, 1941, 1343, 299, 62, 19002]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,1083,best_practice,214,Use of descriptive variable names improves code readability.,,1044,"                logger.warning(f""{symbol}-{field} data already exists, continue to the next field"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 90, 1837, 23650, 92, 12, 90, 3245, 92, 1366, 1541, 7160, 11, 2555, 284, 262, 1306, 2214, 4943]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,1100,best_practice,217,Use of descriptive variable names improves code readability.,,1083,            # dump index filled with NA,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 10285, 6376, 5901, 351, 11746]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,1146,best_practice,223,Use of descriptive variable names improves code readability.,,1100,"                        fi.write(struct.pack(self.INDEX_DTYPE, self.NA_INDEX))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 25912, 13, 13564, 7, 7249, 13, 8002, 7, 944, 13, 12115, 6369, 62, 35, 25216, 11, 2116, 13, 4535, 62, 12115, 6369, 4008]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",1.0,1167,best_practice,225,Use of descriptive variable names improves code readability.,,1146,"            # if data already exists, remove overlapped data","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 611, 1366, 1541, 7160, 11, 4781, 12893, 6320, 1366]"
üß† ML Signal: Method parameters with default values indicate common usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 11789, 10007, 351, 4277, 3815, 7603, 2219, 8748, 7572, 13]",0.5,1197,ml_signal,219,Method parameters with default values indicate common usage patterns.,,1167,"                for year in range(start_year, end_year + 1):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 614, 287, 2837, 7, 9688, 62, 1941, 11, 886, 62, 1941, 1343, 352, 2599]"
‚úÖ Best Practice: Logging the start of a process helps in debugging and tracking execution flow.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 262, 923, 286, 257, 1429, 5419, 287, 28769, 290, 9646, 9706, 5202, 13]",0.5,1227,best_practice,220,Logging the start of a process helps in debugging and tracking execution flow.,,1197,                    if interval == self.INTERVAL_quarterly:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 16654, 6624, 2116, 13, 41358, 23428, 62, 24385, 306, 25]"
üß† ML Signal: Use of partial functions indicates a pattern of function customization.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 13027, 5499, 9217, 257, 3912, 286, 2163, 31344, 13]",0.5,1248,ml_signal,222,Use of partial functions indicates a pattern of function customization.,,1227,                    else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Using tqdm for progress indication improves user experience in long-running processes.,"[26486, 227, 6705, 19939, 25, 8554, 256, 80, 36020, 329, 4371, 12955, 19575, 2836, 1998, 287, 890, 12, 20270, 7767, 13]",1.0,1248,best_practice,224,Using tqdm for progress indication improves user experience in long-running processes.,,1248,,[]
üß† ML Signal: Use of ProcessPoolExecutor indicates parallel processing patterns.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10854, 27201, 23002, 38409, 9217, 10730, 7587, 7572, 13]",0.5,1270,ml_signal,226,Use of ProcessPoolExecutor indicates parallel processing patterns.,,1248,            if not overwrite and data_file.exists():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 49312, 290, 1366, 62, 7753, 13, 1069, 1023, 33529]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the function _dump_pit is thread-safe when used with ProcessPoolExecutor.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 2163, 4808, 39455, 62, 15544, 318, 4704, 12, 21230, 618, 973, 351, 10854, 27201, 23002, 38409, 13]",0.5,1299,sast_risk,227,Ensure that the function _dump_pit is thread-safe when used with ProcessPoolExecutor.,Low,1270,"                with open(data_file, ""rb"") as fd:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 1280, 7, 7890, 62, 7753, 11, 366, 26145, 4943, 355, 277, 67, 25]"
üß† ML Signal: Iterating over executor.map shows a pattern of processing items in parallel.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 3121, 273, 13, 8899, 2523, 257, 3912, 286, 7587, 3709, 287, 10730, 13]",0.5,1334,ml_signal,228,Iterating over executor.map shows a pattern of processing items in parallel.,,1299,"                    fd.seek(-self.DATA_DTYPE_SIZE, 2)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 67, 13, 36163, 32590, 944, 13, 26947, 62, 35, 25216, 62, 33489, 11, 362, 8]"
‚úÖ Best Practice: Updating progress bar inside the loop provides real-time feedback.,"[26486, 227, 6705, 19939, 25, 3205, 38734, 4371, 2318, 2641, 262, 9052, 3769, 1103, 12, 2435, 7538, 13]",0.5,1369,best_practice,228,Updating progress bar inside the loop provides real-time feedback.,,1334,"                    fd.seek(-self.DATA_DTYPE_SIZE, 2)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 67, 13, 36163, 32590, 944, 13, 26947, 62, 35, 25216, 62, 33489, 11, 362, 8]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of this method.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 428, 2446, 13]",1.0,1391,best_practice,226,Consider adding a docstring to describe the purpose and usage of this method.,,1369,            if not overwrite and data_file.exists():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 49312, 290, 1366, 62, 7753, 13, 1069, 1023, 33529]"
üß† ML Signal: Method call pattern within a special method like __call__ can indicate dynamic behavior or usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 1626, 257, 2041, 2446, 588, 11593, 13345, 834, 460, 7603, 8925, 4069, 393, 8748, 7572, 13]",0.5,1426,ml_signal,228,Method call pattern within a special method like __call__ can indicate dynamic behavior or usage patterns.,,1391,"                    fd.seek(-self.DATA_DTYPE_SIZE, 2)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 67, 13, 36163, 32590, 944, 13, 26947, 62, 35, 25216, 62, 33489, 11, 362, 8]"
‚ö†Ô∏è SAST Risk (Low): Using fire.Fire can execute arbitrary code if input is not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 2046, 13, 13543, 460, 12260, 14977, 2438, 611, 5128, 318, 407, 6105, 5336, 36951, 13]",0.5,1461,sast_risk,228,Using fire.Fire can execute arbitrary code if input is not properly sanitized.,Low,1426,"                    fd.seek(-self.DATA_DTYPE_SIZE, 2)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 67, 13, 36163, 32590, 944, 13, 26947, 62, 35, 25216, 62, 33489, 11, 362, 8]"
üß† ML Signal: Usage of fire.Fire indicates a command-line interface pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2046, 13, 13543, 9217, 257, 3141, 12, 1370, 7071, 3912, 13]",1.0,1496,ml_signal,228,Usage of fire.Fire indicates a command-line interface pattern.,,1461,"                    fd.seek(-self.DATA_DTYPE_SIZE, 2)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 67, 13, 36163, 32590, 944, 13, 26947, 62, 35, 25216, 62, 33489, 11, 362, 8]"

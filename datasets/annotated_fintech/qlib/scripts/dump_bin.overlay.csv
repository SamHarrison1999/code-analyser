annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing utility functions for encoding and decoding filenames,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 10361, 5499, 329, 21004, 290, 39938, 1226, 268, 1047]",1.0,5,ml_signal,13,Importing utility functions for encoding and decoding filenames,,0,import numpy as np,"[11748, 299, 32152, 355, 45941]"
üß† ML Signal: Constants and configuration patterns can be used to identify application settings and defaults,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 290, 8398, 7572, 460, 307, 973, 284, 5911, 3586, 6460, 290, 26235]",1.0,23,ml_signal,27,Constants and configuration patterns can be used to identify application settings and defaults,,5,"    DAILY_FORMAT = ""%Y-%m-%d""","[220, 220, 220, 17051, 33340, 62, 21389, 1404, 796, 36521, 56, 12, 4, 76, 12, 4, 67, 1]"
‚úÖ Best Practice: Use of class-level constants for configuration improves maintainability and readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 12, 5715, 38491, 329, 8398, 19575, 5529, 1799, 290, 1100, 1799]",1.0,41,best_practice,27,Use of class-level constants for configuration improves maintainability and readability,,23,"    DAILY_FORMAT = ""%Y-%m-%d""","[220, 220, 220, 17051, 33340, 62, 21389, 1404, 796, 36521, 56, 12, 4, 76, 12, 4, 67, 1]"
‚úÖ Best Practice: Check if exclude_fields is a string before splitting,"[26486, 227, 6705, 19939, 25, 6822, 611, 19607, 62, 25747, 318, 257, 4731, 878, 26021]",1.0,55,best_practice,68,Check if exclude_fields is a string before splitting,,41,            symbol field name,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 2214, 1438]"
‚úÖ Best Practice: Check if include_fields is a string before splitting,"[26486, 227, 6705, 19939, 25, 6822, 611, 2291, 62, 25747, 318, 257, 4731, 878, 26021]",1.0,67,best_practice,71,Check if include_fields is a string before splitting,,55,        exclude_fields: tuple,"[220, 220, 220, 220, 220, 220, 220, 19607, 62, 25747, 25, 46545]"
‚úÖ Best Practice: Use tuple and filter to ensure fields are stripped and non-empty,"[26486, 227, 6705, 19939, 25, 5765, 46545, 290, 8106, 284, 4155, 7032, 389, 18818, 290, 1729, 12, 28920]",1.0,84,best_practice,74,Use tuple and filter to ensure fields are stripped and non-empty,,67,"            Use when debugging, default None","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5765, 618, 28769, 11, 4277, 6045]"
‚úÖ Best Practice: Use tuple and filter to ensure fields are stripped and non-empty,"[26486, 227, 6705, 19939, 25, 5765, 46545, 290, 8106, 284, 4155, 7032, 389, 18818, 290, 1729, 12, 28920]",1.0,106,best_practice,76,Use tuple and filter to ensure fields are stripped and non-empty,,84,        csv_path = Path(csv_path).expanduser(),"[220, 220, 220, 220, 220, 220, 220, 269, 21370, 62, 6978, 796, 10644, 7, 40664, 62, 6978, 737, 11201, 392, 7220, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potentially large number of files could be loaded into memory,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 1588, 1271, 286, 3696, 714, 307, 9639, 656, 4088]",0.5,129,sast_risk,80,Potentially large number of files could be loaded into memory,Low,106,"            include_fields = include_fields.split("","")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2291, 62, 25747, 796, 2291, 62, 25747, 13, 35312, 7, 2430, 8]"
‚úÖ Best Practice: Limit the number of CSV files if limit_nums is specified,"[26486, 227, 6705, 19939, 25, 27272, 262, 1271, 286, 44189, 3696, 611, 4179, 62, 77, 5700, 318, 7368]",0.5,166,best_practice,82,Limit the number of CSV files if limit_nums is specified,,129,"        self._include_fields = tuple(filter(lambda x: len(x) > 0, map(str.strip, include_fields)))","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 17256, 62, 25747, 796, 46545, 7, 24455, 7, 50033, 2124, 25, 18896, 7, 87, 8, 1875, 657, 11, 3975, 7, 2536, 13, 36311, 11, 2291, 62, 25747, 22305]"
‚ö†Ô∏è SAST Risk (Low): Backup operation could overwrite existing data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 35071, 4905, 714, 49312, 4683, 1366]",0.5,197,sast_risk,87,Backup operation could overwrite existing data,Low,166,            self.csv_files = self.csv_files[: int(limit_nums)],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 40664, 62, 16624, 796, 2116, 13, 40664, 62, 16624, 58, 25, 493, 7, 32374, 62, 77, 5700, 15437]"
üß† ML Signal: Conditional logic based on frequency could indicate different processing paths,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 8373, 714, 7603, 1180, 7587, 13532]",0.5,229,ml_signal,91,Conditional logic based on frequency could indicate different processing paths,,197,            self._backup_qlib_dir(Path(backup_dir).expanduser()),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13557, 1891, 929, 62, 80, 8019, 62, 15908, 7, 15235, 7, 1891, 929, 62, 15908, 737, 11201, 392, 7220, 28955]"
‚ö†Ô∏è SAST Risk (Medium): Using shutil.copytree without exception handling can lead to unhandled exceptions if the source or target directories are invalid or inaccessible.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 4423, 346, 13, 30073, 21048, 1231, 6631, 9041, 460, 1085, 284, 555, 38788, 13269, 611, 262, 2723, 393, 2496, 29196, 389, 12515, 393, 40604, 13]",1.0,243,sast_risk,93,Using shutil.copytree without exception handling can lead to unhandled exceptions if the source or target directories are invalid or inaccessible.,Medium,229,        self.freq = freq,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19503, 80, 796, 2030, 80]"
‚úÖ Best Practice: Consider adding exception handling to manage potential errors during the copy process.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 6631, 9041, 284, 6687, 2785, 8563, 1141, 262, 4866, 1429, 13]",1.0,285,best_practice,94,Consider adding exception handling to manage potential errors during the copy process.,,243,"        self.calendar_format = self.DAILY_FORMAT if self.freq == ""day"" else self.HIGH_FREQ_FORMAT","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9948, 9239, 62, 18982, 796, 2116, 13, 5631, 33340, 62, 21389, 1404, 611, 2116, 13, 19503, 80, 6624, 366, 820, 1, 2073, 2116, 13, 39, 18060, 62, 37, 2200, 48, 62, 21389, 1404]"
"üß† ML Signal: Usage of shutil.copytree indicates a pattern of directory duplication, which can be a feature for ML models to learn about file operations.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4423, 346, 13, 30073, 21048, 9217, 257, 3912, 286, 8619, 50124, 11, 543, 460, 307, 257, 3895, 329, 10373, 4981, 284, 2193, 546, 2393, 4560, 13]",1.0,299,ml_signal,96,"Usage of shutil.copytree indicates a pattern of directory duplication, which can be a feature for ML models to learn about file operations.",,285,        self.works = max_workers,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 5225, 796, 3509, 62, 22896]"
‚úÖ Best Practice: Consider adding type hints for the return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,299,best_practice,95,Consider adding type hints for the return type for better readability and maintainability,,299,,[]
‚úÖ Best Practice: Converting input to a consistent type at the start of the function,"[26486, 227, 6705, 19939, 25, 35602, 889, 5128, 284, 257, 6414, 2099, 379, 262, 923, 286, 262, 2163]",0.5,319,best_practice,97,Converting input to a consistent type at the start of the function,,299,        self.date_field_name = date_field_name,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 4475, 62, 3245, 62, 3672, 796, 3128, 62, 3245, 62, 3672]"
üß† ML Signal: Usage of strftime for date formatting,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 965, 31387, 329, 3128, 33313]",1.0,319,ml_signal,98,Usage of strftime for date formatting,,319,,[]
‚úÖ Best Practice: Check if input is a DataFrame to handle different input types,"[26486, 227, 6705, 19939, 25, 6822, 611, 5128, 318, 257, 6060, 19778, 284, 5412, 1180, 5128, 3858]",0.5,355,best_practice,101,Check if input is a DataFrame to handle different input types,,319,        self._instruments_dir = self.qlib_dir.joinpath(self.INSTRUMENTS_DIR_NAME),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 259, 2536, 2886, 62, 15908, 796, 2116, 13, 80, 8019, 62, 15908, 13, 22179, 6978, 7, 944, 13, 1268, 18601, 5883, 15365, 62, 34720, 62, 20608, 8]"
üß† ML Signal: Usage of a helper function to retrieve data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 31904, 2163, 284, 19818, 1366]",0.5,355,ml_signal,102,Usage of a helper function to retrieve data,,355,,[]
‚úÖ Best Practice: Check for empty DataFrame or missing column to prevent errors,"[26486, 227, 6705, 19939, 25, 6822, 329, 6565, 6060, 19778, 393, 4814, 5721, 284, 2948, 8563]",0.5,368,best_practice,106,Check for empty DataFrame or missing column to prevent errors,,355,        self._kwargs = {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 46265, 22046, 796, 23884]"
‚úÖ Best Practice: Return different data structures based on flags for flexibility,"[26486, 227, 6705, 19939, 25, 8229, 1180, 1366, 8573, 1912, 319, 9701, 329, 13688]",0.5,391,best_practice,112,Return different data structures based on flags for flexibility,,368,        datetime_d = pd.Timestamp(datetime_d),"[220, 220, 220, 220, 220, 220, 220, 4818, 8079, 62, 67, 796, 279, 67, 13, 14967, 27823, 7, 19608, 8079, 62, 67, 8]"
‚úÖ Best Practice: Use of type hint for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,404,best_practice,117,Use of type hint for the return type improves code readability and maintainability,,391,    ) -> Iterable[pd.Timestamp]:,"[220, 220, 220, 1267, 4613, 40806, 540, 58, 30094, 13, 14967, 27823, 5974]"
‚ö†Ô∏è SAST Risk (Low): Using `low_memory=False` can lead to high memory usage with large files,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 4600, 9319, 62, 31673, 28, 25101, 63, 460, 1085, 284, 1029, 4088, 8748, 351, 1588, 3696]",0.5,431,sast_risk,119,Using `low_memory=False` can lead to high memory usage with large files,Low,404,            df = self._get_source_data(file_or_df),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 2116, 13557, 1136, 62, 10459, 62, 7890, 7, 7753, 62, 273, 62, 7568, 8]"
üß† ML Signal: Conversion of date fields to datetime format is a common data preprocessing step,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 3128, 7032, 284, 4818, 8079, 5794, 318, 257, 2219, 1366, 662, 36948, 2239]",1.0,449,ml_signal,121,Conversion of date fields to datetime format is a common data preprocessing step,,431,            df = file_or_df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 2393, 62, 273, 62, 7568]"
‚úÖ Best Practice: Type hinting for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,467,best_practice,121,Type hinting for the return type improves code readability and maintainability,,449,            df = file_or_df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 2393, 62, 273, 62, 7568]"
üß† ML Signal: Usage of string manipulation methods like strip() and lower(),"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4731, 17512, 5050, 588, 10283, 3419, 290, 2793, 3419]",0.5,495,ml_signal,123,Usage of string manipulation methods like strip() and lower(),,467,            _calendars = pd.Series(dtype=np.float32),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 9948, 44942, 796, 279, 67, 13, 27996, 7, 67, 4906, 28, 37659, 13, 22468, 2624, 8]"
üß† ML Signal: Usage of slicing to manipulate file names,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 49289, 284, 18510, 2393, 3891]",0.5,504,ml_signal,124,Usage of slicing to manipulate file names,,495,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Using Path object for file paths is more robust than using strings,"[26486, 227, 6705, 19939, 25, 8554, 10644, 2134, 329, 2393, 13532, 318, 517, 12373, 621, 1262, 13042]",1.0,513,best_practice,124,Using Path object for file paths is more robust than using strings,,504,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of ternary conditional operator for concise conditional logic,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 26340, 10088, 329, 35327, 26340, 9156]",1.0,522,best_practice,124,Use of ternary conditional operator for concise conditional logic,,513,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of type hinting for function return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 2163, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,546,best_practice,130,Use of type hinting for function return type improves code readability and maintainability,,522,"            return _calendars.min(), _calendars.max()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 4808, 9948, 44942, 13, 1084, 22784, 4808, 9948, 44942, 13, 9806, 3419]"
‚úÖ Best Practice: Use of sorted() to ensure the list of timestamps is ordered,"[26486, 227, 6705, 19939, 25, 5765, 286, 23243, 3419, 284, 4155, 262, 1351, 286, 4628, 395, 9430, 318, 6149]",0.5,559,best_practice,131,Use of sorted() to ensure the list of timestamps is ordered,,546,        elif as_set:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 355, 62, 2617, 25]"
üß† ML Signal: Use of map() function to apply pd.Timestamp to each element in the list,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3975, 3419, 2163, 284, 4174, 279, 67, 13, 14967, 27823, 284, 1123, 5002, 287, 262, 1351]",0.5,572,ml_signal,131,Use of map() function to apply pd.Timestamp to each element in the list,,559,        elif as_set:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 355, 62, 2617, 25]"
‚ö†Ô∏è SAST Risk (Low): Assumes the CSV file is well-formed and does not handle potential exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 262, 44189, 2393, 318, 880, 12, 12214, 290, 857, 407, 5412, 2785, 13269]",1.0,604,sast_risk,137,Assumes the CSV file is well-formed and does not handle potential exceptions,Low,572,"        df = pd.read_csv(str(file_path.resolve()), low_memory=False)","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 40664, 7, 2536, 7, 7753, 62, 6978, 13, 411, 6442, 3419, 828, 1877, 62, 31673, 28, 25101, 8]"
‚úÖ Best Practice: Use of type hinting for function return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 2163, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,636,best_practice,137,Use of type hinting for function return type improves code readability and maintainability,,604,"        df = pd.read_csv(str(file_path.resolve()), low_memory=False)","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 40664, 7, 2536, 7, 7753, 62, 6978, 13, 411, 6442, 3419, 828, 1877, 62, 31673, 28, 25101, 8]"
üß† ML Signal: Use of pandas to read CSV files is a common pattern in data processing tasks,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 284, 1100, 44189, 3696, 318, 257, 2219, 3912, 287, 1366, 7587, 8861]",1.0,679,ml_signal,138,Use of pandas to read CSV files is a common pattern in data processing tasks,,636,"        df[self.date_field_name] = df[self.date_field_name].astype(str).astype(""datetime64[ns]"")","[220, 220, 220, 220, 220, 220, 220, 47764, 58, 944, 13, 4475, 62, 3245, 62, 3672, 60, 796, 47764, 58, 944, 13, 4475, 62, 3245, 62, 3672, 4083, 459, 2981, 7, 2536, 737, 459, 2981, 7203, 19608, 8079, 2414, 58, 5907, 60, 4943]"
‚úÖ Best Practice: Returning the DataFrame directly is clear and concise,"[26486, 227, 6705, 19939, 25, 42882, 262, 6060, 19778, 3264, 318, 1598, 290, 35327]",1.0,720,best_practice,149,Returning the DataFrame directly is clear and concise,,679,            else set(df_columns) - set(self._exclude_fields) if self._exclude_fields else df_columns,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 900, 7, 7568, 62, 28665, 82, 8, 532, 900, 7, 944, 13557, 1069, 9152, 62, 25747, 8, 611, 2116, 13557, 1069, 9152, 62, 25747, 2073, 47764, 62, 28665, 82]"
‚úÖ Best Practice: Ensure the directory exists before saving files,"[26486, 227, 6705, 19939, 25, 48987, 262, 8619, 7160, 878, 8914, 3696]",1.0,761,best_practice,149,Ensure the directory exists before saving files,,720,            else set(df_columns) - set(self._exclude_fields) if self._exclude_fields else df_columns,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 900, 7, 7568, 62, 28665, 82, 8, 532, 900, 7, 944, 13557, 1069, 9152, 62, 25747, 8, 611, 2116, 13557, 1069, 9152, 62, 25747, 2073, 47764, 62, 28665, 82]"
üß† ML Signal: Usage pattern of constructing file paths,"[8582, 100, 254, 10373, 26484, 25, 29566, 3912, 286, 30580, 2393, 13532]",0.5,761,ml_signal,151,Usage pattern of constructing file paths,,761,,[]
üß† ML Signal: List comprehension for data transformation,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 329, 1366, 13389]",1.0,786,ml_signal,153,List comprehension for data transformation,,761,    def _read_calendars(calendar_path: Path) -> List[pd.Timestamp]:,"[220, 220, 220, 825, 4808, 961, 62, 9948, 44942, 7, 9948, 9239, 62, 6978, 25, 10644, 8, 4613, 7343, 58, 30094, 13, 14967, 27823, 5974]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the data being saved is properly sanitized to prevent injection attacks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 1366, 852, 7448, 318, 6105, 5336, 36951, 284, 2948, 16954, 3434]",1.0,799,sast_risk,155,Ensure that the data being saved is properly sanitized to prevent injection attacks,Low,786,            map(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3975, 7]"
üß† ML Signal: Usage of numpy to save text files,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 299, 32152, 284, 3613, 2420, 3696]",0.5,820,ml_signal,156,Usage of numpy to save text files,,799,"                pd.Timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 14967, 27823, 11]"
‚úÖ Best Practice: Ensure the directory exists before saving files to avoid errors.,"[26486, 227, 6705, 19939, 25, 48987, 262, 8619, 7160, 878, 8914, 3696, 284, 3368, 8563, 13]",1.0,830,best_practice,154,Ensure the directory exists before saving files to avoid errors.,,820,        return sorted(,"[220, 220, 220, 220, 220, 220, 220, 1441, 23243, 7]"
"‚úÖ Best Practice: Use resolve() to get the absolute path, which helps in debugging and file management.","[26486, 227, 6705, 19939, 25, 5765, 10568, 3419, 284, 651, 262, 4112, 3108, 11, 543, 5419, 287, 28769, 290, 2393, 4542, 13]",0.5,851,best_practice,156,"Use resolve() to get the absolute path, which helps in debugging and file management.",,830,"                pd.Timestamp,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 14967, 27823, 11]"
"üß† ML Signal: Checking the type of data can indicate different processing paths, useful for ML models.","[8582, 100, 254, 10373, 26484, 25, 39432, 262, 2099, 286, 1366, 460, 7603, 1180, 7587, 13532, 11, 4465, 329, 10373, 4981, 13]",0.5,863,ml_signal,158,"Checking the type of data can indicate different processing paths, useful for ML models.",,851,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Selecting specific fields from a DataFrame can indicate feature selection.,"[8582, 100, 254, 10373, 26484, 25, 9683, 278, 2176, 7032, 422, 257, 6060, 19778, 460, 7603, 3895, 6356, 13]",0.5,871,ml_signal,159,Selecting specific fields from a DataFrame can indicate feature selection.,,863,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Applying transformations to data fields can be a signal for data preprocessing.,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 38226, 284, 1366, 7032, 460, 307, 257, 6737, 329, 1366, 662, 36948, 13]",0.5,887,ml_signal,162,Applying transformations to data fields can be a signal for data preprocessing.,,871,        df = pd.read_csv(,"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 40664, 7]"
‚úÖ Best Practice: Use to_csv with explicit parameters for clarity and to avoid default behavior.,"[26486, 227, 6705, 19939, 25, 5765, 284, 62, 40664, 351, 7952, 10007, 329, 16287, 290, 284, 3368, 4277, 4069, 13]",0.5,914,best_practice,167,Use to_csv with explicit parameters for clarity and to avoid default behavior.,,887,"                self.INSTRUMENTS_START_FIELD,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 1268, 18601, 5883, 15365, 62, 2257, 7227, 62, 44603, 11]"
‚ö†Ô∏è SAST Risk (Low): Ensure that instruments_data is sanitized to prevent injection attacks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 12834, 62, 7890, 318, 5336, 36951, 284, 2948, 16954, 3434, 13]",0.5,940,sast_risk,168,Ensure that instruments_data is sanitized to prevent injection attacks.,Low,914,"                self.INSTRUMENTS_END_FIELD,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 1268, 18601, 5883, 15365, 62, 10619, 62, 44603, 11]"
‚úÖ Best Practice: Use descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 16287]",0.5,964,best_practice,166,Use descriptive variable names for clarity,,940,"                self.symbol_field_name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 1837, 23650, 62, 3245, 62, 3672, 11]"
‚úÖ Best Practice: Explicitly specify data types for consistency and clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 11986, 1366, 3858, 329, 15794, 290, 16287]",0.5,990,best_practice,168,Explicitly specify data types for consistency and clarity,,964,"                self.INSTRUMENTS_END_FIELD,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 1268, 18601, 5883, 15365, 62, 10619, 62, 44603, 11]"
‚úÖ Best Practice: Use parentheses for clarity in complex expressions,"[26486, 227, 6705, 19939, 25, 5765, 46672, 329, 16287, 287, 3716, 14700]",0.5,1016,best_practice,168,Use parentheses for clarity in complex expressions,,990,"                self.INSTRUMENTS_END_FIELD,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 1268, 18601, 5883, 15365, 62, 10619, 62, 44603, 11]"
‚úÖ Best Practice: Use inplace=True to modify the DataFrame in place and save memory,"[26486, 227, 6705, 19939, 25, 5765, 287, 5372, 28, 17821, 284, 13096, 262, 6060, 19778, 287, 1295, 290, 3613, 4088]",0.5,1043,best_practice,175,Use inplace=True to modify the DataFrame in place and save memory,,1016,"        self._calendars_dir.mkdir(parents=True, exist_ok=True)","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 9948, 44942, 62, 15908, 13, 28015, 15908, 7, 23743, 28, 17821, 11, 2152, 62, 482, 28, 17821, 8]"
‚úÖ Best Practice: Use inplace=True to modify the DataFrame in place and save memory,"[26486, 227, 6705, 19939, 25, 5765, 287, 5372, 28, 17821, 284, 13096, 262, 6060, 19778, 287, 1295, 290, 3613, 4088]",0.5,1074,best_practice,177,Use inplace=True to modify the DataFrame in place and save memory,,1043,        result_calendars_list = [self._format_datetime(x) for x in calendars_data],"[220, 220, 220, 220, 220, 220, 220, 1255, 62, 9948, 44942, 62, 4868, 796, 685, 944, 13557, 18982, 62, 19608, 8079, 7, 87, 8, 329, 2124, 287, 50215, 62, 7890, 60]"
üß† ML Signal: Reindexing DataFrame based on another DataFrame's index,"[8582, 100, 254, 10373, 26484, 25, 797, 9630, 278, 6060, 19778, 1912, 319, 1194, 6060, 19778, 338, 6376]",1.0,1074,ml_signal,179,Reindexing DataFrame based on another DataFrame's index,,1074,,[]
üß† ML Signal: Function definition with specific input types and return type,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 2176, 5128, 3858, 290, 1441, 2099]",1.0,1105,ml_signal,177,Function definition with specific input types and return type,,1074,        result_calendars_list = [self._format_datetime(x) for x in calendars_data],"[220, 220, 220, 220, 220, 220, 220, 1255, 62, 9948, 44942, 62, 4868, 796, 685, 944, 13557, 18982, 62, 19608, 8079, 7, 87, 8, 329, 2124, 287, 50215, 62, 7890, 60]"
‚ö†Ô∏è SAST Risk (Low): Potential ValueError if df.index.min() is not in calendar_list,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 11052, 12331, 611, 47764, 13, 9630, 13, 1084, 3419, 318, 407, 287, 11845, 62, 4868]",1.0,1105,sast_risk,179,Potential ValueError if df.index.min() is not in calendar_list,Low,1105,,[]
üß† ML Signal: Use of DataFrame index and list operations,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6060, 19778, 6376, 290, 1351, 4560]",1.0,1132,ml_signal,180,Use of DataFrame index and list operations,,1105,"    def save_instruments(self, instruments_data: Union[list, pd.DataFrame]):","[220, 220, 220, 825, 3613, 62, 259, 2536, 2886, 7, 944, 11, 12834, 62, 7890, 25, 4479, 58, 4868, 11, 279, 67, 13, 6601, 19778, 60, 2599]"
‚ö†Ô∏è SAST Risk (Low): Logging potentially sensitive information (features_dir.name),"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 1321, 357, 40890, 62, 15908, 13, 3672, 8]",1.0,1159,sast_risk,180,Logging potentially sensitive information (features_dir.name),Low,1132,"    def save_instruments(self, instruments_data: Union[list, pd.DataFrame]):","[220, 220, 220, 825, 3613, 62, 259, 2536, 2886, 7, 944, 11, 12834, 62, 7890, 25, 4479, 58, 4868, 11, 279, 67, 13, 6601, 19778, 60, 2599]"
‚ö†Ô∏è SAST Risk (Low): Logging potentially sensitive information (calendar_list),"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 1321, 357, 9948, 9239, 62, 4868, 8]",1.0,1186,sast_risk,185,Logging potentially sensitive information (calendar_list),Low,1159,"            instruments_data = instruments_data.loc[:, _df_fields]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12834, 62, 7890, 796, 12834, 62, 7890, 13, 17946, 58, 45299, 4808, 7568, 62, 25747, 60]"
‚ö†Ô∏è SAST Risk (Low): Logging potentially sensitive information (features_dir.name),"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 1321, 357, 40890, 62, 15908, 13, 3672, 8]",1.0,1195,sast_risk,190,Logging potentially sensitive information (features_dir.name),Low,1186,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Iterating over fields to process data,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 7032, 284, 1429, 1366]",1.0,1204,ml_signal,194,Iterating over fields to process data,,1195,        # calendars,"[220, 220, 220, 220, 220, 220, 220, 1303, 50215]"
‚úÖ Best Practice: Use Path.joinpath for better readability and compatibility,"[26486, 227, 6705, 19939, 25, 5765, 10644, 13, 22179, 6978, 329, 1365, 1100, 1799, 290, 17764]",0.5,1246,best_practice,196,Use Path.joinpath for better readability and compatibility,,1204,"        calendars_df[self.date_field_name] = calendars_df[self.date_field_name].astype(""datetime64[ns]"")","[220, 220, 220, 220, 220, 220, 220, 50215, 62, 7568, 58, 944, 13, 4475, 62, 3245, 62, 3672, 60, 796, 50215, 62, 7568, 58, 944, 13, 4475, 62, 3245, 62, 3672, 4083, 459, 2981, 7203, 19608, 8079, 2414, 58, 5907, 60, 4943]"
üß† ML Signal: Checking file existence and mode for conditional processing,"[8582, 100, 254, 10373, 26484, 25, 39432, 2393, 6224, 290, 4235, 329, 26340, 7587]",1.0,1254,ml_signal,200,Checking file existence and mode for conditional processing,,1246,        ],"[220, 220, 220, 220, 220, 220, 220, 2361]"
‚ö†Ô∏è SAST Risk (Low): Opening files in append mode without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 25522, 3696, 287, 24443, 4235, 1231, 21201]",1.0,1282,sast_risk,202,Opening files in append mode without validation,Low,1254,"        cal_df.set_index(self.date_field_name, inplace=True)","[220, 220, 220, 220, 220, 220, 220, 2386, 62, 7568, 13, 2617, 62, 9630, 7, 944, 13, 4475, 62, 3245, 62, 3672, 11, 287, 5372, 28, 17821, 8]"
üß† ML Signal: Converting data to binary format,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 1366, 284, 13934, 5794]",1.0,1304,ml_signal,204,Converting data to binary format,,1282,        r_df = df.reindex(cal_df.index),"[220, 220, 220, 220, 220, 220, 220, 374, 62, 7568, 796, 47764, 13, 260, 9630, 7, 9948, 62, 7568, 13, 9630, 8]"
üß† ML Signal: Converting and saving data to binary format,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 290, 8914, 1366, 284, 13934, 5794]",1.0,1310,ml_signal,207,Converting and saving data to binary format,,1304,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
‚ö†Ô∏è SAST Risk (Low): Logging warning without additional context may not be sufficient for debugging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6509, 1231, 3224, 4732, 743, 407, 307, 6751, 329, 28769]",0.5,1320,sast_risk,201,Logging warning without additional context may not be sufficient for debugging,Low,1310,        # align index,"[220, 220, 220, 220, 220, 220, 220, 1303, 10548, 6376]"
‚úÖ Best Practice: Use isinstance for type checking,"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 329, 2099, 10627]",0.5,1331,best_practice,205,Use isinstance for type checking,,1320,        return r_df,"[220, 220, 220, 220, 220, 220, 220, 1441, 374, 62, 7568]"
‚ö†Ô∏è SAST Risk (Low): Returning without logging or error may lead to silent failures,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42882, 1231, 18931, 393, 4049, 743, 1085, 284, 10574, 15536]",0.5,1337,sast_risk,207,Returning without logging or error may lead to silent failures,Low,1331,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
üß† ML Signal: Extracting code from DataFrame for further processing,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 2438, 422, 6060, 19778, 329, 2252, 7587]",0.5,1337,ml_signal,210,Extracting code from DataFrame for further processing,,1337,,[]
üß† ML Signal: Extracting code from file path for further processing,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 2438, 422, 2393, 3108, 329, 2252, 7587]",0.5,1349,ml_signal,214,Extracting code from file path for further processing,,1337,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
‚ö†Ô∏è SAST Risk (Low): Raising generic ValueError without specific error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 14276, 11052, 12331, 1231, 2176, 4049, 9041]",0.5,1359,sast_risk,218,Raising generic ValueError without specific error handling,Low,1349,        # align index,"[220, 220, 220, 220, 220, 220, 220, 1303, 10548, 6376]"
‚ö†Ô∏è SAST Risk (Low): Logging warning without additional context may not be sufficient for debugging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6509, 1231, 3224, 4732, 743, 407, 307, 6751, 329, 28769]",0.5,1372,sast_risk,220,Logging warning without additional context may not be sufficient for debugging,Low,1359,        if _df.empty:,"[220, 220, 220, 220, 220, 220, 220, 611, 4808, 7568, 13, 28920, 25]"
‚úÖ Best Practice: Dropping duplicates to ensure data integrity,"[26486, 227, 6705, 19939, 25, 21045, 2105, 14184, 16856, 284, 4155, 1366, 11540]",0.5,1398,best_practice,224,Dropping duplicates to ensure data integrity,,1372,"        date_index = self.get_datetime_index(_df, calendar_list)","[220, 220, 220, 220, 220, 220, 220, 3128, 62, 9630, 796, 2116, 13, 1136, 62, 19608, 8079, 62, 9630, 28264, 7568, 11, 11845, 62, 4868, 8]"
üß† ML Signal: Creating directory structure based on code,"[8582, 100, 254, 10373, 26484, 25, 30481, 8619, 4645, 1912, 319, 2438]",0.5,1446,ml_signal,226,Creating directory structure based on code,,1398,"            bin_path = features_dir.joinpath(f""{field.lower()}.{self.freq}{self.DUMP_FILE_SUFFIX}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9874, 62, 6978, 796, 3033, 62, 15908, 13, 22179, 6978, 7, 69, 1, 90, 3245, 13, 21037, 3419, 27422, 90, 944, 13, 19503, 80, 18477, 944, 13, 35, 20476, 62, 25664, 62, 12564, 5777, 10426, 92, 4943]"
‚úÖ Best Practice: Using mkdir with exist_ok=True to avoid exceptions if directory exists,"[26486, 227, 6705, 19939, 25, 8554, 33480, 15908, 351, 2152, 62, 482, 28, 17821, 284, 3368, 13269, 611, 8619, 7160]",0.5,1462,best_practice,228,Using mkdir with exist_ok=True to avoid exceptions if directory exists,,1446,                continue,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2555]"
üß† ML Signal: Converting data to binary format for storage,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 1366, 284, 13934, 5794, 329, 6143]",0.5,1479,ml_signal,230,Converting data to binary format for storage,,1462,                # update,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 4296]"
‚úÖ Best Practice: Method raises NotImplementedError to indicate it should be overridden in subclasses,"[26486, 227, 6705, 19939, 25, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 284, 7603, 340, 815, 307, 23170, 4651, 287, 850, 37724]",1.0,1491,best_practice,222,Method raises NotImplementedError to indicate it should be overridden in subclasses,,1479,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
‚úÖ Best Practice: Provides a clear error message for unimplemented method,"[26486, 227, 6705, 19939, 25, 47081, 257, 1598, 4049, 3275, 329, 28418, 1154, 12061, 2446]",1.0,1517,best_practice,224,Provides a clear error message for unimplemented method,,1491,"        date_index = self.get_datetime_index(_df, calendar_list)","[220, 220, 220, 220, 220, 220, 220, 3128, 62, 9630, 796, 2116, 13, 1136, 62, 19608, 8079, 62, 9630, 28264, 7568, 11, 11845, 62, 4868, 8]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the __call__ method.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 11593, 13345, 834, 2446, 13]",0.5,1543,best_practice,224,Consider adding a docstring to describe the purpose and usage of the __call__ method.,,1517,"        date_index = self.get_datetime_index(_df, calendar_list)","[220, 220, 220, 220, 220, 220, 220, 3128, 62, 9630, 796, 2116, 13, 1136, 62, 19608, 8079, 62, 9630, 28264, 7568, 11, 11845, 62, 4868, 8]"
üß† ML Signal: Method invocation pattern for callable objects.,"[8582, 100, 254, 10373, 26484, 25, 11789, 43219, 3912, 329, 869, 540, 5563, 13]",0.5,1591,ml_signal,226,Method invocation pattern for callable objects.,,1543,"            bin_path = features_dir.joinpath(f""{field.lower()}.{self.freq}{self.DUMP_FILE_SUFFIX}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9874, 62, 6978, 796, 3033, 62, 15908, 13, 22179, 6978, 7, 69, 1, 90, 3245, 13, 21037, 3419, 27422, 90, 944, 13, 19503, 80, 18477, 944, 13, 35, 20476, 62, 25664, 62, 12564, 5777, 10426, 92, 4943]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the dump method does not expose sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 10285, 2446, 857, 407, 15651, 8564, 1321, 13]",0.5,1612,sast_risk,227,Ensure that the dump method does not expose sensitive information.,Low,1591,            if field not in _df.columns:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2214, 407, 287, 4808, 7568, 13, 28665, 82, 25]"
‚úÖ Best Practice: Class should have a docstring explaining its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 8748]",0.5,1660,best_practice,226,Class should have a docstring explaining its purpose and usage,,1612,"            bin_path = features_dir.joinpath(f""{field.lower()}.{self.freq}{self.DUMP_FILE_SUFFIX}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 9874, 62, 6978, 796, 3033, 62, 15908, 13, 22179, 6978, 7, 69, 1, 90, 3245, 13, 21037, 3419, 27422, 90, 944, 13, 19503, 80, 18477, 944, 13, 35, 20476, 62, 25664, 62, 12564, 5777, 10426, 92, 4943]"
üß† ML Signal: Logging the start of a process can be used to identify function entry points.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 923, 286, 257, 1429, 460, 307, 973, 284, 5911, 2163, 5726, 2173, 13]",1.0,1690,ml_signal,229,Logging the start of a process can be used to identify function entry points.,,1660,            if bin_path.exists() and self._mode == self.UPDATE_MODE:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 9874, 62, 6978, 13, 1069, 1023, 3419, 290, 2116, 13557, 14171, 6624, 2116, 13, 16977, 62, 49058, 25]"
‚úÖ Best Practice: Using tqdm for progress indication improves user experience in long-running tasks.,"[26486, 227, 6705, 19939, 25, 8554, 256, 80, 36020, 329, 4371, 12955, 19575, 2836, 1998, 287, 890, 12, 20270, 8861, 13]",0.5,1703,best_practice,233,Using tqdm for progress indication improves user experience in long-running tasks.,,1690,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Using ProcessPoolExecutor for parallel processing can improve performance.,"[26486, 227, 6705, 19939, 25, 8554, 10854, 27201, 23002, 38409, 329, 10730, 7587, 460, 2987, 2854, 13]",1.0,1739,best_practice,234,Using ProcessPoolExecutor for parallel processing can improve performance.,,1703,                # append; self._mode == self.ALL_MODE or not bin_path.exists(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 24443, 26, 2116, 13557, 14171, 6624, 2116, 13, 7036, 62, 49058, 393, 407, 9874, 62, 6978, 13, 1069, 1023, 3419]"
üß† ML Signal: Logging the end of a process can be used to identify function exit points.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 886, 286, 257, 1429, 460, 307, 973, 284, 5911, 2163, 8420, 2173, 13]",1.0,1755,ml_signal,251,Logging the end of a process can be used to identify function exit points.,,1739,        if df is None or df.empty:,"[220, 220, 220, 220, 220, 220, 220, 611, 47764, 318, 6045, 393, 47764, 13, 28920, 25]"
‚úÖ Best Practice: Use logging to track the start of a process for better debugging and monitoring.,"[26486, 227, 6705, 19939, 25, 5765, 18931, 284, 2610, 262, 923, 286, 257, 1429, 329, 1365, 28769, 290, 9904, 13]",0.5,1764,best_practice,249,Use logging to track the start of a process for better debugging and monitoring.,,1755,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Usage of sorted and map functions indicates data transformation patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 23243, 290, 3975, 5499, 9217, 1366, 13389, 7572, 13]",0.5,1780,ml_signal,251,Usage of sorted and map functions indicates data transformation patterns.,,1764,        if df is None or df.empty:,"[220, 220, 220, 220, 220, 220, 220, 611, 47764, 318, 6045, 393, 47764, 13, 28920, 25]"
"üß† ML Signal: Method call pattern for saving data, useful for understanding data persistence behavior.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 8914, 1366, 11, 4465, 329, 4547, 1366, 30802, 4069, 13]",0.5,1792,ml_signal,253,"Method call pattern for saving data, useful for understanding data persistence behavior.",,1780,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
‚úÖ Best Practice: Use logging to track the end of a process for better debugging and monitoring.,"[26486, 227, 6705, 19939, 25, 5765, 18931, 284, 2610, 262, 886, 286, 257, 1429, 329, 1365, 28769, 290, 9904, 13]",0.5,1814,best_practice,255,Use logging to track the end of a process for better debugging and monitoring.,,1792,        # try to remove dup rows or it will cause exception when reindex.,"[220, 220, 220, 220, 220, 220, 220, 1303, 1949, 284, 4781, 32597, 15274, 393, 340, 481, 2728, 6631, 618, 302, 9630, 13]"
‚úÖ Best Practice: Method name suggests it's a private method; consider using a single underscore for convention.,"[26486, 227, 6705, 19939, 25, 11789, 1438, 5644, 340, 338, 257, 2839, 2446, 26, 2074, 1262, 257, 2060, 44810, 329, 9831, 13]",0.5,1826,best_practice,253,Method name suggests it's a private method; consider using a single underscore for convention.,,1814,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
üß† ML Signal: Logging usage pattern can be used to identify logging practices.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 460, 307, 973, 284, 5911, 18931, 6593, 13]",1.0,1848,ml_signal,255,Logging usage pattern can be used to identify logging practices.,,1826,        # try to remove dup rows or it will cause exception when reindex.,"[220, 220, 220, 220, 220, 220, 220, 1303, 1949, 284, 4781, 32597, 15274, 393, 340, 481, 2728, 6631, 618, 302, 9630, 13]"
üß† ML Signal: Method call with self indicates instance method usage pattern.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 2116, 9217, 4554, 2446, 8748, 3912, 13]",1.0,1848,ml_signal,257,Method call with self indicates instance method usage pattern.,,1848,,[]
üß† ML Signal: Logging usage pattern can be used to identify logging practices.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 460, 307, 973, 284, 5911, 18931, 6593, 13]",1.0,1879,ml_signal,259,Logging usage pattern can be used to identify logging practices.,,1848,        features_dir = self._features_dir.joinpath(code_to_fname(code).lower()),"[220, 220, 220, 220, 220, 220, 220, 3033, 62, 15908, 796, 2116, 13557, 40890, 62, 15908, 13, 22179, 6978, 7, 8189, 62, 1462, 62, 69, 3672, 7, 8189, 737, 21037, 28955]"
‚úÖ Best Practice: Use of logging for tracking the execution flow and debugging,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 9646, 262, 9706, 5202, 290, 28769]",0.5,1890,best_practice,258,Use of logging for tracking the execution flow and debugging,,1879,        # features save dir,"[220, 220, 220, 220, 220, 220, 220, 1303, 3033, 3613, 26672]"
üß† ML Signal: Use of partial function to pre-fill arguments for another function,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 13027, 2163, 284, 662, 12, 20797, 7159, 329, 1194, 2163]",0.5,1914,ml_signal,260,Use of partial function to pre-fill arguments for another function,,1890,"        features_dir.mkdir(parents=True, exist_ok=True)","[220, 220, 220, 220, 220, 220, 220, 3033, 62, 15908, 13, 28015, 15908, 7, 23743, 28, 17821, 11, 2152, 62, 482, 28, 17821, 8]"
‚úÖ Best Practice: Use of tqdm for progress tracking in loops,"[26486, 227, 6705, 19939, 25, 5765, 286, 256, 80, 36020, 329, 4371, 9646, 287, 23607]",1.0,1914,best_practice,262,Use of tqdm for progress tracking in loops,,1914,,[]
‚úÖ Best Practice: Use of ProcessPoolExecutor for parallel processing,"[26486, 227, 6705, 19939, 25, 5765, 286, 10854, 27201, 23002, 38409, 329, 10730, 7587]",1.0,1922,best_practice,264,Use of ProcessPoolExecutor for parallel processing,,1914,    def dump(self):,"[220, 220, 220, 825, 10285, 7, 944, 2599]"
üß† ML Signal: Use of executor.map for parallel execution of a function over a list,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3121, 273, 13, 8899, 329, 10730, 9706, 286, 257, 2163, 625, 257, 1351]",0.5,1922,ml_signal,266,Use of executor.map for parallel execution of a function over a list,,1922,,[]
‚úÖ Best Practice: Updating progress bar inside the loop,"[26486, 227, 6705, 19939, 25, 3205, 38734, 4371, 2318, 2641, 262, 9052]",1.0,1933,best_practice,268,Updating progress bar inside the loop,,1922,        self.dump(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 39455, 3419]"
‚úÖ Best Practice: Use of logging for tracking the execution flow and debugging,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 9646, 262, 9706, 5202, 290, 28769]",0.5,1933,best_practice,270,Use of logging for tracking the execution flow and debugging,,1933,,[]
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and functionality of the method.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 11244, 286, 262, 2446, 13]",1.0,1933,best_practice,266,Consider adding a docstring to describe the purpose and functionality of the method.,,1933,,[]
‚úÖ Best Practice: Ensure that the method name '_get_all_date' accurately reflects its functionality.,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 2446, 1438, 705, 62, 1136, 62, 439, 62, 4475, 6, 14351, 12497, 663, 11244, 13]",0.5,1944,best_practice,268,Ensure that the method name '_get_all_date' accurately reflects its functionality.,,1933,        self.dump(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 39455, 3419]"
‚úÖ Best Practice: Ensure that the method name '_dump_calendars' accurately reflects its functionality.,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 2446, 1438, 705, 62, 39455, 62, 9948, 44942, 6, 14351, 12497, 663, 11244, 13]",0.5,1944,best_practice,270,Ensure that the method name '_dump_calendars' accurately reflects its functionality.,,1944,,[]
‚úÖ Best Practice: Ensure that the method name '_dump_instruments' accurately reflects its functionality.,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 2446, 1438, 705, 62, 39455, 62, 259, 2536, 2886, 6, 14351, 12497, 663, 11244, 13]",0.5,1957,best_practice,272,Ensure that the method name '_dump_instruments' accurately reflects its functionality.,,1944,    def _get_all_date(self):,"[220, 220, 220, 825, 4808, 1136, 62, 439, 62, 4475, 7, 944, 2599]"
‚úÖ Best Practice: Ensure that the method name '_dump_features' accurately reflects its functionality.,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 2446, 1438, 705, 62, 39455, 62, 40890, 6, 14351, 12497, 663, 11244, 13]",0.5,1971,best_practice,274,Ensure that the method name '_dump_features' accurately reflects its functionality.,,1957,        all_datetime = set(),"[220, 220, 220, 220, 220, 220, 220, 477, 62, 19608, 8079, 796, 900, 3419]"
‚úÖ Best Practice: Class names should follow the CapWords convention for readability.,"[26486, 227, 6705, 19939, 25, 5016, 3891, 815, 1061, 262, 4476, 37117, 9831, 329, 1100, 1799, 13]",0.5,1982,best_practice,271,Class names should follow the CapWords convention for readability.,,1971,class DumpDataAll(DumpDataBase):,"[4871, 360, 931, 6601, 3237, 7, 35, 931, 6601, 14881, 2599]"
üß† ML Signal: Logging at the start of a function indicates a common pattern for tracking execution flow.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 379, 262, 923, 286, 257, 2163, 9217, 257, 2219, 3912, 329, 9646, 9706, 5202, 13]",1.0,1999,ml_signal,273,Logging at the start of a function indicates a common pattern for tracking execution flow.,,1982,"        logger.info(""start get all date......"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 9688, 651, 477, 3128, 16317, 4943]"
‚úÖ Best Practice: Using partial functions can improve code readability and reusability.,"[26486, 227, 6705, 19939, 25, 8554, 13027, 5499, 460, 2987, 2438, 1100, 1799, 290, 302, 385, 1799, 13]",1.0,2013,best_practice,274,Using partial functions can improve code readability and reusability.,,1999,        all_datetime = set(),"[220, 220, 220, 220, 220, 220, 220, 477, 62, 19608, 8079, 796, 900, 3419]"
‚úÖ Best Practice: Using sorted and filter together is a common pattern for processing collections.,"[26486, 227, 6705, 19939, 25, 8554, 23243, 290, 8106, 1978, 318, 257, 2219, 3912, 329, 7587, 17268, 13]",1.0,2060,best_practice,283,Using sorted and filter together is a common pattern for processing collections.,,2013,"                    if isinstance(_begin_time, pd.Timestamp) and isinstance(_end_time, pd.Timestamp):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 28264, 27471, 62, 2435, 11, 279, 67, 13, 14967, 27823, 8, 290, 318, 39098, 28264, 437, 62, 2435, 11, 279, 67, 13, 14967, 27823, 2599]"
‚úÖ Best Practice: Using tqdm for progress indication is a good practice for long-running operations.,"[26486, 227, 6705, 19939, 25, 8554, 256, 80, 36020, 329, 4371, 12955, 318, 257, 922, 3357, 329, 890, 12, 20270, 4560, 13]",1.0,2099,best_practice,285,Using tqdm for progress indication is a good practice for long-running operations.,,2060,                        _end_time = self._format_datetime(_end_time),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 437, 62, 2435, 796, 2116, 13557, 18982, 62, 19608, 8079, 28264, 437, 62, 2435, 8]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the number of workers is controlled to prevent resource exhaustion.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 1271, 286, 3259, 318, 6856, 284, 2948, 8271, 32493, 13]",0.5,2143,sast_risk,287,Ensure that the number of workers is controlled to prevent resource exhaustion.,Low,2099,"                        _inst_fields = [symbol.upper(), _begin_time, _end_time]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 8625, 62, 25747, 796, 685, 1837, 23650, 13, 45828, 22784, 4808, 27471, 62, 2435, 11, 4808, 437, 62, 2435, 60]"
‚úÖ Best Practice: Type checking ensures that the variables are of expected types.,"[26486, 227, 6705, 19939, 25, 5994, 10627, 19047, 326, 262, 9633, 389, 286, 2938, 3858, 13]",1.0,2167,best_practice,290,Type checking ensures that the variables are of expected types.,,2143,"        self._kwargs[""all_datetime_set""] = all_datetime","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 46265, 22046, 14692, 439, 62, 19608, 8079, 62, 2617, 8973, 796, 477, 62, 19608, 8079]"
"‚úÖ Best Practice: Using from_dict with orient=""index"" is a common pattern for DataFrame creation.","[26486, 227, 6705, 19939, 25, 8554, 422, 62, 11600, 351, 11367, 2625, 9630, 1, 318, 257, 2219, 3912, 329, 6060, 19778, 6282, 13]",1.0,2203,best_practice,296,"Using from_dict with orient=""index"" is a common pattern for DataFrame creation.",,2167,"        self._calendars_list = sorted(map(pd.Timestamp, self._kwargs[""all_datetime_set""]))","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 9948, 44942, 62, 4868, 796, 23243, 7, 8899, 7, 30094, 13, 14967, 27823, 11, 2116, 13557, 46265, 22046, 14692, 439, 62, 19608, 8079, 62, 2617, 8973, 4008]"
üß† ML Signal: Saving data to a persistent storage is a common pattern for data processing tasks.,"[8582, 100, 254, 10373, 26484, 25, 34689, 1366, 284, 257, 16218, 6143, 318, 257, 2219, 3912, 329, 1366, 7587, 8861, 13]",0.5,2219,ml_signal,301,Saving data to a persistent storage is a common pattern for data processing tasks.,,2203,"        logger.info(""start dump instruments......"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 9688, 10285, 12834, 16317, 4943]"
üß† ML Signal: Logging at the end of a function indicates a common pattern for tracking execution flow.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 379, 262, 886, 286, 257, 2163, 9217, 257, 2219, 3912, 329, 9646, 9706, 5202, 13]",1.0,2246,ml_signal,302,Logging at the end of a function indicates a common pattern for tracking execution flow.,,2219,"        self.save_instruments(self._kwargs[""date_range_list""])","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 21928, 62, 259, 2536, 2886, 7, 944, 13557, 46265, 22046, 14692, 4475, 62, 9521, 62, 4868, 8973, 8]"
üß† ML Signal: Method name 'dump' suggests data serialization or export operation,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 705, 39455, 6, 5644, 1366, 11389, 1634, 393, 10784, 4905]",0.5,2262,ml_signal,295,Method name 'dump' suggests data serialization or export operation,,2246,"        logger.info(""start dump calendars......"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 9688, 10285, 50215, 16317, 4943]"
‚úÖ Best Practice: Use of joinpath for file path construction improves readability and OS compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 4654, 6978, 329, 2393, 3108, 5103, 19575, 1100, 1799, 290, 7294, 17764]",1.0,2298,best_practice,296,Use of joinpath for file path construction improves readability and OS compatibility,,2262,"        self._calendars_list = sorted(map(pd.Timestamp, self._kwargs[""all_datetime_set""]))","[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 9948, 44942, 62, 4868, 796, 23243, 7, 8899, 7, 30094, 13, 14967, 27823, 11, 2116, 13557, 46265, 22046, 14692, 439, 62, 19608, 8079, 62, 2617, 8973, 4008]"
‚úÖ Best Practice: Chaining methods for concise and readable data transformation,"[26486, 227, 6705, 19939, 25, 609, 1397, 5050, 329, 35327, 290, 31744, 1366, 13389]",0.5,2314,best_practice,301,Chaining methods for concise and readable data transformation,,2298,"        logger.info(""start dump instruments......"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 9688, 10285, 12834, 16317, 4943]"
‚úÖ Best Practice: Class should have a docstring explaining its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 8748]",0.5,2314,best_practice,304,Class should have a docstring explaining its purpose and usage,,2314,,[]
‚úÖ Best Practice: Docstring provides clear parameter descriptions and default values.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 11507, 16969, 290, 4277, 3815, 13]",1.0,2329,best_practice,318,Docstring provides clear parameter descriptions and default values.,,2314,        self._dump_instruments(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 39455, 62, 259, 2536, 2886, 3419]"
"üß† ML Signal: Use of super() indicates inheritance, which is a common pattern in OOP.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2208, 3419, 9217, 24155, 11, 543, 318, 257, 2219, 3912, 287, 440, 3185, 13]",0.5,2352,ml_signal,344,"Use of super() indicates inheritance, which is a common pattern in OOP.",,2329,        self.save_instruments(_inst_df.reset_index()),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 21928, 62, 259, 2536, 2886, 28264, 8625, 62, 7568, 13, 42503, 62, 9630, 28955]"
"üß† ML Signal: Use of self indicates instance variable assignment, common in class methods.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2116, 9217, 4554, 7885, 16237, 11, 2219, 287, 1398, 5050, 13]",0.5,2352,ml_signal,358,"Use of self indicates instance variable assignment, common in class methods.",,2352,,[]
‚úÖ Best Practice: Use of joinpath for path operations improves readability and cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4654, 6978, 329, 3108, 4560, 19575, 1100, 1799, 290, 3272, 12, 24254, 17764, 13]",0.5,2352,best_practice,358,Use of joinpath for path operations improves readability and cross-platform compatibility.,,2352,,[]
‚úÖ Best Practice: Chaining methods like set_index and to_dict improves readability.,"[26486, 227, 6705, 19939, 25, 609, 1397, 5050, 588, 900, 62, 9630, 290, 284, 62, 11600, 19575, 1100, 1799, 13]",0.5,2366,best_practice,363,Chaining methods like set_index and to_dict improves readability.,,2352,"        qlib_dir: str,","[220, 220, 220, 220, 220, 220, 220, 10662, 8019, 62, 15908, 25, 965, 11]"
üß† ML Signal: Loading all source data at once could indicate a pattern for batch processing.,"[8582, 100, 254, 10373, 26484, 25, 12320, 477, 2723, 1366, 379, 1752, 714, 7603, 257, 3912, 329, 15458, 7587, 13]",0.5,2383,ml_signal,368,Loading all source data at once could indicate a pattern for batch processing.,,2366,"        file_suffix: str = "".csv"",","[220, 220, 220, 220, 220, 220, 220, 2393, 62, 37333, 844, 25, 965, 796, 27071, 40664, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of large memory usage if _all_data is very large.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 1588, 4088, 8748, 611, 4808, 439, 62, 7890, 318, 845, 1588, 13]",0.5,2398,sast_risk,370,Potential risk of large memory usage if _all_data is very large.,Low,2383,"        exclude_fields: str = """",","[220, 220, 220, 220, 220, 220, 220, 19607, 62, 25747, 25, 965, 796, 366, 1600]"
‚úÖ Best Practice: Use of lambda for inline filtering improves code conciseness.,"[26486, 227, 6705, 19939, 25, 5765, 286, 37456, 329, 26098, 25431, 19575, 2438, 1673, 271, 9449, 13]",0.5,2414,best_practice,372,Use of lambda for inline filtering improves code conciseness.,,2398,"        limit_nums: int = None,","[220, 220, 220, 220, 220, 220, 220, 4179, 62, 77, 5700, 25, 493, 796, 6045, 11]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,2431,ml_signal,368,Logging usage pattern,,2414,"        file_suffix: str = "".csv"",","[220, 220, 220, 220, 220, 220, 220, 2393, 62, 37333, 844, 25, 965, 796, 27071, 40664, 1600]"
‚úÖ Best Practice: Initialize variables before use,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 878, 779]",1.0,2446,best_practice,370,Initialize variables before use,,2431,"        exclude_fields: str = """",","[220, 220, 220, 220, 220, 220, 220, 19607, 62, 25747, 25, 965, 796, 366, 1600]"
‚ö†Ô∏è SAST Risk (Low): Potential for file path traversal if file_path is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 2393, 3108, 33038, 282, 611, 2393, 62, 6978, 318, 407, 31031]",0.5,2461,sast_risk,371,Potential for file path traversal if file_path is not validated,Low,2446,"        include_fields: str = """",","[220, 220, 220, 220, 220, 220, 220, 2291, 62, 25747, 25, 965, 796, 366, 1600]"
"‚ö†Ô∏è SAST Risk (Low): Assumes self.date_field_name is a valid column name, potential KeyError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 2116, 13, 4475, 62, 3245, 62, 3672, 318, 257, 4938, 5721, 1438, 11, 2785, 7383, 12331]",0.5,2465,sast_risk,373,"Assumes self.date_field_name is a valid column name, potential KeyError",Low,2461,    ):,"[220, 220, 220, 15179]"
‚ö†Ô∏è SAST Risk (Low): Assumes get_symbol_from_file returns a valid value for the column,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 651, 62, 1837, 23650, 62, 6738, 62, 7753, 5860, 257, 4938, 1988, 329, 262, 5721]",0.5,2465,sast_risk,375,Assumes get_symbol_from_file returns a valid value for the column,Low,2465,,[]
‚úÖ Best Practice: Use of tqdm for progress indication improves user experience,"[26486, 227, 6705, 19939, 25, 5765, 286, 256, 80, 36020, 329, 4371, 12955, 19575, 2836, 1998]",0.5,2478,best_practice,378,Use of tqdm for progress indication improves user experience,,2465,        csv_path: str,"[220, 220, 220, 220, 220, 220, 220, 269, 21370, 62, 6978, 25, 965]"
‚úÖ Best Practice: Use of ThreadPoolExecutor for parallel processing improves performance,"[26486, 227, 6705, 19939, 25, 5765, 286, 14122, 27201, 23002, 38409, 329, 10730, 7587, 19575, 2854]",0.5,2491,best_practice,380,Use of ThreadPoolExecutor for parallel processing improves performance,,2478,        qlib_dir: str,"[220, 220, 220, 220, 220, 220, 220, 10662, 8019, 62, 15908, 25, 965]"
üß† ML Signal: Pattern of appending non-empty DataFrames to a list,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 598, 1571, 1729, 12, 28920, 6060, 35439, 284, 257, 1351]",0.5,2507,ml_signal,384,Pattern of appending non-empty DataFrames to a list,,2491,"        freq: str, default ""day""","[220, 220, 220, 220, 220, 220, 220, 2030, 80, 25, 965, 11, 4277, 366, 820, 1]"
‚úÖ Best Practice: Logging provides traceability and debugging information,"[26486, 227, 6705, 19939, 25, 5972, 2667, 3769, 12854, 1799, 290, 28769, 1321]",0.5,2521,best_practice,387,Logging provides traceability and debugging information,,2507,            number of threads,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1271, 286, 14390]"
‚ö†Ô∏è SAST Risk (Low): Assumes all_df contains DataFrames with compatible schemas for concatenation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 477, 62, 7568, 4909, 6060, 35439, 351, 11670, 3897, 5356, 329, 1673, 36686, 341]",0.5,2542,sast_risk,389,Assumes all_df contains DataFrames with compatible schemas for concatenation,Low,2521,            the name of the date field in the csv,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 1438, 286, 262, 3128, 2214, 287, 262, 269, 21370]"
"‚úÖ Best Practice: Method name suggests a private method, which is a good practice for encapsulation","[26486, 227, 6705, 19939, 25, 11789, 1438, 5644, 257, 2839, 2446, 11, 543, 318, 257, 922, 3357, 329, 32652, 1741]",1.0,2570,best_practice,383,"Method name suggests a private method, which is a good practice for encapsulation",,2542,"            if backup_dir is not None, backup qlib_dir to backup_dir","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 11559, 62, 15908, 318, 407, 6045, 11, 11559, 10662, 8019, 62, 15908, 284, 11559, 62, 15908]"
‚úÖ Best Practice: Placeholder method with 'pass' indicates future implementation,"[26486, 227, 6705, 19939, 25, 8474, 13829, 2446, 351, 705, 6603, 6, 9217, 2003, 7822]",0.5,2583,best_practice,385,Placeholder method with 'pass' indicates future implementation,,2570,            transaction frequency,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8611, 8373]"
‚úÖ Best Practice: Method is defined but not implemented; consider adding a docstring or implementation.,"[26486, 227, 6705, 19939, 25, 11789, 318, 5447, 475, 407, 9177, 26, 2074, 4375, 257, 2205, 8841, 393, 7822, 13]",1.0,2596,best_practice,385,Method is defined but not implemented; consider adding a docstring or implementation.,,2583,            transaction frequency,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8611, 8373]"
‚úÖ Best Practice: Use of ProcessPoolExecutor for parallel processing,"[26486, 227, 6705, 19939, 25, 5765, 286, 10854, 27201, 23002, 38409, 329, 10730, 7587]",1.0,2614,best_practice,390,Use of ProcessPoolExecutor for parallel processing,,2596,"        file_suffix: str, default "".csv""","[220, 220, 220, 220, 220, 220, 220, 2393, 62, 37333, 844, 25, 965, 11, 4277, 27071, 40664, 1]"
üß† ML Signal: Iterating over grouped data,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 32824, 1366]",1.0,2628,ml_signal,393,Iterating over grouped data,,2614,            symbol field name,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 2214, 1438]"
üß† ML Signal: Data transformation and normalization,"[8582, 100, 254, 10373, 26484, 25, 6060, 13389, 290, 3487, 1634]",1.0,2641,ml_signal,395,Data transformation and normalization,,2628,            dump fields,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10285, 7032]"
üß† ML Signal: Extracting date range from data,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 3128, 2837, 422, 1366]",0.5,2655,ml_signal,397,Extracting date range from data,,2641,            fields not dumped,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7032, 407, 24105]"
üß† ML Signal: Filtering and sorting data,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 290, 29407, 1366]",0.5,2669,ml_signal,405,Filtering and sorting data,,2655,"            freq,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2030, 80, 11]"
üß† ML Signal: Updating data structures with new information,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 1366, 8573, 351, 649, 1321]",0.5,2684,ml_signal,411,Updating data structures with new information,,2669,"            include_fields,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2291, 62, 25747, 11]"
‚úÖ Best Practice: Submitting tasks to executor for parallel execution,"[26486, 227, 6705, 19939, 25, 3834, 16138, 8861, 284, 3121, 273, 329, 10730, 9706]",0.5,2700,best_practice,413,Submitting tasks to executor for parallel execution,,2684,        self._mode = self.UPDATE_MODE,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 14171, 796, 2116, 13, 16977, 62, 49058]"
‚úÖ Best Practice: Submitting tasks to executor for parallel execution,"[26486, 227, 6705, 19939, 25, 3834, 16138, 8861, 284, 3121, 273, 329, 10730, 9706]",0.5,2725,best_practice,419,Submitting tasks to executor for parallel execution,,2700,            .set_index([self.symbol_field_name]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 2617, 62, 9630, 26933, 944, 13, 1837, 23650, 62, 3245, 62, 3672, 12962]"
‚úÖ Best Practice: Use of tqdm for progress tracking,"[26486, 227, 6705, 19939, 25, 5765, 286, 256, 80, 36020, 329, 4371, 9646]",1.0,2738,best_practice,421,Use of tqdm for progress tracking,,2725,        )  # type: dict,"[220, 220, 220, 220, 220, 220, 220, 1267, 220, 1303, 2099, 25, 8633]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563]",0.5,2746,sast_risk,427,Catching broad exceptions can hide specific errors,Low,2738,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
"üß† ML Signal: Method that involves saving or dumping data, indicating a data persistence pattern","[8582, 100, 254, 10373, 26484, 25, 11789, 326, 9018, 8914, 393, 30231, 1366, 11, 12739, 257, 1366, 30802, 3912]",0.5,2759,ml_signal,423,"Method that involves saving or dumping data, indicating a data persistence pattern",,2746,        # load all csv files,"[220, 220, 220, 220, 220, 220, 220, 1303, 3440, 477, 269, 21370, 3696]"
üß† ML Signal: Method call that suggests feature processing or transformation,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 326, 5644, 3895, 7587, 393, 13389]",0.5,2786,ml_signal,425,Method call that suggests feature processing or transformation,,2759,        self._new_calendar_list = self._old_calendar_list + sorted(,"[220, 220, 220, 220, 220, 220, 220, 2116, 13557, 3605, 62, 9948, 9239, 62, 4868, 796, 2116, 13557, 727, 62, 9948, 9239, 62, 4868, 1343, 23243, 7]"
"üß† ML Signal: DataFrame creation from a dictionary, indicating data manipulation","[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 6282, 422, 257, 22155, 11, 12739, 1366, 17512]",0.5,2794,ml_signal,427,"DataFrame creation from a dictionary, indicating data manipulation",,2786,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
"üß† ML Signal: Setting index names, indicating data labeling or organization","[8582, 100, 254, 10373, 26484, 25, 25700, 6376, 3891, 11, 12739, 1366, 27393, 393, 4009]",0.5,2809,ml_signal,429,"Setting index names, indicating data labeling or organization",,2794,    def _load_all_source_data(self):,"[220, 220, 220, 825, 4808, 2220, 62, 439, 62, 10459, 62, 7890, 7, 944, 2599]"
"üß† ML Signal: Saving a DataFrame, indicating data persistence","[8582, 100, 254, 10373, 26484, 25, 34689, 257, 6060, 19778, 11, 12739, 1366, 30802]",0.5,2824,ml_signal,429,"Saving a DataFrame, indicating data persistence",,2809,    def _load_all_source_data(self):,"[220, 220, 220, 825, 4808, 2220, 62, 439, 62, 10459, 62, 7890, 7, 944, 2599]"
‚ö†Ô∏è SAST Risk (Low): Using fire.Fire can execute arbitrary code if input is not controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 2046, 13, 13543, 460, 12260, 14977, 2438, 611, 5128, 318, 407, 6856]",1.0,2839,sast_risk,429,Using fire.Fire can execute arbitrary code if input is not controlled,Low,2824,    def _load_all_source_data(self):,"[220, 220, 220, 825, 4808, 2220, 62, 439, 62, 10459, 62, 7890, 7, 944, 2599]"
üß† ML Signal: Command-line interface pattern using fire.Fire,"[8582, 100, 254, 10373, 26484, 25, 9455, 12, 1370, 7071, 3912, 1262, 2046, 13, 13543]",0.5,2854,ml_signal,429,Command-line interface pattern using fire.Fire,,2839,    def _load_all_source_data(self):,"[220, 220, 220, 825, 4808, 2220, 62, 439, 62, 10459, 62, 7890, 7, 944, 2599]"

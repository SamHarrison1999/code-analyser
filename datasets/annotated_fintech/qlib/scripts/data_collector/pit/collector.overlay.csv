annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Low): Modifying sys.path can lead to import conflicts or security issues if not handled carefully.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3401, 4035, 25064, 13, 6978, 460, 1085, 284, 1330, 12333, 393, 2324, 2428, 611, 407, 12118, 7773, 13]",1.0,6,sast_risk,11,Modifying sys.path can lead to import conflicts or security issues if not handled carefully.,Low,0,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
üß† ML Signal: Importing utility functions indicates a pattern of code reuse and modular design.,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 10361, 5499, 9217, 257, 3912, 286, 2438, 32349, 290, 26507, 1486, 13]",0.5,6,ml_signal,14,Importing utility functions indicates a pattern of code reuse and modular design.,,6,,[]
‚úÖ Best Practice: Constants are defined at the class level for easy configuration and readability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 379, 262, 1398, 1241, 329, 2562, 8398, 290, 1100, 1799, 13]",0.5,6,best_practice,14,Constants are defined at the class level for easy configuration and readability.,,6,,[]
‚úÖ Best Practice: Default start datetime constants are defined for both quarterly and annual intervals.,"[26486, 227, 6705, 19939, 25, 15161, 923, 4818, 8079, 38491, 389, 5447, 329, 1111, 27868, 290, 5079, 20016, 13]",0.5,23,best_practice,16,Default start datetime constants are defined for both quarterly and annual intervals.,,6,sys.path.append(str(BASE_DIR.parent.parent)),"[17597, 13, 6978, 13, 33295, 7, 2536, 7, 33, 11159, 62, 34720, 13, 8000, 13, 8000, 4008]"
‚ö†Ô∏è SAST Risk (Low): Using current datetime can lead to non-deterministic behavior in tests or logs.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1459, 4818, 8079, 460, 1085, 284, 1729, 12, 67, 2357, 49228, 4069, 287, 5254, 393, 17259, 13]",1.0,47,sast_risk,19,Using current datetime can lead to non-deterministic behavior in tests or logs.,Low,23,"from data_collector.utils import get_hs_stock_symbols, get_calendar_list","[6738, 1366, 62, 33327, 273, 13, 26791, 1330, 651, 62, 11994, 62, 13578, 62, 1837, 2022, 10220, 11, 651, 62, 9948, 9239, 62, 4868]"
‚ö†Ô∏è SAST Risk (Low): Using current datetime can lead to non-deterministic behavior in tests or logs.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1459, 4818, 8079, 460, 1085, 284, 1729, 12, 67, 2357, 49228, 4069, 287, 5254, 393, 17259, 13]",1.0,47,sast_risk,21,Using current datetime can lead to non-deterministic behavior in tests or logs.,Low,47,,[]
‚úÖ Best Practice: Constants for interval types improve code readability and reduce the risk of typos.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 329, 16654, 3858, 2987, 2438, 1100, 1799, 290, 4646, 262, 2526, 286, 1259, 1930, 13]",0.5,47,best_practice,21,Constants for interval types improve code readability and reduce the risk of typos.,,47,,[]
‚úÖ Best Practice: Docstring provides clear parameter descriptions and default values,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 11507, 16969, 290, 4277, 3815]",1.0,63,best_practice,34,Docstring provides clear parameter descriptions and default values,,47,"        start: Optional[str] = None,","[220, 220, 220, 220, 220, 220, 220, 923, 25, 32233, 58, 2536, 60, 796, 6045, 11]"
üß† ML Signal: Usage of regex for filtering symbols,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 40364, 329, 25431, 14354]",0.5,73,ml_signal,59,Usage of regex for filtering symbols,,63,        end: str,"[220, 220, 220, 220, 220, 220, 220, 886, 25, 965]"
‚úÖ Best Practice: Use of super() to initialize parent class,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 41216, 2560, 1398]",0.5,83,best_practice,59,Use of super() to initialize parent class,,73,        end: str,"[220, 220, 220, 220, 220, 220, 220, 886, 25, 965]"
‚úÖ Best Practice: Logging the start of a function can help in tracing and debugging.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 262, 923, 286, 257, 2163, 460, 1037, 287, 35328, 290, 28769, 13]",0.5,98,best_practice,71,Logging the start of a function can help in tracing and debugging.,,83,"            start=start,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 28, 9688, 11]"
üß† ML Signal: Usage of a function to retrieve stock symbols indicates a pattern of data retrieval.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2163, 284, 19818, 4283, 14354, 9217, 257, 3912, 286, 1366, 45069, 13]",0.5,114,ml_signal,73,Usage of a function to retrieve stock symbols indicates a pattern of data retrieval.,,98,"            interval=interval,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16654, 28, 3849, 2100, 11]"
‚úÖ Best Practice: Checking for None before using a variable is a good practice to avoid errors.,"[26486, 227, 6705, 19939, 25, 39432, 329, 6045, 878, 1262, 257, 7885, 318, 257, 922, 3357, 284, 3368, 8563, 13]",1.0,139,best_practice,75,Checking for None before using a variable is a good practice to avoid errors.,,114,"            max_collector_count=max_collector_count,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3509, 62, 33327, 273, 62, 9127, 28, 9806, 62, 33327, 273, 62, 9127, 11]"
‚úÖ Best Practice: Compiling regex outside of loops for efficiency.,"[26486, 227, 6705, 19939, 25, 3082, 4386, 40364, 2354, 286, 23607, 329, 9332, 13]",0.5,162,best_practice,77,Compiling regex outside of loops for efficiency.,,139,"            check_data_length=check_data_length,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2198, 62, 7890, 62, 13664, 28, 9122, 62, 7890, 62, 13664, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential for ReDoS if the regex is user-controlled and complex.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 797, 46498, 611, 262, 40364, 318, 2836, 12, 14401, 290, 3716, 13]",0.5,170,sast_risk,79,Potential for ReDoS if the regex is user-controlled and complex.,Low,162,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Logging the number of items processed can help in monitoring and debugging.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 262, 1271, 286, 3709, 13686, 460, 1037, 287, 9904, 290, 28769, 13]",0.5,188,best_practice,81,Logging the number of items processed can help in monitoring and debugging.,,170,    def get_instrument_list(self) -> List[str]:,"[220, 220, 220, 825, 651, 62, 259, 43872, 62, 4868, 7, 944, 8, 4613, 7343, 58, 2536, 5974]"
üß† ML Signal: Returning a list of symbols is a common pattern in financial data processing.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 1351, 286, 14354, 318, 257, 2219, 3912, 287, 3176, 1366, 7587, 13]",0.5,207,ml_signal,83,Returning a list of symbols is a common pattern in financial data processing.,,188,        symbols = get_hs_stock_symbols(),"[220, 220, 220, 220, 220, 220, 220, 14354, 796, 651, 62, 11994, 62, 13578, 62, 1837, 2022, 10220, 3419]"
"üß† ML Signal: Method for normalizing stock symbols, useful for financial data processing models","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 3487, 2890, 4283, 14354, 11, 4465, 329, 3176, 1366, 7587, 4981]",1.0,215,ml_signal,79,"Method for normalizing stock symbols, useful for financial data processing models",,207,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
"‚ö†Ô∏è SAST Risk (Low): Assumes input symbol always contains a '.', potential for ValueError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 5128, 6194, 1464, 4909, 257, 705, 2637, 11, 2785, 329, 11052, 12331]",1.0,233,sast_risk,81,"Assumes input symbol always contains a '.', potential for ValueError",Low,215,    def get_instrument_list(self) -> List[str]:,"[220, 220, 220, 825, 651, 62, 259, 43872, 62, 4868, 7, 944, 8, 4613, 7343, 58, 2536, 5974]"
‚úÖ Best Practice: Use of ternary operator for concise conditional assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 16237]",1.0,252,best_practice,83,Use of ternary operator for concise conditional assignment,,233,        symbols = get_hs_stock_symbols(),"[220, 220, 220, 220, 220, 220, 220, 14354, 796, 651, 62, 11994, 62, 13578, 62, 1837, 2022, 10220, 3419]"
‚úÖ Best Practice: Use of f-string for string formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 4731, 33313]",1.0,271,best_practice,84,Use of f-string for string formatting,,252,        if self.symbol_regex is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 1837, 23650, 62, 260, 25636, 318, 407, 6045, 25]"
‚úÖ Best Practice: Use of @staticmethod for methods that do not access instance data,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 12708, 24396, 329, 5050, 326, 466, 407, 1895, 4554, 1366]",1.0,271,best_practice,89,Use of @staticmethod for methods that do not access instance data,,271,,[]
üß† ML Signal: Usage of external API call pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 7824, 869, 3912]",1.0,271,ml_signal,89,Usage of external API call pattern,,271,,[]
üß† ML Signal: Loop pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 26304, 3912, 329, 1366, 45069]",0.5,294,ml_signal,92,Loop pattern for data retrieval,,271,"        exchange = ""sh"" if exchange == ""ss"" else ""sz""","[220, 220, 220, 220, 220, 220, 220, 5163, 796, 366, 1477, 1, 611, 5163, 6624, 366, 824, 1, 2073, 366, 82, 89, 1]"
üß† ML Signal: Appending data to a list,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 1366, 284, 257, 1351]",0.5,294,ml_signal,94,Appending data to a list,,294,,[]
üß† ML Signal: DataFrame creation from list,"[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 6282, 422, 1351]",0.5,300,ml_signal,95,DataFrame creation from list,,294,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if keys are missing,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 8251, 389, 4814]",1.0,320,sast_risk,99,Potential KeyError if keys are missing,Low,300,"            ""performanceExpStatDate"": ""period"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 26585, 16870, 17126, 10430, 1298, 366, 41007, 1600]"
üß† ML Signal: Exception handling pattern,"[8582, 100, 254, 10373, 26484, 25, 35528, 9041, 3912]",0.5,320,ml_signal,102,Exception handling pattern,,320,,[]
‚úÖ Best Practice: Use of rename with inplace for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 36265, 351, 287, 5372, 329, 16287]",1.0,332,best_practice,104,Use of rename with inplace for clarity,,320,        report_list = [],"[220, 220, 220, 220, 220, 220, 220, 989, 62, 4868, 796, 17635]"
üß† ML Signal: Adding a constant column to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 18247, 257, 6937, 5721, 284, 6060, 19778]",0.5,357,ml_signal,106,Adding a constant column to DataFrame,,332,            report_list.append(resp.get_row_data()),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 989, 62, 4868, 13, 33295, 7, 4363, 13, 1136, 62, 808, 62, 7890, 28955]"
‚úÖ Best Practice: Use of pd.to_numeric for safe conversion,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 1462, 62, 77, 39223, 329, 3338, 11315]",1.0,366,best_practice,108,Use of pd.to_numeric for safe conversion,,357,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
üß† ML Signal: Applying a lambda function to a DataFrame column,"[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 37456, 2163, 284, 257, 6060, 19778, 5721]",0.5,377,ml_signal,110,Applying a lambda function to a DataFrame column,,366,        except KeyError:,"[220, 220, 220, 220, 220, 220, 220, 2845, 7383, 12331, 25]"
‚úÖ Best Practice: Use a dictionary for column mapping to improve readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 257, 22155, 329, 5721, 16855, 284, 2987, 1100, 1799, 290, 5529, 1799, 13]",1.0,400,best_practice,105,Use a dictionary for column mapping to improve readability and maintainability.,,377,"        while (resp.error_code == ""0"") and resp.next():","[220, 220, 220, 220, 220, 220, 220, 981, 357, 4363, 13, 18224, 62, 8189, 6624, 366, 15, 4943, 290, 1217, 13, 19545, 33529]"
üß† ML Signal: Use of a specific API function with hardcoded parameters.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 7824, 2163, 351, 1327, 40976, 10007, 13]",0.5,427,ml_signal,107,Use of a specific API function with hardcoded parameters.,,400,"        report_df = pd.DataFrame(report_list, columns=resp.fields)","[220, 220, 220, 220, 220, 220, 220, 989, 62, 7568, 796, 279, 67, 13, 6601, 19778, 7, 13116, 62, 4868, 11, 15180, 28, 4363, 13, 25747, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of incorrect date format causing ValueError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 11491, 3128, 5794, 6666, 11052, 12331, 13]",0.5,456,sast_risk,109,Potential risk of incorrect date format causing ValueError.,Low,427,            report_df = report_df[list(column_mapping.keys())],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 989, 62, 7568, 796, 989, 62, 7568, 58, 4868, 7, 28665, 62, 76, 5912, 13, 13083, 3419, 15437]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of incorrect date format causing ValueError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 11491, 3128, 5794, 6666, 11052, 12331, 13]",0.5,474,sast_risk,111,Potential risk of incorrect date format causing ValueError.,Low,456,            return pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 3419]"
‚úÖ Best Practice: Use list comprehension for concise and efficient list creation.,"[26486, 227, 6705, 19939, 25, 5765, 1351, 35915, 329, 35327, 290, 6942, 1351, 6282, 13]",0.5,492,best_practice,113,Use list comprehension for concise and efficient list creation.,,474,"        report_df[""field""] = ""roeWa""","[220, 220, 220, 220, 220, 220, 220, 989, 62, 7568, 14692, 3245, 8973, 796, 366, 20646, 33484, 1]"
üß† ML Signal: Use of a specific API function with dynamic parameters.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2176, 7824, 2163, 351, 8925, 10007, 13]",0.5,492,ml_signal,117,Use of a specific API function with dynamic parameters.,,492,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk of accessing an index that may not exist.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 22534, 281, 6376, 326, 743, 407, 2152, 13]",0.5,523,sast_risk,122,Potential risk of accessing an index that may not exist.,Low,492,"        start_date = datetime.strptime(start_date, ""%Y-%m-%d"")","[220, 220, 220, 220, 220, 220, 220, 923, 62, 4475, 796, 4818, 8079, 13, 2536, 457, 524, 7, 9688, 62, 4475, 11, 36521, 56, 12, 4, 76, 12, 4, 67, 4943]"
‚úÖ Best Practice: Use pandas DataFrame for structured data handling.,"[26486, 227, 6705, 19939, 25, 5765, 19798, 292, 6060, 19778, 329, 20793, 1366, 9041, 13]",0.5,557,best_practice,127,Use pandas DataFrame for structured data handling.,,523,"            resp = bs.query_profit_data(code=code, year=year, quarter=quarter)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1217, 796, 275, 82, 13, 22766, 62, 9183, 62, 7890, 7, 8189, 28, 8189, 11, 614, 28, 1941, 11, 3860, 28, 24385, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if keys are not present in DataFrame columns.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 8251, 389, 407, 1944, 287, 6060, 19778, 15180, 13]",0.5,577,sast_risk,130,Potential KeyError if keys are not present in DataFrame columns.,Low,557,                    continue,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2555]"
‚úÖ Best Practice: Use rename with inplace=True for efficient DataFrame column renaming.,"[26486, 227, 6705, 19939, 25, 5765, 36265, 351, 287, 5372, 28, 17821, 329, 6942, 6060, 19778, 5721, 8851, 3723, 13]",1.0,586,best_practice,136,Use rename with inplace=True for efficient DataFrame column renaming.,,577,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential risk of conversion errors if 'value' column contains non-numeric data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 11315, 8563, 611, 705, 8367, 6, 5721, 4909, 1729, 12, 77, 39223, 1366, 13]",1.0,615,sast_risk,137,Potential risk of conversion errors if 'value' column contains non-numeric data.,Low,586,            profit_df = profit_df[list(column_mapping.keys())],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7630, 62, 7568, 796, 7630, 62, 7568, 58, 4868, 7, 28665, 62, 76, 5912, 13, 13083, 3419, 15437]"
üß† ML Signal: Use of a dictionary for column mapping,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 22155, 329, 5721, 16855]",1.0,642,ml_signal,131,Use of a dictionary for column mapping,,615,                row_data = resp.get_row_data(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5752, 62, 7890, 796, 1217, 13, 1136, 62, 808, 62, 7890, 3419]"
üß† ML Signal: Use of external API call,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 7097, 7824, 869]",1.0,671,ml_signal,137,Use of external API call,,642,            profit_df = profit_df[list(column_mapping.keys())],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7630, 62, 7568, 796, 7630, 62, 7568, 58, 4868, 7, 28665, 62, 76, 5912, 13, 13083, 3419, 15437]"
‚ö†Ô∏è SAST Risk (Low): Potential infinite loop if resp.next() always returns True,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 15541, 9052, 611, 1217, 13, 19545, 3419, 1464, 5860, 6407]",0.5,698,sast_risk,140,Potential infinite loop if resp.next() always returns True,Low,671,"        profit_df.rename(columns=column_mapping, inplace=True)","[220, 220, 220, 220, 220, 220, 220, 7630, 62, 7568, 13, 918, 480, 7, 28665, 82, 28, 28665, 62, 76, 5912, 11, 287, 5372, 28, 17821, 8]"
üß† ML Signal: Appending data to a list,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 1366, 284, 257, 1351]",1.0,730,ml_signal,142,Appending data to a list,,698,"        profit_df[""value""] = pd.to_numeric(profit_df[""value""], errors=""ignore"")","[220, 220, 220, 220, 220, 220, 220, 7630, 62, 7568, 14692, 8367, 8973, 796, 279, 67, 13, 1462, 62, 77, 39223, 7, 9183, 62, 7568, 14692, 8367, 33116, 8563, 2625, 46430, 4943]"
üß† ML Signal: Conversion of list to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1351, 284, 6060, 19778]",1.0,741,ml_signal,143,Conversion of list to DataFrame,,730,        return profit_df,"[220, 220, 220, 220, 220, 220, 220, 1441, 7630, 62, 7568]"
üß† ML Signal: Use of list for numeric fields,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1351, 329, 35575, 7032]",0.5,777,ml_signal,146,Use of list for numeric fields,,741,"    def get_forecast_report_df(code: str, start_date: str, end_date: str) -> pd.DataFrame:","[220, 220, 220, 825, 651, 62, 754, 2701, 62, 13116, 62, 7568, 7, 8189, 25, 965, 11, 923, 62, 4475, 25, 965, 11, 886, 62, 4475, 25, 965, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential data type conversion issue,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 2099, 11315, 2071]",1.0,799,sast_risk,149,Potential data type conversion issue,Low,777,"            ""profitForcastExpStatDate"": ""period"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 9183, 1890, 2701, 16870, 17126, 10430, 1298, 366, 41007, 1600]"
‚ö†Ô∏è SAST Risk (Low): Returning empty DataFrame on exception,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42882, 6565, 6060, 19778, 319, 6631]",0.5,838,sast_risk,152,Returning empty DataFrame on exception,Low,799,"        resp = bs.query_forecast_report(code=code, start_date=start_date, end_date=end_date)","[220, 220, 220, 220, 220, 220, 220, 1217, 796, 275, 82, 13, 22766, 62, 754, 2701, 62, 13116, 7, 8189, 28, 8189, 11, 923, 62, 4475, 28, 9688, 62, 4475, 11, 886, 62, 4475, 28, 437, 62, 4475, 8]"
üß† ML Signal: Calculation of new column based on existing data,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 649, 5721, 1912, 319, 4683, 1366]",1.0,861,ml_signal,154,Calculation of new column based on existing data,,838,"        while (resp.error_code == ""0"") and resp.next():","[220, 220, 220, 220, 220, 220, 220, 981, 357, 4363, 13, 18224, 62, 8189, 6624, 366, 15, 4943, 290, 1217, 13, 19545, 33529]"
üß† ML Signal: Reordering DataFrame columns,"[8582, 100, 254, 10373, 26484, 25, 797, 34555, 6060, 19778, 15180]",1.0,889,ml_signal,156,Reordering DataFrame columns,,861,"        forecast_df = pd.DataFrame(forecast_list, columns=resp.fields)","[220, 220, 220, 220, 220, 220, 220, 11092, 62, 7568, 796, 279, 67, 13, 6601, 19778, 7, 754, 2701, 62, 4868, 11, 15180, 28, 4363, 13, 25747, 8]"
üß† ML Signal: Renaming DataFrame columns,"[8582, 100, 254, 10373, 26484, 25, 7152, 3723, 6060, 19778, 15180]",1.0,898,ml_signal,158,Renaming DataFrame columns,,889,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
üß† ML Signal: Adding a constant column to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 18247, 257, 6937, 5721, 284, 6060, 19778]",1.0,909,ml_signal,160,Adding a constant column to DataFrame,,898,        except KeyError:,"[220, 220, 220, 220, 220, 220, 220, 2845, 7383, 12331, 25]"
üß† ML Signal: Returning a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778]",1.0,956,ml_signal,162,Returning a DataFrame,,909,"        forecast_df[""value""] = (forecast_df[""profitForcastChgPctUp""] + forecast_df[""profitForcastChgPctDwn""]) / 200","[220, 220, 220, 220, 220, 220, 220, 11092, 62, 7568, 14692, 8367, 8973, 796, 357, 754, 2701, 62, 7568, 14692, 9183, 1890, 2701, 1925, 70, 47, 310, 4933, 8973, 1343, 11092, 62, 7568, 14692, 9183, 1890, 2701, 1925, 70, 47, 310, 35, 675, 8973, 8, 1220, 939]"
‚ö†Ô∏è SAST Risk (Low): Misuse of @staticmethod decorator without a class context,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 14136, 1904, 286, 2488, 12708, 24396, 11705, 1352, 1231, 257, 1398, 4732]",0.5,983,sast_risk,164,Misuse of @staticmethod decorator without a class context,Low,956,"        forecast_df.rename(columns=column_mapping, inplace=True)","[220, 220, 220, 220, 220, 220, 220, 11092, 62, 7568, 13, 918, 480, 7, 28665, 82, 28, 28665, 62, 76, 5912, 11, 287, 5372, 28, 17821, 8]"
‚úÖ Best Practice: Type hints for function parameters and return type improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5994, 20269, 329, 2163, 10007, 290, 1441, 2099, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,1022,best_practice,152,Type hints for function parameters and return type improve code readability and maintainability.,,983,"        resp = bs.query_forecast_report(code=code, start_date=start_date, end_date=end_date)","[220, 220, 220, 220, 220, 220, 220, 1217, 796, 275, 82, 13, 22766, 62, 754, 2701, 62, 13116, 7, 8189, 28, 8189, 11, 923, 62, 4475, 28, 9688, 62, 4475, 11, 886, 62, 4475, 28, 437, 62, 4475, 8]"
"üß† ML Signal: Hardcoded values like ""sh.600519"" can indicate specific usage patterns or preferences.","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3815, 588, 366, 1477, 13, 8054, 47785, 1, 460, 7603, 2176, 8748, 7572, 393, 15387, 13]",0.5,1047,ml_signal,155,"Hardcoded values like ""sh.600519"" can indicate specific usage patterns or preferences.",,1022,            forecast_list.append(resp.get_row_data()),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11092, 62, 4868, 13, 33295, 7, 4363, 13, 1136, 62, 808, 62, 7890, 28955]"
‚ö†Ô∏è SAST Risk (Low): Parsing strings to dates without validation can lead to unexpected errors if the format is incorrect.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 23042, 278, 13042, 284, 9667, 1231, 21201, 460, 1085, 284, 10059, 8563, 611, 262, 5794, 318, 11491, 13]",1.0,1079,sast_risk,157,Parsing strings to dates without validation can lead to unexpected errors if the format is incorrect.,Low,1047,"        numeric_fields = [""profitForcastChgPctUp"", ""profitForcastChgPctDwn""]","[220, 220, 220, 220, 220, 220, 220, 35575, 62, 25747, 796, 14631, 9183, 1890, 2701, 1925, 70, 47, 310, 4933, 1600, 366, 9183, 1890, 2701, 1925, 70, 47, 310, 35, 675, 8973]"
‚ö†Ô∏è SAST Risk (Low): Parsing strings to dates without validation can lead to unexpected errors if the format is incorrect.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 23042, 278, 13042, 284, 9667, 1231, 21201, 460, 1085, 284, 10059, 8563, 611, 262, 5794, 318, 11491, 13]",1.0,1122,sast_risk,159,Parsing strings to dates without validation can lead to unexpected errors if the format is incorrect.,Low,1079,"            forecast_df[numeric_fields] = forecast_df[numeric_fields].apply(pd.to_numeric, errors=""ignore"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11092, 62, 7568, 58, 77, 39223, 62, 25747, 60, 796, 11092, 62, 7568, 58, 77, 39223, 62, 25747, 4083, 39014, 7, 30094, 13, 1462, 62, 77, 39223, 11, 8563, 2625, 46430, 4943]"
‚úÖ Best Practice: List comprehensions are a concise way to create lists and improve readability.,"[26486, 227, 6705, 19939, 25, 7343, 8569, 507, 389, 257, 35327, 835, 284, 2251, 8341, 290, 2987, 1100, 1799, 13]",0.5,1140,best_practice,161,List comprehensions are a concise way to create lists and improve readability.,,1122,            return pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 3419]"
üß† ML Signal: The use of external API calls can indicate integration patterns and dependencies.,"[8582, 100, 254, 10373, 26484, 25, 383, 779, 286, 7097, 7824, 3848, 460, 7603, 11812, 7572, 290, 20086, 13]",0.5,1159,ml_signal,165,The use of external API calls can indicate integration patterns and dependencies.,,1140,"        forecast_df[""field""] = ""YOYNI""","[220, 220, 220, 220, 220, 220, 220, 11092, 62, 7568, 14692, 3245, 8973, 796, 366, 56, 21414, 22125, 1]"
"‚ö†Ô∏è SAST Risk (Low): Potential infinite loop if `resp.next()` always returns True and `resp.error_code` is ""0"".","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 15541, 9052, 611, 4600, 4363, 13, 19545, 3419, 63, 1464, 5860, 6407, 290, 4600, 4363, 13, 18224, 62, 8189, 63, 318, 366, 15, 1911]",1.0,1159,sast_risk,167,"Potential infinite loop if `resp.next()` always returns True and `resp.error_code` is ""0"".",Low,1159,,[]
‚úÖ Best Practice: Using pd.Timestamp for date comparison ensures compatibility with pandas operations.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 14967, 27823, 329, 3128, 7208, 19047, 17764, 351, 19798, 292, 4560, 13]",0.5,1190,best_practice,172,Using pd.Timestamp for date comparison ensures compatibility with pandas operations.,,1159,"        start_date = datetime.strptime(start_date, ""%Y-%m-%d"")","[220, 220, 220, 220, 220, 220, 220, 923, 62, 4475, 796, 4818, 8079, 13, 2536, 457, 524, 7, 9688, 62, 4475, 11, 36521, 56, 12, 4, 76, 12, 4, 67, 4943]"
‚úÖ Best Practice: Using pandas DataFrame for structured data manipulation is efficient and readable.,"[26486, 227, 6705, 19939, 25, 8554, 19798, 292, 6060, 19778, 329, 20793, 1366, 17512, 318, 6942, 290, 31744, 13]",0.5,1204,best_practice,176,Using pandas DataFrame for structured data manipulation is efficient and readable.,,1190,"        for year, quarter in args:","[220, 220, 220, 220, 220, 220, 220, 329, 614, 11, 3860, 287, 26498, 25]"
‚ö†Ô∏è SAST Risk (Low): Accessing DataFrame columns without checking existence can raise KeyError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8798, 278, 6060, 19778, 15180, 1231, 10627, 6224, 460, 5298, 7383, 12331, 13]",0.5,1238,sast_risk,177,Accessing DataFrame columns without checking existence can raise KeyError.,Low,1204,"            resp = bs.query_growth_data(code=code, year=year, quarter=quarter)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1217, 796, 275, 82, 13, 22766, 62, 27922, 62, 7890, 7, 8189, 28, 8189, 11, 614, 28, 1941, 11, 3860, 28, 24385, 8]"
‚úÖ Best Practice: Using rename with inplace=True avoids unnecessary DataFrame copies.,"[26486, 227, 6705, 19939, 25, 8554, 36265, 351, 287, 5372, 28, 17821, 30940, 13114, 6060, 19778, 9088, 13]",0.5,1267,best_practice,184,Using rename with inplace=True avoids unnecessary DataFrame copies.,,1238,                    growth_list.append(row_data),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3349, 62, 4868, 13, 33295, 7, 808, 62, 7890, 8]"
"üß† ML Signal: Adding constant fields like ""field"" can indicate data labeling or categorization patterns.","[8582, 100, 254, 10373, 26484, 25, 18247, 6937, 7032, 588, 366, 3245, 1, 460, 7603, 1366, 27393, 393, 17851, 1634, 7572, 13]",0.5,1292,ml_signal,185,"Adding constant fields like ""field"" can indicate data labeling or categorization patterns.",,1267,"        growth_df = pd.DataFrame(growth_list, columns=fields)","[220, 220, 220, 220, 220, 220, 220, 3349, 62, 7568, 796, 279, 67, 13, 6601, 19778, 7, 27922, 62, 4868, 11, 15180, 28, 25747, 8]"
"‚ö†Ô∏è SAST Risk (Low): Converting to numeric with errors=""ignore"" can silently fail and lead to data inconsistencies.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 35602, 889, 284, 35575, 351, 8563, 2625, 46430, 1, 460, 24595, 2038, 290, 1085, 284, 1366, 40467, 13]",0.5,1321,sast_risk,187,"Converting to numeric with errors=""ignore"" can silently fail and lead to data inconsistencies.",Low,1292,            growth_df = growth_df[list(column_mapping.keys())],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3349, 62, 7568, 796, 3349, 62, 7568, 58, 4868, 7, 28665, 62, 76, 5912, 13, 13083, 3419, 15437]"
‚ö†Ô∏è SAST Risk (Low): Potential for ValueError if 'interval' is not as expected,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11052, 12331, 611, 705, 3849, 2100, 6, 318, 407, 355, 2938]",1.0,1350,sast_risk,184,Potential for ValueError if 'interval' is not as expected,Low,1321,                    growth_list.append(row_data),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3349, 62, 4868, 13, 33295, 7, 808, 62, 7890, 8]"
‚ö†Ô∏è SAST Risk (Low): Assumes 'symbol' is always in the correct format with a '.',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 1837, 23650, 6, 318, 1464, 287, 262, 3376, 5794, 351, 257, 705, 2637]",1.0,1379,sast_risk,187,Assumes 'symbol' is always in the correct format with a '.',Low,1350,            growth_df = growth_df[list(column_mapping.keys())],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3349, 62, 7568, 796, 3349, 62, 7568, 58, 4868, 7, 28665, 62, 76, 5912, 13, 13083, 3419, 15437]"
‚úÖ Best Practice: Use of ternary operator for concise conditional assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 16237]",1.0,1397,best_practice,189,Use of ternary operator for concise conditional assignment,,1379,            return pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 3419]"
üß† ML Signal: String formatting pattern for constructing 'code',"[8582, 100, 254, 10373, 26484, 25, 10903, 33313, 3912, 329, 30580, 705, 8189, 6]",1.0,1416,ml_signal,191,String formatting pattern for constructing 'code',,1397,"        growth_df[""field""] = ""YOYNI""","[220, 220, 220, 220, 220, 220, 220, 3349, 62, 7568, 14692, 3245, 8973, 796, 366, 56, 21414, 22125, 1]"
üß† ML Signal: Usage of strftime for date formatting,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 965, 31387, 329, 3128, 33313]",0.5,1427,ml_signal,193,Usage of strftime for date formatting,,1416,        return growth_df,"[220, 220, 220, 220, 220, 220, 220, 1441, 3349, 62, 7568]"
üß† ML Signal: Usage of strftime for date formatting,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 965, 31387, 329, 3128, 33313]",0.5,1435,ml_signal,195,Usage of strftime for date formatting,,1427,    def get_data(,"[220, 220, 220, 825, 651, 62, 7890, 7]"
üß† ML Signal: Method call pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 1366, 45069]",1.0,1443,ml_signal,195,Method call pattern for data retrieval,,1435,    def get_data(,"[220, 220, 220, 825, 651, 62, 7890, 7]"
üß† ML Signal: Method call pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 1366, 45069]",1.0,1461,ml_signal,199,Method call pattern for data retrieval,,1443,"        start_datetime: pd.Timestamp,","[220, 220, 220, 220, 220, 220, 220, 923, 62, 19608, 8079, 25, 279, 67, 13, 14967, 27823, 11]"
üß† ML Signal: Method call pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 1366, 45069]",1.0,1472,ml_signal,201,Method call pattern for data retrieval,,1461,    ) -> pd.DataFrame:,"[220, 220, 220, 1267, 4613, 279, 67, 13, 6601, 19778, 25]"
üß† ML Signal: Method call pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 1366, 45069]",1.0,1497,ml_signal,203,Method call pattern for data retrieval,,1472,"            raise ValueError(f""cannot support {interval}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7, 69, 1, 66, 34574, 1104, 1391, 3849, 2100, 92, 4943]"
‚úÖ Best Practice: Use of pd.concat for combining DataFrames,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 1102, 9246, 329, 19771, 6060, 35439]",1.0,1520,best_practice,205,Use of pd.concat for combining DataFrames,,1497,"        exchange = ""sh"" if exchange == ""ss"" else ""sz""","[220, 220, 220, 220, 220, 220, 220, 5163, 796, 366, 1477, 1, 611, 5163, 6624, 366, 824, 1, 2073, 366, 82, 89, 1]"
‚úÖ Best Practice: Use of default parameter values improves function usability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 19575, 2163, 42863, 13]",0.5,1540,best_practice,202,Use of default parameter values improves function usability.,,1520,        if interval != self.INTERVAL_QUARTERLY:,"[220, 220, 220, 220, 220, 220, 220, 611, 16654, 14512, 2116, 13, 41358, 23428, 62, 10917, 1503, 5781, 11319, 25]"
üß† ML Signal: Use of default parameter values can indicate common usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 11507, 3815, 460, 7603, 2219, 8748, 7572, 13]",1.0,1565,ml_signal,203,Use of default parameter values can indicate common usage patterns.,,1540,"            raise ValueError(f""cannot support {interval}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7, 69, 1, 66, 34574, 1104, 1391, 3849, 2100, 92, 4943]"
‚úÖ Best Practice: Using super() to call the parent class constructor ensures proper initialization.,"[26486, 227, 6705, 19939, 25, 8554, 2208, 3419, 284, 869, 262, 2560, 1398, 23772, 19047, 1774, 37588, 13]",0.5,1588,best_practice,205,Using super() to call the parent class constructor ensures proper initialization.,,1565,"        exchange = ""sh"" if exchange == ""ss"" else ""sz""","[220, 220, 220, 220, 220, 220, 220, 5163, 796, 366, 1477, 1, 611, 5163, 6624, 366, 824, 1, 2073, 366, 82, 89, 1]"
üß† ML Signal: Storing method parameters as instance variables is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 2446, 10007, 355, 4554, 9633, 318, 257, 2219, 3912, 13]",1.0,1611,ml_signal,205,Storing method parameters as instance variables is a common pattern.,,1588,"        exchange = ""sh"" if exchange == ""ss"" else ""sz""","[220, 220, 220, 220, 220, 220, 220, 5163, 796, 366, 1477, 1, 611, 5163, 6624, 366, 824, 1, 2073, 366, 82, 89, 1]"
‚úÖ Best Practice: Include type hints for method parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,1627,best_practice,204,Include type hints for method parameters and return type for better readability and maintainability,,1611,"        symbol, exchange = symbol.split(""."")","[220, 220, 220, 220, 220, 220, 220, 6194, 11, 5163, 796, 6194, 13, 35312, 7203, 19570]"
üß† ML Signal: Usage of lambda functions for data transformation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 5499, 329, 1366, 13389]",1.0,1650,ml_signal,205,Usage of lambda functions for data transformation,,1627,"        exchange = ""sh"" if exchange == ""ss"" else ""sz""","[220, 220, 220, 220, 220, 220, 220, 5163, 796, 366, 1477, 1, 611, 5163, 6624, 366, 824, 1, 2073, 366, 82, 89, 1]"
üß† ML Signal: Conditional logic based on class attribute for date offset calculation,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1398, 11688, 329, 3128, 11677, 17952]",1.0,1687,ml_signal,210,Conditional logic based on class attribute for date offset calculation,,1650,"        performance_express_report_df = self.get_performance_express_report_df(code, start_date, end_date)","[220, 220, 220, 220, 220, 220, 220, 2854, 62, 42712, 62, 13116, 62, 7568, 796, 2116, 13, 1136, 62, 26585, 62, 42712, 62, 13116, 62, 7568, 7, 8189, 11, 923, 62, 4475, 11, 886, 62, 4475, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if 'date' column contains non-date strings that cannot be converted,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 4475, 6, 5721, 4909, 1729, 12, 4475, 13042, 326, 2314, 307, 11513]",1.0,1721,sast_risk,212,Potential risk if 'date' column contains non-date strings that cannot be converted,Low,1687,"        forecast_report_df = self.get_forecast_report_df(code, start_date, end_date)","[220, 220, 220, 220, 220, 220, 220, 11092, 62, 13116, 62, 7568, 796, 2116, 13, 1136, 62, 754, 2701, 62, 13116, 62, 7568, 7, 8189, 11, 923, 62, 4475, 11, 886, 62, 4475, 8]"
‚úÖ Best Practice: Convert 'period' column to datetime for consistent date operations,"[26486, 227, 6705, 19939, 25, 38240, 705, 41007, 6, 5721, 284, 4818, 8079, 329, 6414, 3128, 4560]",1.0,1736,best_practice,215,Convert 'period' column to datetime for consistent date operations,,1721,        df = pd.concat(,"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 1102, 9246, 7]"
üß† ML Signal: Usage of lambda functions for conditional data transformation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 5499, 329, 26340, 1366, 13389]",1.0,1751,ml_signal,217,Usage of lambda functions for conditional data transformation,,1736,"            axis=0,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16488, 28, 15, 11]"
üß† ML Signal: Conditional logic based on class attribute for period transformation,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 1398, 11688, 329, 2278, 13389]",1.0,1759,ml_signal,218,Conditional logic based on class attribute for period transformation,,1751,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Return the modified DataFrame for method chaining and functional programming style,"[26486, 227, 6705, 19939, 25, 8229, 262, 9518, 6060, 19778, 329, 2446, 442, 1397, 290, 10345, 8300, 3918]",0.5,1759,best_practice,221,Return the modified DataFrame for method chaining and functional programming style,,1759,,[]
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1793,best_practice,216,Use of type hinting for return type improves code readability and maintainability,,1759,"            [performance_express_report_df, profit_df, forecast_report_df, growth_df],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 685, 26585, 62, 42712, 62, 13116, 62, 7568, 11, 7630, 62, 7568, 11, 11092, 62, 13116, 62, 7568, 11, 3349, 62, 7568, 4357]"
"üß† ML Signal: Function calls another function, indicating a potential pattern of delegation or abstraction","[8582, 100, 254, 10373, 26484, 25, 15553, 3848, 1194, 2163, 11, 12739, 257, 2785, 3912, 286, 22635, 393, 34651]",1.0,1801,ml_signal,218,"Function calls another function, indicating a potential pattern of delegation or abstraction",,1793,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
"‚úÖ Best Practice: Use of @property decorator to define a method as a property, promoting encapsulation.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 284, 8160, 257, 2446, 355, 257, 3119, 11, 11560, 32652, 1741, 13]",0.5,1809,best_practice,218,"Use of @property decorator to define a method as a property, promoting encapsulation.",,1801,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use of a property to access a private attribute.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 3119, 284, 1895, 257, 2839, 11688, 13]",0.5,1809,best_practice,221,Use of a property to access a private attribute.,,1809,,[]
"‚úÖ Best Practice: Use of @property decorator to define a method as a property, promoting encapsulation.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 284, 8160, 257, 2446, 355, 257, 3119, 11, 11560, 32652, 1741, 13]",0.5,1828,best_practice,224,"Use of @property decorator to define a method as a property, promoting encapsulation.",,1809,"        super().__init__(*args, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 46491, 22046, 11, 12429, 46265, 22046, 8]"
‚úÖ Best Practice: Use of a property to access a private attribute.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 3119, 284, 1895, 257, 2839, 11688, 13]",0.5,1852,best_practice,227,Use of a property to access a private attribute.,,1828,"    def normalize(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 3487, 1096, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
"‚úÖ Best Practice: Use of @property decorator to define a method as a property, promoting encapsulation.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 284, 8160, 257, 2446, 355, 257, 3119, 11, 11560, 32652, 1741, 13]",0.5,1866,best_practice,231,"Use of @property decorator to define a method as a property, promoting encapsulation.",,1852,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
‚úÖ Best Practice: Use of a property to access a private attribute.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 3119, 284, 1895, 257, 2839, 11688, 13]",0.5,1880,best_practice,231,Use of a property to access a private attribute.,,1866,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
"‚úÖ Best Practice: Use of @property decorator to define a method as a property, promoting encapsulation.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 284, 8160, 257, 2446, 355, 257, 3119, 11, 11560, 32652, 1741, 13]",0.5,1894,best_practice,231,"Use of @property decorator to define a method as a property, promoting encapsulation.",,1880,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
‚úÖ Best Practice: Use of a property to access a private attribute.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 3119, 284, 1895, 257, 2839, 11688, 13]",0.5,1908,best_practice,231,Use of a property to access a private attribute.,,1894,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
"‚úÖ Best Practice: Use of @property decorator to define a method as a property, promoting encapsulation.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 284, 8160, 257, 2446, 355, 257, 3119, 11, 11560, 32652, 1741, 13]",0.5,1922,best_practice,231,"Use of @property decorator to define a method as a property, promoting encapsulation.",,1908,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
‚úÖ Best Practice: Use of a property to access a private attribute.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 3119, 284, 1895, 257, 2839, 11688, 13]",0.5,1936,best_practice,231,Use of a property to access a private attribute.,,1922,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
"‚úÖ Best Practice: Use of @property decorator to define a method as a property, promoting encapsulation.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 284, 8160, 257, 2446, 355, 257, 3119, 11, 11560, 32652, 1741, 13]",0.5,1950,best_practice,231,"Use of @property decorator to define a method as a property, promoting encapsulation.",,1936,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
‚úÖ Best Practice: Use of a property to access a private attribute.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 3119, 284, 1895, 257, 2839, 11688, 13]",0.5,1964,best_practice,231,Use of a property to access a private attribute.,,1950,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
"üß† ML Signal: Method name suggests a state change, useful for behavior modeling.","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 257, 1181, 1487, 11, 4465, 329, 4069, 21128, 13]",0.5,1978,ml_signal,231,"Method name suggests a state change, useful for behavior modeling.",,1964,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
‚úÖ Best Practice: Method to change the state of the object.,"[26486, 227, 6705, 19939, 25, 11789, 284, 1487, 262, 1181, 286, 262, 2134, 13]",0.5,1992,best_practice,231,Method to change the state of the object.,,1978,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
üß† ML Signal: State change to 'running' can be used to track object lifecycle.,"[8582, 100, 254, 10373, 26484, 25, 1812, 1487, 284, 705, 20270, 6, 460, 307, 973, 284, 2610, 2134, 3868, 47510, 13]",0.5,2006,ml_signal,231,State change to 'running' can be used to track object lifecycle.,,1992,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
"üß† ML Signal: Method name suggests a state change, useful for behavior modeling.","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 257, 1181, 1487, 11, 4465, 329, 4069, 21128, 13]",0.5,2020,ml_signal,231,"Method name suggests a state change, useful for behavior modeling.",,2006,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
‚úÖ Best Practice: Method to change the state of the object.,"[26486, 227, 6705, 19939, 25, 11789, 284, 1487, 262, 1181, 286, 262, 2134, 13]",0.5,2034,best_practice,231,Method to change the state of the object.,,2020,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
üß† ML Signal: State change to 'completed' can be used to track object lifecycle.,"[8582, 100, 254, 10373, 26484, 25, 1812, 1487, 284, 705, 785, 16838, 6, 460, 307, 973, 284, 2610, 2134, 3868, 47510, 13]",0.5,2048,ml_signal,231,State change to 'completed' can be used to track object lifecycle.,,2034,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
"üß† ML Signal: Method name suggests a state change, useful for behavior modeling.","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 257, 1181, 1487, 11, 4465, 329, 4069, 21128, 13]",0.5,2062,ml_signal,231,"Method name suggests a state change, useful for behavior modeling.",,2048,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
‚úÖ Best Practice: Method to change the state of the object.,"[26486, 227, 6705, 19939, 25, 11789, 284, 1487, 262, 1181, 286, 262, 2134, 13]",0.5,2076,best_practice,231,Method to change the state of the object.,,2062,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
üß† ML Signal: State change to 'failed' can be used to track object lifecycle.,"[8582, 100, 254, 10373, 26484, 25, 1812, 1487, 284, 705, 47904, 6, 460, 307, 973, 284, 2610, 2134, 3868, 47510, 13]",0.5,2090,ml_signal,231,State change to 'failed' can be used to track object lifecycle.,,2076,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
üß† ML Signal: Method returning a class name as a string,"[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 257, 1398, 1438, 355, 257, 4731]",0.5,2090,ml_signal,221,Method returning a class name as a string,,2090,,[]
‚úÖ Best Practice: Use of @property decorator for getter method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446]",0.5,2109,best_practice,224,Use of @property decorator for getter method,,2090,"        super().__init__(*args, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 46491, 22046, 11, 12429, 46265, 22046, 8]"
‚úÖ Best Practice: Use of f-string for string formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 4731, 33313]",0.5,2128,best_practice,224,Use of f-string for string formatting,,2109,"        super().__init__(*args, **kwargs)","[220, 220, 220, 220, 220, 220, 220, 2208, 22446, 834, 15003, 834, 46491, 22046, 11, 12429, 46265, 22046, 8]"
"‚úÖ Best Practice: Consider using Tuple[Path, str] for type hinting instead of a list for multiple return types.","[26486, 227, 6705, 19939, 25, 12642, 1262, 309, 29291, 58, 15235, 11, 965, 60, 329, 2099, 9254, 278, 2427, 286, 257, 1351, 329, 3294, 1441, 3858, 13]",0.5,2152,best_practice,227,"Consider using Tuple[Path, str] for type hinting instead of a list for multiple return types.",,2128,"    def normalize(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 3487, 1096, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
"üß† ML Signal: Entry point for script execution, common pattern for command-line tools.","[8582, 100, 254, 10373, 26484, 25, 21617, 966, 329, 4226, 9706, 11, 2219, 3912, 329, 3141, 12, 1370, 4899, 13]",1.0,2207,ml_signal,230,"Entry point for script execution, common pattern for command-line tools.",,2152,                pd.to_datetime(x) + pd.DateOffset(days=(45 if self.interval == PitCollector.INTERVAL_QUARTERLY else 90)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 1462, 62, 19608, 8079, 7, 87, 8, 1343, 279, 67, 13, 10430, 34519, 7, 12545, 16193, 2231, 611, 2116, 13, 3849, 2100, 6624, 16889, 31337, 273, 13, 41358, 23428, 62, 10917, 1503, 5781, 11319, 2073, 4101, 4008]"
‚ö†Ô∏è SAST Risk (Medium): Ensure that bs.login() handles authentication securely.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 48987, 326, 275, 82, 13, 38235, 3419, 17105, 18239, 30835, 13]",1.0,2221,sast_risk,231,Ensure that bs.login() handles authentication securely.,Medium,2207,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
"üß† ML Signal: Usage of a login function, indicating authentication process.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 17594, 2163, 11, 12739, 18239, 1429, 13]",1.0,2235,ml_signal,231,"Usage of a login function, indicating authentication process.",,2221,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
üß† ML Signal: Usage of the fire library to create a command-line interface.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 262, 2046, 5888, 284, 2251, 257, 3141, 12, 1370, 7071, 13]",0.5,2249,ml_signal,231,Usage of the fire library to create a command-line interface.,,2235,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
‚ö†Ô∏è SAST Risk (Medium): Ensure that bs.logout() properly terminates the session and clears sensitive data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 48987, 326, 275, 82, 13, 6404, 448, 3419, 6105, 5651, 689, 262, 6246, 290, 37526, 8564, 1366, 13]",1.0,2263,sast_risk,231,Ensure that bs.logout() properly terminates the session and clears sensitive data.,Medium,2249,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"
"üß† ML Signal: Usage of a logout function, indicating session management.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2604, 448, 2163, 11, 12739, 6246, 4542, 13]",1.0,2277,ml_signal,231,"Usage of a logout function, indicating session management.",,2263,            ).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6739, 4475, 3419]"

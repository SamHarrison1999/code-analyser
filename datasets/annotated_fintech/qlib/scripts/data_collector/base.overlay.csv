annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: tqdm is a popular library for progress bars, indicating long-running operations.","[26486, 227, 6705, 19939, 25, 256, 80, 36020, 318, 257, 2968, 5888, 329, 4371, 9210, 11, 12739, 890, 12, 20270, 4560, 13]",0.5,5,best_practice,9,"tqdm is a popular library for progress bars, indicating long-running operations.",,0,from pathlib import Path,"[6738, 3108, 8019, 1330, 10644]"
"‚úÖ Best Practice: loguru is a modern logging library, suggesting structured logging practices.","[26486, 227, 6705, 19939, 25, 2604, 14717, 318, 257, 3660, 18931, 5888, 11, 9524, 20793, 18931, 6593, 13]",0.5,16,best_practice,11,"loguru is a modern logging library, suggesting structured logging practices.",,5,from concurrent.futures import ProcessPoolExecutor,"[6738, 24580, 13, 69, 315, 942, 1330, 10854, 27201, 23002, 38409]"
"‚úÖ Best Practice: joblib is often used for parallel processing, indicating performance optimization.","[26486, 227, 6705, 19939, 25, 1693, 8019, 318, 1690, 973, 329, 10730, 7587, 11, 12739, 2854, 23989, 13]",0.5,22,best_practice,13,"joblib is often used for parallel processing, indicating performance optimization.",,16,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
"üß† ML Signal: qlib is a library for quantitative research, indicating a financial or ML application.","[8582, 100, 254, 10373, 26484, 25, 10662, 8019, 318, 257, 5888, 329, 26610, 2267, 11, 12739, 257, 3176, 393, 10373, 3586, 13]",0.5,27,ml_signal,15,"qlib is a library for quantitative research, indicating a financial or ML application.",,22,from loguru import logger,"[6738, 2604, 14717, 1330, 49706]"
‚úÖ Best Practice: Use of class constants for configuration values improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 38491, 329, 8398, 3815, 19575, 1100, 1799, 290, 5529, 1799, 13]",1.0,33,best_practice,13,Use of class constants for configuration values improves readability and maintainability.,,27,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
‚úÖ Best Practice: Constants for flags improve code readability and reduce the risk of typos.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 329, 9701, 2987, 2438, 1100, 1799, 290, 4646, 262, 2526, 286, 1259, 1930, 13]",1.0,38,best_practice,15,Constants for flags improve code readability and reduce the risk of typos.,,33,from loguru import logger,"[6738, 2604, 14717, 1330, 49706]"
"‚úÖ Best Practice: Default timestamps are set using pandas, which is appropriate for handling date and time.","[26486, 227, 6705, 19939, 25, 15161, 4628, 395, 9430, 389, 900, 1262, 19798, 292, 11, 543, 318, 5035, 329, 9041, 3128, 290, 640, 13]",1.0,38,best_practice,18,"Default timestamps are set using pandas, which is appropriate for handling date and time.",,38,,[]
‚ö†Ô∏è SAST Risk (Low): Using current datetime can lead to non-deterministic behavior in tests or logs.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1459, 4818, 8079, 460, 1085, 284, 1729, 12, 67, 2357, 49228, 4069, 287, 5254, 393, 17259, 13]",1.0,47,sast_risk,20,Using current datetime can lead to non-deterministic behavior in tests or logs.,Low,38,class BaseCollector(abc.ABC):,"[4871, 7308, 31337, 273, 7, 39305, 13, 24694, 2599]"
‚ö†Ô∏è SAST Risk (Low): Using current datetime can lead to non-deterministic behavior in tests or logs.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1459, 4818, 8079, 460, 1085, 284, 1729, 12, 67, 2357, 49228, 4069, 287, 5254, 393, 17259, 13]",1.0,59,sast_risk,22,Using current datetime can lead to non-deterministic behavior in tests or logs.,Low,47,"    NORMAL_FLAG = ""NORMAL""","[220, 220, 220, 25273, 42126, 62, 38948, 796, 366, 35510, 42126, 1]"
‚úÖ Best Practice: Reusing constants avoids duplication and potential inconsistencies.,"[26486, 227, 6705, 19939, 25, 797, 3500, 38491, 30940, 50124, 290, 2785, 40467, 13]",1.0,71,best_practice,22,Reusing constants avoids duplication and potential inconsistencies.,,59,"    NORMAL_FLAG = ""NORMAL""","[220, 220, 220, 25273, 42126, 62, 38948, 796, 366, 35510, 42126, 1]"
‚úÖ Best Practice: Constants for intervals improve code readability and reduce the risk of typos.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 329, 20016, 2987, 2438, 1100, 1799, 290, 4646, 262, 2526, 286, 1259, 1930, 13]",1.0,83,best_practice,22,Constants for intervals improve code readability and reduce the risk of typos.,,71,"    NORMAL_FLAG = ""NORMAL""","[220, 220, 220, 25273, 42126, 62, 38948, 796, 366, 35510, 42126, 1]"
‚úÖ Best Practice: Use of Path object for file system paths improves code portability and readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 2134, 329, 2393, 1080, 13532, 19575, 2438, 2493, 1799, 290, 1100, 1799]",0.5,93,best_practice,56,Use of Path object for file system paths improves code portability and readability,,83,        interval: str,"[220, 220, 220, 220, 220, 220, 220, 16654, 25, 965]"
‚úÖ Best Practice: Creating directories with parents=True ensures that all necessary parent directories are created,"[26486, 227, 6705, 19939, 25, 30481, 29196, 351, 3397, 28, 17821, 19047, 326, 477, 3306, 2560, 29196, 389, 2727]",0.5,103,best_practice,58,Creating directories with parents=True ensures that all necessary parent directories are created,,93,        start: str,"[220, 220, 220, 220, 220, 220, 220, 923, 25, 965]"
‚úÖ Best Practice: Using max() to ensure check_data_length is non-negative improves robustness,"[26486, 227, 6705, 19939, 25, 8554, 3509, 3419, 284, 4155, 2198, 62, 7890, 62, 13664, 318, 1729, 12, 31591, 19575, 12373, 1108]",1.0,121,best_practice,65,Using max() to ensure check_data_length is non-negative improves robustness,,103,"            using for debug, by default None","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1262, 329, 14257, 11, 416, 4277, 6045]"
üß† ML Signal: Sorting and deduplication of instrument list indicates data normalization,"[8582, 100, 254, 10373, 26484, 25, 311, 24707, 290, 4648, 84, 489, 3299, 286, 8875, 1351, 9217, 1366, 3487, 1634]",0.5,121,ml_signal,69,Sorting and deduplication of instrument list indicates data normalization,,121,,[]
üß† ML Signal: Slicing lists based on a parameter indicates dynamic data handling,"[8582, 100, 254, 10373, 26484, 25, 311, 677, 278, 8341, 1912, 319, 257, 11507, 9217, 8925, 1366, 9041]",0.5,138,ml_signal,73,Slicing lists based on a parameter indicates dynamic data handling,,121,        self.mini_symbol_map = {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 45313, 62, 1837, 23650, 62, 8899, 796, 23884]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide unexpected errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 10059, 8563]",0.5,138,sast_risk,76,Catching broad exceptions can hide unexpected errors,Low,138,,[]
‚úÖ Best Practice: Type hint for start_datetime should use Union for better clarity,"[26486, 227, 6705, 19939, 25, 5994, 9254, 329, 923, 62, 19608, 8079, 815, 779, 4479, 329, 1365, 16287]",0.5,160,best_practice,72,Type hint for start_datetime should use Union for better clarity,,138,        self.max_collector_count = max_collector_count,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9806, 62, 33327, 273, 62, 9127, 796, 3509, 62, 33327, 273, 62, 9127]"
üß† ML Signal: Usage of pd.Timestamp to convert string to timestamp,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 279, 67, 13, 14967, 27823, 284, 10385, 4731, 284, 41033]",0.5,177,ml_signal,73,Usage of pd.Timestamp to convert string to timestamp,,160,        self.mini_symbol_map = {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 45313, 62, 1837, 23650, 62, 8899, 796, 23884]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if start_datetime is not a valid date string,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 923, 62, 19608, 8079, 318, 407, 257, 4938, 3128, 4731]",0.5,194,sast_risk,73,Potential risk if start_datetime is not a valid date string,Low,177,        self.mini_symbol_map = {},"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 45313, 62, 1837, 23650, 62, 8899, 796, 23884]"
üß† ML Signal: Dynamic attribute access pattern using getattr,"[8582, 100, 254, 10373, 26484, 25, 26977, 11688, 1895, 3912, 1262, 651, 35226]",1.0,194,ml_signal,79,Dynamic attribute access pattern using getattr,,194,,[]
‚úÖ Best Practice: Type hinting with a list should use List from typing module,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 351, 257, 1351, 815, 779, 7343, 422, 19720, 8265]",0.5,220,best_practice,78,Type hinting with a list should use List from typing module,,194,        self.end_datetime = self.normalize_end_datetime(end),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 437, 62, 19608, 8079, 796, 2116, 13, 11265, 1096, 62, 437, 62, 19608, 8079, 7, 437, 8]"
üß† ML Signal: Use of pd.Timestamp for datetime normalization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 279, 67, 13, 14967, 27823, 329, 4818, 8079, 3487, 1634]",1.0,220,ml_signal,79,Use of pd.Timestamp for datetime normalization,,220,,[]
üß† ML Signal: Dynamic attribute access pattern,"[8582, 100, 254, 10373, 26484, 25, 26977, 11688, 1895, 3912]",1.0,236,ml_signal,85,Dynamic attribute access pattern,,220,            except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
üß† ML Signal: Use of abstract method indicating a design pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 12531, 2446, 12739, 257, 1486, 3912]",0.5,276,ml_signal,86,Use of abstract method indicating a design pattern,,236,"                logger.warning(f""Cannot use limit_nums={limit_nums}, the parameter will be ignored"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 34, 34574, 779, 4179, 62, 77, 5700, 34758, 32374, 62, 77, 5700, 5512, 262, 11507, 481, 307, 9514, 4943]"
‚úÖ Best Practice: Raising NotImplementedError is a clear way to indicate that this method should be overridden.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 318, 257, 1598, 835, 284, 7603, 326, 428, 2446, 815, 307, 23170, 4651, 13]",1.0,316,best_practice,86,Raising NotImplementedError is a clear way to indicate that this method should be overridden.,,276,"                logger.warning(f""Cannot use limit_nums={limit_nums}, the parameter will be ignored"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 34, 34574, 779, 4179, 62, 77, 5700, 34758, 32374, 62, 77, 5700, 5512, 262, 11507, 481, 307, 9514, 4943]"
‚úÖ Best Practice: Using @abc.abstractmethod enforces that subclasses must implement this method.,"[26486, 227, 6705, 19939, 25, 8554, 2488, 39305, 13, 397, 8709, 24396, 551, 27087, 326, 850, 37724, 1276, 3494, 428, 2446, 13]",1.0,325,best_practice,89,Using @abc.abstractmethod enforces that subclasses must implement this method.,,316,        return (,"[220, 220, 220, 220, 220, 220, 220, 1441, 357]"
‚úÖ Best Practice: Raising NotImplementedError is a clear way to indicate that this method should be overridden.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 318, 257, 1598, 835, 284, 7603, 326, 428, 2446, 815, 307, 23170, 4651, 13]",0.5,349,best_practice,90,Raising NotImplementedError is a clear way to indicate that this method should be overridden.,,325,            pd.Timestamp(str(start_datetime)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 14967, 27823, 7, 2536, 7, 9688, 62, 19608, 8079, 4008]"
‚úÖ Best Practice: Using abc.abstractmethod enforces that subclasses must implement this method.,"[26486, 227, 6705, 19939, 25, 8554, 450, 66, 13, 397, 8709, 24396, 551, 27087, 326, 850, 37724, 1276, 3494, 428, 2446, 13]",0.5,388,best_practice,92,Using abc.abstractmethod enforces that subclasses must implement this method.,,349,"            else getattr(self, f""DEFAULT_START_DATETIME_{self.interval.upper()}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 651, 35226, 7, 944, 11, 277, 1, 7206, 38865, 62, 2257, 7227, 62, 35, 1404, 2767, 12789, 23330, 944, 13, 3849, 2100, 13, 45828, 3419, 92, 4943]"
‚úÖ Best Practice: Docstring provides clear documentation of parameters and return type,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 10314, 286, 10007, 290, 1441, 2099]",1.0,419,best_practice,95,Docstring provides clear documentation of parameters and return type,,388,"    def normalize_end_datetime(self, end_datetime: [str, pd.Timestamp] = None):","[220, 220, 220, 825, 3487, 1096, 62, 437, 62, 19608, 8079, 7, 944, 11, 886, 62, 19608, 8079, 25, 685, 2536, 11, 279, 67, 13, 14967, 27823, 60, 796, 6045, 2599]"
‚ö†Ô∏è SAST Risk (Low): NotImplementedError should be replaced with actual implementation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1892, 3546, 1154, 12061, 12331, 815, 307, 6928, 351, 4036, 7822]",0.5,431,sast_risk,108,NotImplementedError should be replaced with actual implementation,Low,419,"        """"""normalize symbol""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 11265, 1096, 6194, 37811]"
‚ö†Ô∏è SAST Risk (Low): Using time.sleep can lead to performance issues if not managed properly.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 640, 13, 42832, 460, 1085, 284, 2854, 2428, 611, 407, 5257, 6105, 13]",0.5,443,sast_risk,108,Using time.sleep can lead to performance issues if not managed properly.,Low,431,"        """"""normalize symbol""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 11265, 1096, 6194, 37811]"
‚úÖ Best Practice: Ensure that self.delay is validated to prevent excessively long sleep times.,"[26486, 227, 6705, 19939, 25, 48987, 326, 2116, 13, 40850, 318, 31031, 284, 2948, 40437, 890, 3993, 1661, 13]",0.5,465,best_practice,109,Ensure that self.delay is validated to prevent excessively long sleep times.,,443,"        raise NotImplementedError(""rewrite normalize_symbol"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7203, 1809, 6525, 3487, 1096, 62, 1837, 23650, 4943]"
"‚úÖ Best Practice: Docstring provides parameter information, enhancing code readability and maintainability","[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 11507, 1321, 11, 27496, 2438, 1100, 1799, 290, 5529, 1799]",0.5,474,best_practice,111,"Docstring provides parameter information, enhancing code readability and maintainability",,465,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
üß† ML Signal: Method calls like self.sleep() can indicate timing or delay patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 3848, 588, 2116, 13, 42832, 3419, 460, 7603, 10576, 393, 5711, 7572]",1.0,482,ml_signal,117,Method calls like self.sleep() can indicate timing or delay patterns,,474,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
üß† ML Signal: Collecting data with self.get_data() can indicate data retrieval patterns,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 1366, 351, 2116, 13, 1136, 62, 7890, 3419, 460, 7603, 1366, 45069, 7572]",1.0,492,ml_signal,119,Collecting data with self.get_data() can indicate data retrieval patterns,,482,        symbol: str,"[220, 220, 220, 220, 220, 220, 220, 6194, 25, 965]"
üß† ML Signal: Conditional checks on data length can indicate data validation or filtering patterns,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 8794, 319, 1366, 4129, 460, 7603, 1366, 21201, 393, 25431, 7572]",0.5,509,ml_signal,122,Conditional checks on data length can indicate data validation or filtering patterns,,492,        start_datetime: pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 923, 62, 19608, 8079, 25, 279, 67, 13, 14967, 27823]"
üß† ML Signal: Caching data with self.cache_small_data() can indicate data storage or optimization patterns,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 1366, 351, 2116, 13, 23870, 62, 17470, 62, 7890, 3419, 460, 7603, 1366, 6143, 393, 23989, 7572]",0.5,509,ml_signal,124,Caching data with self.cache_small_data() can indicate data storage or optimization patterns,,509,,[]
üß† ML Signal: Using flags like self.NORMAL_FLAG can indicate status or state management patterns,"[8582, 100, 254, 10373, 26484, 25, 8554, 9701, 588, 2116, 13, 35510, 42126, 62, 38948, 460, 7603, 3722, 393, 1181, 4542, 7572]",0.5,517,ml_signal,125,Using flags like self.NORMAL_FLAG can indicate status or state management patterns,,509,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
üß† ML Signal: Saving data with self.save_instrument() can indicate data persistence patterns,"[8582, 100, 254, 10373, 26484, 25, 34689, 1366, 351, 2116, 13, 21928, 62, 259, 43872, 3419, 460, 7603, 1366, 30802, 7572]",1.0,525,ml_signal,125,Saving data with self.save_instrument() can indicate data persistence patterns,,517,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
üß† ML Signal: Returning result values can indicate outcome or status reporting patterns,"[8582, 100, 254, 10373, 26484, 25, 42882, 1255, 3815, 460, 7603, 8055, 393, 3722, 6447, 7572]",0.5,540,ml_signal,133,Returning result values can indicate outcome or status reporting patterns,,525,        time.sleep(self.delay),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 944, 13, 40850, 8]"
‚úÖ Best Practice: Check for None or empty DataFrame to avoid unnecessary processing,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 393, 6565, 6060, 19778, 284, 3368, 13114, 7587]",0.5,555,best_practice,133,Check for None or empty DataFrame to avoid unnecessary processing,,540,        time.sleep(self.delay),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 944, 13, 40850, 8]"
üß† ML Signal: Normalizing input data is a common preprocessing step,"[8582, 100, 254, 10373, 26484, 25, 14435, 2890, 5128, 1366, 318, 257, 2219, 662, 36948, 2239]",0.5,555,ml_signal,137,Normalizing input data is a common preprocessing step,,555,,[]
üß† ML Signal: Converting code to filename is a common pattern for file operations,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 2438, 284, 29472, 318, 257, 2219, 3912, 329, 2393, 4560]",0.5,564,ml_signal,139,Converting code to filename is a common pattern for file operations,,555,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
üß† ML Signal: Using pathlib for file paths is a modern Python practice,"[8582, 100, 254, 10373, 26484, 25, 8554, 3108, 8019, 329, 2393, 13532, 318, 257, 3660, 11361, 3357]",0.5,564,ml_signal,141,Using pathlib for file paths is a modern Python practice,,564,,[]
"‚ö†Ô∏è SAST Risk (Low): Overwriting the ""symbol"" column without checking its existence","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3827, 16502, 262, 366, 1837, 23650, 1, 5721, 1231, 10627, 663, 6224]",1.0,575,sast_risk,143,"Overwriting the ""symbol"" column without checking its existence",Low,564,        self.sleep(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 42832, 3419]"
‚úÖ Best Practice: Check if file exists before reading to avoid FileNotFoundError,"[26486, 227, 6705, 19939, 25, 6822, 611, 2393, 7160, 878, 3555, 284, 3368, 9220, 3673, 21077, 12331]",0.5,591,best_practice,145,Check if file exists before reading to avoid FileNotFoundError,,575,        _result = self.NORMAL_FLAG,"[220, 220, 220, 220, 220, 220, 220, 4808, 20274, 796, 2116, 13, 35510, 42126, 62, 38948]"
‚ö†Ô∏è SAST Risk (Low): No error handling for file read operations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 2393, 1100, 4560]",1.0,618,sast_risk,147,No error handling for file read operations,Low,591,"            _result = self.cache_small_data(symbol, df)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 20274, 796, 2116, 13, 23870, 62, 17470, 62, 7890, 7, 1837, 23650, 11, 47764, 8]"
üß† ML Signal: Concatenating DataFrames is a common data manipulation operation,"[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 803, 6060, 35439, 318, 257, 2219, 1366, 17512, 4905]",0.5,641,ml_signal,149,Concatenating DataFrames is a common data manipulation operation,,618,"            self.save_instrument(symbol, df)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 21928, 62, 259, 43872, 7, 1837, 23650, 11, 47764, 8]"
‚ö†Ô∏è SAST Risk (Low): No error handling for file write operations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 2393, 3551, 4560]",1.0,641,sast_risk,151,No error handling for file write operations,Low,641,,[]
üß† ML Signal: Function checks the length of data and caches it based on a condition,"[8582, 100, 254, 10373, 26484, 25, 15553, 8794, 262, 4129, 286, 1366, 290, 50177, 340, 1912, 319, 257, 4006]",0.5,657,ml_signal,145,Function checks the length of data and caches it based on a condition,,641,        _result = self.NORMAL_FLAG,"[220, 220, 220, 220, 220, 220, 220, 4808, 20274, 796, 2116, 13, 35510, 42126, 62, 38948]"
‚ö†Ô∏è SAST Risk (Low): Potential logging of sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 18931, 286, 8564, 1321]",0.5,684,sast_risk,147,Potential logging of sensitive information,Low,657,"            _result = self.cache_small_data(symbol, df)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 20274, 796, 2116, 13, 23870, 62, 17470, 62, 7890, 7, 1837, 23650, 11, 47764, 8]"
‚úÖ Best Practice: Use setdefault to initialize a list if the key is not present,"[26486, 227, 6705, 19939, 25, 5765, 900, 12286, 284, 41216, 257, 1351, 611, 262, 1994, 318, 407, 1944]",1.0,707,best_practice,149,Use setdefault to initialize a list if the key is not present,,684,"            self.save_instrument(symbol, df)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 21928, 62, 259, 43872, 7, 1837, 23650, 11, 47764, 8]"
üß† ML Signal: Appends a copy of the dataframe to a list in a dictionary,"[8582, 100, 254, 10373, 26484, 25, 2034, 2412, 257, 4866, 286, 262, 1366, 14535, 284, 257, 1351, 287, 257, 22155]",1.0,707,ml_signal,151,Appends a copy of the dataframe to a list in a dictionary,,707,,[]
üß† ML Signal: Removes symbol from cache if it exists,"[8582, 100, 254, 10373, 26484, 25, 3982, 5241, 6194, 422, 12940, 611, 340, 7160]",0.5,715,ml_signal,155,Removes symbol from cache if it exists,,707,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
üß† ML Signal: Use of parallel processing with joblib for performance optimization,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10730, 7587, 351, 1693, 8019, 329, 2854, 23989]",1.0,724,ml_signal,156,Use of parallel processing with joblib for performance optimization,,715,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
üß† ML Signal: Use of delayed function for lazy evaluation in parallel processing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11038, 2163, 329, 16931, 12660, 287, 10730, 7587]",1.0,738,ml_signal,159,Use of delayed function for lazy evaluation in parallel processing,,724,        df : pd.DataFrame,"[220, 220, 220, 220, 220, 220, 220, 47764, 1058, 279, 67, 13, 6601, 19778]"
"‚ö†Ô∏è SAST Risk (Low): Use of print statement for logging, consider using a logging framework","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3601, 2643, 329, 18931, 11, 2074, 1262, 257, 18931, 9355]",0.5,750,sast_risk,164,"Use of print statement for logging, consider using a logging framework",Low,738,            return,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441]"
‚úÖ Best Practice: Use of logging framework for better control over log levels and outputs,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 9355, 329, 1365, 1630, 625, 2604, 2974, 290, 23862]",0.5,770,best_practice,166,Use of logging framework for better control over log levels and outputs,,750,        symbol = self.normalize_symbol(symbol),"[220, 220, 220, 220, 220, 220, 220, 6194, 796, 2116, 13, 11265, 1096, 62, 1837, 23650, 7, 1837, 23650, 8]"
‚úÖ Best Practice: Use of logging framework for better control over log levels and outputs,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 9355, 329, 1365, 1630, 625, 2604, 2974, 290, 23862]",0.5,798,best_practice,168,Use of logging framework for better control over log levels and outputs,,770,"        instrument_path = self.save_dir.joinpath(f""{symbol}.csv"")","[220, 220, 220, 220, 220, 220, 220, 8875, 62, 6978, 796, 2116, 13, 21928, 62, 15908, 13, 22179, 6978, 7, 69, 1, 90, 1837, 23650, 27422, 40664, 4943]"
‚úÖ Best Practice: Use of set to remove duplicates before sorting,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 284, 4781, 14184, 16856, 878, 29407]",0.5,826,best_practice,171,Use of set to remove duplicates before sorting,,798,            _old_df = pd.read_csv(instrument_path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 727, 62, 7568, 796, 279, 67, 13, 961, 62, 40664, 7, 259, 43872, 62, 6978, 8]"
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,840,ml_signal,169,Logging usage pattern for monitoring or debugging,,826,"        df[""symbol""] = symbol","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 1837, 23650, 8973, 796, 6194]"
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,856,ml_signal,175,Logging usage pattern for monitoring or debugging,,840,"    def cache_small_data(self, symbol, df):","[220, 220, 220, 825, 12940, 62, 17470, 62, 7890, 7, 944, 11, 6194, 11, 47764, 2599]"
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,887,ml_signal,178,Logging usage pattern for monitoring or debugging,,856,"            _temp = self.mini_symbol_map.setdefault(symbol, [])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 29510, 796, 2116, 13, 45313, 62, 1837, 23650, 62, 8899, 13, 2617, 12286, 7, 1837, 23650, 11, 685, 12962]"
‚ö†Ô∏è SAST Risk (Low): Potentially large data concatenation without memory management,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 1588, 1366, 1673, 36686, 341, 1231, 4088, 4542]",0.5,896,sast_risk,181,Potentially large data concatenation without memory management,Low,887,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use drop_duplicates to ensure data integrity,"[26486, 227, 6705, 19939, 25, 5765, 4268, 62, 646, 489, 16856, 284, 4155, 1366, 11540]",0.5,914,best_practice,184,Use drop_duplicates to ensure data integrity,,896,            return self.NORMAL_FLAG,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 35510, 42126, 62, 38948]"
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,928,ml_signal,186,Logging usage pattern for monitoring or debugging,,914,"    def _collector(self, instrument_list):","[220, 220, 220, 825, 4808, 33327, 273, 7, 944, 11, 8875, 62, 4868, 2599]"
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,942,ml_signal,186,Logging usage pattern for monitoring or debugging,,928,"    def _collector(self, instrument_list):","[220, 220, 220, 825, 4808, 33327, 273, 7, 944, 11, 8875, 62, 4868, 2599]"
‚úÖ Best Practice: Inheriting from abc.ABC to define an abstract base class,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 450, 66, 13, 24694, 284, 8160, 281, 12531, 2779, 1398]",1.0,960,best_practice,184,Inheriting from abc.ABC to define an abstract base class,,942,            return self.NORMAL_FLAG,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 35510, 42126, 62, 38948]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",1.0,974,best_practice,186,Use of default parameter values for flexibility and ease of use,,960,"    def _collector(self, instrument_list):","[220, 220, 220, 825, 4808, 33327, 273, 7, 944, 11, 8875, 62, 4868, 2599]"
‚úÖ Best Practice: Storing additional keyword arguments for future extensibility,"[26486, 227, 6705, 19939, 25, 520, 3255, 3224, 21179, 7159, 329, 2003, 1070, 641, 2247]",1.0,1000,best_practice,197,Storing additional keyword arguments for future extensibility,,974,        error_symbol.extend(self.mini_symbol_map.keys()),"[220, 220, 220, 220, 220, 220, 220, 4049, 62, 1837, 23650, 13, 2302, 437, 7, 944, 13, 45313, 62, 1837, 23650, 62, 8899, 13, 13083, 28955]"
üß† ML Signal: Initialization of internal state with method call,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 5387, 1181, 351, 2446, 869]",0.5,1000,ml_signal,199,Initialization of internal state with method call,,1000,,[]
‚úÖ Best Practice: Define a method signature with type hints for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 2896, 500, 257, 2446, 9877, 351, 2099, 20269, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,1000,best_practice,199,Define a method signature with type hints for better readability and maintainability,,1000,,[]
‚ö†Ô∏è SAST Risk (Low): Raising NotImplementedError without a message can be less informative for debugging,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 1231, 257, 3275, 460, 307, 1342, 30304, 329, 28769]",0.5,1010,sast_risk,200,Raising NotImplementedError without a message can be less informative for debugging,Low,1000,    def collector_data(self):,"[220, 220, 220, 825, 22967, 62, 7890, 7, 944, 2599]"
‚úÖ Best Practice: Use of abstractmethod decorator to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 286, 12531, 24396, 11705, 1352, 284, 4605, 7822, 287, 850, 37724]",0.5,1027,best_practice,203,Use of abstractmethod decorator to enforce implementation in subclasses,,1010,        instrument_list = self.instrument_list,"[220, 220, 220, 220, 220, 220, 220, 8875, 62, 4868, 796, 2116, 13, 259, 43872, 62, 4868]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1043,best_practice,202,Use of type hinting for return type improves code readability and maintainability,,1027,"        logger.info(""start collector data......"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 9688, 22967, 1366, 16317, 4943]"
‚úÖ Best Practice: Use of docstring to describe the function's purpose,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 262, 2163, 338, 4007]",0.5,1060,best_practice,205,Use of docstring to describe the function's purpose,,1043,            if not instrument_list:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 8875, 62, 4868, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential directory traversal if source_dir or target_dir is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 2723, 62, 15908, 393, 2496, 62, 15908, 318, 2836, 12, 14401]",1.0,1060,sast_risk,234,Potential directory traversal if source_dir or target_dir is user-controlled,Low,1060,,[]
‚ö†Ô∏è SAST Risk (Low): Potential directory traversal if source_dir or target_dir is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 2723, 62, 15908, 393, 2496, 62, 15908, 318, 2836, 12, 14401]",1.0,1084,sast_risk,236,Potential directory traversal if source_dir or target_dir is user-controlled,Low,1060,"    def normalize(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 3487, 1096, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
"‚úÖ Best Practice: Ensure target directory exists, preventing runtime errors","[26486, 227, 6705, 19939, 25, 48987, 2496, 8619, 7160, 11, 12174, 19124, 8563]",1.0,1099,best_practice,238,"Ensure target directory exists, preventing runtime errors",,1084,"        raise NotImplementedError("""")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7203, 4943]"
üß† ML Signal: Usage of a class instance with dynamic parameters,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 1398, 4554, 351, 8925, 10007]",0.5,1099,ml_signal,244,Usage of a class instance with dynamic parameters,,1099,,[]
‚úÖ Best Practice: Convert file_path to Path object to ensure consistent path handling,"[26486, 227, 6705, 19939, 25, 38240, 2393, 62, 6978, 284, 10644, 2134, 284, 4155, 6414, 3108, 9041]",0.5,1099,best_practice,245,Convert file_path to Path object to ensure consistent path handling,,1099,,[]
"üß† ML Signal: Usage of internal pandas API, which may indicate advanced data manipulation","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 5387, 19798, 292, 7824, 11, 543, 743, 7603, 6190, 1366, 17512]",1.0,1107,ml_signal,247,"Usage of internal pandas API, which may indicate advanced data manipulation",,1099,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
‚úÖ Best Practice: Copying default_na to avoid modifying the original list,"[26486, 227, 6705, 19939, 25, 6955, 1112, 4277, 62, 2616, 284, 3368, 30620, 262, 2656, 1351]",1.0,1123,best_practice,249,Copying default_na to avoid modifying the original list,,1107,"        source_dir: [str, Path],","[220, 220, 220, 220, 220, 220, 220, 2723, 62, 15908, 25, 685, 2536, 11, 10644, 4357]"
"‚úÖ Best Practice: Removing ""NA"" from symbol_na to customize NA handling","[26486, 227, 6705, 19939, 25, 3982, 5165, 366, 4535, 1, 422, 6194, 62, 2616, 284, 24184, 11746, 9041]",1.0,1139,best_practice,250,"Removing ""NA"" from symbol_na to customize NA handling",,1123,"        target_dir: [str, Path],","[220, 220, 220, 220, 220, 220, 220, 2496, 62, 15908, 25, 685, 2536, 11, 10644, 4357]"
üß† ML Signal: Reading only the header of the CSV to get column names,"[8582, 100, 254, 10373, 26484, 25, 11725, 691, 262, 13639, 286, 262, 44189, 284, 651, 5721, 3891]",0.5,1155,ml_signal,250,Reading only the header of the CSV to get column names,,1139,"        target_dir: [str, Path],","[220, 220, 220, 220, 220, 220, 220, 2496, 62, 15908, 25, 685, 2536, 11, 10644, 4357]"
üß† ML Signal: Conditional NA value handling based on column names,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 11746, 1988, 9041, 1912, 319, 5721, 3891]",0.5,1159,ml_signal,256,Conditional NA value handling based on column names,,1155,    ):,"[220, 220, 220, 15179]"
üß† ML Signal: Normalizing data using a custom normalization object,"[8582, 100, 254, 10373, 26484, 25, 14435, 2890, 1366, 1262, 257, 2183, 3487, 1634, 2134]",0.5,1182,ml_signal,262,Normalizing data using a custom normalization object,,1159,            The directory where the raw data collected from the Internet is saved,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 383, 8619, 810, 262, 8246, 1366, 7723, 422, 262, 4455, 318, 7448]"
‚úÖ Best Practice: Check if DataFrame is not None and not empty before processing,"[26486, 227, 6705, 19939, 25, 6822, 611, 6060, 19778, 318, 407, 6045, 290, 407, 6565, 878, 7587]",0.5,1198,best_practice,264,Check if DataFrame is not None and not empty before processing,,1182,            Directory for normalize data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27387, 329, 3487, 1096, 1366]"
‚úÖ Best Practice: Check if _end_date is not None before applying date filter,"[26486, 227, 6705, 19939, 25, 6822, 611, 4808, 437, 62, 4475, 318, 407, 6045, 878, 11524, 3128, 8106]",0.5,1212,best_practice,266,Check if _end_date is not None before applying date filter,,1198,            normalize class,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3487, 1096, 1398]"
üß† ML Signal: Filtering DataFrame based on date field,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 6060, 19778, 1912, 319, 3128, 2214]",0.5,1230,ml_signal,268,Filtering DataFrame based on date field,,1212,"            Concurrent number, default is 16","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13223, 6657, 1271, 11, 4277, 318, 1467]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if _target_dir is not validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4808, 16793, 62, 15908, 318, 407, 31031, 393, 5336, 36951]",0.5,1244,sast_risk,271,Potential risk if _target_dir is not validated or sanitized,Low,1230,        symbol_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 6194, 62, 3245, 62, 3672, 25, 965]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,1258,ml_signal,263,Logging usage pattern,,1244,        target_dir: str or Path,"[220, 220, 220, 220, 220, 220, 220, 2496, 62, 15908, 25, 965, 393, 10644]"
‚úÖ Best Practice: Use of ProcessPoolExecutor for parallel processing,"[26486, 227, 6705, 19939, 25, 5765, 286, 10854, 27201, 23002, 38409, 329, 10730, 7587]",1.0,1277,best_practice,265,Use of ProcessPoolExecutor for parallel processing,,1258,        normalize_class: Type[YahooNormalize],"[220, 220, 220, 220, 220, 220, 220, 3487, 1096, 62, 4871, 25, 5994, 58, 56, 12992, 26447, 1096, 60]"
üß† ML Signal: Use of glob to list files,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 15095, 284, 1351, 3696]",1.0,1289,ml_signal,267,Use of glob to list files,,1277,        max_workers: int,"[220, 220, 220, 220, 220, 220, 220, 3509, 62, 22896, 25, 493]"
‚úÖ Best Practice: Use of tqdm for progress tracking,"[26486, 227, 6705, 19939, 25, 5765, 286, 256, 80, 36020, 329, 4371, 9646]",1.0,1303,best_practice,269,Use of tqdm for progress tracking,,1289,        date_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965]"
‚úÖ Best Practice: Updating progress bar within loop,"[26486, 227, 6705, 19939, 25, 3205, 38734, 4371, 2318, 1626, 9052]",1.0,1317,best_practice,271,Updating progress bar within loop,,1303,        symbol_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 6194, 62, 3245, 62, 3672, 25, 965]"
‚úÖ Best Practice: Inheriting from abc.ABC to define an abstract base class,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 450, 66, 13, 24694, 284, 8160, 281, 12531, 2779, 1398]",1.0,1331,best_practice,269,Inheriting from abc.ABC to define an abstract base class,,1317,        date_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965]"
‚ö†Ô∏è SAST Risk (Low): Directory creation without proper permissions handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 27387, 6282, 1231, 1774, 21627, 9041]",0.5,1339,sast_risk,286,Directory creation without proper permissions handling,Low,1331,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Directory creation without proper permissions handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 27387, 6282, 1231, 1774, 21627, 9041]",0.5,1380,sast_risk,291,Directory creation without proper permissions handling,Low,1339,"        # some symbol_field values such as TRUE, NA are decoded as True(bool), NaN(np.float) by pandas default csv parsing.","[220, 220, 220, 220, 220, 220, 220, 1303, 617, 6194, 62, 3245, 3815, 884, 355, 26751, 11, 11746, 389, 875, 9043, 355, 6407, 7, 30388, 828, 11013, 45, 7, 37659, 13, 22468, 8, 416, 19798, 292, 4277, 269, 21370, 32096, 13]"
‚ö†Ô∏è SAST Risk (Medium): Dynamic import can lead to code execution vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 26977, 1330, 460, 1085, 284, 2438, 9706, 23805]",0.5,1418,sast_risk,293,Dynamic import can lead to code execution vulnerabilities,Medium,1380,        default_na = pd._libs.parsers.STR_NA_VALUES  # pylint: disable=I1101,"[220, 220, 220, 220, 220, 220, 220, 4277, 62, 2616, 796, 279, 67, 13557, 8019, 82, 13, 79, 945, 364, 13, 18601, 62, 4535, 62, 23428, 35409, 220, 1303, 279, 2645, 600, 25, 15560, 28, 40, 1157, 486]"
üß† ML Signal: Usage of max_workers parameter for concurrency,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3509, 62, 22896, 11507, 329, 1673, 13382]",1.0,1445,ml_signal,296,Usage of max_workers parameter for concurrency,,1418,"        columns = pd.read_csv(file_path, nrows=0).columns","[220, 220, 220, 220, 220, 220, 220, 15180, 796, 279, 67, 13, 961, 62, 40664, 7, 7753, 62, 6978, 11, 299, 8516, 28, 15, 737, 28665, 82]"
üß† ML Signal: Usage of interval parameter for scheduling,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 16654, 11507, 329, 26925]",0.5,1461,ml_signal,297,Usage of interval parameter for scheduling,,1445,        df = pd.read_csv(,"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 40664, 7]"
‚úÖ Best Practice: Raising NotImplementedError is a common pattern for abstract methods,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 318, 257, 2219, 3912, 329, 12531, 5050]",0.5,1477,best_practice,297,Raising NotImplementedError is a common pattern for abstract methods,,1461,        df = pd.read_csv(,"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 40664, 7]"
‚úÖ Best Practice: Using @property decorator for abstract methods is a good practice for defining abstract properties,"[26486, 227, 6705, 19939, 25, 8554, 2488, 26745, 11705, 1352, 329, 12531, 5050, 318, 257, 922, 3357, 329, 16215, 12531, 6608]",1.0,1496,best_practice,300,Using @property decorator for abstract methods is a good practice for defining abstract properties,,1477,"            keep_default_na=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1394, 62, 12286, 62, 2616, 28, 25101, 11]"
‚úÖ Best Practice: Raising NotImplementedError in abstract methods is a common pattern to enforce implementation in subclasses.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 287, 12531, 5050, 318, 257, 2219, 3912, 284, 4605, 7822, 287, 850, 37724, 13]",0.5,1536,best_practice,301,Raising NotImplementedError in abstract methods is a common pattern to enforce implementation in subclasses.,,1496,"            na_values={col: symbol_na if col == self._symbol_field_name else default_na for col in columns},","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12385, 62, 27160, 34758, 4033, 25, 6194, 62, 2616, 611, 951, 6624, 2116, 13557, 1837, 23650, 62, 3245, 62, 3672, 2073, 4277, 62, 2616, 329, 951, 287, 15180, 5512]"
‚úÖ Best Practice: Using @property decorator for abstract methods is a good practice to enforce property implementation in subclasses.,"[26486, 227, 6705, 19939, 25, 8554, 2488, 26745, 11705, 1352, 329, 12531, 5050, 318, 257, 922, 3357, 284, 4605, 3119, 7822, 287, 850, 37724, 13]",1.0,1571,best_practice,304,Using @property decorator for abstract methods is a good practice to enforce property implementation in subclasses.,,1536,"        # NOTE: It has been reported that there may be some problems here, and the specific issues will be dealt with when they are identified.","[220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 632, 468, 587, 2098, 326, 612, 743, 307, 617, 2761, 994, 11, 290, 262, 2176, 2428, 481, 307, 11829, 351, 618, 484, 389, 5174, 13]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1606,best_practice,304,Use of type hinting for return type improves code readability and maintainability,,1571,"        # NOTE: It has been reported that there may be some problems here, and the specific issues will be dealt with when they are identified.","[220, 220, 220, 220, 220, 220, 220, 1303, 24550, 25, 632, 468, 587, 2098, 326, 612, 743, 307, 617, 2761, 994, 11, 290, 262, 2176, 2428, 481, 307, 11829, 351, 618, 484, 389, 5174, 13]"
‚úÖ Best Practice: Raising NotImplementedError is a clear way to indicate that a method should be overridden,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 318, 257, 1598, 835, 284, 7603, 326, 257, 2446, 815, 307, 23170, 4651]",1.0,1624,best_practice,306,Raising NotImplementedError is a clear way to indicate that a method should be overridden,,1606,        if df is not None and not df.empty:,"[220, 220, 220, 220, 220, 220, 220, 611, 47764, 318, 407, 6045, 290, 407, 47764, 13, 28920, 25]"
"‚úÖ Best Practice: Use of getattr allows for dynamic attribute access, which is flexible for different modules.","[26486, 227, 6705, 19939, 25, 5765, 286, 651, 35226, 3578, 329, 8925, 11688, 1895, 11, 543, 318, 12846, 329, 1180, 13103, 13]",1.0,1632,best_practice,336,"Use of getattr allows for dynamic attribute access, which is flexible for different modules.",,1624,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: The parameters passed to the class could be used to understand data collection patterns.,"[8582, 100, 254, 10373, 26484, 25, 383, 10007, 3804, 284, 262, 1398, 714, 307, 973, 284, 1833, 1366, 4947, 7572, 13]",0.5,1646,ml_signal,337,The parameters passed to the class could be used to understand data collection patterns.,,1632,        if source_dir is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 2723, 62, 15908, 318, 6045, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if self.source_dir or other parameters are user-controlled and not validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 2116, 13, 10459, 62, 15908, 393, 584, 10007, 389, 2836, 12, 14401, 290, 407, 31031, 13]",0.5,1660,sast_risk,337,Potential risk if self.source_dir or other parameters are user-controlled and not validated.,Low,1646,        if source_dir is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 2723, 62, 15908, 318, 6045, 25]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",0.5,1660,best_practice,350,Use of default parameter values for flexibility and ease of use,,1660,,[]
"üß† ML Signal: Dynamic class retrieval using getattr, indicating potential use of different normalization strategies","[8582, 100, 254, 10373, 26484, 25, 26977, 1398, 45069, 1262, 651, 35226, 11, 12739, 2785, 779, 286, 1180, 3487, 1634, 10064]",0.5,1669,ml_signal,362,"Dynamic class retrieval using getattr, indicating potential use of different normalization strategies",,1660,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
"üß† ML Signal: Instantiation of a Normalize object with various parameters, indicating a pattern of data processing","[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 14435, 1096, 2134, 351, 2972, 10007, 11, 12739, 257, 3912, 286, 1366, 7587]",0.5,1678,ml_signal,362,"Instantiation of a Normalize object with various parameters, indicating a pattern of data processing",,1669,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
"üß† ML Signal: Method call on an object, indicating a pattern of executing a normalization process","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134, 11, 12739, 257, 3912, 286, 23710, 257, 3487, 1634, 1429]",0.5,1689,ml_signal,371,"Method call on an object, indicating a pattern of executing a normalization process",,1678,"        end=None,","[220, 220, 220, 220, 220, 220, 220, 886, 28, 14202, 11]"

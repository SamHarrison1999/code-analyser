[
  {
    "line": 20,
    "text": "from tqdm import tqdm",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Hardcoded URLs can lead to security risks if not properly validated or sanitized.",
    "confidence": 1.0,
    "tokens": [
      6738,
      256,
      80,
      36020,
      1330,
      256,
      80,
      36020
    ],
    "start_token": 0,
    "end_token": 8,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6912,
      40976,
      32336,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      6105,
      31031,
      393,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Hardcoded URLs can lead to security risks if not properly validated or sanitized."
  },
  {
    "line": 22,
    "text": "from concurrent.futures import ProcessPoolExecutor",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Hardcoded URLs can lead to security risks if not properly validated or sanitized.",
    "confidence": 1.0,
    "tokens": [
      6738,
      24580,
      13,
      69,
      315,
      942,
      1330,
      10854,
      27201,
      23002,
      38409
    ],
    "start_token": 8,
    "end_token": 19,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6912,
      40976,
      32336,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      6105,
      31031,
      393,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Hardcoded URLs can lead to security risks if not properly validated or sanitized."
  },
  {
    "line": 23,
    "text": "from bs4 import BeautifulSoup",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Hardcoded URLs can lead to security risks if not properly validated or sanitized.",
    "confidence": 1.0,
    "tokens": [
      6738,
      275,
      82,
      19,
      1330,
      23762,
      50,
      10486
    ],
    "start_token": 19,
    "end_token": 27,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6912,
      40976,
      32336,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      6105,
      31031,
      393,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Hardcoded URLs can lead to security risks if not properly validated or sanitized."
  },
  {
    "line": 23,
    "text": "from bs4 import BeautifulSoup",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Hardcoded URLs can lead to security risks if not properly validated or sanitized.",
    "confidence": 1.0,
    "tokens": [
      6738,
      275,
      82,
      19,
      1330,
      23762,
      50,
      10486
    ],
    "start_token": 27,
    "end_token": 35,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6912,
      40976,
      32336,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      6105,
      31031,
      393,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Hardcoded URLs can lead to security risks if not properly validated or sanitized."
  },
  {
    "line": 36,
    "text": "    # NOTE: Use the time series of ^GSPC(SP500) as the sequence of all stocks",
    "annotation": "\u2705 Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1303,
      24550,
      25,
      5765,
      262,
      640,
      2168,
      286,
      10563,
      38,
      4303,
      34,
      7,
      4303,
      4059,
      8,
      355,
      262,
      8379,
      286,
      477,
      14420
    ],
    "start_token": 35,
    "end_token": 60,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3298,
      9633,
      815,
      307,
      49491,
      284,
      3368,
      2785,
      1735,
      3048,
      290,
      2987,
      2438,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of global variables should be minimized to avoid potential side effects and improve code maintainability."
  },
  {
    "line": 38,
    "text": "    \"IN_ALL\": \"^NSEI\",",
    "annotation": "\u2705 Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      366,
      1268,
      62,
      7036,
      1298,
      366,
      61,
      45,
      5188,
      40,
      1600
    ],
    "start_token": 60,
    "end_token": 74,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3298,
      9633,
      815,
      307,
      49491,
      284,
      3368,
      2785,
      1735,
      3048,
      290,
      2987,
      2438,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of global variables should be minimized to avoid potential side effects and improve code maintainability."
  },
  {
    "line": 40,
    "text": "}",
    "annotation": "\u2705 Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.",
    "confidence": 0.5,
    "tokens": [
      92
    ],
    "start_token": 74,
    "end_token": 75,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3298,
      9633,
      815,
      307,
      49491,
      284,
      3368,
      2785,
      1735,
      3048,
      290,
      2987,
      2438,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of global variables should be minimized to avoid potential side effects and improve code maintainability."
  },
  {
    "line": 42,
    "text": "_BENCH_CALENDAR_LIST = None",
    "annotation": "\u2705 Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.",
    "confidence": 0.5,
    "tokens": [
      62,
      33,
      1677,
      3398,
      62,
      34,
      1847,
      10619,
      1503,
      62,
      45849,
      796,
      6045
    ],
    "start_token": 75,
    "end_token": 88,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3298,
      9633,
      815,
      307,
      49491,
      284,
      3368,
      2785,
      1735,
      3048,
      290,
      2987,
      2438,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of global variables should be minimized to avoid potential side effects and improve code maintainability."
  },
  {
    "line": 42,
    "text": "_BENCH_CALENDAR_LIST = None",
    "annotation": "\u2705 Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.",
    "confidence": 0.5,
    "tokens": [
      62,
      33,
      1677,
      3398,
      62,
      34,
      1847,
      10619,
      1503,
      62,
      45849,
      796,
      6045
    ],
    "start_token": 88,
    "end_token": 101,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3298,
      9633,
      815,
      307,
      49491,
      284,
      3368,
      2785,
      1735,
      3048,
      290,
      2987,
      2438,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of global variables should be minimized to avoid potential side effects and improve code maintainability."
  },
  {
    "line": 42,
    "text": "_BENCH_CALENDAR_LIST = None",
    "annotation": "\u2705 Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.",
    "confidence": 0.5,
    "tokens": [
      62,
      33,
      1677,
      3398,
      62,
      34,
      1847,
      10619,
      1503,
      62,
      45849,
      796,
      6045
    ],
    "start_token": 101,
    "end_token": 114,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3298,
      9633,
      815,
      307,
      49491,
      284,
      3368,
      2785,
      1735,
      3048,
      290,
      2987,
      2438,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of global variables should be minimized to avoid potential side effects and improve code maintainability."
  },
  {
    "line": 51,
    "text": "# NOTE: Until 2020-10-20 20:00:00",
    "annotation": "\u2705 Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.",
    "confidence": 0.5,
    "tokens": [
      2,
      24550,
      25,
      14303,
      12131,
      12,
      940,
      12,
      1238,
      1160,
      25,
      405,
      25,
      405
    ],
    "start_token": 114,
    "end_token": 128,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3298,
      9633,
      815,
      307,
      49491,
      284,
      3368,
      2785,
      1735,
      3048,
      290,
      2987,
      2438,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of global variables should be minimized to avoid potential side effects and improve code maintainability."
  },
  {
    "line": 51,
    "text": "# NOTE: Until 2020-10-20 20:00:00",
    "annotation": "\u2705 Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.",
    "confidence": 0.5,
    "tokens": [
      2,
      24550,
      25,
      14303,
      12131,
      12,
      940,
      12,
      1238,
      1160,
      25,
      405,
      25,
      405
    ],
    "start_token": 128,
    "end_token": 142,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3298,
      9633,
      815,
      307,
      49491,
      284,
      3368,
      2785,
      1735,
      3048,
      290,
      2987,
      2438,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of global variables should be minimized to avoid potential side effects and improve code maintainability."
  },
  {
    "line": 52,
    "text": "MINIMUM_SYMBOLS_NUM = 3900",
    "annotation": "\ud83e\udde0 ML Signal: Use of constants can indicate important thresholds or limits in the application logic.",
    "confidence": 1.0,
    "tokens": [
      23678,
      3955,
      5883,
      62,
      23060,
      10744,
      3535,
      50,
      62,
      41359,
      796,
      5014,
      405
    ],
    "start_token": 142,
    "end_token": 155,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38491,
      460,
      7603,
      1593,
      40885,
      393,
      7095,
      287,
      262,
      3586,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of constants can indicate important thresholds or limits in the application logic."
  },
  {
    "line": 41,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hinting for function return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 155,
    "end_token": 155,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      2163,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for function return type improves code readability and maintainability"
  },
  {
    "line": 52,
    "text": "MINIMUM_SYMBOLS_NUM = 3900",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern can be used to train models for log analysis or anomaly detection",
    "confidence": 1.0,
    "tokens": [
      23678,
      3955,
      5883,
      62,
      23060,
      10744,
      3535,
      50,
      62,
      41359,
      796,
      5014,
      405
    ],
    "start_token": 155,
    "end_token": 168,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      460,
      307,
      973,
      284,
      4512,
      4981,
      329,
      2604,
      3781,
      393,
      32172,
      13326
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern can be used to train models for log analysis or anomaly detection"
  },
  {
    "line": 53,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No timeout specified for requests.get, which can lead to hanging connections.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 168,
    "end_token": 168,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      26827,
      7368,
      329,
      7007,
      13,
      1136,
      11,
      543,
      460,
      1085,
      284,
      10938,
      8787,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No timeout specified for requests.get, which can lead to hanging connections."
  },
  {
    "line": 55,
    "text": "def get_calendar_list(bench_code=\"CSI300\") -> List[pd.Timestamp]:",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda function for mapping, indicating functional programming style.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      9948,
      9239,
      62,
      4868,
      7,
      26968,
      62,
      8189,
      2625,
      7902,
      40,
      6200,
      4943,
      4613,
      7343,
      58,
      30094,
      13,
      14967,
      27823,
      5974
    ],
    "start_token": 168,
    "end_token": 192,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      2163,
      329,
      16855,
      11,
      12739,
      10345,
      8300,
      3918,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of lambda function for mapping, indicating functional programming style."
  },
  {
    "line": 57,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of dictionary get method with default value.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 192,
    "end_token": 192,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      22155,
      651,
      2446,
      351,
      4277,
      1988,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of dictionary get method with default value."
  },
  {
    "line": 60,
    "text": "    bench_code: str",
    "annotation": "\ud83e\udde0 ML Signal: Use of string method startswith for conditional logic.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      7624,
      62,
      8189,
      25,
      965
    ],
    "start_token": 192,
    "end_token": 200,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4731,
      2446,
      923,
      2032,
      342,
      329,
      26340,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of string method startswith for conditional logic."
  },
  {
    "line": 61,
    "text": "        value from [\"CSI300\", \"CSI500\", \"ALL\", \"US_ALL\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information disclosure through print statements.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1988,
      422,
      14631,
      7902,
      40,
      6200,
      1600,
      366,
      7902,
      40,
      4059,
      1600,
      366,
      7036,
      1600,
      366,
      2937,
      62,
      7036,
      8973
    ],
    "start_token": 200,
    "end_token": 227,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      13019,
      832,
      3601,
      6299,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information disclosure through print statements."
  },
  {
    "line": 63,
    "text": "    Returns",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information disclosure through print statements.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      16409
    ],
    "start_token": 227,
    "end_token": 231,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      13019,
      832,
      3601,
      6299,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information disclosure through print statements."
  },
  {
    "line": 66,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Repeated instantiation of Ticker object with same parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 231,
    "end_token": 235,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30558,
      515,
      9113,
      3920,
      286,
      309,
      15799,
      2134,
      351,
      976,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Repeated instantiation of Ticker object with same parameters."
  },
  {
    "line": 68,
    "text": "    logger.info(f\"get calendar list: {bench_code}......\")",
    "annotation": "\ud83e\udde0 ML Signal: Use of pandas methods for data manipulation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      1136,
      11845,
      1351,
      25,
      1391,
      26968,
      62,
      8189,
      92,
      16317,
      4943
    ],
    "start_token": 235,
    "end_token": 255,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19798,
      292,
      5050,
      329,
      1366,
      17512,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of pandas methods for data manipulation."
  },
  {
    "line": 71,
    "text": "        _value_list = requests.get(url, timeout=None).json()[\"data\"][\"klines\"]",
    "annotation": "\ud83e\udde0 ML Signal: Use of string method upper for case-insensitive comparison.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      8367,
      62,
      4868,
      796,
      7007,
      13,
      1136,
      7,
      6371,
      11,
      26827,
      28,
      14202,
      737,
      17752,
      3419,
      14692,
      7890,
      1,
      7131,
      1,
      74,
      6615,
      8973
    ],
    "start_token": 255,
    "end_token": 287,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4731,
      2446,
      6727,
      329,
      1339,
      12,
      1040,
      18464,
      7208,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of string method upper for case-insensitive comparison."
  },
  {
    "line": 73,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorator for retry logic.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 287,
    "end_token": 287,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      1352,
      329,
      1005,
      563,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of decorator for retry logic."
  },
  {
    "line": 68,
    "text": "    logger.info(f\"get calendar list: {bench_code}......\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No timeout specified for requests.get, which can lead to hanging connections.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      1136,
      11845,
      1351,
      25,
      1391,
      26968,
      62,
      8189,
      92,
      16317,
      4943
    ],
    "start_token": 287,
    "end_token": 307,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      26827,
      7368,
      329,
      7007,
      13,
      1136,
      11,
      543,
      460,
      1085,
      284,
      10938,
      8787,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No timeout specified for requests.get, which can lead to hanging connections."
  },
  {
    "line": 73,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pd.Timestamp to convert date strings to pandas Timestamp objects.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 307,
    "end_token": 307,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      279,
      67,
      13,
      14967,
      27823,
      284,
      10385,
      3128,
      13042,
      284,
      19798,
      292,
      5045,
      27823,
      5563,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pd.Timestamp to convert date strings to pandas Timestamp objects."
  },
  {
    "line": 77,
    "text": "            print(Ticker(CALENDAR_BENCH_URL_MAP[bench_code]))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide unexpected errors.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      51,
      15799,
      7,
      34,
      1847,
      10619,
      1503,
      62,
      33,
      1677,
      3398,
      62,
      21886,
      62,
      33767,
      58,
      26968,
      62,
      8189,
      60,
      4008
    ],
    "start_token": 307,
    "end_token": 341,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      10059,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide unexpected errors."
  },
  {
    "line": 80,
    "text": "            calendar = df.index.get_level_values(level=\"date\").map(pd.Timestamp).unique().tolist()",
    "annotation": "\ud83e\udde0 ML Signal: Usage of pd.date_range to generate a range of dates.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11845,
      796,
      47764,
      13,
      9630,
      13,
      1136,
      62,
      5715,
      62,
      27160,
      7,
      5715,
      2625,
      4475,
      11074,
      8899,
      7,
      30094,
      13,
      14967,
      27823,
      737,
      34642,
      22446,
      83,
      349,
      396,
      3419
    ],
    "start_token": 341,
    "end_token": 381,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      279,
      67,
      13,
      4475,
      62,
      9521,
      284,
      7716,
      257,
      2837,
      286,
      9667,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of pd.date_range to generate a range of dates."
  },
  {
    "line": 83,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of strftime to format dates.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 381,
    "end_token": 381,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      965,
      31387,
      284,
      5794,
      9667,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of strftime to format dates."
  },
  {
    "line": 87,
    "text": "                    try:",
    "annotation": "\u2705 Best Practice: Using list concatenation instead of append in a loop for better performance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 381,
    "end_token": 402,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      1673,
      36686,
      341,
      2427,
      286,
      24443,
      287,
      257,
      9052,
      329,
      1365,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Using list concatenation instead of append in a loop for better performance."
  },
  {
    "line": 89,
    "text": "                            SZSE_CALENDAR_URL.format(month=month, random=random.random), timeout=None",
    "annotation": "\ud83e\udde0 ML Signal: Usage of filter and lambda to filter dates.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      311,
      57,
      5188,
      62,
      34,
      1847,
      10619,
      1503,
      62,
      21886,
      13,
      18982,
      7,
      8424,
      28,
      8424,
      11,
      4738,
      28,
      25120,
      13,
      25120,
      828,
      26827,
      28,
      14202
    ],
    "start_token": 402,
    "end_token": 455,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      8106,
      290,
      37456,
      284,
      8106,
      9667,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of filter and lambda to filter dates."
  },
  {
    "line": 92,
    "text": "                            if int(_r[\"jybz\"]):",
    "annotation": "\ud83e\udde0 ML Signal: Caching results in a dictionary for reuse.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      493,
      28264,
      81,
      14692,
      73,
      88,
      65,
      89,
      8973,
      2599
    ],
    "start_token": 455,
    "end_token": 493,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      327,
      8103,
      2482,
      287,
      257,
      22155,
      329,
      32349,
      13
    ],
    "label": "ml_signal",
    "reason": "Caching results in a dictionary for reuse."
  },
  {
    "line": 92,
    "text": "                            if int(_r[\"jybz\"]):",
    "annotation": "\ud83e\udde0 ML Signal: Logging information for tracking execution flow.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      493,
      28264,
      81,
      14692,
      73,
      88,
      65,
      89,
      8973,
      2599
    ],
    "start_token": 493,
    "end_token": 531,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      1321,
      329,
      9646,
      9706,
      5202,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging information for tracking execution flow."
  },
  {
    "line": 89,
    "text": "                            SZSE_CALENDAR_URL.format(month=month, random=random.random), timeout=None",
    "annotation": "\u2705 Best Practice: Type hint for file_path suggests it should be a Path object, improving code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      311,
      57,
      5188,
      62,
      34,
      1847,
      10619,
      1503,
      62,
      21886,
      13,
      18982,
      7,
      8424,
      28,
      8424,
      11,
      4738,
      28,
      25120,
      13,
      25120,
      828,
      26827,
      28,
      14202
    ],
    "start_token": 531,
    "end_token": 584,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5994,
      9254,
      329,
      2393,
      62,
      6978,
      5644,
      340,
      815,
      307,
      257,
      10644,
      2134,
      11,
      10068,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Type hint for file_path suggests it should be a Path object, improving code readability and maintainability."
  },
  {
    "line": 91,
    "text": "                        for _r in resp[\"data\"]:",
    "annotation": "\ud83e\udde0 ML Signal: Reading a CSV file to extract a specific column is a common data processing pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4808,
      81,
      287,
      1217,
      14692,
      7890,
      1,
      5974
    ],
    "start_token": 584,
    "end_token": 616,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11725,
      257,
      44189,
      2393,
      284,
      7925,
      257,
      2176,
      5721,
      318,
      257,
      2219,
      1366,
      7587,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Reading a CSV file to extract a specific column is a common data processing pattern."
  },
  {
    "line": 92,
    "text": "                            if int(_r[\"jybz\"]):",
    "annotation": "\ud83e\udde0 ML Signal: Converting strings to timestamps is a common preprocessing step in time series analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      493,
      28264,
      81,
      14692,
      73,
      88,
      65,
      89,
      8973,
      2599
    ],
    "start_token": 616,
    "end_token": 654,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      13042,
      284,
      4628,
      395,
      9430,
      318,
      257,
      2219,
      662,
      36948,
      2239,
      287,
      640,
      2168,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting strings to timestamps is a common preprocessing step in time series analysis."
  },
  {
    "line": 92,
    "text": "                            if int(_r[\"jybz\"]):",
    "annotation": "\u2705 Best Practice: Using list comprehension for converting and sorting dates is efficient and concise.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      493,
      28264,
      81,
      14692,
      73,
      88,
      65,
      89,
      8973,
      2599
    ],
    "start_token": 654,
    "end_token": 692,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      1351,
      35915,
      329,
      23202,
      290,
      29407,
      9667,
      318,
      6942,
      290,
      35327,
      13
    ],
    "label": "best_practice",
    "reason": "Using list comprehension for converting and sorting dates is efficient and concise."
  },
  {
    "line": 92,
    "text": "                            if int(_r[\"jybz\"]):",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      493,
      28264,
      81,
      14692,
      73,
      88,
      65,
      89,
      8973,
      2599
    ],
    "start_token": 692,
    "end_token": 730,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters and return type improves code readability and maintainability."
  },
  {
    "line": 99,
    "text": "                calendar = []",
    "annotation": "\u2705 Best Practice: Docstring provides a clear explanation of the function's purpose, parameters, and return value.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11845,
      796,
      17635
    ],
    "start_token": 730,
    "end_token": 748,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      7468,
      286,
      262,
      2163,
      338,
      4007,
      11,
      10007,
      11,
      290,
      1441,
      1988,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear explanation of the function's purpose, parameters, and return value."
  },
  {
    "line": 118,
    "text": "    source_dir: [str, Path],",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern can be used to train models for log analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2723,
      62,
      15908,
      25,
      685,
      2536,
      11,
      10644,
      4357
    ],
    "start_token": 748,
    "end_token": 760,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      460,
      307,
      973,
      284,
      4512,
      4981,
      329,
      2604,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern can be used to train models for log analysis."
  },
  {
    "line": 120,
    "text": "    threshold: float = 0.5,",
    "annotation": "\u2705 Best Practice: Use of Path.expanduser() to handle user directories in a cross-platform way.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      11387,
      25,
      12178,
      796,
      657,
      13,
      20,
      11
    ],
    "start_token": 760,
    "end_token": 771,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      13,
      11201,
      392,
      7220,
      3419,
      284,
      5412,
      2836,
      29196,
      287,
      257,
      3272,
      12,
      24254,
      835,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Path.expanduser() to handle user directories in a cross-platform way."
  },
  {
    "line": 122,
    "text": "    max_workers: int = 16,",
    "annotation": "\u2705 Best Practice: Use of Path.glob() to list files in a directory is more readable and concise.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3509,
      62,
      22896,
      25,
      493,
      796,
      1467,
      11
    ],
    "start_token": 771,
    "end_token": 782,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      13,
      4743,
      672,
      3419,
      284,
      1351,
      3696,
      287,
      257,
      8619,
      318,
      517,
      31744,
      290,
      35327,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Path.glob() to list files in a directory is more readable and concise."
  },
  {
    "line": 125,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern can be used to train models for log analysis.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 782,
    "end_token": 782,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      460,
      307,
      973,
      284,
      4512,
      4981,
      329,
      2604,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern can be used to train models for log analysis."
  },
  {
    "line": 128,
    "text": "    source_dir: str or Path",
    "annotation": "\u2705 Best Practice: Use of functools.partial to pre-fill function arguments is a good practice for code reuse.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2723,
      62,
      15908,
      25,
      965,
      393,
      10644
    ],
    "start_token": 782,
    "end_token": 792,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1257,
      310,
      10141,
      13,
      47172,
      284,
      662,
      12,
      20797,
      2163,
      7159,
      318,
      257,
      922,
      3357,
      329,
      2438,
      32349,
      13
    ],
    "label": "best_practice",
    "reason": "Use of functools.partial to pre-fill function arguments is a good practice for code reuse."
  },
  {
    "line": 131,
    "text": "            date field name, default is date",
    "annotation": "\u2705 Best Practice: Use of tqdm for progress tracking is a good practice for long-running operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3128,
      2214,
      1438,
      11,
      4277,
      318,
      3128
    ],
    "start_token": 792,
    "end_token": 810,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      256,
      80,
      36020,
      329,
      4371,
      9646,
      318,
      257,
      922,
      3357,
      329,
      890,
      12,
      20270,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Use of tqdm for progress tracking is a good practice for long-running operations."
  },
  {
    "line": 133,
    "text": "        threshold to exclude some days when few funds trade in this day, default 0.5",
    "annotation": "\u2705 Best Practice: Use of ProcessPoolExecutor for parallel processing improves performance.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11387,
      284,
      19607,
      617,
      1528,
      618,
      1178,
      5153,
      3292,
      287,
      428,
      1110,
      11,
      4277,
      657,
      13,
      20
    ],
    "start_token": 810,
    "end_token": 834,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10854,
      27201,
      23002,
      38409,
      329,
      10730,
      7587,
      19575,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Use of ProcessPoolExecutor for parallel processing improves performance."
  },
  {
    "line": 144,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern can be used to train models for log analysis.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 834,
    "end_token": 834,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      460,
      307,
      973,
      284,
      4512,
      4981,
      329,
      2604,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern can be used to train models for log analysis."
  },
  {
    "line": 146,
    "text": "    file_list = list(source_dir.glob(\"*.csv\"))",
    "annotation": "\u2705 Best Practice: Use of tqdm for progress tracking is a good practice for long-running operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2393,
      62,
      4868,
      796,
      1351,
      7,
      10459,
      62,
      15908,
      13,
      4743,
      672,
      7203,
      24620,
      40664,
      48774
    ],
    "start_token": 834,
    "end_token": 853,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      256,
      80,
      36020,
      329,
      4371,
      9646,
      318,
      257,
      922,
      3357,
      329,
      890,
      12,
      20270,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Use of tqdm for progress tracking is a good practice for long-running operations."
  },
  {
    "line": 152,
    "text": "    _fun = partial(return_date_list, date_field_name)",
    "annotation": "\u2705 Best Practice: List comprehension is used for concise and efficient list creation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4808,
      12543,
      796,
      13027,
      7,
      7783,
      62,
      4475,
      62,
      4868,
      11,
      3128,
      62,
      3245,
      62,
      3672,
      8
    ],
    "start_token": 853,
    "end_token": 873,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7343,
      35915,
      318,
      973,
      329,
      35327,
      290,
      6942,
      1351,
      6282,
      13
    ],
    "label": "best_practice",
    "reason": "List comprehension is used for concise and efficient list creation."
  },
  {
    "line": 145,
    "text": "    source_dir = Path(source_dir).expanduser()",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the function's purpose and return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2723,
      62,
      15908,
      796,
      10644,
      7,
      10459,
      62,
      15908,
      737,
      11201,
      392,
      7220,
      3419
    ],
    "start_token": 873,
    "end_token": 890,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the function's purpose and return value"
  },
  {
    "line": 152,
    "text": "    _fun = partial(return_date_list, date_field_name)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using global variables can lead to unexpected behavior and is generally discouraged",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      4808,
      12543,
      796,
      13027,
      7,
      7783,
      62,
      4475,
      62,
      4868,
      11,
      3128,
      62,
      3245,
      62,
      3672,
      8
    ],
    "start_token": 890,
    "end_token": 910,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      3298,
      9633,
      460,
      1085,
      284,
      10059,
      4069,
      290,
      318,
      4143,
      30170
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using global variables can lead to unexpected behavior and is generally discouraged"
  },
  {
    "line": 179,
    "text": "    return calendar",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No timeout specified in requests.get, which can lead to hanging connections.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      11845
    ],
    "start_token": 910,
    "end_token": 915,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      26827,
      7368,
      287,
      7007,
      13,
      1136,
      11,
      543,
      460,
      1085,
      284,
      10938,
      8787,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No timeout specified in requests.get, which can lead to hanging connections."
  },
  {
    "line": 195,
    "text": "        The data format required by yahooquery: 600519.ss, 000001.sz",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Fixed sleep time can lead to inefficient waiting; consider exponential backoff.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      1366,
      5794,
      2672,
      416,
      331,
      12992,
      22766,
      25,
      10053,
      47785,
      13,
      824,
      11,
      17643,
      486,
      13,
      82,
      89
    ],
    "start_token": 915,
    "end_token": 941,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      10832,
      3993,
      640,
      460,
      1085,
      284,
      30904,
      4953,
      26,
      2074,
      39682,
      736,
      2364,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Fixed sleep time can lead to inefficient waiting; consider exponential backoff."
  },
  {
    "line": 217,
    "text": "        _symbols = []",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Fixed sleep time can lead to inefficient waiting; consider exponential backoff.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      796,
      17635
    ],
    "start_token": 941,
    "end_token": 954,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      10832,
      3993,
      640,
      460,
      1085,
      284,
      30904,
      4953,
      26,
      2074,
      39682,
      736,
      2364,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Fixed sleep time can lead to inefficient waiting; consider exponential backoff."
  },
  {
    "line": 219,
    "text": "",
    "annotation": "\u2705 Best Practice: Use Path from pathlib for file path operations for better cross-platform compatibility.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 954,
    "end_token": 954,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      10644,
      422,
      3108,
      8019,
      329,
      2393,
      3108,
      4560,
      329,
      1365,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use Path from pathlib for file path operations for better cross-platform compatibility."
  },
  {
    "line": 224,
    "text": "                resp.raise_for_status()",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Untrusted data deserialization with pickle can lead to arbitrary code execution.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1217,
      13,
      40225,
      62,
      1640,
      62,
      13376,
      3419
    ],
    "start_token": 954,
    "end_token": 977,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      26970,
      81,
      8459,
      1366,
      748,
      48499,
      1634,
      351,
      2298,
      293,
      460,
      1085,
      284,
      14977,
      2438,
      9706,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Untrusted data deserialization with pickle can lead to arbitrary code execution."
  },
  {
    "line": 226,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure that the data being serialized with pickle is from a trusted source.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 977,
    "end_token": 977,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      326,
      262,
      1366,
      852,
      11389,
      1143,
      351,
      2298,
      293,
      318,
      422,
      257,
      13467,
      2723,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure that the data being serialized with pickle is from a trusted source."
  },
  {
    "line": 226,
    "text": "",
    "annotation": "\u2705 Best Practice: Add type hinting for function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 977,
    "end_token": 977,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      2099,
      9254,
      278,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Add type hinting for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 233,
    "text": "                current_symbols = [_v[\"f12\"] for _v in data[\"data\"][\"diff\"]]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using global variables can lead to unexpected behavior and make the code harder to debug.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1459,
      62,
      1837,
      2022,
      10220,
      796,
      685,
      62,
      85,
      14692,
      69,
      1065,
      8973,
      329,
      4808,
      85,
      287,
      1366,
      14692,
      7890,
      1,
      7131,
      1,
      26069,
      8973,
      60
    ],
    "start_token": 977,
    "end_token": 1018,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      3298,
      9633,
      460,
      1085,
      284,
      10059,
      4069,
      290,
      787,
      262,
      2438,
      7069,
      284,
      14257,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using global variables can lead to unexpected behavior and make the code harder to debug."
  },
  {
    "line": 233,
    "text": "                current_symbols = [_v[\"f12\"] for _v in data[\"data\"][\"diff\"]]",
    "annotation": "\u2705 Best Practice: Consider making this function name more descriptive to indicate its purpose or the data it retrieves.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1459,
      62,
      1837,
      2022,
      10220,
      796,
      685,
      62,
      85,
      14692,
      69,
      1065,
      8973,
      329,
      4808,
      85,
      287,
      1366,
      14692,
      7890,
      1,
      7131,
      1,
      26069,
      8973,
      60
    ],
    "start_token": 1018,
    "end_token": 1059,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1642,
      428,
      2163,
      1438,
      517,
      35644,
      284,
      7603,
      663,
      4007,
      393,
      262,
      1366,
      340,
      13236,
      1158,
      13
    ],
    "label": "best_practice",
    "reason": "Consider making this function name more descriptive to indicate its purpose or the data it retrieves."
  },
  {
    "line": 235,
    "text": "                if not current_symbols:  # It's the last page if there is no data in current page",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Hardcoded URL can lead to security risks if the endpoint changes or is deprecated.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      1459,
      62,
      1837,
      2022,
      10220,
      25,
      220,
      1303,
      632,
      338,
      262,
      938,
      2443,
      611,
      612,
      318,
      645,
      1366,
      287,
      1459,
      2443
    ],
    "start_token": 1059,
    "end_token": 1097,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6912,
      40976,
      10289,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      262,
      36123,
      2458,
      393,
      318,
      39224,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Hardcoded URL can lead to security risks if the endpoint changes or is deprecated."
  },
  {
    "line": 237,
    "text": "                    break",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No timeout specified in requests.get can lead to hanging if the server does not respond.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2270
    ],
    "start_token": 1097,
    "end_token": 1117,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      26827,
      7368,
      287,
      7007,
      13,
      1136,
      460,
      1085,
      284,
      10938,
      611,
      262,
      4382,
      857,
      407,
      3031,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No timeout specified in requests.get can lead to hanging if the server does not respond."
  },
  {
    "line": 239,
    "text": "                _symbols.extend(current_symbols)",
    "annotation": "\ud83e\udde0 ML Signal: Checking for HTTP status code to handle errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      13,
      2302,
      437,
      7,
      14421,
      62,
      1837,
      2022,
      10220,
      8
    ],
    "start_token": 1117,
    "end_token": 1146,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      14626,
      3722,
      2438,
      284,
      5412,
      8563,
      13
    ],
    "label": "ml_signal",
    "reason": "Checking for HTTP status code to handle errors."
  },
  {
    "line": 243,
    "text": "                    f\"Page {page}: fetch {len(current_symbols)} stocks:[{current_symbols[0]} ... {current_symbols[-1]}]\"",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension used for transforming data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      9876,
      1391,
      7700,
      38362,
      21207,
      1391,
      11925,
      7,
      14421,
      62,
      1837,
      2022,
      10220,
      38165,
      14420,
      33250,
      90,
      14421,
      62,
      1837,
      2022,
      10220,
      58,
      15,
      48999,
      2644,
      1391,
      14421,
      62,
      1837,
      2022,
      10220,
      58,
      12,
      16,
      48999,
      30866
    ],
    "start_token": 1146,
    "end_token": 1204,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      973,
      329,
      25449,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "List comprehension used for transforming data."
  },
  {
    "line": 245,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide specific errors.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1204,
    "end_token": 1204,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      2176,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide specific errors."
  },
  {
    "line": 249,
    "text": "                time.sleep(0.5)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check on data length to ensure data integrity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      15,
      13,
      20,
      8
    ],
    "start_token": 1204,
    "end_token": 1227,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      319,
      1366,
      4129,
      284,
      4155,
      1366,
      11540,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional check on data length to ensure data integrity."
  },
  {
    "line": 253,
    "text": "                    f\"Request to {base_url} failed with status code {resp.status_code}\"",
    "annotation": "\u2705 Best Practice: Decorator usage indicates retry logic, which is useful for handling transient errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      1,
      18453,
      284,
      1391,
      8692,
      62,
      6371,
      92,
      4054,
      351,
      3722,
      2438,
      1391,
      4363,
      13,
      13376,
      62,
      8189,
      36786
    ],
    "start_token": 1227,
    "end_token": 1266,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4280,
      273,
      1352,
      8748,
      9217,
      1005,
      563,
      9156,
      11,
      543,
      318,
      4465,
      329,
      9041,
      32361,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Decorator usage indicates retry logic, which is useful for handling transient errors."
  },
  {
    "line": 251,
    "text": "            except requests.exceptions.HTTPError as e:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using FTP protocol can expose data to interception; consider using a secure protocol like HTTPS.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      7007,
      13,
      1069,
      11755,
      13,
      40717,
      12331,
      355,
      304,
      25
    ],
    "start_token": 1266,
    "end_token": 1288,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      45854,
      8435,
      460,
      15651,
      1366,
      284,
      28759,
      26,
      2074,
      1262,
      257,
      5713,
      8435,
      588,
      38288,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using FTP protocol can expose data to interception; consider using a secure protocol like HTTPS."
  },
  {
    "line": 255,
    "text": "            except Exception as e:",
    "annotation": "\u2705 Best Practice: Use of regex=False for str.replace improves performance when regex is not needed.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 1288,
    "end_token": 1304,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      40364,
      28,
      25101,
      329,
      965,
      13,
      33491,
      19575,
      2854,
      618,
      40364,
      318,
      407,
      2622,
      13
    ],
    "label": "best_practice",
    "reason": "Use of regex=False for str.replace improves performance when regex is not needed."
  },
  {
    "line": 263,
    "text": "        _symbols = [",
    "annotation": "\ud83e\udde0 ML Signal: Use of a retry decorator indicates a pattern of handling transient failures.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      796,
      685
    ],
    "start_token": 1304,
    "end_token": 1317,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      1005,
      563,
      11705,
      1352,
      9217,
      257,
      3912,
      286,
      9041,
      32361,
      15536,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a retry decorator indicates a pattern of handling transient failures."
  },
  {
    "line": 272,
    "text": "        symbols = set()",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No timeout specified for the request, which can lead to hanging connections.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14354,
      796,
      900,
      3419
    ],
    "start_token": 1317,
    "end_token": 1328,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      26827,
      7368,
      329,
      262,
      2581,
      11,
      543,
      460,
      1085,
      284,
      10938,
      8787,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No timeout specified for the request, which can lead to hanging connections."
  },
  {
    "line": 274,
    "text": "        # It may take multiple times to get the complete",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No specific exception handling for HTTP errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      632,
      743,
      1011,
      3294,
      1661,
      284,
      651,
      262,
      1844
    ],
    "start_token": 1328,
    "end_token": 1345,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      2176,
      6631,
      9041,
      329,
      14626,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No specific exception handling for HTTP errors."
  },
  {
    "line": 278,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if \"symbolTicker\" is not in the response JSON.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1345,
    "end_token": 1345,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      366,
      1837,
      23650,
      51,
      15799,
      1,
      318,
      407,
      287,
      262,
      2882,
      19449,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if \"symbolTicker\" is not in the response JSON."
  },
  {
    "line": 281,
    "text": "        if symbol_cache_path.exists():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide specific errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      6194,
      62,
      23870,
      62,
      6978,
      13,
      1069,
      1023,
      33529
    ],
    "start_token": 1345,
    "end_token": 1362,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      2176,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide specific errors."
  },
  {
    "line": 285,
    "text": "        with symbol_cache_path.open(\"wb\") as fp:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the state of _US_SYMBOLS.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      351,
      6194,
      62,
      23870,
      62,
      6978,
      13,
      9654,
      7203,
      39346,
      4943,
      355,
      277,
      79,
      25
    ],
    "start_token": 1362,
    "end_token": 1384,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      1181,
      286,
      4808,
      2937,
      62,
      23060,
      10744,
      3535,
      50,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the state of _US_SYMBOLS."
  },
  {
    "line": 285,
    "text": "        with symbol_cache_path.open(\"wb\") as fp:",
    "annotation": "\ud83e\udde0 ML Signal: Aggregating data from multiple sources.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      351,
      6194,
      62,
      23870,
      62,
      6978,
      13,
      9654,
      7203,
      39346,
      4943,
      355,
      277,
      79,
      25
    ],
    "start_token": 1384,
    "end_token": 1406,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      19015,
      2301,
      803,
      1366,
      422,
      3294,
      4237,
      13
    ],
    "label": "ml_signal",
    "reason": "Aggregating data from multiple sources."
  },
  {
    "line": 291,
    "text": "",
    "annotation": "\u2705 Best Practice: Use Pathlib for file path operations for better readability and cross-platform compatibility.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1406,
    "end_token": 1406,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      10644,
      8019,
      329,
      2393,
      3108,
      4560,
      329,
      1365,
      1100,
      1799,
      290,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use Pathlib for file path operations for better readability and cross-platform compatibility."
  },
  {
    "line": 297,
    "text": "    -------",
    "annotation": "\ud83e\udde0 ML Signal: Extracting unique symbols from a DataFrame.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      35656
    ],
    "start_token": 1406,
    "end_token": 1410,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29677,
      278,
      3748,
      14354,
      422,
      257,
      6060,
      19778,
      13
    ],
    "label": "ml_signal",
    "reason": "Extracting unique symbols from a DataFrame."
  },
  {
    "line": 292,
    "text": "",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1410,
    "end_token": 1410,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 294,
    "text": "    \"\"\"get US stock symbols",
    "annotation": "\u2705 Best Practice: Chain string operations to reduce the number of lines",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227,
      1136,
      1294,
      4283,
      14354
    ],
    "start_token": 1410,
    "end_token": 1418,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21853,
      4731,
      4560,
      284,
      4646,
      262,
      1271,
      286,
      3951
    ],
    "label": "best_practice",
    "reason": "Chain string operations to reduce the number of lines"
  },
  {
    "line": 298,
    "text": "        stock symbols",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda and filter functions indicates functional programming patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      14354
    ],
    "start_token": 1418,
    "end_token": 1427,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      290,
      8106,
      5499,
      9217,
      10345,
      8300,
      7572
    ],
    "label": "ml_signal",
    "reason": "Use of lambda and filter functions indicates functional programming patterns"
  },
  {
    "line": 299,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of map function indicates data transformation pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 1427,
    "end_token": 1431,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3975,
      2163,
      9217,
      1366,
      13389,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of map function indicates data transformation pattern"
  },
  {
    "line": 299,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use list comprehensions for better readability and performance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 1431,
    "end_token": 1435,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1351,
      8569,
      507,
      329,
      1365,
      1100,
      1799,
      290,
      2854
    ],
    "label": "best_practice",
    "reason": "Use list comprehensions for better readability and performance"
  },
  {
    "line": 304,
    "text": "        url = \"http://4.push2.eastmoney.com/api/qt/clist/get?pn=1&pz=10000&fs=m:105,m:106,m:107&fields=f12\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential exposure of internal symbols if _all_symbols contains sensitive data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19016,
      796,
      366,
      4023,
      1378,
      19,
      13,
      14689,
      17,
      13,
      23316,
      26316,
      13,
      785,
      14,
      15042,
      14,
      39568,
      14,
      565,
      396,
      14,
      1136,
      30,
      21999,
      28,
      16,
      5,
      79,
      89,
      28,
      49388,
      5,
      9501,
      28,
      76,
      25,
      13348,
      11,
      76,
      25,
      15801,
      11,
      76,
      25,
      15982,
      5,
      25747,
      28,
      69,
      1065,
      1
    ],
    "start_token": 1435,
    "end_token": 1494,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7111,
      286,
      5387,
      14354,
      611,
      4808,
      439,
      62,
      1837,
      2022,
      10220,
      4909,
      8564,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential exposure of internal symbols if _all_symbols contains sensitive data"
  },
  {
    "line": 299,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Include type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 1494,
    "end_token": 1498,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Include type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 306,
    "text": "        if resp.status_code != 200:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using global variables can lead to unexpected behavior and is generally discouraged.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1217,
      13,
      13376,
      62,
      8189,
      14512,
      939,
      25
    ],
    "start_token": 1498,
    "end_token": 1514,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      3298,
      9633,
      460,
      1085,
      284,
      10059,
      4069,
      290,
      318,
      4143,
      30170,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using global variables can lead to unexpected behavior and is generally discouraged."
  },
  {
    "line": 308,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorators can indicate patterns for retry logic or error handling.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1514,
    "end_token": 1514,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      2024,
      460,
      7603,
      7572,
      329,
      1005,
      563,
      9156,
      393,
      4049,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of decorators can indicate patterns for retry logic or error handling."
  },
  {
    "line": 307,
    "text": "            raise ValueError(\"request error\")",
    "annotation": "\ud83e\udde0 ML Signal: Fetching data from a specific URL, indicating a pattern of data retrieval from web sources",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      11052,
      12331,
      7203,
      25927,
      4049,
      4943
    ],
    "start_token": 1514,
    "end_token": 1532,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      1366,
      422,
      257,
      2176,
      10289,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      45069,
      422,
      3992,
      4237
    ],
    "label": "ml_signal",
    "reason": "Fetching data from a specific URL, indicating a pattern of data retrieval from web sources"
  },
  {
    "line": 308,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded URL can lead to maintenance issues if the URL changes",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1532,
    "end_token": 1532,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      10289,
      460,
      1085,
      284,
      9262,
      2428,
      611,
      262,
      10289,
      2458
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded URL can lead to maintenance issues if the URL changes"
  },
  {
    "line": 310,
    "text": "            _symbols = [_v[\"f12\"].replace(\"_\", \"-P\") for _v in resp.json()[\"data\"][\"diff\"].values()]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No error handling for network issues or invalid CSV format",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      796,
      685,
      62,
      85,
      14692,
      69,
      1065,
      1,
      4083,
      33491,
      7203,
      62,
      1600,
      27444,
      47,
      4943,
      329,
      4808,
      85,
      287,
      1217,
      13,
      17752,
      3419,
      14692,
      7890,
      1,
      7131,
      1,
      26069,
      1,
      4083,
      27160,
      3419,
      60
    ],
    "start_token": 1532,
    "end_token": 1582,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      4049,
      9041,
      329,
      3127,
      2428,
      393,
      12515,
      44189,
      5794
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No error handling for network issues or invalid CSV format"
  },
  {
    "line": 312,
    "text": "            logger.warning(f\"request error: {e}\")",
    "annotation": "\u2705 Best Practice: Renaming columns for clarity and consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      43917,
      7,
      69,
      1,
      25927,
      4049,
      25,
      1391,
      68,
      92,
      4943
    ],
    "start_token": 1582,
    "end_token": 1606,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      3723,
      15180,
      329,
      16287,
      290,
      15794
    ],
    "label": "best_practice",
    "reason": "Renaming columns for clarity and consistency"
  },
  {
    "line": 314,
    "text": "",
    "annotation": "\u2705 Best Practice: Appending \".NS\" to symbols for standardization",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1606,
    "end_token": 1606,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      1571,
      27071,
      8035,
      1,
      284,
      14354,
      329,
      3210,
      1634
    ],
    "label": "best_practice",
    "reason": "Appending \".NS\" to symbols for standardization"
  },
  {
    "line": 316,
    "text": "            raise ValueError(\"request error\")",
    "annotation": "\u2705 Best Practice: Dropping NaN values to ensure data integrity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      11052,
      12331,
      7203,
      25927,
      4049,
      4943
    ],
    "start_token": 1606,
    "end_token": 1624,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      11013,
      45,
      3815,
      284,
      4155,
      1366,
      11540
    ],
    "label": "best_practice",
    "reason": "Dropping NaN values to ensure data integrity"
  },
  {
    "line": 318,
    "text": "        return _symbols",
    "annotation": "\u2705 Best Practice: Using unique to remove duplicates and converting to list for easy manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      4808,
      1837,
      2022,
      10220
    ],
    "start_token": 1624,
    "end_token": 1636,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      3748,
      284,
      4781,
      14184,
      16856,
      290,
      23202,
      284,
      1351,
      329,
      2562,
      17512
    ],
    "label": "best_practice",
    "reason": "Using unique to remove duplicates and converting to list for easy manipulation"
  },
  {
    "line": 323,
    "text": "        for _name in [\"otherlisted\", \"nasdaqtraded\"]:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue if _IN_SYMBOLS is not defined elsewhere in the code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4808,
      3672,
      287,
      14631,
      847,
      17935,
      1600,
      366,
      24716,
      48539,
      2213,
      5286,
      1,
      5974
    ],
    "start_token": 1636,
    "end_token": 1658,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      611,
      4808,
      1268,
      62,
      23060,
      10744,
      3535,
      50,
      318,
      407,
      5447,
      8057,
      287,
      262,
      2438
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue if _IN_SYMBOLS is not defined elsewhere in the code"
  },
  {
    "line": 323,
    "text": "        for _name in [\"otherlisted\", \"nasdaqtraded\"]:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional data fetching based on a variable's state",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4808,
      3672,
      287,
      14631,
      847,
      17935,
      1600,
      366,
      24716,
      48539,
      2213,
      5286,
      1,
      5974
    ],
    "start_token": 1658,
    "end_token": 1680,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      1366,
      21207,
      278,
      1912,
      319,
      257,
      7885,
      338,
      1181
    ],
    "label": "ml_signal",
    "reason": "Conditional data fetching based on a variable's state"
  },
  {
    "line": 325,
    "text": "            df = pd.read_csv(url, sep=\"|\")",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the presence of a configuration path",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      961,
      62,
      40664,
      7,
      6371,
      11,
      41767,
      2625,
      91,
      4943
    ],
    "start_token": 1680,
    "end_token": 1706,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      4931,
      286,
      257,
      8398,
      3108
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the presence of a configuration path"
  },
  {
    "line": 327,
    "text": "            _symbols = df[\"Symbol\"].dropna()",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a predefined list of indices",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      796,
      47764,
      14692,
      13940,
      23650,
      1,
      4083,
      14781,
      2616,
      3419
    ],
    "start_token": 1706,
    "end_token": 1731,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      2747,
      18156,
      1351,
      286,
      36525
    ],
    "label": "ml_signal",
    "reason": "Iterating over a predefined list of indices"
  },
  {
    "line": 329,
    "text": "            _symbols = _symbols.str.replace(\".W\", \"-WT\", regex=False)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No error handling for file reading issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      796,
      4808,
      1837,
      2022,
      10220,
      13,
      2536,
      13,
      33491,
      7,
      1911,
      54,
      1600,
      27444,
      39386,
      1600,
      40364,
      28,
      25101,
      8
    ],
    "start_token": 1731,
    "end_token": 1766,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      4049,
      9041,
      329,
      2393,
      3555,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No error handling for file reading issues"
  },
  {
    "line": 331,
    "text": "            _symbols = _symbols.str.replace(\".R\", \"-RI\", regex=False)",
    "annotation": "\u2705 Best Practice: Using Path for file path operations for better cross-platform compatibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      796,
      4808,
      1837,
      2022,
      10220,
      13,
      2536,
      13,
      33491,
      7,
      1911,
      49,
      1600,
      27444,
      7112,
      1600,
      40364,
      28,
      25101,
      8
    ],
    "start_token": 1766,
    "end_token": 1801,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      10644,
      329,
      2393,
      3108,
      4560,
      329,
      1365,
      3272,
      12,
      24254,
      17764
    ],
    "label": "best_practice",
    "reason": "Using Path for file path operations for better cross-platform compatibility"
  },
  {
    "line": 332,
    "text": "            _symbols = _symbols.str.replace(\".\", \"-\", regex=False)",
    "annotation": "\u2705 Best Practice: Explicitly naming columns for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      796,
      4808,
      1837,
      2022,
      10220,
      13,
      2536,
      13,
      33491,
      7203,
      33283,
      27444,
      1600,
      40364,
      28,
      25101,
      8
    ],
    "start_token": 1801,
    "end_token": 1833,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      19264,
      15180,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicitly naming columns for clarity"
  },
  {
    "line": 337,
    "text": "    def _get_nyse():",
    "annotation": "\u2705 Best Practice: Using unique to remove duplicates before extending the list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      1136,
      62,
      3281,
      325,
      33529
    ],
    "start_token": 1833,
    "end_token": 1843,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      3748,
      284,
      4781,
      14184,
      16856,
      878,
      16610,
      262,
      1351
    ],
    "label": "best_practice",
    "reason": "Using unique to remove duplicates before extending the list"
  },
  {
    "line": 325,
    "text": "            df = pd.read_csv(url, sep=\"|\")",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      961,
      62,
      40664,
      7,
      6371,
      11,
      41767,
      2625,
      91,
      4943
    ],
    "start_token": 1843,
    "end_token": 1869,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 327,
    "text": "            _symbols = df[\"Symbol\"].dropna()",
    "annotation": "\u2705 Best Practice: Chain string operations to reduce the number of lines",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      796,
      47764,
      14692,
      13940,
      23650,
      1,
      4083,
      14781,
      2616,
      3419
    ],
    "start_token": 1869,
    "end_token": 1894,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21853,
      4731,
      4560,
      284,
      4646,
      262,
      1271,
      286,
      3951
    ],
    "label": "best_practice",
    "reason": "Chain string operations to reduce the number of lines"
  },
  {
    "line": 331,
    "text": "            _symbols = _symbols.str.replace(\".R\", \"-RI\", regex=False)",
    "annotation": "\ud83e\udde0 ML Signal: Use of sorted and set to remove duplicates and sort a collection",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      796,
      4808,
      1837,
      2022,
      10220,
      13,
      2536,
      13,
      33491,
      7,
      1911,
      49,
      1600,
      27444,
      7112,
      1600,
      40364,
      28,
      25101,
      8
    ],
    "start_token": 1894,
    "end_token": 1929,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      23243,
      290,
      900,
      284,
      4781,
      14184,
      16856,
      290,
      3297,
      257,
      4947
    ],
    "label": "ml_signal",
    "reason": "Use of sorted and set to remove duplicates and sort a collection"
  },
  {
    "line": 332,
    "text": "            _symbols = _symbols.str.replace(\".\", \"-\", regex=False)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Returning a global variable might expose internal state",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      796,
      4808,
      1837,
      2022,
      10220,
      13,
      2536,
      13,
      33491,
      7203,
      33283,
      27444,
      1600,
      40364,
      28,
      25101,
      8
    ],
    "start_token": 1929,
    "end_token": 1961,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42882,
      257,
      3298,
      7885,
      1244,
      15651,
      5387,
      1181
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Returning a global variable might expose internal state"
  },
  {
    "line": 332,
    "text": "            _symbols = _symbols.str.replace(\".\", \"-\", regex=False)",
    "annotation": "\u2705 Best Practice: Provide a clear and concise docstring for the function.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      796,
      4808,
      1837,
      2022,
      10220,
      13,
      2536,
      13,
      33491,
      7203,
      33283,
      27444,
      1600,
      40364,
      28,
      25101,
      8
    ],
    "start_token": 1961,
    "end_token": 1993,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44290,
      257,
      1598,
      290,
      35327,
      2205,
      8841,
      329,
      262,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Provide a clear and concise docstring for the function."
  },
  {
    "line": 339,
    "text": "        _parms = {",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using global variables can lead to unexpected behavior and is generally discouraged.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1845,
      907,
      796,
      1391
    ],
    "start_token": 1993,
    "end_token": 2005,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      3298,
      9633,
      460,
      1085,
      284,
      10059,
      4069,
      290,
      318,
      4143,
      30170,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using global variables can lead to unexpected behavior and is generally discouraged."
  },
  {
    "line": 341,
    "text": "            \"pageNumber\": 1,",
    "annotation": "\ud83e\udde0 ML Signal: Use of decorators can indicate patterns for retry logic or error handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      7700,
      15057,
      1298,
      352,
      11
    ],
    "start_token": 2005,
    "end_token": 2022,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      11705,
      2024,
      460,
      7603,
      7572,
      329,
      1005,
      563,
      9156,
      393,
      4049,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of decorators can indicate patterns for retry logic or error handling."
  },
  {
    "line": 343,
    "text": "            \"sortOrder\": \"ASC\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No timeout specified for the request, which can lead to hanging connections.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      30619,
      18743,
      1298,
      366,
      42643,
      1600
    ],
    "start_token": 2022,
    "end_token": 2040,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      26827,
      7368,
      329,
      262,
      2581,
      11,
      543,
      460,
      1085,
      284,
      10938,
      8787,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No timeout specified for the request, which can lead to hanging connections."
  },
  {
    "line": 345,
    "text": "            \"filterToken\": \"\",",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No error handling for the HTTP request, which can lead to unhandled exceptions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      366,
      24455,
      30642,
      1298,
      366,
      1600
    ],
    "start_token": 2040,
    "end_token": 2057,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      4049,
      9041,
      329,
      262,
      14626,
      2581,
      11,
      543,
      460,
      1085,
      284,
      555,
      38788,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No error handling for the HTTP request, which can lead to unhandled exceptions."
  },
  {
    "line": 348,
    "text": "        if resp.status_code != 200:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No check if tbody is None, which can lead to AttributeError if the structure is not as expected.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      1217,
      13,
      13376,
      62,
      8189,
      14512,
      939,
      25
    ],
    "start_token": 2057,
    "end_token": 2073,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      2198,
      611,
      256,
      2618,
      318,
      6045,
      11,
      543,
      460,
      1085,
      284,
      3460,
      4163,
      12331,
      611,
      262,
      4645,
      318,
      407,
      355,
      2938,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No check if tbody is None, which can lead to AttributeError if the structure is not as expected."
  },
  {
    "line": 351,
    "text": "        try:",
    "annotation": "\u2705 Best Practice: Consider using BeautifulSoup's text extraction methods for better readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 2073,
    "end_token": 2082,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      23762,
      50,
      10486,
      338,
      2420,
      22236,
      5050,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using BeautifulSoup's text extraction methods for better readability."
  },
  {
    "line": 354,
    "text": "            logger.warning(f\"request error: {e}\")",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the state of _BR_SYMBOLS.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      43917,
      7,
      69,
      1,
      25927,
      4049,
      25,
      1391,
      68,
      92,
      4943
    ],
    "start_token": 2082,
    "end_token": 2106,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      1181,
      286,
      4808,
      11473,
      62,
      23060,
      10744,
      3535,
      50,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the state of _BR_SYMBOLS."
  },
  {
    "line": 359,
    "text": "        _all_symbols = _get_eastmoney() + _get_nasdaq() + _get_nyse()",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the state of qlib_data_path.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      439,
      62,
      1837,
      2022,
      10220,
      796,
      4808,
      1136,
      62,
      23316,
      26316,
      3419,
      1343,
      4808,
      1136,
      62,
      24716,
      48539,
      3419,
      1343,
      4808,
      1136,
      62,
      3281,
      325,
      3419
    ],
    "start_token": 2106,
    "end_token": 2140,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      1181,
      286,
      10662,
      8019,
      62,
      7890,
      62,
      6978,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the state of qlib_data_path."
  },
  {
    "line": 360,
    "text": "        if qlib_data_path is not None:",
    "annotation": "\u2705 Best Practice: Use Pathlib for file path operations for better cross-platform compatibility.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      10662,
      8019,
      62,
      7890,
      62,
      6978,
      318,
      407,
      6045,
      25
    ],
    "start_token": 2140,
    "end_token": 2158,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      10644,
      8019,
      329,
      2393,
      3108,
      4560,
      329,
      1365,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use Pathlib for file path operations for better cross-platform compatibility."
  },
  {
    "line": 366,
    "text": "                )",
    "annotation": "\ud83e\udde0 ML Signal: Appending unique symbols from a DataFrame to a list.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 2158,
    "end_token": 2174,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      3748,
      14354,
      422,
      257,
      6060,
      19778,
      284,
      257,
      1351,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending unique symbols from a DataFrame to a list."
  },
  {
    "line": 361,
    "text": "            for _index in [\"nasdaq100\", \"sp500\"]:",
    "annotation": "\u2705 Best Practice: Strip whitespace before other characters for consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4808,
      9630,
      287,
      14631,
      24716,
      48539,
      3064,
      1600,
      366,
      2777,
      4059,
      1,
      5974
    ],
    "start_token": 2174,
    "end_token": 2199,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18508,
      13216,
      10223,
      878,
      584,
      3435,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Strip whitespace before other characters for consistency"
  },
  {
    "line": 363,
    "text": "                    Path(qlib_data_path).joinpath(f\"instruments/{_index}.txt\"),",
    "annotation": "\u2705 Best Practice: Chaining strip operations for multiple characters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10644,
      7,
      80,
      8019,
      62,
      7890,
      62,
      6978,
      737,
      22179,
      6978,
      7,
      69,
      1,
      259,
      2536,
      2886,
      14,
      90,
      62,
      9630,
      27422,
      14116,
      12340
    ],
    "start_token": 2199,
    "end_token": 2242,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      609,
      1397,
      10283,
      4560,
      329,
      3294,
      3435
    ],
    "label": "best_practice",
    "reason": "Chaining strip operations for multiple characters"
  },
  {
    "line": 366,
    "text": "                )",
    "annotation": "\u2705 Best Practice: Consistent string concatenation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 2242,
    "end_token": 2258,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3515,
      7609,
      4731,
      1673,
      36686,
      341
    ],
    "label": "best_practice",
    "reason": "Consistent string concatenation"
  },
  {
    "line": 369,
    "text": "        def _format(s_):",
    "annotation": "\ud83e\udde0 ML Signal: Use of map and set to process and deduplicate a list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      825,
      4808,
      18982,
      7,
      82,
      62,
      2599
    ],
    "start_token": 2258,
    "end_token": 2272,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3975,
      290,
      900,
      284,
      1429,
      290,
      4648,
      84,
      489,
      5344,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Use of map and set to process and deduplicate a list"
  },
  {
    "line": 369,
    "text": "        def _format(s_):",
    "annotation": "\u2705 Best Practice: Use of sorted to maintain order after deduplication",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      825,
      4808,
      18982,
      7,
      82,
      62,
      2599
    ],
    "start_token": 2272,
    "end_token": 2286,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      23243,
      284,
      5529,
      1502,
      706,
      4648,
      84,
      489,
      3299
    ],
    "label": "best_practice",
    "reason": "Use of sorted to maintain order after deduplication"
  },
  {
    "line": 368,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the return type of the function",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2286,
    "end_token": 2286,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      1441,
      2099,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the return type of the function"
  },
  {
    "line": 374,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of global variables can indicate shared state or configuration",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2286,
    "end_token": 2286,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3298,
      9633,
      460,
      7603,
      4888,
      1181,
      393,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of global variables can indicate shared state or configuration"
  },
  {
    "line": 377,
    "text": "    return _US_SYMBOLS",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of decorators can introduce unexpected behavior if not properly managed",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      4808,
      2937,
      62,
      23060,
      10744,
      3535,
      50
    ],
    "start_token": 2286,
    "end_token": 2297,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      11705,
      2024,
      460,
      10400,
      10059,
      4069,
      611,
      407,
      6105,
      5257
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of decorators can introduce unexpected behavior if not properly managed"
  },
  {
    "line": 378,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No timeout specified for the request, which can lead to hanging connections",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2297,
    "end_token": 2297,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      26827,
      7368,
      329,
      262,
      2581,
      11,
      543,
      460,
      1085,
      284,
      10938,
      8787
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No timeout specified for the request, which can lead to hanging connections"
  },
  {
    "line": 380,
    "text": "def get_in_stock_symbols(qlib_data_path: [str, Path] = None) -> list:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No specific exception handling for network-related errors",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      259,
      62,
      13578,
      62,
      1837,
      2022,
      10220,
      7,
      80,
      8019,
      62,
      7890,
      62,
      6978,
      25,
      685,
      2536,
      11,
      10644,
      60,
      796,
      6045,
      8,
      4613,
      1351,
      25
    ],
    "start_token": 2297,
    "end_token": 2326,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      2176,
      6631,
      9041,
      329,
      3127,
      12,
      5363,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No specific exception handling for network-related errors"
  },
  {
    "line": 385,
    "text": "        stock symbols",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of regular expressions without validation can lead to ReDoS",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4283,
      14354
    ],
    "start_token": 2326,
    "end_token": 2335,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      3218,
      14700,
      1231,
      21201,
      460,
      1085,
      284,
      797,
      46498
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of regular expressions without validation can lead to ReDoS"
  },
  {
    "line": 390,
    "text": "    def _get_nifty():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide specific errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      1136,
      62,
      77,
      24905,
      33529
    ],
    "start_token": 2335,
    "end_token": 2345,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      2176,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide specific errors"
  },
  {
    "line": 396,
    "text": "        _symbols = _symbols.unique().tolist()",
    "annotation": "\ud83e\udde0 ML Signal: Checks if a global variable is None before initializing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      796,
      4808,
      1837,
      2022,
      10220,
      13,
      34642,
      22446,
      83,
      349,
      396,
      3419
    ],
    "start_token": 2345,
    "end_token": 2368,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      47719,
      611,
      257,
      3298,
      7885,
      318,
      6045,
      878,
      4238,
      2890
    ],
    "label": "ml_signal",
    "reason": "Checks if a global variable is None before initializing"
  },
  {
    "line": 397,
    "text": "        return _symbols",
    "annotation": "\u2705 Best Practice: Use of set to remove duplicates before sorting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      4808,
      1837,
      2022,
      10220
    ],
    "start_token": 2368,
    "end_token": 2380,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      900,
      284,
      4781,
      14184,
      16856,
      878,
      29407
    ],
    "label": "best_practice",
    "reason": "Use of set to remove duplicates before sorting"
  },
  {
    "line": 407,
    "text": "                )",
    "annotation": "\u2705 Best Practice: Consider adding error handling for the split operation in case the input format is incorrect.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 2380,
    "end_token": 2396,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      4049,
      9041,
      329,
      262,
      6626,
      4905,
      287,
      1339,
      262,
      5128,
      5794,
      318,
      11491,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding error handling for the split operation in case the input format is incorrect."
  },
  {
    "line": 409,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of specific exchange codes can indicate financial domain-specific processing.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2396,
    "end_token": 2396,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2176,
      5163,
      12416,
      460,
      7603,
      3176,
      7386,
      12,
      11423,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of specific exchange codes can indicate financial domain-specific processing."
  },
  {
    "line": 411,
    "text": "            s_ = s_.replace(\".\", \"-\")",
    "annotation": "\u2705 Best Practice: Use of f-strings for string formatting is a modern and readable approach.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      62,
      796,
      264,
      44807,
      33491,
      7203,
      33283,
      27444,
      4943
    ],
    "start_token": 2396,
    "end_token": 2417,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      37336,
      329,
      4731,
      33313,
      318,
      257,
      3660,
      290,
      31744,
      3164,
      13
    ],
    "label": "best_practice",
    "reason": "Use of f-strings for string formatting is a modern and readable approach."
  },
  {
    "line": 414,
    "text": "            return s_",
    "annotation": "\u2705 Best Practice: Use of f-strings for string formatting is a modern and readable approach.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      264,
      62
    ],
    "start_token": 2417,
    "end_token": 2431,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      277,
      12,
      37336,
      329,
      4731,
      33313,
      318,
      257,
      3660,
      290,
      31744,
      3164,
      13
    ],
    "label": "best_practice",
    "reason": "Use of f-strings for string formatting is a modern and readable approach."
  },
  {
    "line": 414,
    "text": "            return s_",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the 'capital' flag can indicate user preference for output format.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      264,
      62
    ],
    "start_token": 2431,
    "end_token": 2445,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      705,
      27544,
      6,
      6056,
      460,
      7603,
      2836,
      12741,
      329,
      5072,
      5794,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the 'capital' flag can indicate user preference for output format."
  },
  {
    "line": 414,
    "text": "            return s_",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the function and its parameters.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      264,
      62
    ],
    "start_token": 2445,
    "end_token": 2459,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2163,
      290,
      663,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the function and its parameters."
  },
  {
    "line": 425,
    "text": "    -------",
    "annotation": "\u2705 Best Practice: Using f-string for string formatting is efficient and readable.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      35656
    ],
    "start_token": 2459,
    "end_token": 2463,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      277,
      12,
      8841,
      329,
      4731,
      33313,
      318,
      6942,
      290,
      31744,
      13
    ],
    "label": "best_practice",
    "reason": "Using f-string for string formatting is efficient and readable."
  },
  {
    "line": 427,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on a boolean parameter.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 2463,
    "end_token": 2467,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      257,
      25131,
      11507,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on a boolean parameter."
  },
  {
    "line": 427,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of default parameter values for flexibility and ease of use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 2467,
    "end_token": 2471,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      329,
      13688,
      290,
      10152,
      286,
      779
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values for flexibility and ease of use"
  },
  {
    "line": 427,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of functools.wraps to preserve metadata of the original function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 2471,
    "end_token": 2475,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1257,
      310,
      10141,
      13,
      29988,
      862,
      284,
      12201,
      20150,
      286,
      262,
      2656,
      2163
    ],
    "label": "best_practice",
    "reason": "Use of functools.wraps to preserve metadata of the original function"
  },
  {
    "line": 430,
    "text": "    @deco_retry",
    "annotation": "\ud83e\udde0 ML Signal: Use of retry logic pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      12501,
      78,
      62,
      1186,
      563
    ],
    "start_token": 2475,
    "end_token": 2484,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1005,
      563,
      9156,
      3912
    ],
    "label": "ml_signal",
    "reason": "Use of retry logic pattern"
  },
  {
    "line": 435,
    "text": "        # Request",
    "annotation": "\ud83e\udde0 ML Signal: Function call with dynamic arguments",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      19390
    ],
    "start_token": 2484,
    "end_token": 2493,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      351,
      8925,
      7159
    ],
    "label": "ml_signal",
    "reason": "Function call with dynamic arguments"
  },
  {
    "line": 439,
    "text": "        # BeautifulSoup",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad Exception",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      23762,
      50,
      10486
    ],
    "start_token": 2493,
    "end_token": 2504,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      35528
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad Exception"
  },
  {
    "line": 440,
    "text": "        soup = BeautifulSoup(page.content, \"html.parser\")",
    "annotation": "\ud83e\udde0 ML Signal: Logging pattern for exception handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      17141,
      796,
      23762,
      50,
      10486,
      7,
      7700,
      13,
      11299,
      11,
      366,
      6494,
      13,
      48610,
      4943
    ],
    "start_token": 2504,
    "end_token": 2526,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      3912,
      329,
      6631,
      9041
    ],
    "label": "ml_signal",
    "reason": "Logging pattern for exception handling"
  },
  {
    "line": 443,
    "text": "        children = tbody.findChildren(\"a\", recursive=True)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Re-raising the caught exception",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1751,
      796,
      256,
      2618,
      13,
      19796,
      26829,
      7203,
      64,
      1600,
      45115,
      28,
      17821,
      8
    ],
    "start_token": 2526,
    "end_token": 2547,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      797,
      12,
      32741,
      262,
      4978,
      6631
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Re-raising the caught exception"
  },
  {
    "line": 445,
    "text": "            _symbols.append(str(child).rsplit('\"', maxsplit=1)[-1].split(\">\")[1].split(\"<\")[0])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of time.sleep can lead to blocking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      13,
      33295,
      7,
      2536,
      7,
      9410,
      737,
      3808,
      489,
      270,
      10786,
      1,
      3256,
      3509,
      35312,
      28,
      16,
      38381,
      12,
      16,
      4083,
      35312,
      7,
      5320,
      4943,
      58,
      16,
      4083,
      35312,
      7203,
      27,
      4943,
      58,
      15,
      12962
    ],
    "start_token": 2547,
    "end_token": 2597,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      640,
      13,
      42832,
      460,
      1085,
      284,
      12013
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of time.sleep can lead to blocking"
  },
  {
    "line": 445,
    "text": "            _symbols.append(str(child).rsplit('\"', maxsplit=1)[-1].split(\">\")[1].split(\"<\")[0])",
    "annotation": "\u2705 Best Practice: Use of conditional expression for function return",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      1837,
      2022,
      10220,
      13,
      33295,
      7,
      2536,
      7,
      9410,
      737,
      3808,
      489,
      270,
      10786,
      1,
      3256,
      3509,
      35312,
      28,
      16,
      38381,
      12,
      16,
      4083,
      35312,
      7,
      5320,
      4943,
      58,
      16,
      4083,
      35312,
      7203,
      27,
      4943,
      58,
      15,
      12962
    ],
    "start_token": 2597,
    "end_token": 2647,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      26340,
      5408,
      329,
      2163,
      1441
    ],
    "label": "best_practice",
    "reason": "Use of conditional expression for function return"
  },
  {
    "line": 444,
    "text": "        for child in children:",
    "annotation": "\u2705 Best Practice: Add type hint for the return value in the function signature",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1200,
      287,
      1751,
      25
    ],
    "start_token": 2647,
    "end_token": 2659,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      2099,
      9254,
      329,
      262,
      1441,
      1988,
      287,
      262,
      2163,
      9877
    ],
    "label": "best_practice",
    "reason": "Add type hint for the return value in the function signature"
  },
  {
    "line": 458,
    "text": "                _all_symbols += ins_df[\"symbol\"].unique().tolist()",
    "annotation": "\u2705 Best Practice: Ensure trading_date is a pd.Timestamp for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      439,
      62,
      1837,
      2022,
      10220,
      15853,
      1035,
      62,
      7568,
      14692,
      1837,
      23650,
      1,
      4083,
      34642,
      22446,
      83,
      349,
      396,
      3419
    ],
    "start_token": 2659,
    "end_token": 2695,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      7313,
      62,
      4475,
      318,
      257,
      279,
      67,
      13,
      14967,
      27823,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Ensure trading_date is a pd.Timestamp for consistency"
  },
  {
    "line": 460,
    "text": "        def _format(s_):",
    "annotation": "\u2705 Best Practice: Use bisect module for efficient searching in sorted lists",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      825,
      4808,
      18982,
      7,
      82,
      62,
      2599
    ],
    "start_token": 2695,
    "end_token": 2709,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      47457,
      478,
      8265,
      329,
      6942,
      10342,
      287,
      23243,
      8341
    ],
    "label": "best_practice",
    "reason": "Use bisect module for efficient searching in sorted lists"
  },
  {
    "line": 463,
    "text": "            s_ = s_.strip(\"*\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError if left_index + shift is out of bounds",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      62,
      796,
      264,
      44807,
      36311,
      7203,
      9,
      4943
    ],
    "start_token": 2709,
    "end_token": 2729,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      611,
      1364,
      62,
      9630,
      1343,
      6482,
      318,
      503,
      286,
      22303
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError if left_index + shift is out of bounds"
  },
  {
    "line": 464,
    "text": "            s_ = s_ + \".SA\"",
    "annotation": "\u2705 Best Practice: Handle IndexError to prevent application crash",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      62,
      796,
      264,
      62,
      1343,
      27071,
      4090,
      1
    ],
    "start_token": 2729,
    "end_token": 2749,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      33141,
      12901,
      12331,
      284,
      2948,
      3586,
      7014
    ],
    "label": "best_practice",
    "reason": "Handle IndexError to prevent application crash"
  },
  {
    "line": 464,
    "text": "            s_ = s_ + \".SA\"",
    "annotation": "\u2705 Best Practice: Consider importing only necessary functions from modules to improve readability and performance.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      62,
      796,
      264,
      62,
      1343,
      27071,
      4090,
      1
    ],
    "start_token": 2749,
    "end_token": 2769,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      33332,
      691,
      3306,
      5499,
      422,
      13103,
      284,
      2987,
      1100,
      1799,
      290,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Consider importing only necessary functions from modules to improve readability and performance."
  },
  {
    "line": 486,
    "text": "            raise ValueError(\"request error\")",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of dates to generate time ranges is a common pattern in time series data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      11052,
      12331,
      7203,
      25927,
      4049,
      4943
    ],
    "start_token": 2769,
    "end_token": 2787,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      9667,
      284,
      7716,
      640,
      16069,
      318,
      257,
      2219,
      3912,
      287,
      640,
      2168,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of dates to generate time ranges is a common pattern in time series data processing."
  },
  {
    "line": 494,
    "text": "            logger.warning(f\"request error: {e}\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using np.hstack without checking the contents of 'res' could lead to unexpected behavior if 'res' is empty.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      43917,
      7,
      69,
      1,
      25927,
      4049,
      25,
      1391,
      68,
      92,
      4943
    ],
    "start_token": 2787,
    "end_token": 2811,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      45941,
      13,
      71,
      25558,
      1231,
      10627,
      262,
      10154,
      286,
      705,
      411,
      6,
      714,
      1085,
      284,
      10059,
      4069,
      611,
      705,
      411,
      6,
      318,
      6565,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using np.hstack without checking the contents of 'res' could lead to unexpected behavior if 'res' is empty."
  },
  {
    "line": 494,
    "text": "            logger.warning(f\"request error: {e}\")",
    "annotation": "\u2705 Best Practice: Use of type hints for function parameters improves code readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      43917,
      7,
      69,
      1,
      25927,
      4049,
      25,
      1391,
      68,
      92,
      4943
    ],
    "start_token": 2811,
    "end_token": 2835,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      20269,
      329,
      2163,
      10007,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hints for function parameters improves code readability and maintainability."
  },
  {
    "line": 527,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Dynamic import using importlib can lead to security risks if the module name is not controlled.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2835,
    "end_token": 2835,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      26977,
      1330,
      1262,
      1330,
      8019,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      262,
      8265,
      1438,
      318,
      407,
      6856,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Dynamic import using importlib can lead to security risks if the module name is not controlled."
  },
  {
    "line": 530,
    "text": "    \"\"\"symbol prefix to sufix",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of getattr with dynamic attribute names can lead to security risks if not properly controlled.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227,
      1837,
      23650,
      21231,
      284,
      424,
      13049
    ],
    "start_token": 2835,
    "end_token": 2845,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      651,
      35226,
      351,
      8925,
      11688,
      3891,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      6105,
      6856,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of getattr with dynamic attribute names can lead to security risks if not properly controlled."
  },
  {
    "line": 533,
    "text": "    ----------",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of getattr with dynamic method names can lead to security risks if not properly controlled.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 2845,
    "end_token": 2850,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      651,
      35226,
      351,
      8925,
      2446,
      3891,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      6105,
      6856,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of getattr with dynamic method names can lead to security risks if not properly controlled."
  },
  {
    "line": 531,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of deepcopy to avoid modifying the original DataFrame",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2850,
    "end_token": 2850,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2769,
      30073,
      284,
      3368,
      30620,
      262,
      2656,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Use of deepcopy to avoid modifying the original DataFrame"
  },
  {
    "line": 533,
    "text": "    ----------",
    "annotation": "\u2705 Best Practice: Resetting index to ensure a clean DataFrame structure",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 2850,
    "end_token": 2855,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      30027,
      889,
      6376,
      284,
      4155,
      257,
      3424,
      6060,
      19778,
      4645
    ],
    "label": "best_practice",
    "reason": "Resetting index to ensure a clean DataFrame structure"
  },
  {
    "line": 535,
    "text": "        symbol",
    "annotation": "\u2705 Best Practice: Renaming columns for clarity and consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194
    ],
    "start_token": 2855,
    "end_token": 2863,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      3723,
      15180,
      329,
      16287,
      290,
      15794
    ],
    "label": "best_practice",
    "reason": "Renaming columns for clarity and consistency"
  },
  {
    "line": 537,
    "text": "        by default True",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda function for column name transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      416,
      4277,
      6407
    ],
    "start_token": 2863,
    "end_token": 2873,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      2163,
      329,
      5721,
      1438,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of lambda function for column name transformation"
  },
  {
    "line": 537,
    "text": "        by default True",
    "annotation": "\u2705 Best Practice: Returning a DataFrame allows for further data manipulation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      416,
      4277,
      6407
    ],
    "start_token": 2873,
    "end_token": 2883,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      6060,
      19778,
      3578,
      329,
      2252,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Returning a DataFrame allows for further data manipulation"
  },
  {
    "line": 537,
    "text": "        by default True",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with specific parameters can indicate usage patterns for data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      416,
      4277,
      6407
    ],
    "start_token": 2883,
    "end_token": 2893,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      2176,
      10007,
      460,
      7603,
      8748,
      7572,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Function signature with specific parameters can indicate usage patterns for data retrieval"
  },
  {
    "line": 552,
    "text": "            for _i in range(1, _retry + 1):",
    "annotation": "\u2705 Best Practice: Descriptive variable names improve code readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4808,
      72,
      287,
      2837,
      7,
      16,
      11,
      4808,
      1186,
      563,
      1343,
      352,
      2599
    ],
    "start_token": 2893,
    "end_token": 2918,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2935,
      6519,
      425,
      7885,
      3891,
      2987,
      2438,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Descriptive variable names improve code readability"
  },
  {
    "line": 557,
    "text": "                except Exception as e:",
    "annotation": "\u2705 Best Practice: Using upper() ensures case-insensitive comparison",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 2918,
    "end_token": 2938,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      6727,
      3419,
      19047,
      1339,
      12,
      1040,
      18464,
      7208
    ],
    "label": "best_practice",
    "reason": "Using upper() ensures case-insensitive comparison"
  },
  {
    "line": 557,
    "text": "                except Exception as e:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if 'start' and 'end' are not validated as date strings",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 2938,
    "end_token": 2958,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      705,
      9688,
      6,
      290,
      705,
      437,
      6,
      389,
      407,
      31031,
      355,
      3128,
      13042
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if 'start' and 'end' are not validated as date strings"
  },
  {
    "line": 557,
    "text": "                except Exception as e:",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 2958,
    "end_token": 2978,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters for better readability and maintainability."
  },
  {
    "line": 591,
    "text": "        res = trading_date",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom function `get_1d_data` which might be a point of interest for ML models.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      581,
      796,
      7313,
      62,
      4475
    ],
    "start_token": 2978,
    "end_token": 2990,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      2163,
      4600,
      1136,
      62,
      16,
      67,
      62,
      7890,
      63,
      543,
      1244,
      307,
      257,
      966,
      286,
      1393,
      329,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom function `get_1d_data` which might be a point of interest for ML models."
  },
  {
    "line": 594,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Division by zero risk if `df[\"close\"].first_valid_index()` returns None.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2990,
    "end_token": 2990,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7458,
      416,
      6632,
      2526,
      611,
      4600,
      7568,
      14692,
      19836,
      1,
      4083,
      11085,
      62,
      12102,
      62,
      9630,
      3419,
      63,
      5860,
      6045,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Division by zero risk if `df[\"close\"].first_valid_index()` returns None."
  },
  {
    "line": 600,
    "text": ") -> pd.Index:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential issue with NaN handling in logical operations.",
    "confidence": 0.5,
    "tokens": [
      8,
      4613,
      279,
      67,
      13,
      15732,
      25
    ],
    "start_token": 2990,
    "end_token": 2997,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2071,
      351,
      11013,
      45,
      9041,
      287,
      12219,
      4560,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential issue with NaN handling in logical operations."
  },
  {
    "line": 602,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if _date is not in data_1d",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2997,
    "end_token": 2997,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      4808,
      4475,
      318,
      407,
      287,
      1366,
      62,
      16,
      67
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if _date is not in data_1d"
  },
  {
    "line": 603,
    "text": "    Parameters",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential KeyError if _date is not in data_1d",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      40117
    ],
    "start_token": 2997,
    "end_token": 3001,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7383,
      12331,
      611,
      4808,
      4475,
      318,
      407,
      287,
      1366,
      62,
      16,
      67
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential KeyError if _date is not in data_1d"
  },
  {
    "line": 607,
    "text": "    freq: str",
    "annotation": "\u2705 Best Practice: Catch specific exceptions instead of a general Exception",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2030,
      80,
      25,
      965
    ],
    "start_token": 3001,
    "end_token": 3008,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25750,
      2176,
      13269,
      2427,
      286,
      257,
      2276,
      35528
    ],
    "label": "best_practice",
    "reason": "Catch specific exceptions instead of a general Exception"
  },
  {
    "line": 611,
    "text": "    pm_range: Tuple[str, str]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of groupby and apply indicates data transformation pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      9114,
      62,
      9521,
      25,
      309,
      29291,
      58,
      2536,
      11,
      965,
      60
    ],
    "start_token": 3008,
    "end_token": 3022,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1448,
      1525,
      290,
      4174,
      9217,
      1366,
      13389,
      3912
    ],
    "label": "ml_signal",
    "reason": "Usage of groupby and apply indicates data transformation pattern"
  },
  {
    "line": 611,
    "text": "    pm_range: Tuple[str, str]",
    "annotation": "\u2705 Best Practice: Consider checking if _date_field_name exists in df before setting index",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      9114,
      62,
      9521,
      25,
      309,
      29291,
      58,
      2536,
      11,
      965,
      60
    ],
    "start_token": 3022,
    "end_token": 3036,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      10627,
      611,
      4808,
      4475,
      62,
      3245,
      62,
      3672,
      7160,
      287,
      47764,
      878,
      4634,
      6376
    ],
    "label": "best_practice",
    "reason": "Consider checking if _date_field_name exists in df before setting index"
  },
  {
    "line": 619,
    "text": "            res.append(",
    "annotation": "\ud83e\udde0 ML Signal: Usage of custom calendar generation function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      581,
      13,
      33295,
      7
    ],
    "start_token": 3036,
    "end_token": 3051,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2183,
      11845,
      5270,
      2163
    ],
    "label": "ml_signal",
    "reason": "Usage of custom calendar generation function"
  },
  {
    "line": 625,
    "text": "            )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential IndexError if first_valid_index returns None",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 3051,
    "end_token": 3063,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      12901,
      12331,
      611,
      717,
      62,
      12102,
      62,
      9630,
      5860,
      6045
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential IndexError if first_valid_index returns None"
  },
  {
    "line": 633,
    "text": "    method: str = \"parse_instruments\",",
    "annotation": "\ud83e\udde0 ML Signal: Different handling for 'volume' column indicates special treatment",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2446,
      25,
      965,
      796,
      366,
      29572,
      62,
      259,
      2536,
      2886,
      1600
    ],
    "start_token": 3063,
    "end_token": 3077,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20615,
      9041,
      329,
      705,
      29048,
      6,
      5721,
      9217,
      2041,
      3513
    ],
    "label": "ml_signal",
    "reason": "Different handling for 'volume' column indicates special treatment"
  },
  {
    "line": 638,
    "text": "):",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on calc_paused flag",
    "confidence": 1.0,
    "tokens": [
      2599
    ],
    "start_token": 3077,
    "end_token": 3078,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      42302,
      62,
      8957,
      1484,
      6056
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on calc_paused flag"
  },
  {
    "line": 639,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of .copy() to avoid modifying the original DataFrame",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 3078,
    "end_token": 3082,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      764,
      30073,
      3419,
      284,
      3368,
      30620,
      262,
      2656,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Use of .copy() to avoid modifying the original DataFrame"
  },
  {
    "line": 641,
    "text": "    Parameters",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda function for date conversion",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      40117
    ],
    "start_token": 3082,
    "end_token": 3086,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      2163,
      329,
      3128,
      11315
    ],
    "label": "ml_signal",
    "reason": "Use of lambda function for date conversion"
  },
  {
    "line": 648,
    "text": "        method, value from [\"parse_instruments\", \"save_new_companies\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging potentially sensitive information",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2446,
      11,
      1988,
      422,
      14631,
      29572,
      62,
      259,
      2536,
      2886,
      1600,
      366,
      21928,
      62,
      3605,
      62,
      34390,
      444,
      8973
    ],
    "start_token": 3086,
    "end_token": 3112,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      6196,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging potentially sensitive information"
  },
  {
    "line": 674,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging potentially sensitive information",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 3112,
    "end_token": 3112,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      6196,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging potentially sensitive information"
  },
  {
    "line": 677,
    "text": "    df.reset_index(inplace=True)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of assert for runtime checks, which can be disabled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      47764,
      13,
      42503,
      62,
      9630,
      7,
      259,
      5372,
      28,
      17821,
      8
    ],
    "start_token": 3112,
    "end_token": 3126,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      6818,
      329,
      19124,
      8794,
      11,
      543,
      460,
      307,
      10058
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of assert for runtime checks, which can be disabled"
  }
]
[
  {
    "line": 10,
    "text": "from tqdm import tqdm",
    "annotation": "\u2705 Best Practice: Use of Path from pathlib for file path operations improves code readability and cross-platform compatibility.",
    "confidence": 0.5,
    "tokens": [
      6738,
      256,
      80,
      36020,
      1330,
      256,
      80,
      36020
    ],
    "start_token": 0,
    "end_token": 8,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      422,
      3108,
      8019,
      329,
      2393,
      3108,
      4560,
      19575,
      2438,
      1100,
      1799,
      290,
      3272,
      12,
      24254,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Path from pathlib for file path operations improves code readability and cross-platform compatibility."
  },
  {
    "line": 13,
    "text": "CUR_DIR = Path(__file__).resolve().parent",
    "annotation": "\u2705 Best Practice: Appending to sys.path to include parent directories for module imports.",
    "confidence": 0.5,
    "tokens": [
      34,
      4261,
      62,
      34720,
      796,
      10644,
      7,
      834,
      7753,
      834,
      737,
      411,
      6442,
      22446,
      8000
    ],
    "start_token": 8,
    "end_token": 23,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      1571,
      284,
      25064,
      13,
      6978,
      284,
      2291,
      2560,
      29196,
      329,
      8265,
      17944,
      13
    ],
    "label": "best_practice",
    "reason": "Appending to sys.path to include parent directories for module imports."
  },
  {
    "line": 16,
    "text": "from data_collector.index import IndexBase",
    "annotation": "\u2705 Best Practice: Grouping related imports together improves code readability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1366,
      62,
      33327,
      273,
      13,
      9630,
      1330,
      12901,
      14881
    ],
    "start_token": 23,
    "end_token": 33,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      3519,
      17944,
      1978,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Grouping related imports together improves code readability."
  },
  {
    "line": 17,
    "text": "from data_collector.utils import get_instruments",
    "annotation": "\ud83e\udde0 ML Signal: Use of a dictionary to map quarters to date ranges could be a feature in ML models.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1366,
      62,
      33327,
      273,
      13,
      26791,
      1330,
      651,
      62,
      259,
      2536,
      2886
    ],
    "start_token": 33,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      22155,
      284,
      3975,
      13620,
      284,
      3128,
      16069,
      714,
      307,
      257,
      3895,
      287,
      10373,
      4981,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a dictionary to map quarters to date ranges could be a feature in ML models."
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of a class variable to store a URL pattern for data retrieval",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 46,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      1398,
      7885,
      284,
      3650,
      257,
      10289,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Use of a class variable to store a URL pattern for data retrieval"
  },
  {
    "line": 17,
    "text": "from data_collector.utils import get_instruments",
    "annotation": "\ud83e\udde0 ML Signal: Use of a class variable to store a list, indicating potential shared state or configuration",
    "confidence": 0.5,
    "tokens": [
      6738,
      1366,
      62,
      33327,
      273,
      13,
      26791,
      1330,
      651,
      62,
      259,
      2536,
      2886
    ],
    "start_token": 46,
    "end_token": 59,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      1398,
      7885,
      284,
      3650,
      257,
      1351,
      11,
      12739,
      2785,
      4888,
      1181,
      393,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of a class variable to store a list, indicating potential shared state or configuration"
  },
  {
    "line": 25,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of super() to call the parent class constructor",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 59,
    "end_token": 59,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2208,
      3419,
      284,
      869,
      262,
      2560,
      1398,
      23772
    ],
    "label": "best_practice",
    "reason": "Use of super() to call the parent class constructor"
  },
  {
    "line": 29,
    "text": "        qlib_dir: [str, Path] = None,",
    "annotation": "\ud83e\udde0 ML Signal: Use of current date to initialize an object",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10662,
      8019,
      62,
      15908,
      25,
      685,
      2536,
      11,
      10644,
      60,
      796,
      6045,
      11
    ],
    "start_token": 59,
    "end_token": 79,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      1459,
      3128,
      284,
      41216,
      281,
      2134
    ],
    "label": "ml_signal",
    "reason": "Use of current date to initialize an object"
  },
  {
    "line": 31,
    "text": "        request_retry: int = 5,",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method to calculate a period based on the current month",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      62,
      1186,
      563,
      25,
      493,
      796,
      642,
      11
    ],
    "start_token": 79,
    "end_token": 95,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      284,
      15284,
      257,
      2278,
      1912,
      319,
      262,
      1459,
      1227
    ],
    "label": "ml_signal",
    "reason": "Use of a method to calculate a period based on the current month"
  },
  {
    "line": 33,
    "text": "    ):",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of a date attribute to a string",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      15179
    ],
    "start_token": 95,
    "end_token": 99,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      257,
      3128,
      11688,
      284,
      257,
      4731
    ],
    "label": "ml_signal",
    "reason": "Conversion of a date attribute to a string"
  },
  {
    "line": 34,
    "text": "        super(IBOVIndex, self).__init__(",
    "annotation": "\ud83e\udde0 ML Signal: Use of a method to get a period configuration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2208,
      7,
      40,
      8202,
      53,
      15732,
      11,
      2116,
      737,
      834,
      15003,
      834,
      7
    ],
    "start_token": 99,
    "end_token": 119,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      2446,
      284,
      651,
      257,
      2278,
      8398
    ],
    "label": "ml_signal",
    "reason": "Use of a method to get a period configuration"
  },
  {
    "line": 33,
    "text": "    ):",
    "annotation": "\u2705 Best Practice: Include type hints for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      15179
    ],
    "start_token": 119,
    "end_token": 123,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for better readability and maintainability"
  },
  {
    "line": 42,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded date values can indicate fixed historical or benchmark points",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 123,
    "end_token": 123,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      3128,
      3815,
      460,
      7603,
      5969,
      6754,
      393,
      18335,
      2173
    ],
    "label": "ml_signal",
    "reason": "Hardcoded date values can indicate fixed historical or benchmark points"
  },
  {
    "line": 64,
    "text": "        In other words,",
    "annotation": "\u2705 Best Practice: Use of clear and concise conditional statements for readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      554,
      584,
      2456,
      11
    ],
    "start_token": 123,
    "end_token": 134,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1598,
      290,
      35327,
      26340,
      6299,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of clear and concise conditional statements for readability"
  },
  {
    "line": 67,
    "text": "        May, Jun, Jul, Aug: 2Q",
    "annotation": "\u2705 Best Practice: Use of clear and concise conditional statements for readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1737,
      11,
      7653,
      11,
      5979,
      11,
      2447,
      25,
      362,
      48
    ],
    "start_token": 134,
    "end_token": 151,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1598,
      290,
      35327,
      26340,
      6299,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of clear and concise conditional statements for readability"
  },
  {
    "line": 69,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of clear and concise conditional statements for readability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 151,
    "end_token": 151,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1598,
      290,
      35327,
      26340,
      6299,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of clear and concise conditional statements for readability"
  },
  {
    "line": 73,
    "text": "            Current month (1 <= month <= 12)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Returning -1 for invalid input without raising an exception or error",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9236,
      1227,
      357,
      16,
      19841,
      1227,
      19841,
      1105,
      8
    ],
    "start_token": 151,
    "end_token": 171,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42882,
      532,
      16,
      329,
      12515,
      5128,
      1231,
      8620,
      281,
      6631,
      393,
      4049
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Returning -1 for invalid input without raising an exception or error"
  },
  {
    "line": 78,
    "text": "            Current Four Month Period (1Q or 2Q or 3Q)",
    "annotation": "\u2705 Best Practice: Use a list to store constant values for better readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9236,
      6675,
      16061,
      18581,
      357,
      16,
      48,
      393,
      362,
      48,
      393,
      513,
      48,
      8
    ],
    "start_token": 171,
    "end_token": 196,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      1351,
      284,
      3650,
      6937,
      3815,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use a list to store constant values for better readability and maintainability"
  },
  {
    "line": 81,
    "text": "            return \"1Q\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of current date and time can lead to non-deterministic behavior in tests",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      16,
      48,
      1
    ],
    "start_token": 196,
    "end_token": 212,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      1459,
      3128,
      290,
      640,
      460,
      1085,
      284,
      1729,
      12,
      67,
      2357,
      49228,
      4069,
      287,
      5254
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of current date and time can lead to non-deterministic behavior in tests"
  },
  {
    "line": 85,
    "text": "            return \"3Q\"",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a range of years could indicate a pattern of historical data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      366,
      18,
      48,
      1
    ],
    "start_token": 212,
    "end_token": 228,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      2837,
      286,
      812,
      714,
      7603,
      257,
      3912,
      286,
      6754,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Iterating over a range of years could indicate a pattern of historical data processing"
  },
  {
    "line": 88,
    "text": "",
    "annotation": "\u2705 Best Practice: Use string formatting for better readability",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 228,
    "end_token": 228,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4731,
      33313,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use string formatting for better readability"
  },
  {
    "line": 90,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Determining the current period based on the current month",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 228,
    "end_token": 236,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      360,
      13221,
      278,
      262,
      1459,
      2278,
      1912,
      319,
      262,
      1459,
      1227
    ],
    "label": "ml_signal",
    "reason": "Determining the current period based on the current month"
  },
  {
    "line": 91,
    "text": "        The ibovespa index is updated every four months.",
    "annotation": "\u2705 Best Practice: Use string formatting for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      24283,
      5241,
      8957,
      6376,
      318,
      6153,
      790,
      1440,
      1933,
      13
    ],
    "start_token": 236,
    "end_token": 254,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4731,
      33313,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use string formatting for better readability"
  },
  {
    "line": 100,
    "text": "        for year in [item for item in range(init_year, current_year)]:  # pylint: disable=R1721",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for monitoring or debugging",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      614,
      287,
      685,
      9186,
      329,
      2378,
      287,
      2837,
      7,
      15003,
      62,
      1941,
      11,
      1459,
      62,
      1941,
      8,
      5974,
      220,
      1303,
      279,
      2645,
      600,
      25,
      15560,
      28,
      49,
      1558,
      2481
    ],
    "start_token": 254,
    "end_token": 291,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      9904,
      393,
      28769
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for monitoring or debugging"
  },
  {
    "line": 102,
    "text": "                self.years_4_month_periods.append(str(year) + \"_\" + el)",
    "annotation": "\u2705 Best Practice: Use of lambda for concise function definition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      19002,
      62,
      19,
      62,
      8424,
      62,
      41007,
      82,
      13,
      33295,
      7,
      2536,
      7,
      1941,
      8,
      1343,
      45434,
      1,
      1343,
      1288,
      8
    ],
    "start_token": 291,
    "end_token": 329,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      37456,
      329,
      35327,
      2163,
      6770
    ],
    "label": "best_practice",
    "reason": "Use of lambda for concise function definition"
  },
  {
    "line": 109,
    "text": "    def format_datetime(self, inst_df: pd.DataFrame) -> pd.DataFrame:",
    "annotation": "\u2705 Best Practice: Use of lambda for concise function definition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      5794,
      62,
      19608,
      8079,
      7,
      944,
      11,
      916,
      62,
      7568,
      25,
      279,
      67,
      13,
      6601,
      19778,
      8,
      4613,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 329,
    "end_token": 357,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      37456,
      329,
      35327,
      2163,
      6770
    ],
    "label": "best_practice",
    "reason": "Use of lambda for concise function definition"
  },
  {
    "line": 112,
    "text": "        Parameters",
    "annotation": "\u2705 Best Practice: Use of lambda for concise function definition",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 357,
    "end_token": 365,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      37456,
      329,
      35327,
      2163,
      6770
    ],
    "label": "best_practice",
    "reason": "Use of lambda for concise function definition"
  },
  {
    "line": 124,
    "text": "            inst_df[self.END_DATE_FIELD] = inst_df[self.END_DATE_FIELD].apply(",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      916,
      62,
      7568,
      58,
      944,
      13,
      10619,
      62,
      35,
      6158,
      62,
      44603,
      60,
      796,
      916,
      62,
      7568,
      58,
      944,
      13,
      10619,
      62,
      35,
      6158,
      62,
      44603,
      4083,
      39014,
      7
    ],
    "start_token": 365,
    "end_token": 405,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 126,
    "text": "            )",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential KeyError if cell_split[1] is not in quarter_dict",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 405,
    "end_token": 417,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      7383,
      12331,
      611,
      2685,
      62,
      35312,
      58,
      16,
      60,
      318,
      407,
      287,
      3860,
      62,
      11600
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential KeyError if cell_split[1] is not in quarter_dict"
  },
  {
    "line": 155,
    "text": "        by quarter and year by year in order to generate a file that",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for tracking execution flow",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      416,
      3860,
      290,
      614,
      416,
      614,
      287,
      1502,
      284,
      7716,
      257,
      2393,
      326
    ],
    "start_token": 417,
    "end_token": 437,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      9646,
      9706,
      5202
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for tracking execution flow"
  },
  {
    "line": 159,
    "text": "        The Dataframe used as reference will provided the index",
    "annotation": "\ud83e\udde0 ML Signal: Usage of tqdm for progress tracking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      6060,
      14535,
      973,
      355,
      4941,
      481,
      2810,
      262,
      6376
    ],
    "start_token": 437,
    "end_token": 454,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      256,
      80,
      36020,
      329,
      4371,
      9646
    ],
    "label": "ml_signal",
    "reason": "Usage of tqdm for progress tracking"
  },
  {
    "line": 162,
    "text": "            symbol",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential CSV injection if input is not sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194
    ],
    "start_token": 454,
    "end_token": 466,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      44189,
      16954,
      611,
      5128,
      318,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential CSV injection if input is not sanitized"
  },
  {
    "line": 165,
    "text": "            .",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential CSV injection if input is not sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764
    ],
    "start_token": 466,
    "end_token": 478,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      44189,
      16954,
      611,
      5128,
      318,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential CSV injection if input is not sanitized"
  },
  {
    "line": 190,
    "text": "                    self.ibov_index_composition.format(self.years_4_month_periods[i]), on_bad_lines=\"skip\"",
    "annotation": "\u2705 Best Practice: Use of pd.concat for combining DataFrames",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      571,
      709,
      62,
      9630,
      62,
      785,
      9150,
      13,
      18982,
      7,
      944,
      13,
      19002,
      62,
      19,
      62,
      8424,
      62,
      41007,
      82,
      58,
      72,
      46570,
      319,
      62,
      14774,
      62,
      6615,
      2625,
      48267,
      1
    ],
    "start_token": 478,
    "end_token": 530,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      1102,
      9246,
      329,
      19771,
      6060,
      35439
    ],
    "label": "best_practice",
    "reason": "Use of pd.concat for combining DataFrames"
  },
  {
    "line": 194,
    "text": "                )[\"symbol\"]",
    "annotation": "\u2705 Best Practice: Explicit type conversion for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267,
      14692,
      1837,
      23650,
      8973
    ],
    "start_token": 530,
    "end_token": 550,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      11315,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicit type conversion for clarity"
  },
  {
    "line": 194,
    "text": "                )[\"symbol\"]",
    "annotation": "\ud83e\udde0 ML Signal: Logging errors for debugging and monitoring",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267,
      14692,
      1837,
      23650,
      8973
    ],
    "start_token": 550,
    "end_token": 570,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8563,
      329,
      28769,
      290,
      9904
    ],
    "label": "ml_signal",
    "reason": "Logging errors for debugging and monitoring"
  },
  {
    "line": 214,
    "text": "                    + \"-\"",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1343,
      366,
      21215
    ],
    "start_token": 570,
    "end_token": 592,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern"
  },
  {
    "line": 216,
    "text": "                )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential CSV injection if the CSV content is not sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 592,
    "end_token": 608,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      44189,
      16954,
      611,
      262,
      44189,
      2695,
      318,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential CSV injection if the CSV content is not sanitized"
  },
  {
    "line": 219,
    "text": "                    {\"date\": len(list_add) * [add_date], \"type\": len(list_add) * [\"add\"], \"symbol\": list_add}",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential CSV injection if the CSV content is not sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19779,
      4475,
      1298,
      18896,
      7,
      4868,
      62,
      2860,
      8,
      1635,
      685,
      2860,
      62,
      4475,
      4357,
      366,
      4906,
      1298,
      18896,
      7,
      4868,
      62,
      2860,
      8,
      1635,
      14631,
      2860,
      33116,
      366,
      1837,
      23650,
      1298,
      1351,
      62,
      2860,
      92
    ],
    "start_token": 608,
    "end_token": 663,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      44189,
      16954,
      611,
      262,
      44189,
      2695,
      318,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential CSV injection if the CSV content is not sanitized"
  },
  {
    "line": 226,
    "text": "            return df",
    "annotation": "\u2705 Best Practice: Use of merge to combine DataFrames",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764
    ],
    "start_token": 663,
    "end_token": 676,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      20121,
      284,
      12082,
      6060,
      35439
    ],
    "label": "best_practice",
    "reason": "Use of merge to combine DataFrames"
  },
  {
    "line": 228,
    "text": "        except Exception as E:",
    "annotation": "\u2705 Best Practice: Use of map for transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      412,
      25
    ],
    "start_token": 676,
    "end_token": 688,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3975,
      329,
      13389
    ],
    "label": "best_practice",
    "reason": "Use of map for transformation"
  },
  {
    "line": 232,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Explicit type conversion",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 688,
    "end_token": 696,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      11315
    ],
    "label": "best_practice",
    "reason": "Explicit type conversion"
  },
  {
    "line": 235,
    "text": "        to get the latest index composition from B3 website using",
    "annotation": "\ud83e\udde0 ML Signal: Error logging pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      284,
      651,
      262,
      3452,
      6376,
      11742,
      422,
      347,
      18,
      3052,
      1262
    ],
    "start_token": 696,
    "end_token": 714,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13047,
      18931,
      3912
    ],
    "label": "ml_signal",
    "reason": "Error logging pattern"
  },
  {
    "line": 232,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Check if the column exists before accessing it to avoid KeyError.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 714,
    "end_token": 722,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      262,
      5721,
      7160,
      878,
      22534,
      340,
      284,
      3368,
      7383,
      12331,
      13
    ],
    "label": "best_practice",
    "reason": "Check if the column exists before accessing it to avoid KeyError."
  },
  {
    "line": 234,
    "text": "        The repo indicated on README has implemented a script",
    "annotation": "\u2705 Best Practice: Use .copy() to avoid modifying the original DataFrame.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      29924,
      8203,
      319,
      20832,
      11682,
      468,
      9177,
      257,
      4226
    ],
    "start_token": 722,
    "end_token": 739,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      764,
      30073,
      3419,
      284,
      3368,
      30620,
      262,
      2656,
      6060,
      19778,
      13
    ],
    "label": "best_practice",
    "reason": "Use .copy() to avoid modifying the original DataFrame."
  },
  {
    "line": 235,
    "text": "        to get the latest index composition from B3 website using",
    "annotation": "\ud83e\udde0 ML Signal: Usage of fire.Fire indicates a command-line interface pattern.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      284,
      651,
      262,
      3452,
      6376,
      11742,
      422,
      347,
      18,
      3052,
      1262
    ],
    "start_token": 739,
    "end_token": 757,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2046,
      13,
      13543,
      9217,
      257,
      3141,
      12,
      1370,
      7071,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of fire.Fire indicates a command-line interface pattern."
  },
  {
    "line": 235,
    "text": "        to get the latest index composition from B3 website using",
    "annotation": "\u2705 Best Practice: Use of partial to pre-fill function arguments for cleaner code.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      284,
      651,
      262,
      3452,
      6376,
      11742,
      422,
      347,
      18,
      3052,
      1262
    ],
    "start_token": 757,
    "end_token": 775,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      13027,
      284,
      662,
      12,
      20797,
      2163,
      7159,
      329,
      21723,
      2438,
      13
    ],
    "label": "best_practice",
    "reason": "Use of partial to pre-fill function arguments for cleaner code."
  }
]
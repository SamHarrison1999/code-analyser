annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Low): Modifying sys.path can lead to import conflicts or security issues if not handled carefully.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3401, 4035, 25064, 13, 6978, 460, 1085, 284, 1330, 12333, 393, 2324, 2428, 611, 407, 12118, 7773, 13]",1.0,6,sast_risk,13,Modifying sys.path can lead to import conflicts or security issues if not handled carefully.,Low,0,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded URLs can lead to security risks if the URL changes or is compromised.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 32336, 460, 1085, 284, 2324, 7476, 611, 262, 10289, 2458, 393, 318, 19066, 13]",0.5,21,sast_risk,18,Hardcoded URLs can lead to security risks if the URL changes or is compromised.,Low,6,CUR_DIR = Path(__file__).resolve().parent,"[34, 4261, 62, 34720, 796, 10644, 7, 834, 7753, 834, 737, 411, 6442, 22446, 8000]"
"üß† ML Signal: Dictionary mapping for index names to URLs, useful for pattern recognition in ML models.","[8582, 100, 254, 10373, 26484, 25, 28261, 16855, 329, 6376, 3891, 284, 32336, 11, 4465, 329, 3912, 9465, 287, 10373, 4981, 13]",0.5,36,ml_signal,18,"Dictionary mapping for index names to URLs, useful for pattern recognition in ML models.",,21,CUR_DIR = Path(__file__).resolve().parent,"[34, 4261, 62, 34720, 796, 10644, 7, 834, 7753, 834, 737, 411, 6442, 22446, 8000]"
‚úÖ Best Practice: Class names should follow the CapWords convention for readability.,"[26486, 227, 6705, 19939, 25, 5016, 3891, 815, 1061, 262, 4476, 37117, 9831, 329, 1100, 1799, 13]",1.0,36,best_practice,24,Class names should follow the CapWords convention for readability.,,36,,[]
‚úÖ Best Practice: Class variables should be documented or initialized with meaningful default values.,"[26486, 227, 6705, 19939, 25, 5016, 9633, 815, 307, 12395, 393, 23224, 351, 11570, 4277, 3815, 13]",1.0,53,best_practice,26,Class variables should be documented or initialized with meaningful default values.,,36,"WIKI_URL = ""https://en.wikipedia.org/wiki""","[54, 18694, 40, 62, 21886, 796, 366, 5450, 1378, 268, 13, 31266, 13, 2398, 14, 15466, 1]"
‚úÖ Best Practice: Call to super() ensures proper initialization of the base class,"[26486, 227, 6705, 19939, 25, 4889, 284, 2208, 3419, 19047, 1774, 37588, 286, 262, 2779, 1398]",0.5,53,best_practice,34,Call to super() ensures proper initialization of the base class,,53,,[]
üß† ML Signal: Use of f-string for URL construction,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 10289, 5103]",0.5,83,ml_signal,37,Use of f-string for URL construction,,53,"    # NOTE: The US stock code contains ""PRN"", and the directory cannot be created on Windows system, use the ""_"" prefix","[220, 220, 220, 1303, 24550, 25, 383, 1294, 4283, 2438, 4909, 366, 4805, 45, 1600, 290, 262, 8619, 2314, 307, 2727, 319, 3964, 1080, 11, 779, 262, 45434, 1, 21231]"
‚úÖ Best Practice: Use of @property decorator for defining a read-only attribute,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 16215, 257, 1100, 12, 8807, 11688]",0.5,91,best_practice,41,Use of @property decorator for defining a read-only attribute,,83,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
‚úÖ Best Practice: Include type hints for return values to improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 1441, 3815, 284, 2987, 2438, 1100, 1799, 290, 5529, 1799]",0.5,99,best_practice,41,Include type hints for return values to improve code readability and maintainability,,91,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
‚ö†Ô∏è SAST Risk (Low): Using NotImplementedError without implementation can lead to runtime errors if not properly handled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1892, 3546, 1154, 12061, 12331, 1231, 7822, 460, 1085, 284, 19124, 8563, 611, 407, 6105, 12118]",0.5,103,sast_risk,48,Using NotImplementedError without implementation can lead to runtime errors if not properly handled,Low,99,    ):,"[220, 220, 220, 15179]"
‚úÖ Best Practice: Use of @abc.abstractmethod to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 39305, 13, 397, 8709, 24396, 284, 4605, 7822, 287, 850, 37724]",1.0,124,best_practice,49,Use of @abc.abstractmethod to enforce implementation in subclasses,,103,"        super(WIKIIndex, self).__init__(","[220, 220, 220, 220, 220, 220, 220, 2208, 7, 54, 18694, 3978, 358, 1069, 11, 2116, 737, 834, 15003, 834, 7]"
‚úÖ Best Practice: Docstring provides a clear description of the method's purpose and return type,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 338, 4007, 290, 1441, 2099]",0.5,145,best_practice,49,Docstring provides a clear description of the method's purpose and return type,,124,"        super(WIKIIndex, self).__init__(","[220, 220, 220, 220, 220, 220, 220, 2208, 7, 54, 18694, 3978, 358, 1069, 11, 2116, 737, 834, 15003, 834, 7]"
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444]",0.5,153,sast_risk,62,"Method is not implemented, which could lead to runtime errors if called",Low,145,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Check if 'self.freq' is defined and used correctly,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 944, 13, 19503, 80, 6, 318, 5447, 290, 973, 9380]",1.0,170,best_practice,71,Check if 'self.freq' is defined and used correctly,,153,            pd.DataFrame:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 6601, 19778, 25]"
‚úÖ Best Practice: Use of lambda for concise function definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 37456, 329, 35327, 2163, 6770]",1.0,200,best_practice,72,Use of lambda for concise function definition,,170,                symbol      date        type,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 220, 220, 220, 220, 220, 3128, 220, 220, 220, 220, 220, 220, 220, 2099]"
üß† ML Signal: Use of pandas apply with lambda for DataFrame column transformation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 4174, 351, 37456, 329, 6060, 19778, 5721, 13389]",1.0,214,ml_signal,75,Use of pandas apply with lambda for DataFrame column transformation,,200,            dtypes:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 288, 19199, 25]"
‚úÖ Best Practice: Use of getattr to check for attribute existence is a good practice for optional caching,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 35226, 284, 2198, 329, 11688, 6224, 318, 257, 922, 3357, 329, 11902, 40918]",0.5,230,best_practice,83,Use of getattr to check for attribute existence is a good practice for optional caching,,214,"        """"""formatting the datetime in an instrument","[220, 220, 220, 220, 220, 220, 220, 37227, 18982, 889, 262, 4818, 8079, 287, 281, 8875]"
üß† ML Signal: Use of lambda function for filtering,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 2163, 329, 25431]",1.0,239,ml_signal,86,Use of lambda function for filtering,,230,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Use of setattr to cache the result for future calls,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 35226, 284, 12940, 262, 1255, 329, 2003, 3848]",1.0,287,best_practice,88,Use of setattr to cache the result for future calls,,239,"            inst_df.columns = [self.SYMBOL_FIELD_NAME, self.START_DATE_FIELD, self.END_DATE_FIELD]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 916, 62, 7568, 13, 28665, 82, 796, 685, 944, 13, 23060, 10744, 3535, 62, 44603, 62, 20608, 11, 2116, 13, 2257, 7227, 62, 35, 6158, 62, 44603, 11, 2116, 13, 10619, 62, 35, 6158, 62, 44603, 60]"
‚úÖ Best Practice: Consider adding a docstring to describe the method's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 10007]",0.5,335,best_practice,88,Consider adding a docstring to describe the method's purpose and parameters,,287,"            inst_df.columns = [self.SYMBOL_FIELD_NAME, self.START_DATE_FIELD, self.END_DATE_FIELD]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 916, 62, 7568, 13, 28665, 82, 796, 685, 944, 13, 23060, 10744, 3535, 62, 44603, 62, 20608, 11, 2116, 13, 2257, 7227, 62, 35, 6158, 62, 44603, 11, 2116, 13, 10619, 62, 35, 6158, 62, 44603, 60]"
‚ö†Ô∏è SAST Risk (Medium): Using 'timeout=None' can lead to hanging requests; consider setting a timeout value,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 705, 48678, 28, 14202, 6, 460, 1085, 284, 10938, 7007, 26, 2074, 4634, 257, 26827, 1988]",0.5,343,sast_risk,90,Using 'timeout=None' can lead to hanging requests; consider setting a timeout value,Medium,335,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
üß† ML Signal: Checking for HTTP status code to handle errors,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 14626, 3722, 2438, 284, 5412, 8563]",1.0,343,ml_signal,92,Checking for HTTP status code to handle errors,,343,,[]
‚ö†Ô∏è SAST Risk (Low): Raising a generic exception without logging the error details,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 6631, 1231, 18931, 262, 4049, 3307]",0.5,359,sast_risk,94,Raising a generic exception without logging the error details,Low,343,"        if self.freq != ""day"":","[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 19503, 80, 14512, 366, 820, 1298]"
üß† ML Signal: Returning the response object from an HTTP request,"[8582, 100, 254, 10373, 26484, 25, 42882, 262, 2882, 2134, 422, 281, 14626, 2581]",0.5,421,ml_signal,96,Returning the response object from an HTTP request,,359,"                lambda x: (pd.Timestamp(x) + pd.Timedelta(hours=23, minutes=59)).strftime(""%Y-%m-%d %H:%M:%S"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37456, 2124, 25, 357, 30094, 13, 14967, 27823, 7, 87, 8, 1343, 279, 67, 13, 14967, 276, 12514, 7, 24425, 28, 1954, 11, 2431, 28, 3270, 29720, 2536, 31387, 7203, 4, 56, 12, 4, 76, 12, 4, 67, 4064, 39, 25, 4, 44, 25, 4, 50, 4943]"
‚úÖ Best Practice: Use of .copy() to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 286, 764, 30073, 3419, 284, 3368, 30620, 262, 2656, 6060, 19778]",1.0,437,best_practice,94,Use of .copy() to avoid modifying the original DataFrame,,421,"        if self.freq != ""day"":","[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 19503, 80, 14512, 366, 820, 1298]"
üß† ML Signal: Stripping whitespace from string fields is a common data cleaning step,"[8582, 100, 254, 10373, 26484, 25, 26137, 2105, 13216, 10223, 422, 4731, 7032, 318, 257, 2219, 1366, 12724, 2239]",0.5,499,ml_signal,96,Stripping whitespace from string fields is a common data cleaning step,,437,"                lambda x: (pd.Timestamp(x) + pd.Timedelta(hours=23, minutes=59)).strftime(""%Y-%m-%d %H:%M:%S"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37456, 2124, 25, 357, 30094, 13, 14967, 27823, 7, 87, 8, 1343, 279, 67, 13, 14967, 276, 12514, 7, 24425, 28, 1954, 11, 2431, 28, 3270, 29720, 2536, 31387, 7203, 4, 56, 12, 4, 76, 12, 4, 67, 4064, 39, 25, 4, 44, 25, 4, 50, 4943]"
üß† ML Signal: Setting default values for date fields is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 25700, 4277, 3815, 329, 3128, 7032, 318, 257, 2219, 3912]",0.5,510,ml_signal,98,Setting default values for date fields is a common pattern,,499,        return inst_df,"[220, 220, 220, 220, 220, 220, 220, 1441, 916, 62, 7568]"
üß† ML Signal: Setting default values for date fields is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 25700, 4277, 3815, 329, 3128, 7032, 318, 257, 2219, 3912]",0.5,515,ml_signal,100,Setting default values for date fields is a common pattern,,510,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Use of .loc for selecting specific columns improves readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 764, 17946, 329, 17246, 2176, 15180, 19575, 1100, 1799]",0.5,527,best_practice,102,Use of .loc for selecting specific columns improves readability,,515,"        """"""get history trading date","[220, 220, 220, 220, 220, 220, 220, 37227, 1136, 2106, 7313, 3128]"
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,532,ml_signal,100,Logging usage pattern for monitoring or debugging,,527,    @property,"[220, 220, 220, 2488, 26745]"
üß† ML Signal: Usage of retry pattern for network requests,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1005, 563, 3912, 329, 3127, 7007]",0.5,544,ml_signal,102,Usage of retry pattern for network requests,,532,"        """"""get history trading date","[220, 220, 220, 220, 220, 220, 220, 37227, 1136, 2106, 7313, 3128]"
‚ö†Ô∏è SAST Risk (Low): Potential for large data processing in memory,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1588, 1366, 7587, 287, 4088]",0.5,552,sast_risk,104,Potential for large data processing in memory,Low,544,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
‚úÖ Best Practice: Check for None and empty DataFrame before processing,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 290, 6565, 6060, 19778, 878, 7587]",0.5,560,best_practice,107,Check for None and empty DataFrame before processing,,552,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Consistent column naming for DataFrame,"[26486, 227, 6705, 19939, 25, 3515, 7609, 5721, 19264, 329, 6060, 19778]",1.0,606,best_practice,110,Consistent column naming for DataFrame,,560,"            _calendar_list = list(filter(lambda x: x >= self.bench_start_date, get_calendar_list(""US_ALL"")))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 9948, 9239, 62, 4868, 796, 1351, 7, 24455, 7, 50033, 2124, 25, 2124, 18189, 2116, 13, 26968, 62, 9688, 62, 4475, 11, 651, 62, 9948, 9239, 62, 4868, 7203, 2937, 62, 7036, 1, 22305]"
üß† ML Signal: Usage of default settings for data processing,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4277, 6460, 329, 1366, 7587]",0.5,619,ml_signal,112,Usage of default settings for data processing,,606,        return _calendar_list,"[220, 220, 220, 220, 220, 220, 220, 1441, 4808, 9948, 9239, 62, 4868]"
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,619,ml_signal,113,Logging usage pattern for monitoring or debugging,,619,,[]
‚úÖ Best Practice: Return early to avoid unnecessary processing,"[26486, 227, 6705, 19939, 25, 8229, 1903, 284, 3368, 13114, 7587]",0.5,635,best_practice,116,Return early to avoid unnecessary processing,,619,        if resp.status_code != 200:,"[220, 220, 220, 220, 220, 220, 220, 611, 1217, 13, 13376, 62, 8189, 14512, 939, 25]"
‚úÖ Best Practice: Method signature includes type hints for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 11789, 9877, 3407, 2099, 20269, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,681,best_practice,110,Method signature includes type hints for better readability and maintainability,,635,"            _calendar_list = list(filter(lambda x: x >= self.bench_start_date, get_calendar_list(""US_ALL"")))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 9948, 9239, 62, 4868, 796, 1351, 7, 24455, 7, 50033, 2124, 25, 2124, 18189, 2116, 13, 26968, 62, 9688, 62, 4475, 11, 651, 62, 9948, 9239, 62, 4868, 7203, 2937, 62, 7036, 1, 22305]"
"‚ö†Ô∏è SAST Risk (Low): Method raises NotImplementedError, which could lead to runtime errors if not properly implemented","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 6105, 9177]",0.5,694,sast_risk,112,"Method raises NotImplementedError, which could lead to runtime errors if not properly implemented",Low,681,        return _calendar_list,"[220, 220, 220, 220, 220, 220, 220, 1441, 4808, 9948, 9239, 62, 4868]"
‚úÖ Best Practice: Class definition should follow PEP 8 naming conventions,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 1061, 350, 8905, 807, 19264, 21396]",0.5,707,best_practice,112,Class definition should follow PEP 8 naming conventions,,694,        return _calendar_list,"[220, 220, 220, 220, 220, 220, 220, 1441, 4808, 9948, 9239, 62, 4868]"
‚úÖ Best Practice: Constants should be in uppercase and follow naming conventions,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 287, 334, 39921, 589, 290, 1061, 19264, 21396]",0.5,707,best_practice,113,Constants should be in uppercase and follow naming conventions,,707,,[]
‚ö†Ô∏è SAST Risk (Low): Hardcoded URL can lead to security risks if not validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 10289, 460, 1085, 284, 2324, 7476, 611, 407, 31031, 393, 5336, 36951]",0.5,707,sast_risk,118,Hardcoded URL can lead to security risks if not validated or sanitized,Low,707,,[]
üß† ML Signal: Usage of a URL pattern for accessing external resources,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 10289, 3912, 329, 22534, 7097, 4133]",0.5,716,ml_signal,119,Usage of a URL pattern for accessing external resources,,707,        return resp,"[220, 220, 220, 220, 220, 220, 220, 1441, 1217]"
‚úÖ Best Practice: Constants should be in uppercase and follow naming conventions,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 287, 334, 39921, 589, 290, 1061, 19264, 21396]",0.5,745,best_practice,121,Constants should be in uppercase and follow naming conventions,,716,"    def set_default_date_range(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 900, 62, 12286, 62, 4475, 62, 9521, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
üß† ML Signal: Usage of a constant to define the number of workers for parallel processing,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 6937, 284, 8160, 262, 1271, 286, 3259, 329, 10730, 7587]",0.5,759,ml_signal,122,Usage of a constant to define the number of workers for parallel processing,,745,        _df = df.copy(),"[220, 220, 220, 220, 220, 220, 220, 4808, 7568, 796, 47764, 13, 30073, 3419]"
‚úÖ Best Practice: Check for DataFrame length to ensure it has enough data to process,"[26486, 227, 6705, 19939, 25, 6822, 329, 6060, 19778, 4129, 284, 4155, 340, 468, 1576, 1366, 284, 1429]",1.0,759,best_practice,118,Check for DataFrame length to ensure it has enough data to process,,759,,[]
‚úÖ Best Practice: Use .copy() to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 764, 30073, 3419, 284, 3368, 30620, 262, 2656, 6060, 19778]",1.0,768,best_practice,119,Use .copy() to avoid modifying the original DataFrame,,759,        return resp,"[220, 220, 220, 220, 220, 220, 220, 1441, 1217]"
‚úÖ Best Practice: Use of pd.Timestamp for date handling ensures consistency and compatibility with pandas operations.,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 14967, 27823, 329, 3128, 9041, 19047, 15794, 290, 17764, 351, 19798, 292, 4560, 13]",1.0,782,best_practice,122,Use of pd.Timestamp for date handling ensures consistency and compatibility with pandas operations.,,768,        _df = df.copy(),"[220, 220, 220, 220, 220, 220, 220, 4808, 7568, 796, 47764, 13, 30073, 3419]"
‚úÖ Best Practice: Converting trade_date to a string format for consistent usage,"[26486, 227, 6705, 19939, 25, 35602, 889, 3292, 62, 4475, 284, 257, 4731, 5794, 329, 6414, 8748]",0.5,811,best_practice,125,Converting trade_date to a string format for consistent usage,,782,        _df[self.END_DATE_FIELD] = self.DEFAULT_END_DATE,"[220, 220, 220, 220, 220, 220, 220, 4808, 7568, 58, 944, 13, 10619, 62, 35, 6158, 62, 44603, 60, 796, 2116, 13, 7206, 38865, 62, 10619, 62, 35, 6158]"
‚úÖ Best Practice: Using pathlib for file path operations,"[26486, 227, 6705, 19939, 25, 8554, 3108, 8019, 329, 2393, 3108, 4560]",0.5,811,best_practice,127,Using pathlib for file path operations,,811,,[]
üß† ML Signal: Conditional logic for cache usage,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 329, 12940, 8748]",0.5,824,ml_signal,128,Conditional logic for cache usage,,811,    def get_new_companies(self):,"[220, 220, 220, 825, 651, 62, 3605, 62, 34390, 444, 7, 944, 2599]"
üß† ML Signal: Reading from cache,"[8582, 100, 254, 10373, 26484, 25, 11725, 422, 12940]",0.5,846,ml_signal,131,Reading from cache,,824,        df_list = pd.read_html(_data.text),"[220, 220, 220, 220, 220, 220, 220, 47764, 62, 4868, 796, 279, 67, 13, 961, 62, 6494, 28264, 7890, 13, 5239, 8]"
üß† ML Signal: Constructing URL for API request,"[8582, 100, 254, 10373, 26484, 25, 28407, 278, 10289, 329, 7824, 2581]",1.0,872,ml_signal,134,Constructing URL for API request,,846,            if (_df is not None) and (not _df.empty):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 44104, 7568, 318, 407, 6045, 8, 290, 357, 1662, 4808, 7568, 13, 28920, 2599]"
"‚ö†Ô∏è SAST Risk (Medium): No timeout specified for requests.post, which can lead to hanging connections","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 329, 7007, 13, 7353, 11, 543, 460, 1085, 284, 10938, 8787]",1.0,902,sast_risk,136,"No timeout specified for requests.post, which can lead to hanging connections",Medium,872,                _df = self.set_default_date_range(_df),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 7568, 796, 2116, 13, 2617, 62, 12286, 62, 4475, 62, 9521, 28264, 7568, 8]"
‚ö†Ô∏è SAST Risk (Low): Basic error handling for HTTP response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 14392, 4049, 9041, 329, 14626, 2882]",0.5,920,sast_risk,138,Basic error handling for HTTP response,Low,902,                return _df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 4808, 7568]"
üß† ML Signal: Processing JSON response into DataFrame,"[8582, 100, 254, 10373, 26484, 25, 28403, 19449, 2882, 656, 6060, 19778]",0.5,940,ml_signal,141,Processing JSON response into DataFrame,,920,"        raise NotImplementedError(""rewrite filter_df"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7203, 1809, 6525, 8106, 62, 7568, 4943]"
‚úÖ Best Practice: Adding a new column to DataFrame,"[26486, 227, 6705, 19939, 25, 18247, 257, 649, 5721, 284, 6060, 19778]",0.5,940,best_practice,143,Adding a new column to DataFrame,,940,,[]
‚úÖ Best Practice: Renaming DataFrame columns for consistency,"[26486, 227, 6705, 19939, 25, 7152, 3723, 6060, 19778, 15180, 329, 15794]",0.5,954,best_practice,145,Renaming DataFrame columns for consistency,,940,    HISTORY_COMPANIES_URL = (,"[220, 220, 220, 367, 42480, 62, 9858, 47, 1565, 11015, 62, 21886, 796, 357]"
üß† ML Signal: Conditional logic for saving to cache,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 329, 8914, 284, 12940]",0.5,1012,ml_signal,146,Conditional logic for saving to cache,,954,"        ""https://indexes.nasdaqomx.com/Index/WeightingData?id=NDX&tradeDate={trade_date}T00%3A00%3A00.000&timeOfDay=SOD""","[220, 220, 220, 220, 220, 220, 220, 366, 5450, 1378, 9630, 274, 13, 24716, 48539, 296, 87, 13, 785, 14, 15732, 14, 25844, 278, 6601, 30, 312, 28, 8575, 55, 5, 25351, 10430, 34758, 25351, 62, 4475, 92, 51, 405, 4, 18, 32, 405, 4, 18, 32, 405, 13, 830, 5, 2435, 5189, 12393, 28, 50, 3727, 1]"
üß† ML Signal: Writing to cache,"[8582, 100, 254, 10373, 26484, 25, 22183, 284, 12940]",0.5,1012,ml_signal,149,Writing to cache,,1012,,[]
üß† ML Signal: Returning DataFrame,"[8582, 100, 254, 10373, 26484, 25, 42882, 6060, 19778]",0.5,1037,ml_signal,150,Returning DataFrame,,1012,"    def filter_df(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 8106, 62, 7568, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
üß† ML Signal: Usage of tqdm for progress tracking,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 256, 80, 36020, 329, 4371, 9646]",0.5,1049,ml_signal,144,Usage of tqdm for progress tracking,,1037,class NASDAQ100Index(WIKIIndex):,"[4871, 7210, 46640, 3064, 15732, 7, 54, 18694, 3978, 358, 1069, 2599]"
üß† ML Signal: Usage of ThreadPoolExecutor for concurrent execution,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 14122, 27201, 23002, 38409, 329, 24580, 9706]",0.5,1107,ml_signal,146,Usage of ThreadPoolExecutor for concurrent execution,,1049,"        ""https://indexes.nasdaqomx.com/Index/WeightingData?id=NDX&tradeDate={trade_date}T00%3A00%3A00.000&timeOfDay=SOD""","[220, 220, 220, 220, 220, 220, 220, 366, 5450, 1378, 9630, 274, 13, 24716, 48539, 296, 87, 13, 785, 14, 15732, 14, 25844, 278, 6601, 30, 312, 28, 8575, 55, 5, 25351, 10430, 34758, 25351, 62, 4475, 92, 51, 405, 4, 18, 32, 405, 4, 18, 32, 405, 13, 830, 5, 2435, 5189, 12393, 28, 50, 3727, 1]"
‚ö†Ô∏è SAST Risk (Low): Potential for race conditions or thread safety issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3234, 3403, 393, 4704, 3747, 2428]",0.5,1165,sast_risk,146,Potential for race conditions or thread safety issues,Low,1107,"        ""https://indexes.nasdaqomx.com/Index/WeightingData?id=NDX&tradeDate={trade_date}T00%3A00%3A00.000&timeOfDay=SOD""","[220, 220, 220, 220, 220, 220, 220, 366, 5450, 1378, 9630, 274, 13, 24716, 48539, 296, 87, 13, 785, 14, 15732, 14, 25844, 278, 6601, 30, 312, 28, 8575, 55, 5, 25351, 10430, 34758, 25351, 62, 4475, 92, 51, 405, 4, 18, 32, 405, 4, 18, 32, 405, 13, 830, 5, 2435, 5189, 12393, 28, 50, 3727, 1]"
‚ö†Ô∏è SAST Risk (Low): Potential for ValueError if all_history is empty,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11052, 12331, 611, 477, 62, 23569, 318, 6565]",0.5,1201,sast_risk,161,Potential for ValueError if all_history is empty,Low,1165,"        cache_path = self.cache_dir.joinpath(f""{trade_date}_history_companies.pkl"")","[220, 220, 220, 220, 220, 220, 220, 12940, 62, 6978, 796, 2116, 13, 23870, 62, 15908, 13, 22179, 6978, 7, 69, 1, 90, 25351, 62, 4475, 92, 62, 23569, 62, 34390, 444, 13, 79, 41582, 4943]"
‚úÖ Best Practice: Method chaining improves readability by reducing the need for intermediate variables.,"[26486, 227, 6705, 19939, 25, 11789, 442, 1397, 19575, 1100, 1799, 416, 8868, 262, 761, 329, 19898, 9633, 13]",1.0,1240,best_practice,159,Method chaining improves readability by reducing the need for intermediate variables.,,1201,"    def _request_history_companies(self, trade_date: pd.Timestamp, use_cache: bool = True) -> pd.DataFrame:","[220, 220, 220, 825, 4808, 25927, 62, 23569, 62, 34390, 444, 7, 944, 11, 3292, 62, 4475, 25, 279, 67, 13, 14967, 27823, 11, 779, 62, 23870, 25, 20512, 796, 6407, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
"üß† ML Signal: Usage of self indicates this is a method within a class, which is common in object-oriented programming.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 9217, 428, 318, 257, 2446, 1626, 257, 1398, 11, 543, 318, 2219, 287, 2134, 12, 17107, 8300, 13]",0.5,1276,ml_signal,161,"Usage of self indicates this is a method within a class, which is common in object-oriented programming.",,1240,"        cache_path = self.cache_dir.joinpath(f""{trade_date}_history_companies.pkl"")","[220, 220, 220, 220, 220, 220, 220, 12940, 62, 6978, 796, 2116, 13, 23870, 62, 15908, 13, 22179, 6978, 7, 69, 1, 90, 25351, 62, 4475, 92, 62, 23569, 62, 34390, 444, 13, 79, 41582, 4943]"
‚úÖ Best Practice: Use of @property decorator for getter method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446]",1.0,1312,best_practice,161,Use of @property decorator for getter method,,1276,"        cache_path = self.cache_dir.joinpath(f""{trade_date}_history_companies.pkl"")","[220, 220, 220, 220, 220, 220, 220, 12940, 62, 6978, 796, 2116, 13, 23870, 62, 15908, 13, 22179, 6978, 7, 69, 1, 90, 25351, 62, 4475, 92, 62, 23569, 62, 34390, 444, 13, 79, 41582, 4943]"
‚úÖ Best Practice: Use of type hint for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1337,best_practice,163,Use of type hint for return type improves code readability and maintainability,,1312,            df = pd.read_pickle(cache_path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 27729, 293, 7, 23870, 62, 6978, 8]"
üß† ML Signal: Consistent use of fixed start date could indicate a pattern in data processing,"[8582, 100, 254, 10373, 26484, 25, 3515, 7609, 779, 286, 5969, 923, 3128, 714, 7603, 257, 3912, 287, 1366, 7587]",0.5,1372,ml_signal,165,Consistent use of fixed start date could indicate a pattern in data processing,,1337,            url = self.HISTORY_COMPANIES_URL.format(trade_date=trade_date),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19016, 796, 2116, 13, 39, 42480, 62, 9858, 47, 1565, 11015, 62, 21886, 13, 18982, 7, 25351, 62, 4475, 28, 25351, 62, 4475, 8]"
‚úÖ Best Practice: Define the function with a clear purpose and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 2896, 500, 262, 2163, 351, 257, 1598, 4007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,1407,best_practice,165,Define the function with a clear purpose and return type for better readability and maintainability.,,1372,            url = self.HISTORY_COMPANIES_URL.format(trade_date=trade_date),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19016, 796, 2116, 13, 39, 42480, 62, 9858, 47, 1565, 11015, 62, 21886, 13, 18982, 7, 25351, 62, 4475, 28, 25351, 62, 4475, 8]"
"‚úÖ Best Practice: Use 'pass' to indicate an unimplemented function, making it clear that the function is intentionally left blank.","[26486, 227, 6705, 19939, 25, 5765, 705, 6603, 6, 284, 7603, 281, 28418, 1154, 12061, 2163, 11, 1642, 340, 1598, 326, 262, 2163, 318, 16464, 1364, 9178, 13]",1.0,1427,best_practice,167,"Use 'pass' to indicate an unimplemented function, making it clear that the function is intentionally left blank.",,1407,            if resp.status_code != 200:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1217, 13, 13376, 62, 8189, 14512, 939, 25]"
"‚úÖ Best Practice: Check if ""Symbol"" is in columns to avoid KeyError","[26486, 227, 6705, 19939, 25, 6822, 611, 366, 13940, 23650, 1, 318, 287, 15180, 284, 3368, 7383, 12331]",1.0,1455,best_practice,168,"Check if ""Symbol"" is in columns to avoid KeyError",,1427,"                raise ValueError(f""request error: {url}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7, 69, 1, 25927, 4049, 25, 1391, 6371, 92, 4943]"
‚úÖ Best Practice: Use .copy() to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 764, 30073, 3419, 284, 3368, 30620, 262, 2656, 6060, 19778]",1.0,1481,best_practice,170,Use .copy() to avoid modifying the original DataFrame,,1455,            df[self.DATE_FIELD_NAME] = trade_date,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 944, 13, 35, 6158, 62, 44603, 62, 20608, 60, 796, 3292, 62, 4475]"
üß† ML Signal: Usage of lambda function for string manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 2163, 329, 4731, 17512]",1.0,1498,ml_signal,172,Usage of lambda function for string manipulation,,1481,            if not df.empty:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 47764, 13, 28920, 25]"
‚úÖ Best Practice: Method name should reflect its purpose; consider renaming if it doesn't parse instruments.,"[26486, 227, 6705, 19939, 25, 11789, 1438, 815, 4079, 663, 4007, 26, 2074, 8851, 3723, 611, 340, 1595, 470, 21136, 12834, 13]",0.5,1515,best_practice,172,Method name should reflect its purpose; consider renaming if it doesn't parse instruments.,,1498,            if not df.empty:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 47764, 13, 28920, 25]"
‚ö†Ô∏è SAST Risk (Low): Logging warning messages can expose sensitive information if not handled properly.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6509, 6218, 460, 15651, 8564, 1321, 611, 407, 12118, 6105, 13]",0.5,1524,sast_risk,174,Logging warning messages can expose sensitive information if not handled properly.,Low,1515,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
"üß† ML Signal: Constant URL for data source, useful for web scraping pattern detection","[8582, 100, 254, 10373, 26484, 25, 20217, 10289, 329, 1366, 2723, 11, 4465, 329, 3992, 46743, 3912, 13326]",0.5,1524,ml_signal,175,"Constant URL for data source, useful for web scraping pattern detection",,1524,,[]
‚úÖ Best Practice: Type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1543,best_practice,177,Type hinting for return type improves code readability and maintainability,,1524,"        logger.info(f""start get history companies......"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 9688, 651, 2106, 2706, 16317, 4943]"
üß† ML Signal: Hardcoded date values can indicate fixed starting points or baselines in data processing,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3128, 3815, 460, 7603, 5969, 3599, 2173, 393, 1615, 20655, 287, 1366, 7587]",0.5,1555,ml_signal,179,Hardcoded date values can indicate fixed starting points or baselines in data processing,,1543,        error_list = [],"[220, 220, 220, 220, 220, 220, 220, 4049, 62, 4868, 796, 17635]"
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,1583,ml_signal,180,Logging usage pattern for monitoring or debugging,,1555,        with tqdm(total=len(self.calendar_list)) as p_bar:,"[220, 220, 220, 220, 220, 220, 220, 351, 256, 80, 36020, 7, 23350, 28, 11925, 7, 944, 13, 9948, 9239, 62, 4868, 4008, 355, 279, 62, 5657, 25]"
‚ö†Ô∏è SAST Risk (Low): External data source without validation or sanitization,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 34579, 1366, 2723, 1231, 21201, 393, 5336, 270, 1634]",1.0,1610,sast_risk,182,External data source without validation or sanitization,Low,1583,"                for _trading_date, _df in zip(","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 4808, 2213, 4980, 62, 4475, 11, 4808, 7568, 287, 19974, 7]"
‚úÖ Best Practice: Explicitly setting DataFrame column names for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6060, 19778, 5721, 3891, 329, 16287]",1.0,1635,best_practice,185,Explicitly setting DataFrame column names for clarity,,1610,                    if _df.empty:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 4808, 7568, 13, 28920, 25]"
‚úÖ Best Practice: Converting date strings to datetime objects for consistency,"[26486, 227, 6705, 19939, 25, 35602, 889, 3128, 13042, 284, 4818, 8079, 5563, 329, 15794]",1.0,1656,best_practice,187,Converting date strings to datetime objects for consistency,,1635,                    else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Adding a new column to indicate the type of change,"[26486, 227, 6705, 19939, 25, 18247, 257, 649, 5721, 284, 7603, 262, 2099, 286, 1487]",1.0,1682,best_practice,192,Adding a new column to indicate the type of change,,1656,"            logger.warning(f""get error: {error_list}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 1136, 4049, 25, 1391, 18224, 62, 4868, 92, 4943]"
‚úÖ Best Practice: Dropping rows with NaN values in specific columns,"[26486, 227, 6705, 19939, 25, 21045, 2105, 15274, 351, 11013, 45, 3815, 287, 2176, 15180]",1.0,1682,best_practice,196,Dropping rows with NaN values in specific columns,,1682,,[]
üß† ML Signal: Conditional logic based on type of change,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2099, 286, 1487]",1.0,1682,ml_signal,199,Conditional logic based on type of change,,1682,,[]
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,1690,ml_signal,207,Logging usage pattern for monitoring or debugging,,1682,        pass,"[220, 220, 220, 220, 220, 220, 220, 1208]"
‚úÖ Best Practice: Using pd.concat to combine DataFrames,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 284, 12082, 6060, 35439]",1.0,1715,best_practice,209,Using pd.concat to combine DataFrames,,1690,"    def filter_df(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 8106, 62, 7568, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
üß† ML Signal: Checks for the presence of a specific column in a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 47719, 329, 262, 4931, 286, 257, 2176, 5721, 287, 257, 6060, 19778]",1.0,1734,ml_signal,203,Checks for the presence of a specific column in a DataFrame,,1715,    def bench_start_date(self) -> pd.Timestamp:,"[220, 220, 220, 825, 7624, 62, 9688, 62, 4475, 7, 944, 8, 4613, 279, 67, 13, 14967, 27823, 25]"
‚úÖ Best Practice: Use of .copy() to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 286, 764, 30073, 3419, 284, 3368, 30620, 262, 2656, 6060, 19778]",1.0,1734,best_practice,205,Use of .copy() to avoid modifying the original DataFrame,,1734,,[]
‚úÖ Best Practice: Use of @property decorator for getter method to provide a read-only attribute,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446, 284, 2148, 257, 1100, 12, 8807, 11688]",1.0,1742,best_practice,207,Use of @property decorator for getter method to provide a read-only attribute,,1734,        pass,"[220, 220, 220, 220, 220, 220, 220, 1208]"
‚úÖ Best Practice: Use of type hint for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1750,best_practice,207,Use of type hint for return type improves code readability and maintainability,,1742,        pass,"[220, 220, 220, 220, 220, 220, 220, 1208]"
üß† ML Signal: Hardcoded date values can indicate fixed starting points or baselines in data processing,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3128, 3815, 460, 7603, 5969, 3599, 2173, 393, 1615, 20655, 287, 1366, 7587]",0.5,1775,ml_signal,209,Hardcoded date values can indicate fixed starting points or baselines in data processing,,1750,"    def filter_df(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 8106, 62, 7568, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
üß† ML Signal: Method signature with return type hint indicating expected output type,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 1441, 2099, 9254, 12739, 2938, 5072, 2099]",0.5,1800,ml_signal,209,Method signature with return type hint indicating expected output type,,1775,"    def filter_df(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 8106, 62, 7568, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
‚úÖ Best Practice: Type hinting for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,1826,best_practice,211,Type hinting for the return type improves code readability and maintainability,,1800,"            _df = df.loc[:, [""Symbol""]].copy()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 7568, 796, 47764, 13, 17946, 58, 45299, 14631, 13940, 23650, 8973, 4083, 30073, 3419]"
‚úÖ Best Practice: Checking if a column exists before accessing it prevents runtime errors,"[26486, 227, 6705, 19939, 25, 39432, 611, 257, 5721, 7160, 878, 22534, 340, 15174, 19124, 8563]",1.0,1840,best_practice,213,Checking if a column exists before accessing it prevents runtime errors,,1826,            return _df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 4808, 7568]"
üß† ML Signal: Usage of DataFrame column filtering pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 5721, 25431, 3912]",0.5,1852,ml_signal,215,Usage of DataFrame column filtering pattern,,1840,    def parse_instruments(self):,"[220, 220, 220, 825, 21136, 62, 259, 2536, 2886, 7, 944, 2599]"
‚úÖ Best Practice: Using .copy() to avoid SettingWithCopyWarning and ensure a new DataFrame is returned,"[26486, 227, 6705, 19939, 25, 8554, 764, 30073, 3419, 284, 3368, 25700, 3152, 29881, 20361, 290, 4155, 257, 649, 6060, 19778, 318, 4504]",0.5,1874,best_practice,216,Using .copy() to avoid SettingWithCopyWarning and ensure a new DataFrame is returned,,1852,"        logger.warning(f""No suitable data source has been found!"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 2949, 11080, 1366, 2723, 468, 587, 1043, 2474, 8]"
‚ö†Ô∏è SAST Risk (Low): Logging warning messages without context can lead to confusion during debugging.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6509, 6218, 1231, 4732, 460, 1085, 284, 10802, 1141, 28769, 13]",0.5,1886,sast_risk,215,Logging warning messages without context can lead to confusion during debugging.,Low,1874,    def parse_instruments(self):,"[220, 220, 220, 825, 21136, 62, 259, 2536, 2886, 7, 944, 2599]"
‚úÖ Best Practice: Use the standard Python idiom for checking if a script is run as the main program.,"[26486, 227, 6705, 19939, 25, 5765, 262, 3210, 11361, 4686, 29005, 329, 10627, 611, 257, 4226, 318, 1057, 355, 262, 1388, 1430, 13]",1.0,1886,best_practice,217,Use the standard Python idiom for checking if a script is run as the main program.,,1886,,[]
üß† ML Signal: Usage of the 'fire' library indicates a command-line interface pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 262, 705, 6495, 6, 5888, 9217, 257, 3141, 12, 1370, 7071, 3912, 13]",1.0,1886,ml_signal,217,Usage of the 'fire' library indicates a command-line interface pattern.,,1886,,[]
‚ö†Ô∏è SAST Risk (Low): Using 'fire.Fire' can execute arbitrary code if user input is not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 705, 6495, 13, 13543, 6, 460, 12260, 14977, 2438, 611, 2836, 5128, 318, 407, 6105, 5336, 36951, 13]",0.5,1886,sast_risk,217,Using 'fire.Fire' can execute arbitrary code if user input is not properly sanitized.,Low,1886,,[]
"‚úÖ Best Practice: Use 'partial' from 'functools' to fix certain arguments of a function, improving code readability.","[26486, 227, 6705, 19939, 25, 5765, 705, 47172, 6, 422, 705, 12543, 310, 10141, 6, 284, 4259, 1728, 7159, 286, 257, 2163, 11, 10068, 2438, 1100, 1799, 13]",0.5,1886,best_practice,217,"Use 'partial' from 'functools' to fix certain arguments of a function, improving code readability.",,1886,,[]

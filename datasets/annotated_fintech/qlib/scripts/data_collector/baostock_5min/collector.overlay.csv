annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Low): Modifying sys.path can lead to import conflicts or security issues if not handled carefully.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3401, 4035, 25064, 13, 6978, 460, 1085, 284, 1330, 12333, 393, 2324, 2428, 611, 407, 12118, 7773, 13]",1.0,7,sast_risk,14,Modifying sys.path can lead to import conflicts or security issues if not handled carefully.,Low,0,"from typing import Iterable, List","[6738, 19720, 1330, 40806, 540, 11, 7343]"
üß† ML Signal: Inheritance from a base class indicates a design pattern for code reuse and extension,"[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 257, 2779, 1398, 9217, 257, 1486, 3912, 329, 2438, 32349, 290, 7552]",0.5,7,ml_signal,18,Inheritance from a base class indicates a design pattern for code reuse and extension,,7,,[]
‚úÖ Best Practice: Use of docstring to describe parameters and their default values,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 10007, 290, 511, 4277, 3815]",1.0,18,best_practice,30,Use of docstring to describe parameters and their default values,,7,"        start=None,","[220, 220, 220, 220, 220, 220, 220, 923, 28, 14202, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if bs.login() fails or raises an exception,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 275, 82, 13, 38235, 3419, 10143, 393, 12073, 281, 6631]",1.0,28,sast_risk,53,Potential risk if bs.login() fails or raises an exception,Low,18,        start: str,"[220, 220, 220, 220, 220, 220, 220, 923, 25, 965]"
‚úÖ Best Practice: Proper use of super() to initialize the parent class,"[26486, 227, 6705, 19939, 25, 45989, 779, 286, 2208, 3419, 284, 41216, 262, 2560, 1398]",1.0,38,best_practice,53,Proper use of super() to initialize the parent class,,28,        start: str,"[220, 220, 220, 220, 220, 220, 220, 923, 25, 965]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the 'bs.query_trade_dates' function handles input validation and sanitization to prevent potential injection attacks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 705, 1443, 13, 22766, 62, 25351, 62, 19581, 6, 2163, 17105, 5128, 21201, 290, 5336, 270, 1634, 284, 2948, 2785, 16954, 3434, 13]",0.5,63,sast_risk,69,Ensure that the 'bs.query_trade_dates' function handles input validation and sanitization to prevent potential injection attacks.,Low,38,"            max_collector_count=max_collector_count,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3509, 62, 33327, 273, 62, 9127, 28, 9806, 62, 33327, 273, 62, 9127, 11]"
‚úÖ Best Practice: Use 'and' instead of '&' for logical operations to improve readability and avoid confusion with bitwise operations.,"[26486, 227, 6705, 19939, 25, 5765, 705, 392, 6, 2427, 286, 705, 5, 6, 329, 12219, 4560, 284, 2987, 1100, 1799, 290, 3368, 10802, 351, 1643, 3083, 4560, 13]",0.5,84,best_practice,72,Use 'and' instead of '&' for logical operations to improve readability and avoid confusion with bitwise operations.,,63,"            limit_nums=limit_nums,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4179, 62, 77, 5700, 28, 32374, 62, 77, 5700, 11]"
üß† ML Signal: Appending data to a list in a loop is a common pattern that can be used to identify data collection or aggregation behavior.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 1366, 284, 257, 1351, 287, 257, 9052, 318, 257, 2219, 3912, 326, 460, 307, 973, 284, 5911, 1366, 4947, 393, 46500, 4069, 13]",0.5,84,ml_signal,74,Appending data to a list in a loop is a common pattern that can be used to identify data collection or aggregation behavior.,,84,,[]
üß† ML Signal: Creating a DataFrame from a list of data is a common pattern in data processing tasks.,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 6060, 19778, 422, 257, 1351, 286, 1366, 318, 257, 2219, 3912, 287, 1366, 7587, 8861, 13]",0.5,103,ml_signal,76,Creating a DataFrame from a list of data is a common pattern in data processing tasks.,,84,"        _format = ""%Y-%m-%d""","[220, 220, 220, 220, 220, 220, 220, 4808, 18982, 796, 36521, 56, 12, 4, 76, 12, 4, 67, 1]"
üß† ML Signal: Filtering a DataFrame based on a condition is a common data manipulation pattern.,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 257, 6060, 19778, 1912, 319, 257, 4006, 318, 257, 2219, 1366, 17512, 3912, 13]",0.5,124,ml_signal,78,Filtering a DataFrame based on a condition is a common data manipulation pattern.,,103,        end = self.end_datetime.strftime(_format),"[220, 220, 220, 220, 220, 220, 220, 886, 796, 2116, 13, 437, 62, 19608, 8079, 13, 2536, 31387, 28264, 18982, 8]"
üß† ML Signal: Returning specific columns or values from a DataFrame is a common pattern in data extraction tasks.,"[8582, 100, 254, 10373, 26484, 25, 42882, 2176, 15180, 393, 3815, 422, 257, 6060, 19778, 318, 257, 2219, 3912, 287, 1366, 22236, 8861, 13]",0.5,136,ml_signal,80,Returning specific columns or values from a DataFrame is a common pattern in data extraction tasks.,,124,        calendar_list = [],"[220, 220, 220, 220, 220, 220, 220, 11845, 62, 4868, 796, 17635]"
‚úÖ Best Practice: Use the @staticmethod decorator to indicate that the method does not modify the class or instance state.,"[26486, 227, 6705, 19939, 25, 5765, 262, 2488, 12708, 24396, 11705, 1352, 284, 7603, 326, 262, 2446, 857, 407, 13096, 262, 1398, 393, 4554, 1181, 13]",0.5,174,best_practice,84,Use the @staticmethod decorator to indicate that the method does not modify the class or instance state.,,136,"        trade_calendar_df = calendar_df[~calendar_df[""is_trading_day""].isin([""0""])]","[220, 220, 220, 220, 220, 220, 220, 3292, 62, 9948, 9239, 62, 7568, 796, 11845, 62, 7568, 58, 93, 9948, 9239, 62, 7568, 14692, 271, 62, 2213, 4980, 62, 820, 1, 4083, 45763, 7, 14692, 15, 8973, 15437]"
"üß† ML Signal: Function processes input based on specific string values, useful for learning conditional logic","[8582, 100, 254, 10373, 26484, 25, 15553, 7767, 5128, 1912, 319, 2176, 4731, 3815, 11, 4465, 329, 4673, 26340, 9156]",1.0,195,ml_signal,77,"Function processes input based on specific string values, useful for learning conditional logic",,174,        start = self.start_datetime.strftime(_format),"[220, 220, 220, 220, 220, 220, 220, 923, 796, 2116, 13, 9688, 62, 19608, 8079, 13, 2536, 31387, 28264, 18982, 8]"
"üß† ML Signal: Returns a dictionary based on input, useful for learning data transformation patterns","[8582, 100, 254, 10373, 26484, 25, 16409, 257, 22155, 1912, 319, 5128, 11, 4465, 329, 4673, 1366, 13389, 7572]",0.5,225,ml_signal,79,"Returns a dictionary based on input, useful for learning data transformation patterns",,195,"        rs = bs.query_trade_dates(start_date=start, end_date=end)","[220, 220, 220, 220, 220, 220, 220, 44608, 796, 275, 82, 13, 22766, 62, 25351, 62, 19581, 7, 9688, 62, 4475, 28, 9688, 11, 886, 62, 4475, 28, 437, 8]"
‚úÖ Best Practice: Use elif for mutually exclusive conditions to improve readability,"[26486, 227, 6705, 19939, 25, 5765, 1288, 361, 329, 26519, 8568, 3403, 284, 2987, 1100, 1799]",0.5,248,best_practice,81,Use elif for mutually exclusive conditions to improve readability,,225,"        while (rs.error_code == ""0"") & rs.next():","[220, 220, 220, 220, 220, 220, 220, 981, 357, 3808, 13, 18224, 62, 8189, 6624, 366, 15, 4943, 1222, 44608, 13, 19545, 33529]"
"üß† ML Signal: Returns a dictionary based on input, useful for learning data transformation patterns","[8582, 100, 254, 10373, 26484, 25, 16409, 257, 22155, 1912, 319, 5128, 11, 4465, 329, 4673, 1366, 13389, 7572]",0.5,286,ml_signal,84,"Returns a dictionary based on input, useful for learning data transformation patterns",,248,"        trade_calendar_df = calendar_df[~calendar_df[""is_trading_day""].isin([""0""])]","[220, 220, 220, 220, 220, 220, 220, 3292, 62, 9948, 9239, 62, 7568, 796, 11845, 62, 7568, 58, 93, 9948, 9239, 62, 7568, 14692, 271, 62, 2213, 4980, 62, 820, 1, 4083, 45763, 7, 14692, 15, 8973, 15437]"
üß† ML Signal: Usage of a method to fetch data from a remote source,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 21207, 1366, 422, 257, 6569, 2723]",1.0,324,ml_signal,84,Usage of a method to fetch data from a remote source,,286,"        trade_calendar_df = calendar_df[~calendar_df[""is_trading_day""].isin([""0""])]","[220, 220, 220, 220, 220, 220, 220, 3292, 62, 9948, 9239, 62, 7568, 796, 11845, 62, 7568, 58, 93, 9948, 9239, 62, 7568, 14692, 271, 62, 2213, 4980, 62, 820, 1, 4083, 45763, 7, 14692, 15, 8973, 15437]"
‚úÖ Best Practice: Explicitly setting DataFrame column names for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6060, 19778, 5721, 3891, 329, 16287]",1.0,338,best_practice,88,Explicitly setting DataFrame column names for clarity,,324,    def process_interval(interval: str):,"[220, 220, 220, 825, 1429, 62, 3849, 2100, 7, 3849, 2100, 25, 965, 2599]"
‚úÖ Best Practice: Converting string to datetime for proper time handling,"[26486, 227, 6705, 19939, 25, 35602, 889, 4731, 284, 4818, 8079, 329, 1774, 640, 9041]",1.0,380,best_practice,90,Converting string to datetime for proper time handling,,338,"            return {""interval"": ""d"", ""fields"": ""date,code,open,high,low,close,volume,amount,adjustflag""}","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 19779, 3849, 2100, 1298, 366, 67, 1600, 366, 25747, 1298, 366, 4475, 11, 8189, 11, 9654, 11, 8929, 11, 9319, 11, 19836, 11, 29048, 11, 17287, 11, 23032, 32109, 20662]"
‚úÖ Best Practice: Formatting datetime for consistency,"[26486, 227, 6705, 19939, 25, 18980, 889, 4818, 8079, 329, 15794]",1.0,424,best_practice,92,Formatting datetime for consistency,,380,"            return {""interval"": ""5"", ""fields"": ""date,time,code,open,high,low,close,volume,amount,adjustflag""}","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 19779, 3849, 2100, 1298, 366, 20, 1600, 366, 25747, 1298, 366, 4475, 11, 2435, 11, 8189, 11, 9654, 11, 8929, 11, 9319, 11, 19836, 11, 29048, 11, 17287, 11, 23032, 32109, 20662]"
‚ö†Ô∏è SAST Risk (Low): Potential timezone issues when subtracting fixed time deltas,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 2428, 618, 34128, 278, 5969, 640, 1619, 83, 292]",0.5,424,sast_risk,93,Potential timezone issues when subtracting fixed time deltas,Low,424,,[]
‚úÖ Best Practice: Dropping unnecessary columns to save memory,"[26486, 227, 6705, 19939, 25, 21045, 2105, 13114, 15180, 284, 3613, 4088]",1.0,462,best_practice,95,Dropping unnecessary columns to save memory,,424,"        self, symbol: str, interval: str, start_datetime: pd.Timestamp, end_datetime: pd.Timestamp","[220, 220, 220, 220, 220, 220, 220, 2116, 11, 6194, 25, 965, 11, 16654, 25, 965, 11, 923, 62, 19608, 8079, 25, 279, 67, 13, 14967, 27823, 11, 886, 62, 19608, 8079, 25, 279, 67, 13, 14967, 27823]"
‚úÖ Best Practice: Normalizing symbol format for consistency,"[26486, 227, 6705, 19939, 25, 14435, 2890, 6194, 5794, 329, 15794]",1.0,502,best_practice,98,Normalizing symbol format for consistency,,462,"            symbol=symbol, interval=interval, start_datetime=start_datetime, end_datetime=end_datetime","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 28, 1837, 23650, 11, 16654, 28, 3849, 2100, 11, 923, 62, 19608, 8079, 28, 9688, 62, 19608, 8079, 11, 886, 62, 19608, 8079, 28, 437, 62, 19608, 8079]"
"‚úÖ Best Practice: Initialize the DataFrame to ensure it is always defined, even if the query fails.","[26486, 227, 6705, 19939, 25, 20768, 1096, 262, 6060, 19778, 284, 4155, 340, 318, 1464, 5447, 11, 772, 611, 262, 12405, 10143, 13]",1.0,542,best_practice,98,"Initialize the DataFrame to ensure it is always defined, even if the query fails.",,502,"            symbol=symbol, interval=interval, start_datetime=start_datetime, end_datetime=end_datetime","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 28, 1837, 23650, 11, 16654, 28, 3849, 2100, 11, 923, 62, 19608, 8079, 28, 9688, 62, 19608, 8079, 11, 886, 62, 19608, 8079, 28, 437, 62, 19608, 8079]"
"üß† ML Signal: Usage of external API to fetch data, which can be a pattern for data retrieval tasks.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 7824, 284, 21207, 1366, 11, 543, 460, 307, 257, 3912, 329, 1366, 45069, 8861, 13]",0.5,550,ml_signal,99,"Usage of external API to fetch data, which can be a pattern for data retrieval tasks.",,542,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
"üß† ML Signal: Dynamic field selection based on interval, indicating a pattern of flexible data requests.","[8582, 100, 254, 10373, 26484, 25, 26977, 2214, 6356, 1912, 319, 16654, 11, 12739, 257, 3912, 286, 12846, 1366, 7007, 13]",0.5,558,ml_signal,99,"Dynamic field selection based on interval, indicating a pattern of flexible data requests.",,550,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Explicit conversion of datetime to string for API compatibility.,"[26486, 227, 6705, 19939, 25, 11884, 11315, 286, 4818, 8079, 284, 4731, 329, 7824, 17764, 13]",0.5,558,best_practice,107,Explicit conversion of datetime to string for API compatibility.,,558,,[]
‚úÖ Best Practice: Explicit conversion of datetime to string for API compatibility.,"[26486, 227, 6705, 19939, 25, 11884, 11315, 286, 4818, 8079, 284, 4731, 329, 7824, 17764, 13]",0.5,558,best_practice,107,Explicit conversion of datetime to string for API compatibility.,,558,,[]
"üß† ML Signal: Dynamic interval processing, indicating a pattern of flexible data requests.","[8582, 100, 254, 10373, 26484, 25, 26977, 16654, 7587, 11, 12739, 257, 3912, 286, 12846, 1366, 7007, 13]",0.5,570,ml_signal,109,"Dynamic interval processing, indicating a pattern of flexible data requests.",,558,    def get_data_from_remote(,"[220, 220, 220, 825, 651, 62, 7890, 62, 6738, 62, 47960, 7]"
‚ö†Ô∏è SAST Risk (Low): No error handling for API call failures other than checking error_code.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 7824, 869, 15536, 584, 621, 10627, 4049, 62, 8189, 13]",0.5,592,sast_risk,113,No error handling for API call failures other than checking error_code.,Low,570,        rs = bs.query_history_k_data_plus(,"[220, 220, 220, 220, 220, 220, 220, 44608, 796, 275, 82, 13, 22766, 62, 23569, 62, 74, 62, 7890, 62, 9541, 7]"
‚úÖ Best Practice: Construct DataFrame with specified columns for clarity and structure.,"[26486, 227, 6705, 19939, 25, 28407, 6060, 19778, 351, 7368, 15180, 329, 16287, 290, 4645, 13]",1.0,627,best_practice,117,Construct DataFrame with specified columns for clarity and structure.,,592,"            end_date=str(end_datetime.strftime(""%Y-%m-%d"")),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 4475, 28, 2536, 7, 437, 62, 19608, 8079, 13, 2536, 31387, 7203, 4, 56, 12, 4, 76, 12, 4, 67, 4943, 828]"
"‚úÖ Best Practice: Return a DataFrame, ensuring consistent return type.","[26486, 227, 6705, 19939, 25, 8229, 257, 6060, 19778, 11, 13359, 6414, 1441, 2099, 13]",1.0,643,best_practice,119,"Return a DataFrame, ensuring consistent return type.",,627,"            adjustflag=""3"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4532, 32109, 2625, 18, 1600]"
üß† ML Signal: Usage of tqdm for progress tracking indicates a pattern of processing large datasets,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 256, 80, 36020, 329, 4371, 9646, 9217, 257, 3912, 286, 7587, 1588, 40522]",0.5,678,ml_signal,115,Usage of tqdm for progress tracking indicates a pattern of processing large datasets,,643,"            BaostockCollectorHS3005min.process_interval(interval=interval)[""fields""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8999, 455, 735, 31337, 273, 7998, 6200, 20, 1084, 13, 14681, 62, 3849, 2100, 7, 3849, 2100, 28, 3849, 2100, 8, 14692, 25747, 33116]"
‚ö†Ô∏è SAST Risk (Low): Potential for large data retrieval without error handling for network issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1588, 1366, 45069, 1231, 4049, 9041, 329, 3127, 2428]",0.5,716,sast_risk,118,Potential for large data retrieval without error handling for network issues,Low,678,"            frequency=BaostockCollectorHS3005min.process_interval(interval=interval)[""interval""],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8373, 28, 34458, 455, 735, 31337, 273, 7998, 6200, 20, 1084, 13, 14681, 62, 3849, 2100, 7, 3849, 2100, 28, 3849, 2100, 8, 14692, 3849, 2100, 33116]"
"‚ö†Ô∏è SAST Risk (Low): Loop may become infinite if error_code is never ""0""","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 26304, 743, 1716, 15541, 611, 4049, 62, 8189, 318, 1239, 366, 15, 1]",1.0,724,sast_risk,120,"Loop may become infinite if error_code is never ""0""",Low,716,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Appending data to a list in a loop is a common pattern for data collection,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 1366, 284, 257, 1351, 287, 257, 9052, 318, 257, 2219, 3912, 329, 1366, 4947]",0.5,742,ml_signal,122,Appending data to a list in a loop is a common pattern for data collection,,724,            data_list = rs.data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 62, 4868, 796, 44608, 13, 7890]"
üß† ML Signal: Progress bar update in a loop indicates iterative processing,"[8582, 100, 254, 10373, 26484, 25, 18387, 2318, 4296, 287, 257, 9052, 9217, 11629, 876, 7587]",0.5,770,ml_signal,124,Progress bar update in a loop indicates iterative processing,,742,"            df = pd.DataFrame(data_list, columns=columns)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 7, 7890, 62, 4868, 11, 15180, 28, 28665, 82, 8]"
‚úÖ Best Practice: Using a set comprehension to remove duplicates before sorting,"[26486, 227, 6705, 19939, 25, 8554, 257, 900, 35915, 284, 4781, 14184, 16856, 878, 29407]",0.5,770,best_practice,126,Using a set comprehension to remove duplicates before sorting,,770,,[]
‚úÖ Best Practice: Method name should be descriptive of its functionality,"[26486, 227, 6705, 19939, 25, 11789, 1438, 815, 307, 35644, 286, 663, 11244]",0.5,788,best_practice,122,Method name should be descriptive of its functionality,,770,            data_list = rs.data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 62, 4868, 796, 44608, 13, 7890]"
üß† ML Signal: Logging usage pattern for tracking execution flow,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9646, 9706, 5202]",1.0,816,ml_signal,124,Logging usage pattern for tracking execution flow,,788,"            df = pd.DataFrame(data_list, columns=columns)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 7, 7890, 62, 4868, 11, 15180, 28, 28665, 82, 8]"
üß† ML Signal: Method call pattern for retrieving data,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 50122, 1366]",1.0,816,ml_signal,126,Method call pattern for retrieving data,,816,,[]
üß† ML Signal: Logging usage pattern for tracking execution flow,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9646, 9706, 5202]",1.0,830,ml_signal,128,Logging usage pattern for tracking execution flow,,816,        hs300_stocks = [],"[220, 220, 220, 220, 220, 220, 220, 289, 82, 6200, 62, 29522, 796, 17635]"
üß† ML Signal: Return statement pattern for method output,"[8582, 100, 254, 10373, 26484, 25, 8229, 2643, 3912, 329, 2446, 5072]",1.0,856,ml_signal,130,Return statement pattern for method output,,830,        with tqdm(total=len(trade_calendar)) as p_bar:,"[220, 220, 220, 220, 220, 220, 220, 351, 256, 80, 36020, 7, 23350, 28, 11925, 7, 25351, 62, 9948, 9239, 4008, 355, 279, 62, 5657, 25]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,876,best_practice,127,Consider adding a docstring to describe the function's purpose and parameters,,856,    def get_hs300_symbols(self) -> List[str]:,"[220, 220, 220, 825, 651, 62, 11994, 6200, 62, 1837, 2022, 10220, 7, 944, 8, 4613, 7343, 58, 2536, 5974]"
üß† ML Signal: Usage of string manipulation methods to normalize input,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4731, 17512, 5050, 284, 3487, 1096, 5128]",0.5,897,ml_signal,129,Usage of string manipulation methods to normalize input,,876,        trade_calendar = self.get_trade_calendar(),"[220, 220, 220, 220, 220, 220, 220, 3292, 62, 9948, 9239, 796, 2116, 13, 1136, 62, 25351, 62, 9948, 9239, 3419]"
‚úÖ Best Practice: Ensure input is a string before processing,"[26486, 227, 6705, 19939, 25, 48987, 5128, 318, 257, 4731, 878, 7587]",0.5,923,best_practice,130,Ensure input is a string before processing,,897,        with tqdm(total=len(trade_calendar)) as p_bar:,"[220, 220, 220, 220, 220, 220, 220, 351, 256, 80, 36020, 7, 23350, 28, 11925, 7, 25351, 62, 9948, 9239, 4008, 355, 279, 62, 5657, 25]"
"üß† ML Signal: Class definition with specific naming pattern, useful for classifying or identifying domain-specific classes","[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 351, 2176, 19264, 3912, 11, 4465, 329, 1398, 4035, 393, 13720, 7386, 12, 11423, 6097]",0.5,944,ml_signal,129,"Class definition with specific naming pattern, useful for classifying or identifying domain-specific classes",,923,        trade_calendar = self.get_trade_calendar(),"[220, 220, 220, 220, 220, 220, 220, 3292, 62, 9948, 9239, 796, 2116, 13, 1136, 62, 25351, 62, 9948, 9239, 3419]"
"üß† ML Signal: Use of class-level constants, indicating a pattern of configuration or fixed parameters","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 38491, 11, 12739, 257, 3912, 286, 8398, 393, 5969, 10007]",0.5,963,ml_signal,131,"Use of class-level constants, indicating a pattern of configuration or fixed parameters",,944,            for date in trade_calendar:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 3128, 287, 3292, 62, 9948, 9239, 25]"
"üß† ML Signal: Time range constants, indicating a pattern of time-based data processing","[8582, 100, 254, 10373, 26484, 25, 3862, 2837, 38491, 11, 12739, 257, 3912, 286, 640, 12, 3106, 1366, 7587]",0.5,993,ml_signal,133,"Time range constants, indicating a pattern of time-based data processing",,963,"                while rs.error_code == ""0"" and rs.next():","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 981, 44608, 13, 18224, 62, 8189, 6624, 366, 15, 1, 290, 44608, 13, 19545, 33529]"
"üß† ML Signal: Time range constants, indicating a pattern of time-based data processing","[8582, 100, 254, 10373, 26484, 25, 3862, 2837, 38491, 11, 12739, 257, 3912, 286, 640, 12, 3106, 1366, 7587]",0.5,1016,ml_signal,136,"Time range constants, indicating a pattern of time-based data processing",,993,        return sorted({e[1] for e in hs300_stocks}),"[220, 220, 220, 220, 220, 220, 220, 1441, 23243, 15090, 68, 58, 16, 60, 329, 304, 287, 289, 82, 6200, 62, 29522, 30072]"
‚úÖ Best Practice: Use of type hints for function parameters improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1039,best_practice,136,Use of type hints for function parameters improves code readability and maintainability.,,1016,        return sorted({e[1] for e in hs300_stocks}),"[220, 220, 220, 220, 220, 220, 220, 1441, 23243, 15090, 68, 58, 16, 60, 329, 304, 287, 289, 82, 6200, 62, 29522, 30072]"
‚ö†Ô∏è SAST Risk (Medium): Ensure that the login credentials are securely managed and not hardcoded.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 48987, 326, 262, 17594, 18031, 389, 30835, 5257, 290, 407, 1327, 40976, 13]",0.5,1054,sast_risk,148,Ensure that the login credentials are securely managed and not hardcoded.,Medium,1039,class BaostockNormalizeHS3005min(BaseNormalize):,"[4871, 8999, 455, 735, 26447, 1096, 7998, 6200, 20, 1084, 7, 14881, 26447, 1096, 2599]"
‚ö†Ô∏è SAST Risk (Low): Validate the input path to prevent potential path traversal issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3254, 20540, 262, 5128, 3108, 284, 2948, 2785, 3108, 33038, 282, 2428, 13]",0.5,1076,sast_risk,149,Validate the input path to prevent potential path traversal issues.,Low,1054,"    COLUMNS = [""open"", ""close"", ""high"", ""low"", ""volume""]","[220, 220, 220, 20444, 5883, 8035, 796, 14631, 9654, 1600, 366, 19836, 1600, 366, 8929, 1600, 366, 9319, 1600, 366, 29048, 8973]"
üß† ML Signal: Collecting features from all instruments could be used to train models on financial data.,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 3033, 422, 477, 12834, 714, 307, 973, 284, 4512, 4981, 319, 3176, 1366, 13]",0.5,1076,ml_signal,152,Collecting features from all instruments could be used to train models on financial data.,,1076,,[]
‚úÖ Best Practice: Explicitly calling the superclass's __init__ method ensures proper initialization.,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 13]",1.0,1126,best_practice,154,Explicitly calling the superclass's __init__ method ensures proper initialization.,,1076,"        self, qlib_data_1d_dir: [str, Path], date_field_name: str = ""date"", symbol_field_name: str = ""symbol"", **kwargs","[220, 220, 220, 220, 220, 220, 220, 2116, 11, 10662, 8019, 62, 7890, 62, 16, 67, 62, 15908, 25, 685, 2536, 11, 10644, 4357, 3128, 62, 3245, 62, 3672, 25, 965, 796, 366, 4475, 1600, 6194, 62, 3245, 62, 3672, 25, 965, 796, 366, 1837, 23650, 1600, 12429, 46265, 22046]"
‚úÖ Best Practice: Use of .copy() to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 286, 764, 30073, 3419, 284, 3368, 30620, 262, 2656, 6060, 19778]",0.5,1126,best_practice,152,Use of .copy() to avoid modifying the original DataFrame,,1126,,[]
üß† ML Signal: Filling missing values with forward fill indicates time series data handling,"[8582, 100, 254, 10373, 26484, 25, 376, 4509, 4814, 3815, 351, 2651, 6070, 9217, 640, 2168, 1366, 9041]",0.5,1176,ml_signal,154,Filling missing values with forward fill indicates time series data handling,,1126,"        self, qlib_data_1d_dir: [str, Path], date_field_name: str = ""date"", symbol_field_name: str = ""symbol"", **kwargs","[220, 220, 220, 220, 220, 220, 220, 2116, 11, 10662, 8019, 62, 7890, 62, 16, 67, 62, 15908, 25, 685, 2536, 11, 10644, 4357, 3128, 62, 3245, 62, 3672, 25, 965, 796, 366, 4475, 1600, 6194, 62, 3245, 62, 3672, 25, 965, 796, 366, 1837, 23650, 1600, 12429, 46265, 22046]"
üß† ML Signal: Use of .shift() suggests calculation of changes over time,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 764, 30846, 3419, 5644, 17952, 286, 2458, 625, 640]",0.5,1184,ml_signal,156,Use of .shift() suggests calculation of changes over time,,1176,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if df is empty and last_close is not None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 47764, 318, 6565, 290, 938, 62, 19836, 318, 407, 6045]",1.0,1192,sast_risk,158,Potential IndexError if df is empty and last_close is not None,Low,1184,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚ö†Ô∏è SAST Risk (Low): Use of .iloc[0] without checking if the DataFrame is empty,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 764, 346, 420, 58, 15, 60, 1231, 10627, 611, 262, 6060, 19778, 318, 6565]",0.5,1212,sast_risk,160,Use of .iloc[0] without checking if the DataFrame is empty,Low,1192,"        qlib_data_1d_dir: str, Path","[220, 220, 220, 220, 220, 220, 220, 10662, 8019, 62, 7890, 62, 16, 67, 62, 15908, 25, 965, 11, 10644]"
üß† ML Signal: Calculation of percentage change is common in financial data analysis,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 5873, 1487, 318, 2219, 287, 3176, 1366, 3781]",1.0,1226,ml_signal,162,Calculation of percentage change is common in financial data analysis,,1212,        date_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965]"
"üß† ML Signal: Method returns an iterable of timestamps, indicating time-based data processing","[8582, 100, 254, 10373, 26484, 25, 11789, 5860, 281, 11629, 540, 286, 4628, 395, 9430, 11, 12739, 640, 12, 3106, 1366, 7587]",0.5,1246,ml_signal,160,"Method returns an iterable of timestamps, indicating time-based data processing",,1226,"        qlib_data_1d_dir: str, Path","[220, 220, 220, 220, 220, 220, 220, 10662, 8019, 62, 7890, 62, 16, 67, 62, 15908, 25, 965, 11, 10644]"
üß† ML Signal: Use of getattr to check for cached attribute,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 651, 35226, 284, 2198, 329, 39986, 11688]",1.0,1264,ml_signal,163,Use of getattr to check for cached attribute,,1246,"            date field name, default is date","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3128, 2214, 1438, 11, 4277, 318, 3128]"
üß† ML Signal: Lazy loading pattern,"[8582, 100, 254, 10373, 26484, 25, 406, 12582, 11046, 3912]",0.5,1272,ml_signal,166,Lazy loading pattern,,1264,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Use of setattr to cache attribute,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 900, 35226, 284, 12940, 11688]",1.0,1284,ml_signal,167,Use of setattr to cache attribute,,1272,        bs.login(),"[220, 220, 220, 220, 220, 220, 220, 275, 82, 13, 38235, 3419]"
‚úÖ Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,1331,best_practice,169,Consider adding type hints for the function parameters and return type for better readability and maintainability.,,1284,"        self.all_1d_data = D.features(D.instruments(""all""), [""$paused"", ""$volume"", ""$factor"", ""$close""], freq=""day"")","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 439, 62, 16, 67, 62, 7890, 796, 360, 13, 40890, 7, 35, 13, 259, 2536, 2886, 7203, 439, 12340, 14631, 3, 8957, 1484, 1600, 17971, 29048, 1600, 17971, 31412, 1600, 17971, 19836, 33116, 2030, 80, 2625, 820, 4943]"
‚úÖ Best Practice: Early return for empty DataFrame improves code readability and efficiency.,"[26486, 227, 6705, 19939, 25, 12556, 1441, 329, 6565, 6060, 19778, 19575, 2438, 1100, 1799, 290, 9332, 13]",0.5,1346,best_practice,177,Early return for empty DataFrame improves code readability and efficiency.,,1331,        if last_close is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 938, 62, 19836, 318, 407, 6045, 25]"
üß† ML Signal: Extracting a symbol from the DataFrame could indicate a pattern of interest for ML models.,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 257, 6194, 422, 262, 6060, 19778, 714, 7603, 257, 3912, 286, 1393, 329, 10373, 4981, 13]",0.5,1357,ml_signal,180,Extracting a symbol from the DataFrame could indicate a pattern of interest for ML models.,,1346,        return change_series,"[220, 220, 220, 220, 220, 220, 220, 1441, 1487, 62, 25076]"
‚ö†Ô∏è SAST Risk (Low): Deep copying can be resource-intensive; ensure it's necessary.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 10766, 23345, 460, 307, 8271, 12, 38096, 26, 4155, 340, 338, 3306, 13]",0.5,1380,sast_risk,182,Deep copying can be resource-intensive; ensure it's necessary.,Low,1357,    def _get_calendar_list(self) -> Iterable[pd.Timestamp]:,"[220, 220, 220, 825, 4808, 1136, 62, 9948, 9239, 62, 4868, 7, 944, 8, 4613, 40806, 540, 58, 30094, 13, 14967, 27823, 5974]"
‚úÖ Best Practice: Copying the DataFrame before modifying it to avoid side effects on the original data.,"[26486, 227, 6705, 19939, 25, 6955, 1112, 262, 6060, 19778, 878, 30620, 340, 284, 3368, 1735, 3048, 319, 262, 2656, 1366, 13]",0.5,1380,best_practice,184,Copying the DataFrame before modifying it to avoid side effects on the original data.,,1380,,[]
‚úÖ Best Practice: Setting the index to a specific field improves data manipulation and access efficiency.,"[26486, 227, 6705, 19939, 25, 25700, 262, 6376, 284, 257, 2176, 2214, 19575, 1366, 17512, 290, 1895, 9332, 13]",1.0,1385,best_practice,185,Setting the index to a specific field improves data manipulation and access efficiency.,,1380,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Converting index to datetime ensures proper date operations and comparisons.,"[26486, 227, 6705, 19939, 25, 35602, 889, 6376, 284, 4818, 8079, 19047, 1774, 3128, 4560, 290, 17909, 13]",0.5,1417,best_practice,190,Converting index to datetime ensures proper date operations and comparisons.,,1385,"            setattr(self, ""_calendar_list_1d"", calendar_list_1d)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 35226, 7, 944, 11, 45434, 9948, 9239, 62, 4868, 62, 16, 67, 1600, 11845, 62, 4868, 62, 16, 67, 8]"
‚úÖ Best Practice: Removing duplicate indices to maintain data integrity.,"[26486, 227, 6705, 19939, 25, 3982, 5165, 23418, 36525, 284, 5529, 1366, 11540, 13]",1.0,1449,best_practice,190,Removing duplicate indices to maintain data integrity.,,1417,"            setattr(self, ""_calendar_list_1d"", calendar_list_1d)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 35226, 7, 944, 11, 45434, 9948, 9239, 62, 4868, 62, 16, 67, 1600, 11845, 62, 4868, 62, 16, 67, 8]"
‚úÖ Best Practice: Reindexing with a calendar list ensures the DataFrame aligns with expected dates.,"[26486, 227, 6705, 19939, 25, 797, 9630, 278, 351, 257, 11845, 1351, 19047, 262, 6060, 19778, 10548, 82, 351, 2938, 9667, 13]",0.5,1455,best_practice,193,Reindexing with a calendar list ensures the DataFrame aligns with expected dates.,,1449,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
‚úÖ Best Practice: Sorting the DataFrame by index ensures chronological order.,"[26486, 227, 6705, 19939, 25, 311, 24707, 262, 6060, 19778, 416, 6376, 19047, 45946, 1502, 13]",0.5,1470,best_practice,199,Sorting the DataFrame by index ensures chronological order.,,1455,"        last_close: float = None,","[220, 220, 220, 220, 220, 220, 220, 938, 62, 19836, 25, 12178, 796, 6045, 11]"
‚ö†Ô∏è SAST Risk (Low): Directly manipulating DataFrame values; ensure proper handling of NaN and zero values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 29349, 6060, 19778, 3815, 26, 4155, 1774, 9041, 286, 11013, 45, 290, 6632, 3815, 13]",0.5,1482,sast_risk,201,Directly manipulating DataFrame values; ensure proper handling of NaN and zero values.,Low,1470,        if df.empty:,"[220, 220, 220, 220, 220, 220, 220, 611, 47764, 13, 28920, 25]"
üß† ML Signal: Calculating change could be a feature of interest for ML models.,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 1487, 714, 307, 257, 3895, 286, 1393, 329, 10373, 4981, 13]",0.5,1516,ml_signal,203,Calculating change could be a feature of interest for ML models.,,1482,"        symbol = df.loc[df[symbol_field_name].first_valid_index(), symbol_field_name]","[220, 220, 220, 220, 220, 220, 220, 6194, 796, 47764, 13, 17946, 58, 7568, 58, 1837, 23650, 62, 3245, 62, 3672, 4083, 11085, 62, 12102, 62, 9630, 22784, 6194, 62, 3245, 62, 3672, 60]"
‚ö†Ô∏è SAST Risk (Low): Reassigning NaN values based on conditions; ensure this logic is correct and safe.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 797, 562, 38944, 11013, 45, 3815, 1912, 319, 3403, 26, 4155, 428, 9156, 318, 3376, 290, 3338, 13]",0.5,1550,sast_risk,203,Reassigning NaN values based on conditions; ensure this logic is correct and safe.,Low,1516,"        symbol = df.loc[df[symbol_field_name].first_valid_index(), symbol_field_name]","[220, 220, 220, 220, 220, 220, 220, 6194, 796, 47764, 13, 17946, 58, 7568, 58, 1837, 23650, 62, 3245, 62, 3672, 4083, 11085, 62, 12102, 62, 9630, 22784, 6194, 62, 3245, 62, 3672, 60]"
üß† ML Signal: Assigning a constant symbol to a column could be a feature of interest for ML models.,"[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 257, 6937, 6194, 284, 257, 5721, 714, 307, 257, 3895, 286, 1393, 329, 10373, 4981, 13]",0.5,1568,ml_signal,210,Assigning a constant symbol to a column could be a feature of interest for ML models.,,1550,            df = df.reindex(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 260, 9630, 7]"
‚úÖ Best Practice: Naming the index improves code readability and data manipulation.,"[26486, 227, 6705, 19939, 25, 399, 3723, 262, 6376, 19575, 2438, 1100, 1799, 290, 1366, 17512, 13]",0.5,1586,best_practice,210,Naming the index improves code readability and data manipulation.,,1568,            df = df.reindex(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 260, 9630, 7]"
‚úÖ Best Practice: Resetting the index to return a DataFrame with a default integer index.,"[26486, 227, 6705, 19939, 25, 30027, 889, 262, 6376, 284, 1441, 257, 6060, 19778, 351, 257, 4277, 18253, 6376, 13]",0.5,1646,best_practice,212,Resetting the index to return a DataFrame with a default integer index.,,1586,                .loc[pd.Timestamp(df.index.min()).date() : pd.Timestamp(df.index.max()).date() + pd.Timedelta(days=1)],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 17946, 58, 30094, 13, 14967, 27823, 7, 7568, 13, 9630, 13, 1084, 3419, 737, 4475, 3419, 1058, 279, 67, 13, 14967, 27823, 7, 7568, 13, 9630, 13, 9806, 3419, 737, 4475, 3419, 1343, 279, 67, 13, 14967, 276, 12514, 7, 12545, 28, 16, 15437]"
üß† ML Signal: Method signature and parameter types can be used to infer function behavior and usage patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 290, 11507, 3858, 460, 307, 973, 284, 13249, 2163, 4069, 290, 8748, 7572]",0.5,1665,ml_signal,198,Method signature and parameter types can be used to infer function behavior and usage patterns,,1646,"        symbol_field_name: str = ""symbol"",","[220, 220, 220, 220, 220, 220, 220, 6194, 62, 3245, 62, 3672, 25, 965, 796, 366, 1837, 23650, 1600]"
üß† ML Signal: Function call with specific parameters can indicate common usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 460, 7603, 2219, 8748, 7572]",0.5,1680,ml_signal,199,Function call with specific parameters can indicate common usage patterns,,1665,"        last_close: float = None,","[220, 220, 220, 220, 220, 220, 220, 938, 62, 19836, 25, 12178, 796, 6045, 11]"
‚úÖ Best Practice: Using named parameters improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 8554, 3706, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1693,best_practice,202,Using named parameters improves code readability and maintainability,,1680,            return df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
‚úÖ Best Practice: Type hinting for the return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 262, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1706,best_practice,202,Type hinting for the return type improves code readability and maintainability,,1693,            return df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
"üß† ML Signal: Usage of a DataFrame suggests data manipulation, which is common in ML pipelines","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 6060, 19778, 5644, 1366, 17512, 11, 543, 318, 2219, 287, 10373, 31108]",0.5,1740,ml_signal,203,"Usage of a DataFrame suggests data manipulation, which is common in ML pipelines",,1706,"        symbol = df.loc[df[symbol_field_name].first_valid_index(), symbol_field_name]","[220, 220, 220, 220, 220, 220, 220, 6194, 796, 47764, 13, 17946, 58, 7568, 58, 1837, 23650, 62, 3245, 62, 3672, 4083, 11085, 62, 12102, 62, 9630, 22784, 6194, 62, 3245, 62, 3672, 60]"
‚úÖ Best Practice: Reassigning the DataFrame to the same variable name can help in reducing memory usage,"[26486, 227, 6705, 19939, 25, 797, 562, 38944, 262, 6060, 19778, 284, 262, 976, 7885, 1438, 460, 1037, 287, 8868, 4088, 8748]",0.5,1774,best_practice,203,Reassigning the DataFrame to the same variable name can help in reducing memory usage,,1740,"        symbol = df.loc[df[symbol_field_name].first_valid_index(), symbol_field_name]","[220, 220, 220, 220, 220, 220, 220, 6194, 796, 47764, 13, 17946, 58, 7568, 58, 1837, 23650, 62, 3245, 62, 3672, 4083, 11085, 62, 12102, 62, 9630, 22784, 6194, 62, 3245, 62, 3672, 60]"
üß† ML Signal: Named arguments indicate a pattern of using keyword arguments for clarity,"[8582, 100, 254, 10373, 26484, 25, 34441, 7159, 7603, 257, 3912, 286, 1262, 21179, 7159, 329, 16287]",0.5,1792,ml_signal,210,Named arguments indicate a pattern of using keyword arguments for clarity,,1774,            df = df.reindex(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 260, 9630, 7]"
üß† ML Signal: Usage of self attributes suggests object-oriented design patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 5644, 2134, 12, 17107, 1486, 7572]",1.0,1810,ml_signal,210,Usage of self attributes suggests object-oriented design patterns,,1792,            df = df.reindex(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 260, 9630, 7]"
üß† ML Signal: Usage of self attributes suggests object-oriented design patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 5644, 2134, 12, 17107, 1486, 7572]",1.0,1838,ml_signal,211,Usage of self attributes suggests object-oriented design patterns,,1810,                pd.DataFrame(index=calendar_list),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 6601, 19778, 7, 9630, 28, 9948, 9239, 62, 4868, 8]"
üß† ML Signal: Specific frequency setting indicates time-series data processing,"[8582, 100, 254, 10373, 26484, 25, 17377, 8373, 4634, 9217, 640, 12, 25076, 1366, 7587]",1.0,1855,ml_signal,213,Specific frequency setting indicates time-series data processing,,1838,                .index,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 9630]"
üß† ML Signal: Usage of self attributes suggests object-oriented design patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 12608, 5644, 2134, 12, 17107, 1486, 7572]",1.0,1873,ml_signal,215,Usage of self attributes suggests object-oriented design patterns,,1855,        df.sort_index(inplace=True),"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 30619, 62, 9630, 7, 259, 5372, 28, 17821, 8]"
‚úÖ Best Practice: Returning the DataFrame directly is clear and concise,"[26486, 227, 6705, 19939, 25, 42882, 262, 6060, 19778, 3264, 318, 1598, 290, 35327]",0.5,1906,best_practice,218,Returning the DataFrame directly is clear and concise,,1873,"        df[""change""] = BaostockNormalizeHS3005min.calc_change(df, last_close)","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 3803, 8973, 796, 8999, 455, 735, 26447, 1096, 7998, 6200, 20, 1084, 13, 9948, 66, 62, 3803, 7, 7568, 11, 938, 62, 19836, 8]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,1934,best_practice,211,Use of type hinting for return type improves code readability and maintainability,,1906,                pd.DataFrame(index=calendar_list),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 6601, 19778, 7, 9630, 28, 9948, 9239, 62, 4868, 8]"
‚ö†Ô∏è SAST Risk (Low): Direct use of external library function without input validation or error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 779, 286, 7097, 5888, 2163, 1231, 5128, 21201, 393, 4049, 9041]",0.5,1951,sast_risk,213,Direct use of external library function without input validation or error handling,Low,1934,                .index,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 9630]"
‚úÖ Best Practice: Include type hints for method parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,1968,best_practice,213,Include type hints for method parameters and return type for better readability and maintainability,,1951,                .index,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 9630]"
üß† ML Signal: Method chaining pattern with DataFrame operations,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 351, 6060, 19778, 4560]",1.0,1986,ml_signal,215,Method chaining pattern with DataFrame operations,,1968,        df.sort_index(inplace=True),"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 30619, 62, 9630, 7, 259, 5372, 28, 17821, 8]"
üß† ML Signal: Method chaining pattern with DataFrame operations,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 351, 6060, 19778, 4560]",1.0,1986,ml_signal,217,Method chaining pattern with DataFrame operations,,1986,,[]
‚úÖ Best Practice: Explicit return of the DataFrame for clarity,"[26486, 227, 6705, 19939, 25, 11884, 1441, 286, 262, 6060, 19778, 329, 16287]",1.0,1986,best_practice,219,Explicit return of the DataFrame for clarity,,1986,,[]
"‚úÖ Best Practice: Class docstring is missing, consider adding one to describe the purpose and usage of the class.","[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 318, 4814, 11, 2074, 4375, 530, 284, 6901, 262, 4007, 290, 8748, 286, 262, 1398, 13]",0.5,2019,best_practice,218,"Class docstring is missing, consider adding one to describe the purpose and usage of the class.",,1986,"        df[""change""] = BaostockNormalizeHS3005min.calc_change(df, last_close)","[220, 220, 220, 220, 220, 220, 220, 47764, 14692, 3803, 8973, 796, 8999, 455, 735, 26447, 1096, 7998, 6200, 20, 1084, 13, 9948, 66, 62, 3803, 7, 7568, 11, 938, 62, 19836, 8]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",1.0,2019,best_practice,219,Use of default parameter values for flexibility and ease of use,,2019,,[]
‚úÖ Best Practice: Calling the superclass's __init__ method to ensure proper initialization,"[26486, 227, 6705, 19939, 25, 32677, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 284, 4155, 1774, 37588]",1.0,2037,best_practice,223,Calling the superclass's __init__ method to ensure proper initialization,,2019,        df[symbol_field_name] = symbol,"[220, 220, 220, 220, 220, 220, 220, 47764, 58, 1837, 23650, 62, 3245, 62, 3672, 60, 796, 6194]"
üß† ML Signal: Storing configuration or state information in instance variables,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 8398, 393, 1181, 1321, 287, 4554, 9633]",1.0,2051,ml_signal,225,Storing configuration or state information in instance variables,,2037,        return df.reset_index(),"[220, 220, 220, 220, 220, 220, 220, 1441, 47764, 13, 42503, 62, 9630, 3419]"
üß† ML Signal: Method that constructs a class name based on attributes,"[8582, 100, 254, 10373, 26484, 25, 11789, 326, 34175, 257, 1398, 1438, 1912, 319, 12608]",0.5,2065,ml_signal,225,Method that constructs a class name based on attributes,,2051,        return df.reset_index(),"[220, 220, 220, 220, 220, 220, 220, 1441, 47764, 13, 42503, 62, 9630, 3419]"
üß† ML Signal: Usage of f-string for dynamic string formatting,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 277, 12, 8841, 329, 8925, 4731, 33313]",1.0,2065,ml_signal,226,Usage of f-string for dynamic string formatting,,2065,,[]
üß† ML Signal: Method for generating class names based on attributes,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 15453, 1398, 3891, 1912, 319, 12608]",1.0,2085,ml_signal,228,Method for generating class names based on attributes,,2065,        return generate_minutes_calendar_from_daily(,"[220, 220, 220, 220, 220, 220, 220, 1441, 7716, 62, 1084, 1769, 62, 9948, 9239, 62, 6738, 62, 29468, 7]"
‚úÖ Best Practice: Use of f-string for string formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 4731, 33313]",0.5,2125,best_practice,229,Use of f-string for string formatting,,2085,"            calendars, freq=""5min"", am_range=self.AM_RANGE, pm_range=self.PM_RANGE","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 50215, 11, 2030, 80, 2625, 20, 1084, 1600, 716, 62, 9521, 28, 944, 13, 2390, 62, 49, 27746, 11, 9114, 62, 9521, 28, 944, 13, 5868, 62, 49, 27746]"
‚úÖ Best Practice: Specify the return type as a Union of Path and str for clarity.,"[26486, 227, 6705, 19939, 25, 18291, 1958, 262, 1441, 2099, 355, 257, 4479, 286, 10644, 290, 965, 329, 16287, 13]",0.5,2125,best_practice,231,Specify the return type as a Union of Path and str for clarity.,,2125,,[]
‚ö†Ô∏è SAST Risk (Low): CUR_DIR should be validated to ensure it is a safe and expected path.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 4261, 62, 34720, 815, 307, 31031, 284, 4155, 340, 318, 257, 3338, 290, 2938, 3108, 13]",0.5,2140,sast_risk,233,CUR_DIR should be validated to ensure it is a safe and expected path.,Low,2125,        df = calc_adjusted_price(,"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 42302, 62, 29117, 62, 20888, 7]"
‚úÖ Best Practice: Docstring provides clear documentation for the function's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 10314, 329, 262, 2163, 338, 4007, 290, 8748, 13]",1.0,2166,best_practice,242,Docstring provides clear documentation for the function's purpose and usage.,,2140,    def _get_1d_calendar_list(self) -> Iterable[pd.Timestamp]:,"[220, 220, 220, 825, 4808, 1136, 62, 16, 67, 62, 9948, 9239, 62, 4868, 7, 944, 8, 4613, 40806, 540, 58, 30094, 13, 14967, 27823, 5974]"
"üß† ML Signal: Usage of `super()` indicates inheritance and method overriding, useful for understanding class hierarchies.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4600, 16668, 3419, 63, 9217, 24155, 290, 2446, 44987, 11, 4465, 329, 4547, 1398, 28398, 444, 13]",1.0,2166,ml_signal,252,"Usage of `super()` indicates inheritance and method overriding, useful for understanding class hierarchies.",,2166,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if qlib_data_1d_dir is not validated properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 10662, 8019, 62, 7890, 62, 16, 67, 62, 15908, 318, 407, 31031, 6105]",0.5,2178,sast_risk,271,Potential risk if qlib_data_1d_dir is not validated properly,Low,2166,        return CUR_DIR,"[220, 220, 220, 220, 220, 220, 220, 1441, 327, 4261, 62, 34720]"
üß† ML Signal: Usage of super() indicates inheritance and method overriding,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2208, 3419, 9217, 24155, 290, 2446, 44987]",1.0,2194,ml_signal,275,Usage of super() indicates inheritance and method overriding,,2178,"        max_collector_count=2,","[220, 220, 220, 220, 220, 220, 220, 3509, 62, 33327, 273, 62, 9127, 28, 17, 11]"
üß† ML Signal: Entry point for command-line interface,"[8582, 100, 254, 10373, 26484, 25, 21617, 966, 329, 3141, 12, 1370, 7071]",1.0,2209,ml_signal,279,Entry point for command-line interface,,2194,"        check_data_length=None,","[220, 220, 220, 220, 220, 220, 220, 2198, 62, 7890, 62, 13664, 28, 14202, 11]"
üß† ML Signal: Usage of fire.Fire for command-line interface generation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2046, 13, 13543, 329, 3141, 12, 1370, 7071, 5270]",0.5,2224,ml_signal,279,Usage of fire.Fire for command-line interface generation,,2209,"        check_data_length=None,","[220, 220, 220, 220, 220, 220, 220, 2198, 62, 7890, 62, 13664, 28, 14202, 11]"

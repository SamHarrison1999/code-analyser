annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Medium): Hardcoded URLs can lead to security risks if not properly validated or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6912, 40976, 32336, 460, 1085, 284, 2324, 7476, 611, 407, 6105, 31031, 393, 5336, 36951, 13]",1.0,8,sast_risk,20,Hardcoded URLs can lead to security risks if not properly validated or sanitized.,Medium,0,from tqdm import tqdm,"[6738, 256, 80, 36020, 1330, 256, 80, 36020]"
‚ö†Ô∏è SAST Risk (Medium): Hardcoded URLs can lead to security risks if not properly validated or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6912, 40976, 32336, 460, 1085, 284, 2324, 7476, 611, 407, 6105, 31031, 393, 5336, 36951, 13]",1.0,19,sast_risk,22,Hardcoded URLs can lead to security risks if not properly validated or sanitized.,Medium,8,from concurrent.futures import ProcessPoolExecutor,"[6738, 24580, 13, 69, 315, 942, 1330, 10854, 27201, 23002, 38409]"
‚ö†Ô∏è SAST Risk (Medium): Hardcoded URLs can lead to security risks if not properly validated or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6912, 40976, 32336, 460, 1085, 284, 2324, 7476, 611, 407, 6105, 31031, 393, 5336, 36951, 13]",1.0,27,sast_risk,23,Hardcoded URLs can lead to security risks if not properly validated or sanitized.,Medium,19,from bs4 import BeautifulSoup,"[6738, 275, 82, 19, 1330, 23762, 50, 10486]"
‚ö†Ô∏è SAST Risk (Medium): Hardcoded URLs can lead to security risks if not properly validated or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6912, 40976, 32336, 460, 1085, 284, 2324, 7476, 611, 407, 6105, 31031, 393, 5336, 36951, 13]",1.0,35,sast_risk,23,Hardcoded URLs can lead to security risks if not properly validated or sanitized.,Medium,27,from bs4 import BeautifulSoup,"[6738, 275, 82, 19, 1330, 23762, 50, 10486]"
‚úÖ Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3298, 9633, 815, 307, 49491, 284, 3368, 2785, 1735, 3048, 290, 2987, 2438, 5529, 1799, 13]",0.5,60,best_practice,36,Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,,35,    # NOTE: Use the time series of ^GSPC(SP500) as the sequence of all stocks,"[220, 220, 220, 1303, 24550, 25, 5765, 262, 640, 2168, 286, 10563, 38, 4303, 34, 7, 4303, 4059, 8, 355, 262, 8379, 286, 477, 14420]"
‚úÖ Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3298, 9633, 815, 307, 49491, 284, 3368, 2785, 1735, 3048, 290, 2987, 2438, 5529, 1799, 13]",0.5,74,best_practice,38,Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,,60,"    ""IN_ALL"": ""^NSEI"",","[220, 220, 220, 366, 1268, 62, 7036, 1298, 366, 61, 45, 5188, 40, 1600]"
‚úÖ Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3298, 9633, 815, 307, 49491, 284, 3368, 2785, 1735, 3048, 290, 2987, 2438, 5529, 1799, 13]",0.5,75,best_practice,40,Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,,74,},[92]
‚úÖ Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3298, 9633, 815, 307, 49491, 284, 3368, 2785, 1735, 3048, 290, 2987, 2438, 5529, 1799, 13]",0.5,88,best_practice,42,Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,,75,_BENCH_CALENDAR_LIST = None,"[62, 33, 1677, 3398, 62, 34, 1847, 10619, 1503, 62, 45849, 796, 6045]"
‚úÖ Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3298, 9633, 815, 307, 49491, 284, 3368, 2785, 1735, 3048, 290, 2987, 2438, 5529, 1799, 13]",0.5,101,best_practice,42,Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,,88,_BENCH_CALENDAR_LIST = None,"[62, 33, 1677, 3398, 62, 34, 1847, 10619, 1503, 62, 45849, 796, 6045]"
‚úÖ Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3298, 9633, 815, 307, 49491, 284, 3368, 2785, 1735, 3048, 290, 2987, 2438, 5529, 1799, 13]",0.5,114,best_practice,42,Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,,101,_BENCH_CALENDAR_LIST = None,"[62, 33, 1677, 3398, 62, 34, 1847, 10619, 1503, 62, 45849, 796, 6045]"
‚úÖ Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3298, 9633, 815, 307, 49491, 284, 3368, 2785, 1735, 3048, 290, 2987, 2438, 5529, 1799, 13]",0.5,128,best_practice,51,Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,,114,# NOTE: Until 2020-10-20 20:00:00,"[2, 24550, 25, 14303, 12131, 12, 940, 12, 1238, 1160, 25, 405, 25, 405]"
‚úÖ Best Practice: Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3298, 9633, 815, 307, 49491, 284, 3368, 2785, 1735, 3048, 290, 2987, 2438, 5529, 1799, 13]",0.5,142,best_practice,51,Use of global variables should be minimized to avoid potential side effects and improve code maintainability.,,128,# NOTE: Until 2020-10-20 20:00:00,"[2, 24550, 25, 14303, 12131, 12, 940, 12, 1238, 1160, 25, 405, 25, 405]"
üß† ML Signal: Use of constants can indicate important thresholds or limits in the application logic.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 38491, 460, 7603, 1593, 40885, 393, 7095, 287, 262, 3586, 9156, 13]",1.0,155,ml_signal,52,Use of constants can indicate important thresholds or limits in the application logic.,,142,MINIMUM_SYMBOLS_NUM = 3900,"[23678, 3955, 5883, 62, 23060, 10744, 3535, 50, 62, 41359, 796, 5014, 405]"
‚úÖ Best Practice: Use of type hinting for function return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 2163, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,155,best_practice,41,Use of type hinting for function return type improves code readability and maintainability,,155,,[]
üß† ML Signal: Logging usage pattern can be used to train models for log analysis or anomaly detection,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 460, 307, 973, 284, 4512, 4981, 329, 2604, 3781, 393, 32172, 13326]",1.0,168,ml_signal,52,Logging usage pattern can be used to train models for log analysis or anomaly detection,,155,MINIMUM_SYMBOLS_NUM = 3900,"[23678, 3955, 5883, 62, 23060, 10744, 3535, 50, 62, 41359, 796, 5014, 405]"
"‚ö†Ô∏è SAST Risk (Medium): No timeout specified for requests.get, which can lead to hanging connections.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 329, 7007, 13, 1136, 11, 543, 460, 1085, 284, 10938, 8787, 13]",1.0,168,sast_risk,53,"No timeout specified for requests.get, which can lead to hanging connections.",Medium,168,,[]
"üß† ML Signal: Use of lambda function for mapping, indicating functional programming style.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 2163, 329, 16855, 11, 12739, 10345, 8300, 3918, 13]",0.5,192,ml_signal,55,"Use of lambda function for mapping, indicating functional programming style.",,168,"def get_calendar_list(bench_code=""CSI300"") -> List[pd.Timestamp]:","[4299, 651, 62, 9948, 9239, 62, 4868, 7, 26968, 62, 8189, 2625, 7902, 40, 6200, 4943, 4613, 7343, 58, 30094, 13, 14967, 27823, 5974]"
üß† ML Signal: Use of dictionary get method with default value.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 651, 2446, 351, 4277, 1988, 13]",1.0,192,ml_signal,57,Use of dictionary get method with default value.,,192,,[]
üß† ML Signal: Use of string method startswith for conditional logic.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 2446, 923, 2032, 342, 329, 26340, 9156, 13]",0.5,200,ml_signal,60,Use of string method startswith for conditional logic.,,192,    bench_code: str,"[220, 220, 220, 7624, 62, 8189, 25, 965]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure through print statements.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 832, 3601, 6299, 13]",1.0,227,sast_risk,61,Potential information disclosure through print statements.,Low,200,"        value from [""CSI300"", ""CSI500"", ""ALL"", ""US_ALL""]","[220, 220, 220, 220, 220, 220, 220, 1988, 422, 14631, 7902, 40, 6200, 1600, 366, 7902, 40, 4059, 1600, 366, 7036, 1600, 366, 2937, 62, 7036, 8973]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure through print statements.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 832, 3601, 6299, 13]",1.0,231,sast_risk,63,Potential information disclosure through print statements.,Low,227,    Returns,"[220, 220, 220, 16409]"
üß† ML Signal: Repeated instantiation of Ticker object with same parameters.,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 9113, 3920, 286, 309, 15799, 2134, 351, 976, 10007, 13]",0.5,235,ml_signal,66,Repeated instantiation of Ticker object with same parameters.,,231,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Use of pandas methods for data manipulation.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 5050, 329, 1366, 17512, 13]",0.5,255,ml_signal,68,Use of pandas methods for data manipulation.,,235,"    logger.info(f""get calendar list: {bench_code}......"")","[220, 220, 220, 49706, 13, 10951, 7, 69, 1, 1136, 11845, 1351, 25, 1391, 26968, 62, 8189, 92, 16317, 4943]"
üß† ML Signal: Use of string method upper for case-insensitive comparison.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 2446, 6727, 329, 1339, 12, 1040, 18464, 7208, 13]",0.5,287,ml_signal,71,Use of string method upper for case-insensitive comparison.,,255,"        _value_list = requests.get(url, timeout=None).json()[""data""][""klines""]","[220, 220, 220, 220, 220, 220, 220, 4808, 8367, 62, 4868, 796, 7007, 13, 1136, 7, 6371, 11, 26827, 28, 14202, 737, 17752, 3419, 14692, 7890, 1, 7131, 1, 74, 6615, 8973]"
üß† ML Signal: Use of decorator for retry logic.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11705, 1352, 329, 1005, 563, 9156, 13]",1.0,287,ml_signal,73,Use of decorator for retry logic.,,287,,[]
"‚ö†Ô∏è SAST Risk (Medium): No timeout specified for requests.get, which can lead to hanging connections.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 329, 7007, 13, 1136, 11, 543, 460, 1085, 284, 10938, 8787, 13]",1.0,307,sast_risk,68,"No timeout specified for requests.get, which can lead to hanging connections.",Medium,287,"    logger.info(f""get calendar list: {bench_code}......"")","[220, 220, 220, 49706, 13, 10951, 7, 69, 1, 1136, 11845, 1351, 25, 1391, 26968, 62, 8189, 92, 16317, 4943]"
üß† ML Signal: Usage of pd.Timestamp to convert date strings to pandas Timestamp objects.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 279, 67, 13, 14967, 27823, 284, 10385, 3128, 13042, 284, 19798, 292, 5045, 27823, 5563, 13]",0.5,307,ml_signal,73,Usage of pd.Timestamp to convert date strings to pandas Timestamp objects.,,307,,[]
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide unexpected errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 10059, 8563, 13]",1.0,341,sast_risk,77,Catching broad exceptions can hide unexpected errors.,Low,307,            print(Ticker(CALENDAR_BENCH_URL_MAP[bench_code])),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 51, 15799, 7, 34, 1847, 10619, 1503, 62, 33, 1677, 3398, 62, 21886, 62, 33767, 58, 26968, 62, 8189, 60, 4008]"
üß† ML Signal: Usage of pd.date_range to generate a range of dates.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 279, 67, 13, 4475, 62, 9521, 284, 7716, 257, 2837, 286, 9667, 13]",1.0,381,ml_signal,80,Usage of pd.date_range to generate a range of dates.,,341,"            calendar = df.index.get_level_values(level=""date"").map(pd.Timestamp).unique().tolist()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11845, 796, 47764, 13, 9630, 13, 1136, 62, 5715, 62, 27160, 7, 5715, 2625, 4475, 11074, 8899, 7, 30094, 13, 14967, 27823, 737, 34642, 22446, 83, 349, 396, 3419]"
üß† ML Signal: Usage of strftime to format dates.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 965, 31387, 284, 5794, 9667, 13]",0.5,381,ml_signal,83,Usage of strftime to format dates.,,381,,[]
‚úÖ Best Practice: Using list concatenation instead of append in a loop for better performance.,"[26486, 227, 6705, 19939, 25, 8554, 1351, 1673, 36686, 341, 2427, 286, 24443, 287, 257, 9052, 329, 1365, 2854, 13]",0.5,402,best_practice,87,Using list concatenation instead of append in a loop for better performance.,,381,                    try:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1949, 25]"
üß† ML Signal: Usage of filter and lambda to filter dates.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8106, 290, 37456, 284, 8106, 9667, 13]",0.5,455,ml_signal,89,Usage of filter and lambda to filter dates.,,402,"                            SZSE_CALENDAR_URL.format(month=month, random=random.random), timeout=None","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 311, 57, 5188, 62, 34, 1847, 10619, 1503, 62, 21886, 13, 18982, 7, 8424, 28, 8424, 11, 4738, 28, 25120, 13, 25120, 828, 26827, 28, 14202]"
üß† ML Signal: Caching results in a dictionary for reuse.,"[8582, 100, 254, 10373, 26484, 25, 327, 8103, 2482, 287, 257, 22155, 329, 32349, 13]",0.5,493,ml_signal,92,Caching results in a dictionary for reuse.,,455,"                            if int(_r[""jybz""]):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 493, 28264, 81, 14692, 73, 88, 65, 89, 8973, 2599]"
üß† ML Signal: Logging information for tracking execution flow.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 329, 9646, 9706, 5202, 13]",0.5,531,ml_signal,92,Logging information for tracking execution flow.,,493,"                            if int(_r[""jybz""]):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 493, 28264, 81, 14692, 73, 88, 65, 89, 8973, 2599]"
"‚úÖ Best Practice: Type hint for file_path suggests it should be a Path object, improving code readability and maintainability.","[26486, 227, 6705, 19939, 25, 5994, 9254, 329, 2393, 62, 6978, 5644, 340, 815, 307, 257, 10644, 2134, 11, 10068, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,584,best_practice,89,"Type hint for file_path suggests it should be a Path object, improving code readability and maintainability.",,531,"                            SZSE_CALENDAR_URL.format(month=month, random=random.random), timeout=None","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 311, 57, 5188, 62, 34, 1847, 10619, 1503, 62, 21886, 13, 18982, 7, 8424, 28, 8424, 11, 4738, 28, 25120, 13, 25120, 828, 26827, 28, 14202]"
üß† ML Signal: Reading a CSV file to extract a specific column is a common data processing pattern.,"[8582, 100, 254, 10373, 26484, 25, 11725, 257, 44189, 2393, 284, 7925, 257, 2176, 5721, 318, 257, 2219, 1366, 7587, 3912, 13]",0.5,616,ml_signal,91,Reading a CSV file to extract a specific column is a common data processing pattern.,,584,"                        for _r in resp[""data""]:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 4808, 81, 287, 1217, 14692, 7890, 1, 5974]"
üß† ML Signal: Converting strings to timestamps is a common preprocessing step in time series analysis.,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 13042, 284, 4628, 395, 9430, 318, 257, 2219, 662, 36948, 2239, 287, 640, 2168, 3781, 13]",0.5,654,ml_signal,92,Converting strings to timestamps is a common preprocessing step in time series analysis.,,616,"                            if int(_r[""jybz""]):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 493, 28264, 81, 14692, 73, 88, 65, 89, 8973, 2599]"
‚úÖ Best Practice: Using list comprehension for converting and sorting dates is efficient and concise.,"[26486, 227, 6705, 19939, 25, 8554, 1351, 35915, 329, 23202, 290, 29407, 9667, 318, 6942, 290, 35327, 13]",0.5,692,best_practice,92,Using list comprehension for converting and sorting dates is efficient and concise.,,654,"                            if int(_r[""jybz""]):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 493, 28264, 81, 14692, 73, 88, 65, 89, 8973, 2599]"
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,730,best_practice,92,Use of type hints for function parameters and return type improves code readability and maintainability.,,692,"                            if int(_r[""jybz""]):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 493, 28264, 81, 14692, 73, 88, 65, 89, 8973, 2599]"
"‚úÖ Best Practice: Docstring provides a clear explanation of the function's purpose, parameters, and return value.","[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2163, 338, 4007, 11, 10007, 11, 290, 1441, 1988, 13]",0.5,748,best_practice,99,"Docstring provides a clear explanation of the function's purpose, parameters, and return value.",,730,                calendar = [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11845, 796, 17635]"
üß† ML Signal: Logging usage pattern can be used to train models for log analysis.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 460, 307, 973, 284, 4512, 4981, 329, 2604, 3781, 13]",0.5,760,ml_signal,118,Logging usage pattern can be used to train models for log analysis.,,748,"    source_dir: [str, Path],","[220, 220, 220, 2723, 62, 15908, 25, 685, 2536, 11, 10644, 4357]"
‚úÖ Best Practice: Use of Path.expanduser() to handle user directories in a cross-platform way.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 13, 11201, 392, 7220, 3419, 284, 5412, 2836, 29196, 287, 257, 3272, 12, 24254, 835, 13]",0.5,771,best_practice,120,Use of Path.expanduser() to handle user directories in a cross-platform way.,,760,"    threshold: float = 0.5,","[220, 220, 220, 11387, 25, 12178, 796, 657, 13, 20, 11]"
‚úÖ Best Practice: Use of Path.glob() to list files in a directory is more readable and concise.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 13, 4743, 672, 3419, 284, 1351, 3696, 287, 257, 8619, 318, 517, 31744, 290, 35327, 13]",0.5,782,best_practice,122,Use of Path.glob() to list files in a directory is more readable and concise.,,771,"    max_workers: int = 16,","[220, 220, 220, 3509, 62, 22896, 25, 493, 796, 1467, 11]"
üß† ML Signal: Logging usage pattern can be used to train models for log analysis.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 460, 307, 973, 284, 4512, 4981, 329, 2604, 3781, 13]",0.5,782,ml_signal,125,Logging usage pattern can be used to train models for log analysis.,,782,,[]
‚úÖ Best Practice: Use of functools.partial to pre-fill function arguments is a good practice for code reuse.,"[26486, 227, 6705, 19939, 25, 5765, 286, 1257, 310, 10141, 13, 47172, 284, 662, 12, 20797, 2163, 7159, 318, 257, 922, 3357, 329, 2438, 32349, 13]",0.5,792,best_practice,128,Use of functools.partial to pre-fill function arguments is a good practice for code reuse.,,782,    source_dir: str or Path,"[220, 220, 220, 2723, 62, 15908, 25, 965, 393, 10644]"
‚úÖ Best Practice: Use of tqdm for progress tracking is a good practice for long-running operations.,"[26486, 227, 6705, 19939, 25, 5765, 286, 256, 80, 36020, 329, 4371, 9646, 318, 257, 922, 3357, 329, 890, 12, 20270, 4560, 13]",0.5,810,best_practice,131,Use of tqdm for progress tracking is a good practice for long-running operations.,,792,"            date field name, default is date","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3128, 2214, 1438, 11, 4277, 318, 3128]"
‚úÖ Best Practice: Use of ProcessPoolExecutor for parallel processing improves performance.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10854, 27201, 23002, 38409, 329, 10730, 7587, 19575, 2854, 13]",1.0,834,best_practice,133,Use of ProcessPoolExecutor for parallel processing improves performance.,,810,"        threshold to exclude some days when few funds trade in this day, default 0.5","[220, 220, 220, 220, 220, 220, 220, 11387, 284, 19607, 617, 1528, 618, 1178, 5153, 3292, 287, 428, 1110, 11, 4277, 657, 13, 20]"
üß† ML Signal: Logging usage pattern can be used to train models for log analysis.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 460, 307, 973, 284, 4512, 4981, 329, 2604, 3781, 13]",0.5,834,ml_signal,144,Logging usage pattern can be used to train models for log analysis.,,834,,[]
‚úÖ Best Practice: Use of tqdm for progress tracking is a good practice for long-running operations.,"[26486, 227, 6705, 19939, 25, 5765, 286, 256, 80, 36020, 329, 4371, 9646, 318, 257, 922, 3357, 329, 890, 12, 20270, 4560, 13]",0.5,853,best_practice,146,Use of tqdm for progress tracking is a good practice for long-running operations.,,834,"    file_list = list(source_dir.glob(""*.csv""))","[220, 220, 220, 2393, 62, 4868, 796, 1351, 7, 10459, 62, 15908, 13, 4743, 672, 7203, 24620, 40664, 48774]"
‚úÖ Best Practice: List comprehension is used for concise and efficient list creation.,"[26486, 227, 6705, 19939, 25, 7343, 35915, 318, 973, 329, 35327, 290, 6942, 1351, 6282, 13]",0.5,873,best_practice,152,List comprehension is used for concise and efficient list creation.,,853,"    _fun = partial(return_date_list, date_field_name)","[220, 220, 220, 4808, 12543, 796, 13027, 7, 7783, 62, 4475, 62, 4868, 11, 3128, 62, 3245, 62, 3672, 8]"
‚úÖ Best Practice: Include a docstring to describe the function's purpose and return value,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 1441, 1988]",1.0,890,best_practice,145,Include a docstring to describe the function's purpose and return value,,873,    source_dir = Path(source_dir).expanduser(),"[220, 220, 220, 2723, 62, 15908, 796, 10644, 7, 10459, 62, 15908, 737, 11201, 392, 7220, 3419]"
‚ö†Ô∏è SAST Risk (Low): Using global variables can lead to unexpected behavior and is generally discouraged,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 3298, 9633, 460, 1085, 284, 10059, 4069, 290, 318, 4143, 30170]",1.0,910,sast_risk,152,Using global variables can lead to unexpected behavior and is generally discouraged,Low,890,"    _fun = partial(return_date_list, date_field_name)","[220, 220, 220, 4808, 12543, 796, 13027, 7, 7783, 62, 4475, 62, 4868, 11, 3128, 62, 3245, 62, 3672, 8]"
"‚ö†Ô∏è SAST Risk (Medium): No timeout specified in requests.get, which can lead to hanging connections.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 287, 7007, 13, 1136, 11, 543, 460, 1085, 284, 10938, 8787, 13]",1.0,915,sast_risk,179,"No timeout specified in requests.get, which can lead to hanging connections.",Medium,910,    return calendar,"[220, 220, 220, 1441, 11845]"
‚ö†Ô∏è SAST Risk (Low): Fixed sleep time can lead to inefficient waiting; consider exponential backoff.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 10832, 3993, 640, 460, 1085, 284, 30904, 4953, 26, 2074, 39682, 736, 2364, 13]",1.0,941,sast_risk,195,Fixed sleep time can lead to inefficient waiting; consider exponential backoff.,Low,915,"        The data format required by yahooquery: 600519.ss, 000001.sz","[220, 220, 220, 220, 220, 220, 220, 383, 1366, 5794, 2672, 416, 331, 12992, 22766, 25, 10053, 47785, 13, 824, 11, 17643, 486, 13, 82, 89]"
‚ö†Ô∏è SAST Risk (Low): Fixed sleep time can lead to inefficient waiting; consider exponential backoff.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 10832, 3993, 640, 460, 1085, 284, 30904, 4953, 26, 2074, 39682, 736, 2364, 13]",1.0,954,sast_risk,217,Fixed sleep time can lead to inefficient waiting; consider exponential backoff.,Low,941,        _symbols = [],"[220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 796, 17635]"
‚úÖ Best Practice: Use Path from pathlib for file path operations for better cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 10644, 422, 3108, 8019, 329, 2393, 3108, 4560, 329, 1365, 3272, 12, 24254, 17764, 13]",1.0,954,best_practice,219,Use Path from pathlib for file path operations for better cross-platform compatibility.,,954,,[]
‚ö†Ô∏è SAST Risk (Medium): Untrusted data deserialization with pickle can lead to arbitrary code execution.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 26970, 81, 8459, 1366, 748, 48499, 1634, 351, 2298, 293, 460, 1085, 284, 14977, 2438, 9706, 13]",0.5,977,sast_risk,224,Untrusted data deserialization with pickle can lead to arbitrary code execution.,Medium,954,                resp.raise_for_status(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1217, 13, 40225, 62, 1640, 62, 13376, 3419]"
‚ö†Ô∏è SAST Risk (Medium): Ensure that the data being serialized with pickle is from a trusted source.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 48987, 326, 262, 1366, 852, 11389, 1143, 351, 2298, 293, 318, 422, 257, 13467, 2723, 13]",0.5,977,sast_risk,226,Ensure that the data being serialized with pickle is from a trusted source.,Medium,977,,[]
‚úÖ Best Practice: Add type hinting for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 3060, 2099, 9254, 278, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,977,best_practice,226,Add type hinting for function parameters and return type for better readability and maintainability.,,977,,[]
‚ö†Ô∏è SAST Risk (Low): Using global variables can lead to unexpected behavior and make the code harder to debug.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 3298, 9633, 460, 1085, 284, 10059, 4069, 290, 787, 262, 2438, 7069, 284, 14257, 13]",1.0,1018,sast_risk,233,Using global variables can lead to unexpected behavior and make the code harder to debug.,Low,977,"                current_symbols = [_v[""f12""] for _v in data[""data""][""diff""]]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 1837, 2022, 10220, 796, 685, 62, 85, 14692, 69, 1065, 8973, 329, 4808, 85, 287, 1366, 14692, 7890, 1, 7131, 1, 26069, 8973, 60]"
‚úÖ Best Practice: Consider making this function name more descriptive to indicate its purpose or the data it retrieves.,"[26486, 227, 6705, 19939, 25, 12642, 1642, 428, 2163, 1438, 517, 35644, 284, 7603, 663, 4007, 393, 262, 1366, 340, 13236, 1158, 13]",1.0,1059,best_practice,233,Consider making this function name more descriptive to indicate its purpose or the data it retrieves.,,1018,"                current_symbols = [_v[""f12""] for _v in data[""data""][""diff""]]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1459, 62, 1837, 2022, 10220, 796, 685, 62, 85, 14692, 69, 1065, 8973, 329, 4808, 85, 287, 1366, 14692, 7890, 1, 7131, 1, 26069, 8973, 60]"
‚ö†Ô∏è SAST Risk (Medium): Hardcoded URL can lead to security risks if the endpoint changes or is deprecated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6912, 40976, 10289, 460, 1085, 284, 2324, 7476, 611, 262, 36123, 2458, 393, 318, 39224, 13]",1.0,1097,sast_risk,235,Hardcoded URL can lead to security risks if the endpoint changes or is deprecated.,Medium,1059,                if not current_symbols:  # It's the last page if there is no data in current page,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 1459, 62, 1837, 2022, 10220, 25, 220, 1303, 632, 338, 262, 938, 2443, 611, 612, 318, 645, 1366, 287, 1459, 2443]"
‚ö†Ô∏è SAST Risk (Medium): No timeout specified in requests.get can lead to hanging if the server does not respond.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 287, 7007, 13, 1136, 460, 1085, 284, 10938, 611, 262, 4382, 857, 407, 3031, 13]",1.0,1117,sast_risk,237,No timeout specified in requests.get can lead to hanging if the server does not respond.,Medium,1097,                    break,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2270]"
üß† ML Signal: Checking for HTTP status code to handle errors.,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 14626, 3722, 2438, 284, 5412, 8563, 13]",0.5,1146,ml_signal,239,Checking for HTTP status code to handle errors.,,1117,                _symbols.extend(current_symbols),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 13, 2302, 437, 7, 14421, 62, 1837, 2022, 10220, 8]"
üß† ML Signal: List comprehension used for transforming data.,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 973, 329, 25449, 1366, 13]",1.0,1204,ml_signal,243,List comprehension used for transforming data.,,1146,"                    f""Page {page}: fetch {len(current_symbols)} stocks:[{current_symbols[0]} ... {current_symbols[-1]}]""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 9876, 1391, 7700, 38362, 21207, 1391, 11925, 7, 14421, 62, 1837, 2022, 10220, 38165, 14420, 33250, 90, 14421, 62, 1837, 2022, 10220, 58, 15, 48999, 2644, 1391, 14421, 62, 1837, 2022, 10220, 58, 12, 16, 48999, 30866]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563, 13]",0.5,1204,sast_risk,245,Catching broad exceptions can hide specific errors.,Low,1204,,[]
üß† ML Signal: Conditional check on data length to ensure data integrity.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 319, 1366, 4129, 284, 4155, 1366, 11540, 13]",0.5,1227,ml_signal,249,Conditional check on data length to ensure data integrity.,,1204,                time.sleep(0.5),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 15, 13, 20, 8]"
"‚úÖ Best Practice: Decorator usage indicates retry logic, which is useful for handling transient errors.","[26486, 227, 6705, 19939, 25, 4280, 273, 1352, 8748, 9217, 1005, 563, 9156, 11, 543, 318, 4465, 329, 9041, 32361, 8563, 13]",0.5,1266,best_practice,253,"Decorator usage indicates retry logic, which is useful for handling transient errors.",,1227,"                    f""Request to {base_url} failed with status code {resp.status_code}""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 1, 18453, 284, 1391, 8692, 62, 6371, 92, 4054, 351, 3722, 2438, 1391, 4363, 13, 13376, 62, 8189, 36786]"
‚ö†Ô∏è SAST Risk (Medium): Using FTP protocol can expose data to interception; consider using a secure protocol like HTTPS.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 45854, 8435, 460, 15651, 1366, 284, 28759, 26, 2074, 1262, 257, 5713, 8435, 588, 38288, 13]",0.5,1288,sast_risk,251,Using FTP protocol can expose data to interception; consider using a secure protocol like HTTPS.,Medium,1266,            except requests.exceptions.HTTPError as e:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 7007, 13, 1069, 11755, 13, 40717, 12331, 355, 304, 25]"
‚úÖ Best Practice: Use of regex=False for str.replace improves performance when regex is not needed.,"[26486, 227, 6705, 19939, 25, 5765, 286, 40364, 28, 25101, 329, 965, 13, 33491, 19575, 2854, 618, 40364, 318, 407, 2622, 13]",1.0,1304,best_practice,255,Use of regex=False for str.replace improves performance when regex is not needed.,,1288,            except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
üß† ML Signal: Use of a retry decorator indicates a pattern of handling transient failures.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1005, 563, 11705, 1352, 9217, 257, 3912, 286, 9041, 32361, 15536, 13]",0.5,1317,ml_signal,263,Use of a retry decorator indicates a pattern of handling transient failures.,,1304,        _symbols = [,"[220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 796, 685]"
"‚ö†Ô∏è SAST Risk (Medium): No timeout specified for the request, which can lead to hanging connections.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 329, 262, 2581, 11, 543, 460, 1085, 284, 10938, 8787, 13]",1.0,1328,sast_risk,272,"No timeout specified for the request, which can lead to hanging connections.",Medium,1317,        symbols = set(),"[220, 220, 220, 220, 220, 220, 220, 14354, 796, 900, 3419]"
‚ö†Ô∏è SAST Risk (Low): No specific exception handling for HTTP errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 2176, 6631, 9041, 329, 14626, 8563, 13]",0.5,1345,sast_risk,274,No specific exception handling for HTTP errors.,Low,1328,        # It may take multiple times to get the complete,"[220, 220, 220, 220, 220, 220, 220, 1303, 632, 743, 1011, 3294, 1661, 284, 651, 262, 1844]"
"‚ö†Ô∏è SAST Risk (Low): Potential KeyError if ""symbolTicker"" is not in the response JSON.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 366, 1837, 23650, 51, 15799, 1, 318, 407, 287, 262, 2882, 19449, 13]",0.5,1345,sast_risk,278,"Potential KeyError if ""symbolTicker"" is not in the response JSON.",Low,1345,,[]
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563, 13]",0.5,1362,sast_risk,281,Catching broad exceptions can hide specific errors.,Low,1345,        if symbol_cache_path.exists():,"[220, 220, 220, 220, 220, 220, 220, 611, 6194, 62, 23870, 62, 6978, 13, 1069, 1023, 33529]"
üß† ML Signal: Conditional logic based on the state of _US_SYMBOLS.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 1181, 286, 4808, 2937, 62, 23060, 10744, 3535, 50, 13]",0.5,1384,ml_signal,285,Conditional logic based on the state of _US_SYMBOLS.,,1362,"        with symbol_cache_path.open(""wb"") as fp:","[220, 220, 220, 220, 220, 220, 220, 351, 6194, 62, 23870, 62, 6978, 13, 9654, 7203, 39346, 4943, 355, 277, 79, 25]"
üß† ML Signal: Aggregating data from multiple sources.,"[8582, 100, 254, 10373, 26484, 25, 19015, 2301, 803, 1366, 422, 3294, 4237, 13]",0.5,1406,ml_signal,285,Aggregating data from multiple sources.,,1384,"        with symbol_cache_path.open(""wb"") as fp:","[220, 220, 220, 220, 220, 220, 220, 351, 6194, 62, 23870, 62, 6978, 13, 9654, 7203, 39346, 4943, 355, 277, 79, 25]"
‚úÖ Best Practice: Use Pathlib for file path operations for better readability and cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 10644, 8019, 329, 2393, 3108, 4560, 329, 1365, 1100, 1799, 290, 3272, 12, 24254, 17764, 13]",0.5,1406,best_practice,291,Use Pathlib for file path operations for better readability and cross-platform compatibility.,,1406,,[]
üß† ML Signal: Extracting unique symbols from a DataFrame.,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 3748, 14354, 422, 257, 6060, 19778, 13]",0.5,1410,ml_signal,297,Extracting unique symbols from a DataFrame.,,1406,    -------,"[220, 220, 220, 35656]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",1.0,1410,best_practice,292,Use descriptive variable names for better readability,,1410,,[]
‚úÖ Best Practice: Chain string operations to reduce the number of lines,"[26486, 227, 6705, 19939, 25, 21853, 4731, 4560, 284, 4646, 262, 1271, 286, 3951]",0.5,1418,best_practice,294,Chain string operations to reduce the number of lines,,1410,"    """"""get US stock symbols","[220, 220, 220, 37227, 1136, 1294, 4283, 14354]"
üß† ML Signal: Use of lambda and filter functions indicates functional programming patterns,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 290, 8106, 5499, 9217, 10345, 8300, 7572]",0.5,1427,ml_signal,298,Use of lambda and filter functions indicates functional programming patterns,,1418,        stock symbols,"[220, 220, 220, 220, 220, 220, 220, 4283, 14354]"
üß† ML Signal: Use of map function indicates data transformation pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3975, 2163, 9217, 1366, 13389, 3912]",1.0,1431,ml_signal,299,Use of map function indicates data transformation pattern,,1427,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use list comprehensions for better readability and performance,"[26486, 227, 6705, 19939, 25, 5765, 1351, 8569, 507, 329, 1365, 1100, 1799, 290, 2854]",0.5,1435,best_practice,299,Use list comprehensions for better readability and performance,,1431,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Potential exposure of internal symbols if _all_symbols contains sensitive data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 5387, 14354, 611, 4808, 439, 62, 1837, 2022, 10220, 4909, 8564, 1366]",1.0,1494,sast_risk,304,Potential exposure of internal symbols if _all_symbols contains sensitive data,Low,1435,"        url = ""http://4.push2.eastmoney.com/api/qt/clist/get?pn=1&pz=10000&fs=m:105,m:106,m:107&fields=f12""","[220, 220, 220, 220, 220, 220, 220, 19016, 796, 366, 4023, 1378, 19, 13, 14689, 17, 13, 23316, 26316, 13, 785, 14, 15042, 14, 39568, 14, 565, 396, 14, 1136, 30, 21999, 28, 16, 5, 79, 89, 28, 49388, 5, 9501, 28, 76, 25, 13348, 11, 76, 25, 15801, 11, 76, 25, 15982, 5, 25747, 28, 69, 1065, 1]"
‚úÖ Best Practice: Include type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,1498,best_practice,299,Include type hints for function parameters and return type for better readability and maintainability.,,1494,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Using global variables can lead to unexpected behavior and is generally discouraged.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 3298, 9633, 460, 1085, 284, 10059, 4069, 290, 318, 4143, 30170, 13]",1.0,1514,sast_risk,306,Using global variables can lead to unexpected behavior and is generally discouraged.,Low,1498,        if resp.status_code != 200:,"[220, 220, 220, 220, 220, 220, 220, 611, 1217, 13, 13376, 62, 8189, 14512, 939, 25]"
üß† ML Signal: Use of decorators can indicate patterns for retry logic or error handling.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11705, 2024, 460, 7603, 7572, 329, 1005, 563, 9156, 393, 4049, 9041, 13]",1.0,1514,ml_signal,308,Use of decorators can indicate patterns for retry logic or error handling.,,1514,,[]
"üß† ML Signal: Fetching data from a specific URL, indicating a pattern of data retrieval from web sources","[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 1366, 422, 257, 2176, 10289, 11, 12739, 257, 3912, 286, 1366, 45069, 422, 3992, 4237]",0.5,1532,ml_signal,307,"Fetching data from a specific URL, indicating a pattern of data retrieval from web sources",,1514,"            raise ValueError(""request error"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 25927, 4049, 4943]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded URL can lead to maintenance issues if the URL changes,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 10289, 460, 1085, 284, 9262, 2428, 611, 262, 10289, 2458]",0.5,1532,sast_risk,308,Hardcoded URL can lead to maintenance issues if the URL changes,Low,1532,,[]
‚ö†Ô∏è SAST Risk (Low): No error handling for network issues or invalid CSV format,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 3127, 2428, 393, 12515, 44189, 5794]",1.0,1582,sast_risk,310,No error handling for network issues or invalid CSV format,Low,1532,"            _symbols = [_v[""f12""].replace(""_"", ""-P"") for _v in resp.json()[""data""][""diff""].values()]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 796, 685, 62, 85, 14692, 69, 1065, 1, 4083, 33491, 7203, 62, 1600, 27444, 47, 4943, 329, 4808, 85, 287, 1217, 13, 17752, 3419, 14692, 7890, 1, 7131, 1, 26069, 1, 4083, 27160, 3419, 60]"
‚úÖ Best Practice: Renaming columns for clarity and consistency,"[26486, 227, 6705, 19939, 25, 7152, 3723, 15180, 329, 16287, 290, 15794]",1.0,1606,best_practice,312,Renaming columns for clarity and consistency,,1582,"            logger.warning(f""request error: {e}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 25927, 4049, 25, 1391, 68, 92, 4943]"
"‚úÖ Best Practice: Appending "".NS"" to symbols for standardization","[26486, 227, 6705, 19939, 25, 2034, 1571, 27071, 8035, 1, 284, 14354, 329, 3210, 1634]",0.5,1606,best_practice,314,"Appending "".NS"" to symbols for standardization",,1606,,[]
‚úÖ Best Practice: Dropping NaN values to ensure data integrity,"[26486, 227, 6705, 19939, 25, 21045, 2105, 11013, 45, 3815, 284, 4155, 1366, 11540]",1.0,1624,best_practice,316,Dropping NaN values to ensure data integrity,,1606,"            raise ValueError(""request error"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 25927, 4049, 4943]"
‚úÖ Best Practice: Using unique to remove duplicates and converting to list for easy manipulation,"[26486, 227, 6705, 19939, 25, 8554, 3748, 284, 4781, 14184, 16856, 290, 23202, 284, 1351, 329, 2562, 17512]",1.0,1636,best_practice,318,Using unique to remove duplicates and converting to list for easy manipulation,,1624,        return _symbols,"[220, 220, 220, 220, 220, 220, 220, 1441, 4808, 1837, 2022, 10220]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if _IN_SYMBOLS is not defined elsewhere in the code,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 4808, 1268, 62, 23060, 10744, 3535, 50, 318, 407, 5447, 8057, 287, 262, 2438]",1.0,1658,sast_risk,323,Potential issue if _IN_SYMBOLS is not defined elsewhere in the code,Low,1636,"        for _name in [""otherlisted"", ""nasdaqtraded""]:","[220, 220, 220, 220, 220, 220, 220, 329, 4808, 3672, 287, 14631, 847, 17935, 1600, 366, 24716, 48539, 2213, 5286, 1, 5974]"
üß† ML Signal: Conditional data fetching based on a variable's state,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 1366, 21207, 278, 1912, 319, 257, 7885, 338, 1181]",0.5,1680,ml_signal,323,Conditional data fetching based on a variable's state,,1658,"        for _name in [""otherlisted"", ""nasdaqtraded""]:","[220, 220, 220, 220, 220, 220, 220, 329, 4808, 3672, 287, 14631, 847, 17935, 1600, 366, 24716, 48539, 2213, 5286, 1, 5974]"
üß† ML Signal: Conditional logic based on the presence of a configuration path,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 4931, 286, 257, 8398, 3108]",1.0,1706,ml_signal,325,Conditional logic based on the presence of a configuration path,,1680,"            df = pd.read_csv(url, sep=""|"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 40664, 7, 6371, 11, 41767, 2625, 91, 4943]"
üß† ML Signal: Iterating over a predefined list of indices,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 2747, 18156, 1351, 286, 36525]",0.5,1731,ml_signal,327,Iterating over a predefined list of indices,,1706,"            _symbols = df[""Symbol""].dropna()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 796, 47764, 14692, 13940, 23650, 1, 4083, 14781, 2616, 3419]"
‚ö†Ô∏è SAST Risk (Low): No error handling for file reading issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 2393, 3555, 2428]",1.0,1766,sast_risk,329,No error handling for file reading issues,Low,1731,"            _symbols = _symbols.str.replace("".W"", ""-WT"", regex=False)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 796, 4808, 1837, 2022, 10220, 13, 2536, 13, 33491, 7, 1911, 54, 1600, 27444, 39386, 1600, 40364, 28, 25101, 8]"
‚úÖ Best Practice: Using Path for file path operations for better cross-platform compatibility,"[26486, 227, 6705, 19939, 25, 8554, 10644, 329, 2393, 3108, 4560, 329, 1365, 3272, 12, 24254, 17764]",0.5,1801,best_practice,331,Using Path for file path operations for better cross-platform compatibility,,1766,"            _symbols = _symbols.str.replace("".R"", ""-RI"", regex=False)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 796, 4808, 1837, 2022, 10220, 13, 2536, 13, 33491, 7, 1911, 49, 1600, 27444, 7112, 1600, 40364, 28, 25101, 8]"
‚úÖ Best Practice: Explicitly naming columns for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 19264, 15180, 329, 16287]",0.5,1833,best_practice,332,Explicitly naming columns for clarity,,1801,"            _symbols = _symbols.str.replace(""."", ""-"", regex=False)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 796, 4808, 1837, 2022, 10220, 13, 2536, 13, 33491, 7203, 33283, 27444, 1600, 40364, 28, 25101, 8]"
‚úÖ Best Practice: Using unique to remove duplicates before extending the list,"[26486, 227, 6705, 19939, 25, 8554, 3748, 284, 4781, 14184, 16856, 878, 16610, 262, 1351]",1.0,1843,best_practice,337,Using unique to remove duplicates before extending the list,,1833,    def _get_nyse():,"[220, 220, 220, 825, 4808, 1136, 62, 3281, 325, 33529]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",1.0,1869,best_practice,325,Use descriptive variable names for better readability,,1843,"            df = pd.read_csv(url, sep=""|"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 40664, 7, 6371, 11, 41767, 2625, 91, 4943]"
‚úÖ Best Practice: Chain string operations to reduce the number of lines,"[26486, 227, 6705, 19939, 25, 21853, 4731, 4560, 284, 4646, 262, 1271, 286, 3951]",0.5,1894,best_practice,327,Chain string operations to reduce the number of lines,,1869,"            _symbols = df[""Symbol""].dropna()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 796, 47764, 14692, 13940, 23650, 1, 4083, 14781, 2616, 3419]"
üß† ML Signal: Use of sorted and set to remove duplicates and sort a collection,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 23243, 290, 900, 284, 4781, 14184, 16856, 290, 3297, 257, 4947]",1.0,1929,ml_signal,331,Use of sorted and set to remove duplicates and sort a collection,,1894,"            _symbols = _symbols.str.replace("".R"", ""-RI"", regex=False)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 796, 4808, 1837, 2022, 10220, 13, 2536, 13, 33491, 7, 1911, 49, 1600, 27444, 7112, 1600, 40364, 28, 25101, 8]"
‚ö†Ô∏è SAST Risk (Low): Returning a global variable might expose internal state,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42882, 257, 3298, 7885, 1244, 15651, 5387, 1181]",0.5,1961,sast_risk,332,Returning a global variable might expose internal state,Low,1929,"            _symbols = _symbols.str.replace(""."", ""-"", regex=False)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 796, 4808, 1837, 2022, 10220, 13, 2536, 13, 33491, 7203, 33283, 27444, 1600, 40364, 28, 25101, 8]"
‚úÖ Best Practice: Provide a clear and concise docstring for the function.,"[26486, 227, 6705, 19939, 25, 44290, 257, 1598, 290, 35327, 2205, 8841, 329, 262, 2163, 13]",0.5,1993,best_practice,332,Provide a clear and concise docstring for the function.,,1961,"            _symbols = _symbols.str.replace(""."", ""-"", regex=False)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 796, 4808, 1837, 2022, 10220, 13, 2536, 13, 33491, 7203, 33283, 27444, 1600, 40364, 28, 25101, 8]"
‚ö†Ô∏è SAST Risk (Low): Using global variables can lead to unexpected behavior and is generally discouraged.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 3298, 9633, 460, 1085, 284, 10059, 4069, 290, 318, 4143, 30170, 13]",1.0,2005,sast_risk,339,Using global variables can lead to unexpected behavior and is generally discouraged.,Low,1993,        _parms = {,"[220, 220, 220, 220, 220, 220, 220, 4808, 1845, 907, 796, 1391]"
üß† ML Signal: Use of decorators can indicate patterns for retry logic or error handling.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11705, 2024, 460, 7603, 7572, 329, 1005, 563, 9156, 393, 4049, 9041, 13]",0.5,2022,ml_signal,341,Use of decorators can indicate patterns for retry logic or error handling.,,2005,"            ""pageNumber"": 1,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 7700, 15057, 1298, 352, 11]"
"‚ö†Ô∏è SAST Risk (Medium): No timeout specified for the request, which can lead to hanging connections.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 329, 262, 2581, 11, 543, 460, 1085, 284, 10938, 8787, 13]",1.0,2040,sast_risk,343,"No timeout specified for the request, which can lead to hanging connections.",Medium,2022,"            ""sortOrder"": ""ASC"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 30619, 18743, 1298, 366, 42643, 1600]"
"‚ö†Ô∏è SAST Risk (Low): No error handling for the HTTP request, which can lead to unhandled exceptions.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 262, 14626, 2581, 11, 543, 460, 1085, 284, 555, 38788, 13269, 13]",1.0,2057,sast_risk,345,"No error handling for the HTTP request, which can lead to unhandled exceptions.",Low,2040,"            ""filterToken"": """",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 24455, 30642, 1298, 366, 1600]"
"‚ö†Ô∏è SAST Risk (Low): No check if tbody is None, which can lead to AttributeError if the structure is not as expected.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 2198, 611, 256, 2618, 318, 6045, 11, 543, 460, 1085, 284, 3460, 4163, 12331, 611, 262, 4645, 318, 407, 355, 2938, 13]",1.0,2073,sast_risk,348,"No check if tbody is None, which can lead to AttributeError if the structure is not as expected.",Low,2057,        if resp.status_code != 200:,"[220, 220, 220, 220, 220, 220, 220, 611, 1217, 13, 13376, 62, 8189, 14512, 939, 25]"
‚úÖ Best Practice: Consider using BeautifulSoup's text extraction methods for better readability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 23762, 50, 10486, 338, 2420, 22236, 5050, 329, 1365, 1100, 1799, 13]",1.0,2082,best_practice,351,Consider using BeautifulSoup's text extraction methods for better readability.,,2073,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
üß† ML Signal: Conditional logic based on the state of _BR_SYMBOLS.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 1181, 286, 4808, 11473, 62, 23060, 10744, 3535, 50, 13]",1.0,2106,ml_signal,354,Conditional logic based on the state of _BR_SYMBOLS.,,2082,"            logger.warning(f""request error: {e}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 25927, 4049, 25, 1391, 68, 92, 4943]"
üß† ML Signal: Conditional logic based on the state of qlib_data_path.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 1181, 286, 10662, 8019, 62, 7890, 62, 6978, 13]",1.0,2140,ml_signal,359,Conditional logic based on the state of qlib_data_path.,,2106,        _all_symbols = _get_eastmoney() + _get_nasdaq() + _get_nyse(),"[220, 220, 220, 220, 220, 220, 220, 4808, 439, 62, 1837, 2022, 10220, 796, 4808, 1136, 62, 23316, 26316, 3419, 1343, 4808, 1136, 62, 24716, 48539, 3419, 1343, 4808, 1136, 62, 3281, 325, 3419]"
‚úÖ Best Practice: Use Pathlib for file path operations for better cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 10644, 8019, 329, 2393, 3108, 4560, 329, 1365, 3272, 12, 24254, 17764, 13]",1.0,2158,best_practice,360,Use Pathlib for file path operations for better cross-platform compatibility.,,2140,        if qlib_data_path is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 10662, 8019, 62, 7890, 62, 6978, 318, 407, 6045, 25]"
üß† ML Signal: Appending unique symbols from a DataFrame to a list.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 3748, 14354, 422, 257, 6060, 19778, 284, 257, 1351, 13]",0.5,2174,ml_signal,366,Appending unique symbols from a DataFrame to a list.,,2158,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Strip whitespace before other characters for consistency,"[26486, 227, 6705, 19939, 25, 18508, 13216, 10223, 878, 584, 3435, 329, 15794]",0.5,2199,best_practice,361,Strip whitespace before other characters for consistency,,2174,"            for _index in [""nasdaq100"", ""sp500""]:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 4808, 9630, 287, 14631, 24716, 48539, 3064, 1600, 366, 2777, 4059, 1, 5974]"
‚úÖ Best Practice: Chaining strip operations for multiple characters,"[26486, 227, 6705, 19939, 25, 609, 1397, 10283, 4560, 329, 3294, 3435]",0.5,2242,best_practice,363,Chaining strip operations for multiple characters,,2199,"                    Path(qlib_data_path).joinpath(f""instruments/{_index}.txt""),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10644, 7, 80, 8019, 62, 7890, 62, 6978, 737, 22179, 6978, 7, 69, 1, 259, 2536, 2886, 14, 90, 62, 9630, 27422, 14116, 12340]"
‚úÖ Best Practice: Consistent string concatenation,"[26486, 227, 6705, 19939, 25, 3515, 7609, 4731, 1673, 36686, 341]",0.5,2258,best_practice,366,Consistent string concatenation,,2242,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Use of map and set to process and deduplicate a list,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3975, 290, 900, 284, 1429, 290, 4648, 84, 489, 5344, 257, 1351]",1.0,2272,ml_signal,369,Use of map and set to process and deduplicate a list,,2258,        def _format(s_):,"[220, 220, 220, 220, 220, 220, 220, 825, 4808, 18982, 7, 82, 62, 2599]"
‚úÖ Best Practice: Use of sorted to maintain order after deduplication,"[26486, 227, 6705, 19939, 25, 5765, 286, 23243, 284, 5529, 1502, 706, 4648, 84, 489, 3299]",0.5,2286,best_practice,369,Use of sorted to maintain order after deduplication,,2272,        def _format(s_):,"[220, 220, 220, 220, 220, 220, 220, 825, 4808, 18982, 7, 82, 62, 2599]"
‚úÖ Best Practice: Consider adding type hints for the return type of the function,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 1441, 2099, 286, 262, 2163]",0.5,2286,best_practice,368,Consider adding type hints for the return type of the function,,2286,,[]
üß† ML Signal: Use of global variables can indicate shared state or configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3298, 9633, 460, 7603, 4888, 1181, 393, 8398]",1.0,2286,ml_signal,374,Use of global variables can indicate shared state or configuration,,2286,,[]
‚ö†Ô∏è SAST Risk (Low): Use of decorators can introduce unexpected behavior if not properly managed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 11705, 2024, 460, 10400, 10059, 4069, 611, 407, 6105, 5257]",1.0,2297,sast_risk,377,Use of decorators can introduce unexpected behavior if not properly managed,Low,2286,    return _US_SYMBOLS,"[220, 220, 220, 1441, 4808, 2937, 62, 23060, 10744, 3535, 50]"
"‚ö†Ô∏è SAST Risk (Medium): No timeout specified for the request, which can lead to hanging connections","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 329, 262, 2581, 11, 543, 460, 1085, 284, 10938, 8787]",1.0,2297,sast_risk,378,"No timeout specified for the request, which can lead to hanging connections",Medium,2297,,[]
‚ö†Ô∏è SAST Risk (Low): No specific exception handling for network-related errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 2176, 6631, 9041, 329, 3127, 12, 5363, 8563]",0.5,2326,sast_risk,380,No specific exception handling for network-related errors,Low,2297,"def get_in_stock_symbols(qlib_data_path: [str, Path] = None) -> list:","[4299, 651, 62, 259, 62, 13578, 62, 1837, 2022, 10220, 7, 80, 8019, 62, 7890, 62, 6978, 25, 685, 2536, 11, 10644, 60, 796, 6045, 8, 4613, 1351, 25]"
‚ö†Ô∏è SAST Risk (Low): Use of regular expressions without validation can lead to ReDoS,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3218, 14700, 1231, 21201, 460, 1085, 284, 797, 46498]",1.0,2335,sast_risk,385,Use of regular expressions without validation can lead to ReDoS,Low,2326,        stock symbols,"[220, 220, 220, 220, 220, 220, 220, 4283, 14354]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563]",1.0,2345,sast_risk,390,Catching broad exceptions can hide specific errors,Low,2335,    def _get_nifty():,"[220, 220, 220, 825, 4808, 1136, 62, 77, 24905, 33529]"
üß† ML Signal: Checks if a global variable is None before initializing,"[8582, 100, 254, 10373, 26484, 25, 47719, 611, 257, 3298, 7885, 318, 6045, 878, 4238, 2890]",0.5,2368,ml_signal,396,Checks if a global variable is None before initializing,,2345,        _symbols = _symbols.unique().tolist(),"[220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 796, 4808, 1837, 2022, 10220, 13, 34642, 22446, 83, 349, 396, 3419]"
‚úÖ Best Practice: Use of set to remove duplicates before sorting,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 284, 4781, 14184, 16856, 878, 29407]",1.0,2380,best_practice,397,Use of set to remove duplicates before sorting,,2368,        return _symbols,"[220, 220, 220, 220, 220, 220, 220, 1441, 4808, 1837, 2022, 10220]"
‚úÖ Best Practice: Consider adding error handling for the split operation in case the input format is incorrect.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 4049, 9041, 329, 262, 6626, 4905, 287, 1339, 262, 5128, 5794, 318, 11491, 13]",1.0,2396,best_practice,407,Consider adding error handling for the split operation in case the input format is incorrect.,,2380,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of specific exchange codes can indicate financial domain-specific processing.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2176, 5163, 12416, 460, 7603, 3176, 7386, 12, 11423, 7587, 13]",1.0,2396,ml_signal,409,Usage of specific exchange codes can indicate financial domain-specific processing.,,2396,,[]
‚úÖ Best Practice: Use of f-strings for string formatting is a modern and readable approach.,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 37336, 329, 4731, 33313, 318, 257, 3660, 290, 31744, 3164, 13]",0.5,2417,best_practice,411,Use of f-strings for string formatting is a modern and readable approach.,,2396,"            s_ = s_.replace(""."", ""-"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 62, 796, 264, 44807, 33491, 7203, 33283, 27444, 4943]"
‚úÖ Best Practice: Use of f-strings for string formatting is a modern and readable approach.,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 37336, 329, 4731, 33313, 318, 257, 3660, 290, 31744, 3164, 13]",0.5,2431,best_practice,414,Use of f-strings for string formatting is a modern and readable approach.,,2417,            return s_,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 264, 62]"
üß† ML Signal: Conditional logic based on the 'capital' flag can indicate user preference for output format.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 705, 27544, 6, 6056, 460, 7603, 2836, 12741, 329, 5072, 5794, 13]",0.5,2445,ml_signal,414,Conditional logic based on the 'capital' flag can indicate user preference for output format.,,2431,            return s_,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 264, 62]"
‚úÖ Best Practice: Docstring provides a clear description of the function and its parameters.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2163, 290, 663, 10007, 13]",1.0,2459,best_practice,414,Docstring provides a clear description of the function and its parameters.,,2445,            return s_,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 264, 62]"
‚úÖ Best Practice: Using f-string for string formatting is efficient and readable.,"[26486, 227, 6705, 19939, 25, 8554, 277, 12, 8841, 329, 4731, 33313, 318, 6942, 290, 31744, 13]",0.5,2463,best_practice,425,Using f-string for string formatting is efficient and readable.,,2459,    -------,"[220, 220, 220, 35656]"
üß† ML Signal: Conditional logic based on a boolean parameter.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 257, 25131, 11507, 13]",1.0,2467,ml_signal,427,Conditional logic based on a boolean parameter.,,2463,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",0.5,2471,best_practice,427,Use of default parameter values for flexibility and ease of use,,2467,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use of functools.wraps to preserve metadata of the original function,"[26486, 227, 6705, 19939, 25, 5765, 286, 1257, 310, 10141, 13, 29988, 862, 284, 12201, 20150, 286, 262, 2656, 2163]",0.5,2475,best_practice,427,Use of functools.wraps to preserve metadata of the original function,,2471,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Use of retry logic pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1005, 563, 9156, 3912]",1.0,2484,ml_signal,430,Use of retry logic pattern,,2475,    @deco_retry,"[220, 220, 220, 2488, 12501, 78, 62, 1186, 563]"
üß† ML Signal: Function call with dynamic arguments,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 8925, 7159]",1.0,2493,ml_signal,435,Function call with dynamic arguments,,2484,        # Request,"[220, 220, 220, 220, 220, 220, 220, 1303, 19390]"
‚ö†Ô∏è SAST Risk (Low): Catching broad Exception,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 35528]",0.5,2504,sast_risk,439,Catching broad Exception,Low,2493,        # BeautifulSoup,"[220, 220, 220, 220, 220, 220, 220, 1303, 23762, 50, 10486]"
üß† ML Signal: Logging pattern for exception handling,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 3912, 329, 6631, 9041]",0.5,2526,ml_signal,440,Logging pattern for exception handling,,2504,"        soup = BeautifulSoup(page.content, ""html.parser"")","[220, 220, 220, 220, 220, 220, 220, 17141, 796, 23762, 50, 10486, 7, 7700, 13, 11299, 11, 366, 6494, 13, 48610, 4943]"
‚ö†Ô∏è SAST Risk (Low): Re-raising the caught exception,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 797, 12, 32741, 262, 4978, 6631]",0.5,2547,sast_risk,443,Re-raising the caught exception,Low,2526,"        children = tbody.findChildren(""a"", recursive=True)","[220, 220, 220, 220, 220, 220, 220, 1751, 796, 256, 2618, 13, 19796, 26829, 7203, 64, 1600, 45115, 28, 17821, 8]"
‚ö†Ô∏è SAST Risk (Low): Use of time.sleep can lead to blocking,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 640, 13, 42832, 460, 1085, 284, 12013]",0.5,2597,sast_risk,445,Use of time.sleep can lead to blocking,Low,2547,"            _symbols.append(str(child).rsplit('""', maxsplit=1)[-1].split("">"")[1].split(""<"")[0])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 13, 33295, 7, 2536, 7, 9410, 737, 3808, 489, 270, 10786, 1, 3256, 3509, 35312, 28, 16, 38381, 12, 16, 4083, 35312, 7, 5320, 4943, 58, 16, 4083, 35312, 7203, 27, 4943, 58, 15, 12962]"
‚úÖ Best Practice: Use of conditional expression for function return,"[26486, 227, 6705, 19939, 25, 5765, 286, 26340, 5408, 329, 2163, 1441]",0.5,2647,best_practice,445,Use of conditional expression for function return,,2597,"            _symbols.append(str(child).rsplit('""', maxsplit=1)[-1].split("">"")[1].split(""<"")[0])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 1837, 2022, 10220, 13, 33295, 7, 2536, 7, 9410, 737, 3808, 489, 270, 10786, 1, 3256, 3509, 35312, 28, 16, 38381, 12, 16, 4083, 35312, 7, 5320, 4943, 58, 16, 4083, 35312, 7203, 27, 4943, 58, 15, 12962]"
‚úÖ Best Practice: Add type hint for the return value in the function signature,"[26486, 227, 6705, 19939, 25, 3060, 2099, 9254, 329, 262, 1441, 1988, 287, 262, 2163, 9877]",1.0,2659,best_practice,444,Add type hint for the return value in the function signature,,2647,        for child in children:,"[220, 220, 220, 220, 220, 220, 220, 329, 1200, 287, 1751, 25]"
‚úÖ Best Practice: Ensure trading_date is a pd.Timestamp for consistency,"[26486, 227, 6705, 19939, 25, 48987, 7313, 62, 4475, 318, 257, 279, 67, 13, 14967, 27823, 329, 15794]",1.0,2695,best_practice,458,Ensure trading_date is a pd.Timestamp for consistency,,2659,"                _all_symbols += ins_df[""symbol""].unique().tolist()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 439, 62, 1837, 2022, 10220, 15853, 1035, 62, 7568, 14692, 1837, 23650, 1, 4083, 34642, 22446, 83, 349, 396, 3419]"
‚úÖ Best Practice: Use bisect module for efficient searching in sorted lists,"[26486, 227, 6705, 19939, 25, 5765, 47457, 478, 8265, 329, 6942, 10342, 287, 23243, 8341]",0.5,2709,best_practice,460,Use bisect module for efficient searching in sorted lists,,2695,        def _format(s_):,"[220, 220, 220, 220, 220, 220, 220, 825, 4808, 18982, 7, 82, 62, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if left_index + shift is out of bounds,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 1364, 62, 9630, 1343, 6482, 318, 503, 286, 22303]",1.0,2729,sast_risk,463,Potential IndexError if left_index + shift is out of bounds,Low,2709,"            s_ = s_.strip(""*"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 62, 796, 264, 44807, 36311, 7203, 9, 4943]"
‚úÖ Best Practice: Handle IndexError to prevent application crash,"[26486, 227, 6705, 19939, 25, 33141, 12901, 12331, 284, 2948, 3586, 7014]",1.0,2749,best_practice,464,Handle IndexError to prevent application crash,,2729,"            s_ = s_ + "".SA""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 62, 796, 264, 62, 1343, 27071, 4090, 1]"
‚úÖ Best Practice: Consider importing only necessary functions from modules to improve readability and performance.,"[26486, 227, 6705, 19939, 25, 12642, 33332, 691, 3306, 5499, 422, 13103, 284, 2987, 1100, 1799, 290, 2854, 13]",1.0,2769,best_practice,464,Consider importing only necessary functions from modules to improve readability and performance.,,2749,"            s_ = s_ + "".SA""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 62, 796, 264, 62, 1343, 27071, 4090, 1]"
üß† ML Signal: Iterating over a list of dates to generate time ranges is a common pattern in time series data processing.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 9667, 284, 7716, 640, 16069, 318, 257, 2219, 3912, 287, 640, 2168, 1366, 7587, 13]",0.5,2787,ml_signal,486,Iterating over a list of dates to generate time ranges is a common pattern in time series data processing.,,2769,"            raise ValueError(""request error"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7203, 25927, 4049, 4943]"
‚ö†Ô∏è SAST Risk (Low): Using np.hstack without checking the contents of 'res' could lead to unexpected behavior if 'res' is empty.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 45941, 13, 71, 25558, 1231, 10627, 262, 10154, 286, 705, 411, 6, 714, 1085, 284, 10059, 4069, 611, 705, 411, 6, 318, 6565, 13]",1.0,2811,sast_risk,494,Using np.hstack without checking the contents of 'res' could lead to unexpected behavior if 'res' is empty.,Low,2787,"            logger.warning(f""request error: {e}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 25927, 4049, 25, 1391, 68, 92, 4943]"
‚úÖ Best Practice: Use of type hints for function parameters improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2835,best_practice,494,Use of type hints for function parameters improves code readability and maintainability.,,2811,"            logger.warning(f""request error: {e}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 25927, 4049, 25, 1391, 68, 92, 4943]"
‚ö†Ô∏è SAST Risk (Medium): Dynamic import using importlib can lead to security risks if the module name is not controlled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 26977, 1330, 1262, 1330, 8019, 460, 1085, 284, 2324, 7476, 611, 262, 8265, 1438, 318, 407, 6856, 13]",1.0,2835,sast_risk,527,Dynamic import using importlib can lead to security risks if the module name is not controlled.,Medium,2835,,[]
‚ö†Ô∏è SAST Risk (Medium): Use of getattr with dynamic attribute names can lead to security risks if not properly controlled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 651, 35226, 351, 8925, 11688, 3891, 460, 1085, 284, 2324, 7476, 611, 407, 6105, 6856, 13]",1.0,2845,sast_risk,530,Use of getattr with dynamic attribute names can lead to security risks if not properly controlled.,Medium,2835,"    """"""symbol prefix to sufix","[220, 220, 220, 37227, 1837, 23650, 21231, 284, 424, 13049]"
‚ö†Ô∏è SAST Risk (Medium): Use of getattr with dynamic method names can lead to security risks if not properly controlled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 651, 35226, 351, 8925, 2446, 3891, 460, 1085, 284, 2324, 7476, 611, 407, 6105, 6856, 13]",1.0,2850,sast_risk,533,Use of getattr with dynamic method names can lead to security risks if not properly controlled.,Medium,2845,    ----------,"[220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Use of deepcopy to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 286, 2769, 30073, 284, 3368, 30620, 262, 2656, 6060, 19778]",1.0,2850,best_practice,531,Use of deepcopy to avoid modifying the original DataFrame,,2850,,[]
‚úÖ Best Practice: Resetting index to ensure a clean DataFrame structure,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 284, 4155, 257, 3424, 6060, 19778, 4645]",1.0,2855,best_practice,533,Resetting index to ensure a clean DataFrame structure,,2850,    ----------,"[220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Renaming columns for clarity and consistency,"[26486, 227, 6705, 19939, 25, 7152, 3723, 15180, 329, 16287, 290, 15794]",1.0,2863,best_practice,535,Renaming columns for clarity and consistency,,2855,        symbol,"[220, 220, 220, 220, 220, 220, 220, 6194]"
üß† ML Signal: Use of lambda function for column name transformation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 2163, 329, 5721, 1438, 13389]",1.0,2873,ml_signal,537,Use of lambda function for column name transformation,,2863,        by default True,"[220, 220, 220, 220, 220, 220, 220, 416, 4277, 6407]"
‚úÖ Best Practice: Returning a DataFrame allows for further data manipulation,"[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 3578, 329, 2252, 1366, 17512]",1.0,2883,best_practice,537,Returning a DataFrame allows for further data manipulation,,2873,        by default True,"[220, 220, 220, 220, 220, 220, 220, 416, 4277, 6407]"
üß† ML Signal: Function signature with specific parameters can indicate usage patterns for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 2176, 10007, 460, 7603, 8748, 7572, 329, 1366, 45069]",0.5,2893,ml_signal,537,Function signature with specific parameters can indicate usage patterns for data retrieval,,2883,        by default True,"[220, 220, 220, 220, 220, 220, 220, 416, 4277, 6407]"
‚úÖ Best Practice: Descriptive variable names improve code readability,"[26486, 227, 6705, 19939, 25, 2935, 6519, 425, 7885, 3891, 2987, 2438, 1100, 1799]",1.0,2918,best_practice,552,Descriptive variable names improve code readability,,2893,"            for _i in range(1, _retry + 1):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 4808, 72, 287, 2837, 7, 16, 11, 4808, 1186, 563, 1343, 352, 2599]"
‚úÖ Best Practice: Using upper() ensures case-insensitive comparison,"[26486, 227, 6705, 19939, 25, 8554, 6727, 3419, 19047, 1339, 12, 1040, 18464, 7208]",1.0,2938,best_practice,557,Using upper() ensures case-insensitive comparison,,2918,                except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if 'start' and 'end' are not validated as date strings,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 9688, 6, 290, 705, 437, 6, 389, 407, 31031, 355, 3128, 13042]",1.0,2958,sast_risk,557,Potential risk if 'start' and 'end' are not validated as date strings,Low,2938,                except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚úÖ Best Practice: Consider adding type hints for the function parameters for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2163, 10007, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,2978,best_practice,557,Consider adding type hints for the function parameters for better readability and maintainability.,,2958,                except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
üß† ML Signal: Usage of a custom function `get_1d_data` which might be a point of interest for ML models.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 2163, 4600, 1136, 62, 16, 67, 62, 7890, 63, 543, 1244, 307, 257, 966, 286, 1393, 329, 10373, 4981, 13]",0.5,2990,ml_signal,591,Usage of a custom function `get_1d_data` which might be a point of interest for ML models.,,2978,        res = trading_date,"[220, 220, 220, 220, 220, 220, 220, 581, 796, 7313, 62, 4475]"
"‚ö†Ô∏è SAST Risk (Low): Division by zero risk if `df[""close""].first_valid_index()` returns None.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7458, 416, 6632, 2526, 611, 4600, 7568, 14692, 19836, 1, 4083, 11085, 62, 12102, 62, 9630, 3419, 63, 5860, 6045, 13]",0.5,2990,sast_risk,594,"Division by zero risk if `df[""close""].first_valid_index()` returns None.",Low,2990,,[]
‚ö†Ô∏è SAST Risk (Low): Potential issue with NaN handling in logical operations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 351, 11013, 45, 9041, 287, 12219, 4560, 13]",0.5,2997,sast_risk,600,Potential issue with NaN handling in logical operations.,Low,2990,) -> pd.Index:,"[8, 4613, 279, 67, 13, 15732, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if _date is not in data_1d,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 4808, 4475, 318, 407, 287, 1366, 62, 16, 67]",1.0,2997,sast_risk,602,Potential KeyError if _date is not in data_1d,Low,2997,,[]
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if _date is not in data_1d,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 4808, 4475, 318, 407, 287, 1366, 62, 16, 67]",1.0,3001,sast_risk,603,Potential KeyError if _date is not in data_1d,Low,2997,    Parameters,"[220, 220, 220, 40117]"
‚úÖ Best Practice: Catch specific exceptions instead of a general Exception,"[26486, 227, 6705, 19939, 25, 25750, 2176, 13269, 2427, 286, 257, 2276, 35528]",1.0,3008,best_practice,607,Catch specific exceptions instead of a general Exception,,3001,    freq: str,"[220, 220, 220, 2030, 80, 25, 965]"
üß† ML Signal: Usage of groupby and apply indicates data transformation pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1448, 1525, 290, 4174, 9217, 1366, 13389, 3912]",1.0,3022,ml_signal,611,Usage of groupby and apply indicates data transformation pattern,,3008,"    pm_range: Tuple[str, str]","[220, 220, 220, 9114, 62, 9521, 25, 309, 29291, 58, 2536, 11, 965, 60]"
‚úÖ Best Practice: Consider checking if _date_field_name exists in df before setting index,"[26486, 227, 6705, 19939, 25, 12642, 10627, 611, 4808, 4475, 62, 3245, 62, 3672, 7160, 287, 47764, 878, 4634, 6376]",0.5,3036,best_practice,611,Consider checking if _date_field_name exists in df before setting index,,3022,"    pm_range: Tuple[str, str]","[220, 220, 220, 9114, 62, 9521, 25, 309, 29291, 58, 2536, 11, 965, 60]"
üß† ML Signal: Usage of custom calendar generation function,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 11845, 5270, 2163]",1.0,3051,ml_signal,619,Usage of custom calendar generation function,,3036,            res.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 13, 33295, 7]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if first_valid_index returns None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 717, 62, 12102, 62, 9630, 5860, 6045]",1.0,3063,sast_risk,625,Potential IndexError if first_valid_index returns None,Low,3051,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Different handling for 'volume' column indicates special treatment,"[8582, 100, 254, 10373, 26484, 25, 20615, 9041, 329, 705, 29048, 6, 5721, 9217, 2041, 3513]",1.0,3077,ml_signal,633,Different handling for 'volume' column indicates special treatment,,3063,"    method: str = ""parse_instruments"",","[220, 220, 220, 2446, 25, 965, 796, 366, 29572, 62, 259, 2536, 2886, 1600]"
üß† ML Signal: Conditional logic based on calc_paused flag,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 42302, 62, 8957, 1484, 6056]",1.0,3078,ml_signal,638,Conditional logic based on calc_paused flag,,3077,):,[2599]
‚úÖ Best Practice: Use of .copy() to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 286, 764, 30073, 3419, 284, 3368, 30620, 262, 2656, 6060, 19778]",1.0,3082,best_practice,639,Use of .copy() to avoid modifying the original DataFrame,,3078,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Use of lambda function for date conversion,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 37456, 2163, 329, 3128, 11315]",0.5,3086,ml_signal,641,Use of lambda function for date conversion,,3082,    Parameters,"[220, 220, 220, 40117]"
‚ö†Ô∏è SAST Risk (Low): Logging potentially sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 1321]",1.0,3112,sast_risk,648,Logging potentially sensitive information,Low,3086,"        method, value from [""parse_instruments"", ""save_new_companies""]","[220, 220, 220, 220, 220, 220, 220, 2446, 11, 1988, 422, 14631, 29572, 62, 259, 2536, 2886, 1600, 366, 21928, 62, 3605, 62, 34390, 444, 8973]"
‚ö†Ô∏è SAST Risk (Low): Logging potentially sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5972, 2667, 6196, 8564, 1321]",1.0,3112,sast_risk,674,Logging potentially sensitive information,Low,3112,,[]
"‚ö†Ô∏è SAST Risk (Low): Use of assert for runtime checks, which can be disabled","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 6818, 329, 19124, 8794, 11, 543, 460, 307, 10058]",0.5,3126,sast_risk,677,"Use of assert for runtime checks, which can be disabled",Low,3112,    df.reset_index(inplace=True),"[220, 220, 220, 47764, 13, 42503, 62, 9630, 7, 259, 5372, 28, 17821, 8]"

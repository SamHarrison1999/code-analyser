annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
✅ Best Practice: Use of Path from pathlib for file path operations improves code readability and cross-platform compatibility.,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 422, 3108, 8019, 329, 2393, 3108, 4560, 19575, 2438, 1100, 1799, 290, 3272, 12, 24254, 17764, 13]",0.5,0,best_practice,9,Use of Path from pathlib for file path operations improves code readability and cross-platform compatibility.,,0,,[]
⚠️ SAST Risk (Low): Modifying sys.path can lead to import conflicts or security issues if not handled carefully.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3401, 4035, 25064, 13, 6978, 460, 1085, 284, 1330, 12333, 393, 2324, 2428, 611, 407, 12118, 7773, 13]",1.0,0,sast_risk,12,Modifying sys.path can lead to import conflicts or security issues if not handled carefully.,Low,0,,[]
⚠️ SAST Risk (Low): Importing from a potentially unknown or external module can introduce security risks if the module is not trusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 17267, 278, 422, 257, 6196, 6439, 393, 7097, 8265, 460, 10400, 2324, 7476, 611, 262, 8265, 318, 407, 13467, 13]",0.5,0,sast_risk,15,Importing from a potentially unknown or external module can introduce security risks if the module is not trusted.,Low,0,,[]
✅ Best Practice: Consider adding a docstring to the class to describe its purpose and usage.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 262, 1398, 284, 6901, 663, 4007, 290, 8748, 13]",0.5,15,best_practice,11,Consider adding a docstring to the class to describe its purpose and usage.,,0,sys.path.append(str(CUR_DIR.parent)),"[17597, 13, 6978, 13, 33295, 7, 2536, 7, 34, 4261, 62, 34720, 13, 8000, 4008]"
✅ Best Practice: Constants are defined in uppercase to indicate they are not meant to be changed.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 287, 334, 39921, 589, 284, 7603, 484, 389, 407, 4001, 284, 307, 3421, 13]",0.5,15,best_practice,13,Constants are defined in uppercase to indicate they are not meant to be changed.,,15,,[]
✅ Best Practice: Using a list to group related constants improves maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 257, 1351, 284, 1448, 3519, 38491, 19575, 5529, 1799, 13]",0.5,28,best_practice,20,Using a list to group related constants improves maintainability.,,15,"    DATE_FIELD_NAME = ""date""","[220, 220, 220, 360, 6158, 62, 44603, 62, 20608, 796, 366, 4475, 1]"
⚠️ SAST Risk (Low): Potential directory traversal if qlib_dir is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 10662, 8019, 62, 15908, 318, 2836, 12, 14401]",1.0,41,sast_risk,47,Potential directory traversal if qlib_dir is user-controlled,Low,28,        request_retry: int,"[220, 220, 220, 220, 220, 220, 220, 2581, 62, 1186, 563, 25, 493]"
⚠️ SAST Risk (Low): Directory creation without checking permissions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 27387, 6282, 1231, 10627, 21627]",0.5,54,sast_risk,49,Directory creation without checking permissions,Low,41,        retry_sleep: int,"[220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 42832, 25, 493]"
⚠️ SAST Risk (Low): Potential directory traversal if index_name is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 6376, 62, 3672, 318, 2836, 12, 14401]",1.0,62,sast_risk,51,Potential directory traversal if index_name is user-controlled,Low,54,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
⚠️ SAST Risk (Low): Directory creation without checking permissions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 27387, 6282, 1231, 10627, 21627]",0.5,77,sast_risk,53,Directory creation without checking permissions,Low,62,        if qlib_dir is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 10662, 8019, 62, 15908, 318, 6045, 25]"
✅ Best Practice: Include type hints for return values to improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 1441, 3815, 284, 2987, 2438, 1100, 1799, 290, 5529, 1799]",1.0,118,best_practice,57,Include type hints for return values to improve code readability and maintainability,,77,"        self.cache_dir = Path(f""~/.cache/qlib/index/{self.index_name}"").expanduser().resolve()","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 23870, 62, 15908, 796, 10644, 7, 69, 1, 93, 11757, 23870, 14, 80, 8019, 14, 9630, 14, 90, 944, 13, 9630, 62, 3672, 92, 11074, 11201, 392, 7220, 22446, 411, 6442, 3419]"
✅ Best Practice: Use NotImplementedError to indicate that a method should be overridden in a subclass,"[26486, 227, 6705, 19939, 25, 5765, 1892, 3546, 1154, 12061, 12331, 284, 7603, 326, 257, 2446, 815, 307, 23170, 4651, 287, 257, 47611]",0.5,118,best_practice,62,Use NotImplementedError to indicate that a method should be overridden in a subclass,,118,,[]
✅ Best Practice: Use @property and @abc.abstractmethod to enforce implementation of properties in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 2488, 26745, 290, 2488, 39305, 13, 397, 8709, 24396, 284, 4605, 7822, 286, 6608, 287, 850, 37724]",1.0,126,best_practice,66,Use @property and @abc.abstractmethod to enforce implementation of properties in subclasses,,118,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Include type hints for better code readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 1365, 2438, 1100, 1799, 290, 5529, 1799]",0.5,134,best_practice,66,Include type hints for better code readability and maintainability,,126,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
✅ Best Practice: Use NotImplementedError to indicate that subclasses should implement this method,"[26486, 227, 6705, 19939, 25, 5765, 1892, 3546, 1154, 12061, 12331, 284, 7603, 326, 850, 37724, 815, 3494, 428, 2446]",0.5,156,best_practice,71,Use NotImplementedError to indicate that subclasses should implement this method,,134,"        raise NotImplementedError(""rewrite bench_start_date"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7203, 1809, 6525, 7624, 62, 9688, 62, 4475, 4943]"
✅ Best Practice: Use @abc.abstractmethod to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 2488, 39305, 13, 397, 8709, 24396, 284, 4605, 7822, 287, 850, 37724]",1.0,165,best_practice,74,Use @abc.abstractmethod to enforce implementation in subclasses,,156,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
✅ Best Practice: Using NotImplementedError to indicate an abstract method that should be implemented by subclasses,"[26486, 227, 6705, 19939, 25, 8554, 1892, 3546, 1154, 12061, 12331, 284, 7603, 281, 12531, 2446, 326, 815, 307, 9177, 416, 850, 37724]",0.5,185,best_practice,85,Using NotImplementedError to indicate an abstract method that should be implemented by subclasses,,165,    def get_new_companies(self) -> pd.DataFrame:,"[220, 220, 220, 825, 651, 62, 3605, 62, 34390, 444, 7, 944, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
✅ Best Practice: Using abc.abstractmethod to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 8554, 450, 66, 13, 397, 8709, 24396, 284, 4605, 7822, 287, 850, 37724]",0.5,185,best_practice,87,Using abc.abstractmethod to enforce implementation in subclasses,,185,,[]
✅ Best Practice: Include a docstring to describe the method's purpose and return value,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 1441, 1988]",0.5,193,best_practice,88,Include a docstring to describe the method's purpose and return value,,185,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
"⚠️ SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444]",1.0,216,sast_risk,100,"Method is not implemented, which could lead to runtime errors if called",Low,193,"        raise NotImplementedError(""rewrite get_new_companies"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7203, 1809, 6525, 651, 62, 3605, 62, 34390, 444, 4943]"
✅ Best Practice: Use of abstract method to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 286, 12531, 2446, 284, 4605, 7822, 287, 850, 37724]",1.0,233,best_practice,103,Use of abstract method to enforce implementation in subclasses,,216,    def get_changes(self) -> pd.DataFrame:,"[220, 220, 220, 825, 651, 62, 36653, 7, 944, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
"✅ Best Practice: Method docstring is provided, which improves code readability and maintainability.","[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 318, 2810, 11, 543, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,242,best_practice,102,"Method docstring is provided, which improves code readability and maintainability.",,233,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
"✅ Best Practice: Docstring includes parameter and return type information, aiding in understanding the method's usage.","[26486, 227, 6705, 19939, 25, 14432, 8841, 3407, 11507, 290, 1441, 2099, 1321, 11, 37221, 287, 4547, 262, 2446, 338, 8748, 13]",0.5,259,best_practice,103,"Docstring includes parameter and return type information, aiding in understanding the method's usage.",,242,    def get_changes(self) -> pd.DataFrame:,"[220, 220, 220, 825, 651, 62, 36653, 7, 944, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
"⚠️ SAST Risk (Low): Method raises NotImplementedError, indicating it's a placeholder and should be implemented to avoid runtime errors.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 12739, 340, 338, 257, 46076, 290, 815, 307, 9177, 284, 3368, 19124, 8563, 13]",0.5,277,sast_risk,113,"Method raises NotImplementedError, indicating it's a placeholder and should be implemented to avoid runtime errors.",Low,259,                symbol: str,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 25, 965]"
"🧠 ML Signal: Function to save new companies, indicating a data processing pattern","[8582, 100, 254, 10373, 26484, 25, 15553, 284, 3613, 649, 2706, 11, 12739, 257, 1366, 7587, 3912]",1.0,277,ml_signal,118,"Function to save new companies, indicating a data processing pattern",,277,,[]
⚠️ SAST Risk (Low): Potential NoneType dereference if get_new_companies() returns None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 390, 35790, 611, 651, 62, 3605, 62, 34390, 444, 3419, 5860, 6045]",1.0,305,sast_risk,120,Potential NoneType dereference if get_new_companies() returns None,Low,277,"    def format_datetime(self, inst_df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 5794, 62, 19608, 8079, 7, 944, 11, 916, 62, 7568, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
✅ Best Practice: Removing duplicates to ensure data integrity,"[26486, 227, 6705, 19939, 25, 3982, 5165, 14184, 16856, 284, 4155, 1366, 11540]",1.0,305,best_practice,122,Removing duplicates to ensure data integrity,,305,,[]
⚠️ SAST Risk (Low): Potential directory traversal if instruments_dir is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 12834, 62, 15908, 318, 407, 31031]",1.0,321,sast_risk,125,Potential directory traversal if instruments_dir is not validated,Low,305,        inst_df: pd.DataFrame,"[220, 220, 220, 220, 220, 220, 220, 916, 62, 7568, 25, 279, 67, 13, 6601, 19778]"
🧠 ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,374,ml_signal,146,Logging usage pattern,,321,"            self.instruments_dir.joinpath(f""{self.index_name.lower()}_only_new.txt""), sep=""\t"", index=False, header=None","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 259, 2536, 2886, 62, 15908, 13, 22179, 6978, 7, 69, 1, 90, 944, 13, 9630, 62, 3672, 13, 21037, 3419, 92, 62, 8807, 62, 3605, 13, 14116, 12340, 41767, 2625, 59, 83, 1600, 6376, 28, 25101, 11, 13639, 28, 14202]"
🧠 ML Signal: Iterating over sorted unique dates,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 23243, 3748, 9667]",0.5,374,ml_signal,151,Iterating over sorted unique dates,,374,,[]
✅ Best Practice: Using set operations for list differences,"[26486, 227, 6705, 19939, 25, 8554, 900, 4560, 329, 1351, 5400]",1.0,374,best_practice,157,Using set operations for list differences,,374,,[]
⚠️ SAST Risk (Low): Potential risk of concatenating an empty list if no changes are detected,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 286, 1673, 36686, 803, 281, 6565, 1351, 611, 645, 2458, 389, 12326]",0.5,386,sast_risk,175,Potential risk of concatenating an empty list if no changes are detected,Low,374,        last_code = [],"[220, 220, 220, 220, 220, 220, 220, 938, 62, 8189, 796, 17635]"
🧠 ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,400,ml_signal,176,Logging usage pattern,,386,        result_df_list = [],"[220, 220, 220, 220, 220, 220, 220, 1255, 62, 7568, 62, 4868, 796, 17635]"
🧠 ML Signal: Logging the start of a process can be used to identify function usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 923, 286, 257, 1429, 460, 307, 973, 284, 5911, 2163, 8748, 7572, 13]",0.5,416,ml_signal,181,Logging the start of a process can be used to identify function usage patterns.,,400,            ].tolist(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 20740, 83, 349, 396, 3419]"
⚠️ SAST Risk (Low): Potential for NoneType or empty DataFrame leading to a ValueError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 6030, 393, 6565, 6060, 19778, 3756, 284, 257, 11052, 12331, 13]",0.5,443,sast_risk,186,Potential for NoneType or empty DataFrame leading to a ValueError.,Low,416,                    result_df_list.append(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1255, 62, 7568, 62, 4868, 13, 33295, 7]"
🧠 ML Signal: Logging the progress of a process can be used to identify function usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 4371, 286, 257, 1429, 460, 307, 973, 284, 5911, 2163, 8748, 7572, 13]",0.5,467,ml_signal,190,Logging the progress of a process can be used to identify function usage patterns.,,443,                        ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
✅ Best Practice: Using tqdm for progress indication improves user experience during long operations.,"[26486, 227, 6705, 19939, 25, 8554, 256, 80, 36020, 329, 4371, 12955, 19575, 2836, 1998, 1141, 890, 4560, 13]",0.5,490,best_practice,192,Using tqdm for progress indication improves user experience during long operations.,,467,                for _code in remote_code:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 4808, 8189, 287, 6569, 62, 8189, 25]"
✅ Best Practice: Using pd.concat for DataFrame concatenation is efficient and readable.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 329, 6060, 19778, 1673, 36686, 341, 318, 6942, 290, 31744, 13]",0.5,499,best_practice,202,Using pd.concat for DataFrame concatenation is efficient and readable.,,490,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
✅ Best Practice: Using lambda functions for concise operations on DataFrame columns.,"[26486, 227, 6705, 19939, 25, 8554, 37456, 5499, 329, 35327, 4560, 319, 6060, 19778, 15180, 13]",0.5,507,best_practice,207,Using lambda functions for concise operations on DataFrame columns.,,499,        Examples,"[220, 220, 220, 220, 220, 220, 220, 21066]"
⚠️ SAST Risk (Low): Writing to a file without exception handling could lead to data loss if an error occurs.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 22183, 284, 257, 2393, 1231, 6631, 9041, 714, 1085, 284, 1366, 2994, 611, 281, 4049, 8833, 13]",0.5,515,sast_risk,207,Writing to a file without exception handling could lead to data loss if an error occurs.,Low,507,        Examples,"[220, 220, 220, 220, 220, 220, 220, 21066]"
🧠 ML Signal: Logging the completion of a process can be used to identify function usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 262, 11939, 286, 257, 1429, 460, 307, 973, 284, 5911, 2163, 8748, 7572, 13]",0.5,523,ml_signal,207,Logging the completion of a process can be used to identify function usage patterns.,,515,        Examples,"[220, 220, 220, 220, 220, 220, 220, 21066]"

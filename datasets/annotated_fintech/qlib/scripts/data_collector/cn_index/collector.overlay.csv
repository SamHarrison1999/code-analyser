annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Import statements should be grouped and ordered by standard library, third-party, and local imports","[26486, 227, 6705, 19939, 25, 17267, 6299, 815, 307, 32824, 290, 6149, 416, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 17944]",0.5,8,best_practice,1,"Import statements should be grouped and ordered by standard library, third-party, and local imports",,0,# Copyright (c) Microsoft Corporation.,"[2, 15069, 357, 66, 8, 5413, 10501, 13]"
‚úÖ Best Practice: Constants should be defined in uppercase,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 5447, 287, 334, 39921, 589]",0.5,16,best_practice,15,Constants should be defined in uppercase,,8,from tqdm import tqdm,"[6738, 256, 80, 36020, 1330, 256, 80, 36020]"
‚úÖ Best Practice: Avoid modifying sys.path; consider using a virtual environment or package management,"[26486, 227, 6705, 19939, 25, 24390, 30620, 25064, 13, 6978, 26, 2074, 1262, 257, 7166, 2858, 393, 5301, 4542]",1.0,31,best_practice,18,Avoid modifying sys.path; consider using a virtual environment or package management,,16,CUR_DIR = Path(__file__).resolve().parent,"[34, 4261, 62, 34720, 796, 10644, 7, 834, 7753, 834, 737, 411, 6442, 22446, 8000]"
"‚úÖ Best Practice: Import statements should be grouped and ordered by standard library, third-party, and local imports","[26486, 227, 6705, 19939, 25, 17267, 6299, 815, 307, 32824, 290, 6149, 416, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 17944]",0.5,41,best_practice,21,"Import statements should be grouped and ordered by standard library, third-party, and local imports",,31,from data_collector.index import IndexBase,"[6738, 1366, 62, 33327, 273, 13, 9630, 1330, 12901, 14881]"
‚úÖ Best Practice: Constants should be defined in uppercase,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 5447, 287, 334, 39921, 589]",0.5,51,best_practice,26,Constants should be defined in uppercase,,41,NEW_COMPANIES_URL = (,"[13965, 62, 9858, 47, 1565, 11015, 62, 21886, 796, 357]"
‚úÖ Best Practice: Constants should be defined in uppercase,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 5447, 287, 334, 39921, 589]",0.5,254,best_practice,31,Constants should be defined in uppercase,,51,"INDEX_CHANGES_URL = ""https://www.csindex.com.cn/csindex-home/search/search-content?lang=cn&searchInput=%E5%85%B3%E4%BA%8E%E8%B0%83%E6%95%B4%E6%B2%AA%E6%B7%B1300%E5%92%8C%E4%B8%AD%E8%AF%81%E9%A6%99%E6%B8%AF100%E7%AD%89%E6%8C%87%E6%95%B0%E6%A0%B7%E6%9C%AC&pageNum={page_num}&pageSize={page_size}&sortField=date&dateRange=all&contentType=announcement""","[12115, 6369, 62, 3398, 15567, 1546, 62, 21886, 796, 366, 5450, 1378, 2503, 13, 6359, 9630, 13, 785, 13, 31522, 14, 6359, 9630, 12, 11195, 14, 12947, 14, 12947, 12, 11299, 30, 17204, 28, 31522, 5, 12947, 20560, 28, 4, 36, 20, 4, 5332, 4, 33, 18, 4, 36, 19, 4, 4339, 4, 23, 36, 4, 36, 23, 4, 33, 15, 4, 5999, 4, 36, 21, 4, 3865, 4, 33, 19, 4, 36, 21, 4, 33, 17, 4, 3838, 4, 36, 21, 4, 33, 22, 4, 33, 1485, 405, 4, 36, 20, 4, 5892, 4, 23, 34, 4, 36, 19, 4, 33, 23, 4, 2885, 4, 36, 23, 4, 8579, 4, 6659, 4, 36, 24, 4, 32, 21, 4, 2079, 4, 36, 21, 4, 33, 23, 4, 8579, 3064, 4, 36, 22, 4, 2885, 4, 4531, 4, 36, 21, 4, 23, 34, 4, 5774, 4, 36, 21, 4, 3865, 4, 33, 15, 4, 36, 21, 4, 32, 15, 4, 33, 22, 4, 36, 21, 4, 24, 34, 4, 2246, 5, 7700, 33111, 34758, 7700, 62, 22510, 92, 5, 7700, 10699, 34758, 7700, 62, 7857, 92, 5, 30619, 15878, 28, 4475, 5, 4475, 17257, 28, 439, 5, 11299, 6030, 28, 1236, 8652, 434, 1]"
‚úÖ Best Practice: Constants should be defined in uppercase,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 5447, 287, 334, 39921, 589]",0.5,324,best_practice,34,Constants should be defined in uppercase,,254,"    ""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.101 Safari/537.36 Edg/91.0.864.48""","[220, 220, 220, 366, 12982, 12, 36772, 1298, 366, 44, 8590, 5049, 14, 20, 13, 15, 357, 11209, 24563, 838, 13, 15, 26, 7178, 2414, 26, 2124, 2414, 8, 4196, 13908, 20827, 14, 46096, 13, 2623, 357, 42, 28656, 11, 588, 2269, 37549, 8, 13282, 14, 6420, 13, 15, 13, 2598, 4761, 13, 8784, 23298, 14, 46096, 13, 2623, 1717, 70, 14, 6420, 13, 15, 13, 39570, 13, 2780, 1]"
üß† ML Signal: Usage of decorators can indicate patterns in function behavior or error handling,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11705, 2024, 460, 7603, 7572, 287, 2163, 4069, 393, 4049, 9041]",0.5,330,ml_signal,38,Usage of decorators can indicate patterns in function behavior or error handling,,324,@deco_retry,"[31, 12501, 78, 62, 1186, 563]"
‚úÖ Best Practice: Use type hinting for the return type of the function,"[26486, 227, 6705, 19939, 25, 5765, 2099, 9254, 278, 329, 262, 1441, 2099, 286, 262, 2163]",1.0,340,best_practice,26,Use type hinting for the return type of the function,,330,NEW_COMPANIES_URL = (,"[13965, 62, 9858, 47, 1565, 11015, 62, 21886, 796, 357]"
"‚úÖ Best Practice: Use a more specific type hint for exclude_status, e.g., List[int]","[26486, 227, 6705, 19939, 25, 5765, 257, 517, 2176, 2099, 9254, 329, 19607, 62, 13376, 11, 304, 13, 70, 1539, 7343, 58, 600, 60]",0.5,341,best_practice,28,"Use a more specific type hint for exclude_status, e.g., List[int]",,340,),[8]
"‚ö†Ô∏è SAST Risk (Medium): getattr can be dangerous if method is not validated, leading to potential security risks","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 651, 35226, 460, 307, 4923, 611, 2446, 318, 407, 31031, 11, 3756, 284, 2785, 2324, 7476]",0.5,544,sast_risk,31,"getattr can be dangerous if method is not validated, leading to potential security risks",Medium,341,"INDEX_CHANGES_URL = ""https://www.csindex.com.cn/csindex-home/search/search-content?lang=cn&searchInput=%E5%85%B3%E4%BA%8E%E8%B0%83%E6%95%B4%E6%B2%AA%E6%B7%B1300%E5%92%8C%E4%B8%AD%E8%AF%81%E9%A6%99%E6%B8%AF100%E7%AD%89%E6%8C%87%E6%95%B0%E6%A0%B7%E6%9C%AC&pageNum={page_num}&pageSize={page_size}&sortField=date&dateRange=all&contentType=announcement""","[12115, 6369, 62, 3398, 15567, 1546, 62, 21886, 796, 366, 5450, 1378, 2503, 13, 6359, 9630, 13, 785, 13, 31522, 14, 6359, 9630, 12, 11195, 14, 12947, 14, 12947, 12, 11299, 30, 17204, 28, 31522, 5, 12947, 20560, 28, 4, 36, 20, 4, 5332, 4, 33, 18, 4, 36, 19, 4, 4339, 4, 23, 36, 4, 36, 23, 4, 33, 15, 4, 5999, 4, 36, 21, 4, 3865, 4, 33, 19, 4, 36, 21, 4, 33, 17, 4, 3838, 4, 36, 21, 4, 33, 22, 4, 33, 1485, 405, 4, 36, 20, 4, 5892, 4, 23, 34, 4, 36, 19, 4, 33, 23, 4, 2885, 4, 36, 23, 4, 8579, 4, 6659, 4, 36, 24, 4, 32, 21, 4, 2079, 4, 36, 21, 4, 33, 23, 4, 8579, 3064, 4, 36, 22, 4, 2885, 4, 4531, 4, 36, 21, 4, 23, 34, 4, 5774, 4, 36, 21, 4, 3865, 4, 33, 15, 4, 36, 21, 4, 32, 15, 4, 33, 22, 4, 36, 21, 4, 24, 34, 4, 2246, 5, 7700, 33111, 34758, 7700, 62, 22510, 92, 5, 7700, 10699, 34758, 7700, 62, 7857, 92, 5, 30619, 15878, 28, 4475, 5, 4475, 17257, 28, 439, 5, 11299, 6030, 28, 1236, 8652, 434, 1]"
"‚ö†Ô∏è SAST Risk (Medium): No timeout specified for the request, which can lead to hanging connections","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 329, 262, 2581, 11, 543, 460, 1085, 284, 10938, 8787]",0.5,551,sast_risk,33,"No timeout specified for the request, which can lead to hanging connections",Medium,544,REQ_HEADERS = {,"[2200, 48, 62, 37682, 4877, 796, 1391]"
üß† ML Signal: Pattern of checking status codes for retry logic,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 10627, 3722, 12416, 329, 1005, 563, 9156]",0.5,552,ml_signal,35,Pattern of checking status codes for retry logic,,551,},[92]
üß† ML Signal: Raising exceptions based on HTTP status codes,"[8582, 100, 254, 10373, 26484, 25, 7567, 1710, 13269, 1912, 319, 14626, 3722, 12416]",1.0,558,ml_signal,38,Raising exceptions based on HTTP status codes,,552,@deco_retry,"[31, 12501, 78, 62, 1186, 563]"
‚úÖ Best Practice: Using @property decorator to define a getter for a class attribute,"[26486, 227, 6705, 19939, 25, 8554, 2488, 26745, 11705, 1352, 284, 8160, 257, 651, 353, 329, 257, 1398, 11688]",0.5,559,best_practice,35,Using @property decorator to define a getter for a class attribute,,558,},[92]
‚úÖ Best Practice: Returning a string directly for a simple property,"[26486, 227, 6705, 19939, 25, 42882, 257, 4731, 3264, 329, 257, 2829, 3119]",0.5,565,best_practice,38,Returning a string directly for a simple property,,559,@deco_retry,"[31, 12501, 78, 62, 1186, 563]"
"üß† ML Signal: Method signature indicates a calculation function, common in financial models","[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 9217, 257, 17952, 2163, 11, 2219, 287, 3176, 4981]",0.5,589,ml_signal,43,"Method signature indicates a calculation function, common in financial models",,565,"    _resp = method_func(url, headers=REQ_HEADERS, timeout=None)","[220, 220, 220, 4808, 4363, 796, 2446, 62, 20786, 7, 6371, 11, 24697, 28, 2200, 48, 62, 37682, 4877, 11, 26827, 28, 14202, 8]"
‚úÖ Best Practice: Method name is descriptive of its functionality,"[26486, 227, 6705, 19939, 25, 11789, 1438, 318, 35644, 286, 663, 11244]",0.5,613,best_practice,43,Method name is descriptive of its functionality,,589,"    _resp = method_func(url, headers=REQ_HEADERS, timeout=None)","[220, 220, 220, 4808, 4363, 796, 2446, 62, 20786, 7, 6371, 11, 24697, 28, 2200, 48, 62, 37682, 4877, 11, 26827, 28, 14202, 8]"
‚ö†Ô∏è SAST Risk (Low): Ensure 'data' is validated to prevent unexpected behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 7890, 6, 318, 31031, 284, 2948, 10059, 4069]",0.5,625,sast_risk,44,Ensure 'data' is validated to prevent unexpected behavior,Low,613,    _status = _resp.status_code,"[220, 220, 220, 4808, 13376, 796, 4808, 4363, 13, 13376, 62, 8189]"
‚úÖ Best Practice: Checking for empty data input,"[26486, 227, 6705, 19939, 25, 39432, 329, 6565, 1366, 5128]",0.5,650,best_practice,46,Checking for empty data input,,625,"        raise ValueError(f""response status: {_status}, url={url}"")","[220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7, 69, 1, 26209, 3722, 25, 1391, 62, 13376, 5512, 19016, 34758, 6371, 92, 4943]"
"üß† ML Signal: Iterating over data, common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 1366, 11, 2219, 3912, 287, 1366, 7587]",0.5,650,ml_signal,49,"Iterating over data, common pattern in data processing",,650,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure 'value' is of expected type to prevent type errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 8367, 6, 318, 286, 2938, 2099, 284, 2948, 2099, 8563]",0.5,668,sast_risk,52,Ensure 'value' is of expected type to prevent type errors,Low,650,    def calendar_list(self) -> List[pd.Timestamp]:,"[220, 220, 220, 825, 11845, 62, 4868, 7, 944, 8, 4613, 7343, 58, 30094, 13, 14967, 27823, 5974]"
‚úÖ Best Practice: Returning a calculated result,"[26486, 227, 6705, 19939, 25, 42882, 257, 10488, 1255]",0.5,676,best_practice,56,Returning a calculated result,,668,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
üß† ML Signal: Method signature suggests updating internal state with new data,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 5644, 19698, 5387, 1181, 351, 649, 1366]",0.5,689,ml_signal,57,Method signature suggests updating internal state with new data,,676,            calendar list,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11845, 1351]"
‚ö†Ô∏è SAST Risk (Low): Validate 'new_data' to prevent injection or corruption,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3254, 20540, 705, 3605, 62, 7890, 6, 284, 2948, 16954, 393, 9253]",0.5,715,sast_risk,62,Validate 'new_data' to prevent injection or corruption,Low,689,"            setattr(self, ""_calendar_list"", _calendar)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 35226, 7, 944, 11, 45434, 9948, 9239, 62, 4868, 1600, 4808, 9948, 9239, 8]"
‚úÖ Best Practice: Descriptive method name indicating its purpose,"[26486, 227, 6705, 19939, 25, 2935, 6519, 425, 2446, 1438, 12739, 663, 4007]",0.5,741,best_practice,62,Descriptive method name indicating its purpose,,715,"            setattr(self, ""_calendar_list"", _calendar)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 35226, 7, 944, 11, 45434, 9948, 9239, 62, 4868, 1600, 4808, 9948, 9239, 8]"
‚úÖ Best Practice: Checking for empty new_data input,"[26486, 227, 6705, 19939, 25, 39432, 329, 6565, 649, 62, 7890, 5128]",0.5,767,best_practice,62,Checking for empty new_data input,,741,"            setattr(self, ""_calendar_list"", _calendar)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 35226, 7, 944, 11, 45434, 9948, 9239, 62, 4868, 1600, 4808, 9948, 9239, 8]"
"üß† ML Signal: Placeholder for update logic, common in index management","[8582, 100, 254, 10373, 26484, 25, 8474, 13829, 329, 4296, 9156, 11, 2219, 287, 6376, 4542]",0.5,783,ml_signal,66,"Placeholder for update logic, common in index management",,767,    def new_companies_url(self) -> str:,"[220, 220, 220, 825, 649, 62, 34390, 444, 62, 6371, 7, 944, 8, 4613, 965, 25]"
‚ö†Ô∏è SAST Risk (Low): Ensure update logic handles data safely,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 4296, 9156, 17105, 1366, 11512]",0.5,799,sast_risk,66,Ensure update logic handles data safely,Low,783,    def new_companies_url(self) -> str:,"[220, 220, 220, 825, 649, 62, 34390, 444, 62, 6371, 7, 944, 8, 4613, 965, 25]"
‚úÖ Best Practice: Use of getattr with a default value to check for attribute existence,"[26486, 227, 6705, 19939, 25, 5765, 286, 651, 35226, 351, 257, 4277, 1988, 284, 2198, 329, 11688, 6224]",0.5,823,best_practice,43,Use of getattr with a default value to check for attribute existence,,799,"    _resp = method_func(url, headers=REQ_HEADERS, timeout=None)","[220, 220, 220, 4808, 4363, 796, 2446, 62, 20786, 7, 6371, 11, 24697, 28, 2200, 48, 62, 37682, 4877, 11, 26827, 28, 14202, 8]"
üß† ML Signal: Lazy loading pattern for caching data,"[8582, 100, 254, 10373, 26484, 25, 406, 12582, 11046, 3912, 329, 40918, 1366]",0.5,848,ml_signal,46,Lazy loading pattern for caching data,,823,"        raise ValueError(f""response status: {_status}, url={url}"")","[220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7, 69, 1, 26209, 3722, 25, 1391, 62, 13376, 5512, 19016, 34758, 6371, 92, 4943]"
‚úÖ Best Practice: Use of setattr to dynamically set an attribute,"[26486, 227, 6705, 19939, 25, 5765, 286, 900, 35226, 284, 32366, 900, 281, 11688]",0.5,854,best_practice,47,Use of setattr to dynamically set an attribute,,848,    return _resp,"[220, 220, 220, 1441, 4808, 4363]"
"üß† ML Signal: Method returning a formatted URL string, indicating a pattern of URL construction","[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 257, 39559, 10289, 4731, 11, 12739, 257, 3912, 286, 10289, 5103]",0.5,863,ml_signal,50,"Method returning a formatted URL string, indicating a pattern of URL construction",,854,class CSIIndex(IndexBase):,"[4871, 9429, 3978, 358, 1069, 7, 15732, 14881, 2599]"
‚úÖ Best Practice: Use of @property decorator for a method that acts like a getter,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 257, 2446, 326, 6529, 588, 257, 651, 353]",1.0,875,best_practice,53,Use of @property decorator for a method that acts like a getter,,863,"        """"""get history trading date","[220, 220, 220, 220, 220, 220, 220, 37227, 1136, 2106, 7313, 3128]"
‚úÖ Best Practice: Use of type hinting for return type,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099]",0.5,887,best_practice,53,Use of type hinting for return type,,875,"        """"""get history trading date","[220, 220, 220, 220, 220, 220, 220, 37227, 1136, 2106, 7313, 3128]"
‚úÖ Best Practice: Use of @property decorator for abstract method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 12531, 2446]",0.5,900,best_practice,57,Use of @property decorator for abstract method,,887,            calendar list,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11845, 1351]"
‚úÖ Best Practice: Include type hints for return values to improve code readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 1441, 3815, 284, 2987, 2438, 1100, 1799, 290, 5529, 1799]",1.0,913,best_practice,57,Include type hints for return values to improve code readability and maintainability,,900,            calendar list,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11845, 1351]"
‚úÖ Best Practice: Use of NotImplementedError to indicate that subclasses should implement this method,"[26486, 227, 6705, 19939, 25, 5765, 286, 1892, 3546, 1154, 12061, 12331, 284, 7603, 326, 850, 37724, 815, 3494, 428, 2446]",0.5,939,best_practice,62,Use of NotImplementedError to indicate that subclasses should implement this method,,913,"            setattr(self, ""_calendar_list"", _calendar)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 35226, 7, 944, 11, 45434, 9948, 9239, 62, 4868, 1600, 4808, 9948, 9239, 8]"
‚úÖ Best Practice: Use of @property and @abc.abstractmethod to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 290, 2488, 39305, 13, 397, 8709, 24396, 284, 4605, 7822, 287, 850, 37724]",0.5,955,best_practice,66,Use of @property and @abc.abstractmethod to enforce implementation in subclasses,,939,    def new_companies_url(self) -> str:,"[220, 220, 220, 825, 649, 62, 34390, 444, 62, 6371, 7, 944, 8, 4613, 965, 25]"
‚úÖ Best Practice: Include a docstring to describe the method's purpose and return value,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 1441, 1988]",1.0,971,best_practice,66,Include a docstring to describe the method's purpose and return value,,955,    def new_companies_url(self) -> str:,"[220, 220, 220, 825, 649, 62, 34390, 444, 62, 6371, 7, 944, 8, 4613, 965, 25]"
‚úÖ Best Practice: Use NotImplementedError to indicate that a method should be overridden,"[26486, 227, 6705, 19939, 25, 5765, 1892, 3546, 1154, 12061, 12331, 284, 7603, 326, 257, 2446, 815, 307, 23170, 4651]",0.5,987,best_practice,71,Use NotImplementedError to indicate that a method should be overridden,,971,        return INDEX_CHANGES_URL,"[220, 220, 220, 220, 220, 220, 220, 1441, 24413, 6369, 62, 3398, 15567, 1546, 62, 21886]"
‚úÖ Best Practice: Use @property decorator for read-only access to a method's return value,"[26486, 227, 6705, 19939, 25, 5765, 2488, 26745, 11705, 1352, 329, 1100, 12, 8807, 1895, 284, 257, 2446, 338, 1441, 1988]",0.5,996,best_practice,74,Use @property decorator for read-only access to a method's return value,,987,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
‚úÖ Best Practice: Docstring provides clear information about the method's purpose and expected return values,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 1321, 546, 262, 2446, 338, 4007, 290, 2938, 1441, 3815]",1.0,1005,best_practice,74,Docstring provides clear information about the method's purpose and expected return values,,996,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
"‚ö†Ô∏è SAST Risk (Low): Method raises NotImplementedError, which is a placeholder and should be implemented to avoid runtime errors","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 543, 318, 257, 46076, 290, 815, 307, 9177, 284, 3368, 19124, 8563]",0.5,1013,sast_risk,80,"Method raises NotImplementedError, which is a placeholder and should be implemented to avoid runtime errors",Low,1005,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Check if 'self.freq' is defined and used correctly,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 944, 13, 19503, 80, 6, 318, 5447, 290, 973, 9380]",1.0,1026,best_practice,89,Check if 'self.freq' is defined and used correctly,,1013,            index code,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 2438]"
‚úÖ Best Practice: Use apply with lambda for concise transformation of DataFrame columns,"[26486, 227, 6705, 19939, 25, 5765, 4174, 351, 37456, 329, 35327, 13389, 286, 6060, 19778, 15180]",1.0,1034,best_practice,90,Use apply with lambda for concise transformation of DataFrame columns,,1026,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Use apply with lambda for concise transformation of DataFrame columns,"[26486, 227, 6705, 19939, 25, 5765, 4174, 351, 37456, 329, 35327, 13389, 286, 6060, 19778, 15180]",1.0,1034,best_practice,96,Use apply with lambda for concise transformation of DataFrame columns,,1034,,[]
"üß† ML Signal: Returns a DataFrame, indicating a transformation pattern","[8582, 100, 254, 10373, 26484, 25, 16409, 257, 6060, 19778, 11, 12739, 257, 13389, 3912]",1.0,1045,ml_signal,98,"Returns a DataFrame, indicating a transformation pattern",,1034,        CSI100: 1,"[220, 220, 220, 220, 220, 220, 220, 49911, 3064, 25, 352]"
‚úÖ Best Practice: Logging the start of a process helps in debugging and tracking execution flow.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 262, 923, 286, 257, 1429, 5419, 287, 28769, 290, 9646, 9706, 5202, 13]",1.0,1045,best_practice,110,Logging the start of a process helps in debugging and tracking execution flow.,,1045,,[]
üß† ML Signal: Iterating over URLs to fetch data is a common pattern in web scraping tasks.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 32336, 284, 21207, 1366, 318, 257, 2219, 3912, 287, 3992, 46743, 8861, 13]",0.5,1045,ml_signal,113,Iterating over URLs to fetch data is a common pattern in web scraping tasks.,,1045,,[]
üß† ML Signal: Reading data from a URL is a common pattern in data ingestion tasks.,"[8582, 100, 254, 10373, 26484, 25, 11725, 1366, 422, 257, 10289, 318, 257, 2219, 3912, 287, 1366, 38382, 8861, 13]",1.0,1061,ml_signal,115,Reading data from a URL is a common pattern in data ingestion tasks.,,1045,"        if self.freq != ""day"":","[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 19503, 80, 14512, 366, 820, 1298]"
‚úÖ Best Practice: Logging the end of a process helps in debugging and tracking execution flow.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 262, 886, 286, 257, 1429, 5419, 287, 28769, 290, 9646, 9706, 5202, 13]",1.0,1101,best_practice,119,Logging the end of a process helps in debugging and tracking execution flow.,,1061,            inst_df[self.END_DATE_FIELD] = inst_df[self.END_DATE_FIELD].apply(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 916, 62, 7568, 58, 944, 13, 10619, 62, 35, 6158, 62, 44603, 60, 796, 916, 62, 7568, 58, 944, 13, 10619, 62, 35, 6158, 62, 44603, 4083, 39014, 7]"
‚ö†Ô∏è SAST Risk (Low): Using pd.concat without specifying axis or handling duplicates can lead to unexpected results.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 279, 67, 13, 1102, 9246, 1231, 31577, 16488, 393, 9041, 14184, 16856, 460, 1085, 284, 10059, 2482, 13]",0.5,1163,sast_risk,120,Using pd.concat without specifying axis or handling duplicates can lead to unexpected results.,Low,1101,"                lambda x: (pd.Timestamp(x) + pd.Timedelta(hours=15, minutes=0)).strftime(""%Y-%m-%d %H:%M:%S"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37456, 2124, 25, 357, 30094, 13, 14967, 27823, 7, 87, 8, 1343, 279, 67, 13, 14967, 276, 12514, 7, 24425, 28, 1314, 11, 2431, 28, 15, 29720, 2536, 31387, 7203, 4, 56, 12, 4, 76, 12, 4, 67, 4064, 39, 25, 4, 44, 25, 4, 50, 4943]"
‚úÖ Best Practice: Docstring provides clear documentation of parameters and return value,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 10314, 286, 10007, 290, 1441, 1988]",1.0,1225,best_practice,120,Docstring provides clear documentation of parameters and return value,,1163,"                lambda x: (pd.Timestamp(x) + pd.Timedelta(hours=15, minutes=0)).strftime(""%Y-%m-%d %H:%M:%S"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 37456, 2124, 25, 357, 30094, 13, 14967, 27823, 7, 87, 8, 1343, 279, 67, 13, 14967, 276, 12514, 7, 24425, 28, 1314, 11, 2431, 28, 15, 29720, 2536, 31387, 7203, 4, 56, 12, 4, 76, 12, 4, 67, 4064, 39, 25, 4, 44, 25, 4, 50, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential ValueError if symbol is not a valid integer string,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 11052, 12331, 611, 6194, 318, 407, 257, 4938, 18253, 4731]",1.0,1255,sast_risk,130,Potential ValueError if symbol is not a valid integer string,Low,1225,                symbol      date        type,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 220, 220, 220, 220, 220, 3128, 220, 220, 220, 220, 220, 220, 220, 2099]"
üß† ML Signal: Conditional logic based on string prefixes,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 4731, 21231, 274]",1.0,1283,ml_signal,132,Conditional logic based on string prefixes,,1255,                SH600000  2020-11-10    remove,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6006, 8054, 830, 220, 12131, 12, 1157, 12, 940, 220, 220, 220, 4781]"
üß† ML Signal: Usage of retry_request indicates handling of network requests and potential transient errors.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1005, 563, 62, 25927, 9217, 9041, 286, 3127, 7007, 290, 2785, 32361, 8563, 13]",0.5,1311,ml_signal,132,Usage of retry_request indicates handling of network requests and potential transient errors.,,1283,                SH600000  2020-11-10    remove,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6006, 8054, 830, 220, 12131, 12, 1157, 12, 940, 220, 220, 220, 4781]"
üß† ML Signal: Usage of BytesIO for in-memory byte stream handling.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2750, 4879, 9399, 329, 287, 12, 31673, 18022, 4269, 9041, 13]",1.0,1329,ml_signal,134,Usage of BytesIO for in-memory byte stream handling.,,1311,                symbol: str,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 25, 965]"
"üß† ML Signal: Reading Excel files with pandas, indicating data processing from spreadsheets.","[8582, 100, 254, 10373, 26484, 25, 11725, 24134, 3696, 351, 19798, 292, 11, 12739, 1366, 7587, 422, 4104, 42011, 13]",1.0,1351,ml_signal,135,"Reading Excel files with pandas, indicating data processing from spreadsheets.",,1329,                date: pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3128, 25, 279, 67, 13, 14967, 27823]"
‚úÖ Best Practice: Using context manager for file operations ensures proper resource management.,"[26486, 227, 6705, 19939, 25, 8554, 4732, 4706, 329, 2393, 4560, 19047, 1774, 8271, 4542, 13]",1.0,1367,best_practice,138,Using context manager for file operations ensures proper resource management.,,1351,"        logger.info(""get companies changes......"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 1136, 2706, 2458, 16317, 4943]"
‚ö†Ô∏è SAST Risk (Low): Writing content to a file without validation could lead to security risks if content is untrusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 22183, 2695, 284, 257, 2393, 1231, 21201, 714, 1085, 284, 2324, 7476, 611, 2695, 318, 1418, 81, 8459, 13]",1.0,1385,sast_risk,142,Writing content to a file without validation could lead to security risks if content is untrusted.,Low,1367,            if not _df.empty:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 4808, 7568, 13, 28920, 25]"
üß† ML Signal: Iterating over a list of tuples to process different types of data.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 12777, 2374, 284, 1429, 1180, 3858, 286, 1366, 13]",0.5,1405,ml_signal,145,Iterating over a list of tuples to process different types of data.,,1385,"        return pd.concat(res, sort=False)","[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 1102, 9246, 7, 411, 11, 3297, 28, 25101, 8]"
‚ö†Ô∏è SAST Risk (Low): Accessing dictionary keys without checking existence could lead to KeyError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8798, 278, 22155, 8251, 1231, 10627, 6224, 714, 1085, 284, 7383, 12331, 13]",1.0,1411,sast_risk,147,Accessing dictionary keys without checking existence could lead to KeyError.,Low,1405,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
üß† ML Signal: Filtering DataFrame based on specific conditions.,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 6060, 19778, 1912, 319, 2176, 3403, 13]",0.5,1419,ml_signal,149,Filtering DataFrame based on specific conditions.,,1411,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"üß† ML Signal: Applying a function to DataFrame elements, indicating data transformation.","[8582, 100, 254, 10373, 26484, 25, 2034, 3157, 257, 2163, 284, 6060, 19778, 4847, 11, 12739, 1366, 13389, 13]",1.0,1427,ml_signal,151,"Applying a function to DataFrame elements, indicating data transformation.",,1419,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚úÖ Best Practice: Renaming DataFrame columns for clarity and consistency.,"[26486, 227, 6705, 19939, 25, 7152, 3723, 6060, 19778, 15180, 329, 16287, 290, 15794, 13]",0.5,1437,best_practice,153,Renaming DataFrame columns for clarity and consistency.,,1427,        symbol: str,"[220, 220, 220, 220, 220, 220, 220, 6194, 25, 965]"
üß† ML Signal: Appending DataFrames to a list for later concatenation.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 6060, 35439, 284, 257, 1351, 329, 1568, 1673, 36686, 341, 13]",0.5,1445,ml_signal,157,Appending DataFrames to a list for later concatenation.,,1437,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
"üß† ML Signal: Concatenating multiple DataFrames into one, indicating data aggregation.","[8582, 100, 254, 10373, 26484, 25, 1482, 9246, 268, 803, 3294, 6060, 35439, 656, 530, 11, 12739, 1366, 46500, 13]",0.5,1453,ml_signal,159,"Concatenating multiple DataFrames into one, indicating data aggregation.",,1445,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Iterating over HTML tables in content,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 11532, 8893, 287, 2695]",1.0,1463,ml_signal,153,Iterating over HTML tables in content,,1453,        symbol: str,"[220, 220, 220, 220, 220, 220, 220, 6194, 25, 965]"
‚úÖ Best Practice: Check for expected number of columns and non-null values,"[26486, 227, 6705, 19939, 25, 6822, 329, 2938, 1271, 286, 15180, 290, 1729, 12, 8423, 3815]",0.5,1463,best_practice,155,Check for expected number of columns and non-null values,,1463,,[]
‚úÖ Best Practice: Ensure the correct table index is processed,"[26486, 227, 6705, 19939, 25, 48987, 262, 3376, 3084, 6376, 318, 13686]",0.5,1471,best_practice,159,Ensure the correct table index is processed,,1463,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Processing specific columns for removal and addition,"[8582, 100, 254, 10373, 26484, 25, 28403, 2176, 15180, 329, 9934, 290, 3090]",0.5,1497,ml_signal,164,Processing specific columns for removal and addition,,1471,"        content = retry_request(excel_url, exclude_status=[404]).content","[220, 220, 220, 220, 220, 220, 220, 2695, 796, 1005, 563, 62, 25927, 7, 1069, 5276, 62, 6371, 11, 19607, 62, 13376, 41888, 26429, 35944, 11299]"
üß† ML Signal: Mapping symbols to a normalized form,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 14354, 284, 257, 39279, 1296]",1.0,1513,ml_signal,169,Mapping symbols to a normalized form,,1497,"        ).open(""wb"") as fp:","[220, 220, 220, 220, 220, 220, 220, 6739, 9654, 7203, 39346, 4943, 355, 277, 79, 25]"
‚úÖ Best Practice: Use pd.concat to combine DataFrames,"[26486, 227, 6705, 19939, 25, 5765, 279, 67, 13, 1102, 9246, 284, 12082, 6060, 35439]",0.5,1532,best_practice,177,Use pd.concat to combine DataFrames,,1513,"            _df[""type""] = _type","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 7568, 14692, 4906, 8973, 796, 4808, 4906]"
‚ö†Ô∏è SAST Risk (Low): Potential file path manipulation vulnerability,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2393, 3108, 17512, 15131]",1.0,1551,sast_risk,177,Potential file path manipulation vulnerability,Low,1532,"            _df[""type""] = _type","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 7568, 14692, 4906, 8973, 796, 4808, 4906]"
"‚ö†Ô∏è SAST Risk (Medium): Potential for HTTP request to fail or be intercepted, ensure retry_request is secure","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 14626, 2581, 284, 2038, 393, 307, 29842, 11, 4155, 1005, 563, 62, 25927, 318, 5713]",0.5,1572,sast_risk,202,"Potential for HTTP request to fail or be intercepted, ensure retry_request is secure",Medium,1551,            df = pd.concat(tmp),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 1102, 9246, 7, 22065, 8]"
"‚úÖ Best Practice: Use logging for important information, aids in debugging and monitoring","[26486, 227, 6705, 19939, 25, 5765, 18931, 329, 1593, 1321, 11, 31378, 287, 28769, 290, 9904]",0.5,1584,best_practice,209,"Use logging for important information, aids in debugging and monitoring",,1572,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Regular expression usage can indicate pattern matching behavior,"[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 8748, 460, 7603, 3912, 12336, 4069]",0.5,1584,ml_signal,212,Regular expression usage can indicate pattern matching behavior,,1584,,[]
üß† ML Signal: Regular expression usage can indicate pattern matching behavior,"[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 8748, 460, 7603, 3912, 12336, 4069]",0.5,1597,ml_signal,217,Regular expression usage can indicate pattern matching behavior,,1584,        The response contains three cases:,"[220, 220, 220, 220, 220, 220, 220, 383, 2882, 4909, 1115, 2663, 25]"
üß† ML Signal: Regular expression usage can indicate pattern matching behavior,"[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 8748, 460, 7603, 3912, 12336, 4069]",0.5,1605,ml_signal,227,Regular expression usage can indicate pattern matching behavior,,1597,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
"‚úÖ Best Practice: Use logging for important information, aids in debugging and monitoring","[26486, 227, 6705, 19939, 25, 5765, 18931, 329, 1593, 1321, 11, 31378, 287, 28769, 290, 9904]",0.5,1613,best_practice,237,"Use logging for important information, aids in debugging and monitoring",,1605,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"‚úÖ Best Practice: Use logging for important information, aids in debugging and monitoring","[26486, 227, 6705, 19939, 25, 5765, 18931, 329, 1593, 1321, 11, 31378, 287, 28769, 290, 9904]",0.5,1626,best_practice,239,"Use logging for important information, aids in debugging and monitoring",,1613,"        title = resp[""title""]","[220, 220, 220, 220, 220, 220, 220, 3670, 796, 1217, 14692, 7839, 8973]"
"‚úÖ Best Practice: Use logging for important information, aids in debugging and monitoring","[26486, 227, 6705, 19939, 25, 5765, 18931, 329, 1593, 1321, 11, 31378, 287, 28769, 290, 9904]",0.5,1675,best_practice,245,"Use logging for important information, aids in debugging and monitoring",,1626,"        logger.info(f""load index data from https://www.csindex.com.cn/#/about/newsDetail?id={url.split('id=')[-1]}"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 2220, 6376, 1366, 422, 3740, 1378, 2503, 13, 6359, 9630, 13, 785, 13, 31522, 31113, 14, 10755, 14, 10827, 11242, 603, 30, 312, 34758, 6371, 13, 35312, 10786, 312, 28, 11537, 58, 12, 16, 48999, 4943]"
‚úÖ Best Practice: Use of retry_request suggests handling of network errors,"[26486, 227, 6705, 19939, 25, 5765, 286, 1005, 563, 62, 25927, 5644, 9041, 286, 3127, 8563]",1.0,1715,best_practice,252,Use of retry_request suggests handling of network errors,,1675,"            add_date = get_trading_date_by_shift(self.calendar_list, _date, shift=0)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 751, 62, 4475, 796, 651, 62, 2213, 4980, 62, 4475, 62, 1525, 62, 30846, 7, 944, 13, 9948, 9239, 62, 4868, 11, 4808, 4475, 11, 6482, 28, 15, 8]"
‚úÖ Best Practice: Re-fetching with total count ensures all data is retrieved,"[26486, 227, 6705, 19939, 25, 797, 12, 69, 7569, 278, 351, 2472, 954, 19047, 477, 1366, 318, 29517]",1.0,1756,best_practice,254,Re-fetching with total count ensures all data is retrieved,,1715,"            add_date = get_trading_date_by_shift(self.calendar_list, add_date, shift=1)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 751, 62, 4475, 796, 651, 62, 2213, 4980, 62, 4475, 62, 1525, 62, 30846, 7, 944, 13, 9948, 9239, 62, 4868, 11, 751, 62, 4475, 11, 6482, 28, 16, 8]"
üß† ML Signal: URL construction pattern for accessing specific resources,"[8582, 100, 254, 10373, 26484, 25, 10289, 5103, 3912, 329, 22534, 2176, 4133]",1.0,1768,ml_signal,257,URL construction pattern for accessing specific resources,,1756,        excel_url = None,"[220, 220, 220, 220, 220, 220, 220, 27336, 62, 6371, 796, 6045]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,1814,ml_signal,269,Logging usage pattern,,1768,"                logger.info(f""get {add_date} changes from the excel, title={title}, excel_url={excel_url}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 1136, 1391, 2860, 62, 4475, 92, 2458, 422, 262, 27336, 11, 3670, 34758, 7839, 5512, 27336, 62, 6371, 34758, 1069, 5276, 62, 6371, 92, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `self.new_companies_url` is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 944, 13, 3605, 62, 34390, 444, 62, 6371, 63, 318, 2836, 12, 14401]",0.5,1851,sast_risk,270,Potential risk if `self.new_companies_url` is user-controlled,Low,1814,"                df = self._parse_excel(excel_url, add_date, remove_date)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 2116, 13557, 29572, 62, 1069, 5276, 7, 1069, 5276, 62, 6371, 11, 751, 62, 4475, 11, 4781, 62, 4475, 8]"
"‚ö†Ô∏è SAST Risk (Low): Writing to file system, ensure `self.cache_dir` is secure","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 22183, 284, 2393, 1080, 11, 4155, 4600, 944, 13, 23870, 62, 15908, 63, 318, 5713]",0.5,1860,sast_risk,276,"Writing to file system, ensure `self.cache_dir` is secure",Low,1851,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Ensure the content is a valid Excel file to prevent parsing errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 262, 2695, 318, 257, 4938, 24134, 2393, 284, 2948, 32096, 8563]",0.5,1872,sast_risk,279,Ensure the content is a valid Excel file to prevent parsing errors,Low,1860,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Use map for applying a function to a Series,"[26486, 227, 6705, 19939, 25, 5765, 3975, 329, 11524, 257, 2163, 284, 257, 7171]",0.5,1894,best_practice,283,Use map for applying a function to a Series,,1872,    def _get_change_notices_url(self) -> Iterable[str]:,"[220, 220, 220, 825, 4808, 1136, 62, 3803, 62, 1662, 1063, 62, 6371, 7, 944, 8, 4613, 40806, 540, 58, 2536, 5974]"
‚úÖ Best Practice: Convert to string before datetime conversion to handle various formats,"[26486, 227, 6705, 19939, 25, 38240, 284, 4731, 878, 4818, 8079, 11315, 284, 5412, 2972, 17519]",0.5,1894,best_practice,285,Convert to string before datetime conversion to handle various formats,,1894,,[]
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",1.0,1912,ml_signal,288,Logging usage pattern,,1894,"            [url1, url2]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 685, 6371, 16, 11, 19016, 17, 60]"
‚úÖ Best Practice: Using @property decorator to define a read-only attribute,"[26486, 227, 6705, 19939, 25, 8554, 2488, 26745, 11705, 1352, 284, 8160, 257, 1100, 12, 8807, 11688]",1.0,1934,best_practice,283,Using @property decorator to define a read-only attribute,,1912,    def _get_change_notices_url(self) -> Iterable[str]:,"[220, 220, 220, 825, 4808, 1136, 62, 3803, 62, 1662, 1063, 62, 6371, 7, 944, 8, 4613, 40806, 540, 58, 2536, 5974]"
üß† ML Signal: Accessing class attribute through a property method,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 1398, 11688, 832, 257, 3119, 2446]",0.5,1942,ml_signal,286,Accessing class attribute through a property method,,1934,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
‚úÖ Best Practice: Using @property decorator to define a read-only attribute,"[26486, 227, 6705, 19939, 25, 8554, 2488, 26745, 11705, 1352, 284, 8160, 257, 1100, 12, 8807, 11688]",1.0,1950,best_practice,289,Using @property decorator to define a read-only attribute,,1942,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Accessing class attribute through a property method,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 1398, 11688, 832, 257, 3119, 2446]",0.5,1990,ml_signal,292,Accessing class attribute through a property method,,1950,"        data = retry_request(self.changes_url.format(page_size=page_size, page_num=page_num)).json()","[220, 220, 220, 220, 220, 220, 220, 1366, 796, 1005, 563, 62, 25927, 7, 944, 13, 36653, 62, 6371, 13, 18982, 7, 7700, 62, 7857, 28, 7700, 62, 7857, 11, 2443, 62, 22510, 28, 7700, 62, 22510, 29720, 17752, 3419]"
‚ö†Ô∏è SAST Risk (Low): Ensure stock_prices is validated to prevent incorrect calculations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 4283, 62, 1050, 1063, 318, 31031, 284, 2948, 11491, 16765]",1.0,1990,sast_risk,296,Ensure stock_prices is validated to prevent incorrect calculations,Low,1990,,[]
‚úÖ Best Practice: Method to perform calculations on input data,"[26486, 227, 6705, 19939, 25, 11789, 284, 1620, 16765, 319, 5128, 1366]",0.5,1990,best_practice,296,Method to perform calculations on input data,,1990,,[]
üß† ML Signal: Iterating over a collection to perform calculations,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 4947, 284, 1620, 16765]",0.5,1990,ml_signal,299,Iterating over a collection to perform calculations,,1990,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure stock has 'price' and 'shares' attributes to avoid AttributeError,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 4283, 468, 705, 20888, 6, 290, 705, 1477, 3565, 6, 12608, 284, 3368, 3460, 4163, 12331]",0.5,1998,sast_risk,301,Ensure stock has 'price' and 'shares' attributes to avoid AttributeError,Low,1990,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
üß† ML Signal: Returning calculated value from a method,"[8582, 100, 254, 10373, 26484, 25, 42882, 10488, 1988, 422, 257, 2446]",0.5,1998,ml_signal,303,Returning calculated value from a method,,1998,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure stock_prices is validated to prevent incorrect operations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 4283, 62, 1050, 1063, 318, 31031, 284, 2948, 11491, 4560]",1.0,1998,sast_risk,306,Ensure stock_prices is validated to prevent incorrect operations,Low,1998,,[]
‚úÖ Best Practice: Method to filter and sort data,"[26486, 227, 6705, 19939, 25, 11789, 284, 8106, 290, 3297, 1366]",0.5,2016,best_practice,308,Method to filter and sort data,,1998,                symbol: str,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 25, 965]"
üß† ML Signal: Sorting and slicing a collection to get top elements,"[8582, 100, 254, 10373, 26484, 25, 311, 24707, 290, 49289, 257, 4947, 284, 651, 1353, 4847]",0.5,2040,ml_signal,309,Sorting and slicing a collection to get top elements,,2016,                start_date: pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 4475, 25, 279, 67, 13, 14967, 27823]"
üß† ML Signal: Returning a subset of a collection,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 24637, 286, 257, 4947]",0.5,2048,ml_signal,311,Returning a subset of a collection,,2040,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Method returning a hardcoded value,"[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 257, 1327, 40976, 1988]",0.5,2056,ml_signal,286,Method returning a hardcoded value,,2048,        Returns,"[220, 220, 220, 220, 220, 220, 220, 16409]"
‚úÖ Best Practice: Use of pd.Timestamp for date handling ensures consistency and compatibility with pandas operations.,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 14967, 27823, 329, 3128, 9041, 19047, 15794, 290, 17764, 351, 19798, 292, 4560, 13]",1.0,2064,best_practice,289,Use of pd.Timestamp for date handling ensures consistency and compatibility with pandas operations.,,2056,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Use of type hint for return value improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799]",0.5,2076,best_practice,291,Use of type hint for return value improves code readability and maintainability,,2064,        page_size = 5,"[220, 220, 220, 220, 220, 220, 220, 2443, 62, 7857, 796, 642]"
üß† ML Signal: Consistent return of a fixed value could indicate a placeholder or default implementation,"[8582, 100, 254, 10373, 26484, 25, 3515, 7609, 1441, 286, 257, 5969, 1988, 714, 7603, 257, 46076, 393, 4277, 7822]",0.5,2116,ml_signal,293,Consistent return of a fixed value could indicate a placeholder or default implementation,,2076,"        data = retry_request(self.changes_url.format(page_size=data[""total""], page_num=page_num)).json()","[220, 220, 220, 220, 220, 220, 220, 1366, 796, 1005, 563, 62, 25927, 7, 944, 13, 36653, 62, 6371, 13, 18982, 7, 7700, 62, 7857, 28, 7890, 14692, 23350, 33116, 2443, 62, 22510, 28, 7700, 62, 22510, 29720, 17752, 3419]"
‚úÖ Best Practice: Using @property decorator to define a method as a property for better encapsulation,"[26486, 227, 6705, 19939, 25, 8554, 2488, 26745, 11705, 1352, 284, 8160, 257, 2446, 355, 257, 3119, 329, 1365, 32652, 1741]",0.5,2156,best_practice,293,Using @property decorator to define a method as a property for better encapsulation,,2116,"        data = retry_request(self.changes_url.format(page_size=data[""total""], page_num=page_num)).json()","[220, 220, 220, 220, 220, 220, 220, 1366, 796, 1005, 563, 62, 25927, 7, 944, 13, 36653, 62, 6371, 13, 18982, 7, 7700, 62, 7857, 28, 7890, 14692, 23350, 33116, 2443, 62, 22510, 28, 7700, 62, 22510, 29720, 17752, 3419]"
‚úÖ Best Practice: Using a property to provide a read-only attribute,"[26486, 227, 6705, 19939, 25, 8554, 257, 3119, 284, 2148, 257, 1100, 12, 8807, 11688]",0.5,2156,best_practice,296,Using a property to provide a read-only attribute,,2156,,[]
"üß† ML Signal: Method for calculating index from stock prices, useful for financial modeling","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 26019, 6376, 422, 4283, 4536, 11, 4465, 329, 3176, 21128]",0.5,2156,ml_signal,299,"Method for calculating index from stock prices, useful for financial modeling",,2156,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure stock_prices is validated to prevent incorrect calculations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 4283, 62, 1050, 1063, 318, 31031, 284, 2948, 11491, 16765]",0.5,2164,sast_risk,301,Ensure stock_prices is validated to prevent incorrect calculations,Low,2156,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
‚úÖ Best Practice: Checking for empty input to prevent errors,"[26486, 227, 6705, 19939, 25, 39432, 329, 6565, 5128, 284, 2948, 8563]",0.5,2164,best_practice,303,Checking for empty input to prevent errors,,2164,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure price is a valid number to prevent calculation errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 2756, 318, 257, 4938, 1271, 284, 2948, 17952, 8563]",0.5,2182,sast_risk,308,Ensure price is a valid number to prevent calculation errors,Low,2164,                symbol: str,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 25, 965]"
"‚úÖ Best Practice: Using len() to calculate average, assuming stock_prices is a list","[26486, 227, 6705, 19939, 25, 8554, 18896, 3419, 284, 15284, 2811, 11, 13148, 4283, 62, 1050, 1063, 318, 257, 1351]",0.5,2190,best_practice,311,"Using len() to calculate average, assuming stock_prices is a list",,2182,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"üß† ML Signal: Method for retrieving top stocks, useful for portfolio optimization","[8582, 100, 254, 10373, 26484, 25, 11789, 329, 50122, 1353, 14420, 11, 4465, 329, 15320, 23989]",0.5,2198,ml_signal,311,"Method for retrieving top stocks, useful for portfolio optimization",,2190,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Ensure stock_data is validated to prevent incorrect data processing,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 4283, 62, 7890, 318, 31031, 284, 2948, 11491, 1366, 7587]",0.5,2206,sast_risk,311,Ensure stock_data is validated to prevent incorrect data processing,Low,2198,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Default parameter value for top_n improves function usability,"[26486, 227, 6705, 19939, 25, 15161, 11507, 1988, 329, 1353, 62, 77, 19575, 2163, 42863]",0.5,2214,best_practice,311,Default parameter value for top_n improves function usability,,2206,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Using sorted() with a key function for clarity and efficiency,"[26486, 227, 6705, 19939, 25, 8554, 23243, 3419, 351, 257, 1994, 2163, 329, 16287, 290, 9332]",0.5,2257,best_practice,323,Using sorted() with a key function for clarity and efficiency,,2214,        df[self.END_DATE_FIELD] = pd.to_datetime(df[self.END_DATE_FIELD].astype(str)),"[220, 220, 220, 220, 220, 220, 220, 47764, 58, 944, 13, 10619, 62, 35, 6158, 62, 44603, 60, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 58, 944, 13, 10619, 62, 35, 6158, 62, 44603, 4083, 459, 2981, 7, 2536, 4008]"
üß† ML Signal: Method returning a hardcoded value,"[8582, 100, 254, 10373, 26484, 25, 11789, 8024, 257, 1327, 40976, 1988]",1.0,2257,ml_signal,296,Method returning a hardcoded value,,2257,,[]
‚úÖ Best Practice: Use of @property decorator for getter method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446]",0.5,2257,best_practice,299,Use of @property decorator for getter method,,2257,,[]
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,2257,best_practice,299,Use of type hinting for return type improves code readability and maintainability.,,2257,,[]
"‚úÖ Best Practice: Use of @property decorator for defining a method as a property, enhancing encapsulation.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 16215, 257, 2446, 355, 257, 3119, 11, 27496, 32652, 1741, 13]",0.5,2274,best_practice,302,"Use of @property decorator for defining a method as a property, enhancing encapsulation.",,2257,            pd.DataFrame:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 6601, 19778, 25]"
‚úÖ Best Practice: Method should have a docstring explaining its purpose,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007]",1.0,2282,best_practice,301,Method should have a docstring explaining its purpose,,2274,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
‚úÖ Best Practice: Consider using a constant or named variable for the return value for clarity,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 6937, 393, 3706, 7885, 329, 262, 1441, 1988, 329, 16287]",1.0,2282,best_practice,303,Consider using a constant or named variable for the return value for clarity,,2282,,[]
‚úÖ Best Practice: Use of @property decorator for getter method to provide a read-only attribute,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446, 284, 2148, 257, 1100, 12, 8807, 11688]",1.0,2316,best_practice,305,Use of @property decorator for getter method to provide a read-only attribute,,2282,                SH600000   2000-01-01    2099-12-31,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6006, 8054, 830, 220, 220, 4751, 12, 486, 12, 486, 220, 220, 220, 1160, 2079, 12, 1065, 12, 3132]"
‚úÖ Best Practice: Use of @property decorator for getter method to provide a read-only attribute,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446, 284, 2148, 257, 1100, 12, 8807, 11688]",1.0,2340,best_practice,310,Use of @property decorator for getter method to provide a read-only attribute,,2316,                end_date: pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 4475, 25, 279, 67, 13, 14967, 27823]"
"üß† ML Signal: Function that processes stock prices, useful for financial data analysis models","[8582, 100, 254, 10373, 26484, 25, 15553, 326, 7767, 4283, 4536, 11, 4465, 329, 3176, 1366, 3781, 4981]",0.5,2348,ml_signal,311,"Function that processes stock prices, useful for financial data analysis models",,2340,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Ensure stock_prices is validated to prevent incorrect calculations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 4283, 62, 1050, 1063, 318, 31031, 284, 2948, 11491, 16765]",0.5,2356,sast_risk,311,Ensure stock_prices is validated to prevent incorrect calculations,Low,2348,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"‚ö†Ô∏è SAST Risk (Low): Handling of empty input, but could be more explicit with error handling","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 49500, 286, 6565, 5128, 11, 475, 714, 307, 517, 7952, 351, 4049, 9041]",0.5,2399,sast_risk,323,"Handling of empty input, but could be more explicit with error handling",Low,2356,        df[self.END_DATE_FIELD] = pd.to_datetime(df[self.END_DATE_FIELD].astype(str)),"[220, 220, 220, 220, 220, 220, 220, 47764, 58, 944, 13, 10619, 62, 35, 6158, 62, 44603, 60, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 58, 944, 13, 10619, 62, 35, 6158, 62, 44603, 4083, 459, 2981, 7, 2536, 4008]"
"üß† ML Signal: Iterating over stock prices, common pattern in financial computations","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 4283, 4536, 11, 2219, 3912, 287, 3176, 2653, 602]",0.5,2442,ml_signal,323,"Iterating over stock prices, common pattern in financial computations",,2399,        df[self.END_DATE_FIELD] = pd.to_datetime(df[self.END_DATE_FIELD].astype(str)),"[220, 220, 220, 220, 220, 220, 220, 47764, 58, 944, 13, 10619, 62, 35, 6158, 62, 44603, 60, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 58, 944, 13, 10619, 62, 35, 6158, 62, 44603, 4083, 459, 2981, 7, 2536, 4008]"
"‚ö†Ô∏è SAST Risk (Low): Assumes price is a valid number, consider input validation","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 2756, 318, 257, 4938, 1271, 11, 2074, 5128, 21201]",0.5,2469,sast_risk,324,"Assumes price is a valid number, consider input validation",Low,2442,        df[self.START_DATE_FIELD] = self.bench_start_date,"[220, 220, 220, 220, 220, 220, 220, 47764, 58, 944, 13, 2257, 7227, 62, 35, 6158, 62, 44603, 60, 796, 2116, 13, 26968, 62, 9688, 62, 4475]"
‚úÖ Best Practice: Avoid division by zero by checking total_market_cap,"[26486, 227, 6705, 19939, 25, 24390, 7297, 416, 6632, 416, 10627, 2472, 62, 10728, 62, 11128]",0.5,2486,best_practice,325,Avoid division by zero by checking total_market_cap,,2469,"        logger.info(""end of get new companies."")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 437, 286, 651, 649, 2706, 19570]"
"‚ö†Ô∏è SAST Risk (Low): Potential division by zero, handled by returning 0","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 11, 12118, 416, 8024, 657]",0.5,2503,sast_risk,325,"Potential division by zero, handled by returning 0",Low,2486,"        logger.info(""end of get new companies."")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 437, 286, 651, 649, 2706, 19570]"
"üß† ML Signal: Calculation of index value, relevant for financial modeling","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 6376, 1988, 11, 5981, 329, 3176, 21128]",0.5,2503,ml_signal,337,"Calculation of index value, relevant for financial modeling",,2503,,[]
‚úÖ Best Practice: Use of type hint for return value improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 1988, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,2503,best_practice,306,Use of type hint for return value improves code readability and maintainability.,,2503,,[]
‚úÖ Best Practice: Use of @property decorator for getter method is a Pythonic way to access class attributes.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 651, 353, 2446, 318, 257, 11361, 291, 835, 284, 1895, 1398, 12608, 13]",0.5,2527,best_practice,309,Use of @property decorator for getter method is a Pythonic way to access class attributes.,,2503,                start_date: pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 4475, 25, 279, 67, 13, 14967, 27823]"
‚úÖ Best Practice: Use of type hint for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2545,best_practice,308,Use of type hint for return type improves code readability and maintainability,,2527,                symbol: str,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 25, 965]"
üß† ML Signal: Hardcoded date value could indicate a fixed point of interest in time series data,"[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3128, 1988, 714, 7603, 257, 5969, 966, 286, 1393, 287, 640, 2168, 1366]",0.5,2569,ml_signal,310,Hardcoded date value could indicate a fixed point of interest in time series data,,2545,                end_date: pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 62, 4475, 25, 279, 67, 13, 14967, 27823]"
‚úÖ Best Practice: Docstring provides a clear description of the method's purpose and return type,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2446, 338, 4007, 290, 1441, 2099]",0.5,2577,best_practice,311,Docstring provides a clear description of the method's purpose and return type,,2569,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Method chaining and function calls within return statements,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 290, 2163, 3848, 1626, 1441, 6299]",0.5,2604,ml_signal,324,Method chaining and function calls within return statements,,2577,        df[self.START_DATE_FIELD] = self.bench_start_date,"[220, 220, 220, 220, 220, 220, 220, 47764, 58, 944, 13, 2257, 7227, 62, 35, 6158, 62, 44603, 60, 796, 2116, 13, 26968, 62, 9688, 62, 4475]"
‚ö†Ô∏è SAST Risk (Low): Ensure bs.login() handles credentials securely and does not expose sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 275, 82, 13, 38235, 3419, 17105, 18031, 30835, 290, 857, 407, 15651, 8564, 1321, 13]",0.5,2604,sast_risk,337,Ensure bs.login() handles credentials securely and does not expose sensitive information.,Low,2604,,[]
üß† ML Signal: Usage of current timestamp to determine the end of a date range.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1459, 41033, 284, 5004, 262, 886, 286, 257, 3128, 2837, 13]",0.5,2619,ml_signal,339,Usage of current timestamp to determine the end of a date range.,,2604,    def html_table_index(self) -> int:,"[220, 220, 220, 825, 27711, 62, 11487, 62, 9630, 7, 944, 8, 4613, 493, 25]"
‚úÖ Best Practice: Use of pd.date_range to generate a sequence of dates.,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 4475, 62, 9521, 284, 7716, 257, 8379, 286, 9667, 13]",1.0,2619,best_practice,341,Use of pd.date_range to generate a sequence of dates.,,2619,,[]
üß† ML Signal: Iterating over a date range with tqdm for progress tracking.,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 3128, 2837, 351, 256, 80, 36020, 329, 4371, 9646, 13]",0.5,2624,ml_signal,344,Iterating over a date range with tqdm for progress tracking.,,2619,    @property,"[220, 220, 220, 2488, 26745]"
üß† ML Signal: Pattern of fetching data from an external source based on a date.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 21207, 278, 1366, 422, 281, 7097, 2723, 1912, 319, 257, 3128, 13]",0.5,2634,ml_signal,345,Pattern of fetching data from an external source based on a date.,,2624,    def index_code(self):,"[220, 220, 220, 825, 6376, 62, 8189, 7, 944, 2599]"
‚úÖ Best Practice: Selecting specific columns from the result for further processing.,"[26486, 227, 6705, 19939, 25, 9683, 278, 2176, 15180, 422, 262, 1255, 329, 2252, 7587, 13]",0.5,2639,best_practice,348,Selecting specific columns from the result for further processing.,,2634,    @property,"[220, 220, 220, 2488, 26745]"
‚ö†Ô∏è SAST Risk (Low): Ensure bs.logout() is called to terminate the session securely.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 275, 82, 13, 6404, 448, 3419, 318, 1444, 284, 23654, 262, 6246, 30835, 13]",0.5,2644,sast_risk,348,Ensure bs.logout() is called to terminate the session securely.,Low,2639,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Use of pd.concat to combine a list of DataFrames.,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 1102, 9246, 284, 12082, 257, 1351, 286, 6060, 35439, 13]",1.0,2649,best_practice,348,Use of pd.concat to combine a list of DataFrames.,,2644,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Ensure the date is converted to string for compatibility with the API,"[26486, 227, 6705, 19939, 25, 48987, 262, 3128, 318, 11513, 284, 4731, 329, 17764, 351, 262, 7824]",1.0,2669,best_practice,364,Ensure the date is converted to string for compatibility with the API,,2649,"        return pd.Timestamp(""2007-01-15"")","[220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 14967, 27823, 7203, 12726, 12, 486, 12, 1314, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential infinite loop if rs.next() always returns True,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 15541, 9052, 611, 44608, 13, 19545, 3419, 1464, 5860, 6407]",1.0,2680,sast_risk,367,Potential infinite loop if rs.next() always returns True,Low,2669,"        """"""get companies changes","[220, 220, 220, 220, 220, 220, 220, 37227, 1136, 2706, 2458]"
üß† ML Signal: Appending data to a list in a loop is a common pattern,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 1366, 284, 257, 1351, 287, 257, 9052, 318, 257, 2219, 3912]",1.0,2688,ml_signal,369,Appending data to a list in a loop is a common pattern,,2680,        Return,"[220, 220, 220, 220, 220, 220, 220, 8229]"
üß† ML Signal: Creating a DataFrame from a list of lists,"[8582, 100, 254, 10373, 26484, 25, 30481, 257, 6060, 19778, 422, 257, 1351, 286, 8341]",1.0,2704,ml_signal,371,Creating a DataFrame from a list of lists,,2688,           pd.DataFrame:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 6601, 19778, 25]"
‚úÖ Best Practice: Use of lambda for inline string manipulation,"[26486, 227, 6705, 19939, 25, 5765, 286, 37456, 329, 26098, 4731, 17512]",0.5,2733,best_practice,372,Use of lambda for inline string manipulation,,2704,               symbol      date        type,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 220, 220, 220, 220, 220, 3128, 220, 220, 220, 220, 220, 220, 220, 2099]"
üß† ML Signal: Usage of current timestamp for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1459, 41033, 329, 1366, 45069]",1.0,2733,ml_signal,384,Usage of current timestamp for data retrieval,,2733,,[]
‚ö†Ô∏è SAST Risk (Low): Potential risk if bs.login() fails without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 275, 82, 13, 38235, 3419, 10143, 1231, 6631, 9041]",0.5,2741,sast_risk,386,Potential risk if bs.login() fails without exception handling,Low,2733,        -------,"[220, 220, 220, 220, 220, 220, 220, 35656]"
üß† ML Signal: Data retrieval pattern from external source,"[8582, 100, 254, 10373, 26484, 25, 6060, 45069, 3912, 422, 7097, 2723]",0.5,2758,ml_signal,388,Data retrieval pattern from external source,,2741,            pd.DataFrame:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 6601, 19778, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if bs.logout() fails without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 275, 82, 13, 6404, 448, 3419, 10143, 1231, 6631, 9041]",0.5,2786,sast_risk,390,Potential risk if bs.logout() fails without exception handling,Low,2758,                SH600000  2019-11-11    add,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6006, 8054, 830, 220, 13130, 12, 1157, 12, 1157, 220, 220, 220, 751]"
üß† ML Signal: Setting current date as end date for data entries,"[8582, 100, 254, 10373, 26484, 25, 25700, 1459, 3128, 355, 886, 3128, 329, 1366, 12784]",0.5,2808,ml_signal,394,Setting current date as end date for data entries,,2786,                date: pd.Timestamp,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3128, 25, 279, 67, 13, 14967, 27823]"
üß† ML Signal: Usage of a predefined start date for data entries,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2747, 18156, 923, 3128, 329, 1366, 12784]",0.5,2835,ml_signal,395,Usage of a predefined start date for data entries,,2808,"                type: str, value from [""add"", ""remove""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2099, 25, 965, 11, 1988, 422, 14631, 2860, 1600, 366, 28956, 8973]"
‚úÖ Best Practice: Use of __name__ guard for script execution,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3672, 834, 4860, 329, 4226, 9706]",0.5,2862,best_practice,395,Use of __name__ guard for script execution,,2835,"                type: str, value from [""add"", ""remove""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2099, 25, 965, 11, 1988, 422, 14631, 2860, 1600, 366, 28956, 8973]"
üß† ML Signal: Command-line interface pattern for function execution,"[8582, 100, 254, 10373, 26484, 25, 9455, 12, 1370, 7071, 3912, 329, 2163, 9706]",0.5,2889,ml_signal,395,Command-line interface pattern for function execution,,2862,"                type: str, value from [""add"", ""remove""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2099, 25, 965, 11, 1988, 422, 14631, 2860, 1600, 366, 28956, 8973]"

[
  {
    "line": 1,
    "text": "# Copyright (c) Microsoft Corporation.",
    "annotation": "\u2705 Best Practice: Import statements should be grouped and ordered by standard library, third-party, and local imports",
    "confidence": 0.5,
    "tokens": [
      2,
      15069,
      357,
      66,
      8,
      5413,
      10501,
      13
    ],
    "start_token": 0,
    "end_token": 8,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      6299,
      815,
      307,
      32824,
      290,
      6149,
      416,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      17944
    ],
    "label": "best_practice",
    "reason": "Import statements should be grouped and ordered by standard library, third-party, and local imports"
  },
  {
    "line": 15,
    "text": "from tqdm import tqdm",
    "annotation": "\u2705 Best Practice: Constants should be defined in uppercase",
    "confidence": 0.5,
    "tokens": [
      6738,
      256,
      80,
      36020,
      1330,
      256,
      80,
      36020
    ],
    "start_token": 8,
    "end_token": 16,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      815,
      307,
      5447,
      287,
      334,
      39921,
      589
    ],
    "label": "best_practice",
    "reason": "Constants should be defined in uppercase"
  },
  {
    "line": 18,
    "text": "CUR_DIR = Path(__file__).resolve().parent",
    "annotation": "\u2705 Best Practice: Avoid modifying sys.path; consider using a virtual environment or package management",
    "confidence": 1.0,
    "tokens": [
      34,
      4261,
      62,
      34720,
      796,
      10644,
      7,
      834,
      7753,
      834,
      737,
      411,
      6442,
      22446,
      8000
    ],
    "start_token": 16,
    "end_token": 31,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      24390,
      30620,
      25064,
      13,
      6978,
      26,
      2074,
      1262,
      257,
      7166,
      2858,
      393,
      5301,
      4542
    ],
    "label": "best_practice",
    "reason": "Avoid modifying sys.path; consider using a virtual environment or package management"
  },
  {
    "line": 21,
    "text": "from data_collector.index import IndexBase",
    "annotation": "\u2705 Best Practice: Import statements should be grouped and ordered by standard library, third-party, and local imports",
    "confidence": 0.5,
    "tokens": [
      6738,
      1366,
      62,
      33327,
      273,
      13,
      9630,
      1330,
      12901,
      14881
    ],
    "start_token": 31,
    "end_token": 41,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      6299,
      815,
      307,
      32824,
      290,
      6149,
      416,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      17944
    ],
    "label": "best_practice",
    "reason": "Import statements should be grouped and ordered by standard library, third-party, and local imports"
  },
  {
    "line": 26,
    "text": "NEW_COMPANIES_URL = (",
    "annotation": "\u2705 Best Practice: Constants should be defined in uppercase",
    "confidence": 0.5,
    "tokens": [
      13965,
      62,
      9858,
      47,
      1565,
      11015,
      62,
      21886,
      796,
      357
    ],
    "start_token": 41,
    "end_token": 51,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      815,
      307,
      5447,
      287,
      334,
      39921,
      589
    ],
    "label": "best_practice",
    "reason": "Constants should be defined in uppercase"
  },
  {
    "line": 31,
    "text": "INDEX_CHANGES_URL = \"https://www.csindex.com.cn/csindex-home/search/search-content?lang=cn&searchInput=%E5%85%B3%E4%BA%8E%E8%B0%83%E6%95%B4%E6%B2%AA%E6%B7%B1300%E5%92%8C%E4%B8%AD%E8%AF%81%E9%A6%99%E6%B8%AF100%E7%AD%89%E6%8C%87%E6%95%B0%E6%A0%B7%E6%9C%AC&pageNum={page_num}&pageSize={page_size}&sortField=date&dateRange=all&contentType=announcement\"",
    "annotation": "\u2705 Best Practice: Constants should be defined in uppercase",
    "confidence": 0.5,
    "tokens": [
      12115,
      6369,
      62,
      3398,
      15567,
      1546,
      62,
      21886,
      796,
      366,
      5450,
      1378,
      2503,
      13,
      6359,
      9630,
      13,
      785,
      13,
      31522,
      14,
      6359,
      9630,
      12,
      11195,
      14,
      12947,
      14,
      12947,
      12,
      11299,
      30,
      17204,
      28,
      31522,
      5,
      12947,
      20560,
      28,
      4,
      36,
      20,
      4,
      5332,
      4,
      33,
      18,
      4,
      36,
      19,
      4,
      4339,
      4,
      23,
      36,
      4,
      36,
      23,
      4,
      33,
      15,
      4,
      5999,
      4,
      36,
      21,
      4,
      3865,
      4,
      33,
      19,
      4,
      36,
      21,
      4,
      33,
      17,
      4,
      3838,
      4,
      36,
      21,
      4,
      33,
      22,
      4,
      33,
      1485,
      405,
      4,
      36,
      20,
      4,
      5892,
      4,
      23,
      34,
      4,
      36,
      19,
      4,
      33,
      23,
      4,
      2885,
      4,
      36,
      23,
      4,
      8579,
      4,
      6659,
      4,
      36,
      24,
      4,
      32,
      21,
      4,
      2079,
      4,
      36,
      21,
      4,
      33,
      23,
      4,
      8579,
      3064,
      4,
      36,
      22,
      4,
      2885,
      4,
      4531,
      4,
      36,
      21,
      4,
      23,
      34,
      4,
      5774,
      4,
      36,
      21,
      4,
      3865,
      4,
      33,
      15,
      4,
      36,
      21,
      4,
      32,
      15,
      4,
      33,
      22,
      4,
      36,
      21,
      4,
      24,
      34,
      4,
      2246,
      5,
      7700,
      33111,
      34758,
      7700,
      62,
      22510,
      92,
      5,
      7700,
      10699,
      34758,
      7700,
      62,
      7857,
      92,
      5,
      30619,
      15878,
      28,
      4475,
      5,
      4475,
      17257,
      28,
      439,
      5,
      11299,
      6030,
      28,
      1236,
      8652,
      434,
      1
    ],
    "start_token": 51,
    "end_token": 254,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      815,
      307,
      5447,
      287,
      334,
      39921,
      589
    ],
    "label": "best_practice",
    "reason": "Constants should be defined in uppercase"
  },
  {
    "line": 34,
    "text": "    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.101 Safari/537.36 Edg/91.0.864.48\"",
    "annotation": "\u2705 Best Practice: Constants should be defined in uppercase",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      366,
      12982,
      12,
      36772,
      1298,
      366,
      44,
      8590,
      5049,
      14,
      20,
      13,
      15,
      357,
      11209,
      24563,
      838,
      13,
      15,
      26,
      7178,
      2414,
      26,
      2124,
      2414,
      8,
      4196,
      13908,
      20827,
      14,
      46096,
      13,
      2623,
      357,
      42,
      28656,
      11,
      588,
      2269,
      37549,
      8,
      13282,
      14,
      6420,
      13,
      15,
      13,
      2598,
      4761,
      13,
      8784,
      23298,
      14,
      46096,
      13,
      2623,
      1717,
      70,
      14,
      6420,
      13,
      15,
      13,
      39570,
      13,
      2780,
      1
    ],
    "start_token": 254,
    "end_token": 324,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      815,
      307,
      5447,
      287,
      334,
      39921,
      589
    ],
    "label": "best_practice",
    "reason": "Constants should be defined in uppercase"
  },
  {
    "line": 38,
    "text": "@deco_retry",
    "annotation": "\ud83e\udde0 ML Signal: Usage of decorators can indicate patterns in function behavior or error handling",
    "confidence": 0.5,
    "tokens": [
      31,
      12501,
      78,
      62,
      1186,
      563
    ],
    "start_token": 324,
    "end_token": 330,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      11705,
      2024,
      460,
      7603,
      7572,
      287,
      2163,
      4069,
      393,
      4049,
      9041
    ],
    "label": "ml_signal",
    "reason": "Usage of decorators can indicate patterns in function behavior or error handling"
  },
  {
    "line": 26,
    "text": "NEW_COMPANIES_URL = (",
    "annotation": "\u2705 Best Practice: Use type hinting for the return type of the function",
    "confidence": 1.0,
    "tokens": [
      13965,
      62,
      9858,
      47,
      1565,
      11015,
      62,
      21886,
      796,
      357
    ],
    "start_token": 330,
    "end_token": 340,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2099,
      9254,
      278,
      329,
      262,
      1441,
      2099,
      286,
      262,
      2163
    ],
    "label": "best_practice",
    "reason": "Use type hinting for the return type of the function"
  },
  {
    "line": 28,
    "text": ")",
    "annotation": "\u2705 Best Practice: Use a more specific type hint for exclude_status, e.g., List[int]",
    "confidence": 0.5,
    "tokens": [
      8
    ],
    "start_token": 340,
    "end_token": 341,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      517,
      2176,
      2099,
      9254,
      329,
      19607,
      62,
      13376,
      11,
      304,
      13,
      70,
      1539,
      7343,
      58,
      600,
      60
    ],
    "label": "best_practice",
    "reason": "Use a more specific type hint for exclude_status, e.g., List[int]"
  },
  {
    "line": 31,
    "text": "INDEX_CHANGES_URL = \"https://www.csindex.com.cn/csindex-home/search/search-content?lang=cn&searchInput=%E5%85%B3%E4%BA%8E%E8%B0%83%E6%95%B4%E6%B2%AA%E6%B7%B1300%E5%92%8C%E4%B8%AD%E8%AF%81%E9%A6%99%E6%B8%AF100%E7%AD%89%E6%8C%87%E6%95%B0%E6%A0%B7%E6%9C%AC&pageNum={page_num}&pageSize={page_size}&sortField=date&dateRange=all&contentType=announcement\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): getattr can be dangerous if method is not validated, leading to potential security risks",
    "confidence": 0.5,
    "tokens": [
      12115,
      6369,
      62,
      3398,
      15567,
      1546,
      62,
      21886,
      796,
      366,
      5450,
      1378,
      2503,
      13,
      6359,
      9630,
      13,
      785,
      13,
      31522,
      14,
      6359,
      9630,
      12,
      11195,
      14,
      12947,
      14,
      12947,
      12,
      11299,
      30,
      17204,
      28,
      31522,
      5,
      12947,
      20560,
      28,
      4,
      36,
      20,
      4,
      5332,
      4,
      33,
      18,
      4,
      36,
      19,
      4,
      4339,
      4,
      23,
      36,
      4,
      36,
      23,
      4,
      33,
      15,
      4,
      5999,
      4,
      36,
      21,
      4,
      3865,
      4,
      33,
      19,
      4,
      36,
      21,
      4,
      33,
      17,
      4,
      3838,
      4,
      36,
      21,
      4,
      33,
      22,
      4,
      33,
      1485,
      405,
      4,
      36,
      20,
      4,
      5892,
      4,
      23,
      34,
      4,
      36,
      19,
      4,
      33,
      23,
      4,
      2885,
      4,
      36,
      23,
      4,
      8579,
      4,
      6659,
      4,
      36,
      24,
      4,
      32,
      21,
      4,
      2079,
      4,
      36,
      21,
      4,
      33,
      23,
      4,
      8579,
      3064,
      4,
      36,
      22,
      4,
      2885,
      4,
      4531,
      4,
      36,
      21,
      4,
      23,
      34,
      4,
      5774,
      4,
      36,
      21,
      4,
      3865,
      4,
      33,
      15,
      4,
      36,
      21,
      4,
      32,
      15,
      4,
      33,
      22,
      4,
      36,
      21,
      4,
      24,
      34,
      4,
      2246,
      5,
      7700,
      33111,
      34758,
      7700,
      62,
      22510,
      92,
      5,
      7700,
      10699,
      34758,
      7700,
      62,
      7857,
      92,
      5,
      30619,
      15878,
      28,
      4475,
      5,
      4475,
      17257,
      28,
      439,
      5,
      11299,
      6030,
      28,
      1236,
      8652,
      434,
      1
    ],
    "start_token": 341,
    "end_token": 544,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      651,
      35226,
      460,
      307,
      4923,
      611,
      2446,
      318,
      407,
      31031,
      11,
      3756,
      284,
      2785,
      2324,
      7476
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "getattr can be dangerous if method is not validated, leading to potential security risks"
  },
  {
    "line": 33,
    "text": "REQ_HEADERS = {",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No timeout specified for the request, which can lead to hanging connections",
    "confidence": 0.5,
    "tokens": [
      2200,
      48,
      62,
      37682,
      4877,
      796,
      1391
    ],
    "start_token": 544,
    "end_token": 551,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      26827,
      7368,
      329,
      262,
      2581,
      11,
      543,
      460,
      1085,
      284,
      10938,
      8787
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No timeout specified for the request, which can lead to hanging connections"
  },
  {
    "line": 35,
    "text": "}",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of checking status codes for retry logic",
    "confidence": 0.5,
    "tokens": [
      92
    ],
    "start_token": 551,
    "end_token": 552,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      10627,
      3722,
      12416,
      329,
      1005,
      563,
      9156
    ],
    "label": "ml_signal",
    "reason": "Pattern of checking status codes for retry logic"
  },
  {
    "line": 38,
    "text": "@deco_retry",
    "annotation": "\ud83e\udde0 ML Signal: Raising exceptions based on HTTP status codes",
    "confidence": 1.0,
    "tokens": [
      31,
      12501,
      78,
      62,
      1186,
      563
    ],
    "start_token": 552,
    "end_token": 558,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7567,
      1710,
      13269,
      1912,
      319,
      14626,
      3722,
      12416
    ],
    "label": "ml_signal",
    "reason": "Raising exceptions based on HTTP status codes"
  },
  {
    "line": 35,
    "text": "}",
    "annotation": "\u2705 Best Practice: Using @property decorator to define a getter for a class attribute",
    "confidence": 0.5,
    "tokens": [
      92
    ],
    "start_token": 558,
    "end_token": 559,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2488,
      26745,
      11705,
      1352,
      284,
      8160,
      257,
      651,
      353,
      329,
      257,
      1398,
      11688
    ],
    "label": "best_practice",
    "reason": "Using @property decorator to define a getter for a class attribute"
  },
  {
    "line": 38,
    "text": "@deco_retry",
    "annotation": "\u2705 Best Practice: Returning a string directly for a simple property",
    "confidence": 0.5,
    "tokens": [
      31,
      12501,
      78,
      62,
      1186,
      563
    ],
    "start_token": 559,
    "end_token": 565,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      4731,
      3264,
      329,
      257,
      2829,
      3119
    ],
    "label": "best_practice",
    "reason": "Returning a string directly for a simple property"
  },
  {
    "line": 43,
    "text": "    _resp = method_func(url, headers=REQ_HEADERS, timeout=None)",
    "annotation": "\ud83e\udde0 ML Signal: Method signature indicates a calculation function, common in financial models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4808,
      4363,
      796,
      2446,
      62,
      20786,
      7,
      6371,
      11,
      24697,
      28,
      2200,
      48,
      62,
      37682,
      4877,
      11,
      26827,
      28,
      14202,
      8
    ],
    "start_token": 565,
    "end_token": 589,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      9217,
      257,
      17952,
      2163,
      11,
      2219,
      287,
      3176,
      4981
    ],
    "label": "ml_signal",
    "reason": "Method signature indicates a calculation function, common in financial models"
  },
  {
    "line": 43,
    "text": "    _resp = method_func(url, headers=REQ_HEADERS, timeout=None)",
    "annotation": "\u2705 Best Practice: Method name is descriptive of its functionality",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4808,
      4363,
      796,
      2446,
      62,
      20786,
      7,
      6371,
      11,
      24697,
      28,
      2200,
      48,
      62,
      37682,
      4877,
      11,
      26827,
      28,
      14202,
      8
    ],
    "start_token": 589,
    "end_token": 613,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      1438,
      318,
      35644,
      286,
      663,
      11244
    ],
    "label": "best_practice",
    "reason": "Method name is descriptive of its functionality"
  },
  {
    "line": 44,
    "text": "    _status = _resp.status_code",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'data' is validated to prevent unexpected behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4808,
      13376,
      796,
      4808,
      4363,
      13,
      13376,
      62,
      8189
    ],
    "start_token": 613,
    "end_token": 625,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      7890,
      6,
      318,
      31031,
      284,
      2948,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'data' is validated to prevent unexpected behavior"
  },
  {
    "line": 46,
    "text": "        raise ValueError(f\"response status: {_status}, url={url}\")",
    "annotation": "\u2705 Best Practice: Checking for empty data input",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      11052,
      12331,
      7,
      69,
      1,
      26209,
      3722,
      25,
      1391,
      62,
      13376,
      5512,
      19016,
      34758,
      6371,
      92,
      4943
    ],
    "start_token": 625,
    "end_token": 650,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      6565,
      1366,
      5128
    ],
    "label": "best_practice",
    "reason": "Checking for empty data input"
  },
  {
    "line": 49,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over data, common pattern in data processing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 650,
    "end_token": 650,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      1366,
      11,
      2219,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Iterating over data, common pattern in data processing"
  },
  {
    "line": 52,
    "text": "    def calendar_list(self) -> List[pd.Timestamp]:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'value' is of expected type to prevent type errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      11845,
      62,
      4868,
      7,
      944,
      8,
      4613,
      7343,
      58,
      30094,
      13,
      14967,
      27823,
      5974
    ],
    "start_token": 650,
    "end_token": 668,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      8367,
      6,
      318,
      286,
      2938,
      2099,
      284,
      2948,
      2099,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'value' is of expected type to prevent type errors"
  },
  {
    "line": 56,
    "text": "        -------",
    "annotation": "\u2705 Best Practice: Returning a calculated result",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 668,
    "end_token": 676,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      10488,
      1255
    ],
    "label": "best_practice",
    "reason": "Returning a calculated result"
  },
  {
    "line": 57,
    "text": "            calendar list",
    "annotation": "\ud83e\udde0 ML Signal: Method signature suggests updating internal state with new data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11845,
      1351
    ],
    "start_token": 676,
    "end_token": 689,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      9877,
      5644,
      19698,
      5387,
      1181,
      351,
      649,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method signature suggests updating internal state with new data"
  },
  {
    "line": 62,
    "text": "            setattr(self, \"_calendar_list\", _calendar)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Validate 'new_data' to prevent injection or corruption",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      900,
      35226,
      7,
      944,
      11,
      45434,
      9948,
      9239,
      62,
      4868,
      1600,
      4808,
      9948,
      9239,
      8
    ],
    "start_token": 689,
    "end_token": 715,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      3254,
      20540,
      705,
      3605,
      62,
      7890,
      6,
      284,
      2948,
      16954,
      393,
      9253
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Validate 'new_data' to prevent injection or corruption"
  },
  {
    "line": 62,
    "text": "            setattr(self, \"_calendar_list\", _calendar)",
    "annotation": "\u2705 Best Practice: Descriptive method name indicating its purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      900,
      35226,
      7,
      944,
      11,
      45434,
      9948,
      9239,
      62,
      4868,
      1600,
      4808,
      9948,
      9239,
      8
    ],
    "start_token": 715,
    "end_token": 741,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2935,
      6519,
      425,
      2446,
      1438,
      12739,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Descriptive method name indicating its purpose"
  },
  {
    "line": 62,
    "text": "            setattr(self, \"_calendar_list\", _calendar)",
    "annotation": "\u2705 Best Practice: Checking for empty new_data input",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      900,
      35226,
      7,
      944,
      11,
      45434,
      9948,
      9239,
      62,
      4868,
      1600,
      4808,
      9948,
      9239,
      8
    ],
    "start_token": 741,
    "end_token": 767,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      6565,
      649,
      62,
      7890,
      5128
    ],
    "label": "best_practice",
    "reason": "Checking for empty new_data input"
  },
  {
    "line": 66,
    "text": "    def new_companies_url(self) -> str:",
    "annotation": "\ud83e\udde0 ML Signal: Placeholder for update logic, common in index management",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      649,
      62,
      34390,
      444,
      62,
      6371,
      7,
      944,
      8,
      4613,
      965,
      25
    ],
    "start_token": 767,
    "end_token": 783,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8474,
      13829,
      329,
      4296,
      9156,
      11,
      2219,
      287,
      6376,
      4542
    ],
    "label": "ml_signal",
    "reason": "Placeholder for update logic, common in index management"
  },
  {
    "line": 66,
    "text": "    def new_companies_url(self) -> str:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure update logic handles data safely",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      649,
      62,
      34390,
      444,
      62,
      6371,
      7,
      944,
      8,
      4613,
      965,
      25
    ],
    "start_token": 783,
    "end_token": 799,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      4296,
      9156,
      17105,
      1366,
      11512
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure update logic handles data safely"
  },
  {
    "line": 43,
    "text": "    _resp = method_func(url, headers=REQ_HEADERS, timeout=None)",
    "annotation": "\u2705 Best Practice: Use of getattr with a default value to check for attribute existence",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4808,
      4363,
      796,
      2446,
      62,
      20786,
      7,
      6371,
      11,
      24697,
      28,
      2200,
      48,
      62,
      37682,
      4877,
      11,
      26827,
      28,
      14202,
      8
    ],
    "start_token": 799,
    "end_token": 823,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      651,
      35226,
      351,
      257,
      4277,
      1988,
      284,
      2198,
      329,
      11688,
      6224
    ],
    "label": "best_practice",
    "reason": "Use of getattr with a default value to check for attribute existence"
  },
  {
    "line": 46,
    "text": "        raise ValueError(f\"response status: {_status}, url={url}\")",
    "annotation": "\ud83e\udde0 ML Signal: Lazy loading pattern for caching data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      11052,
      12331,
      7,
      69,
      1,
      26209,
      3722,
      25,
      1391,
      62,
      13376,
      5512,
      19016,
      34758,
      6371,
      92,
      4943
    ],
    "start_token": 823,
    "end_token": 848,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      406,
      12582,
      11046,
      3912,
      329,
      40918,
      1366
    ],
    "label": "ml_signal",
    "reason": "Lazy loading pattern for caching data"
  },
  {
    "line": 47,
    "text": "    return _resp",
    "annotation": "\u2705 Best Practice: Use of setattr to dynamically set an attribute",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      4808,
      4363
    ],
    "start_token": 848,
    "end_token": 854,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      900,
      35226,
      284,
      32366,
      900,
      281,
      11688
    ],
    "label": "best_practice",
    "reason": "Use of setattr to dynamically set an attribute"
  },
  {
    "line": 50,
    "text": "class CSIIndex(IndexBase):",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a formatted URL string, indicating a pattern of URL construction",
    "confidence": 0.5,
    "tokens": [
      4871,
      9429,
      3978,
      358,
      1069,
      7,
      15732,
      14881,
      2599
    ],
    "start_token": 854,
    "end_token": 863,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      39559,
      10289,
      4731,
      11,
      12739,
      257,
      3912,
      286,
      10289,
      5103
    ],
    "label": "ml_signal",
    "reason": "Method returning a formatted URL string, indicating a pattern of URL construction"
  },
  {
    "line": 53,
    "text": "        \"\"\"get history trading date",
    "annotation": "\u2705 Best Practice: Use of @property decorator for a method that acts like a getter",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      1136,
      2106,
      7313,
      3128
    ],
    "start_token": 863,
    "end_token": 875,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      329,
      257,
      2446,
      326,
      6529,
      588,
      257,
      651,
      353
    ],
    "label": "best_practice",
    "reason": "Use of @property decorator for a method that acts like a getter"
  },
  {
    "line": 53,
    "text": "        \"\"\"get history trading date",
    "annotation": "\u2705 Best Practice: Use of type hinting for return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      1136,
      2106,
      7313,
      3128
    ],
    "start_token": 875,
    "end_token": 887,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return type"
  },
  {
    "line": 57,
    "text": "            calendar list",
    "annotation": "\u2705 Best Practice: Use of @property decorator for abstract method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11845,
      1351
    ],
    "start_token": 887,
    "end_token": 900,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      329,
      12531,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of @property decorator for abstract method"
  },
  {
    "line": 57,
    "text": "            calendar list",
    "annotation": "\u2705 Best Practice: Include type hints for return values to improve code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11845,
      1351
    ],
    "start_token": 900,
    "end_token": 913,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      2099,
      20269,
      329,
      1441,
      3815,
      284,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Include type hints for return values to improve code readability and maintainability"
  },
  {
    "line": 62,
    "text": "            setattr(self, \"_calendar_list\", _calendar)",
    "annotation": "\u2705 Best Practice: Use of NotImplementedError to indicate that subclasses should implement this method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      900,
      35226,
      7,
      944,
      11,
      45434,
      9948,
      9239,
      62,
      4868,
      1600,
      4808,
      9948,
      9239,
      8
    ],
    "start_token": 913,
    "end_token": 939,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1892,
      3546,
      1154,
      12061,
      12331,
      284,
      7603,
      326,
      850,
      37724,
      815,
      3494,
      428,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of NotImplementedError to indicate that subclasses should implement this method"
  },
  {
    "line": 66,
    "text": "    def new_companies_url(self) -> str:",
    "annotation": "\u2705 Best Practice: Use of @property and @abc.abstractmethod to enforce implementation in subclasses",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      649,
      62,
      34390,
      444,
      62,
      6371,
      7,
      944,
      8,
      4613,
      965,
      25
    ],
    "start_token": 939,
    "end_token": 955,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      290,
      2488,
      39305,
      13,
      397,
      8709,
      24396,
      284,
      4605,
      7822,
      287,
      850,
      37724
    ],
    "label": "best_practice",
    "reason": "Use of @property and @abc.abstractmethod to enforce implementation in subclasses"
  },
  {
    "line": 66,
    "text": "    def new_companies_url(self) -> str:",
    "annotation": "\u2705 Best Practice: Include a docstring to describe the method's purpose and return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      649,
      62,
      34390,
      444,
      62,
      6371,
      7,
      944,
      8,
      4613,
      965,
      25
    ],
    "start_token": 955,
    "end_token": 971,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      40348,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2446,
      338,
      4007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Include a docstring to describe the method's purpose and return value"
  },
  {
    "line": 71,
    "text": "        return INDEX_CHANGES_URL",
    "annotation": "\u2705 Best Practice: Use NotImplementedError to indicate that a method should be overridden",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      24413,
      6369,
      62,
      3398,
      15567,
      1546,
      62,
      21886
    ],
    "start_token": 971,
    "end_token": 987,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1892,
      3546,
      1154,
      12061,
      12331,
      284,
      7603,
      326,
      257,
      2446,
      815,
      307,
      23170,
      4651
    ],
    "label": "best_practice",
    "reason": "Use NotImplementedError to indicate that a method should be overridden"
  },
  {
    "line": 74,
    "text": "    @abc.abstractmethod",
    "annotation": "\u2705 Best Practice: Use @property decorator for read-only access to a method's return value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      39305,
      13,
      397,
      8709,
      24396
    ],
    "start_token": 987,
    "end_token": 996,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2488,
      26745,
      11705,
      1352,
      329,
      1100,
      12,
      8807,
      1895,
      284,
      257,
      2446,
      338,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Use @property decorator for read-only access to a method's return value"
  },
  {
    "line": 74,
    "text": "    @abc.abstractmethod",
    "annotation": "\u2705 Best Practice: Docstring provides clear information about the method's purpose and expected return values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      39305,
      13,
      397,
      8709,
      24396
    ],
    "start_token": 996,
    "end_token": 1005,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      1321,
      546,
      262,
      2446,
      338,
      4007,
      290,
      2938,
      1441,
      3815
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear information about the method's purpose and expected return values"
  },
  {
    "line": 80,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Method raises NotImplementedError, which is a placeholder and should be implemented to avoid runtime errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1005,
    "end_token": 1013,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11789,
      12073,
      1892,
      3546,
      1154,
      12061,
      12331,
      11,
      543,
      318,
      257,
      46076,
      290,
      815,
      307,
      9177,
      284,
      3368,
      19124,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Method raises NotImplementedError, which is a placeholder and should be implemented to avoid runtime errors"
  },
  {
    "line": 89,
    "text": "            index code",
    "annotation": "\u2705 Best Practice: Check if 'self.freq' is defined and used correctly",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6376,
      2438
    ],
    "start_token": 1013,
    "end_token": 1026,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      705,
      944,
      13,
      19503,
      80,
      6,
      318,
      5447,
      290,
      973,
      9380
    ],
    "label": "best_practice",
    "reason": "Check if 'self.freq' is defined and used correctly"
  },
  {
    "line": 90,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use apply with lambda for concise transformation of DataFrame columns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1026,
    "end_token": 1034,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4174,
      351,
      37456,
      329,
      35327,
      13389,
      286,
      6060,
      19778,
      15180
    ],
    "label": "best_practice",
    "reason": "Use apply with lambda for concise transformation of DataFrame columns"
  },
  {
    "line": 96,
    "text": "",
    "annotation": "\u2705 Best Practice: Use apply with lambda for concise transformation of DataFrame columns",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1034,
    "end_token": 1034,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4174,
      351,
      37456,
      329,
      35327,
      13389,
      286,
      6060,
      19778,
      15180
    ],
    "label": "best_practice",
    "reason": "Use apply with lambda for concise transformation of DataFrame columns"
  },
  {
    "line": 98,
    "text": "        CSI100: 1",
    "annotation": "\ud83e\udde0 ML Signal: Returns a DataFrame, indicating a transformation pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49911,
      3064,
      25,
      352
    ],
    "start_token": 1034,
    "end_token": 1045,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      257,
      6060,
      19778,
      11,
      12739,
      257,
      13389,
      3912
    ],
    "label": "ml_signal",
    "reason": "Returns a DataFrame, indicating a transformation pattern"
  },
  {
    "line": 110,
    "text": "",
    "annotation": "\u2705 Best Practice: Logging the start of a process helps in debugging and tracking execution flow.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1045,
    "end_token": 1045,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      262,
      923,
      286,
      257,
      1429,
      5419,
      287,
      28769,
      290,
      9646,
      9706,
      5202,
      13
    ],
    "label": "best_practice",
    "reason": "Logging the start of a process helps in debugging and tracking execution flow."
  },
  {
    "line": 113,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over URLs to fetch data is a common pattern in web scraping tasks.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1045,
    "end_token": 1045,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      32336,
      284,
      21207,
      1366,
      318,
      257,
      2219,
      3912,
      287,
      3992,
      46743,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over URLs to fetch data is a common pattern in web scraping tasks."
  },
  {
    "line": 115,
    "text": "        if self.freq != \"day\":",
    "annotation": "\ud83e\udde0 ML Signal: Reading data from a URL is a common pattern in data ingestion tasks.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2116,
      13,
      19503,
      80,
      14512,
      366,
      820,
      1298
    ],
    "start_token": 1045,
    "end_token": 1061,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11725,
      1366,
      422,
      257,
      10289,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      38382,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Reading data from a URL is a common pattern in data ingestion tasks."
  },
  {
    "line": 119,
    "text": "            inst_df[self.END_DATE_FIELD] = inst_df[self.END_DATE_FIELD].apply(",
    "annotation": "\u2705 Best Practice: Logging the end of a process helps in debugging and tracking execution flow.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      916,
      62,
      7568,
      58,
      944,
      13,
      10619,
      62,
      35,
      6158,
      62,
      44603,
      60,
      796,
      916,
      62,
      7568,
      58,
      944,
      13,
      10619,
      62,
      35,
      6158,
      62,
      44603,
      4083,
      39014,
      7
    ],
    "start_token": 1061,
    "end_token": 1101,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      262,
      886,
      286,
      257,
      1429,
      5419,
      287,
      28769,
      290,
      9646,
      9706,
      5202,
      13
    ],
    "label": "best_practice",
    "reason": "Logging the end of a process helps in debugging and tracking execution flow."
  },
  {
    "line": 120,
    "text": "                lambda x: (pd.Timestamp(x) + pd.Timedelta(hours=15, minutes=0)).strftime(\"%Y-%m-%d %H:%M:%S\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using pd.concat without specifying axis or handling duplicates can lead to unexpected results.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37456,
      2124,
      25,
      357,
      30094,
      13,
      14967,
      27823,
      7,
      87,
      8,
      1343,
      279,
      67,
      13,
      14967,
      276,
      12514,
      7,
      24425,
      28,
      1314,
      11,
      2431,
      28,
      15,
      29720,
      2536,
      31387,
      7203,
      4,
      56,
      12,
      4,
      76,
      12,
      4,
      67,
      4064,
      39,
      25,
      4,
      44,
      25,
      4,
      50,
      4943
    ],
    "start_token": 1101,
    "end_token": 1163,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      279,
      67,
      13,
      1102,
      9246,
      1231,
      31577,
      16488,
      393,
      9041,
      14184,
      16856,
      460,
      1085,
      284,
      10059,
      2482,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using pd.concat without specifying axis or handling duplicates can lead to unexpected results."
  },
  {
    "line": 120,
    "text": "                lambda x: (pd.Timestamp(x) + pd.Timedelta(hours=15, minutes=0)).strftime(\"%Y-%m-%d %H:%M:%S\")",
    "annotation": "\u2705 Best Practice: Docstring provides clear documentation of parameters and return value",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37456,
      2124,
      25,
      357,
      30094,
      13,
      14967,
      27823,
      7,
      87,
      8,
      1343,
      279,
      67,
      13,
      14967,
      276,
      12514,
      7,
      24425,
      28,
      1314,
      11,
      2431,
      28,
      15,
      29720,
      2536,
      31387,
      7203,
      4,
      56,
      12,
      4,
      76,
      12,
      4,
      67,
      4064,
      39,
      25,
      4,
      44,
      25,
      4,
      50,
      4943
    ],
    "start_token": 1163,
    "end_token": 1225,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      1598,
      10314,
      286,
      10007,
      290,
      1441,
      1988
    ],
    "label": "best_practice",
    "reason": "Docstring provides clear documentation of parameters and return value"
  },
  {
    "line": 130,
    "text": "                symbol      date        type",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential ValueError if symbol is not a valid integer string",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      220,
      220,
      220,
      220,
      220,
      3128,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2099
    ],
    "start_token": 1225,
    "end_token": 1255,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      11052,
      12331,
      611,
      6194,
      318,
      407,
      257,
      4938,
      18253,
      4731
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential ValueError if symbol is not a valid integer string"
  },
  {
    "line": 132,
    "text": "                SH600000  2020-11-10    remove",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on string prefixes",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6006,
      8054,
      830,
      220,
      12131,
      12,
      1157,
      12,
      940,
      220,
      220,
      220,
      4781
    ],
    "start_token": 1255,
    "end_token": 1283,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      4731,
      21231,
      274
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on string prefixes"
  },
  {
    "line": 132,
    "text": "                SH600000  2020-11-10    remove",
    "annotation": "\ud83e\udde0 ML Signal: Usage of retry_request indicates handling of network requests and potential transient errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6006,
      8054,
      830,
      220,
      12131,
      12,
      1157,
      12,
      940,
      220,
      220,
      220,
      4781
    ],
    "start_token": 1283,
    "end_token": 1311,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1005,
      563,
      62,
      25927,
      9217,
      9041,
      286,
      3127,
      7007,
      290,
      2785,
      32361,
      8563,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of retry_request indicates handling of network requests and potential transient errors."
  },
  {
    "line": 134,
    "text": "                symbol: str",
    "annotation": "\ud83e\udde0 ML Signal: Usage of BytesIO for in-memory byte stream handling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      25,
      965
    ],
    "start_token": 1311,
    "end_token": 1329,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2750,
      4879,
      9399,
      329,
      287,
      12,
      31673,
      18022,
      4269,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of BytesIO for in-memory byte stream handling."
  },
  {
    "line": 135,
    "text": "                date: pd.Timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Reading Excel files with pandas, indicating data processing from spreadsheets.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3128,
      25,
      279,
      67,
      13,
      14967,
      27823
    ],
    "start_token": 1329,
    "end_token": 1351,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11725,
      24134,
      3696,
      351,
      19798,
      292,
      11,
      12739,
      1366,
      7587,
      422,
      4104,
      42011,
      13
    ],
    "label": "ml_signal",
    "reason": "Reading Excel files with pandas, indicating data processing from spreadsheets."
  },
  {
    "line": 138,
    "text": "        logger.info(\"get companies changes......\")",
    "annotation": "\u2705 Best Practice: Using context manager for file operations ensures proper resource management.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7203,
      1136,
      2706,
      2458,
      16317,
      4943
    ],
    "start_token": 1351,
    "end_token": 1367,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      4732,
      4706,
      329,
      2393,
      4560,
      19047,
      1774,
      8271,
      4542,
      13
    ],
    "label": "best_practice",
    "reason": "Using context manager for file operations ensures proper resource management."
  },
  {
    "line": 142,
    "text": "            if not _df.empty:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Writing content to a file without validation could lead to security risks if content is untrusted.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      407,
      4808,
      7568,
      13,
      28920,
      25
    ],
    "start_token": 1367,
    "end_token": 1385,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      22183,
      2695,
      284,
      257,
      2393,
      1231,
      21201,
      714,
      1085,
      284,
      2324,
      7476,
      611,
      2695,
      318,
      1418,
      81,
      8459,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Writing content to a file without validation could lead to security risks if content is untrusted."
  },
  {
    "line": 145,
    "text": "        return pd.concat(res, sort=False)",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a list of tuples to process different types of data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      1102,
      9246,
      7,
      411,
      11,
      3297,
      28,
      25101,
      8
    ],
    "start_token": 1385,
    "end_token": 1405,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      1351,
      286,
      12777,
      2374,
      284,
      1429,
      1180,
      3858,
      286,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a list of tuples to process different types of data."
  },
  {
    "line": 147,
    "text": "    @staticmethod",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Accessing dictionary keys without checking existence could lead to KeyError.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      12708,
      24396
    ],
    "start_token": 1405,
    "end_token": 1411,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8798,
      278,
      22155,
      8251,
      1231,
      10627,
      6224,
      714,
      1085,
      284,
      7383,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Accessing dictionary keys without checking existence could lead to KeyError."
  },
  {
    "line": 149,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Filtering DataFrame based on specific conditions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1411,
    "end_token": 1419,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7066,
      20212,
      6060,
      19778,
      1912,
      319,
      2176,
      3403,
      13
    ],
    "label": "ml_signal",
    "reason": "Filtering DataFrame based on specific conditions."
  },
  {
    "line": 151,
    "text": "        Parameters",
    "annotation": "\ud83e\udde0 ML Signal: Applying a function to DataFrame elements, indicating data transformation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 1419,
    "end_token": 1427,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      3157,
      257,
      2163,
      284,
      6060,
      19778,
      4847,
      11,
      12739,
      1366,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Applying a function to DataFrame elements, indicating data transformation."
  },
  {
    "line": 153,
    "text": "        symbol: str",
    "annotation": "\u2705 Best Practice: Renaming DataFrame columns for clarity and consistency.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      25,
      965
    ],
    "start_token": 1427,
    "end_token": 1437,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      3723,
      6060,
      19778,
      15180,
      329,
      16287,
      290,
      15794,
      13
    ],
    "label": "best_practice",
    "reason": "Renaming DataFrame columns for clarity and consistency."
  },
  {
    "line": 157,
    "text": "        -------",
    "annotation": "\ud83e\udde0 ML Signal: Appending DataFrames to a list for later concatenation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 1437,
    "end_token": 1445,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      6060,
      35439,
      284,
      257,
      1351,
      329,
      1568,
      1673,
      36686,
      341,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending DataFrames to a list for later concatenation."
  },
  {
    "line": 159,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Concatenating multiple DataFrames into one, indicating data aggregation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1445,
    "end_token": 1453,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      1482,
      9246,
      268,
      803,
      3294,
      6060,
      35439,
      656,
      530,
      11,
      12739,
      1366,
      46500,
      13
    ],
    "label": "ml_signal",
    "reason": "Concatenating multiple DataFrames into one, indicating data aggregation."
  },
  {
    "line": 153,
    "text": "        symbol: str",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over HTML tables in content",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      25,
      965
    ],
    "start_token": 1453,
    "end_token": 1463,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      11532,
      8893,
      287,
      2695
    ],
    "label": "ml_signal",
    "reason": "Iterating over HTML tables in content"
  },
  {
    "line": 155,
    "text": "",
    "annotation": "\u2705 Best Practice: Check for expected number of columns and non-null values",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1463,
    "end_token": 1463,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      2938,
      1271,
      286,
      15180,
      290,
      1729,
      12,
      8423,
      3815
    ],
    "label": "best_practice",
    "reason": "Check for expected number of columns and non-null values"
  },
  {
    "line": 159,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Ensure the correct table index is processed",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1463,
    "end_token": 1471,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      262,
      3376,
      3084,
      6376,
      318,
      13686
    ],
    "label": "best_practice",
    "reason": "Ensure the correct table index is processed"
  },
  {
    "line": 164,
    "text": "        content = retry_request(excel_url, exclude_status=[404]).content",
    "annotation": "\ud83e\udde0 ML Signal: Processing specific columns for removal and addition",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2695,
      796,
      1005,
      563,
      62,
      25927,
      7,
      1069,
      5276,
      62,
      6371,
      11,
      19607,
      62,
      13376,
      41888,
      26429,
      35944,
      11299
    ],
    "start_token": 1471,
    "end_token": 1497,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28403,
      2176,
      15180,
      329,
      9934,
      290,
      3090
    ],
    "label": "ml_signal",
    "reason": "Processing specific columns for removal and addition"
  },
  {
    "line": 169,
    "text": "        ).open(\"wb\") as fp:",
    "annotation": "\ud83e\udde0 ML Signal: Mapping symbols to a normalized form",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6739,
      9654,
      7203,
      39346,
      4943,
      355,
      277,
      79,
      25
    ],
    "start_token": 1497,
    "end_token": 1513,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      14354,
      284,
      257,
      39279,
      1296
    ],
    "label": "ml_signal",
    "reason": "Mapping symbols to a normalized form"
  },
  {
    "line": 177,
    "text": "            _df[\"type\"] = _type",
    "annotation": "\u2705 Best Practice: Use pd.concat to combine DataFrames",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      7568,
      14692,
      4906,
      8973,
      796,
      4808,
      4906
    ],
    "start_token": 1513,
    "end_token": 1532,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      279,
      67,
      13,
      1102,
      9246,
      284,
      12082,
      6060,
      35439
    ],
    "label": "best_practice",
    "reason": "Use pd.concat to combine DataFrames"
  },
  {
    "line": 177,
    "text": "            _df[\"type\"] = _type",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential file path manipulation vulnerability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      7568,
      14692,
      4906,
      8973,
      796,
      4808,
      4906
    ],
    "start_token": 1532,
    "end_token": 1551,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2393,
      3108,
      17512,
      15131
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential file path manipulation vulnerability"
  },
  {
    "line": 202,
    "text": "            df = pd.concat(tmp)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for HTTP request to fail or be intercepted, ensure retry_request is secure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      1102,
      9246,
      7,
      22065,
      8
    ],
    "start_token": 1551,
    "end_token": 1572,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      14626,
      2581,
      284,
      2038,
      393,
      307,
      29842,
      11,
      4155,
      1005,
      563,
      62,
      25927,
      318,
      5713
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for HTTP request to fail or be intercepted, ensure retry_request is secure"
  },
  {
    "line": 209,
    "text": "            )",
    "annotation": "\u2705 Best Practice: Use logging for important information, aids in debugging and monitoring",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1572,
    "end_token": 1584,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      329,
      1593,
      1321,
      11,
      31378,
      287,
      28769,
      290,
      9904
    ],
    "label": "best_practice",
    "reason": "Use logging for important information, aids in debugging and monitoring"
  },
  {
    "line": 212,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Regular expression usage can indicate pattern matching behavior",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1584,
    "end_token": 1584,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23603,
      5408,
      8748,
      460,
      7603,
      3912,
      12336,
      4069
    ],
    "label": "ml_signal",
    "reason": "Regular expression usage can indicate pattern matching behavior"
  },
  {
    "line": 217,
    "text": "        The response contains three cases:",
    "annotation": "\ud83e\udde0 ML Signal: Regular expression usage can indicate pattern matching behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      383,
      2882,
      4909,
      1115,
      2663,
      25
    ],
    "start_token": 1584,
    "end_token": 1597,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23603,
      5408,
      8748,
      460,
      7603,
      3912,
      12336,
      4069
    ],
    "label": "ml_signal",
    "reason": "Regular expression usage can indicate pattern matching behavior"
  },
  {
    "line": 227,
    "text": "        Returns",
    "annotation": "\ud83e\udde0 ML Signal: Regular expression usage can indicate pattern matching behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409
    ],
    "start_token": 1597,
    "end_token": 1605,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23603,
      5408,
      8748,
      460,
      7603,
      3912,
      12336,
      4069
    ],
    "label": "ml_signal",
    "reason": "Regular expression usage can indicate pattern matching behavior"
  },
  {
    "line": 237,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use logging for important information, aids in debugging and monitoring",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1605,
    "end_token": 1613,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      329,
      1593,
      1321,
      11,
      31378,
      287,
      28769,
      290,
      9904
    ],
    "label": "best_practice",
    "reason": "Use logging for important information, aids in debugging and monitoring"
  },
  {
    "line": 239,
    "text": "        title = resp[\"title\"]",
    "annotation": "\u2705 Best Practice: Use logging for important information, aids in debugging and monitoring",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3670,
      796,
      1217,
      14692,
      7839,
      8973
    ],
    "start_token": 1613,
    "end_token": 1626,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      329,
      1593,
      1321,
      11,
      31378,
      287,
      28769,
      290,
      9904
    ],
    "label": "best_practice",
    "reason": "Use logging for important information, aids in debugging and monitoring"
  },
  {
    "line": 245,
    "text": "        logger.info(f\"load index data from https://www.csindex.com.cn/#/about/newsDetail?id={url.split('id=')[-1]}\")",
    "annotation": "\u2705 Best Practice: Use logging for important information, aids in debugging and monitoring",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      2220,
      6376,
      1366,
      422,
      3740,
      1378,
      2503,
      13,
      6359,
      9630,
      13,
      785,
      13,
      31522,
      31113,
      14,
      10755,
      14,
      10827,
      11242,
      603,
      30,
      312,
      34758,
      6371,
      13,
      35312,
      10786,
      312,
      28,
      11537,
      58,
      12,
      16,
      48999,
      4943
    ],
    "start_token": 1626,
    "end_token": 1675,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      18931,
      329,
      1593,
      1321,
      11,
      31378,
      287,
      28769,
      290,
      9904
    ],
    "label": "best_practice",
    "reason": "Use logging for important information, aids in debugging and monitoring"
  },
  {
    "line": 252,
    "text": "            add_date = get_trading_date_by_shift(self.calendar_list, _date, shift=0)",
    "annotation": "\u2705 Best Practice: Use of retry_request suggests handling of network errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      751,
      62,
      4475,
      796,
      651,
      62,
      2213,
      4980,
      62,
      4475,
      62,
      1525,
      62,
      30846,
      7,
      944,
      13,
      9948,
      9239,
      62,
      4868,
      11,
      4808,
      4475,
      11,
      6482,
      28,
      15,
      8
    ],
    "start_token": 1675,
    "end_token": 1715,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1005,
      563,
      62,
      25927,
      5644,
      9041,
      286,
      3127,
      8563
    ],
    "label": "best_practice",
    "reason": "Use of retry_request suggests handling of network errors"
  },
  {
    "line": 254,
    "text": "            add_date = get_trading_date_by_shift(self.calendar_list, add_date, shift=1)",
    "annotation": "\u2705 Best Practice: Re-fetching with total count ensures all data is retrieved",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      751,
      62,
      4475,
      796,
      651,
      62,
      2213,
      4980,
      62,
      4475,
      62,
      1525,
      62,
      30846,
      7,
      944,
      13,
      9948,
      9239,
      62,
      4868,
      11,
      751,
      62,
      4475,
      11,
      6482,
      28,
      16,
      8
    ],
    "start_token": 1715,
    "end_token": 1756,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      797,
      12,
      69,
      7569,
      278,
      351,
      2472,
      954,
      19047,
      477,
      1366,
      318,
      29517
    ],
    "label": "best_practice",
    "reason": "Re-fetching with total count ensures all data is retrieved"
  },
  {
    "line": 257,
    "text": "        excel_url = None",
    "annotation": "\ud83e\udde0 ML Signal: URL construction pattern for accessing specific resources",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      27336,
      62,
      6371,
      796,
      6045
    ],
    "start_token": 1756,
    "end_token": 1768,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      5103,
      3912,
      329,
      22534,
      2176,
      4133
    ],
    "label": "ml_signal",
    "reason": "URL construction pattern for accessing specific resources"
  },
  {
    "line": 269,
    "text": "                logger.info(f\"get {add_date} changes from the excel, title={title}, excel_url={excel_url}\")",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7,
      69,
      1,
      1136,
      1391,
      2860,
      62,
      4475,
      92,
      2458,
      422,
      262,
      27336,
      11,
      3670,
      34758,
      7839,
      5512,
      27336,
      62,
      6371,
      34758,
      1069,
      5276,
      62,
      6371,
      92,
      4943
    ],
    "start_token": 1768,
    "end_token": 1814,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern"
  },
  {
    "line": 270,
    "text": "                df = self._parse_excel(excel_url, add_date, remove_date)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if `self.new_companies_url` is user-controlled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      2116,
      13557,
      29572,
      62,
      1069,
      5276,
      7,
      1069,
      5276,
      62,
      6371,
      11,
      751,
      62,
      4475,
      11,
      4781,
      62,
      4475,
      8
    ],
    "start_token": 1814,
    "end_token": 1851,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      4600,
      944,
      13,
      3605,
      62,
      34390,
      444,
      62,
      6371,
      63,
      318,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if `self.new_companies_url` is user-controlled"
  },
  {
    "line": 276,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Writing to file system, ensure `self.cache_dir` is secure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1851,
    "end_token": 1860,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      22183,
      284,
      2393,
      1080,
      11,
      4155,
      4600,
      944,
      13,
      23870,
      62,
      15908,
      63,
      318,
      5713
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Writing to file system, ensure `self.cache_dir` is secure"
  },
  {
    "line": 279,
    "text": "            )",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure the content is a valid Excel file to prevent parsing errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 1860,
    "end_token": 1872,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      262,
      2695,
      318,
      257,
      4938,
      24134,
      2393,
      284,
      2948,
      32096,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure the content is a valid Excel file to prevent parsing errors"
  },
  {
    "line": 283,
    "text": "    def _get_change_notices_url(self) -> Iterable[str]:",
    "annotation": "\u2705 Best Practice: Use map for applying a function to a Series",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      1136,
      62,
      3803,
      62,
      1662,
      1063,
      62,
      6371,
      7,
      944,
      8,
      4613,
      40806,
      540,
      58,
      2536,
      5974
    ],
    "start_token": 1872,
    "end_token": 1894,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      3975,
      329,
      11524,
      257,
      2163,
      284,
      257,
      7171
    ],
    "label": "best_practice",
    "reason": "Use map for applying a function to a Series"
  },
  {
    "line": 285,
    "text": "",
    "annotation": "\u2705 Best Practice: Convert to string before datetime conversion to handle various formats",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1894,
    "end_token": 1894,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      284,
      4731,
      878,
      4818,
      8079,
      11315,
      284,
      5412,
      2972,
      17519
    ],
    "label": "best_practice",
    "reason": "Convert to string before datetime conversion to handle various formats"
  },
  {
    "line": 288,
    "text": "            [url1, url2]",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      685,
      6371,
      16,
      11,
      19016,
      17,
      60
    ],
    "start_token": 1894,
    "end_token": 1912,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern"
  },
  {
    "line": 283,
    "text": "    def _get_change_notices_url(self) -> Iterable[str]:",
    "annotation": "\u2705 Best Practice: Using @property decorator to define a read-only attribute",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      4808,
      1136,
      62,
      3803,
      62,
      1662,
      1063,
      62,
      6371,
      7,
      944,
      8,
      4613,
      40806,
      540,
      58,
      2536,
      5974
    ],
    "start_token": 1912,
    "end_token": 1934,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2488,
      26745,
      11705,
      1352,
      284,
      8160,
      257,
      1100,
      12,
      8807,
      11688
    ],
    "label": "best_practice",
    "reason": "Using @property decorator to define a read-only attribute"
  },
  {
    "line": 286,
    "text": "        Returns",
    "annotation": "\ud83e\udde0 ML Signal: Accessing class attribute through a property method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409
    ],
    "start_token": 1934,
    "end_token": 1942,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      1398,
      11688,
      832,
      257,
      3119,
      2446
    ],
    "label": "ml_signal",
    "reason": "Accessing class attribute through a property method"
  },
  {
    "line": 289,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Using @property decorator to define a read-only attribute",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 1942,
    "end_token": 1950,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2488,
      26745,
      11705,
      1352,
      284,
      8160,
      257,
      1100,
      12,
      8807,
      11688
    ],
    "label": "best_practice",
    "reason": "Using @property decorator to define a read-only attribute"
  },
  {
    "line": 292,
    "text": "        data = retry_request(self.changes_url.format(page_size=page_size, page_num=page_num)).json()",
    "annotation": "\ud83e\udde0 ML Signal: Accessing class attribute through a property method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1005,
      563,
      62,
      25927,
      7,
      944,
      13,
      36653,
      62,
      6371,
      13,
      18982,
      7,
      7700,
      62,
      7857,
      28,
      7700,
      62,
      7857,
      11,
      2443,
      62,
      22510,
      28,
      7700,
      62,
      22510,
      29720,
      17752,
      3419
    ],
    "start_token": 1950,
    "end_token": 1990,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      1398,
      11688,
      832,
      257,
      3119,
      2446
    ],
    "label": "ml_signal",
    "reason": "Accessing class attribute through a property method"
  },
  {
    "line": 296,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure stock_prices is validated to prevent incorrect calculations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1990,
    "end_token": 1990,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      4283,
      62,
      1050,
      1063,
      318,
      31031,
      284,
      2948,
      11491,
      16765
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure stock_prices is validated to prevent incorrect calculations"
  },
  {
    "line": 296,
    "text": "",
    "annotation": "\u2705 Best Practice: Method to perform calculations on input data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1990,
    "end_token": 1990,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      284,
      1620,
      16765,
      319,
      5128,
      1366
    ],
    "label": "best_practice",
    "reason": "Method to perform calculations on input data"
  },
  {
    "line": 299,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a collection to perform calculations",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1990,
    "end_token": 1990,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      4947,
      284,
      1620,
      16765
    ],
    "label": "ml_signal",
    "reason": "Iterating over a collection to perform calculations"
  },
  {
    "line": 301,
    "text": "        -------",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure stock has 'price' and 'shares' attributes to avoid AttributeError",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 1990,
    "end_token": 1998,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      4283,
      468,
      705,
      20888,
      6,
      290,
      705,
      1477,
      3565,
      6,
      12608,
      284,
      3368,
      3460,
      4163,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure stock has 'price' and 'shares' attributes to avoid AttributeError"
  },
  {
    "line": 303,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Returning calculated value from a method",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1998,
    "end_token": 1998,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      10488,
      1988,
      422,
      257,
      2446
    ],
    "label": "ml_signal",
    "reason": "Returning calculated value from a method"
  },
  {
    "line": 306,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure stock_prices is validated to prevent incorrect operations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1998,
    "end_token": 1998,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      4283,
      62,
      1050,
      1063,
      318,
      31031,
      284,
      2948,
      11491,
      4560
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure stock_prices is validated to prevent incorrect operations"
  },
  {
    "line": 308,
    "text": "                symbol: str",
    "annotation": "\u2705 Best Practice: Method to filter and sort data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      25,
      965
    ],
    "start_token": 1998,
    "end_token": 2016,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      284,
      8106,
      290,
      3297,
      1366
    ],
    "label": "best_practice",
    "reason": "Method to filter and sort data"
  },
  {
    "line": 309,
    "text": "                start_date: pd.Timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Sorting and slicing a collection to get top elements",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      4475,
      25,
      279,
      67,
      13,
      14967,
      27823
    ],
    "start_token": 2016,
    "end_token": 2040,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      24707,
      290,
      49289,
      257,
      4947,
      284,
      651,
      1353,
      4847
    ],
    "label": "ml_signal",
    "reason": "Sorting and slicing a collection to get top elements"
  },
  {
    "line": 311,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Returning a subset of a collection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2040,
    "end_token": 2048,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      24637,
      286,
      257,
      4947
    ],
    "label": "ml_signal",
    "reason": "Returning a subset of a collection"
  },
  {
    "line": 286,
    "text": "        Returns",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a hardcoded value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16409
    ],
    "start_token": 2048,
    "end_token": 2056,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      1327,
      40976,
      1988
    ],
    "label": "ml_signal",
    "reason": "Method returning a hardcoded value"
  },
  {
    "line": 289,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Use of pd.Timestamp for date handling ensures consistency and compatibility with pandas operations.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2056,
    "end_token": 2064,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      14967,
      27823,
      329,
      3128,
      9041,
      19047,
      15794,
      290,
      17764,
      351,
      19798,
      292,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Use of pd.Timestamp for date handling ensures consistency and compatibility with pandas operations."
  },
  {
    "line": 291,
    "text": "        page_size = 5",
    "annotation": "\u2705 Best Practice: Use of type hint for return value improves code readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2443,
      62,
      7857,
      796,
      642
    ],
    "start_token": 2064,
    "end_token": 2076,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hint for return value improves code readability and maintainability"
  },
  {
    "line": 293,
    "text": "        data = retry_request(self.changes_url.format(page_size=data[\"total\"], page_num=page_num)).json()",
    "annotation": "\ud83e\udde0 ML Signal: Consistent return of a fixed value could indicate a placeholder or default implementation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1005,
      563,
      62,
      25927,
      7,
      944,
      13,
      36653,
      62,
      6371,
      13,
      18982,
      7,
      7700,
      62,
      7857,
      28,
      7890,
      14692,
      23350,
      33116,
      2443,
      62,
      22510,
      28,
      7700,
      62,
      22510,
      29720,
      17752,
      3419
    ],
    "start_token": 2076,
    "end_token": 2116,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3515,
      7609,
      1441,
      286,
      257,
      5969,
      1988,
      714,
      7603,
      257,
      46076,
      393,
      4277,
      7822
    ],
    "label": "ml_signal",
    "reason": "Consistent return of a fixed value could indicate a placeholder or default implementation"
  },
  {
    "line": 293,
    "text": "        data = retry_request(self.changes_url.format(page_size=data[\"total\"], page_num=page_num)).json()",
    "annotation": "\u2705 Best Practice: Using @property decorator to define a method as a property for better encapsulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1005,
      563,
      62,
      25927,
      7,
      944,
      13,
      36653,
      62,
      6371,
      13,
      18982,
      7,
      7700,
      62,
      7857,
      28,
      7890,
      14692,
      23350,
      33116,
      2443,
      62,
      22510,
      28,
      7700,
      62,
      22510,
      29720,
      17752,
      3419
    ],
    "start_token": 2116,
    "end_token": 2156,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      2488,
      26745,
      11705,
      1352,
      284,
      8160,
      257,
      2446,
      355,
      257,
      3119,
      329,
      1365,
      32652,
      1741
    ],
    "label": "best_practice",
    "reason": "Using @property decorator to define a method as a property for better encapsulation"
  },
  {
    "line": 296,
    "text": "",
    "annotation": "\u2705 Best Practice: Using a property to provide a read-only attribute",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2156,
    "end_token": 2156,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      257,
      3119,
      284,
      2148,
      257,
      1100,
      12,
      8807,
      11688
    ],
    "label": "best_practice",
    "reason": "Using a property to provide a read-only attribute"
  },
  {
    "line": 299,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method for calculating index from stock prices, useful for financial modeling",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2156,
    "end_token": 2156,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      26019,
      6376,
      422,
      4283,
      4536,
      11,
      4465,
      329,
      3176,
      21128
    ],
    "label": "ml_signal",
    "reason": "Method for calculating index from stock prices, useful for financial modeling"
  },
  {
    "line": 301,
    "text": "        -------",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure stock_prices is validated to prevent incorrect calculations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 2156,
    "end_token": 2164,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      4283,
      62,
      1050,
      1063,
      318,
      31031,
      284,
      2948,
      11491,
      16765
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure stock_prices is validated to prevent incorrect calculations"
  },
  {
    "line": 303,
    "text": "",
    "annotation": "\u2705 Best Practice: Checking for empty input to prevent errors",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2164,
    "end_token": 2164,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      6565,
      5128,
      284,
      2948,
      8563
    ],
    "label": "best_practice",
    "reason": "Checking for empty input to prevent errors"
  },
  {
    "line": 308,
    "text": "                symbol: str",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure price is a valid number to prevent calculation errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      25,
      965
    ],
    "start_token": 2164,
    "end_token": 2182,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      2756,
      318,
      257,
      4938,
      1271,
      284,
      2948,
      17952,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure price is a valid number to prevent calculation errors"
  },
  {
    "line": 311,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Using len() to calculate average, assuming stock_prices is a list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2182,
    "end_token": 2190,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      18896,
      3419,
      284,
      15284,
      2811,
      11,
      13148,
      4283,
      62,
      1050,
      1063,
      318,
      257,
      1351
    ],
    "label": "best_practice",
    "reason": "Using len() to calculate average, assuming stock_prices is a list"
  },
  {
    "line": 311,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Method for retrieving top stocks, useful for portfolio optimization",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2190,
    "end_token": 2198,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      50122,
      1353,
      14420,
      11,
      4465,
      329,
      15320,
      23989
    ],
    "label": "ml_signal",
    "reason": "Method for retrieving top stocks, useful for portfolio optimization"
  },
  {
    "line": 311,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure stock_data is validated to prevent incorrect data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2198,
    "end_token": 2206,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      4283,
      62,
      7890,
      318,
      31031,
      284,
      2948,
      11491,
      1366,
      7587
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure stock_data is validated to prevent incorrect data processing"
  },
  {
    "line": 311,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Default parameter value for top_n improves function usability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2206,
    "end_token": 2214,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15161,
      11507,
      1988,
      329,
      1353,
      62,
      77,
      19575,
      2163,
      42863
    ],
    "label": "best_practice",
    "reason": "Default parameter value for top_n improves function usability"
  },
  {
    "line": 323,
    "text": "        df[self.END_DATE_FIELD] = pd.to_datetime(df[self.END_DATE_FIELD].astype(str))",
    "annotation": "\u2705 Best Practice: Using sorted() with a key function for clarity and efficiency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      58,
      944,
      13,
      10619,
      62,
      35,
      6158,
      62,
      44603,
      60,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      7568,
      58,
      944,
      13,
      10619,
      62,
      35,
      6158,
      62,
      44603,
      4083,
      459,
      2981,
      7,
      2536,
      4008
    ],
    "start_token": 2214,
    "end_token": 2257,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      23243,
      3419,
      351,
      257,
      1994,
      2163,
      329,
      16287,
      290,
      9332
    ],
    "label": "best_practice",
    "reason": "Using sorted() with a key function for clarity and efficiency"
  },
  {
    "line": 296,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method returning a hardcoded value",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2257,
    "end_token": 2257,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      8024,
      257,
      1327,
      40976,
      1988
    ],
    "label": "ml_signal",
    "reason": "Method returning a hardcoded value"
  },
  {
    "line": 299,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of @property decorator for getter method",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2257,
    "end_token": 2257,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      329,
      651,
      353,
      2446
    ],
    "label": "best_practice",
    "reason": "Use of @property decorator for getter method"
  },
  {
    "line": 299,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hinting for return type improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2257,
    "end_token": 2257,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      278,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hinting for return type improves code readability and maintainability."
  },
  {
    "line": 302,
    "text": "            pd.DataFrame:",
    "annotation": "\u2705 Best Practice: Use of @property decorator for defining a method as a property, enhancing encapsulation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 2257,
    "end_token": 2274,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      329,
      16215,
      257,
      2446,
      355,
      257,
      3119,
      11,
      27496,
      32652,
      1741,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @property decorator for defining a method as a property, enhancing encapsulation."
  },
  {
    "line": 301,
    "text": "        -------",
    "annotation": "\u2705 Best Practice: Method should have a docstring explaining its purpose",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 2274,
    "end_token": 2282,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      815,
      423,
      257,
      2205,
      8841,
      11170,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Method should have a docstring explaining its purpose"
  },
  {
    "line": 303,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider using a constant or named variable for the return value for clarity",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2282,
    "end_token": 2282,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      6937,
      393,
      3706,
      7885,
      329,
      262,
      1441,
      1988,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Consider using a constant or named variable for the return value for clarity"
  },
  {
    "line": 305,
    "text": "                SH600000   2000-01-01    2099-12-31",
    "annotation": "\u2705 Best Practice: Use of @property decorator for getter method to provide a read-only attribute",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6006,
      8054,
      830,
      220,
      220,
      4751,
      12,
      486,
      12,
      486,
      220,
      220,
      220,
      1160,
      2079,
      12,
      1065,
      12,
      3132
    ],
    "start_token": 2282,
    "end_token": 2316,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      329,
      651,
      353,
      2446,
      284,
      2148,
      257,
      1100,
      12,
      8807,
      11688
    ],
    "label": "best_practice",
    "reason": "Use of @property decorator for getter method to provide a read-only attribute"
  },
  {
    "line": 310,
    "text": "                end_date: pd.Timestamp",
    "annotation": "\u2705 Best Practice: Use of @property decorator for getter method to provide a read-only attribute",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      4475,
      25,
      279,
      67,
      13,
      14967,
      27823
    ],
    "start_token": 2316,
    "end_token": 2340,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      329,
      651,
      353,
      2446,
      284,
      2148,
      257,
      1100,
      12,
      8807,
      11688
    ],
    "label": "best_practice",
    "reason": "Use of @property decorator for getter method to provide a read-only attribute"
  },
  {
    "line": 311,
    "text": "        \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Function that processes stock prices, useful for financial data analysis models",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2340,
    "end_token": 2348,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      326,
      7767,
      4283,
      4536,
      11,
      4465,
      329,
      3176,
      1366,
      3781,
      4981
    ],
    "label": "ml_signal",
    "reason": "Function that processes stock prices, useful for financial data analysis models"
  },
  {
    "line": 311,
    "text": "        \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure stock_prices is validated to prevent incorrect calculations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2348,
    "end_token": 2356,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      4283,
      62,
      1050,
      1063,
      318,
      31031,
      284,
      2948,
      11491,
      16765
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure stock_prices is validated to prevent incorrect calculations"
  },
  {
    "line": 323,
    "text": "        df[self.END_DATE_FIELD] = pd.to_datetime(df[self.END_DATE_FIELD].astype(str))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Handling of empty input, but could be more explicit with error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      58,
      944,
      13,
      10619,
      62,
      35,
      6158,
      62,
      44603,
      60,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      7568,
      58,
      944,
      13,
      10619,
      62,
      35,
      6158,
      62,
      44603,
      4083,
      459,
      2981,
      7,
      2536,
      4008
    ],
    "start_token": 2356,
    "end_token": 2399,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      49500,
      286,
      6565,
      5128,
      11,
      475,
      714,
      307,
      517,
      7952,
      351,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Handling of empty input, but could be more explicit with error handling"
  },
  {
    "line": 323,
    "text": "        df[self.END_DATE_FIELD] = pd.to_datetime(df[self.END_DATE_FIELD].astype(str))",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over stock prices, common pattern in financial computations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      58,
      944,
      13,
      10619,
      62,
      35,
      6158,
      62,
      44603,
      60,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      7568,
      58,
      944,
      13,
      10619,
      62,
      35,
      6158,
      62,
      44603,
      4083,
      459,
      2981,
      7,
      2536,
      4008
    ],
    "start_token": 2399,
    "end_token": 2442,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      4283,
      4536,
      11,
      2219,
      3912,
      287,
      3176,
      2653,
      602
    ],
    "label": "ml_signal",
    "reason": "Iterating over stock prices, common pattern in financial computations"
  },
  {
    "line": 324,
    "text": "        df[self.START_DATE_FIELD] = self.bench_start_date",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes price is a valid number, consider input validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      58,
      944,
      13,
      2257,
      7227,
      62,
      35,
      6158,
      62,
      44603,
      60,
      796,
      2116,
      13,
      26968,
      62,
      9688,
      62,
      4475
    ],
    "start_token": 2442,
    "end_token": 2469,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      2756,
      318,
      257,
      4938,
      1271,
      11,
      2074,
      5128,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes price is a valid number, consider input validation"
  },
  {
    "line": 325,
    "text": "        logger.info(\"end of get new companies.\")",
    "annotation": "\u2705 Best Practice: Avoid division by zero by checking total_market_cap",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7203,
      437,
      286,
      651,
      649,
      2706,
      19570
    ],
    "start_token": 2469,
    "end_token": 2486,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      24390,
      7297,
      416,
      6632,
      416,
      10627,
      2472,
      62,
      10728,
      62,
      11128
    ],
    "label": "best_practice",
    "reason": "Avoid division by zero by checking total_market_cap"
  },
  {
    "line": 325,
    "text": "        logger.info(\"end of get new companies.\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero, handled by returning 0",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      10951,
      7203,
      437,
      286,
      651,
      649,
      2706,
      19570
    ],
    "start_token": 2486,
    "end_token": 2503,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      11,
      12118,
      416,
      8024,
      657
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero, handled by returning 0"
  },
  {
    "line": 337,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of index value, relevant for financial modeling",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2503,
    "end_token": 2503,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      6376,
      1988,
      11,
      5981,
      329,
      3176,
      21128
    ],
    "label": "ml_signal",
    "reason": "Calculation of index value, relevant for financial modeling"
  },
  {
    "line": 306,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of type hint for return value improves code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2503,
    "end_token": 2503,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1441,
      1988,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of type hint for return value improves code readability and maintainability."
  },
  {
    "line": 309,
    "text": "                start_date: pd.Timestamp",
    "annotation": "\u2705 Best Practice: Use of @property decorator for getter method is a Pythonic way to access class attributes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      4475,
      25,
      279,
      67,
      13,
      14967,
      27823
    ],
    "start_token": 2503,
    "end_token": 2527,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2488,
      26745,
      11705,
      1352,
      329,
      651,
      353,
      2446,
      318,
      257,
      11361,
      291,
      835,
      284,
      1895,
      1398,
      12608,
      13
    ],
    "label": "best_practice",
    "reason": "Use of @property decorator for getter method is a Pythonic way to access class attributes."
  },
  {
    "line": 308,
    "text": "                symbol: str",
    "annotation": "\u2705 Best Practice: Use of type hint for return type improves code readability and maintainability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      25,
      965
    ],
    "start_token": 2527,
    "end_token": 2545,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2099,
      9254,
      329,
      1441,
      2099,
      19575,
      2438,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of type hint for return type improves code readability and maintainability"
  },
  {
    "line": 310,
    "text": "                end_date: pd.Timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded date value could indicate a fixed point of interest in time series data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      62,
      4475,
      25,
      279,
      67,
      13,
      14967,
      27823
    ],
    "start_token": 2545,
    "end_token": 2569,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      3128,
      1988,
      714,
      7603,
      257,
      5969,
      966,
      286,
      1393,
      287,
      640,
      2168,
      1366
    ],
    "label": "ml_signal",
    "reason": "Hardcoded date value could indicate a fixed point of interest in time series data"
  },
  {
    "line": 311,
    "text": "        \"\"\"",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the method's purpose and return type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227
    ],
    "start_token": 2569,
    "end_token": 2577,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2446,
      338,
      4007,
      290,
      1441,
      2099
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the method's purpose and return type"
  },
  {
    "line": 324,
    "text": "        df[self.START_DATE_FIELD] = self.bench_start_date",
    "annotation": "\ud83e\udde0 ML Signal: Method chaining and function calls within return statements",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      58,
      944,
      13,
      2257,
      7227,
      62,
      35,
      6158,
      62,
      44603,
      60,
      796,
      2116,
      13,
      26968,
      62,
      9688,
      62,
      4475
    ],
    "start_token": 2577,
    "end_token": 2604,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      442,
      1397,
      290,
      2163,
      3848,
      1626,
      1441,
      6299
    ],
    "label": "ml_signal",
    "reason": "Method chaining and function calls within return statements"
  },
  {
    "line": 337,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure bs.login() handles credentials securely and does not expose sensitive information.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2604,
    "end_token": 2604,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      275,
      82,
      13,
      38235,
      3419,
      17105,
      18031,
      30835,
      290,
      857,
      407,
      15651,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure bs.login() handles credentials securely and does not expose sensitive information."
  },
  {
    "line": 339,
    "text": "    def html_table_index(self) -> int:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of current timestamp to determine the end of a date range.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      27711,
      62,
      11487,
      62,
      9630,
      7,
      944,
      8,
      4613,
      493,
      25
    ],
    "start_token": 2604,
    "end_token": 2619,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1459,
      41033,
      284,
      5004,
      262,
      886,
      286,
      257,
      3128,
      2837,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of current timestamp to determine the end of a date range."
  },
  {
    "line": 341,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of pd.date_range to generate a sequence of dates.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2619,
    "end_token": 2619,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      4475,
      62,
      9521,
      284,
      7716,
      257,
      8379,
      286,
      9667,
      13
    ],
    "label": "best_practice",
    "reason": "Use of pd.date_range to generate a sequence of dates."
  },
  {
    "line": 344,
    "text": "    @property",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a date range with tqdm for progress tracking.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 2619,
    "end_token": 2624,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      3128,
      2837,
      351,
      256,
      80,
      36020,
      329,
      4371,
      9646,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over a date range with tqdm for progress tracking."
  },
  {
    "line": 345,
    "text": "    def index_code(self):",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of fetching data from an external source based on a date.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      6376,
      62,
      8189,
      7,
      944,
      2599
    ],
    "start_token": 2624,
    "end_token": 2634,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      21207,
      278,
      1366,
      422,
      281,
      7097,
      2723,
      1912,
      319,
      257,
      3128,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of fetching data from an external source based on a date."
  },
  {
    "line": 348,
    "text": "    @property",
    "annotation": "\u2705 Best Practice: Selecting specific columns from the result for further processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 2634,
    "end_token": 2639,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9683,
      278,
      2176,
      15180,
      422,
      262,
      1255,
      329,
      2252,
      7587,
      13
    ],
    "label": "best_practice",
    "reason": "Selecting specific columns from the result for further processing."
  },
  {
    "line": 348,
    "text": "    @property",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure bs.logout() is called to terminate the session securely.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 2639,
    "end_token": 2644,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      275,
      82,
      13,
      6404,
      448,
      3419,
      318,
      1444,
      284,
      23654,
      262,
      6246,
      30835,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure bs.logout() is called to terminate the session securely."
  },
  {
    "line": 348,
    "text": "    @property",
    "annotation": "\u2705 Best Practice: Use of pd.concat to combine a list of DataFrames.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2488,
      26745
    ],
    "start_token": 2644,
    "end_token": 2649,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      279,
      67,
      13,
      1102,
      9246,
      284,
      12082,
      257,
      1351,
      286,
      6060,
      35439,
      13
    ],
    "label": "best_practice",
    "reason": "Use of pd.concat to combine a list of DataFrames."
  },
  {
    "line": 364,
    "text": "        return pd.Timestamp(\"2007-01-15\")",
    "annotation": "\u2705 Best Practice: Ensure the date is converted to string for compatibility with the API",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      14967,
      27823,
      7203,
      12726,
      12,
      486,
      12,
      1314,
      4943
    ],
    "start_token": 2649,
    "end_token": 2669,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      262,
      3128,
      318,
      11513,
      284,
      4731,
      329,
      17764,
      351,
      262,
      7824
    ],
    "label": "best_practice",
    "reason": "Ensure the date is converted to string for compatibility with the API"
  },
  {
    "line": 367,
    "text": "        \"\"\"get companies changes",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential infinite loop if rs.next() always returns True",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37227,
      1136,
      2706,
      2458
    ],
    "start_token": 2669,
    "end_token": 2680,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      15541,
      9052,
      611,
      44608,
      13,
      19545,
      3419,
      1464,
      5860,
      6407
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential infinite loop if rs.next() always returns True"
  },
  {
    "line": 369,
    "text": "        Return",
    "annotation": "\ud83e\udde0 ML Signal: Appending data to a list in a loop is a common pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8229
    ],
    "start_token": 2680,
    "end_token": 2688,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      1366,
      284,
      257,
      1351,
      287,
      257,
      9052,
      318,
      257,
      2219,
      3912
    ],
    "label": "ml_signal",
    "reason": "Appending data to a list in a loop is a common pattern"
  },
  {
    "line": 371,
    "text": "           pd.DataFrame:",
    "annotation": "\ud83e\udde0 ML Signal: Creating a DataFrame from a list of lists",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 2688,
    "end_token": 2704,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      6060,
      19778,
      422,
      257,
      1351,
      286,
      8341
    ],
    "label": "ml_signal",
    "reason": "Creating a DataFrame from a list of lists"
  },
  {
    "line": 372,
    "text": "               symbol      date        type",
    "annotation": "\u2705 Best Practice: Use of lambda for inline string manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      220,
      220,
      220,
      220,
      220,
      3128,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2099
    ],
    "start_token": 2704,
    "end_token": 2733,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      37456,
      329,
      26098,
      4731,
      17512
    ],
    "label": "best_practice",
    "reason": "Use of lambda for inline string manipulation"
  },
  {
    "line": 384,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of current timestamp for data retrieval",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2733,
    "end_token": 2733,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1459,
      41033,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Usage of current timestamp for data retrieval"
  },
  {
    "line": 386,
    "text": "        -------",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if bs.login() fails without exception handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 2733,
    "end_token": 2741,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      275,
      82,
      13,
      38235,
      3419,
      10143,
      1231,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if bs.login() fails without exception handling"
  },
  {
    "line": 388,
    "text": "            pd.DataFrame:",
    "annotation": "\ud83e\udde0 ML Signal: Data retrieval pattern from external source",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      67,
      13,
      6601,
      19778,
      25
    ],
    "start_token": 2741,
    "end_token": 2758,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      45069,
      3912,
      422,
      7097,
      2723
    ],
    "label": "ml_signal",
    "reason": "Data retrieval pattern from external source"
  },
  {
    "line": 390,
    "text": "                SH600000  2019-11-11    add",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if bs.logout() fails without exception handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6006,
      8054,
      830,
      220,
      13130,
      12,
      1157,
      12,
      1157,
      220,
      220,
      220,
      751
    ],
    "start_token": 2758,
    "end_token": 2786,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      275,
      82,
      13,
      6404,
      448,
      3419,
      10143,
      1231,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if bs.logout() fails without exception handling"
  },
  {
    "line": 394,
    "text": "                date: pd.Timestamp",
    "annotation": "\ud83e\udde0 ML Signal: Setting current date as end date for data entries",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3128,
      25,
      279,
      67,
      13,
      14967,
      27823
    ],
    "start_token": 2786,
    "end_token": 2808,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      1459,
      3128,
      355,
      886,
      3128,
      329,
      1366,
      12784
    ],
    "label": "ml_signal",
    "reason": "Setting current date as end date for data entries"
  },
  {
    "line": 395,
    "text": "                type: str, value from [\"add\", \"remove\"]",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a predefined start date for data entries",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2099,
      25,
      965,
      11,
      1988,
      422,
      14631,
      2860,
      1600,
      366,
      28956,
      8973
    ],
    "start_token": 2808,
    "end_token": 2835,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2747,
      18156,
      923,
      3128,
      329,
      1366,
      12784
    ],
    "label": "ml_signal",
    "reason": "Usage of a predefined start date for data entries"
  },
  {
    "line": 395,
    "text": "                type: str, value from [\"add\", \"remove\"]",
    "annotation": "\u2705 Best Practice: Use of __name__ guard for script execution",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2099,
      25,
      965,
      11,
      1988,
      422,
      14631,
      2860,
      1600,
      366,
      28956,
      8973
    ],
    "start_token": 2835,
    "end_token": 2862,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      3672,
      834,
      4860,
      329,
      4226,
      9706
    ],
    "label": "best_practice",
    "reason": "Use of __name__ guard for script execution"
  },
  {
    "line": 395,
    "text": "                type: str, value from [\"add\", \"remove\"]",
    "annotation": "\ud83e\udde0 ML Signal: Command-line interface pattern for function execution",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2099,
      25,
      965,
      11,
      1988,
      422,
      14631,
      2860,
      1600,
      366,
      28956,
      8973
    ],
    "start_token": 2862,
    "end_token": 2889,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9455,
      12,
      1370,
      7071,
      3912,
      329,
      2163,
      9706
    ],
    "label": "ml_signal",
    "reason": "Command-line interface pattern for function execution"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Low): Using __file__ can be risky if the script is frozen by a tool like PyInstaller.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 11593, 7753, 834, 460, 307, 17564, 611, 262, 4226, 318, 12912, 416, 257, 2891, 588, 9485, 15798, 263, 13]",1.0,3,sast_risk,23,Using __file__ can be risky if the script is frozen by a tool like PyInstaller.,Low,0,import qlib,"[11748, 10662, 8019]"
üß† ML Signal: Modifying sys.path to include parent directories is a common pattern for dynamic module loading.,"[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 25064, 13, 6978, 284, 2291, 2560, 29196, 318, 257, 2219, 3912, 329, 8925, 8265, 11046, 13]",1.0,13,ml_signal,25,Modifying sys.path to include parent directories is a common pattern for dynamic module loading.,,3,from qlib.tests.data import GetData,"[6738, 10662, 8019, 13, 41989, 13, 7890, 1330, 3497, 6601]"
‚ö†Ô∏è SAST Risk (Medium): Hardcoded URL can be a security risk if not properly validated or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6912, 40976, 10289, 460, 307, 257, 2324, 2526, 611, 407, 6105, 31031, 393, 5336, 36951, 13]",1.0,26,sast_risk,39,Hardcoded URL can be a security risk if not properly validated or sanitized.,Medium,13,"    get_in_stock_symbols,","[220, 220, 220, 651, 62, 259, 62, 13578, 62, 1837, 2022, 10220, 11]"
‚úÖ Best Practice: Class-level constants should be documented or named descriptively.,"[26486, 227, 6705, 19939, 25, 5016, 12, 5715, 38491, 815, 307, 12395, 393, 3706, 12145, 2280, 13]",1.0,39,best_practice,39,Class-level constants should be documented or named descriptively.,,26,"    get_in_stock_symbols,","[220, 220, 220, 651, 62, 259, 62, 13578, 62, 1837, 2022, 10220, 11]"
‚úÖ Best Practice: Docstring provides clear parameter descriptions and defaults,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 11507, 16969, 290, 26235]",0.5,48,best_practice,52,Docstring provides clear parameter descriptions and defaults,,39,"        self,","[220, 220, 220, 220, 220, 220, 220, 2116, 11]"
‚úÖ Best Practice: Using super() to call the parent class's __init__ method,"[26486, 227, 6705, 19939, 25, 8554, 2208, 3419, 284, 869, 262, 2560, 1398, 338, 11593, 15003, 834, 2446]",0.5,67,best_practice,74,Using super() to call the parent class's __init__ method,,48,"            time.sleep(delay), default 0","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 40850, 828, 4277, 657]"
üß† ML Signal: Initialization of instance variables and method calls in constructor,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 4554, 9633, 290, 2446, 3848, 287, 23772]",1.0,86,ml_signal,87,Initialization of instance variables and method calls in constructor,,67,"            save_dir=save_dir,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3613, 62, 15908, 28, 21928, 62, 15908, 11]"
üß† ML Signal: Conditional logic based on interval type can indicate usage patterns for different intervals,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 16654, 2099, 460, 7603, 8748, 7572, 329, 1180, 20016]",0.5,105,ml_signal,87,Conditional logic based on interval type can indicate usage patterns for different intervals,,86,"            save_dir=save_dir,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3613, 62, 15908, 28, 21928, 62, 15908, 11]"
‚úÖ Best Practice: Use of max function to ensure start_datetime is not before a default value,"[26486, 227, 6705, 19939, 25, 5765, 286, 3509, 2163, 284, 4155, 923, 62, 19608, 8079, 318, 407, 878, 257, 4277, 1988]",1.0,120,best_practice,89,Use of max function to ensure start_datetime is not before a default value,,105,"            end=end,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 28, 437, 11]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError without specific handling could lead to unhandled exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 1231, 2176, 9041, 714, 1085, 284, 555, 38788, 13269]",0.5,143,sast_risk,94,Raising a generic ValueError without specific handling could lead to unhandled exceptions,Low,120,"            check_data_length=check_data_length,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2198, 62, 7890, 62, 13664, 28, 9122, 62, 7890, 62, 13664, 11]"
‚úÖ Best Practice: Converting datetime to a specific timezone for consistency,"[26486, 227, 6705, 19939, 25, 35602, 889, 4818, 8079, 284, 257, 2176, 640, 11340, 329, 15794]",0.5,151,best_practice,96,Converting datetime to a specific timezone for consistency,,143,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Converting datetime to a specific timezone for consistency,"[26486, 227, 6705, 19939, 25, 35602, 889, 4818, 8079, 284, 257, 2176, 640, 11340, 329, 15794]",0.5,165,best_practice,98,Converting datetime to a specific timezone for consistency,,151,        self.init_datetime(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15003, 62, 19608, 8079, 3419]"
‚úÖ Best Practice: Consider specifying the expected return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 12642, 31577, 262, 2938, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,173,best_practice,96,Consider specifying the expected return type for better readability and maintainability,,165,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Potential timezone-related issues if timezone is not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 12, 5363, 2428, 611, 640, 11340, 318, 407, 31031]",1.0,173,sast_risk,99,Potential timezone-related issues if timezone is not validated,Low,173,,[]
üß† ML Signal: Usage of pd.Timestamp for datetime conversion,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 279, 67, 13, 14967, 27823, 329, 4818, 8079, 11315]",1.0,173,ml_signal,99,Usage of pd.Timestamp for datetime conversion,,173,,[]
üß† ML Signal: Conversion of timestamp to local timezone,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 41033, 284, 1957, 640, 11340]",1.0,216,ml_signal,102,Conversion of timestamp to local timezone,,173,"            self.start_datetime = max(self.start_datetime, self.DEFAULT_START_DATETIME_1MIN)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 9688, 62, 19608, 8079, 796, 3509, 7, 944, 13, 9688, 62, 19608, 8079, 11, 2116, 13, 7206, 38865, 62, 2257, 7227, 62, 35, 1404, 2767, 12789, 62, 16, 23678, 8]"
‚úÖ Best Practice: Consider logging the exception for better debugging,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 6631, 329, 1365, 28769]",1.0,225,best_practice,105,Consider logging the exception for better debugging,,216,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Ensure the function returns a consistent type,"[26486, 227, 6705, 19939, 25, 48987, 262, 2163, 5860, 257, 6414, 2099]",1.0,253,best_practice,106,Ensure the function returns a consistent type,,225,"            raise ValueError(f""interval error: {self.interval}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7, 69, 1, 3849, 2100, 4049, 25, 1391, 944, 13, 3849, 2100, 92, 4943]"
"‚ö†Ô∏è SAST Risk (Low): Method raises NotImplementedError, which could lead to unhandled exceptions if not properly overridden.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 543, 714, 1085, 284, 555, 38788, 13269, 611, 407, 6105, 23170, 4651, 13]",0.5,281,sast_risk,106,"Method raises NotImplementedError, which could lead to unhandled exceptions if not properly overridden.",Low,253,"            raise ValueError(f""interval error: {self.interval}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 7, 69, 1, 3849, 2100, 4049, 25, 1391, 944, 13, 3849, 2100, 92, 4943]"
‚úÖ Best Practice: Use of @staticmethod decorator indicates that the method does not depend on instance-specific data.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 12708, 24396, 11705, 1352, 9217, 326, 262, 2446, 857, 407, 4745, 319, 4554, 12, 11423, 1366, 13]",0.5,315,best_practice,109,Use of @staticmethod decorator indicates that the method does not depend on instance-specific data.,,281,"        self.end_datetime = self.convert_datetime(self.end_datetime, self._timezone)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 437, 62, 19608, 8079, 796, 2116, 13, 1102, 1851, 62, 19608, 8079, 7, 944, 13, 437, 62, 19608, 8079, 11, 2116, 13557, 2435, 11340, 8]"
üß† ML Signal: Use of f-string for error message formatting,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 4049, 3275, 33313]",1.0,349,ml_signal,109,Use of f-string for error message formatting,,315,"        self.end_datetime = self.convert_datetime(self.end_datetime, self._timezone)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 437, 62, 19608, 8079, 796, 2116, 13, 1102, 1851, 62, 19608, 8079, 7, 944, 13, 437, 62, 19608, 8079, 11, 2116, 13557, 2435, 11340, 8]"
‚úÖ Best Practice: Use of a function to encapsulate logging logic for reusability and clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2163, 284, 32652, 5039, 18931, 9156, 329, 302, 385, 1799, 290, 16287]",0.5,355,best_practice,111,Use of a function to encapsulate logging logic for reusability and clarity,,349,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
‚ö†Ô∏è SAST Risk (Low): Potential exposure of sensitive information in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 8564, 1321, 287, 17259]",1.0,364,sast_risk,113,Potential exposure of sensitive information in logs,Low,355,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
üß† ML Signal: Use of try-except block to handle exceptions,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1949, 12, 16341, 2512, 284, 5412, 13269]",0.5,377,ml_signal,116,Use of try-except block to handle exceptions,,364,        except ValueError as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 11052, 12331, 355, 304, 25]"
üß† ML Signal: Use of external library function call,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 7097, 5888, 2163, 869]",1.0,387,ml_signal,118,Use of external library function call,,377,        return dt,"[220, 220, 220, 220, 220, 220, 220, 1441, 288, 83]"
üß† ML Signal: DataFrame manipulation pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 17512, 3912]",0.5,392,ml_signal,120,DataFrame manipulation pattern,,387,    @property,"[220, 220, 220, 2488, 26745]"
‚ö†Ô∏è SAST Risk (Low): Generic exception handling may hide specific errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041, 743, 7808, 2176, 8563]",1.0,423,sast_risk,131,Generic exception handling may hide specific errors,Low,392,"                logger.warning(f""{error_msg}:{_resp}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 90, 18224, 62, 19662, 92, 29164, 62, 4363, 92, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential exposure of sensitive information in logs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7111, 286, 8564, 1321, 287, 17259]",1.0,454,sast_risk,131,Potential exposure of sensitive information in logs,Low,423,"                logger.warning(f""{error_msg}:{_resp}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 90, 18224, 62, 19662, 92, 29164, 62, 4363, 92, 4943]"
‚úÖ Best Practice: Use of a decorator to handle retries indicates a robust design for network operations,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 11705, 1352, 284, 5412, 1005, 1678, 9217, 257, 12373, 1486, 329, 3127, 4560]",0.5,494,best_practice,135,Use of a decorator to handle retries indicates a robust design for network operations,,454,"            _resp = Ticker(symbol, asynchronous=False).history(interval=interval, start=start, end=end)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 4363, 796, 309, 15799, 7, 1837, 23650, 11, 39354, 28, 25101, 737, 23569, 7, 3849, 2100, 28, 3849, 2100, 11, 923, 28, 9688, 11, 886, 28, 437, 8]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,517,best_practice,136,Consider adding a docstring to describe the function's purpose and parameters,,494,"            if isinstance(_resp, pd.DataFrame):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 28264, 4363, 11, 279, 67, 13, 6601, 19778, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential use of uninitialized variable 'interval',"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 779, 286, 555, 17532, 7885, 705, 3849, 2100, 6]",1.0,537,sast_risk,138,Potential use of uninitialized variable 'interval',Low,517,"            elif isinstance(_resp, dict):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1288, 361, 318, 39098, 28264, 4363, 11, 8633, 2599]"
‚ö†Ô∏è SAST Risk (Low): Check for None or empty response to handle potential errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6822, 329, 6045, 393, 6565, 2882, 284, 5412, 2785, 8563]",0.5,560,sast_risk,145,Check for None or empty response to handle potential errors,Low,537,                _show_logging_func(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 12860, 62, 6404, 2667, 62, 20786, 3419]"
üß† ML Signal: Conditional logic based on 'interval' value,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 705, 3849, 2100, 6, 1988]",0.5,568,ml_signal,152,Conditional logic based on 'interval' value,,560,    def get_data(,"[220, 220, 220, 825, 651, 62, 7890, 7]"
‚úÖ Best Practice: Consider logging the exception for debugging purposes,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 6631, 329, 28769, 4959]",0.5,601,best_practice,158,Consider logging the exception for debugging purposes,,568,"            _remote_interval = ""1m"" if interval == self.INTERVAL_1min else interval","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 47960, 62, 3849, 2100, 796, 366, 16, 76, 1, 611, 16654, 6624, 2116, 13, 41358, 23428, 62, 16, 1084, 2073, 16654]"
üß† ML Signal: Looping pattern with date range,"[8582, 100, 254, 10373, 26484, 25, 6706, 15816, 3912, 351, 3128, 2837]",0.5,621,ml_signal,162,Looping pattern with date range,,601,"                start=start_,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 28, 9688, 62, 11]"
‚úÖ Best Practice: Consider logging the exception for debugging purposes,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 6631, 329, 28769, 4959]",0.5,621,best_practice,170,Consider logging the exception for debugging purposes,,621,,[]
üß† ML Signal: Data concatenation and sorting pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 1673, 36686, 341, 290, 29407, 3912]",0.5,654,ml_signal,174,Data concatenation and sorting pattern,,621,"                _result = _get_simple(start_datetime, end_datetime)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 20274, 796, 4808, 1136, 62, 36439, 7, 9688, 62, 19608, 8079, 11, 886, 62, 19608, 8079, 8]"
‚ö†Ô∏è SAST Risk (Low): Unhandled interval values could lead to unexpected behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 791, 38788, 16654, 3815, 714, 1085, 284, 10059, 4069]",0.5,673,sast_risk,177,Unhandled interval values could lead to unexpected behavior,Low,654,        elif interval == self.INTERVAL_1min:,"[220, 220, 220, 220, 220, 220, 220, 1288, 361, 16654, 6624, 2116, 13, 41358, 23428, 62, 16, 1084, 25]"
üß† ML Signal: Return pattern based on condition,"[8582, 100, 254, 10373, 26484, 25, 8229, 3912, 1912, 319, 4006]",0.5,693,ml_signal,179,Return pattern based on condition,,673,            _start = self.start_datetime,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 9688, 796, 2116, 13, 9688, 62, 19608, 8079]"
‚úÖ Best Practice: Consider using a more descriptive docstring to explain the method's purpose and behavior.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 517, 35644, 2205, 8841, 284, 4727, 262, 2446, 338, 4007, 290, 4069, 13]",0.5,706,best_practice,173,Consider using a more descriptive docstring to explain the method's purpose and behavior.,,693,            try:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚úÖ Best Practice: Use of super() is a good practice for calling methods from a parent class.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 318, 257, 922, 3357, 329, 4585, 5050, 422, 257, 2560, 1398, 13]",1.0,739,best_practice,174,Use of super() is a good practice for calling methods from a parent class.,,706,"                _result = _get_simple(start_datetime, end_datetime)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 20274, 796, 4808, 1136, 62, 36439, 7, 9688, 62, 19608, 8079, 11, 886, 62, 19608, 8079, 8]"
"‚úÖ Best Practice: Use of @abc.abstractmethod indicates this method must be implemented by subclasses, which is a good design practice for abstract classes.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 39305, 13, 397, 8709, 24396, 9217, 428, 2446, 1276, 307, 9177, 416, 850, 37724, 11, 543, 318, 257, 922, 1486, 3357, 329, 12531, 6097, 13]",0.5,754,best_practice,178,"Use of @abc.abstractmethod indicates this method must be implemented by subclasses, which is a good design practice for abstract classes.",,739,            _res = [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 411, 796, 17635]"
‚úÖ Best Practice: Method docstring provides a brief description of the method's purpose,"[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 3769, 257, 4506, 6764, 286, 262, 2446, 338, 4007]",1.0,770,best_practice,176,Method docstring provides a brief description of the method's purpose,,754,                pass,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1208]"
‚úÖ Best Practice: Raising NotImplementedError is a clear way to indicate that a method should be overridden,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 318, 257, 1598, 835, 284, 7603, 326, 257, 2446, 815, 307, 23170, 4651]",1.0,790,best_practice,179,Raising NotImplementedError is a clear way to indicate that a method should be overridden,,770,            _start = self.start_datetime,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 9688, 796, 2116, 13, 9688, 62, 19608, 8079]"
‚úÖ Best Practice: Inheriting from ABC indicates that this class is intended to be abstract.,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 9738, 9217, 326, 428, 1398, 318, 5292, 284, 307, 12531, 13]",0.5,812,best_practice,180,Inheriting from ABC indicates that this class is intended to be abstract.,,790,            while _start < self.end_datetime:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 981, 4808, 9688, 1279, 2116, 13, 437, 62, 19608, 8079, 25]"
üß† ML Signal: Logging usage pattern for monitoring and debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 290, 28769]",0.5,834,ml_signal,180,Logging usage pattern for monitoring and debugging,,812,            while _start < self.end_datetime:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 981, 4808, 9688, 1279, 2116, 13, 437, 62, 19608, 8079, 25]"
üß† ML Signal: Logging usage pattern for monitoring and debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 290, 28769]",0.5,851,ml_signal,182,Logging usage pattern for monitoring and debugging,,834,                try:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1949, 25]"
üß† ML Signal: Function call pattern for retrieving stock symbols,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 329, 50122, 4283, 14354]",1.0,877,ml_signal,184,Function call pattern for retrieving stock symbols,,851,                    _res.append(_resp),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 411, 13, 33295, 28264, 4363, 8]"
üß† ML Signal: Logging usage pattern for monitoring and debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 290, 28769]",0.5,897,ml_signal,186,Logging usage pattern for monitoring and debugging,,877,                    pass,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1208]"
üß† ML Signal: Return statement pattern for function output,"[8582, 100, 254, 10373, 26484, 25, 8229, 2643, 3912, 329, 2163, 5072]",1.0,912,ml_signal,188,Return statement pattern for function output,,897,            if _res:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 4808, 411, 25]"
üß† ML Signal: Function that processes and normalizes input data,"[8582, 100, 254, 10373, 26484, 25, 15553, 326, 7767, 290, 3487, 4340, 5128, 1366]",0.5,932,ml_signal,186,Function that processes and normalizes input data,,912,                    pass,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1208]"
‚úÖ Best Practice: Use of f-string for readability and performance,"[26486, 227, 6705, 19939, 25, 5765, 286, 277, 12, 8841, 329, 1100, 1799, 290, 2854]",1.0,947,best_practice,188,Use of f-string for readability and performance,,932,            if _res:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 4808, 411, 25]"
‚úÖ Best Practice: Consider using a constant or configuration for timezone values to improve maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 6937, 393, 8398, 329, 640, 11340, 3815, 284, 2987, 5529, 1799, 13]",1.0,956,best_practice,190,Consider using a constant or configuration for timezone values to improve maintainability.,,947,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Iterating over a dictionary of index names and codes,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 22155, 286, 6376, 3891, 290, 12416]",1.0,971,ml_signal,197,Iterating over a dictionary of index names and codes,,956,        self.download_index_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 15002, 62, 9630, 62, 7890, 3419]"
üß† ML Signal: Logging information about the index being processed,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 1321, 546, 262, 6376, 852, 13686]",1.0,980,ml_signal,199,Logging information about the index being processed,,971,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
"‚ö†Ô∏è SAST Risk (Medium): No timeout specified for requests.get, which can lead to hanging connections","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 329, 7007, 13, 1136, 11, 543, 460, 1085, 284, 10938, 8787]",1.0,992,sast_risk,200,"No timeout specified for requests.get, which can lead to hanging connections",Medium,980,    def download_index_data(self):,"[220, 220, 220, 825, 4321, 62, 9630, 62, 7890, 7, 944, 2599]"
üß† ML Signal: Logging warning when an exception occurs,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 6509, 618, 281, 6631, 8833]",0.5,1006,ml_signal,212,Logging warning when an exception occurs,,992,"    def normalize_symbol(self, symbol):","[220, 220, 220, 825, 3487, 1096, 62, 1837, 23650, 7, 944, 11, 6194, 2599]"
‚úÖ Best Practice: Explicitly setting DataFrame column names for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6060, 19778, 5721, 3891, 329, 16287]",1.0,1015,best_practice,215,Explicitly setting DataFrame column names for clarity,,1006,        return symbol,"[220, 220, 220, 220, 220, 220, 220, 1441, 6194]"
‚úÖ Best Practice: Converting date strings to datetime objects for better manipulation,"[26486, 227, 6705, 19939, 25, 35602, 889, 3128, 13042, 284, 4818, 8079, 5563, 329, 1365, 17512]",1.0,1020,best_practice,217,Converting date strings to datetime objects for better manipulation,,1015,    @property,"[220, 220, 220, 2488, 26745]"
"‚úÖ Best Practice: Using astype with errors=""ignore"" to safely convert data types","[26486, 227, 6705, 19939, 25, 8554, 6468, 2981, 351, 8563, 2625, 46430, 1, 284, 11512, 10385, 1366, 3858]",1.0,1035,best_practice,219,"Using astype with errors=""ignore"" to safely convert data types",,1020,"        return ""Asia/Shanghai""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 38555, 14, 2484, 272, 20380, 1]"
‚úÖ Best Practice: Checking if a file exists before reading it,"[26486, 227, 6705, 19939, 25, 39432, 611, 257, 2393, 7160, 878, 3555, 340]",1.0,1049,best_practice,224,Checking if a file exists before reading it,,1035,        # TODO: from MSN,"[220, 220, 220, 220, 220, 220, 220, 1303, 16926, 46, 25, 422, 6579, 45]"
‚úÖ Best Practice: Using pd.concat to append new data to existing DataFrame,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 284, 24443, 649, 1366, 284, 4683, 6060, 19778]",1.0,1071,best_practice,227,Using pd.concat to append new data to existing DataFrame,,1049,        _end = self.end_datetime.strftime(_format),"[220, 220, 220, 220, 220, 220, 220, 4808, 437, 796, 2116, 13, 437, 62, 19608, 8079, 13, 2536, 31387, 28264, 18982, 8]"
‚úÖ Best Practice: Saving DataFrame to CSV without the index for cleaner output,"[26486, 227, 6705, 19939, 25, 34689, 6060, 19778, 284, 44189, 1231, 262, 6376, 329, 21723, 5072]",0.5,1106,best_practice,229,Saving DataFrame to CSV without the index for cleaner output,,1071,"            logger.info(f""get bench data: {_index_name}({_index_code})......"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 1136, 7624, 1366, 25, 1391, 62, 9630, 62, 3672, 92, 15090, 62, 9630, 62, 8189, 30072, 16317, 4943]"
‚ö†Ô∏è SAST Risk (Low): Fixed sleep duration can lead to inefficient waiting,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 10832, 3993, 9478, 460, 1085, 284, 30904, 4953]",1.0,1129,sast_risk,231,Fixed sleep duration can lead to inefficient waiting,Low,1106,                df = pd.DataFrame(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 7]"
‚úÖ Best Practice: Class definition should include a docstring explaining its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 11170, 663, 4007, 290, 8748]",0.5,1143,best_practice,222,Class definition should include a docstring explaining its purpose and usage,,1129,class YahooCollectorCN1d(YahooCollectorCN):,"[4871, 16551, 31337, 273, 44175, 16, 67, 7, 56, 12992, 31337, 273, 44175, 2599]"
‚úÖ Best Practice: Method name should be descriptive of its functionality,"[26486, 227, 6705, 19939, 25, 11789, 1438, 815, 307, 35644, 286, 663, 11244]",1.0,1155,best_practice,223,Method name should be descriptive of its functionality,,1143,    def download_index_data(self):,"[220, 220, 220, 825, 4321, 62, 9630, 62, 7890, 7, 944, 2599]"
üß† ML Signal: Use of inheritance and method overriding,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 24155, 290, 2446, 44987]",1.0,1172,ml_signal,225,Use of inheritance and method overriding,,1155,"        _format = ""%Y%m%d""","[220, 220, 220, 220, 220, 220, 220, 4808, 18982, 796, 36521, 56, 4, 76, 4, 67, 1]"
‚úÖ Best Practice: Returning a modified list of symbols,"[26486, 227, 6705, 19939, 25, 42882, 257, 9518, 1351, 286, 14354]",0.5,1194,best_practice,227,Returning a modified list of symbols,,1172,        _end = self.end_datetime.strftime(_format),"[220, 220, 220, 220, 220, 220, 220, 4808, 437, 796, 2116, 13, 437, 62, 19608, 8079, 13, 2536, 31387, 28264, 18982, 8]"
"‚úÖ Best Practice: Define a method to download index data, but currently it's a placeholder with no implementation.","[26486, 227, 6705, 19939, 25, 2896, 500, 257, 2446, 284, 4321, 6376, 1366, 11, 475, 3058, 340, 338, 257, 46076, 351, 645, 7822, 13]",0.5,1216,best_practice,226,"Define a method to download index data, but currently it's a placeholder with no implementation.",,1194,        _begin = self.start_datetime.strftime(_format),"[220, 220, 220, 220, 220, 220, 220, 4808, 27471, 796, 2116, 13, 9688, 62, 19608, 8079, 13, 2536, 31387, 28264, 18982, 8]"
‚úÖ Best Practice: Inheriting from ABC indicates this class is intended to be abstract,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 9738, 9217, 428, 1398, 318, 5292, 284, 307, 12531]",0.5,1251,best_practice,229,Inheriting from ABC indicates this class is intended to be abstract,,1216,"            logger.info(f""get bench data: {_index_name}({_index_code})......"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 1136, 7624, 1366, 25, 1391, 62, 9630, 62, 3672, 92, 15090, 62, 9630, 62, 8189, 30072, 16317, 4943]"
üß† ML Signal: Logging usage pattern for monitoring and debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 290, 28769]",0.5,1264,ml_signal,230,Logging usage pattern for monitoring and debugging,,1251,            try:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1949, 25]"
üß† ML Signal: Function call pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 329, 1366, 45069]",1.0,1287,ml_signal,231,Function call pattern for data retrieval,,1264,                df = pd.DataFrame(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 7]"
üß† ML Signal: Logging usage pattern for monitoring and debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 290, 28769]",0.5,1303,ml_signal,238,Logging usage pattern for monitoring and debugging,,1287,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Explicitly returning a value from a function,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 257, 1988, 422, 257, 2163]",1.0,1337,best_practice,240,Explicitly returning a value from a function,,1303,"                logger.warning(f""get {_index_name} error: {e}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 1136, 1391, 62, 9630, 62, 3672, 92, 4049, 25, 1391, 68, 92, 4943]"
"‚úÖ Best Practice: Define a method with a clear purpose, even if not yet implemented","[26486, 227, 6705, 19939, 25, 2896, 500, 257, 2446, 351, 257, 1598, 4007, 11, 772, 611, 407, 1865, 9177]",1.0,1353,best_practice,238,"Define a method with a clear purpose, even if not yet implemented",,1337,                ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
‚úÖ Best Practice: Method should have a docstring explaining its purpose and parameters,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 10007]",0.5,1387,best_practice,240,Method should have a docstring explaining its purpose and parameters,,1353,"                logger.warning(f""get {_index_name} error: {e}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 1136, 1391, 62, 9630, 62, 3672, 92, 4049, 25, 1391, 68, 92, 4943]"
üß† ML Signal: Usage of helper function to transform data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 31904, 2163, 284, 6121, 1366]",0.5,1403,ml_signal,241,Usage of helper function to transform data,,1387,                continue,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2555]"
‚úÖ Best Practice: Consider using a constant or configuration for timezone values to improve maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 6937, 393, 8398, 329, 640, 11340, 3815, 284, 2987, 5529, 1799, 13]",1.0,1432,best_practice,243,Consider using a constant or configuration for timezone values to improve maintainability.,,1403,"            df[""date""] = pd.to_datetime(df[""date""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 4475, 8973, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 14692, 4475, 8973, 8]"
‚úÖ Best Practice: Use of inheritance to extend functionality from a parent class,"[26486, 227, 6705, 19939, 25, 5765, 286, 24155, 284, 9117, 11244, 422, 257, 2560, 1398]",1.0,1453,best_practice,245,Use of inheritance to extend functionality from a parent class,,1432,"            df[""adjclose""] = df[""close""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 41255, 19836, 8973, 796, 47764, 14692, 19836, 8973]"
‚úÖ Best Practice: Use of inheritance to extend functionality of YahooCollectorUS,"[26486, 227, 6705, 19939, 25, 5765, 286, 24155, 284, 9117, 11244, 286, 16551, 31337, 273, 2937]",1.0,1487,best_practice,247,Use of inheritance to extend functionality of YahooCollectorUS,,1453,"            _path = self.save_dir.joinpath(f""sh{_index_code}.csv"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 6978, 796, 2116, 13, 21928, 62, 15908, 13, 22179, 6978, 7, 69, 1, 1477, 90, 62, 9630, 62, 8189, 27422, 40664, 4943]"
‚úÖ Best Practice: Inheriting from both YahooCollector and ABC indicates use of abstract base classes for interface enforcement.,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 1111, 16551, 31337, 273, 290, 9738, 9217, 779, 286, 12531, 2779, 6097, 329, 7071, 5394, 13]",0.5,1516,best_practice,249,Inheriting from both YahooCollector and ABC indicates use of abstract base classes for interface enforcement.,,1487,                _old_df = pd.read_csv(_path),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 727, 62, 7568, 796, 279, 67, 13, 961, 62, 40664, 28264, 6978, 8]"
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,1550,ml_signal,250,Logging usage pattern for monitoring or debugging,,1516,"                df = pd.concat([_old_df, df], sort=False)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 1102, 9246, 26933, 62, 727, 62, 7568, 11, 47764, 4357, 3297, 28, 25101, 8]"
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,1567,ml_signal,252,Logging usage pattern for monitoring or debugging,,1550,            time.sleep(5),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 20, 8]"
üß† ML Signal: Function call pattern for retrieving stock symbols,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 329, 50122, 4283, 14354]",1.0,1567,ml_signal,254,Function call pattern for retrieving stock symbols,,1567,,[]
üß† ML Signal: Logging usage pattern for monitoring or debugging,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9904, 393, 28769]",1.0,1580,ml_signal,256,Logging usage pattern for monitoring or debugging,,1567,    def get_instrument_list(self):,"[220, 220, 220, 825, 651, 62, 259, 43872, 62, 4868, 7, 944, 2599]"
‚úÖ Best Practice: Explicitly returning the result of a function,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 262, 1255, 286, 257, 2163]",1.0,1609,best_practice,258,Explicitly returning the result of a function,,1580,"        return symbols + [""000300.ss"", ""000905.ss"", ""000903.ss""]","[220, 220, 220, 220, 220, 220, 220, 1441, 14354, 1343, 14631, 830, 6200, 13, 824, 1600, 366, 830, 44928, 13, 824, 1600, 366, 830, 24, 3070, 13, 824, 8973]"
"‚úÖ Best Practice: Define a method to download index data, even if not yet implemented","[26486, 227, 6705, 19939, 25, 2896, 500, 257, 2446, 284, 4321, 6376, 1366, 11, 772, 611, 407, 1865, 9177]",1.0,1623,best_practice,255,"Define a method to download index data, even if not yet implemented",,1609,class YahooCollectorCN1min(YahooCollectorCN):,"[4871, 16551, 31337, 273, 44175, 16, 1084, 7, 56, 12992, 31337, 273, 44175, 2599]"
‚úÖ Best Practice: Use 'pass' to indicate an intentional no-operation placeholder,"[26486, 227, 6705, 19939, 25, 5765, 705, 6603, 6, 284, 7603, 281, 21391, 645, 12, 27184, 46076]",0.5,1651,best_practice,257,Use 'pass' to indicate an intentional no-operation placeholder,,1623,"        symbols = super(YahooCollectorCN1min, self).get_instrument_list()","[220, 220, 220, 220, 220, 220, 220, 14354, 796, 2208, 7, 56, 12992, 31337, 273, 44175, 16, 1084, 11, 2116, 737, 1136, 62, 259, 43872, 62, 4868, 3419]"
‚úÖ Best Practice: Method should have a docstring explaining its purpose and parameters,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007, 290, 10007]",1.0,1679,best_practice,257,Method should have a docstring explaining its purpose and parameters,,1651,"        symbols = super(YahooCollectorCN1min, self).get_instrument_list()","[220, 220, 220, 220, 220, 220, 220, 14354, 796, 2208, 7, 56, 12992, 31337, 273, 44175, 16, 1084, 11, 2116, 737, 1136, 62, 259, 43872, 62, 4868, 3419]"
üß† ML Signal: Usage of helper function to transform data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 31904, 2163, 284, 6121, 1366]",1.0,1708,ml_signal,258,Usage of helper function to transform data,,1679,"        return symbols + [""000300.ss"", ""000905.ss"", ""000903.ss""]","[220, 220, 220, 220, 220, 220, 220, 1441, 14354, 1343, 14631, 830, 6200, 13, 824, 1600, 366, 830, 44928, 13, 824, 1600, 366, 830, 24, 3070, 13, 824, 8973]"
‚úÖ Best Practice: Consider using a constant or configuration for timezone values to improve maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 6937, 393, 8398, 329, 640, 11340, 3815, 284, 2987, 5529, 1799, 13]",1.0,1720,best_practice,260,Consider using a constant or configuration for timezone values to improve maintainability.,,1708,    def download_index_data(self):,"[220, 220, 220, 825, 4321, 62, 9630, 62, 7890, 7, 944, 2599]"
‚úÖ Best Practice: Use of inheritance to extend functionality of YahooCollectorIN,"[26486, 227, 6705, 19939, 25, 5765, 286, 24155, 284, 9117, 11244, 286, 16551, 31337, 273, 1268]",1.0,1720,best_practice,262,Use of inheritance to extend functionality of YahooCollectorIN,,1720,,[]
‚úÖ Best Practice: Use of inheritance to extend functionality from YahooCollectorIN,"[26486, 227, 6705, 19939, 25, 5765, 286, 24155, 284, 9117, 11244, 422, 16551, 31337, 273, 1268]",1.0,1733,best_practice,264,Use of inheritance to extend functionality from YahooCollectorIN,,1720,"class YahooCollectorUS(YahooCollector, ABC):","[4871, 16551, 31337, 273, 2937, 7, 56, 12992, 31337, 273, 11, 9738, 2599]"
‚úÖ Best Practice: Use of 'pass' to indicate intentional empty class definition,"[26486, 227, 6705, 19939, 25, 5765, 286, 705, 6603, 6, 284, 7603, 21391, 6565, 1398, 6770]",0.5,1750,best_practice,266,Use of 'pass' to indicate intentional empty class definition,,1733,"        logger.info(""get US stock symbols......"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 1136, 1294, 4283, 14354, 16317, 4943]"
‚úÖ Best Practice: Inheriting from both YahooCollector and ABC suggests this class is meant to be abstract.,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 1111, 16551, 31337, 273, 290, 9738, 5644, 428, 1398, 318, 4001, 284, 307, 12531, 13]",1.0,1767,best_practice,266,Inheriting from both YahooCollector and ABC suggests this class is meant to be abstract.,,1750,"        logger.info(""get US stock symbols......"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 1136, 1294, 4283, 14354, 16317, 4943]"
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 8748, 13]",1.0,1784,best_practice,268,Docstring provides a clear explanation of the method's purpose and usage.,,1767,"            ""^GSPC"",","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 366, 61, 38, 4303, 34, 1600]"
"‚ö†Ô∏è SAST Risk (Low): Method raises NotImplementedError, indicating it's intended to be overridden.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 12739, 340, 338, 5292, 284, 307, 23170, 4651, 13]",1.0,1794,sast_risk,282,"Method raises NotImplementedError, indicating it's intended to be overridden.",Low,1784,    def _timezone(self):,"[220, 220, 220, 825, 4808, 2435, 11340, 7, 944, 2599]"
üß† ML Signal: Logging usage pattern for tracking function execution,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9646, 2163, 9706]",0.5,1809,ml_signal,283,Logging usage pattern for tracking function execution,,1794,"        return ""America/New_York""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 18165, 14, 3791, 62, 49278, 1]"
üß† ML Signal: Function call pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 329, 1366, 45069]",1.0,1809,ml_signal,284,Function call pattern for data retrieval,,1809,,[]
üß† ML Signal: Logging usage pattern for tracking function execution,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9646, 2163, 9706]",0.5,1809,ml_signal,289,Logging usage pattern for tracking function execution,,1809,,[]
‚úÖ Best Practice: Explicitly returning the result of the function,"[26486, 227, 6705, 19939, 25, 11884, 306, 8024, 262, 1255, 286, 262, 2163]",0.5,1813,best_practice,291,Explicitly returning the result of the function,,1809,    pass,"[220, 220, 220, 1208]"
"‚úÖ Best Practice: Define a method to download index data, but currently it's a placeholder with no implementation.","[26486, 227, 6705, 19939, 25, 2896, 500, 257, 2446, 284, 4321, 6376, 1366, 11, 475, 3058, 340, 338, 257, 46076, 351, 645, 7822, 13]",1.0,1813,best_practice,289,"Define a method to download index data, but currently it's a placeholder with no implementation.",,1813,,[]
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007, 13]",1.0,1813,best_practice,292,Consider adding a docstring to describe the function's purpose and parameters.,,1813,,[]
üß† ML Signal: Usage of string manipulation methods like upper() can indicate data normalization patterns.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4731, 17512, 5050, 588, 6727, 3419, 460, 7603, 1366, 3487, 1634, 7572, 13]",0.5,1826,ml_signal,294,Usage of string manipulation methods like upper() can indicate data normalization patterns.,,1813,"class YahooCollectorIN(YahooCollector, ABC):","[4871, 16551, 31337, 273, 1268, 7, 56, 12992, 31337, 273, 11, 9738, 2599]"
‚úÖ Best Practice: Using @property decorator is a good practice for creating read-only attributes.,"[26486, 227, 6705, 19939, 25, 8554, 2488, 26745, 11705, 1352, 318, 257, 922, 3357, 329, 4441, 1100, 12, 8807, 12608, 13]",0.5,1844,best_practice,296,Using @property decorator is a good practice for creating read-only attributes.,,1826,"        logger.info(""get INDIA stock symbols......"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 1136, 24413, 3539, 4283, 14354, 16317, 4943]"
‚úÖ Best Practice: Consider using a constant or configuration for timezone values to improve maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 6937, 393, 8398, 329, 640, 11340, 3815, 284, 2987, 5529, 1799, 13]",1.0,1857,best_practice,294,Consider using a constant or configuration for timezone values to improve maintainability.,,1844,"class YahooCollectorIN(YahooCollector, ABC):","[4871, 16551, 31337, 273, 1268, 7, 56, 12992, 31337, 273, 11, 9738, 2599]"
‚úÖ Best Practice: Class definition should include a docstring to describe its purpose and usage.,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 284, 6901, 663, 4007, 290, 8748, 13]",1.0,1875,best_practice,296,Class definition should include a docstring to describe its purpose and usage.,,1857,"        logger.info(""get INDIA stock symbols......"")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7203, 1136, 24413, 3539, 4283, 14354, 16317, 4943]"
‚úÖ Best Practice: Class variables should be documented to explain their purpose.,"[26486, 227, 6705, 19939, 25, 5016, 9633, 815, 307, 12395, 284, 4727, 511, 4007, 13]",1.0,1898,best_practice,298,Class variables should be documented to explain their purpose.,,1875,"        logger.info(f""get {len(symbols)} symbols."")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 1136, 1391, 11925, 7, 1837, 2022, 10220, 38165, 14354, 19570]"
‚úÖ Best Practice: Class definition should include a docstring to describe its purpose and usage.,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 284, 6901, 663, 4007, 290, 8748, 13]",0.5,1921,best_practice,298,Class definition should include a docstring to describe its purpose and usage.,,1898,"        logger.info(f""get {len(symbols)} symbols."")","[220, 220, 220, 220, 220, 220, 220, 49706, 13, 10951, 7, 69, 1, 1136, 1391, 11925, 7, 1837, 2022, 10220, 38165, 14354, 19570]"
‚úÖ Best Practice: Class variables should be documented to explain their purpose.,"[26486, 227, 6705, 19939, 25, 5016, 9633, 815, 307, 12395, 284, 4727, 511, 4007, 13]",0.5,1921,best_practice,300,Class variables should be documented to explain their purpose.,,1921,,[]
üß† ML Signal: Use of class-level constants for configuration,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1398, 12, 5715, 38491, 329, 8398]",0.5,1929,ml_signal,302,Use of class-level constants for configuration,,1921,        pass,"[220, 220, 220, 220, 220, 220, 220, 1208]"
üß† ML Signal: Use of static method for utility function,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 9037, 2446, 329, 10361, 2163]",0.5,1943,ml_signal,304,Use of static method for utility function,,1929,"    def normalize_symbol(self, symbol):","[220, 220, 220, 825, 3487, 1096, 62, 1837, 23650, 7, 944, 11, 6194, 2599]"
‚úÖ Best Practice: Use of .copy() to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 286, 764, 30073, 3419, 284, 3368, 30620, 262, 2656, 6060, 19778]",1.0,1963,best_practice,305,Use of .copy() to avoid modifying the original DataFrame,,1943,        return code_to_fname(symbol).upper(),"[220, 220, 220, 220, 220, 220, 220, 1441, 2438, 62, 1462, 62, 69, 3672, 7, 1837, 23650, 737, 45828, 3419]"
üß† ML Signal: Filling missing values with forward fill method,"[8582, 100, 254, 10373, 26484, 25, 376, 4509, 4814, 3815, 351, 2651, 6070, 2446]",1.0,1968,ml_signal,307,Filling missing values with forward fill method,,1963,    @property,"[220, 220, 220, 2488, 26745]"
üß† ML Signal: Shifting series to calculate change,"[8582, 100, 254, 10373, 26484, 25, 911, 13309, 2168, 284, 15284, 1487]",1.0,1983,ml_signal,309,Shifting series to calculate change,,1968,"        return ""Asia/Kolkata""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 38555, 14, 42, 13597, 1045, 1]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if DataFrame is empty,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 6060, 19778, 318, 6565]",0.5,1983,sast_risk,311,Potential IndexError if DataFrame is empty,Low,1983,,[]
‚ö†Ô∏è SAST Risk (Low): Use of iloc can lead to IndexError if DataFrame is empty,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 4229, 420, 460, 1085, 284, 12901, 12331, 611, 6060, 19778, 318, 6565]",0.5,1987,sast_risk,313,Use of iloc can lead to IndexError if DataFrame is empty,Low,1983,    pass,"[220, 220, 220, 1208]"
üß† ML Signal: Calculation of percentage change,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 5873, 1487]",1.0,1991,ml_signal,313,Calculation of percentage change,,1987,    pass,"[220, 220, 220, 1208]"
‚úÖ Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,1995,best_practice,313,Consider adding type hints for the function parameters and return type for better readability and maintainability.,,1991,    pass,"[220, 220, 220, 1208]"
‚úÖ Best Practice: Early return for empty DataFrame improves code readability and efficiency.,"[26486, 227, 6705, 19939, 25, 12556, 1441, 329, 6565, 6060, 19778, 19575, 2438, 1100, 1799, 290, 9332, 13]",0.5,2016,best_practice,321,Early return for empty DataFrame improves code readability and efficiency.,,1995,    def retry(cls):  # pylint: disable=E0213,"[220, 220, 220, 825, 1005, 563, 7, 565, 82, 2599, 220, 1303, 279, 2645, 600, 25, 15560, 28, 36, 2999, 1485]"
üß† ML Signal: Extracting the symbol from the DataFrame could be a feature for ML models.,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 262, 6194, 422, 262, 6060, 19778, 714, 307, 257, 3895, 329, 10373, 4981, 13]",0.5,2032,ml_signal,324,Extracting the symbol from the DataFrame could be a feature for ML models.,,2016,        Yahoo Finance unfortunately does not keep track of some,"[220, 220, 220, 220, 220, 220, 220, 16551, 15007, 12716, 857, 407, 1394, 2610, 286, 617]"
‚úÖ Best Practice: Using deepcopy to avoid modifying the original COLUMNS list.,"[26486, 227, 6705, 19939, 25, 8554, 2769, 30073, 284, 3368, 30620, 262, 2656, 20444, 5883, 8035, 1351, 13]",1.0,2032,best_practice,326,Using deepcopy to avoid modifying the original COLUMNS list.,,2032,,[]
‚úÖ Best Practice: Copying the DataFrame to avoid modifying the original data.,"[26486, 227, 6705, 19939, 25, 6955, 1112, 262, 6060, 19778, 284, 3368, 30620, 262, 2656, 1366, 13]",1.0,2055,best_practice,328,Copying the DataFrame to avoid modifying the original data.,,2032,"        set to 5 will keep trying to get the stock data up to 5 times,","[220, 220, 220, 220, 220, 220, 220, 900, 284, 642, 481, 1394, 2111, 284, 651, 262, 4283, 1366, 510, 284, 642, 1661, 11]"
‚úÖ Best Practice: Setting the index for better DataFrame operations.,"[26486, 227, 6705, 19939, 25, 25700, 262, 6376, 329, 1365, 6060, 19778, 4560, 13]",1.0,2055,best_practice,330,Setting the index for better DataFrame operations.,,2055,,[]
‚úÖ Best Practice: Ensuring the index is in datetime format for time series operations.,"[26486, 227, 6705, 19939, 25, 48221, 870, 262, 6376, 318, 287, 4818, 8079, 5794, 329, 640, 2168, 4560, 13]",1.0,2055,best_practice,330,Ensuring the index is in datetime format for time series operations.,,2055,,[]
‚úÖ Best Practice: Removing timezone information for consistency.,"[26486, 227, 6705, 19939, 25, 3982, 5165, 640, 11340, 1321, 329, 15794, 13]",1.0,2055,best_practice,330,Removing timezone information for consistency.,,2055,,[]
‚úÖ Best Practice: Removing duplicate indices to ensure data integrity.,"[26486, 227, 6705, 19939, 25, 3982, 5165, 23418, 36525, 284, 4155, 1366, 11540, 13]",1.0,2068,best_practice,338,Removing duplicate indices to ensure data integrity.,,2055,        raise NotImplementedError,"[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331]"
‚úÖ Best Practice: Reindexing to align with a given calendar list.,"[26486, 227, 6705, 19939, 25, 797, 9630, 278, 284, 10548, 351, 257, 1813, 11845, 1351, 13]",1.0,2068,best_practice,339,Reindexing to align with a given calendar list.,,2068,,[]
‚úÖ Best Practice: Sorting the index to maintain chronological order.,"[26486, 227, 6705, 19939, 25, 311, 24707, 262, 6376, 284, 5529, 45946, 1502, 13]",0.5,2080,best_practice,348,Sorting the index to maintain chronological order.,,2068,    def download_index_data(self):,"[220, 220, 220, 825, 4321, 62, 9630, 62, 7890, 7, 944, 2599]"
"‚ö†Ô∏è SAST Risk (Low): Potential for division by zero or NaN values in volume, ensure proper handling.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 7297, 416, 6632, 393, 11013, 45, 3815, 287, 6115, 11, 4155, 1774, 9041, 13]",0.5,2080,sast_risk,350,"Potential for division by zero or NaN values in volume, ensure proper handling.",Low,2080,,[]
üß† ML Signal: Calculating change could be a feature for ML models.,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 1487, 714, 307, 257, 3895, 329, 10373, 4981, 13]",0.5,2100,ml_signal,352,Calculating change could be a feature for ML models.,,2080,        return code_to_fname(symbol).upper(),"[220, 220, 220, 220, 220, 220, 220, 1441, 2438, 62, 1462, 62, 69, 3672, 7, 1837, 23650, 737, 45828, 3419]"
üß† ML Signal: Repeated calculation of change could indicate a pattern for ML models.,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 17952, 286, 1487, 714, 7603, 257, 3912, 329, 10373, 4981, 13]",0.5,2113,ml_signal,356,Repeated calculation of change could indicate a pattern for ML models.,,2100,"        return ""Brazil/East""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 39190, 14, 25234, 1]"
‚ö†Ô∏è SAST Risk (Low): Ensure that division by 100 does not lead to unintended data corruption.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 7297, 416, 1802, 857, 407, 1085, 284, 30261, 1366, 9253, 13]",0.5,2113,sast_risk,362,Ensure that division by 100 does not lead to unintended data corruption.,Low,2113,,[]
"‚ö†Ô∏è SAST Risk (Low): Potential for logging sensitive information, ensure proper logging practices.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 18931, 8564, 1321, 11, 4155, 1774, 18931, 6593, 13]",0.5,2113,sast_risk,366,"Potential for logging sensitive information, ensure proper logging practices.",Low,2113,,[]
üß† ML Signal: Final change calculation could be a feature for ML models.,"[8582, 100, 254, 10373, 26484, 25, 8125, 1487, 17952, 714, 307, 257, 3895, 329, 10373, 4981, 13]",0.5,2119,ml_signal,371,Final change calculation could be a feature for ML models.,,2113,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
‚ö†Ô∏è SAST Risk (Low): Ensure that setting NaN values does not lead to data loss.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 4634, 11013, 45, 3815, 857, 407, 1085, 284, 1366, 2994, 13]",0.5,2144,sast_risk,374,Ensure that setting NaN values does not lead to data loss.,Low,2119,"        _tmp_series = df[""close""].fillna(method=""ffill"")","[220, 220, 220, 220, 220, 220, 220, 4808, 22065, 62, 25076, 796, 47764, 14692, 19836, 1, 4083, 20797, 2616, 7, 24396, 2625, 487, 359, 4943]"
‚úÖ Best Practice: Ensuring the symbol field is consistently set.,"[26486, 227, 6705, 19939, 25, 48221, 870, 262, 6194, 2214, 318, 9835, 900, 13]",0.5,2159,best_practice,376,Ensuring the symbol field is consistently set.,,2144,        if last_close is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 938, 62, 19836, 318, 407, 6045, 25]"
‚úÖ Best Practice: Naming the index for clarity.,"[26486, 227, 6705, 19939, 25, 399, 3723, 262, 6376, 329, 16287, 13]",1.0,2183,best_practice,378,Naming the index for clarity.,,2159,        change_series = _tmp_series / _tmp_shift_series - 1,"[220, 220, 220, 220, 220, 220, 220, 1487, 62, 25076, 796, 4808, 22065, 62, 25076, 1220, 4808, 22065, 62, 30846, 62, 25076, 532, 352]"
‚úÖ Best Practice: Resetting the index to return a DataFrame with a default integer index.,"[26486, 227, 6705, 19939, 25, 30027, 889, 262, 6376, 284, 1441, 257, 6060, 19778, 351, 257, 4277, 18253, 6376, 13]",0.5,2183,best_practice,380,Resetting the index to return a DataFrame with a default integer index.,,2183,,[]
üß† ML Signal: Method signature with type hints indicating input and output types,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 2099, 20269, 12739, 5128, 290, 5072, 3858]",0.5,2183,ml_signal,362,Method signature with type hints indicating input and output types,,2183,,[]
üß† ML Signal: Chaining method calls for data transformation,"[8582, 100, 254, 10373, 26484, 25, 609, 1397, 2446, 3848, 329, 1366, 13389]",1.0,2190,ml_signal,364,Chaining method calls for data transformation,,2183,    retry = 2,"[220, 220, 220, 1005, 563, 796, 362]"
üß† ML Signal: Returning a DataFrame after processing,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 706, 7587]",1.0,2190,ml_signal,366,Returning a DataFrame after processing,,2190,,[]
‚úÖ Best Practice: Use of abstract method to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 286, 12531, 2446, 284, 4605, 7822, 287, 850, 37724]",1.0,2208,best_practice,369,Use of abstract method to enforce implementation in subclasses,,2190,"    DAILY_FORMAT = ""%Y-%m-%d""","[220, 220, 220, 17051, 33340, 62, 21389, 1404, 796, 36521, 56, 12, 4, 76, 12, 4, 67, 1]"
"‚úÖ Best Practice: Method docstring is present, providing a brief description of the method.","[26486, 227, 6705, 19939, 25, 11789, 2205, 8841, 318, 1944, 11, 4955, 257, 4506, 6764, 286, 262, 2446, 13]",1.0,2208,best_practice,366,"Method docstring is present, providing a brief description of the method.",,2208,,[]
"‚ö†Ô∏è SAST Risk (Low): Method is not implemented, which could lead to runtime errors if called.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 318, 407, 9177, 11, 543, 714, 1085, 284, 19124, 8563, 611, 1444, 13]",0.5,2226,sast_risk,369,"Method is not implemented, which could lead to runtime errors if called.",Low,2208,"    DAILY_FORMAT = ""%Y-%m-%d""","[220, 220, 220, 17051, 33340, 62, 21389, 1404, 796, 36521, 56, 12, 4, 76, 12, 4, 67, 1]"
‚úÖ Best Practice: Class name should follow CamelCase naming convention,"[26486, 227, 6705, 19939, 25, 5016, 1438, 815, 1061, 43281, 20448, 19264, 9831]",0.5,2244,best_practice,369,Class name should follow CamelCase naming convention,,2226,"    DAILY_FORMAT = ""%Y-%m-%d""","[220, 220, 220, 17051, 33340, 62, 21389, 1404, 796, 36521, 56, 12, 4, 76, 12, 4, 67, 1]"
‚úÖ Best Practice: Constants should be in uppercase to distinguish them from variables,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 287, 334, 39921, 589, 284, 15714, 606, 422, 9633]",1.0,2250,best_practice,371,Constants should be in uppercase to distinguish them from variables,,2244,    @staticmethod,"[220, 220, 220, 2488, 12708, 24396]"
‚úÖ Best Practice: Check for empty DataFrame to avoid unnecessary processing,"[26486, 227, 6705, 19939, 25, 6822, 329, 6565, 6060, 19778, 284, 3368, 13114, 7587]",1.0,2278,best_practice,372,Check for empty DataFrame to avoid unnecessary processing,,2250,"    def calc_change(df: pd.DataFrame, last_close: float) -> pd.Series:","[220, 220, 220, 825, 42302, 62, 3803, 7, 7568, 25, 279, 67, 13, 6601, 19778, 11, 938, 62, 19836, 25, 12178, 8, 4613, 279, 67, 13, 27996, 25]"
‚úÖ Best Practice: Use copy to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 4866, 284, 3368, 30620, 262, 2656, 6060, 19778]",1.0,2301,best_practice,375,Use copy to avoid modifying the original DataFrame,,2278,        _tmp_shift_series = _tmp_series.shift(1),"[220, 220, 220, 220, 220, 220, 220, 4808, 22065, 62, 30846, 62, 25076, 796, 4808, 22065, 62, 25076, 13, 30846, 7, 16, 8]"
‚úÖ Best Practice: Set index for easier time-series manipulation,"[26486, 227, 6705, 19939, 25, 5345, 6376, 329, 4577, 640, 12, 25076, 17512]",1.0,2331,best_practice,377,Set index for easier time-series manipulation,,2301,            _tmp_shift_series.iloc[0] = float(last_close),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 22065, 62, 30846, 62, 25076, 13, 346, 420, 58, 15, 60, 796, 12178, 7, 12957, 62, 19836, 8]"
‚úÖ Best Practice: Calculate adjustment factor for price adjustments,"[26486, 227, 6705, 19939, 25, 27131, 378, 15068, 5766, 329, 2756, 16895]",1.0,2331,best_practice,380,Calculate adjustment factor for price adjustments,,2331,,[]
‚úÖ Best Practice: Forward fill to handle missing values in adjustment factor,"[26486, 227, 6705, 19939, 25, 19530, 6070, 284, 5412, 4814, 3815, 287, 15068, 5766]",1.0,2340,best_practice,382,Forward fill to handle missing values in adjustment factor,,2331,    def normalize_yahoo(,"[220, 220, 220, 825, 3487, 1096, 62, 40774, 7]"
‚úÖ Best Practice: Default factor to 1 when 'adjclose' is not present,"[26486, 227, 6705, 19939, 25, 15161, 5766, 284, 352, 618, 705, 41255, 19836, 6, 318, 407, 1944]",1.0,2358,best_practice,385,Default factor to 1 when 'adjclose' is not present,,2340,"        date_field_name: str = ""date"",","[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965, 796, 366, 4475, 1600]"
‚úÖ Best Practice: Check if column exists before processing,"[26486, 227, 6705, 19939, 25, 6822, 611, 5721, 7160, 878, 7587]",1.0,2362,best_practice,388,Check if column exists before processing,,2358,    ):,"[220, 220, 220, 15179]"
‚úÖ Best Practice: Adjust volume by dividing with factor,"[26486, 227, 6705, 19939, 25, 20292, 6115, 416, 27241, 351, 5766]",1.0,2385,best_practice,392,Adjust volume by dividing with factor,,2362,        columns = copy.deepcopy(YahooNormalize.COLUMNS),"[220, 220, 220, 220, 220, 220, 220, 15180, 796, 4866, 13, 22089, 30073, 7, 56, 12992, 26447, 1096, 13, 25154, 5883, 8035, 8]"
‚úÖ Best Practice: Adjust price-related columns by multiplying with factor,"[26486, 227, 6705, 19939, 25, 20292, 2756, 12, 5363, 15180, 416, 48816, 351, 5766]",1.0,2408,best_practice,395,Adjust price-related columns by multiplying with factor,,2385,        df.index = pd.to_datetime(df.index),"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 9630, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 13, 9630, 8]"
‚úÖ Best Practice: Ensure index name is set correctly for clarity,"[26486, 227, 6705, 19939, 25, 48987, 6376, 1438, 318, 900, 9380, 329, 16287]",1.0,2431,best_practice,395,Ensure index name is set correctly for clarity,,2408,        df.index = pd.to_datetime(df.index),"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 9630, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 13, 9630, 8]"
‚úÖ Best Practice: Reset index to return DataFrame to original structure,"[26486, 227, 6705, 19939, 25, 30027, 6376, 284, 1441, 6060, 19778, 284, 2656, 4645]",1.0,2459,best_practice,400,Reset index to return DataFrame to original structure,,2431,                pd.DataFrame(index=calendar_list),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 6601, 19778, 7, 9630, 28, 9948, 9239, 62, 4868, 8]"
‚úÖ Best Practice: Use of type hints for function parameters and return type improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,2493,best_practice,391,Use of type hints for function parameters and return type improves code readability and maintainability.,,2459,"        symbol = df.loc[df[symbol_field_name].first_valid_index(), symbol_field_name]","[220, 220, 220, 220, 220, 220, 220, 6194, 796, 47764, 13, 17946, 58, 7568, 58, 1837, 23650, 62, 3245, 62, 3672, 4083, 11085, 62, 12102, 62, 9630, 22784, 6194, 62, 3245, 62, 3672, 60]"
"üß† ML Signal: Use of inheritance and method overriding, which is a common pattern in object-oriented programming.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 24155, 290, 2446, 44987, 11, 543, 318, 257, 2219, 3912, 287, 2134, 12, 17107, 8300, 13]",0.5,2506,ml_signal,393,"Use of inheritance and method overriding, which is a common pattern in object-oriented programming.",,2493,        df = df.copy(),"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 30073, 3419]"
"üß† ML Signal: Chaining method calls on a DataFrame, indicating a data transformation process.","[8582, 100, 254, 10373, 26484, 25, 609, 1397, 2446, 3848, 319, 257, 6060, 19778, 11, 12739, 257, 1366, 13389, 1429, 13]",0.5,2529,ml_signal,395,"Chaining method calls on a DataFrame, indicating a data transformation process.",,2506,        df.index = pd.to_datetime(df.index),"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 9630, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 13, 9630, 8]"
‚úÖ Best Practice: Explicit return of the DataFrame makes the function's behavior clear.,"[26486, 227, 6705, 19939, 25, 11884, 1441, 286, 262, 6060, 19778, 1838, 262, 2163, 338, 4069, 1598, 13]",0.5,2552,best_practice,395,Explicit return of the DataFrame makes the function's behavior clear.,,2529,        df.index = pd.to_datetime(df.index),"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 9630, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 13, 9630, 8]"
‚úÖ Best Practice: Docstring provides a clear explanation of the method's purpose and usage.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 7468, 286, 262, 2446, 338, 4007, 290, 8748, 13]",0.5,2575,best_practice,395,Docstring provides a clear explanation of the method's purpose and usage.,,2552,        df.index = pd.to_datetime(df.index),"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 9630, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 13, 9630, 8]"
‚úÖ Best Practice: Using .loc with first_valid_index() ensures that the DataFrame is sliced correctly from the first valid 'close' value.,"[26486, 227, 6705, 19939, 25, 8554, 764, 17946, 351, 717, 62, 12102, 62, 9630, 3419, 19047, 326, 262, 6060, 19778, 318, 26790, 9380, 422, 262, 717, 4938, 705, 19836, 6, 1988, 13]",0.5,2593,best_practice,401,Using .loc with first_valid_index() ensures that the DataFrame is sliced correctly from the first valid 'close' value.,,2575,                .loc[,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 17946, 58]"
‚ö†Ô∏è SAST Risk (Low): Assumes 'close' column always has at least one valid entry; potential IndexError if DataFrame is empty or all NaN.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 19836, 6, 5721, 1464, 468, 379, 1551, 530, 4938, 5726, 26, 2785, 12901, 12331, 611, 6060, 19778, 318, 6565, 393, 477, 11013, 45, 13]",0.5,2628,sast_risk,403,Assumes 'close' column always has at least one valid entry; potential IndexError if DataFrame is empty or all NaN.,Low,2593,"                    + pd.Timedelta(hours=23, minutes=59)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1343, 279, 67, 13, 14967, 276, 12514, 7, 24425, 28, 1954, 11, 2431, 28, 3270, 8]"
"üß† ML Signal: Returns the first non-zero 'close' value, which could be a feature in financial models.","[8582, 100, 254, 10373, 26484, 25, 16409, 262, 717, 1729, 12, 22570, 705, 19836, 6, 1988, 11, 543, 714, 307, 257, 3895, 287, 3176, 4981, 13]",0.5,2645,ml_signal,405,"Returns the first non-zero 'close' value, which could be a feature in financial models.",,2628,                .index,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 9630]"
‚úÖ Best Practice: Check for empty DataFrame to avoid unnecessary processing,"[26486, 227, 6705, 19939, 25, 6822, 329, 6565, 6060, 19778, 284, 3368, 13114, 7587]",1.0,2662,best_practice,405,Check for empty DataFrame to avoid unnecessary processing,,2645,                .index,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 9630]"
‚úÖ Best Practice: Use copy to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 4866, 284, 3368, 30620, 262, 2656, 6060, 19778]",1.0,2715,best_practice,408,Use copy to avoid modifying the original DataFrame,,2662,"        df.loc[(df[""volume""] <= 0) | np.isnan(df[""volume""]), list(set(df.columns) - {symbol_field_name})] = np.nan","[220, 220, 220, 220, 220, 220, 220, 47764, 13, 17946, 58, 7, 7568, 14692, 29048, 8973, 19841, 657, 8, 930, 45941, 13, 271, 12647, 7, 7568, 14692, 29048, 8973, 828, 1351, 7, 2617, 7, 7568, 13, 28665, 82, 8, 532, 1391, 1837, 23650, 62, 3245, 62, 3672, 92, 15437, 796, 45941, 13, 12647]"
‚úÖ Best Practice: Sort DataFrame to ensure operations are performed in the correct order,"[26486, 227, 6705, 19939, 25, 33947, 6060, 19778, 284, 4155, 4560, 389, 6157, 287, 262, 3376, 1502]",1.0,2741,best_practice,410,Sort DataFrame to ensure operations are performed in the correct order,,2715,"        change_series = YahooNormalize.calc_change(df, last_close)","[220, 220, 220, 220, 220, 220, 220, 1487, 62, 25076, 796, 16551, 26447, 1096, 13, 9948, 66, 62, 3803, 7, 7568, 11, 938, 62, 19836, 8]"
‚úÖ Best Practice: Set index for easier data manipulation,"[26486, 227, 6705, 19939, 25, 5345, 6376, 329, 4577, 1366, 17512]",1.0,2783,best_practice,412,Set index for easier data manipulation,,2741,"        # WARNING: If it is normal for a `symbol(exchange)` to differ by a factor of *89* to *111* for consecutive trading days,","[220, 220, 220, 220, 220, 220, 220, 1303, 39410, 25, 1002, 340, 318, 3487, 329, 257, 4600, 1837, 23650, 7, 1069, 3803, 8, 63, 284, 13238, 416, 257, 5766, 286, 1635, 4531, 9, 284, 1635, 16243, 9, 329, 12785, 7313, 1528, 11]"
üß† ML Signal: Usage of a helper function to retrieve specific data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 31904, 2163, 284, 19818, 2176, 1366]",1.0,2794,ml_signal,414,Usage of a helper function to retrieve specific data,,2783,        _count = 0,"[220, 220, 220, 220, 220, 220, 220, 4808, 9127, 796, 657]"
‚úÖ Best Practice: Use of continue to skip unnecessary iterations,"[26486, 227, 6705, 19939, 25, 5765, 286, 2555, 284, 14267, 13114, 34820]",0.5,2824,best_practice,417,Use of continue to skip unnecessary iterations,,2794,"            change_series = YahooNormalize.calc_change(df, last_close)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1487, 62, 25076, 796, 16551, 26447, 1096, 13, 9948, 66, 62, 3803, 7, 7568, 11, 938, 62, 19836, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for integer overflow if volume and _close are large,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 18253, 30343, 611, 6115, 290, 4808, 19836, 389, 1588]",1.0,2840,sast_risk,420,Potential for integer overflow if volume and _close are large,Low,2824,                break,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2270]"
‚ö†Ô∏è SAST Risk (Low): Division by zero risk if _close is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7458, 416, 6632, 2526, 611, 4808, 19836, 318, 6632]",1.0,2855,sast_risk,423,Division by zero risk if _close is zero,Low,2840,            _count += 1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 9127, 15853, 352]"
‚úÖ Best Practice: Reset index to maintain original DataFrame structure,"[26486, 227, 6705, 19939, 25, 30027, 6376, 284, 5529, 2656, 6060, 19778, 4645]",1.0,2870,best_practice,423,Reset index to maintain original DataFrame structure,,2855,            _count += 1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 9127, 15853, 352]"
"üß† ML Signal: Inheritance from a base class, indicating a pattern of extending functionality","[8582, 100, 254, 10373, 26484, 25, 47025, 42942, 422, 257, 2779, 1398, 11, 12739, 257, 3912, 286, 16610, 11244]",0.5,2888,ml_signal,419,"Inheritance from a base class, indicating a pattern of extending functionality",,2870,            if not _mask.any():,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 407, 4808, 27932, 13, 1092, 33529]"
‚úÖ Best Practice: Docstring provides clear parameter descriptions and default values,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 11507, 16969, 290, 4277, 3815]",0.5,2903,best_practice,423,Docstring provides clear parameter descriptions and default values,,2888,            _count += 1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 9127, 15853, 352]"
‚úÖ Best Practice: Explicitly calling the superclass constructor,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 23772]",0.5,2903,best_practice,434,Explicitly calling the superclass constructor,,2903,,[]
üß† ML Signal: Usage of financial data column names,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3176, 1366, 5721, 3891]",0.5,2923,ml_signal,436,Usage of financial data column names,,2903,        df.index.names = [date_field_name],"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 9630, 13, 14933, 796, 685, 4475, 62, 3245, 62, 3672, 60]"
üß† ML Signal: Loading data from a specified directory,"[8582, 100, 254, 10373, 26484, 25, 12320, 1366, 422, 257, 7368, 8619]",0.5,2923,ml_signal,438,Loading data from a specified directory,,2923,,[]
‚úÖ Best Practice: Type hinting for function parameters improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,2943,best_practice,436,Type hinting for function parameters improves code readability and maintainability,,2923,        df.index.names = [date_field_name],"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 9630, 13, 14933, 796, 685, 4475, 62, 3245, 62, 3672, 60]"
‚úÖ Best Practice: Converting path to string and resolving it ensures consistent path format,"[26486, 227, 6705, 19939, 25, 35602, 889, 3108, 284, 4731, 290, 31038, 340, 19047, 6414, 3108, 5794]",1.0,2943,best_practice,438,Converting path to string and resolving it ensures consistent path format,,2943,,[]
‚ö†Ô∏è SAST Risk (Low): Initialization with external data directory could lead to data integrity issues if not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 20768, 1634, 351, 7097, 1366, 8619, 714, 1085, 284, 1366, 11540, 2428, 611, 407, 31031]",0.5,2953,sast_risk,440,Initialization with external data directory could lead to data integrity issues if not validated,Low,2943,        # normalize,"[220, 220, 220, 220, 220, 220, 220, 1303, 3487, 1096]"
üß† ML Signal: Usage of D.features suggests data extraction for ML model training or analysis,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 360, 13, 40890, 5644, 1366, 22236, 329, 10373, 2746, 3047, 393, 3781]",0.5,2963,ml_signal,442,Usage of D.features suggests data extraction for ML model training or analysis,,2953,        # adjusted price,"[220, 220, 220, 220, 220, 220, 220, 1303, 12328, 2756]"
‚úÖ Best Practice: Explicitly setting DataFrame columns improves code clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6060, 19778, 15180, 19575, 2438, 16287]",0.5,2972,best_practice,444,Explicitly setting DataFrame columns improves code clarity,,2963,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
üß† ML Signal: Use of inheritance and method overriding,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 24155, 290, 2446, 44987]",0.5,2989,ml_signal,443,Use of inheritance and method overriding,,2972,        df = self.adjusted_price(df),"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 2116, 13, 29117, 62, 20888, 7, 7568, 8]"
‚úÖ Best Practice: Setting index for DataFrame for efficient data manipulation,"[26486, 227, 6705, 19939, 25, 25700, 6376, 329, 6060, 19778, 329, 6942, 1366, 17512]",0.5,2989,best_practice,445,Setting index for DataFrame for efficient data manipulation,,2989,,[]
üß† ML Signal: Accessing DataFrame columns using dynamic field names,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 1262, 8925, 2214, 3891]",0.5,3014,ml_signal,447,Accessing DataFrame columns using dynamic field names,,2989,"    def adjusted_price(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 12328, 62, 20888, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
üß† ML Signal: Use of unique values from DataFrame for conditional logic,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3748, 3815, 422, 6060, 19778, 329, 26340, 9156]",0.5,3034,ml_signal,449,Use of unique values from DataFrame for conditional logic,,3014,"        raise NotImplementedError(""rewrite adjusted_price"")","[220, 220, 220, 220, 220, 220, 220, 5298, 1892, 3546, 1154, 12061, 12331, 7203, 1809, 6525, 12328, 62, 20888, 4943]"
‚úÖ Best Practice: Resetting index before returning DataFrame,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 878, 8024, 6060, 19778]",0.5,3048,best_practice,452,Resetting index before returning DataFrame,,3034,"class YahooNormalize1d(YahooNormalize, ABC):","[4871, 16551, 26447, 1096, 16, 67, 7, 56, 12992, 26447, 1096, 11, 9738, 2599]"
üß† ML Signal: Conditional data selection based on symbol name,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 1366, 6356, 1912, 319, 6194, 1438]",0.5,3048,ml_signal,454,Conditional data selection based on symbol name,,3048,,[]
üß† ML Signal: Use of DataFrame indexing to find latest date,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6060, 19778, 6376, 278, 284, 1064, 3452, 3128]",0.5,3060,ml_signal,456,Use of DataFrame indexing to find latest date,,3048,        if df.empty:,"[220, 220, 220, 220, 220, 220, 220, 611, 47764, 13, 28920, 25]"
üß† ML Signal: Slicing DataFrame based on date,"[8582, 100, 254, 10373, 26484, 25, 311, 677, 278, 6060, 19778, 1912, 319, 3128]",0.5,3073,ml_signal,458,Slicing DataFrame based on date,,3060,        df = df.copy(),"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 30073, 3419]"
üß† ML Signal: Accessing first row of DataFrame for comparison,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 717, 5752, 286, 6060, 19778, 329, 7208]",0.5,3088,ml_signal,460,Accessing first row of DataFrame for comparison,,3073,"        if ""adjclose"" in df:","[220, 220, 220, 220, 220, 220, 220, 611, 366, 41255, 19836, 1, 287, 47764, 25]"
üß† ML Signal: Accessing specific row in DataFrame for comparison,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 5752, 287, 6060, 19778, 329, 7208]",0.5,3117,ml_signal,462,Accessing specific row in DataFrame for comparison,,3088,"            df[""factor""] = df[""factor""].fillna(method=""ffill"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 31412, 8973, 796, 47764, 14692, 31412, 1, 4083, 20797, 2616, 7, 24396, 2625, 487, 359, 4943]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if new_latest_data[col] is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 649, 62, 42861, 62, 7890, 58, 4033, 60, 318, 6632]",1.0,3138,sast_risk,466,Potential division by zero if new_latest_data[col] is zero,Low,3117,            if _col not in df.columns:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 4808, 4033, 407, 287, 47764, 13, 28665, 82, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero if new_latest_data[col] is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 649, 62, 42861, 62, 7890, 58, 4033, 60, 318, 6632]",1.0,3167,sast_risk,469,Potential division by zero if new_latest_data[col] is zero,Low,3138,"                df[_col] = df[_col] / df[""factor""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 29795, 4033, 60, 796, 47764, 29795, 4033, 60, 1220, 47764, 14692, 31412, 8973]"
‚úÖ Best Practice: Dropping the first row and resetting index before returning DataFrame,"[26486, 227, 6705, 19939, 25, 21045, 2105, 262, 717, 5752, 290, 13259, 889, 6376, 878, 8024, 6060, 19778]",0.5,3196,best_practice,469,Dropping the first row and resetting index before returning DataFrame,,3167,"                df[_col] = df[_col] / df[""factor""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 29795, 4033, 60, 796, 47764, 29795, 4033, 60, 1220, 47764, 14692, 31412, 8973]"
‚úÖ Best Practice: Constants should be defined at the class level for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 5447, 379, 262, 1398, 1241, 329, 16287, 290, 5529, 1799]",0.5,3225,best_practice,462,Constants should be defined at the class level for clarity and maintainability,,3196,"            df[""factor""] = df[""factor""].fillna(method=""ffill"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 31412, 8973, 796, 47764, 14692, 31412, 1, 4083, 20797, 2616, 7, 24396, 2625, 487, 359, 4943]"
‚úÖ Best Practice: Constants should be defined at the class level for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 5447, 379, 262, 1398, 1241, 329, 16287, 290, 5529, 1799]",0.5,3242,best_practice,464,Constants should be defined at the class level for clarity and maintainability,,3225,"            df[""factor""] = 1","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 14692, 31412, 8973, 796, 352]"
‚úÖ Best Practice: Constants should be defined at the class level for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 5447, 379, 262, 1398, 1241, 329, 16287, 290, 5529, 1799]",0.5,3263,best_practice,466,Constants should be defined at the class level for clarity and maintainability,,3242,            if _col not in df.columns:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 4808, 4033, 407, 287, 47764, 13, 28665, 82, 25]"
‚úÖ Best Practice: Constants should be defined at the class level for clarity and maintainability,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 5447, 379, 262, 1398, 1241, 329, 16287, 290, 5529, 1799]",0.5,3292,best_practice,469,Constants should be defined at the class level for clarity and maintainability,,3263,"                df[_col] = df[_col] / df[""factor""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 29795, 4033, 60, 796, 47764, 29795, 4033, 60, 1220, 47764, 14692, 31412, 8973]"
‚úÖ Best Practice: Use of type hints for function parameters improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 20269, 329, 2163, 10007, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,3321,best_practice,469,Use of type hints for function parameters improves code readability and maintainability.,,3292,"                df[_col] = df[_col] / df[""factor""]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 29795, 4033, 60, 796, 47764, 29795, 4033, 60, 1220, 47764, 14692, 31412, 8973]"
‚úÖ Best Practice: Calling the superclass's __init__ method ensures proper initialization of the base class.,"[26486, 227, 6705, 19939, 25, 32677, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 19047, 1774, 37588, 286, 262, 2779, 1398, 13]",1.0,3345,best_practice,480,Calling the superclass's __init__ method ensures proper initialization of the base class.,,3321,"    def _get_first_close(self, df: pd.DataFrame) -> float:","[220, 220, 220, 825, 4808, 1136, 62, 11085, 62, 19836, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 12178, 25]"
üß† ML Signal: Initialization of qlib with a specific data directory could indicate a pattern for data loading.,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 10662, 8019, 351, 257, 2176, 1366, 8619, 714, 7603, 257, 3912, 329, 1366, 11046, 13]",1.0,3345,ml_signal,482,Initialization of qlib with a specific data directory could indicate a pattern for data loading.,,3345,,[]
üß† ML Signal: Loading features from a data source is a common pattern in data processing pipelines.,"[8582, 100, 254, 10373, 26484, 25, 12320, 3033, 422, 257, 1366, 2723, 318, 257, 2219, 3912, 287, 1366, 7587, 31108, 13]",1.0,3353,ml_signal,483,Loading features from a data source is a common pattern in data processing pipelines.,,3345,        Notes,"[220, 220, 220, 220, 220, 220, 220, 11822]"
‚úÖ Best Practice: Explicitly specify the return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 11884, 306, 11986, 262, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,3361,best_practice,483,Explicitly specify the return type for better readability and maintainability.,,3353,        Notes,"[220, 220, 220, 220, 220, 220, 220, 11822]"
"üß† ML Signal: Usage of a method to convert a calendar to a list, indicating a pattern of data transformation.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 284, 10385, 257, 11845, 284, 257, 1351, 11, 12739, 257, 3912, 286, 1366, 13389, 13]",0.5,3403,ml_signal,485,"Usage of a method to convert a calendar to a list, indicating a pattern of data transformation.",,3361,"            For incremental updates(append) to Yahoo 1D data, user need to use a close that is not 0 on the first trading day of the existing data","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1114, 29497, 5992, 7, 33295, 8, 284, 16551, 352, 35, 1366, 11, 2836, 761, 284, 779, 257, 1969, 326, 318, 407, 657, 319, 262, 717, 7313, 1110, 286, 262, 4683, 1366]"
"‚úÖ Best Practice: Use of @property decorator to define a method as a property, improving code readability and encapsulation.","[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 284, 8160, 257, 2446, 355, 257, 3119, 11, 10068, 2438, 1100, 1799, 290, 32652, 1741, 13]",0.5,3429,best_practice,487,"Use of @property decorator to define a method as a property, improving code readability and encapsulation.",,3403,"        df = df.loc[df[""close""].first_valid_index() :]","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 17946, 58, 7568, 14692, 19836, 1, 4083, 11085, 62, 12102, 62, 9630, 3419, 1058, 60]"
üß† ML Signal: Use of getattr to check for cached attribute,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 651, 35226, 284, 2198, 329, 39986, 11688]",1.0,3437,ml_signal,486,Use of getattr to check for cached attribute,,3429,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Lazy initialization pattern,"[8582, 100, 254, 10373, 26484, 25, 406, 12582, 37588, 3912]",1.0,3447,ml_signal,489,Lazy initialization pattern,,3437,        return _close,"[220, 220, 220, 220, 220, 220, 220, 1441, 4808, 19836]"
üß† ML Signal: Use of setattr to cache computed value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 900, 35226, 284, 12940, 29231, 1988]",1.0,3476,ml_signal,491,Use of setattr to cache computed value,,3447,"    def _manual_adj_data(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 4808, 805, 723, 62, 41255, 62, 7890, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
üß† ML Signal: Method signature and parameter types can be used to infer function usage patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 290, 11507, 3858, 460, 307, 973, 284, 13249, 2163, 8748, 7572]",0.5,3505,ml_signal,491,Method signature and parameter types can be used to infer function usage patterns,,3476,"    def _manual_adj_data(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 4808, 805, 723, 62, 41255, 62, 7890, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
üß† ML Signal: Function call with specific parameters can indicate common usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 460, 7603, 2219, 8748, 7572]",1.0,3535,ml_signal,492,Function call with specific parameters can indicate common usage patterns,,3505,"        """"""manual adjust data: All fields (except change) are standardized according to the close of the first day""""""","[220, 220, 220, 220, 220, 220, 220, 37227, 805, 723, 4532, 1366, 25, 1439, 7032, 357, 16341, 1487, 8, 389, 25713, 1864, 284, 262, 1969, 286, 262, 717, 1110, 37811]"
‚úÖ Best Practice: Use of descriptive parameter names improves code readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 11507, 3891, 19575, 2438, 1100, 1799]",0.5,3548,best_practice,494,Use of descriptive parameter names improves code readability,,3535,            return df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
üß† ML Signal: Method signature with type hints can be used to infer data processing patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 2099, 20269, 460, 307, 973, 284, 13249, 1366, 7587, 7572]",1.0,3574,ml_signal,496,Method signature with type hints can be used to infer data processing patterns,,3548,"        df.sort_values(self._date_field_name, inplace=True)","[220, 220, 220, 220, 220, 220, 220, 47764, 13, 30619, 62, 27160, 7, 944, 13557, 4475, 62, 3245, 62, 3672, 11, 287, 5372, 28, 17821, 8]"
‚úÖ Best Practice: Returning the DataFrame directly after processing,"[26486, 227, 6705, 19939, 25, 42882, 262, 6060, 19778, 3264, 706, 7587]",1.0,3587,best_practice,505,Returning the DataFrame directly after processing,,3574,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of abstract method to enforce implementation in subclasses,"[26486, 227, 6705, 19939, 25, 5765, 286, 12531, 2446, 284, 4605, 7822, 287, 850, 37724]",1.0,3587,best_practice,508,Use of abstract method to enforce implementation in subclasses,,3587,,[]
‚úÖ Best Practice: Raising NotImplementedError is a clear way to indicate that a method should be overridden.,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 318, 257, 1598, 835, 284, 7603, 326, 257, 2446, 815, 307, 23170, 4651, 13]",0.5,3587,best_practice,508,Raising NotImplementedError is a clear way to indicate that a method should be overridden.,,3587,,[]
‚úÖ Best Practice: Using abc.abstractmethod enforces that subclasses must implement this method.,"[26486, 227, 6705, 19939, 25, 8554, 450, 66, 13, 397, 8709, 24396, 551, 27087, 326, 850, 37724, 1276, 3494, 428, 2446, 13]",0.5,3603,best_practice,510,Using abc.abstractmethod enforces that subclasses must implement this method.,,3587,class YahooNormalize1dExtend(YahooNormalize1d):,"[4871, 16551, 26447, 1096, 16, 67, 11627, 437, 7, 56, 12992, 26447, 1096, 16, 67, 2599]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,3619,best_practice,510,Use of type hinting for return type improves code readability and maintainability,,3603,class YahooNormalize1dExtend(YahooNormalize1d):,"[4871, 16551, 26447, 1096, 16, 67, 11627, 437, 7, 56, 12992, 26447, 1096, 16, 67, 2599]"
‚úÖ Best Practice: Raising NotImplementedError is a clear way to indicate that a method should be overridden,"[26486, 227, 6705, 19939, 25, 7567, 1710, 1892, 3546, 1154, 12061, 12331, 318, 257, 1598, 835, 284, 7603, 326, 257, 2446, 815, 307, 23170, 4651]",1.0,3668,best_practice,512,Raising NotImplementedError is a clear way to indicate that a method should be overridden,,3619,"        self, old_qlib_data_dir: [str, Path], date_field_name: str = ""date"", symbol_field_name: str = ""symbol"", **kwargs","[220, 220, 220, 220, 220, 220, 220, 2116, 11, 1468, 62, 80, 8019, 62, 7890, 62, 15908, 25, 685, 2536, 11, 10644, 4357, 3128, 62, 3245, 62, 3672, 25, 965, 796, 366, 4475, 1600, 6194, 62, 3245, 62, 3672, 25, 965, 796, 366, 1837, 23650, 1600, 12429, 46265, 22046]"
üß† ML Signal: Method with a specific return type hint indicating expected output,"[8582, 100, 254, 10373, 26484, 25, 11789, 351, 257, 2176, 1441, 2099, 9254, 12739, 2938, 5072]",0.5,3672,ml_signal,513,Method with a specific return type hint indicating expected output,,3668,    ):,"[220, 220, 220, 15179]"
"üß† ML Signal: Calls a function with a specific string argument, indicating a pattern of usage","[8582, 100, 254, 10373, 26484, 25, 27592, 257, 2163, 351, 257, 2176, 4731, 4578, 11, 12739, 257, 3912, 286, 8748]",0.5,3672,ml_signal,515,"Calls a function with a specific string argument, indicating a pattern of usage",,3672,,[]
‚úÖ Best Practice: Use of inheritance to extend functionality from multiple parent classes,"[26486, 227, 6705, 19939, 25, 5765, 286, 24155, 284, 9117, 11244, 422, 3294, 2560, 6097]",0.5,3672,best_practice,515,Use of inheritance to extend functionality from multiple parent classes,,3672,,[]
‚úÖ Best Practice: Use of inheritance to extend functionality from multiple parent classes,"[26486, 227, 6705, 19939, 25, 5765, 286, 24155, 284, 9117, 11244, 422, 3294, 2560, 6097]",1.0,3681,best_practice,517,Use of inheritance to extend functionality from multiple parent classes,,3672,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Class definition should include a docstring to describe its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 284, 6901, 663, 4007, 290, 8748]",1.0,3728,best_practice,519,Class definition should include a docstring to describe its purpose and usage,,3681,"            the qlib data to be updated for yahoo, usually from: https://github.com/microsoft/qlib/tree/main/scripts#download-cn-data","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 262, 10662, 8019, 1366, 284, 307, 6153, 329, 331, 12992, 11, 3221, 422, 25, 3740, 1378, 12567, 13, 785, 14, 40485, 14, 80, 8019, 14, 21048, 14, 12417, 14, 46521, 2, 15002, 12, 31522, 12, 7890]"
‚úÖ Best Practice: Constants should be in uppercase to distinguish them from regular variables,"[26486, 227, 6705, 19939, 25, 4757, 1187, 815, 307, 287, 334, 39921, 589, 284, 15714, 606, 422, 3218, 9633]",0.5,3746,best_practice,521,Constants should be in uppercase to distinguish them from regular variables,,3728,"            date field name, default is date","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3128, 2214, 1438, 11, 4277, 318, 3128]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,3764,best_practice,521,Use of type hinting for return type improves code readability and maintainability,,3746,"            date field name, default is date","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3128, 2214, 1438, 11, 4277, 318, 3128]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError without context can make debugging difficult,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 1231, 4732, 460, 787, 28769, 2408]",1.0,3782,sast_risk,523,Raising a generic ValueError without context can make debugging difficult,Low,3764,"            symbol field name, default is symbol","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 2214, 1438, 11, 4277, 318, 6194]"
"üß† ML Signal: Method name suggests a private method, indicating encapsulation","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 257, 2839, 2446, 11, 12739, 32652, 1741]",1.0,3800,ml_signal,523,"Method name suggests a private method, indicating encapsulation",,3782,"            symbol field name, default is symbol","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 2214, 1438, 11, 4277, 318, 6194]"
"üß† ML Signal: Calls an external function, indicating a dependency","[8582, 100, 254, 10373, 26484, 25, 27592, 281, 7097, 2163, 11, 12739, 257, 20203]",0.5,3836,ml_signal,525,"Calls an external function, indicating a dependency",,3800,"        super(YahooNormalize1dExtend, self).__init__(date_field_name, symbol_field_name)","[220, 220, 220, 220, 220, 220, 220, 2208, 7, 56, 12992, 26447, 1096, 16, 67, 11627, 437, 11, 2116, 737, 834, 15003, 834, 7, 4475, 62, 3245, 62, 3672, 11, 6194, 62, 3245, 62, 3672, 8]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and parameters of the function,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 10007, 286, 262, 2163]",1.0,3872,best_practice,525,Consider adding a docstring to describe the purpose and parameters of the function,,3836,"        super(YahooNormalize1dExtend, self).__init__(date_field_name, symbol_field_name)","[220, 220, 220, 220, 220, 220, 220, 2208, 7, 56, 12992, 26447, 1096, 16, 67, 11627, 437, 11, 2116, 737, 834, 15003, 834, 7, 4475, 62, 3245, 62, 3672, 11, 6194, 62, 3245, 62, 3672, 8]"
üß† ML Signal: Usage of a helper function to transform data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 31904, 2163, 284, 6121, 1366]",0.5,3905,ml_signal,527,Usage of a helper function to transform data,,3872,        self.old_qlib_data = self._get_old_data(old_qlib_data_dir),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 727, 62, 80, 8019, 62, 7890, 796, 2116, 13557, 1136, 62, 727, 62, 7890, 7, 727, 62, 80, 8019, 62, 7890, 62, 15908, 8]"
‚úÖ Best Practice: Class docstring should be added to describe the purpose and usage of the class,"[26486, 227, 6705, 19939, 25, 5016, 2205, 8841, 815, 307, 2087, 284, 6901, 262, 4007, 290, 8748, 286, 262, 1398]",1.0,3905,best_practice,528,Class docstring should be added to describe the purpose and usage of the class,,3905,,[]
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,3905,best_practice,528,Use of type hinting for return type improves code readability and maintainability,,3905,,[]
üß† ML Signal: Function calls with specific string arguments can indicate usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 3848, 351, 2176, 4731, 7159, 460, 7603, 8748, 7572]",1.0,3937,ml_signal,530,Function calls with specific string arguments can indicate usage patterns,,3905,        qlib_data_dir = str(Path(qlib_data_dir).expanduser().resolve()),"[220, 220, 220, 220, 220, 220, 220, 10662, 8019, 62, 7890, 62, 15908, 796, 965, 7, 15235, 7, 80, 8019, 62, 7890, 62, 15908, 737, 11201, 392, 7220, 22446, 411, 6442, 28955]"
‚úÖ Best Practice: Use of multiple inheritance can lead to complex class hierarchies; ensure that the parent classes are compatible and necessary.,"[26486, 227, 6705, 19939, 25, 5765, 286, 3294, 24155, 460, 1085, 284, 3716, 1398, 28398, 444, 26, 4155, 326, 262, 2560, 6097, 389, 11670, 290, 3306, 13]",0.5,3969,best_practice,530,Use of multiple inheritance can lead to complex class hierarchies; ensure that the parent classes are compatible and necessary.,,3937,        qlib_data_dir = str(Path(qlib_data_dir).expanduser().resolve()),"[220, 220, 220, 220, 220, 220, 220, 10662, 8019, 62, 7890, 62, 15908, 796, 965, 7, 15235, 7, 80, 8019, 62, 7890, 62, 15908, 737, 11201, 392, 7220, 22446, 411, 6442, 28955]"
‚úÖ Best Practice: Class definition should include a docstring to describe its purpose and usage,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 2291, 257, 2205, 8841, 284, 6901, 663, 4007, 290, 8748]",1.0,4004,best_practice,532,Class definition should include a docstring to describe its purpose and usage,,3969,"        df = D.features(D.instruments(""all""), [""$"" + col for col in self.column_list])","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 360, 13, 40890, 7, 35, 13, 259, 2536, 2886, 7203, 439, 12340, 14631, 3, 1, 1343, 951, 329, 951, 287, 2116, 13, 28665, 62, 4868, 12962]"
üß† ML Signal: Class attribute that might be used to configure behavior,"[8582, 100, 254, 10373, 26484, 25, 5016, 11688, 326, 1244, 307, 973, 284, 17425, 4069]",0.5,4013,ml_signal,534,Class attribute that might be used to configure behavior,,4004,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the function,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163]",0.5,4022,best_practice,534,Consider adding a docstring to describe the purpose and usage of the function,,4013,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError without context can make debugging difficult,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 1231, 4732, 460, 787, 28769, 2408]",1.0,4046,sast_risk,536,Raising a generic ValueError without context can make debugging difficult,Low,4022,"    def normalize(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 3487, 1096, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
üß† ML Signal: Method name suggests a pattern of retrieving calendar data,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 257, 3912, 286, 50122, 11845, 1366]",1.0,4070,ml_signal,536,Method name suggests a pattern of retrieving calendar data,,4046,"    def normalize(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 3487, 1096, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
"üß† ML Signal: Usage of a specific calendar identifier ""IN_ALL""","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 11845, 27421, 366, 1268, 62, 7036, 1]",0.5,4096,ml_signal,538,"Usage of a specific calendar identifier ""IN_ALL""",,4070,"        df.set_index(self._date_field_name, inplace=True)","[220, 220, 220, 220, 220, 220, 220, 47764, 13, 2617, 62, 9630, 7, 944, 13557, 4475, 62, 3245, 62, 3672, 11, 287, 5372, 28, 17821, 8]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and parameters of the function,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 10007, 286, 262, 2163]",1.0,4122,best_practice,538,Consider adding a docstring to describe the purpose and parameters of the function,,4096,"        df.set_index(self._date_field_name, inplace=True)","[220, 220, 220, 220, 220, 220, 220, 47764, 13, 2617, 62, 9630, 7, 944, 13557, 4475, 62, 3245, 62, 3672, 11, 287, 5372, 28, 17821, 8]"
üß† ML Signal: Function calls can indicate common usage patterns and dependencies,"[8582, 100, 254, 10373, 26484, 25, 15553, 3848, 460, 7603, 2219, 8748, 7572, 290, 20086]",1.0,4162,ml_signal,540,Function calls can indicate common usage patterns and dependencies,,4122,"        old_symbol_list = self.old_qlib_data.index.get_level_values(""instrument"").unique().to_list()","[220, 220, 220, 220, 220, 220, 220, 1468, 62, 1837, 23650, 62, 4868, 796, 2116, 13, 727, 62, 80, 8019, 62, 7890, 13, 9630, 13, 1136, 62, 5715, 62, 27160, 7203, 259, 43872, 11074, 34642, 22446, 1462, 62, 4868, 3419]"
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,4188,best_practice,541,Use of type hinting for return type improves code readability and maintainability,,4162,        if str(symbol_name).upper() not in old_symbol_list:,"[220, 220, 220, 220, 220, 220, 220, 611, 965, 7, 1837, 23650, 62, 3672, 737, 45828, 3419, 407, 287, 1468, 62, 1837, 23650, 62, 4868, 25]"
üß† ML Signal: Function calls with specific string arguments can indicate usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 3848, 351, 2176, 4731, 7159, 460, 7603, 8748, 7572]",0.5,4220,ml_signal,543,Function calls with specific string arguments can indicate usage patterns,,4188,        old_df = self.old_qlib_data.loc[str(symbol_name).upper()],"[220, 220, 220, 220, 220, 220, 220, 1468, 62, 7568, 796, 2116, 13, 727, 62, 80, 8019, 62, 7890, 13, 17946, 58, 2536, 7, 1837, 23650, 62, 3672, 737, 45828, 3419, 60]"
‚úÖ Best Practice: Use of multiple inheritance to combine functionality from YahooNormalizeCN and YahooNormalize1d,"[26486, 227, 6705, 19939, 25, 5765, 286, 3294, 24155, 284, 12082, 11244, 422, 16551, 26447, 1096, 44175, 290, 16551, 26447, 1096, 16, 67]",0.5,4252,best_practice,543,Use of multiple inheritance to combine functionality from YahooNormalizeCN and YahooNormalize1d,,4220,        old_df = self.old_qlib_data.loc[str(symbol_name).upper()],"[220, 220, 220, 220, 220, 220, 220, 1468, 62, 7568, 796, 2116, 13, 727, 62, 80, 8019, 62, 7890, 13, 17946, 58, 2536, 7, 1837, 23650, 62, 3672, 737, 45828, 3419, 60]"
‚úÖ Best Practice: Use of class inheritance to extend functionality from multiple parent classes,"[26486, 227, 6705, 19939, 25, 5765, 286, 1398, 24155, 284, 9117, 11244, 422, 3294, 2560, 6097]",1.0,4269,best_practice,545,Use of class inheritance to extend functionality from multiple parent classes,,4252,        df = df.loc[latest_date:],"[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 17946, 58, 42861, 62, 4475, 47715]"
"‚úÖ Best Practice: Class definition should follow the naming conventions, using CamelCase.","[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 1061, 262, 19264, 21396, 11, 1262, 43281, 20448, 13]",0.5,4292,best_practice,547,"Class definition should follow the naming conventions, using CamelCase.",,4269,        old_latest_data = old_df.loc[latest_date],"[220, 220, 220, 220, 220, 220, 220, 1468, 62, 42861, 62, 7890, 796, 1468, 62, 7568, 13, 17946, 58, 42861, 62, 4475, 60]"
üß† ML Signal: Constants like AM_RANGE and PM_RANGE can be used to identify trading session times.,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 588, 3001, 62, 49, 27746, 290, 3122, 62, 49, 27746, 460, 307, 973, 284, 5911, 7313, 6246, 1661, 13]",0.5,4309,ml_signal,549,Constants like AM_RANGE and PM_RANGE can be used to identify trading session times.,,4292,"            if col == ""volume"":","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 951, 6624, 366, 29048, 1298]"
üß† ML Signal: Constants like AM_RANGE and PM_RANGE can be used to identify trading session times.,"[8582, 100, 254, 10373, 26484, 25, 4757, 1187, 588, 3001, 62, 49, 27746, 290, 3122, 62, 49, 27746, 460, 307, 973, 284, 5911, 7313, 6246, 1661, 13]",0.5,4322,ml_signal,551,Constants like AM_RANGE and PM_RANGE can be used to identify trading session times.,,4309,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Type hinting improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,4365,best_practice,550,Type hinting improves code readability and maintainability,,4322,                df[col] = df[col] / (new_latest_data[col] / old_latest_data[col]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 4033, 60, 796, 47764, 58, 4033, 60, 1220, 357, 3605, 62, 42861, 62, 7890, 58, 4033, 60, 1220, 1468, 62, 42861, 62, 7890, 58, 4033, 12962]"
üß† ML Signal: Method chaining and function calls can indicate common usage patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 290, 2163, 3848, 460, 7603, 2219, 8748, 7572]",1.0,4408,ml_signal,552,Method chaining and function calls can indicate common usage patterns,,4365,                df[col] = df[col] * (old_latest_data[col] / new_latest_data[col]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 4033, 60, 796, 47764, 58, 4033, 60, 1635, 357, 727, 62, 42861, 62, 7890, 58, 4033, 60, 1220, 649, 62, 42861, 62, 7890, 58, 4033, 12962]"
üß† ML Signal: Checks if a string contains a specific character,"[8582, 100, 254, 10373, 26484, 25, 47719, 611, 257, 4731, 4909, 257, 2176, 2095]",0.5,4430,ml_signal,553,Checks if a string contains a specific character,,4408,        return df.drop(df.index[0]).reset_index(),"[220, 220, 220, 220, 220, 220, 220, 1441, 47764, 13, 14781, 7, 7568, 13, 9630, 58, 15, 35944, 42503, 62, 9630, 3419]"
üß† ML Signal: Extracts a substring from a string,"[8582, 100, 254, 10373, 26484, 25, 29677, 82, 257, 3293, 1806, 422, 257, 4731]",0.5,4430,ml_signal,555,Extracts a substring from a string,,4430,,[]
üß† ML Signal: Conditional assignment based on string properties,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 16237, 1912, 319, 4731, 6608]",0.5,4445,ml_signal,557,Conditional assignment based on string properties,,4430,"    """"""Normalised to 1min using local 1d data""""""","[220, 220, 220, 37227, 26447, 1417, 284, 352, 1084, 1262, 1957, 352, 67, 1366, 37811]"
üß† ML Signal: String concatenation and slicing,"[8582, 100, 254, 10373, 26484, 25, 10903, 1673, 36686, 341, 290, 49289]",0.5,4477,ml_signal,559,String concatenation and slicing,,4445,"    AM_RANGE = None  # type: tuple  # eg: (""09:30:00"", ""11:29:00"")","[220, 220, 220, 3001, 62, 49, 27746, 796, 6045, 220, 1303, 2099, 25, 46545, 220, 1303, 29206, 25, 5855, 2931, 25, 1270, 25, 405, 1600, 366, 1157, 25, 1959, 25, 405, 4943]"
‚úÖ Best Practice: Returns a value from a function,"[26486, 227, 6705, 19939, 25, 16409, 257, 1988, 422, 257, 2163]",0.5,4477,best_practice,561,Returns a value from a function,,4477,,[]
‚úÖ Best Practice: Use of type hinting for return type improves code readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 286, 2099, 9254, 278, 329, 1441, 2099, 19575, 2438, 1100, 1799, 290, 5529, 1799]",1.0,4477,best_practice,558,Use of type hinting for return type improves code readability and maintainability,,4477,,[]
üß† ML Signal: Function calls with string literals can indicate feature usage patterns,"[8582, 100, 254, 10373, 26484, 25, 15553, 3848, 351, 4731, 4187, 874, 460, 7603, 3895, 8748, 7572]",1.0,4509,ml_signal,560,Function calls with string literals can indicate feature usage patterns,,4477,"    PM_RANGE = None  # type: tuple  # eg: (""13:00:00"", ""14:59:00"")","[220, 220, 220, 3122, 62, 49, 27746, 796, 6045, 220, 1303, 2099, 25, 46545, 220, 1303, 29206, 25, 5855, 1485, 25, 405, 25, 405, 1600, 366, 1415, 25, 3270, 25, 405, 4943]"
üß† ML Signal: Method definition with a specific return type hint,"[8582, 100, 254, 10373, 26484, 25, 11789, 6770, 351, 257, 2176, 1441, 2099, 9254]",0.5,4509,ml_signal,561,Method definition with a specific return type hint,,4509,,[]
üß† ML Signal: Function call with a hardcoded string argument,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 257, 1327, 40976, 4731, 4578]",0.5,4520,ml_signal,563,Function call with a hardcoded string argument,,4509,    CONSISTENT_1d = True,"[220, 220, 220, 39537, 8808, 3525, 62, 16, 67, 796, 6407]"
‚úÖ Best Practice: Use of multiple inheritance to combine functionality from YahooNormalizeBR and YahooNormalize1d,"[26486, 227, 6705, 19939, 25, 5765, 286, 3294, 24155, 284, 12082, 11244, 422, 16551, 26447, 1096, 11473, 290, 16551, 26447, 1096, 16, 67]",0.5,4531,best_practice,563,Use of multiple inheritance to combine functionality from YahooNormalizeBR and YahooNormalize1d,,4520,    CONSISTENT_1d = True,"[220, 220, 220, 39537, 8808, 3525, 62, 16, 67, 796, 6407]"
"‚úÖ Best Practice: Class attribute CALC_PAUSED_NUM is defined, indicating a shared state or configuration for instances.","[26486, 227, 6705, 19939, 25, 5016, 11688, 33290, 34, 62, 4537, 2937, 1961, 62, 41359, 318, 5447, 11, 12739, 257, 4888, 1181, 393, 8398, 329, 10245, 13]",0.5,4539,best_practice,566,"Class attribute CALC_PAUSED_NUM is defined, indicating a shared state or configuration for instances.",,4531,    def __init__(,"[220, 220, 220, 825, 11593, 15003, 834, 7]"
‚úÖ Best Practice: Consider adding a docstring to describe the method's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007, 290, 10007]",0.5,4589,best_practice,567,Consider adding a docstring to describe the method's purpose and parameters,,4539,"        self, qlib_data_1d_dir: [str, Path], date_field_name: str = ""date"", symbol_field_name: str = ""symbol"", **kwargs","[220, 220, 220, 220, 220, 220, 220, 2116, 11, 10662, 8019, 62, 7890, 62, 16, 67, 62, 15908, 25, 685, 2536, 11, 10644, 4357, 3128, 62, 3245, 62, 3672, 25, 965, 796, 366, 4475, 1600, 6194, 62, 3245, 62, 3672, 25, 965, 796, 366, 1837, 23650, 1600, 12429, 46265, 22046]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError without context may make debugging difficult,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 1231, 4732, 743, 787, 28769, 2408]",1.0,4597,sast_risk,569,Raising a generic ValueError without context may make debugging difficult,Low,4589,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"üß† ML Signal: Method name suggests a private method, indicating encapsulation","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 257, 2839, 2446, 11, 12739, 32652, 1741]",0.5,4605,ml_signal,569,"Method name suggests a private method, indicating encapsulation",,4597,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
"üß† ML Signal: Calls an external function, indicating a dependency","[8582, 100, 254, 10373, 26484, 25, 27592, 281, 7097, 2163, 11, 12739, 257, 20203]",0.5,4613,ml_signal,571,"Calls an external function, indicating a dependency",,4605,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,4621,best_practice,571,Consider adding a docstring to describe the function's purpose and parameters,,4613,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
üß† ML Signal: Function calls with specific naming patterns can indicate domain-specific operations,"[8582, 100, 254, 10373, 26484, 25, 15553, 3848, 351, 2176, 19264, 7572, 460, 7603, 7386, 12, 11423, 4560]",0.5,4641,ml_signal,573,Function calls with specific naming patterns can indicate domain-specific operations,,4621,"        qlib_data_1d_dir: str, Path","[220, 220, 220, 220, 220, 220, 220, 10662, 8019, 62, 7890, 62, 16, 67, 62, 15908, 25, 965, 11, 10644]"
‚úÖ Best Practice: Inheriting from a base class promotes code reuse and organization,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 257, 2779, 1398, 21068, 2438, 32349, 290, 4009]",1.0,4661,best_practice,573,Inheriting from a base class promotes code reuse and organization,,4641,"        qlib_data_1d_dir: str, Path","[220, 220, 220, 220, 220, 220, 220, 10662, 8019, 62, 7890, 62, 16, 67, 62, 15908, 25, 965, 11, 10644]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",1.0,4675,best_practice,575,Use of default parameter values for flexibility and ease of use,,4661,        date_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965]"
üß† ML Signal: Constructor parameters can indicate configuration patterns,"[8582, 100, 254, 10373, 26484, 25, 28407, 273, 10007, 460, 7603, 8398, 7572]",0.5,4689,ml_signal,575,Constructor parameters can indicate configuration patterns,,4675,        date_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965]"
‚úÖ Best Practice: Explicitly calling the superclass constructor for proper initialization,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 23772, 329, 1774, 37588]",1.0,4721,best_practice,592,Explicitly calling the superclass constructor for proper initialization,,4689,"            setattr(self, ""_calendar_list_1d"", calendar_list_1d)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 900, 35226, 7, 944, 11, 45434, 9948, 9239, 62, 4868, 62, 16, 67, 1600, 11845, 62, 4868, 62, 16, 67, 8]"
üß† ML Signal: Storing configuration values in instance variables,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 8398, 3815, 287, 4554, 9633]",0.5,4735,ml_signal,593,Storing configuration values in instance variables,,4721,        return calendar_list_1d,"[220, 220, 220, 220, 220, 220, 220, 1441, 11845, 62, 4868, 62, 16, 67]"
üß† ML Signal: Method constructs a class name dynamically based on region and interval.,"[8582, 100, 254, 10373, 26484, 25, 11789, 34175, 257, 1398, 1438, 32366, 1912, 319, 3814, 290, 16654, 13]",0.5,4749,ml_signal,593,Method constructs a class name dynamically based on region and interval.,,4735,        return calendar_list_1d,"[220, 220, 220, 220, 220, 220, 220, 1441, 11845, 62, 4868, 62, 16, 67]"
‚úÖ Best Practice: Use of @property decorator for defining a read-only attribute.,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 16215, 257, 1100, 12, 8807, 11688, 13]",0.5,4769,best_practice,596,Use of @property decorator for defining a read-only attribute.,,4749,        return generate_minutes_calendar_from_daily(,"[220, 220, 220, 220, 220, 220, 220, 1441, 7716, 62, 1084, 1769, 62, 9948, 9239, 62, 6738, 62, 29468, 7]"
‚úÖ Best Practice: Method name should be descriptive of its action,"[26486, 227, 6705, 19939, 25, 11789, 1438, 815, 307, 35644, 286, 663, 2223]",1.0,4795,best_practice,595,Method name should be descriptive of its action,,4769,"    def generate_1min_from_daily(self, calendars: Iterable) -> pd.Index:","[220, 220, 220, 825, 7716, 62, 16, 1084, 62, 6738, 62, 29468, 7, 944, 11, 50215, 25, 40806, 540, 8, 4613, 279, 67, 13, 15732, 25]"
üß† ML Signal: Usage of f-string for string formatting,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 277, 12, 8841, 329, 4731, 33313]",1.0,4815,ml_signal,596,Usage of f-string for string formatting,,4795,        return generate_minutes_calendar_from_daily(,"[220, 220, 220, 220, 220, 220, 220, 1441, 7716, 62, 1084, 1769, 62, 9948, 9239, 62, 6738, 62, 29468, 7]"
‚úÖ Best Practice: Specify the return type as a Union of Path and str for clarity.,"[26486, 227, 6705, 19939, 25, 18291, 1958, 262, 1441, 2099, 355, 257, 4479, 286, 10644, 290, 965, 329, 16287, 13]",1.0,4823,best_practice,598,Specify the return type as a Union of Path and str for clarity.,,4815,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
‚ö†Ô∏è SAST Risk (Low): Returning a global variable directly can lead to unintended side effects if the variable is mutable.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42882, 257, 3298, 7885, 3264, 460, 1085, 284, 30261, 1735, 3048, 611, 262, 7885, 318, 4517, 540, 13]",0.5,4848,sast_risk,600,Returning a global variable directly can lead to unintended side effects if the variable is mutable.,Low,4823,"    def adjusted_price(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 12328, 62, 20888, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential timezone issues with datetime.now() if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 2428, 351, 4818, 8079, 13, 2197, 3419, 611, 407, 12118, 6105]",1.0,4868,sast_risk,635,Potential timezone issues with datetime.now() if not handled properly,Low,4848,"class YahooNormalizeUS1min(YahooNormalizeUS, YahooNormalize1min):","[4871, 16551, 26447, 1096, 2937, 16, 1084, 7, 56, 12992, 26447, 1096, 2937, 11, 16551, 26447, 1096, 16, 1084, 2599]"
‚ö†Ô∏è SAST Risk (Low): Error message may expose sensitive information if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 743, 15651, 8564, 1321, 611, 407, 12118, 6105]",1.0,4868,sast_risk,637,Error message may expose sensitive information if not handled properly,Low,4868,,[]
‚úÖ Best Practice: Use of super() to call a method from the parent class,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 257, 2446, 422, 262, 2560, 1398]",1.0,4891,best_practice,638,Use of super() to call a method from the parent class,,4868,    def _get_calendar_list(self) -> Iterable[pd.Timestamp]:,"[220, 220, 220, 825, 4808, 1136, 62, 9948, 9239, 62, 4868, 7, 944, 8, 4613, 40806, 540, 58, 30094, 13, 14967, 27823, 5974]"
‚ö†Ô∏è SAST Risk (Low): Potential NoneType dereference if qlib_data_1d_dir is None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 390, 35790, 611, 10662, 8019, 62, 7890, 62, 16, 67, 62, 15908, 318, 6045]",1.0,4891,sast_risk,667,Potential NoneType dereference if qlib_data_1d_dir is None,Low,4891,,[]
‚ö†Ô∏è SAST Risk (Low): Error message could expose internal logic or paths,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13047, 3275, 714, 15651, 5387, 9156, 393, 13532]",0.5,4905,sast_risk,668,Error message could expose internal logic or paths,Low,4891,"    def symbol_to_yahoo(self, symbol):","[220, 220, 220, 825, 6194, 62, 1462, 62, 40774, 7, 944, 11, 6194, 2599]"
‚úÖ Best Practice: Use of super() to call parent class method ensures maintainability and proper inheritance,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 2560, 1398, 2446, 19047, 5529, 1799, 290, 1774, 24155]",0.5,4919,best_practice,674,Use of super() to call parent class method ensures maintainability and proper inheritance,,4905,        # TODO: from MSN,"[220, 220, 220, 220, 220, 220, 220, 1303, 16926, 46, 25, 422, 6579, 45]"
"‚úÖ Best Practice: Docstring provides detailed information about the function's purpose, parameters, and usage.","[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 6496, 1321, 546, 262, 2163, 338, 4007, 11, 10007, 11, 290, 8748, 13]",0.5,4919,best_practice,677,"Docstring provides detailed information about the function's purpose, parameters, and usage.",,4919,,[]
"üß† ML Signal: Dynamic attribute access using getattr, indicating potential use of reflection or dynamic class loading.","[8582, 100, 254, 10373, 26484, 25, 26977, 11688, 1895, 1262, 651, 35226, 11, 12739, 2785, 779, 286, 14580, 393, 8925, 1398, 11046, 13]",1.0,4919,ml_signal,699,"Dynamic attribute access using getattr, indicating potential use of reflection or dynamic class loading.",,4919,,[]
"üß† ML Signal: Instantiation of a class with multiple parameters, indicating a complex object creation pattern.","[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 1398, 351, 3294, 10007, 11, 12739, 257, 3716, 2134, 6282, 3912, 13]",1.0,4919,ml_signal,699,"Instantiation of a class with multiple parameters, indicating a complex object creation pattern.",,4919,,[]
"üß† ML Signal: Method call on an object, indicating a potential action or process being executed.","[8582, 100, 254, 10373, 26484, 25, 11789, 869, 319, 281, 2134, 11, 12739, 257, 2785, 2223, 393, 1429, 852, 10945, 13]",1.0,4939,ml_signal,709,"Method call on an object, indicating a potential action or process being executed.",,4919,"class YahooNormalizeBR1d(YahooNormalizeBR, YahooNormalize1d):","[4871, 16551, 26447, 1096, 11473, 16, 67, 7, 56, 12992, 26447, 1096, 11473, 11, 16551, 26447, 1096, 16, 67, 2599]"
‚úÖ Best Practice: Use of datetime and pd.Timestamp for date manipulation is clear and effective.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4818, 8079, 290, 279, 67, 13, 14967, 27823, 329, 3128, 17512, 318, 1598, 290, 4050, 13]",0.5,4949,best_practice,741,Use of datetime and pd.Timestamp for date manipulation is clear and effective.,,4939,        region: str,"[220, 220, 220, 220, 220, 220, 220, 3814, 25, 965]"
‚úÖ Best Practice: Use of pd.Timedelta for date arithmetic is clear and effective.,"[26486, 227, 6705, 19939, 25, 5765, 286, 279, 67, 13, 14967, 276, 12514, 329, 3128, 34768, 318, 1598, 290, 4050, 13]",0.5,4957,best_practice,743,Use of pd.Timedelta for date arithmetic is clear and effective.,,4949,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Method call with parameters could indicate a pattern for data downloading.,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 10007, 714, 7603, 257, 3912, 329, 1366, 22023, 13]",0.5,4965,ml_signal,743,Method call with parameters could indicate a pattern for data downloading.,,4957,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Date formatting pattern could be useful for ML models to understand date handling.,"[8582, 100, 254, 10373, 26484, 25, 7536, 33313, 3912, 714, 307, 4465, 329, 10373, 4981, 284, 1833, 3128, 9041, 13]",0.5,4970,ml_signal,751,Date formatting pattern could be useful for ML models to understand date handling.,,4965,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Use of logging for warnings instead of print statements,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 14601, 2427, 286, 3601, 6299]",0.5,5020,best_practice,779,Use of logging for warnings instead of print statements,,4970,"            end datetime, default ``pd.Timestamp(datetime.datetime.now() + pd.Timedelta(days=1))``; open interval(excluding end)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 4818, 8079, 11, 4277, 7559, 30094, 13, 14967, 27823, 7, 19608, 8079, 13, 19608, 8079, 13, 2197, 3419, 1343, 279, 67, 13, 14967, 276, 12514, 7, 12545, 28, 16, 4008, 15506, 26, 1280, 16654, 7, 42218, 886, 8]"
‚úÖ Best Practice: Use of Path to handle file paths,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 284, 5412, 2393, 13532]",0.5,5033,best_practice,782,Use of Path to handle file paths,,5020,        limit_nums: int,"[220, 220, 220, 220, 220, 220, 220, 4179, 62, 77, 5700, 25, 493]"
‚ö†Ô∏è SAST Risk (Low): Potential directory traversal if qlib_data_1d_dir is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 10662, 8019, 62, 7890, 62, 16, 67, 62, 15908, 318, 2836, 12, 14401]",1.0,5051,sast_risk,783,Potential directory traversal if qlib_data_1d_dir is user-controlled,Low,5033,"            using for debug, by default None","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1262, 329, 14257, 11, 416, 4277, 6045]"
üß† ML Signal: Pattern of checking existence before fetching data,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 10627, 6224, 878, 21207, 278, 1366]",0.5,5059,ml_signal,786,Pattern of checking existence before fetching data,,5051,        -----,"[220, 220, 220, 220, 220, 220, 220, 37404]"
‚úÖ Best Practice: Use of Path to handle file paths,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 284, 5412, 2393, 13532]",0.5,5087,best_practice,790,Use of Path to handle file paths,,5059,"                cn 1min, a week: 4 * 60 * 5","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 77, 352, 1084, 11, 257, 1285, 25, 604, 1635, 3126, 1635, 642]"
üß† ML Signal: Pattern of calculating previous trading day,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 26019, 2180, 7313, 1110]",0.5,5087,ml_signal,791,Pattern of calculating previous trading day,,5087,,[]
üß† ML Signal: Default end_date calculation based on trading_date,"[8582, 100, 254, 10373, 26484, 25, 15161, 886, 62, 4475, 17952, 1912, 319, 7313, 62, 4475]",0.5,5103,ml_signal,796,Default end_date calculation based on trading_date,,5087,            # get 1m data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 651, 352, 76, 1366]"
üß† ML Signal: Pattern of downloading data with delay and date range,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 22023, 1366, 351, 5711, 290, 3128, 2837]",0.5,5162,ml_signal,797,Pattern of downloading data with delay and date range,,5103,            $ python collector.py download_data --source_dir ~/.qlib/stock_data/source --region CN --start 2020-11-01 --end 2020-11-10 --delay 0.1 --interval 1m,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 720, 21015, 22967, 13, 9078, 4321, 62, 7890, 1377, 10459, 62, 15908, 39763, 80, 8019, 14, 13578, 62, 7890, 14, 10459, 1377, 36996, 31171, 1377, 9688, 12131, 12, 1157, 12, 486, 1377, 437, 12131, 12, 1157, 12, 940, 1377, 40850, 657, 13, 16, 1377, 3849, 2100, 352, 76]"
‚úÖ Best Practice: Dynamic calculation of max_workers based on CPU count,"[26486, 227, 6705, 19939, 25, 26977, 17952, 286, 3509, 62, 22896, 1912, 319, 9135, 954]",0.5,5221,best_practice,797,Dynamic calculation of max_workers based on CPU count,,5162,            $ python collector.py download_data --source_dir ~/.qlib/stock_data/source --region CN --start 2020-11-01 --end 2020-11-10 --delay 0.1 --interval 1m,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 720, 21015, 22967, 13, 9078, 4321, 62, 7890, 1377, 10459, 62, 15908, 39763, 80, 8019, 14, 13578, 62, 7890, 14, 10459, 1377, 36996, 31171, 1377, 9688, 12131, 12, 1157, 12, 486, 1377, 437, 12131, 12, 1157, 12, 940, 1377, 40850, 657, 13, 16, 1377, 3849, 2100, 352, 76]"
‚úÖ Best Practice: Use of descriptive variable names,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891]",0.5,5239,best_practice,806,Use of descriptive variable names,,5221,"        date_field_name: str = ""date"",","[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965, 796, 366, 4475, 1600]"
üß† ML Signal: Pattern of handling different regions,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 9041, 1180, 7652]",0.5,5248,ml_signal,814,Pattern of handling different regions,,5239,        ----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Use of logging for warnings instead of print statements,"[26486, 227, 6705, 19939, 25, 5765, 286, 18931, 329, 14601, 2427, 286, 3601, 6299]",0.5,5262,best_practice,815,Use of logging for warnings instead of print statements,,5248,        date_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965]"
üß† ML Signal: Pattern of selecting index list based on region,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 17246, 6376, 1351, 1912, 319, 3814]",0.5,5276,ml_signal,815,Pattern of selecting index list based on region,,5262,        date_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965]"
‚úÖ Best Practice: Dynamic import using importlib,"[26486, 227, 6705, 19939, 25, 26977, 1330, 1262, 1330, 8019]",0.5,5290,best_practice,815,Dynamic import using importlib,,5276,        date_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965]"
üß† ML Signal: Pattern of fetching instruments for each index,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 21207, 278, 12834, 329, 1123, 6376]",0.5,5304,ml_signal,815,Pattern of fetching instruments for each index,,5290,        date_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965]"
‚úÖ Best Practice: Use of __name__ guard for script execution,"[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 3672, 834, 4860, 329, 4226, 9706]",0.5,5318,best_practice,815,Use of __name__ guard for script execution,,5304,        date_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965]"
‚úÖ Best Practice: Use of fire for command-line interface,"[26486, 227, 6705, 19939, 25, 5765, 286, 2046, 329, 3141, 12, 1370, 7071]",0.5,5332,best_practice,815,Use of fire for command-line interface,,5318,        date_field_name: str,"[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965]"

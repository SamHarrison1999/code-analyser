[
  {
    "line": 11,
    "text": "from tqdm import tqdm",
    "annotation": "\u2705 Best Practice: Use of Path to handle file paths is more robust and cross-platform than string manipulation.",
    "confidence": 1.0,
    "tokens": [
      6738,
      256,
      80,
      36020,
      1330,
      256,
      80,
      36020
    ],
    "start_token": 0,
    "end_token": 8,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      284,
      5412,
      2393,
      13532,
      318,
      517,
      12373,
      290,
      3272,
      12,
      24254,
      621,
      4731,
      17512,
      13
    ],
    "label": "best_practice",
    "reason": "Use of Path to handle file paths is more robust and cross-platform than string manipulation."
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\u2705 Best Practice: Appending to sys.path can lead to maintenance challenges; consider using virtual environments or package management.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 8,
    "end_token": 8,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      1571,
      284,
      25064,
      13,
      6978,
      460,
      1085,
      284,
      9262,
      6459,
      26,
      2074,
      1262,
      7166,
      12493,
      393,
      5301,
      4542,
      13
    ],
    "label": "best_practice",
    "reason": "Appending to sys.path can lead to maintenance challenges; consider using virtual environments or package management."
  },
  {
    "line": 17,
    "text": "from data_collector.utils import generate_minutes_calendar_from_daily",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific utility functions indicates a pattern of modular code usage.",
    "confidence": 0.5,
    "tokens": [
      6738,
      1366,
      62,
      33327,
      273,
      13,
      26791,
      1330,
      7716,
      62,
      1084,
      1769,
      62,
      9948,
      9239,
      62,
      6738,
      62,
      29468
    ],
    "start_token": 8,
    "end_token": 27,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      10361,
      5499,
      9217,
      257,
      3912,
      286,
      26507,
      2438,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Importing specific utility functions indicates a pattern of modular code usage."
  },
  {
    "line": 14,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of Path.glob to list files in a directory",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 27,
    "end_token": 27,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10644,
      13,
      4743,
      672,
      284,
      1351,
      3696,
      287,
      257,
      8619
    ],
    "label": "ml_signal",
    "reason": "Usage of Path.glob to list files in a directory"
  },
  {
    "line": 18,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of tqdm for progress tracking",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 27,
    "end_token": 27,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      256,
      80,
      36020,
      329,
      4371,
      9646
    ],
    "label": "ml_signal",
    "reason": "Usage of tqdm for progress tracking"
  },
  {
    "line": 20,
    "text": "def get_date_range(data_1min_dir: Path, max_workers: int = 16, date_field_name: str = \"date\"):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of ThreadPoolExecutor for parallel processing",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      4475,
      62,
      9521,
      7,
      7890,
      62,
      16,
      1084,
      62,
      15908,
      25,
      10644,
      11,
      3509,
      62,
      22896,
      25,
      493,
      796,
      1467,
      11,
      3128,
      62,
      3245,
      62,
      3672,
      25,
      965,
      796,
      366,
      4475,
      1,
      2599
    ],
    "start_token": 27,
    "end_token": 63,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      14122,
      27201,
      23002,
      38409,
      329,
      10730,
      7587
    ],
    "label": "ml_signal",
    "reason": "Usage of ThreadPoolExecutor for parallel processing"
  },
  {
    "line": 22,
    "text": "    min_date = None",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over files and results from executor.map",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      949,
      62,
      4475,
      796,
      6045
    ],
    "start_token": 63,
    "end_token": 71,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      3696,
      290,
      2482,
      422,
      3121,
      273,
      13,
      8899
    ],
    "label": "ml_signal",
    "reason": "Iterating over files and results from executor.map"
  },
  {
    "line": 24,
    "text": "    with tqdm(total=len(csv_files)) as p_bar:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on CSV content, potential for unexpected data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      351,
      256,
      80,
      36020,
      7,
      23350,
      28,
      11925,
      7,
      40664,
      62,
      16624,
      4008,
      355,
      279,
      62,
      5657,
      25
    ],
    "start_token": 71,
    "end_token": 92,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      44189,
      2695,
      11,
      2785,
      329,
      10059,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on CSV content, potential for unexpected data"
  },
  {
    "line": 26,
    "text": "            for _file, _result in zip(csv_files, executor.map(pd.read_csv, csv_files)):",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of date field to datetime",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      4808,
      7753,
      11,
      4808,
      20274,
      287,
      19974,
      7,
      40664,
      62,
      16624,
      11,
      3121,
      273,
      13,
      8899,
      7,
      30094,
      13,
      961,
      62,
      40664,
      11,
      269,
      21370,
      62,
      16624,
      8,
      2599
    ],
    "start_token": 92,
    "end_token": 133,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      3128,
      2214,
      284,
      4818,
      8079
    ],
    "label": "ml_signal",
    "reason": "Conversion of date field to datetime"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of min function to find the earliest date",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 133,
    "end_token": 133,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      949,
      2163,
      284,
      1064,
      262,
      14555,
      3128
    ],
    "label": "best_practice",
    "reason": "Use of min function to find the earliest date"
  },
  {
    "line": 30,
    "text": "                    _tmp_min = _dates.min()",
    "annotation": "\u2705 Best Practice: Use of max function to find the latest date",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      22065,
      62,
      1084,
      796,
      4808,
      19581,
      13,
      1084,
      3419
    ],
    "start_token": 133,
    "end_token": 162,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3509,
      2163,
      284,
      1064,
      262,
      3452,
      3128
    ],
    "label": "best_practice",
    "reason": "Use of max function to find the latest date"
  },
  {
    "line": 34,
    "text": "                p_bar.update()",
    "annotation": "\ud83e\udde0 ML Signal: Progress bar update",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      279,
      62,
      5657,
      13,
      19119,
      3419
    ],
    "start_token": 162,
    "end_token": 183,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18387,
      2318,
      4296
    ],
    "label": "ml_signal",
    "reason": "Progress bar update"
  },
  {
    "line": 37,
    "text": "",
    "annotation": "\u2705 Best Practice: Returning a tuple of min_date and max_date",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 183,
    "end_token": 183,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      46545,
      286,
      949,
      62,
      4475,
      290,
      3509,
      62,
      4475
    ],
    "label": "best_practice",
    "reason": "Returning a tuple of min_date and max_date"
  },
  {
    "line": 28,
    "text": "                    _dates = pd.to_datetime(_result[date_field_name])",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda function for inline processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      19581,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      28264,
      20274,
      58,
      4475,
      62,
      3245,
      62,
      3672,
      12962
    ],
    "start_token": 183,
    "end_token": 221,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      2163,
      329,
      26098,
      7587
    ],
    "label": "ml_signal",
    "reason": "Use of lambda function for inline processing"
  },
  {
    "line": 29,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of Path.glob to list files in a directory",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 221,
    "end_token": 221,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      13,
      4743,
      672,
      284,
      1351,
      3696,
      287,
      257,
      8619
    ],
    "label": "best_practice",
    "reason": "Use of Path.glob to list files in a directory"
  },
  {
    "line": 30,
    "text": "                    _tmp_min = _dates.min()",
    "annotation": "\u2705 Best Practice: Use of list and map for concise transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      22065,
      62,
      1084,
      796,
      4808,
      19581,
      13,
      1084,
      3419
    ],
    "start_token": 221,
    "end_token": 250,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1351,
      290,
      3975,
      329,
      35327,
      13389
    ],
    "label": "best_practice",
    "reason": "Use of list and map for concise transformation"
  },
  {
    "line": 30,
    "text": "                    _tmp_min = _dates.min()",
    "annotation": "\ud83e\udde0 ML Signal: File extension manipulation and string operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4808,
      22065,
      62,
      1084,
      796,
      4808,
      19581,
      13,
      1084,
      3419
    ],
    "start_token": 250,
    "end_token": 279,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9220,
      7552,
      17512,
      290,
      4731,
      4560
    ],
    "label": "ml_signal",
    "reason": "File extension manipulation and string operations"
  },
  {
    "line": 51,
    "text": "    Parameters",
    "annotation": "\u2705 Best Practice: Use of Path to handle file paths for better cross-platform compatibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      40117
    ],
    "start_token": 279,
    "end_token": 283,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      284,
      5412,
      2393,
      13532,
      329,
      1365,
      3272,
      12,
      24254,
      17764
    ],
    "label": "best_practice",
    "reason": "Use of Path to handle file paths for better cross-platform compatibility"
  },
  {
    "line": 53,
    "text": "    data_1min_dir: str",
    "annotation": "\u2705 Best Practice: Use of Path to handle file paths for better cross-platform compatibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      62,
      16,
      1084,
      62,
      15908,
      25,
      965
    ],
    "start_token": 283,
    "end_token": 294,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      284,
      5412,
      2393,
      13532,
      329,
      1365,
      3272,
      12,
      24254,
      17764
    ],
    "label": "best_practice",
    "reason": "Use of Path to handle file paths for better cross-platform compatibility"
  },
  {
    "line": 55,
    "text": "    qlib_data_1d_dir: str",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to get date range, indicating a pattern of data preprocessing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10662,
      8019,
      62,
      7890,
      62,
      16,
      67,
      62,
      15908,
      25,
      965
    ],
    "start_token": 294,
    "end_token": 308,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      651,
      3128,
      2837,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      662,
      36948
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to get date range, indicating a pattern of data preprocessing"
  },
  {
    "line": 57,
    "text": "    max_workers: int",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a function to get symbols, indicating a pattern of data preprocessing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3509,
      62,
      22896,
      25,
      493
    ],
    "start_token": 308,
    "end_token": 316,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2163,
      284,
      651,
      14354,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      662,
      36948
    ],
    "label": "ml_signal",
    "reason": "Usage of a function to get symbols, indicating a pattern of data preprocessing"
  },
  {
    "line": 59,
    "text": "    date_field_name: str",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of a data provider, indicating a pattern of data setup",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3128,
      62,
      3245,
      62,
      3672,
      25,
      965
    ],
    "start_token": 316,
    "end_token": 326,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      257,
      1366,
      10131,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      9058
    ],
    "label": "ml_signal",
    "reason": "Initialization of a data provider, indicating a pattern of data setup"
  },
  {
    "line": 61,
    "text": "    symbol_field_name: str",
    "annotation": "\ud83e\udde0 ML Signal: Fetching features from a data source, indicating a pattern of data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6194,
      62,
      3245,
      62,
      3672,
      25,
      965
    ],
    "start_token": 326,
    "end_token": 336,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      3033,
      422,
      257,
      1366,
      2723,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Fetching features from a data source, indicating a pattern of data retrieval"
  },
  {
    "line": 63,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of missing symbols, indicating a pattern of data comparison",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 336,
    "end_token": 336,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      4814,
      14354,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      7208
    ],
    "label": "ml_signal",
    "reason": "Calculation of missing symbols, indicating a pattern of data comparison"
  },
  {
    "line": 66,
    "text": "    qlib_data_1d_dir = Path(qlib_data_1d_dir).expanduser().resolve()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging potentially sensitive information",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10662,
      8019,
      62,
      7890,
      62,
      16,
      67,
      62,
      15908,
      796,
      10644,
      7,
      80,
      8019,
      62,
      7890,
      62,
      16,
      67,
      62,
      15908,
      737,
      11201,
      392,
      7220,
      22446,
      411,
      6442,
      3419
    ],
    "start_token": 336,
    "end_token": 368,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      6196,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging potentially sensitive information"
  },
  {
    "line": 69,
    "text": "    symbols_1min = get_symbols(data_1min_dir)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Logging potentially sensitive information",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      14354,
      62,
      16,
      1084,
      796,
      651,
      62,
      1837,
      2022,
      10220,
      7,
      7890,
      62,
      16,
      1084,
      62,
      15908,
      8
    ],
    "start_token": 368,
    "end_token": 389,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5972,
      2667,
      6196,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Logging potentially sensitive information"
  },
  {
    "line": 71,
    "text": "    qlib.init(provider_uri=str(qlib_data_1d_dir))",
    "annotation": "\ud83e\udde0 ML Signal: Reading CSV to get column information, indicating a pattern of data inspection",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      10662,
      8019,
      13,
      15003,
      7,
      15234,
      1304,
      62,
      9900,
      28,
      2536,
      7,
      80,
      8019,
      62,
      7890,
      62,
      16,
      67,
      62,
      15908,
      4008
    ],
    "start_token": 389,
    "end_token": 414,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11725,
      44189,
      284,
      651,
      5721,
      1321,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      15210
    ],
    "label": "ml_signal",
    "reason": "Reading CSV to get column information, indicating a pattern of data inspection"
  },
  {
    "line": 75,
    "text": "    if not miss_symbols:",
    "annotation": "\ud83e\udde0 ML Signal: Checking string case, indicating a pattern of data normalization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      407,
      2051,
      62,
      1837,
      2022,
      10220,
      25
    ],
    "start_token": 414,
    "end_token": 425,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      4731,
      1339,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      3487,
      1634
    ],
    "label": "ml_signal",
    "reason": "Checking string case, indicating a pattern of data normalization"
  },
  {
    "line": 80,
    "text": "    tmp_df = pd.read_csv(list(data_1min_dir.glob(\"*.csv\"))[0])",
    "annotation": "\ud83e\udde0 ML Signal: Generating a calendar from daily data, indicating a pattern of data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      45218,
      62,
      7568,
      796,
      279,
      67,
      13,
      961,
      62,
      40664,
      7,
      4868,
      7,
      7890,
      62,
      16,
      1084,
      62,
      15908,
      13,
      4743,
      672,
      7203,
      24620,
      40664,
      48774,
      58,
      15,
      12962
    ],
    "start_token": 425,
    "end_token": 457,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2980,
      803,
      257,
      11845,
      422,
      4445,
      1366,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Generating a calendar from daily data, indicating a pattern of data transformation"
  },
  {
    "line": 80,
    "text": "    tmp_df = pd.read_csv(list(data_1min_dir.glob(\"*.csv\"))[0])",
    "annotation": "\ud83e\udde0 ML Signal: Creating a DataFrame with specific columns and index, indicating a pattern of data structuring",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      45218,
      62,
      7568,
      796,
      279,
      67,
      13,
      961,
      62,
      40664,
      7,
      4868,
      7,
      7890,
      62,
      16,
      1084,
      62,
      15908,
      13,
      4743,
      672,
      7203,
      24620,
      40664,
      48774,
      58,
      15,
      12962
    ],
    "start_token": 457,
    "end_token": 489,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      30481,
      257,
      6060,
      19778,
      351,
      2176,
      15180,
      290,
      6376,
      11,
      12739,
      257,
      3912,
      286,
      1366,
      2878,
      870
    ],
    "label": "ml_signal",
    "reason": "Creating a DataFrame with specific columns and index, indicating a pattern of data structuring"
  },
  {
    "line": 80,
    "text": "    tmp_df = pd.read_csv(list(data_1min_dir.glob(\"*.csv\"))[0])",
    "annotation": "\u2705 Best Practice: Use of Path.joinpath for constructing file paths",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      45218,
      62,
      7568,
      796,
      279,
      67,
      13,
      961,
      62,
      40664,
      7,
      4868,
      7,
      7890,
      62,
      16,
      1084,
      62,
      15908,
      13,
      4743,
      672,
      7203,
      24620,
      40664,
      48774,
      58,
      15,
      12962
    ],
    "start_token": 489,
    "end_token": 521,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      13,
      22179,
      6978,
      329,
      30580,
      2393,
      13532
    ],
    "label": "best_practice",
    "reason": "Use of Path.joinpath for constructing file paths"
  },
  {
    "line": 80,
    "text": "    tmp_df = pd.read_csv(list(data_1min_dir.glob(\"*.csv\"))[0])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential command injection risk if input is not sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      45218,
      62,
      7568,
      796,
      279,
      67,
      13,
      961,
      62,
      40664,
      7,
      4868,
      7,
      7890,
      62,
      16,
      1084,
      62,
      15908,
      13,
      4743,
      672,
      7203,
      24620,
      40664,
      48774,
      58,
      15,
      12962
    ],
    "start_token": 521,
    "end_token": 553,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      3141,
      16954,
      2526,
      611,
      5128,
      318,
      407,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential command injection risk if input is not sanitized"
  }
]
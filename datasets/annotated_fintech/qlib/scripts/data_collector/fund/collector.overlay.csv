annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Low): Modifying sys.path can lead to import conflicts or security issues if not handled carefully.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3401, 4035, 25064, 13, 6978, 460, 1085, 284, 1330, 12333, 393, 2324, 2428, 611, 407, 12118, 7773, 13]",1.0,5,sast_risk,14,Modifying sys.path can lead to import conflicts or security issues if not handled carefully.,Low,0,from loguru import logger,"[6738, 2604, 14717, 1330, 49706]"
‚ö†Ô∏è SAST Risk (Medium): Hardcoded URL can lead to security risks if the URL is not trusted or if it changes.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6912, 40976, 10289, 460, 1085, 284, 2324, 7476, 611, 262, 10289, 318, 407, 13467, 393, 611, 340, 2458, 13]",1.0,20,sast_risk,18,Hardcoded URL can lead to security risks if the URL is not trusted or if it changes.,Medium,5,CUR_DIR = Path(__file__).resolve().parent,"[34, 4261, 62, 34720, 796, 10644, 7, 834, 7753, 834, 737, 411, 6442, 22446, 8000]"
‚úÖ Best Practice: Use of docstring to describe parameters and their defaults,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 10007, 290, 511, 26235]",1.0,31,best_practice,31,Use of docstring to describe parameters and their defaults,,20,"        end=None,","[220, 220, 220, 220, 220, 220, 220, 886, 28, 14202, 11]"
‚úÖ Best Practice: Explicit call to superclass initializer,"[26486, 227, 6705, 19939, 25, 11884, 869, 284, 2208, 4871, 4238, 7509]",1.0,41,best_practice,53,Explicit call to superclass initializer,,31,        start: str,"[220, 220, 220, 220, 220, 220, 220, 923, 25, 965]"
üß† ML Signal: Initialization of datetime-related functionality,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 4818, 8079, 12, 5363, 11244]",1.0,57,ml_signal,66,Initialization of datetime-related functionality,,41,"            interval=interval,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16654, 28, 3849, 2100, 11]"
üß† ML Signal: Usage of conditional logic to handle different intervals,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 26340, 9156, 284, 5412, 1180, 20016]",1.0,73,ml_signal,66,Usage of conditional logic to handle different intervals,,57,"            interval=interval,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16654, 28, 3849, 2100, 11]"
üß† ML Signal: Use of max function to ensure start_datetime is not before a default value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3509, 2163, 284, 4155, 923, 62, 19608, 8079, 318, 407, 878, 257, 4277, 1988]",1.0,98,ml_signal,68,Use of max function to ensure start_datetime is not before a default value,,73,"            max_collector_count=max_collector_count,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3509, 62, 33327, 273, 62, 9127, 28, 9806, 62, 33327, 273, 62, 9127, 11]"
üß† ML Signal: Handling of specific interval case with no operation,"[8582, 100, 254, 10373, 26484, 25, 49500, 286, 2176, 16654, 1339, 351, 645, 4905]",1.0,113,ml_signal,69,Handling of specific interval case with no operation,,98,"            delay=delay,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5711, 28, 40850, 11]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic ValueError without specific handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 11052, 12331, 1231, 2176, 9041]",0.5,113,sast_risk,73,Raising a generic ValueError without specific handling,Low,113,,[]
üß† ML Signal: Conversion of datetime to a specific timezone,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4818, 8079, 284, 257, 2176, 640, 11340]",1.0,124,ml_signal,76,Conversion of datetime to a specific timezone,,113,    def init_datetime(self):,"[220, 220, 220, 825, 2315, 62, 19608, 8079, 7, 944, 2599]"
üß† ML Signal: Conversion of datetime to a specific timezone,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4818, 8079, 284, 257, 2176, 640, 11340]",1.0,167,ml_signal,78,Conversion of datetime to a specific timezone,,124,"            self.start_datetime = max(self.start_datetime, self.DEFAULT_START_DATETIME_1MIN)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 9688, 62, 19608, 8079, 796, 3509, 7, 944, 13, 9688, 62, 19608, 8079, 11, 2116, 13, 7206, 38865, 62, 2257, 7227, 62, 35, 1404, 2767, 12789, 62, 16, 23678, 8]"
‚úÖ Best Practice: Type hinting with a list of types is not standard; consider using Union for clarity.,"[26486, 227, 6705, 19939, 25, 5994, 9254, 278, 351, 257, 1351, 286, 3858, 318, 407, 3210, 26, 2074, 1262, 4479, 329, 16287, 13]",0.5,167,best_practice,75,Type hinting with a list of types is not standard; consider using Union for clarity.,,167,,[]
‚ö†Ô∏è SAST Risk (Low): Potential timezone-related issues if timezone is not validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 12, 5363, 2428, 611, 640, 11340, 318, 407, 31031, 13]",1.0,210,sast_risk,78,Potential timezone-related issues if timezone is not validated.,Low,167,"            self.start_datetime = max(self.start_datetime, self.DEFAULT_START_DATETIME_1MIN)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 9688, 62, 19608, 8079, 796, 3509, 7, 944, 13, 9688, 62, 19608, 8079, 11, 2116, 13, 7206, 38865, 62, 2257, 7227, 62, 35, 1404, 2767, 12789, 62, 16, 23678, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential timezone-related issues if tzlocal() is not correctly handled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 640, 11340, 12, 5363, 2428, 611, 256, 89, 12001, 3419, 318, 407, 9380, 12118, 13]",1.0,222,sast_risk,80,Potential timezone-related issues if tzlocal() is not correctly handled.,Low,210,            pass,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1208]"
‚úÖ Best Practice: Consider logging the exception for better debugging.,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 6631, 329, 1365, 28769, 13]",0.5,256,best_practice,84,Consider logging the exception for better debugging.,,222,"        self.start_datetime = self.convert_datetime(self.start_datetime, self._timezone)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9688, 62, 19608, 8079, 796, 2116, 13, 1102, 1851, 62, 19608, 8079, 7, 944, 13, 9688, 62, 19608, 8079, 11, 2116, 13557, 2435, 11340, 8]"
‚úÖ Best Practice: Using @property with @abc.abstractmethod is a common pattern for defining abstract properties.,"[26486, 227, 6705, 19939, 25, 8554, 2488, 26745, 351, 2488, 39305, 13, 397, 8709, 24396, 318, 257, 2219, 3912, 329, 16215, 12531, 6608, 13]",0.5,290,best_practice,85,Using @property with @abc.abstractmethod is a common pattern for defining abstract properties.,,256,"        self.end_datetime = self.convert_datetime(self.end_datetime, self._timezone)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 437, 62, 19608, 8079, 796, 2116, 13, 1102, 1851, 62, 19608, 8079, 7, 944, 13, 437, 62, 19608, 8079, 11, 2116, 13557, 2435, 11340, 8]"
"‚ö†Ô∏è SAST Risk (Low): Method raises NotImplementedError, which could lead to runtime errors if not properly overridden.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11789, 12073, 1892, 3546, 1154, 12061, 12331, 11, 543, 714, 1085, 284, 19124, 8563, 611, 407, 6105, 23170, 4651, 13]",0.5,324,sast_risk,85,"Method raises NotImplementedError, which could lead to runtime errors if not properly overridden.",Low,290,"        self.end_datetime = self.convert_datetime(self.end_datetime, self._timezone)","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 437, 62, 19608, 8079, 796, 2116, 13, 1102, 1851, 62, 19608, 8079, 7, 944, 13, 437, 62, 19608, 8079, 11, 2116, 13557, 2435, 11340, 8]"
üß† ML Signal: Use of formatted strings for error messages,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 39559, 13042, 329, 4049, 6218]",0.5,351,ml_signal,88,Use of formatted strings for error messages,,324,"    def convert_datetime(dt: [pd.Timestamp, datetime.date, str], timezone):","[220, 220, 220, 825, 10385, 62, 19608, 8079, 7, 28664, 25, 685, 30094, 13, 14967, 27823, 11, 4818, 8079, 13, 4475, 11, 965, 4357, 640, 11340, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe URL construction without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 10289, 5103, 1231, 21201]",1.0,382,sast_risk,90,Potentially unsafe URL construction without validation,Medium,351,"            dt = pd.Timestamp(dt, tz=timezone).timestamp()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 288, 83, 796, 279, 67, 13, 14967, 27823, 7, 28664, 11, 256, 89, 28, 2435, 11340, 737, 16514, 27823, 3419]"
"‚ö†Ô∏è SAST Risk (Medium): No timeout specified for requests.get, can lead to hanging","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 26827, 7368, 329, 7007, 13, 1136, 11, 460, 1085, 284, 10938]",1.0,382,sast_risk,95,"No timeout specified for requests.get, can lead to hanging",Medium,382,,[]
‚úÖ Best Practice: Check for HTTP response status,"[26486, 227, 6705, 19939, 25, 6822, 329, 14626, 2882, 3722]",0.5,391,best_practice,97,Check for HTTP response status,,382,    @abc.abstractmethod,"[220, 220, 220, 2488, 39305, 13, 397, 8709, 24396]"
‚ö†Ô∏è SAST Risk (Low): Potential for JSON parsing errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 19449, 32096, 8563]",0.5,391,sast_risk,100,Potential for JSON parsing errors,Low,391,,[]
üß† ML Signal: Checking specific keys in JSON response,"[8582, 100, 254, 10373, 26484, 25, 39432, 2176, 8251, 287, 19449, 2882]",0.5,412,ml_signal,102,Checking specific keys in JSON response,,391,"    def get_data_from_remote(symbol, interval, start, end):","[220, 220, 220, 825, 651, 62, 7890, 62, 6738, 62, 47960, 7, 1837, 23650, 11, 16654, 11, 923, 11, 886, 2599]"
üß† ML Signal: Use of pandas for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 329, 1366, 17512]",0.5,421,ml_signal,105,Use of pandas for data manipulation,,412,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚úÖ Best Practice: Check type before operations,"[26486, 227, 6705, 19939, 25, 6822, 2099, 878, 4560]",0.5,463,best_practice,108,Check type before operations,,421,"                index_code=symbol, numberOfHistoricalDaysToCrawl=10000, startDate=start, endDate=end","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6376, 62, 8189, 28, 1837, 23650, 11, 1271, 5189, 13749, 12409, 38770, 2514, 34, 13132, 28, 49388, 11, 923, 10430, 28, 9688, 11, 886, 10430, 28, 437]"
üß† ML Signal: Logging exceptions with context,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 13269, 351, 4732]",0.5,463,ml_signal,111,Logging exceptions with context,,463,,[]
‚úÖ Best Practice: Consider specifying the return type as List[pd.DataFrame] for clarity,"[26486, 227, 6705, 19939, 25, 12642, 31577, 262, 1441, 2099, 355, 7343, 58, 30094, 13, 6601, 19778, 60, 329, 16287]",1.0,472,best_practice,105,Consider specifying the return type as List[pd.DataFrame] for clarity,,463,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007, 13]",1.0,484,best_practice,109,Consider adding a docstring to describe the function's purpose and parameters.,,472,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of a sleep function indicates a delay or rate-limiting pattern.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 3993, 2163, 9217, 257, 5711, 393, 2494, 12, 2475, 1780, 3912, 13]",0.5,484,ml_signal,111,Usage of a sleep function indicates a delay or rate-limiting pattern.,,484,,[]
‚ö†Ô∏è SAST Risk (Low): Use of a global or outer-scope variable without clear definition in the function.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 257, 3298, 393, 12076, 12, 29982, 7885, 1231, 1598, 6770, 287, 262, 2163, 13]",0.5,484,sast_risk,111,Use of a global or outer-scope variable without clear definition in the function.,Low,484,,[]
‚ö†Ô∏è SAST Risk (Low): Use of a global or outer-scope variable without clear definition in the function.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 257, 3298, 393, 12076, 12, 29982, 7885, 1231, 1598, 6770, 287, 262, 2163, 13]",0.5,484,sast_risk,116,Use of a global or outer-scope variable without clear definition in the function.,Low,484,,[]
üß† ML Signal: Conditional logic based on interval values can indicate time-based data processing.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 16654, 3815, 460, 7603, 640, 12, 3106, 1366, 7587, 13]",0.5,508,ml_signal,122,Conditional logic based on interval values can indicate time-based data processing.,,484,            # TODO: should we sort the value by datetime?,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 16926, 46, 25, 815, 356, 3297, 262, 1988, 416, 4818, 8079, 30]"
‚ö†Ô∏è SAST Risk (Low): Potential information disclosure through exception message.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1321, 13019, 832, 6631, 3275, 13]",0.5,531,sast_risk,126,Potential information disclosure through exception message.,Low,508,                return _resp.reset_index(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 4808, 4363, 13, 42503, 62, 9630, 3419]"
‚úÖ Best Practice: Ensure that the function or method that contains this code has a clear return type.,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 2163, 393, 2446, 326, 4909, 428, 2438, 468, 257, 1598, 1441, 2099, 13]",0.5,557,best_practice,128,Ensure that the function or method that contains this code has a clear return type.,,531,"            logger.warning(f""{error_msg}:{e}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 90, 18224, 62, 19662, 92, 29164, 68, 92, 4943]"
‚úÖ Best Practice: Inheriting from ABC indicates that this class is intended to be abstract.,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 9738, 9217, 326, 428, 1398, 318, 5292, 284, 307, 12531, 13]",1.0,581,best_practice,122,Inheriting from ABC indicates that this class is intended to be abstract.,,557,            # TODO: should we sort the value by datetime?,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 16926, 46, 25, 815, 356, 3297, 262, 1988, 416, 4818, 8079, 30]"
‚úÖ Best Practice: Method name should be descriptive of its functionality,"[26486, 227, 6705, 19939, 25, 11789, 1438, 815, 307, 35644, 286, 663, 11244]",1.0,613,best_practice,123,Method name should be descriptive of its functionality,,581,"            _resp = pd.DataFrame(data[""Data""][""LSJZList""])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 4363, 796, 279, 67, 13, 6601, 19778, 7, 7890, 14692, 6601, 1, 7131, 1, 6561, 41, 57, 8053, 8973, 8]"
üß† ML Signal: Logging usage pattern,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912]",0.5,636,ml_signal,125,Logging usage pattern,,613,"            if isinstance(_resp, pd.DataFrame):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 28264, 4363, 11, 279, 67, 13, 6601, 19778, 2599]"
üß† ML Signal: Function call pattern,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912]",1.0,648,ml_signal,127,Function call pattern,,636,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
üß† ML Signal: Logging usage pattern with dynamic data,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 351, 8925, 1366]",0.5,648,ml_signal,129,Logging usage pattern with dynamic data,,648,,[]
üß† ML Signal: Return statement pattern,"[8582, 100, 254, 10373, 26484, 25, 8229, 2643, 3912]",0.5,686,ml_signal,131,Return statement pattern,,648,"        self, symbol: str, interval: str, start_datetime: pd.Timestamp, end_datetime: pd.Timestamp","[220, 220, 220, 220, 220, 220, 220, 2116, 11, 6194, 25, 965, 11, 16654, 25, 965, 11, 923, 62, 19608, 8079, 25, 279, 67, 13, 14967, 27823, 11, 886, 62, 19608, 8079, 25, 279, 67, 13, 14967, 27823]"
"üß† ML Signal: Function that returns input as output, indicating a potential placeholder or default behavior","[8582, 100, 254, 10373, 26484, 25, 15553, 326, 5860, 5128, 355, 5072, 11, 12739, 257, 2785, 46076, 393, 4277, 4069]",0.5,686,ml_signal,129,"Function that returns input as output, indicating a potential placeholder or default behavior",,686,,[]
‚úÖ Best Practice: Use of @property decorator for defining a read-only attribute,"[26486, 227, 6705, 19939, 25, 5765, 286, 2488, 26745, 11705, 1352, 329, 16215, 257, 1100, 12, 8807, 11688]",0.5,697,best_practice,132,Use of @property decorator for defining a read-only attribute,,686,    ) -> [pd.DataFrame]:,"[220, 220, 220, 1267, 4613, 685, 30094, 13, 6601, 19778, 5974]"
‚úÖ Best Practice: Consider using a constant or configuration for timezone values to improve maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 6937, 393, 8398, 329, 640, 11340, 3815, 284, 2987, 5529, 1799, 13]",0.5,735,best_practice,131,Consider using a constant or configuration for timezone values to improve maintainability.,,697,"        self, symbol: str, interval: str, start_datetime: pd.Timestamp, end_datetime: pd.Timestamp","[220, 220, 220, 220, 220, 220, 220, 2116, 11, 6194, 25, 965, 11, 16654, 25, 965, 11, 923, 62, 19608, 8079, 25, 279, 67, 13, 14967, 27823, 11, 886, 62, 19608, 8079, 25, 279, 67, 13, 14967, 27823]"
‚úÖ Best Practice: Use of inheritance to extend functionality from a parent class,"[26486, 227, 6705, 19939, 25, 5765, 286, 24155, 284, 9117, 11244, 422, 257, 2560, 1398]",1.0,754,best_practice,133,Use of inheritance to extend functionality from a parent class,,735,"        def _get_simple(start_, end_):","[220, 220, 220, 220, 220, 220, 220, 825, 4808, 1136, 62, 36439, 7, 9688, 62, 11, 886, 62, 2599]"
‚úÖ Best Practice: Use of a static method for utility functions that do not require class or instance data,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 9037, 2446, 329, 10361, 5499, 326, 466, 407, 2421, 1398, 393, 4554, 1366]",1.0,776,best_practice,136,Use of a static method for utility functions that do not require class or instance data,,754,            return self.get_data_from_remote(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 1136, 62, 7890, 62, 6738, 62, 47960, 7]"
‚úÖ Best Practice: Check for empty DataFrame to avoid unnecessary processing,"[26486, 227, 6705, 19939, 25, 6822, 329, 6565, 6060, 19778, 284, 3368, 13114, 7587]",1.0,805,best_practice,144,Check for empty DataFrame to avoid unnecessary processing,,776,"            _result = _get_simple(start_datetime, end_datetime)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 20274, 796, 4808, 1136, 62, 36439, 7, 9688, 62, 19608, 8079, 11, 886, 62, 19608, 8079, 8]"
‚úÖ Best Practice: Use copy to avoid modifying the original DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 4866, 284, 3368, 30620, 262, 2656, 6060, 19778]",1.0,815,best_practice,147,Use copy to avoid modifying the original DataFrame,,805,        return _result,"[220, 220, 220, 220, 220, 220, 220, 1441, 4808, 20274]"
‚úÖ Best Practice: Set index for efficient time series operations,"[26486, 227, 6705, 19939, 25, 5345, 6376, 329, 6942, 640, 2168, 4560]",1.0,815,best_practice,149,Set index for efficient time series operations,,815,,[]
‚úÖ Best Practice: Convert index to datetime for time series operations,"[26486, 227, 6705, 19939, 25, 38240, 6376, 284, 4818, 8079, 329, 640, 2168, 4560]",1.0,828,best_practice,151,Convert index to datetime for time series operations,,815,    def get_instrument_list(self):,"[220, 220, 220, 825, 651, 62, 259, 43872, 62, 4868, 7, 944, 2599]"
‚úÖ Best Practice: Remove duplicate indices to ensure data integrity,"[26486, 227, 6705, 19939, 25, 17220, 23418, 36525, 284, 4155, 1366, 11540]",1.0,841,best_practice,151,Remove duplicate indices to ensure data integrity,,828,    def get_instrument_list(self):,"[220, 220, 220, 825, 651, 62, 259, 43872, 62, 4868, 7, 944, 2599]"
‚úÖ Best Practice: Reindex to align with a given calendar,"[26486, 227, 6705, 19939, 25, 797, 9630, 284, 10548, 351, 257, 1813, 11845]",1.0,841,best_practice,159,Reindex to align with a given calendar,,841,,[]
‚úÖ Best Practice: Use pd.Timestamp for consistent datetime operations,"[26486, 227, 6705, 19939, 25, 5765, 279, 67, 13, 14967, 27823, 329, 6414, 4818, 8079, 4560]",1.0,846,best_practice,160,Use pd.Timestamp for consistent datetime operations,,841,    @property,"[220, 220, 220, 2488, 26745]"
‚úÖ Best Practice: Sort index to maintain chronological order,"[26486, 227, 6705, 19939, 25, 33947, 6376, 284, 5529, 45946, 1502]",1.0,850,best_practice,166,Sort index to maintain chronological order,,846,    pass,"[220, 220, 220, 1208]"
‚úÖ Best Practice: Explicitly set index names for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 900, 6376, 3891, 329, 16287]",1.0,850,best_practice,168,Explicitly set index names for clarity,,850,,[]
‚úÖ Best Practice: Reset index to convert index back to a column,"[26486, 227, 6705, 19939, 25, 30027, 6376, 284, 10385, 6376, 736, 284, 257, 5721]",0.5,868,best_practice,170,Reset index to convert index back to a column,,850,"    DAILY_FORMAT = ""%Y-%m-%d""","[220, 220, 220, 17051, 33340, 62, 21389, 1404, 796, 36521, 56, 12, 4, 76, 12, 4, 67, 1]"
‚úÖ Best Practice: Include type hints for method parameters and return type for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 40348, 2099, 20269, 329, 2446, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799]",1.0,883,best_practice,162,Include type hints for method parameters and return type for better readability and maintainability,,868,"        return ""Asia/Shanghai""","[220, 220, 220, 220, 220, 220, 220, 1441, 366, 38555, 14, 2484, 272, 20380, 1]"
üß† ML Signal: Method chaining pattern with DataFrame operations,"[8582, 100, 254, 10373, 26484, 25, 11789, 442, 1397, 3912, 351, 6060, 19778, 4560]",1.0,883,ml_signal,164,Method chaining pattern with DataFrame operations,,883,,[]
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",1.0,897,best_practice,165,Use descriptive variable names for better readability,,883,class FundCollectorCN1d(FundollectorCN):,"[4871, 7557, 31337, 273, 44175, 16, 67, 7, 24553, 349, 801, 273, 44175, 2599]"
üß† ML Signal: Returning a DataFrame after processing,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 706, 7587]",0.5,897,ml_signal,167,Returning a DataFrame after processing,,897,,[]
‚úÖ Best Practice: Use of inheritance to extend functionality of a base class,"[26486, 227, 6705, 19939, 25, 5765, 286, 24155, 284, 9117, 11244, 286, 257, 2779, 1398]",1.0,911,best_practice,165,Use of inheritance to extend functionality of a base class,,897,class FundCollectorCN1d(FundollectorCN):,"[4871, 7557, 31337, 273, 44175, 16, 67, 7, 24553, 349, 801, 273, 44175, 2599]"
‚úÖ Best Practice: Use of a private method name indicates internal use within the class,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 2839, 2446, 1438, 9217, 5387, 779, 1626, 262, 1398]",0.5,911,best_practice,168,Use of a private method name indicates internal use within the class,,911,,[]
üß† ML Signal: Function call with a constant string argument,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 257, 6937, 4731, 4578]",0.5,929,ml_signal,170,Function call with a constant string argument,,911,"    DAILY_FORMAT = ""%Y-%m-%d""","[220, 220, 220, 17051, 33340, 62, 21389, 1404, 796, 36521, 56, 12, 4, 76, 12, 4, 67, 1]"
‚úÖ Best Practice: Use of multiple inheritance to combine functionality from FundNormalizeCN and FundNormalize1d,"[26486, 227, 6705, 19939, 25, 5765, 286, 3294, 24155, 284, 12082, 11244, 422, 7557, 26447, 1096, 44175, 290, 7557, 26447, 1096, 16, 67]",1.0,947,best_practice,170,Use of multiple inheritance to combine functionality from FundNormalizeCN and FundNormalize1d,,929,"    DAILY_FORMAT = ""%Y-%m-%d""","[220, 220, 220, 17051, 33340, 62, 21389, 1404, 796, 36521, 56, 12, 4, 76, 12, 4, 67, 1]"
‚úÖ Best Practice: Class definition should inherit from a base class for reusability and structure.,"[26486, 227, 6705, 19939, 25, 5016, 6770, 815, 16955, 422, 257, 2779, 1398, 329, 302, 385, 1799, 290, 4645, 13]",0.5,956,best_practice,173,Class definition should inherit from a base class for reusability and structure.,,947,    def normalize_fund(,"[220, 220, 220, 825, 3487, 1096, 62, 10990, 7]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",1.0,971,best_practice,174,Use of default parameter values for flexibility and ease of use,,956,"        df: pd.DataFrame,","[220, 220, 220, 220, 220, 220, 220, 47764, 25, 279, 67, 13, 6601, 19778, 11]"
‚úÖ Best Practice: Calling the superclass's __init__ method to ensure proper initialization,"[26486, 227, 6705, 19939, 25, 32677, 262, 2208, 4871, 338, 11593, 15003, 834, 2446, 284, 4155, 1774, 37588]",1.0,1021,best_practice,189,Calling the superclass's __init__ method to ensure proper initialization,,971,                    pd.Timestamp(df.index.min()).date() : pd.Timestamp(df.index.max()).date(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 279, 67, 13, 14967, 27823, 7, 7568, 13, 9630, 13, 1084, 3419, 737, 4475, 3419, 1058, 279, 67, 13, 14967, 27823, 7, 7568, 13, 9630, 13, 9806, 3419, 737, 4475, 3419]"
üß† ML Signal: Storing configuration or state information in instance variables,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 8398, 393, 1181, 1321, 287, 4554, 9633]",0.5,1037,ml_signal,191,Storing configuration or state information in instance variables,,1021,                ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Use of f-string for dynamic string formatting,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 277, 12, 8841, 329, 8925, 4731, 33313]",0.5,1053,ml_signal,191,Use of f-string for dynamic string formatting,,1037,                ],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2361]"
üß† ML Signal: Use of string manipulation methods,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4731, 17512, 5050]",0.5,1070,ml_signal,192,Use of string manipulation methods,,1053,                .index,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 9630]"
üß† ML Signal: Method for generating class names based on attributes,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 15453, 1398, 3891, 1912, 319, 12608]",1.0,1070,ml_signal,195,Method for generating class names based on attributes,,1070,,[]
‚úÖ Best Practice: Specify the return type as a Union of Path and str for clarity.,"[26486, 227, 6705, 19939, 25, 18291, 1958, 262, 1441, 2099, 355, 257, 4479, 286, 10644, 290, 965, 329, 16287, 13]",1.0,1084,best_practice,197,Specify the return type as a Union of Path and str for clarity.,,1070,        return df.reset_index(),"[220, 220, 220, 220, 220, 220, 220, 1441, 47764, 13, 42503, 62, 9630, 3419]"
‚ö†Ô∏è SAST Risk (Low): Returning a global variable like CUR_DIR can expose internal state.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42882, 257, 3298, 7885, 588, 327, 4261, 62, 34720, 460, 15651, 5387, 1181, 13]",0.5,1108,sast_risk,199,Returning a global variable like CUR_DIR can expose internal state.,Low,1084,"    def normalize(self, df: pd.DataFrame) -> pd.DataFrame:","[220, 220, 220, 825, 3487, 1096, 7, 944, 11, 47764, 25, 279, 67, 13, 6601, 19778, 8, 4613, 279, 67, 13, 6601, 19778, 25]"
‚úÖ Best Practice: Docstring provides clear documentation of parameters and usage,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 1598, 10314, 286, 10007, 290, 8748]",0.5,1108,best_practice,208,Docstring provides clear documentation of parameters and usage,,1108,,[]
"üß† ML Signal: Method overriding in a class, useful for learning class hierarchies","[8582, 100, 254, 10373, 26484, 25, 11789, 44987, 287, 257, 1398, 11, 4465, 329, 4673, 1398, 28398, 444]",0.5,1118,ml_signal,230,"Method overriding in a class, useful for learning class hierarchies",,1108,        interval: str,"[220, 220, 220, 220, 220, 220, 220, 16654, 25, 965]"
‚úÖ Best Practice: Use of super() to call the parent class method,"[26486, 227, 6705, 19939, 25, 5765, 286, 2208, 3419, 284, 869, 262, 2560, 1398, 2446]",1.0,1144,best_practice,231,Use of super() to call the parent class method,,1118,"            freq, value from [1min, 1d], default 1d","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2030, 80, 11, 1988, 422, 685, 16, 1084, 11, 352, 67, 4357, 4277, 352, 67]"
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",0.5,1170,best_practice,231,Use of default parameter values for flexibility and ease of use,,1144,"            freq, value from [1min, 1d], default 1d","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2030, 80, 11, 1988, 422, 685, 16, 1084, 11, 352, 67, 4357, 4277, 352, 67]"
"üß† ML Signal: Method overriding in a class, indicating use of inheritance","[8582, 100, 254, 10373, 26484, 25, 11789, 44987, 287, 257, 1398, 11, 12739, 779, 286, 24155]",0.5,1183,ml_signal,243,"Method overriding in a class, indicating use of inheritance",,1170,    def normalize_class_name(self):,"[220, 220, 220, 825, 3487, 1096, 62, 4871, 62, 3672, 7, 944, 2599]"
‚ö†Ô∏è SAST Risk (Low): Using fire.Fire can execute arbitrary code if user input is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 2046, 13, 13543, 460, 12260, 14977, 2438, 611, 2836, 5128, 318, 407, 6105, 5336, 36951]",0.5,1209,sast_risk,244,Using fire.Fire can execute arbitrary code if user input is not properly sanitized,Low,1183,"        return f""FundNormalize{self.region.upper()}{self.interval}""","[220, 220, 220, 220, 220, 220, 220, 1441, 277, 1, 24553, 26447, 1096, 90, 944, 13, 36996, 13, 45828, 3419, 18477, 944, 13, 3849, 2100, 36786]"
üß† ML Signal: Use of fire.Fire for command-line interface generation,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2046, 13, 13543, 329, 3141, 12, 1370, 7071, 5270]",1.0,1235,ml_signal,244,Use of fire.Fire for command-line interface generation,,1209,"        return f""FundNormalize{self.region.upper()}{self.interval}""","[220, 220, 220, 220, 220, 220, 220, 1441, 277, 1, 24553, 26447, 1096, 90, 944, 13, 36996, 13, 45828, 3419, 18477, 944, 13, 3849, 2100, 36786]"

[
  {
    "line": 10,
    "text": "import fire",
    "annotation": "\ud83e\udde0 ML Signal: Importing libraries, especially those related to data processing and logging, indicates potential usage patterns for ML workflows",
    "confidence": 1.0,
    "tokens": [
      11748,
      2046
    ],
    "start_token": 0,
    "end_token": 2,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      12782,
      11,
      2592,
      883,
      3519,
      284,
      1366,
      7587,
      290,
      18931,
      11,
      9217,
      2785,
      8748,
      7572,
      329,
      10373,
      670,
      44041
    ],
    "label": "ml_signal",
    "reason": "Importing libraries, especially those related to data processing and logging, indicates potential usage patterns for ML workflows"
  },
  {
    "line": 11,
    "text": "import datacompy",
    "annotation": "\u2705 Best Practice: Grouping imports into standard library, third-party, and local sections improves readability",
    "confidence": 0.5,
    "tokens": [
      11748,
      4818,
      330,
      3361,
      88
    ],
    "start_token": 2,
    "end_token": 7,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4912,
      278,
      17944,
      656,
      3210,
      5888,
      11,
      2368,
      12,
      10608,
      11,
      290,
      1957,
      9004,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Grouping imports into standard library, third-party, and local sections improves readability"
  },
  {
    "line": 11,
    "text": "import datacompy",
    "annotation": "\u2705 Best Practice: Constants are defined in uppercase to indicate immutability.",
    "confidence": 1.0,
    "tokens": [
      11748,
      4818,
      330,
      3361,
      88
    ],
    "start_token": 7,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      389,
      5447,
      287,
      334,
      39921,
      589,
      284,
      7603,
      2296,
      315,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Constants are defined in uppercase to indicate immutability."
  },
  {
    "line": 13,
    "text": "from tqdm import tqdm",
    "annotation": "\u2705 Best Practice: Constants are defined in uppercase to indicate immutability.",
    "confidence": 1.0,
    "tokens": [
      6738,
      256,
      80,
      36020,
      1330,
      256,
      80,
      36020
    ],
    "start_token": 12,
    "end_token": 20,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      389,
      5447,
      287,
      334,
      39921,
      589,
      284,
      7603,
      2296,
      315,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Constants are defined in uppercase to indicate immutability."
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\u2705 Best Practice: Constants are defined in uppercase to indicate immutability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 20,
    "end_token": 20,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      389,
      5447,
      287,
      334,
      39921,
      589,
      284,
      7603,
      2296,
      315,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Constants are defined in uppercase to indicate immutability."
  },
  {
    "line": 15,
    "text": "",
    "annotation": "\u2705 Best Practice: Constants are defined in uppercase to indicate immutability.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 20,
    "end_token": 20,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4757,
      1187,
      389,
      5447,
      287,
      334,
      39921,
      589,
      284,
      7603,
      2296,
      315,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Constants are defined in uppercase to indicate immutability."
  },
  {
    "line": 46,
    "text": "        symbol_field_name: str, optional",
    "annotation": "\u2705 Best Practice: Use of Path().expanduser() to handle user directories in a cross-platform way",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      62,
      3245,
      62,
      3672,
      25,
      965,
      11,
      11902
    ],
    "start_token": 20,
    "end_token": 36,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      22446,
      11201,
      392,
      7220,
      3419,
      284,
      5412,
      2836,
      29196,
      287,
      257,
      3272,
      12,
      24254,
      835
    ],
    "label": "best_practice",
    "reason": "Use of Path().expanduser() to handle user directories in a cross-platform way"
  },
  {
    "line": 48,
    "text": "        date_field_name: str, optional",
    "annotation": "\u2705 Best Practice: Use of Path.iterdir() to list directory contents",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3128,
      62,
      3245,
      62,
      3672,
      25,
      965,
      11,
      11902
    ],
    "start_token": 36,
    "end_token": 52,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      13,
      2676,
      15908,
      3419,
      284,
      1351,
      8619,
      10154
    ],
    "label": "best_practice",
    "reason": "Use of Path.iterdir() to list directory contents"
  },
  {
    "line": 49,
    "text": "            date field name, by default \"date\"",
    "annotation": "\ud83e\udde0 ML Signal: Use of sorted and map to process and sort directory names",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3128,
      2214,
      1438,
      11,
      416,
      4277,
      366,
      4475,
      1
    ],
    "start_token": 52,
    "end_token": 72,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      23243,
      290,
      3975,
      284,
      1429,
      290,
      3297,
      8619,
      3891
    ],
    "label": "ml_signal",
    "reason": "Use of sorted and map to process and sort directory names"
  },
  {
    "line": 49,
    "text": "            date field name, by default \"date\"",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of qlib with specific parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3128,
      2214,
      1438,
      11,
      416,
      4277,
      366,
      4475,
      1
    ],
    "start_token": 72,
    "end_token": 92,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      10662,
      8019,
      351,
      2176,
      10007
    ],
    "label": "ml_signal",
    "reason": "Initialization of qlib with specific parameters"
  },
  {
    "line": 58,
    "text": "        qlib.init(",
    "annotation": "\u2705 Best Practice: Use of Path().expanduser() to handle user directories in a cross-platform way",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10662,
      8019,
      13,
      15003,
      7
    ],
    "start_token": 92,
    "end_token": 104,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      22446,
      11201,
      392,
      7220,
      3419,
      284,
      5412,
      2836,
      29196,
      287,
      257,
      3272,
      12,
      24254,
      835
    ],
    "label": "best_practice",
    "reason": "Use of Path().expanduser() to handle user directories in a cross-platform way"
  },
  {
    "line": 61,
    "text": "            auto_mount=False,",
    "annotation": "\u2705 Best Practice: Use of Path.glob() to find files matching a pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8295,
      62,
      14948,
      28,
      25101,
      11
    ],
    "start_token": 104,
    "end_token": 121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10644,
      13,
      4743,
      672,
      3419,
      284,
      1064,
      3696,
      12336,
      257,
      3912
    ],
    "label": "best_practice",
    "reason": "Use of Path.glob() to find files matching a pattern"
  },
  {
    "line": 64,
    "text": "        csv_path = Path(csv_path).expanduser()",
    "annotation": "\u2705 Best Practice: Use of map and lambda for concise transformations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      21370,
      62,
      6978,
      796,
      10644,
      7,
      40664,
      62,
      6978,
      737,
      11201,
      392,
      7220,
      3419
    ],
    "start_token": 121,
    "end_token": 143,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3975,
      290,
      37456,
      329,
      35327,
      38226
    ],
    "label": "best_practice",
    "reason": "Use of map and lambda for concise transformations"
  },
  {
    "line": 67,
    "text": "        if check_fields is None:",
    "annotation": "\u2705 Best Practice: Use of split and map for string processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2198,
      62,
      25747,
      318,
      6045,
      25
    ],
    "start_token": 143,
    "end_token": 157,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6626,
      290,
      3975,
      329,
      4731,
      7587
    ],
    "label": "best_practice",
    "reason": "Use of split and map for string processing"
  },
  {
    "line": 69,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Use of map and lambda for concise transformations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 157,
    "end_token": 166,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3975,
      290,
      37456,
      329,
      35327,
      38226
    ],
    "label": "best_practice",
    "reason": "Use of map and lambda for concise transformations"
  },
  {
    "line": 71,
    "text": "        self.check_fields = list(map(lambda x: x.strip(), check_fields))",
    "annotation": "\u2705 Best Practice: Use of map and lambda for concise transformations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9122,
      62,
      25747,
      796,
      1351,
      7,
      8899,
      7,
      50033,
      2124,
      25,
      2124,
      13,
      36311,
      22784,
      2198,
      62,
      25747,
      4008
    ],
    "start_token": 166,
    "end_token": 194,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3975,
      290,
      37456,
      329,
      35327,
      38226
    ],
    "label": "best_practice",
    "reason": "Use of map and lambda for concise transformations"
  },
  {
    "line": 73,
    "text": "        self.max_workers = max_workers",
    "annotation": "\ud83e\udde0 ML Signal: Storing configuration parameters as instance variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9806,
      62,
      22896,
      796,
      3509,
      62,
      22896
    ],
    "start_token": 194,
    "end_token": 210,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      8398,
      10007,
      355,
      4554,
      9633
    ],
    "label": "ml_signal",
    "reason": "Storing configuration parameters as instance variables"
  },
  {
    "line": 69,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of file path and file suffix to derive a symbol",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 210,
    "end_token": 219,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2393,
      3108,
      290,
      2393,
      35488,
      284,
      27099,
      257,
      6194
    ],
    "label": "ml_signal",
    "reason": "Usage of file path and file suffix to derive a symbol"
  },
  {
    "line": 71,
    "text": "        self.check_fields = list(map(lambda x: x.strip(), check_fields))",
    "annotation": "\ud83e\udde0 ML Signal: Checking membership in a predefined list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9122,
      62,
      25747,
      796,
      1351,
      7,
      8899,
      7,
      50033,
      2124,
      25,
      2124,
      13,
      36311,
      22784,
      2198,
      62,
      25747,
      4008
    ],
    "start_token": 219,
    "end_token": 247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      9931,
      287,
      257,
      2747,
      18156,
      1351
    ],
    "label": "ml_signal",
    "reason": "Checking membership in a predefined list"
  },
  {
    "line": 74,
    "text": "        self.symbol_field_name = symbol_field_name",
    "annotation": "\ud83e\udde0 ML Signal: Fetching features using a library function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1837,
      23650,
      62,
      3245,
      62,
      3672,
      796,
      6194,
      62,
      3245,
      62,
      3672
    ],
    "start_token": 247,
    "end_token": 268,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      376,
      7569,
      278,
      3033,
      1262,
      257,
      5888,
      2163
    ],
    "label": "ml_signal",
    "reason": "Fetching features using a library function"
  },
  {
    "line": 76,
    "text": "        self.freq = freq",
    "annotation": "\u2705 Best Practice: Using rename with inplace=True for clarity and efficiency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      19503,
      80,
      796,
      2030,
      80
    ],
    "start_token": 268,
    "end_token": 282,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      36265,
      351,
      287,
      5372,
      28,
      17821,
      329,
      16287,
      290,
      9332
    ],
    "label": "best_practice",
    "reason": "Using rename with inplace=True for clarity and efficiency"
  },
  {
    "line": 78,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Reading CSV files can be risky if the file source is untrusted",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 282,
    "end_token": 282,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11725,
      44189,
      3696,
      460,
      307,
      17564,
      611,
      262,
      2393,
      2723,
      318,
      1418,
      81,
      8459
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Reading CSV files can be risky if the file source is untrusted"
  },
  {
    "line": 80,
    "text": "        symbol = file_path.name.strip(self.file_suffix)",
    "annotation": "\u2705 Best Practice: Converting date fields to datetime for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      796,
      2393,
      62,
      6978,
      13,
      3672,
      13,
      36311,
      7,
      944,
      13,
      7753,
      62,
      37333,
      844,
      8
    ],
    "start_token": 282,
    "end_token": 306,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      3128,
      7032,
      284,
      4818,
      8079,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Converting date fields to datetime for consistency"
  },
  {
    "line": 82,
    "text": "            return self.NOT_IN_FEATURES",
    "annotation": "\ud83e\udde0 ML Signal: Adding a missing column with a default value",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      11929,
      62,
      1268,
      62,
      15112,
      47471
    ],
    "start_token": 306,
    "end_token": 326,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      257,
      4814,
      5721,
      351,
      257,
      4277,
      1988
    ],
    "label": "ml_signal",
    "reason": "Adding a missing column with a default value"
  },
  {
    "line": 82,
    "text": "            return self.NOT_IN_FEATURES",
    "annotation": "\u2705 Best Practice: Setting index for DataFrame for efficient operations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      11929,
      62,
      1268,
      62,
      15112,
      47471
    ],
    "start_token": 326,
    "end_token": 346,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      6376,
      329,
      6060,
      19778,
      329,
      6942,
      4560
    ],
    "label": "best_practice",
    "reason": "Setting index for DataFrame for efficient operations"
  },
  {
    "line": 91,
    "text": "        origin_df.set_index([self.symbol_field_name, self.date_field_name], inplace=True)",
    "annotation": "\u2705 Best Practice: Ensuring index names match for comparison",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8159,
      62,
      7568,
      13,
      2617,
      62,
      9630,
      26933,
      944,
      13,
      1837,
      23650,
      62,
      3245,
      62,
      3672,
      11,
      2116,
      13,
      4475,
      62,
      3245,
      62,
      3672,
      4357,
      287,
      5372,
      28,
      17821,
      8
    ],
    "start_token": 346,
    "end_token": 383,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48221,
      870,
      6376,
      3891,
      2872,
      329,
      7208
    ],
    "label": "best_practice",
    "reason": "Ensuring index names match for comparison"
  },
  {
    "line": 91,
    "text": "        origin_df.set_index([self.symbol_field_name, self.date_field_name], inplace=True)",
    "annotation": "\ud83e\udde0 ML Signal: Reindexing DataFrame to match another DataFrame's index",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8159,
      62,
      7568,
      13,
      2617,
      62,
      9630,
      26933,
      944,
      13,
      1837,
      23650,
      62,
      3245,
      62,
      3672,
      11,
      2116,
      13,
      4475,
      62,
      3245,
      62,
      3672,
      4357,
      287,
      5372,
      28,
      17821,
      8
    ],
    "start_token": 383,
    "end_token": 420,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      797,
      9630,
      278,
      6060,
      19778,
      284,
      2872,
      1194,
      6060,
      19778,
      338,
      6376
    ],
    "label": "ml_signal",
    "reason": "Reindexing DataFrame to match another DataFrame's index"
  },
  {
    "line": 92,
    "text": "        origin_df.index.names = qlib_df.index.names",
    "annotation": "\ud83e\udde0 ML Signal: Using a comparison library to compare DataFrames",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8159,
      62,
      7568,
      13,
      9630,
      13,
      14933,
      796,
      10662,
      8019,
      62,
      7568,
      13,
      9630,
      13,
      14933
    ],
    "start_token": 420,
    "end_token": 443,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      257,
      7208,
      5888,
      284,
      8996,
      6060,
      35439
    ],
    "label": "ml_signal",
    "reason": "Using a comparison library to compare DataFrames"
  },
  {
    "line": 102,
    "text": "                df2_name=\"New\",  # Optional, defaults to 'df2'",
    "annotation": "\ud83e\udde0 ML Signal: Checking if DataFrames match with specific tolerances",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      17,
      62,
      3672,
      2625,
      3791,
      1600,
      220,
      1303,
      32233,
      11,
      26235,
      284,
      705,
      7568,
      17,
      6
    ],
    "start_token": 443,
    "end_token": 475,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      611,
      6060,
      35439,
      2872,
      351,
      2176,
      8214,
      1817
    ],
    "label": "ml_signal",
    "reason": "Checking if DataFrames match with specific tolerances"
  },
  {
    "line": 106,
    "text": "        except Exception as e:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 475,
    "end_token": 487,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide issues"
  },
  {
    "line": 98,
    "text": "                on_index=True,",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for tracking execution flow",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      319,
      62,
      9630,
      28,
      17821,
      11
    ],
    "start_token": 487,
    "end_token": 508,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      9646,
      9706,
      5202
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for tracking execution flow"
  },
  {
    "line": 103,
    "text": "            )",
    "annotation": "\ud83e\udde0 ML Signal: Usage of tqdm for progress tracking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1267
    ],
    "start_token": 508,
    "end_token": 520,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      256,
      80,
      36020,
      329,
      4371,
      9646
    ],
    "label": "ml_signal",
    "reason": "Usage of tqdm for progress tracking"
  },
  {
    "line": 105,
    "text": "            return self.COMPARE_TRUE if _r else self.COMPARE_FALSE",
    "annotation": "\ud83e\udde0 ML Signal: Usage of ProcessPoolExecutor for parallel processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2116,
      13,
      9858,
      47,
      12203,
      62,
      5446,
      8924,
      611,
      4808,
      81,
      2073,
      2116,
      13,
      9858,
      47,
      12203,
      62,
      37,
      23719
    ],
    "start_token": 520,
    "end_token": 552,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      10854,
      27201,
      23002,
      38409,
      329,
      10730,
      7587
    ],
    "label": "ml_signal",
    "reason": "Usage of ProcessPoolExecutor for parallel processing"
  },
  {
    "line": 107,
    "text": "            logger.warning(f\"{symbol} compare error: {e}\")",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over files and processing results",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      49706,
      13,
      43917,
      7,
      69,
      1,
      90,
      1837,
      23650,
      92,
      8996,
      4049,
      25,
      1391,
      68,
      92,
      4943
    ],
    "start_token": 552,
    "end_token": 580,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      3696,
      290,
      7587,
      2482
    ],
    "label": "ml_signal",
    "reason": "Iterating over files and processing results"
  },
  {
    "line": 116,
    "text": "        compare_false = []",
    "annotation": "\ud83e\udde0 ML Signal: Updating progress bar",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8996,
      62,
      9562,
      796,
      17635
    ],
    "start_token": 580,
    "end_token": 592,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3205,
      38734,
      4371,
      2318
    ],
    "label": "ml_signal",
    "reason": "Updating progress bar"
  },
  {
    "line": 118,
    "text": "            with ProcessPoolExecutor(max_workers=self.max_workers) as executor:",
    "annotation": "\ud83e\udde0 ML Signal: Logging usage pattern for tracking execution flow",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      351,
      10854,
      27201,
      23002,
      38409,
      7,
      9806,
      62,
      22896,
      28,
      944,
      13,
      9806,
      62,
      22896,
      8,
      355,
      3121,
      273,
      25
    ],
    "start_token": 592,
    "end_token": 623,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      8748,
      3912,
      329,
      9646,
      9706,
      5202
    ],
    "label": "ml_signal",
    "reason": "Logging usage pattern for tracking execution flow"
  },
  {
    "line": 120,
    "text": "                    symbol = file_path.name.strip(self.file_suffix)",
    "annotation": "\ud83e\udde0 ML Signal: Logging warnings for error conditions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      796,
      2393,
      62,
      6978,
      13,
      3672,
      13,
      36311,
      7,
      944,
      13,
      7753,
      62,
      37333,
      844,
      8
    ],
    "start_token": 623,
    "end_token": 659,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      14601,
      329,
      4049,
      3403
    ],
    "label": "ml_signal",
    "reason": "Logging warnings for error conditions"
  },
  {
    "line": 124,
    "text": "                        error_list.append(symbol)",
    "annotation": "\ud83e\udde0 ML Signal: Logging warnings for specific conditions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4049,
      62,
      4868,
      13,
      33295,
      7,
      1837,
      23650,
      8
    ],
    "start_token": 659,
    "end_token": 691,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      14601,
      329,
      2176,
      3403
    ],
    "label": "ml_signal",
    "reason": "Logging warnings for specific conditions"
  },
  {
    "line": 124,
    "text": "                        error_list.append(symbol)",
    "annotation": "\ud83e\udde0 ML Signal: Logging warnings for specific conditions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4049,
      62,
      4868,
      13,
      33295,
      7,
      1837,
      23650,
      8
    ],
    "start_token": 691,
    "end_token": 723,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      14601,
      329,
      2176,
      3403
    ],
    "label": "ml_signal",
    "reason": "Logging warnings for specific conditions"
  },
  {
    "line": 124,
    "text": "                        error_list.append(symbol)",
    "annotation": "\ud83e\udde0 ML Signal: Logging summary of results",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4049,
      62,
      4868,
      13,
      33295,
      7,
      1837,
      23650,
      8
    ],
    "start_token": 723,
    "end_token": 755,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      10638,
      286,
      2482
    ],
    "label": "ml_signal",
    "reason": "Logging summary of results"
  },
  {
    "line": 124,
    "text": "                        error_list.append(symbol)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct execution of main without input validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4049,
      62,
      4868,
      13,
      33295,
      7,
      1837,
      23650,
      8
    ],
    "start_token": 755,
    "end_token": 787,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      9706,
      286,
      1388,
      1231,
      5128,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct execution of main without input validation"
  },
  {
    "line": 124,
    "text": "                        error_list.append(symbol)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of fire for command-line interface",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      4049,
      62,
      4868,
      13,
      33295,
      7,
      1837,
      23650,
      8
    ],
    "start_token": 787,
    "end_token": 819,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2046,
      329,
      3141,
      12,
      1370,
      7071
    ],
    "label": "ml_signal",
    "reason": "Usage of fire for command-line interface"
  }
]
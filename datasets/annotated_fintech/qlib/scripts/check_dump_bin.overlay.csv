annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"üß† ML Signal: Importing libraries, especially those related to data processing and logging, indicates potential usage patterns for ML workflows","[8582, 100, 254, 10373, 26484, 25, 17267, 278, 12782, 11, 2592, 883, 3519, 284, 1366, 7587, 290, 18931, 11, 9217, 2785, 8748, 7572, 329, 10373, 670, 44041]",1.0,2,ml_signal,10,"Importing libraries, especially those related to data processing and logging, indicates potential usage patterns for ML workflows",,0,import fire,"[11748, 2046]"
"‚úÖ Best Practice: Grouping imports into standard library, third-party, and local sections improves readability","[26486, 227, 6705, 19939, 25, 4912, 278, 17944, 656, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 9004, 19575, 1100, 1799]",0.5,7,best_practice,11,"Grouping imports into standard library, third-party, and local sections improves readability",,2,import datacompy,"[11748, 4818, 330, 3361, 88]"
‚úÖ Best Practice: Constants are defined in uppercase to indicate immutability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 287, 334, 39921, 589, 284, 7603, 2296, 315, 1799, 13]",1.0,12,best_practice,11,Constants are defined in uppercase to indicate immutability.,,7,import datacompy,"[11748, 4818, 330, 3361, 88]"
‚úÖ Best Practice: Constants are defined in uppercase to indicate immutability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 287, 334, 39921, 589, 284, 7603, 2296, 315, 1799, 13]",1.0,20,best_practice,13,Constants are defined in uppercase to indicate immutability.,,12,from tqdm import tqdm,"[6738, 256, 80, 36020, 1330, 256, 80, 36020]"
‚úÖ Best Practice: Constants are defined in uppercase to indicate immutability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 287, 334, 39921, 589, 284, 7603, 2296, 315, 1799, 13]",1.0,20,best_practice,15,Constants are defined in uppercase to indicate immutability.,,20,,[]
‚úÖ Best Practice: Constants are defined in uppercase to indicate immutability.,"[26486, 227, 6705, 19939, 25, 4757, 1187, 389, 5447, 287, 334, 39921, 589, 284, 7603, 2296, 315, 1799, 13]",1.0,20,best_practice,15,Constants are defined in uppercase to indicate immutability.,,20,,[]
‚úÖ Best Practice: Use of Path().expanduser() to handle user directories in a cross-platform way,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 22446, 11201, 392, 7220, 3419, 284, 5412, 2836, 29196, 287, 257, 3272, 12, 24254, 835]",1.0,36,best_practice,46,Use of Path().expanduser() to handle user directories in a cross-platform way,,20,"        symbol_field_name: str, optional","[220, 220, 220, 220, 220, 220, 220, 6194, 62, 3245, 62, 3672, 25, 965, 11, 11902]"
‚úÖ Best Practice: Use of Path.iterdir() to list directory contents,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 13, 2676, 15908, 3419, 284, 1351, 8619, 10154]",1.0,52,best_practice,48,Use of Path.iterdir() to list directory contents,,36,"        date_field_name: str, optional","[220, 220, 220, 220, 220, 220, 220, 3128, 62, 3245, 62, 3672, 25, 965, 11, 11902]"
üß† ML Signal: Use of sorted and map to process and sort directory names,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 23243, 290, 3975, 284, 1429, 290, 3297, 8619, 3891]",0.5,72,ml_signal,49,Use of sorted and map to process and sort directory names,,52,"            date field name, by default ""date""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3128, 2214, 1438, 11, 416, 4277, 366, 4475, 1]"
üß† ML Signal: Initialization of qlib with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 10662, 8019, 351, 2176, 10007]",0.5,92,ml_signal,49,Initialization of qlib with specific parameters,,72,"            date field name, by default ""date""","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3128, 2214, 1438, 11, 416, 4277, 366, 4475, 1]"
‚úÖ Best Practice: Use of Path().expanduser() to handle user directories in a cross-platform way,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 22446, 11201, 392, 7220, 3419, 284, 5412, 2836, 29196, 287, 257, 3272, 12, 24254, 835]",1.0,104,best_practice,58,Use of Path().expanduser() to handle user directories in a cross-platform way,,92,        qlib.init(,"[220, 220, 220, 220, 220, 220, 220, 10662, 8019, 13, 15003, 7]"
‚úÖ Best Practice: Use of Path.glob() to find files matching a pattern,"[26486, 227, 6705, 19939, 25, 5765, 286, 10644, 13, 4743, 672, 3419, 284, 1064, 3696, 12336, 257, 3912]",1.0,121,best_practice,61,Use of Path.glob() to find files matching a pattern,,104,"            auto_mount=False,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8295, 62, 14948, 28, 25101, 11]"
‚úÖ Best Practice: Use of map and lambda for concise transformations,"[26486, 227, 6705, 19939, 25, 5765, 286, 3975, 290, 37456, 329, 35327, 38226]",0.5,143,best_practice,64,Use of map and lambda for concise transformations,,121,        csv_path = Path(csv_path).expanduser(),"[220, 220, 220, 220, 220, 220, 220, 269, 21370, 62, 6978, 796, 10644, 7, 40664, 62, 6978, 737, 11201, 392, 7220, 3419]"
‚úÖ Best Practice: Use of split and map for string processing,"[26486, 227, 6705, 19939, 25, 5765, 286, 6626, 290, 3975, 329, 4731, 7587]",0.5,157,best_practice,67,Use of split and map for string processing,,143,        if check_fields is None:,"[220, 220, 220, 220, 220, 220, 220, 611, 2198, 62, 25747, 318, 6045, 25]"
‚úÖ Best Practice: Use of map and lambda for concise transformations,"[26486, 227, 6705, 19939, 25, 5765, 286, 3975, 290, 37456, 329, 35327, 38226]",0.5,166,best_practice,69,Use of map and lambda for concise transformations,,157,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of map and lambda for concise transformations,"[26486, 227, 6705, 19939, 25, 5765, 286, 3975, 290, 37456, 329, 35327, 38226]",0.5,194,best_practice,71,Use of map and lambda for concise transformations,,166,"        self.check_fields = list(map(lambda x: x.strip(), check_fields))","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9122, 62, 25747, 796, 1351, 7, 8899, 7, 50033, 2124, 25, 2124, 13, 36311, 22784, 2198, 62, 25747, 4008]"
üß† ML Signal: Storing configuration parameters as instance variables,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 8398, 10007, 355, 4554, 9633]",0.5,210,ml_signal,73,Storing configuration parameters as instance variables,,194,        self.max_workers = max_workers,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9806, 62, 22896, 796, 3509, 62, 22896]"
üß† ML Signal: Usage of file path and file suffix to derive a symbol,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2393, 3108, 290, 2393, 35488, 284, 27099, 257, 6194]",1.0,219,ml_signal,69,Usage of file path and file suffix to derive a symbol,,210,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Checking membership in a predefined list,"[8582, 100, 254, 10373, 26484, 25, 39432, 9931, 287, 257, 2747, 18156, 1351]",1.0,247,ml_signal,71,Checking membership in a predefined list,,219,"        self.check_fields = list(map(lambda x: x.strip(), check_fields))","[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9122, 62, 25747, 796, 1351, 7, 8899, 7, 50033, 2124, 25, 2124, 13, 36311, 22784, 2198, 62, 25747, 4008]"
üß† ML Signal: Fetching features using a library function,"[8582, 100, 254, 10373, 26484, 25, 376, 7569, 278, 3033, 1262, 257, 5888, 2163]",1.0,268,ml_signal,74,Fetching features using a library function,,247,        self.symbol_field_name = symbol_field_name,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1837, 23650, 62, 3245, 62, 3672, 796, 6194, 62, 3245, 62, 3672]"
‚úÖ Best Practice: Using rename with inplace=True for clarity and efficiency,"[26486, 227, 6705, 19939, 25, 8554, 36265, 351, 287, 5372, 28, 17821, 329, 16287, 290, 9332]",1.0,282,best_practice,76,Using rename with inplace=True for clarity and efficiency,,268,        self.freq = freq,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 19503, 80, 796, 2030, 80]"
‚ö†Ô∏è SAST Risk (Low): Reading CSV files can be risky if the file source is untrusted,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11725, 44189, 3696, 460, 307, 17564, 611, 262, 2393, 2723, 318, 1418, 81, 8459]",1.0,282,sast_risk,78,Reading CSV files can be risky if the file source is untrusted,Low,282,,[]
‚úÖ Best Practice: Converting date fields to datetime for consistency,"[26486, 227, 6705, 19939, 25, 35602, 889, 3128, 7032, 284, 4818, 8079, 329, 15794]",1.0,306,best_practice,80,Converting date fields to datetime for consistency,,282,        symbol = file_path.name.strip(self.file_suffix),"[220, 220, 220, 220, 220, 220, 220, 6194, 796, 2393, 62, 6978, 13, 3672, 13, 36311, 7, 944, 13, 7753, 62, 37333, 844, 8]"
üß† ML Signal: Adding a missing column with a default value,"[8582, 100, 254, 10373, 26484, 25, 18247, 257, 4814, 5721, 351, 257, 4277, 1988]",0.5,326,ml_signal,82,Adding a missing column with a default value,,306,            return self.NOT_IN_FEATURES,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 11929, 62, 1268, 62, 15112, 47471]"
‚úÖ Best Practice: Setting index for DataFrame for efficient operations,"[26486, 227, 6705, 19939, 25, 25700, 6376, 329, 6060, 19778, 329, 6942, 4560]",0.5,346,best_practice,82,Setting index for DataFrame for efficient operations,,326,            return self.NOT_IN_FEATURES,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 11929, 62, 1268, 62, 15112, 47471]"
‚úÖ Best Practice: Ensuring index names match for comparison,"[26486, 227, 6705, 19939, 25, 48221, 870, 6376, 3891, 2872, 329, 7208]",1.0,383,best_practice,91,Ensuring index names match for comparison,,346,"        origin_df.set_index([self.symbol_field_name, self.date_field_name], inplace=True)","[220, 220, 220, 220, 220, 220, 220, 8159, 62, 7568, 13, 2617, 62, 9630, 26933, 944, 13, 1837, 23650, 62, 3245, 62, 3672, 11, 2116, 13, 4475, 62, 3245, 62, 3672, 4357, 287, 5372, 28, 17821, 8]"
üß† ML Signal: Reindexing DataFrame to match another DataFrame's index,"[8582, 100, 254, 10373, 26484, 25, 797, 9630, 278, 6060, 19778, 284, 2872, 1194, 6060, 19778, 338, 6376]",0.5,420,ml_signal,91,Reindexing DataFrame to match another DataFrame's index,,383,"        origin_df.set_index([self.symbol_field_name, self.date_field_name], inplace=True)","[220, 220, 220, 220, 220, 220, 220, 8159, 62, 7568, 13, 2617, 62, 9630, 26933, 944, 13, 1837, 23650, 62, 3245, 62, 3672, 11, 2116, 13, 4475, 62, 3245, 62, 3672, 4357, 287, 5372, 28, 17821, 8]"
üß† ML Signal: Using a comparison library to compare DataFrames,"[8582, 100, 254, 10373, 26484, 25, 8554, 257, 7208, 5888, 284, 8996, 6060, 35439]",1.0,443,ml_signal,92,Using a comparison library to compare DataFrames,,420,        origin_df.index.names = qlib_df.index.names,"[220, 220, 220, 220, 220, 220, 220, 8159, 62, 7568, 13, 9630, 13, 14933, 796, 10662, 8019, 62, 7568, 13, 9630, 13, 14933]"
üß† ML Signal: Checking if DataFrames match with specific tolerances,"[8582, 100, 254, 10373, 26484, 25, 39432, 611, 6060, 35439, 2872, 351, 2176, 8214, 1817]",0.5,475,ml_signal,102,Checking if DataFrames match with specific tolerances,,443,"                df2_name=""New"",  # Optional, defaults to 'df2'","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 17, 62, 3672, 2625, 3791, 1600, 220, 1303, 32233, 11, 26235, 284, 705, 7568, 17, 6]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2428]",1.0,487,sast_risk,106,Catching broad exceptions can hide issues,Low,475,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
üß† ML Signal: Logging usage pattern for tracking execution flow,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9646, 9706, 5202]",0.5,508,ml_signal,98,Logging usage pattern for tracking execution flow,,487,"                on_index=True,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 319, 62, 9630, 28, 17821, 11]"
üß† ML Signal: Usage of tqdm for progress tracking,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 256, 80, 36020, 329, 4371, 9646]",0.5,520,ml_signal,103,Usage of tqdm for progress tracking,,508,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
üß† ML Signal: Usage of ProcessPoolExecutor for parallel processing,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10854, 27201, 23002, 38409, 329, 10730, 7587]",0.5,552,ml_signal,105,Usage of ProcessPoolExecutor for parallel processing,,520,            return self.COMPARE_TRUE if _r else self.COMPARE_FALSE,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 2116, 13, 9858, 47, 12203, 62, 5446, 8924, 611, 4808, 81, 2073, 2116, 13, 9858, 47, 12203, 62, 37, 23719]"
üß† ML Signal: Iterating over files and processing results,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 3696, 290, 7587, 2482]",1.0,580,ml_signal,107,Iterating over files and processing results,,552,"            logger.warning(f""{symbol} compare error: {e}"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 49706, 13, 43917, 7, 69, 1, 90, 1837, 23650, 92, 8996, 4049, 25, 1391, 68, 92, 4943]"
üß† ML Signal: Updating progress bar,"[8582, 100, 254, 10373, 26484, 25, 3205, 38734, 4371, 2318]",0.5,592,ml_signal,116,Updating progress bar,,580,        compare_false = [],"[220, 220, 220, 220, 220, 220, 220, 8996, 62, 9562, 796, 17635]"
üß† ML Signal: Logging usage pattern for tracking execution flow,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 8748, 3912, 329, 9646, 9706, 5202]",0.5,623,ml_signal,118,Logging usage pattern for tracking execution flow,,592,            with ProcessPoolExecutor(max_workers=self.max_workers) as executor:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 351, 10854, 27201, 23002, 38409, 7, 9806, 62, 22896, 28, 944, 13, 9806, 62, 22896, 8, 355, 3121, 273, 25]"
üß† ML Signal: Logging warnings for error conditions,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 14601, 329, 4049, 3403]",0.5,659,ml_signal,120,Logging warnings for error conditions,,623,                    symbol = file_path.name.strip(self.file_suffix),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 796, 2393, 62, 6978, 13, 3672, 13, 36311, 7, 944, 13, 7753, 62, 37333, 844, 8]"
üß† ML Signal: Logging warnings for specific conditions,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 14601, 329, 2176, 3403]",0.5,691,ml_signal,124,Logging warnings for specific conditions,,659,                        error_list.append(symbol),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4049, 62, 4868, 13, 33295, 7, 1837, 23650, 8]"
üß† ML Signal: Logging warnings for specific conditions,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 14601, 329, 2176, 3403]",0.5,723,ml_signal,124,Logging warnings for specific conditions,,691,                        error_list.append(symbol),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4049, 62, 4868, 13, 33295, 7, 1837, 23650, 8]"
üß† ML Signal: Logging summary of results,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 10638, 286, 2482]",0.5,755,ml_signal,124,Logging summary of results,,723,                        error_list.append(symbol),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4049, 62, 4868, 13, 33295, 7, 1837, 23650, 8]"
‚ö†Ô∏è SAST Risk (Low): Direct execution of main without input validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 9706, 286, 1388, 1231, 5128, 21201]",0.5,787,sast_risk,124,Direct execution of main without input validation,Low,755,                        error_list.append(symbol),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4049, 62, 4868, 13, 33295, 7, 1837, 23650, 8]"
üß† ML Signal: Usage of fire for command-line interface,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2046, 329, 3141, 12, 1370, 7071]",0.5,819,ml_signal,124,Usage of fire for command-line interface,,787,                        error_list.append(symbol),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4049, 62, 4868, 13, 33295, 7, 1837, 23650, 8]"

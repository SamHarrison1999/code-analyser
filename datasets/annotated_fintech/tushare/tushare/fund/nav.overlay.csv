annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Ensures division operator behaves consistently between Python 2 and 3,"[26486, 227, 6705, 19939, 25, 48221, 942, 7297, 10088, 39341, 9835, 1022, 11361, 362, 290, 513]",1.0,1,best_practice,9,Ensures division operator behaves consistently between Python 2 and 3,,0,"""""""",[37811]
‚úÖ Best Practice: Handles compatibility between Python 2 and 3 for importing modules,"[26486, 227, 6705, 19939, 25, 7157, 829, 17764, 1022, 11361, 362, 290, 513, 329, 33332, 13103]",1.0,5,best_practice,21,Handles compatibility between Python 2 and 3 for importing modules,,1,except ImportError:,"[16341, 17267, 12331, 25]"
‚úÖ Best Practice: Use of a default parameter value for `fund_type` improves function usability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 4277, 11507, 1988, 329, 4600, 10990, 62, 4906, 63, 19575, 2163, 42863, 13]",0.5,36,best_practice,49,Use of a default parameter value for `fund_type` improves function usability.,,5,                nav_date    ÂáÄÂÄºÊó•Êúü,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6812, 62, 4475, 220, 220, 220, 10263, 229, 222, 161, 222, 120, 33768, 98, 17312, 253]"
‚úÖ Best Practice: Writing a header or log can help in debugging and tracking execution.,"[26486, 227, 6705, 19939, 25, 22183, 257, 13639, 393, 2604, 460, 1037, 287, 28769, 290, 9646, 9706, 13]",0.5,72,best_practice,51,Writing a header or log can help in debugging and tracking execution.,,36,                jjlx        Âü∫ÈáëÁ±ªÂûã,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 474, 20362, 87, 220, 220, 220, 220, 220, 220, 220, 10263, 253, 118, 34932, 239, 163, 109, 119, 161, 252, 233]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of URL manipulation if `ct` values are not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 10289, 17512, 611, 4600, 310, 63, 3815, 389, 407, 6105, 5336, 36951, 13]",0.5,108,sast_risk,51,Potential risk of URL manipulation if `ct` values are not properly sanitized.,Medium,72,                jjlx        Âü∫ÈáëÁ±ªÂûã,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 474, 20362, 87, 220, 220, 220, 220, 220, 220, 220, 10263, 253, 118, 34932, 239, 163, 109, 119, 161, 252, 233]"
‚úÖ Best Practice: Calculating limit count dynamically based on `nums` and `pages`.,"[26486, 227, 6705, 19939, 25, 27131, 803, 4179, 954, 32366, 1912, 319, 4600, 77, 5700, 63, 290, 4600, 31126, 44646]",0.5,149,best_practice,61,Calculating limit count dynamically based on `nums` and `pages`.,,108,                              ct.NAV_OPEN_T3)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4535, 53, 62, 3185, 1677, 62, 51, 18, 4008]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of URL manipulation if `ct` values are not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 10289, 17512, 611, 4600, 310, 63, 3815, 389, 407, 6105, 5336, 36951, 13]",0.5,190,sast_risk,61,Potential risk of URL manipulation if `ct` values are not properly sanitized.,Medium,149,                              ct.NAV_OPEN_T3)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4535, 53, 62, 3185, 1677, 62, 51, 18, 4008]"
"üß† ML Signal: Use of `pd.concat` indicates data aggregation, which is a common pattern in data processing.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4600, 30094, 13, 1102, 9246, 63, 9217, 1366, 46500, 11, 543, 318, 257, 2219, 3912, 287, 1366, 7587, 13]",0.5,231,ml_signal,71,"Use of `pd.concat` indicates data aggregation, which is a common pattern in data processing.",,190,"                                        page,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2443, 11]"
‚úÖ Best Practice: Consider adding input validation for fund_type and sub_type to ensure they are valid options.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 5128, 21201, 329, 1814, 62, 4906, 290, 850, 62, 4906, 284, 4155, 484, 389, 4938, 3689, 13]",1.0,264,best_practice,109,Consider adding input validation for fund_type and sub_type to ensure they are valid options.,,231,                sname       Âü∫ÈáëÂêçÁß∞,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3013, 480, 220, 220, 220, 220, 220, 220, 10263, 253, 118, 34932, 239, 28938, 235, 163, 100, 108]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of format string injection if ct.SINA_NAV_COUNT_URL or its parameters are user-controlled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 5794, 4731, 16954, 611, 269, 83, 13, 50, 28893, 62, 4535, 53, 62, 34, 28270, 62, 21886, 393, 663, 10007, 389, 2836, 12, 14401, 13]",1.0,296,sast_risk,110,Potential risk of format string injection if ct.SINA_NAV_COUNT_URL or its parameters are user-controlled.,Medium,264,                per_nav     Âçï‰ΩçÂáÄÂÄº,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 583, 62, 28341, 220, 220, 220, 220, 10263, 235, 243, 19526, 235, 49035, 222, 161, 222, 120]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of format string injection if ct.SINA_NAV_DATA_URL or its parameters are user-controlled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 5794, 4731, 16954, 611, 269, 83, 13, 50, 28893, 62, 4535, 53, 62, 26947, 62, 21886, 393, 663, 10007, 389, 2836, 12, 14401, 13]",1.0,324,sast_risk,115,Potential risk of format string injection if ct.SINA_NAV_DATA_URL or its parameters are user-controlled.,Medium,296,                start_date  ÊàêÁ´ãÊó•Êúü,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 62, 4475, 220, 10545, 230, 238, 44165, 233, 33768, 98, 17312, 253]"
üß† ML Signal: The return of a DataFrame object can be used to train models that predict data structure or content.,"[8582, 100, 254, 10373, 26484, 25, 383, 1441, 286, 257, 6060, 19778, 2134, 460, 307, 973, 284, 4512, 4981, 326, 4331, 1366, 4645, 393, 2695, 13]",0.5,364,ml_signal,125,The return of a DataFrame object can be used to train models that predict data structure or content.,,324,"                          ct.NAV_CLOSE_T2[fund_type],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4535, 53, 62, 32737, 62, 51, 17, 58, 10990, 62, 4906, 4357]"
‚úÖ Best Practice: Consider adding input validation for fund_type and sub_type to ensure they are valid options.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 5128, 21201, 329, 1814, 62, 4906, 290, 850, 62, 4906, 284, 4155, 484, 389, 4938, 3689, 13]",0.5,369,best_practice,159,Consider adding input validation for fund_type and sub_type to ensure they are valid options.,,364,     -------,"[220, 220, 220, 220, 35656]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of format string injection if ct.NAV_GRADING_T2 or ct.NAV_GRADING_T3 are user-controlled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 5794, 4731, 16954, 611, 269, 83, 13, 4535, 53, 62, 10761, 2885, 2751, 62, 51, 17, 393, 269, 83, 13, 4535, 53, 62, 10761, 2885, 2751, 62, 51, 18, 389, 2836, 12, 14401, 13]",1.0,378,sast_risk,160,Potential risk of format string injection if ct.NAV_GRADING_T2 or ct.NAV_GRADING_T3 are user-controlled.,Medium,369,        DataFrame,"[220, 220, 220, 220, 220, 220, 220, 6060, 19778]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of format string injection if ct.NAV_GRADING_T2 or ct.NAV_GRADING_T3 are user-controlled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 5794, 4731, 16954, 611, 269, 83, 13, 4535, 53, 62, 10761, 2885, 2751, 62, 51, 17, 393, 269, 83, 13, 4535, 53, 62, 10761, 2885, 2751, 62, 51, 18, 389, 2836, 12, 14401, 13]",1.0,409,sast_risk,165,Potential risk of format string injection if ct.NAV_GRADING_T2 or ct.NAV_GRADING_T3 are user-controlled.,Medium,378,                total_nav   Á¥ØËÆ°ÂáÄÂÄº,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2472, 62, 28341, 220, 220, 13328, 112, 107, 164, 106, 94, 49035, 222, 161, 222, 120]"
"üß† ML Signal: The function returns a DataFrame, which is a common pattern in data processing tasks.","[8582, 100, 254, 10373, 26484, 25, 383, 2163, 5860, 257, 6060, 19778, 11, 543, 318, 257, 2219, 3912, 287, 1366, 7587, 8861, 13]",1.0,419,ml_signal,175,"The function returns a DataFrame, which is a common pattern in data processing tasks.",,409,    ct._write_head(),"[220, 220, 220, 269, 83, 13557, 13564, 62, 2256, 3419]"
‚úÖ Best Practice: Use a default value for start if None is provided,"[26486, 227, 6705, 19939, 25, 5765, 257, 4277, 1988, 329, 923, 611, 6045, 318, 2810]",0.5,451,best_practice,199,Use a default value for start if None is provided,,419,                  Âü∫Èáë‰ª£Á†Å e.g. 000001,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10263, 253, 118, 34932, 239, 47987, 163, 254, 223, 304, 13, 70, 13, 17643, 486]"
‚úÖ Best Practice: Use a default value for end if None is provided,"[26486, 227, 6705, 19939, 25, 5765, 257, 4277, 1988, 329, 886, 611, 6045, 318, 2810]",0.5,505,best_practice,201,Use a default value for end if None is provided,,451,                  ÂºÄÂßãÊó•Êúü formatÔºöYYYY-MM-DD ‰∏∫Á©∫Êó∂ÂèñÂΩìÂâçÊó•Êúü,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10263, 120, 222, 34650, 233, 33768, 98, 17312, 253, 5794, 171, 120, 248, 26314, 26314, 12, 12038, 12, 16458, 220, 10310, 118, 163, 102, 118, 33768, 114, 20998, 244, 37605, 241, 30298, 235, 33768, 98, 17312, 253]"
üß† ML Signal: Accessing fund information based on a code,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 1814, 1321, 1912, 319, 257, 2438]",0.5,524,ml_signal,204,Accessing fund information based on a code,,505,"      retry_count : int, ÈªòËÆ§ 3","[220, 220, 220, 220, 220, 1005, 563, 62, 9127, 1058, 493, 11, 16268, 119, 246, 164, 106, 97, 513]"
‚ö†Ô∏è SAST Risk (Low): Use of deprecated method 'ix' in pandas,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 39224, 2446, 705, 844, 6, 287, 19798, 292]",1.0,540,sast_risk,206,Use of deprecated method 'ix' in pandas,Low,524,"      pause : int, ÈªòËÆ§ 0","[220, 220, 220, 220, 220, 14985, 1058, 493, 11, 16268, 119, 246, 164, 106, 97, 657]"
üß† ML Signal: Checking fund type to determine if it is monetary,"[8582, 100, 254, 10373, 26484, 25, 39432, 1814, 2099, 284, 5004, 611, 340, 318, 15331]",0.5,556,ml_signal,208,Checking fund type to determine if it is monetary,,540,      timeout: int ÈªòËÆ§ 10s,"[220, 220, 220, 220, 220, 26827, 25, 493, 16268, 119, 246, 164, 106, 97, 838, 82]"
"üß† ML Signal: Writing header information, possibly for logging or output","[8582, 100, 254, 10373, 26484, 25, 22183, 13639, 1321, 11, 5457, 329, 18931, 393, 5072]",0.5,560,ml_signal,211,"Writing header information, possibly for logging or output",,556,    -------,"[220, 220, 220, 35656]"
üß† ML Signal: Calculating the number of historical records to fetch,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 262, 1271, 286, 6754, 4406, 284, 21207]",0.5,567,ml_signal,212,Calculating the number of historical records to fetch,,560,      DataFrame,"[220, 220, 220, 220, 220, 6060, 19778]"
üß† ML Signal: Parsing historical data with retry and timeout parameters,"[8582, 100, 254, 10373, 26484, 25, 23042, 278, 6754, 1366, 351, 1005, 563, 290, 26827, 10007]",0.5,574,ml_signal,212,Parsing historical data with retry and timeout parameters,,567,      DataFrame,"[220, 220, 220, 220, 220, 6060, 19778]"
üß† ML Signal: Usage of external URL for data fetching,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 10289, 329, 1366, 21207, 278]",1.0,578,ml_signal,239,Usage of external URL for data fetching,,574,    Parameters,"[220, 220, 220, 40117]"
‚ö†Ô∏è SAST Risk (Medium): Potential for URL manipulation or injection,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 10289, 17512, 393, 16954]",1.0,582,sast_risk,239,Potential for URL manipulation or injection,Medium,578,    Parameters,"[220, 220, 220, 40117]"
‚ö†Ô∏è SAST Risk (Medium): Network operation with potential for timeout or connection issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4905, 351, 2785, 329, 26827, 393, 4637, 2428]",0.5,586,sast_risk,243,Network operation with potential for timeout or connection issues,Medium,582,    return,"[220, 220, 220, 1441]"
"‚ö†Ô∏è SAST Risk (Low): Assumes 'gbk' encoding, which may not always be correct","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 22296, 74, 6, 21004, 11, 543, 743, 407, 1464, 307, 3376]",0.5,593,sast_risk,245,"Assumes 'gbk' encoding, which may not always be correct",Low,586,      DataFrame,"[220, 220, 220, 220, 220, 6060, 19778]"
‚ö†Ô∏è SAST Risk (Medium): json.loads can raise exceptions if text is not valid JSON,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 33918, 13, 46030, 460, 5298, 13269, 611, 2420, 318, 407, 4938, 19449]",0.5,621,sast_risk,247,json.loads can raise exceptions if text is not valid JSON,Medium,593,          jjjc      Âü∫ÈáëÁÆÄÁß∞,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 474, 41098, 66, 220, 220, 220, 220, 220, 10263, 253, 118, 34932, 239, 163, 106, 222, 163, 100, 108]"
‚úÖ Best Practice: Explicit conversion to int for clarity,"[26486, 227, 6705, 19939, 25, 11884, 11315, 284, 493, 329, 16287]",0.5,647,best_practice,249,Explicit conversion to int for clarity,,621,          clrq      ÊàêÁ´ãÊó•Êúü,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 537, 81, 80, 220, 220, 220, 220, 220, 10545, 230, 238, 44165, 233, 33768, 98, 17312, 253]"
‚úÖ Best Practice: Use of specific exception type for error handling,"[26486, 227, 6705, 19939, 25, 5765, 286, 2176, 6631, 2099, 329, 4049, 9041]",0.5,672,best_practice,252,Use of specific exception type for error handling,,647,          ssdd      ‰∏äÂ∏ÇÂú∞ÁÇπ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 37786, 1860, 220, 220, 220, 220, 220, 220, 41468, 30585, 224, 28839, 108, 163, 224, 117]"
‚úÖ Best Practice: Use of pandas DataFrame for structured data handling,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 6060, 19778, 329, 20793, 1366, 9041]",0.5,706,best_practice,256,Use of pandas DataFrame for structured data handling,,672,          jjgm      Âü∫ÈáëËßÑÊ®°(‰∫øÂÖÉ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 474, 73, 39870, 220, 220, 220, 220, 220, 10263, 253, 118, 34932, 239, 164, 100, 226, 162, 101, 94, 7, 12859, 123, 17739, 225, 8]"
‚úÖ Best Practice: Setting index for DataFrame for better data manipulation,"[26486, 227, 6705, 19939, 25, 25700, 6376, 329, 6060, 19778, 329, 1365, 1366, 17512]",0.5,741,best_practice,258,Setting index for DataFrame for better data manipulation,,706,          jjltfe    ‰∏äÂ∏ÇÊµÅÈÄö‰ªΩÈ¢ù(‰∫ø‰ªΩ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 474, 73, 2528, 5036, 220, 220, 220, 220, 41468, 30585, 224, 38184, 223, 34460, 248, 20015, 121, 165, 95, 251, 7, 12859, 123, 20015, 121, 8]"
"‚úÖ Best Practice: Function name suggests it's a private function, which is a good practice for internal utility functions.","[26486, 227, 6705, 19939, 25, 15553, 1438, 5644, 340, 338, 257, 2839, 2163, 11, 543, 318, 257, 922, 3357, 329, 5387, 10361, 5499, 13]",0.5,766,best_practice,252,"Function name suggests it's a private function, which is a good practice for internal utility functions.",,741,          ssdd      ‰∏äÂ∏ÇÂú∞ÁÇπ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 37786, 1860, 220, 220, 220, 220, 220, 220, 41468, 30585, 224, 28839, 108, 163, 224, 117]"
üß† ML Signal: Logging or console writing can be a signal for error handling or debugging patterns.,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 393, 8624, 3597, 460, 307, 257, 6737, 329, 4049, 9041, 393, 28769, 7572, 13]",0.5,789,ml_signal,254,Logging or console writing can be a signal for error handling or debugging patterns.,,766,          Type2Name Âü∫ÈáëÁ±ªÂûã,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 5994, 17, 5376, 10263, 253, 118, 34932, 239, 163, 109, 119, 161, 252, 233]"
"‚ö†Ô∏è SAST Risk (Medium): URL input is not validated or sanitized, which can lead to SSRF or other injection attacks.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5128, 318, 407, 31031, 393, 5336, 36951, 11, 543, 460, 1085, 284, 6723, 32754, 393, 584, 16954, 3434, 13]",0.5,824,sast_risk,257,"URL input is not validated or sanitized, which can lead to SSRF or other injection attacks.",Medium,789,          jjfe      Âü∫ÈáëÊÄª‰ªΩÈ¢ù(‰∫ø‰ªΩ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 474, 73, 5036, 220, 220, 220, 220, 220, 10263, 253, 118, 34932, 239, 45250, 119, 20015, 121, 165, 95, 251, 7, 12859, 123, 20015, 121, 8]"
"‚ö†Ô∏è SAST Risk (Medium): No validation on the response content, which could lead to processing unexpected data.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 319, 262, 2882, 2695, 11, 543, 714, 1085, 284, 7587, 10059, 1366, 13]",0.5,854,sast_risk,259,"No validation on the response content, which could lead to processing unexpected data.",Medium,824,          jjferq    Âü∫Èáë‰ªΩÈ¢ùÊó•Êúü,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 474, 73, 2232, 80, 220, 220, 220, 10263, 253, 118, 34932, 239, 20015, 121, 165, 95, 251, 33768, 98, 17312, 253]"
‚úÖ Best Practice: Conditional check for Python version compatibility.,"[26486, 227, 6705, 19939, 25, 9724, 1859, 2198, 329, 11361, 2196, 17764, 13]",0.5,859,best_practice,263,Conditional check for Python version compatibility.,,854,    ''',"[220, 220, 220, 705, 7061]"
‚ö†Ô∏è SAST Risk (Low): Splitting strings without validation can lead to unexpected errors if the format changes.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13341, 2535, 13042, 1231, 21201, 460, 1085, 284, 10059, 8563, 611, 262, 5794, 2458, 13]",1.0,889,sast_risk,265,Splitting strings without validation can lead to unexpected errors if the format changes.,Low,859,"        ct.P_TYPE['http'], ct.DOMAINS['ssf'], code)","[220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 824, 69, 6, 4357, 2438, 8]"
‚ö†Ô∏è SAST Risk (Low): Regular expressions can be computationally expensive and should be used judiciously.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 23603, 14700, 460, 307, 2653, 15208, 5789, 290, 815, 307, 973, 2553, 6243, 306, 13]",0.5,905,sast_risk,266,Regular expressions can be computationally expensive and should be used judiciously.,Low,889,"    text = urlopen(request, timeout=10).read()","[220, 220, 220, 2420, 796, 19016, 9654, 7, 25927, 11, 26827, 28, 940, 737, 961, 3419]"
‚úÖ Best Practice: Conditional check for Python version compatibility.,"[26486, 227, 6705, 19939, 25, 9724, 1859, 2198, 329, 11361, 2196, 17764, 13]",0.5,931,best_practice,272,Conditional check for Python version compatibility.,,905,        status = str(org_js['result']['status']['msg']),"[220, 220, 220, 220, 220, 220, 220, 3722, 796, 965, 7, 2398, 62, 8457, 17816, 20274, 6, 7131, 6, 13376, 6, 7131, 6, 19662, 6, 12962]"
‚ö†Ô∏è SAST Risk (Medium): Loading JSON without validation can lead to processing malicious data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 12320, 19449, 1231, 21201, 460, 1085, 284, 7587, 17412, 1366, 13]",0.5,931,sast_risk,277,Loading JSON without validation can lead to processing malicious data.,Medium,931,,[]
üß† ML Signal: Use of pandas DataFrame indicates data processing or analysis tasks.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 6060, 19778, 9217, 1366, 7587, 393, 3781, 8861, 13]",1.0,931,ml_signal,280,Use of pandas DataFrame indicates data processing or analysis tasks.,,931,,[]
‚úÖ Best Practice: Filling NaN values to ensure data consistency.,"[26486, 227, 6705, 19939, 25, 376, 4509, 11013, 45, 3815, 284, 4155, 1366, 15794, 13]",0.5,931,best_practice,282,Filling NaN values to ensure data consistency.,,931,,[]
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors and make debugging difficult.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563, 290, 787, 28769, 2408, 13]",1.0,944,sast_risk,286,Catching broad exceptions can hide specific errors and make debugging difficult.,Low,931,        request = Request(url),"[220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 6371, 8]"
‚úÖ Best Practice: Function name should be descriptive and follow snake_case convention,"[26486, 227, 6705, 19939, 25, 15553, 1438, 815, 307, 35644, 290, 1061, 17522, 62, 7442, 9831]",1.0,962,best_practice,276,Function name should be descriptive and follow snake_case convention,,944,    fund_df = fund_df.set_index('symbol'),"[220, 220, 220, 1814, 62, 7568, 796, 1814, 62, 7568, 13, 2617, 62, 9630, 10786, 1837, 23650, 11537]"
üß† ML Signal: Logging or console output can be used to track function usage,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 393, 8624, 5072, 460, 307, 973, 284, 2610, 2163, 8748]",1.0,979,ml_signal,281,Logging or console output can be used to track function usage,,962,"def _parse_fund_data(url, fund_type='open'):","[4299, 4808, 29572, 62, 10990, 62, 7890, 7, 6371, 11, 1814, 62, 4906, 11639, 9654, 6, 2599]"
‚ö†Ô∏è SAST Risk (Medium): No validation or sanitization of the URL input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 393, 5336, 270, 1634, 286, 262, 10289, 5128]",0.5,979,sast_risk,284,No validation or sanitization of the URL input,Medium,979,,[]
‚ö†Ô∏è SAST Risk (Medium): No exception handling for network-related errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 3127, 12, 5363, 8563]",1.0,992,sast_risk,286,No exception handling for network-related errors,Medium,979,        request = Request(url),"[220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 6371, 8]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded character encoding may lead to issues with different encodings,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 2095, 21004, 743, 1085, 284, 2428, 351, 1180, 2207, 375, 654]",1.0,1012,sast_risk,288,Hardcoded character encoding may lead to issues with different encodings,Low,992,"        text = urlopen(request, timeout=10).read()","[220, 220, 220, 220, 220, 220, 220, 2420, 796, 19016, 9654, 7, 25927, 11, 26827, 28, 940, 737, 961, 3419]"
‚úÖ Best Practice: Raising specific exceptions for error conditions,"[26486, 227, 6705, 19939, 25, 7567, 1710, 2176, 13269, 329, 4049, 3403]",0.5,1038,best_practice,291,Raising specific exceptions for error conditions,,1012,        text = text.decode('gbk') if ct.PY3 else text,"[220, 220, 220, 220, 220, 220, 220, 2420, 796, 2420, 13, 12501, 1098, 10786, 22296, 74, 11537, 611, 269, 83, 13, 47, 56, 18, 2073, 2420]"
"‚ö†Ô∏è SAST Risk (Low): Assumes specific format of the text, which may lead to IndexError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 2176, 5794, 286, 262, 2420, 11, 543, 743, 1085, 284, 12901, 12331]",0.5,1062,sast_risk,293,"Assumes specific format of the text, which may lead to IndexError",Low,1038,"        reg = re.compile(r'\,(.*?)\:')","[220, 220, 220, 220, 220, 220, 220, 842, 796, 302, 13, 5589, 576, 7, 81, 6, 59, 11, 7, 15885, 10091, 59, 25, 11537]"
‚úÖ Best Practice: Use of regular expressions for string manipulation,"[26486, 227, 6705, 19939, 25, 5765, 286, 3218, 14700, 329, 4731, 17512]",0.5,1083,best_practice,294,Use of regular expressions for string manipulation,,1062,"        text = reg.sub(r',""\1"":', text)","[220, 220, 220, 220, 220, 220, 220, 2420, 796, 842, 13, 7266, 7, 81, 40264, 59, 16, 1298, 3256, 2420, 8]"
‚úÖ Best Practice: Consistent use of string replacement for JSON formatting,"[26486, 227, 6705, 19939, 25, 3515, 7609, 779, 286, 4731, 9014, 329, 19449, 33313]",0.5,1104,best_practice,298,Consistent use of string replacement for JSON formatting,,1083,            jstr = json.dumps(text),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 474, 2536, 796, 33918, 13, 67, 8142, 7, 5239, 8]"
‚ö†Ô∏è SAST Risk (Low): No error handling for JSON decoding errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 19449, 39938, 8563]",1.0,1149,sast_risk,303,No error handling for JSON decoding errors,Low,1104,                               columns=ct.NAV_COLUMNS[fund_type]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 28, 310, 13, 4535, 53, 62, 25154, 5883, 8035, 58, 10990, 62, 4906, 12962]"
"‚ö†Ô∏è SAST Risk (Low): Assumes ""total_num"" key is always present in the JSON","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 366, 23350, 62, 22510, 1, 1994, 318, 1464, 1944, 287, 262, 19449]",0.5,1194,sast_risk,303,"Assumes ""total_num"" key is always present in the JSON",Low,1149,                               columns=ct.NAV_COLUMNS[fund_type]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 28, 310, 13, 4535, 53, 62, 25154, 5883, 8035, 58, 10990, 62, 4906, 12962]"
‚úÖ Best Practice: Explicit conversion to integer,"[26486, 227, 6705, 19939, 25, 11884, 11315, 284, 18253]",0.5,1205,best_practice,305,Explicit conversion to integer,,1194,        return fund_df,"[220, 220, 220, 220, 220, 220, 220, 1441, 1814, 62, 7568]"
‚ö†Ô∏è SAST Risk (Low): Generic exception handling; specific exceptions should be caught,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041, 26, 2176, 13269, 815, 307, 4978]",1.0,1205,sast_risk,309,Generic exception handling; specific exceptions should be caught,Low,1205,,[]
üß† ML Signal: Error logging can be used to identify common failure points,"[8582, 100, 254, 10373, 26484, 25, 13047, 18931, 460, 307, 973, 284, 5911, 2219, 5287, 2173]",0.5,1205,ml_signal,309,Error logging can be used to identify common failure points,,1205,,[]
üß† ML Signal: Logging or console output can be used to track function usage patterns,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 393, 8624, 5072, 460, 307, 973, 284, 2610, 2163, 8748, 7572]",0.5,1250,ml_signal,303,Logging or console output can be used to track function usage patterns,,1205,                               columns=ct.NAV_COLUMNS[fund_type]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 28, 310, 13, 4535, 53, 62, 25154, 5883, 8035, 58, 10990, 62, 4906, 12962]"
üß† ML Signal: Conditional URL construction based on input parameters,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 10289, 5103, 1912, 319, 5128, 10007]",0.5,1261,ml_signal,305,Conditional URL construction based on input parameters,,1250,        return fund_df,"[220, 220, 220, 220, 220, 220, 220, 1441, 1814, 62, 7568]"
üß† ML Signal: Conditional URL construction based on input parameters,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 10289, 5103, 1912, 319, 5128, 10007]",0.5,1282,ml_signal,312,Conditional URL construction based on input parameters,,1261,        Ëé∑ÂèñÂü∫ÈáëÊï∞Èáè,"[220, 220, 220, 220, 220, 220, 220, 5525, 236, 115, 20998, 244, 161, 253, 118, 34932, 239, 46763, 108, 34932, 237]"
‚ö†Ô∏è SAST Risk (Medium): Network operation without exception handling can lead to unhandled exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4905, 1231, 6631, 9041, 460, 1085, 284, 555, 38788, 13269]",0.5,1292,sast_risk,315,Network operation without exception handling can lead to unhandled exceptions,Medium,1282,    ct._write_console(),"[220, 220, 220, 269, 83, 13557, 13564, 62, 41947, 3419]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded character encoding may lead to issues with different encodings,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 2095, 21004, 743, 1085, 284, 2428, 351, 1180, 2207, 375, 654]",0.5,1305,sast_risk,317,Hardcoded character encoding may lead to issues with different encodings,Low,1292,        request = Request(url),"[220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 6371, 8]"
‚ö†Ô∏è SAST Risk (Low): json.loads can raise exceptions if the input is not valid JSON,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33918, 13, 46030, 460, 5298, 13269, 611, 262, 5128, 318, 407, 4938, 19449]",1.0,1322,sast_risk,319,json.loads can raise exceptions if the input is not valid JSON,Low,1305,        text = text.decode('gbk'),"[220, 220, 220, 220, 220, 220, 220, 2420, 796, 2420, 13, 12501, 1098, 10786, 22296, 74, 11537]"
‚úÖ Best Practice: Use constants or enums for status codes to improve readability,"[26486, 227, 6705, 19939, 25, 5765, 38491, 393, 551, 5700, 329, 3722, 12416, 284, 2987, 1100, 1799]",0.5,1342,best_practice,321,Use constants or enums for status codes to improve readability,,1322,            raise ValueError('get fund num error'),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5298, 11052, 12331, 10786, 1136, 1814, 997, 4049, 11537]"
‚úÖ Best Practice: Use constants or enums for status messages to improve readability,"[26486, 227, 6705, 19939, 25, 5765, 38491, 393, 551, 5700, 329, 3722, 6218, 284, 2987, 1100, 1799]",0.5,1366,best_practice,324,Use constants or enums for status messages to improve readability,,1342,"        reg = re.compile(r'\,(.*?)\:')","[220, 220, 220, 220, 220, 220, 220, 842, 796, 302, 13, 5589, 576, 7, 81, 6, 59, 11, 7, 15885, 10091, 59, 25, 11537]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic exception without context can make debugging difficult,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 6631, 1231, 4732, 460, 787, 28769, 2408]",0.5,1391,sast_risk,326,Raising a generic exception without context can make debugging difficult,Low,1366,"        text = text.replace('{total_num', '{""total_num""')","[220, 220, 220, 220, 220, 220, 220, 2420, 796, 2420, 13, 33491, 10786, 90, 23350, 62, 22510, 3256, 705, 4895, 23350, 62, 22510, 1, 11537]"
üß† ML Signal: Usage of time.sleep indicates a retry mechanism with pauses,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 640, 13, 42832, 9217, 257, 1005, 563, 9030, 351, 37622]",0.5,1412,ml_signal,325,Usage of time.sleep indicates a retry mechanism with pauses,,1391,"        text = reg.sub(r',""\1"":', text)","[220, 220, 220, 220, 220, 220, 220, 2420, 796, 842, 13, 7266, 7, 81, 40264, 59, 16, 1298, 3256, 2420, 8]"
üß† ML Signal: Custom console writing function usage,"[8582, 100, 254, 10373, 26484, 25, 8562, 8624, 3597, 2163, 8748]",0.5,1430,ml_signal,327,Custom console writing function usage,,1412,"        text = text.replace('null', '0')","[220, 220, 220, 220, 220, 220, 220, 2420, 796, 2420, 13, 33491, 10786, 8423, 3256, 705, 15, 11537]"
üß† ML Signal: Conditional URL formatting based on monetary flag,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 10289, 33313, 1912, 319, 15331, 6056]",1.0,1447,ml_signal,328,Conditional URL formatting based on monetary flag,,1430,        org_js = json.loads(text),"[220, 220, 220, 220, 220, 220, 220, 8745, 62, 8457, 796, 33918, 13, 46030, 7, 5239, 8]"
‚ö†Ô∏è SAST Risk (Medium): Potential for network-related exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 3127, 12, 5363, 13269]",0.5,1447,sast_risk,338,Potential for network-related exceptions,Medium,1447,,[]
‚ö†Ô∏è SAST Risk (Low): Assumes 'gbk' encoding without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 22296, 74, 6, 21004, 1231, 21201]",0.5,1511,sast_risk,340,Assumes 'gbk' encoding without validation,Low,1447,        Ë¥ßÂ∏ÅÂíåËØÅÂà∏ÂûãÂü∫ÈáëÈááÁî®ÁöÑurl‰∏çÂêåÔºåÈúÄË¶ÅÂ¢ûÂä†Âü∫ÈáëÁ±ªÂûãÂà§Êñ≠,"[220, 220, 220, 220, 220, 220, 220, 5525, 112, 100, 30585, 223, 161, 240, 234, 46237, 223, 26344, 116, 161, 252, 233, 161, 253, 118, 34932, 239, 34932, 229, 18796, 101, 21410, 6371, 38834, 28938, 234, 171, 120, 234, 165, 250, 222, 17358, 223, 161, 95, 252, 27950, 254, 161, 253, 118, 34932, 239, 163, 109, 119, 161, 252, 233, 26344, 97, 23877, 255]"
‚ö†Ô∏è SAST Risk (Low): json.loads can raise exceptions if text is not valid JSON,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33918, 13, 46030, 460, 5298, 13269, 611, 2420, 318, 407, 4938, 19449]",0.5,1511,sast_risk,342,json.loads can raise exceptions if text is not valid JSON,Low,1511,,[]
‚ö†Ô∏è SAST Risk (Low): Assumes 'result' and 'status' keys exist in JSON,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 20274, 6, 290, 705, 13376, 6, 8251, 2152, 287, 19449]",0.5,1511,sast_risk,344,Assumes 'result' and 'status' keys exist in JSON,Low,1511,,[]
‚ö†Ô∏è SAST Risk (Low): Raises generic ValueError without specific error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 14276, 11052, 12331, 1231, 2176, 4049, 9041]",0.5,1557,sast_risk,347,Raises generic ValueError without specific error handling,Low,1511,"                          (ct.P_TYPE['http'], ct.DOMAINS['ssf'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 357, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 824, 69, 6, 4357]"
‚ö†Ô∏è SAST Risk (Low): Assumes 'data' key exists in JSON,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 7890, 6, 1994, 7160, 287, 19449]",0.5,1586,sast_risk,350,Assumes 'data' key exists in JSON,Low,1557,        request = Request(ct.SINA_NAV_HISTROY_COUNT_URL %,"[220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 310, 13, 50, 28893, 62, 4535, 53, 62, 39, 1797, 5446, 21414, 62, 34, 28270, 62, 21886, 4064]"
üß† ML Signal: DataFrame creation with specific columns,"[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 6282, 351, 2176, 15180]",0.5,1586,ml_signal,353,DataFrame creation with specific columns,,1586,,[]
‚úÖ Best Practice: Explicit type conversion for DataFrame columns,"[26486, 227, 6705, 19939, 25, 11884, 2099, 11315, 329, 6060, 19778, 15180]",0.5,1599,best_practice,355,Explicit type conversion for DataFrame columns,,1586,    text = text.decode('gbk'),"[220, 220, 220, 2420, 796, 2420, 13, 12501, 1098, 10786, 22296, 74, 11537]"
‚úÖ Best Practice: Use of rename for DataFrame column consistency,"[26486, 227, 6705, 19939, 25, 5765, 286, 36265, 329, 6060, 19778, 5721, 15794]",0.5,1609,best_practice,358,Use of rename for DataFrame column consistency,,1599,    if status_code != 0:,"[220, 220, 220, 611, 3722, 62, 8189, 14512, 657, 25]"
‚úÖ Best Practice: Check for deprecated dtype usage,"[26486, 227, 6705, 19939, 25, 6822, 329, 39224, 288, 4906, 8748]",0.5,1631,best_practice,361,Check for deprecated dtype usage,,1609,    nums = org_js['result']['data']['total_num'],"[220, 220, 220, 997, 82, 796, 8745, 62, 8457, 17816, 20274, 6, 7131, 6, 7890, 6, 7131, 6, 23350, 62, 22510, 20520]"
‚úÖ Best Practice: Use of to_datetime for date conversion,"[26486, 227, 6705, 19939, 25, 5765, 286, 284, 62, 19608, 8079, 329, 3128, 11315]",0.5,1653,best_practice,361,Use of to_datetime for date conversion,,1631,    nums = org_js['result']['data']['total_num'],"[220, 220, 220, 997, 82, 796, 8745, 62, 8457, 17816, 20274, 6, 7131, 6, 7890, 6, 7131, 6, 23350, 62, 22510, 20520]"
‚úÖ Best Practice: Setting DataFrame index for time series data,"[26486, 227, 6705, 19939, 25, 25700, 6060, 19778, 6376, 329, 640, 2168, 1366]",0.5,1675,best_practice,361,Setting DataFrame index for time series data,,1653,    nums = org_js['result']['data']['total_num'],"[220, 220, 220, 997, 82, 796, 8745, 62, 8457, 17816, 20274, 6, 7131, 6, 7890, 6, 7131, 6, 23350, 62, 22510, 20520]"
‚úÖ Best Practice: Sorting DataFrame for chronological order,"[26486, 227, 6705, 19939, 25, 311, 24707, 6060, 19778, 329, 45946, 1502]",0.5,1697,best_practice,361,Sorting DataFrame for chronological order,,1675,    nums = org_js['result']['data']['total_num'],"[220, 220, 220, 997, 82, 796, 8745, 62, 8457, 17816, 20274, 6, 7131, 6, 7890, 6, 7131, 6, 23350, 62, 22510, 20520]"
üß† ML Signal: Calculation of previous value and change percentage,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 2180, 1988, 290, 1487, 5873]",0.5,1719,ml_signal,361,Calculation of previous value and change percentage,,1697,    nums = org_js['result']['data']['total_num'],"[220, 220, 220, 997, 82, 796, 8745, 62, 8457, 17816, 20274, 6, 7131, 6, 7890, 6, 7131, 6, 23350, 62, 22510, 20520]"
‚úÖ Best Practice: Dropping unnecessary columns after computation,"[26486, 227, 6705, 19939, 25, 21045, 2105, 13114, 15180, 706, 29964]",0.5,1741,best_practice,361,Dropping unnecessary columns after computation,,1719,    nums = org_js['result']['data']['total_num'],"[220, 220, 220, 997, 82, 796, 8745, 62, 8457, 17816, 20274, 6, 7131, 6, 7890, 6, 7131, 6, 23350, 62, 22510, 20520]"
‚ö†Ô∏è SAST Risk (Low): Raises IOError with a generic error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 24418, 12331, 351, 257, 14276, 4049, 3275]",0.5,1763,sast_risk,361,Raises IOError with a generic error message,Low,1741,    nums = org_js['result']['data']['total_num'],"[220, 220, 220, 997, 82, 796, 8745, 62, 8457, 17816, 20274, 6, 7131, 6, 7890, 6, 7131, 6, 23350, 62, 22510, 20520]"

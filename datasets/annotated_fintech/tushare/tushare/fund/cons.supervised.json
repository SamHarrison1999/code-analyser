[
  {
    "line": 9,
    "text": "VERSION = '0.0.1'",
    "annotation": "\u2705 Best Practice: Use of lambda for simple formatting functions",
    "confidence": 0.5,
    "tokens": [
      43717,
      796,
      705,
      15,
      13,
      15,
      13,
      16,
      6
    ],
    "start_token": 0,
    "end_token": 9,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      37456,
      329,
      2829,
      33313,
      5499
    ],
    "label": "best_practice",
    "reason": "Use of lambda for simple formatting functions"
  },
  {
    "line": 11,
    "text": "FORMAT = lambda x: '%.2f' % x",
    "annotation": "\u2705 Best Practice: Use of lambda for simple formatting functions",
    "confidence": 0.5,
    "tokens": [
      21389,
      1404,
      796,
      37456,
      2124,
      25,
      705,
      7225,
      17,
      69,
      6,
      4064,
      2124
    ],
    "start_token": 9,
    "end_token": 22,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      37456,
      329,
      2829,
      33313,
      5499
    ],
    "label": "best_practice",
    "reason": "Use of lambda for simple formatting functions"
  },
  {
    "line": 58,
    "text": "NAV_HIS_JJJZ = ['fbrq', 'jjjz', 'ljjz']",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for URL manipulation if user input is used",
    "confidence": 1.0,
    "tokens": [
      4535,
      53,
      62,
      39,
      1797,
      62,
      32178,
      41,
      57,
      796,
      37250,
      69,
      1671,
      80,
      3256,
      705,
      41098,
      73,
      89,
      3256,
      705,
      75,
      41098,
      89,
      20520
    ],
    "start_token": 22,
    "end_token": 47,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      10289,
      17512,
      611,
      2836,
      5128,
      318,
      973
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for URL manipulation if user input is used"
  },
  {
    "line": 60,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for URL manipulation if user input is used",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 47,
    "end_token": 47,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      10289,
      17512,
      611,
      2836,
      5128,
      318,
      973
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for URL manipulation if user input is used"
  },
  {
    "line": 62,
    "text": "                  'Type1Name', 'Type2Name', 'Type3Name', 'jjgm', 'jjfe',",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for URL manipulation if user input is used",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      6030,
      16,
      5376,
      3256,
      705,
      6030,
      17,
      5376,
      3256,
      705,
      6030,
      18,
      5376,
      3256,
      705,
      41098,
      39870,
      3256,
      705,
      41098,
      5036,
      3256
    ],
    "start_token": 47,
    "end_token": 87,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      10289,
      17512,
      611,
      2836,
      5128,
      318,
      973
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for URL manipulation if user input is used"
  },
  {
    "line": 64,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for URL manipulation if user input is used",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 87,
    "end_token": 87,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      10289,
      17512,
      611,
      2836,
      5128,
      318,
      973
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for URL manipulation if user input is used"
  },
  {
    "line": 66,
    "text": "NAV_CLOSE_COLUMNS = ['symbol', 'sname', 'per_nav', 'total_nav', 'nav_rate',",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for URL manipulation if user input is used",
    "confidence": 1.0,
    "tokens": [
      4535,
      53,
      62,
      32737,
      62,
      25154,
      5883,
      8035,
      796,
      37250,
      1837,
      23650,
      3256,
      705,
      82,
      3672,
      3256,
      705,
      525,
      62,
      28341,
      3256,
      705,
      23350,
      62,
      28341,
      3256,
      705,
      28341,
      62,
      4873,
      3256
    ],
    "start_token": 87,
    "end_token": 119,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      10289,
      17512,
      611,
      2836,
      5128,
      318,
      973
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for URL manipulation if user input is used"
  },
  {
    "line": 68,
    "text": "                     'fund_manager', 'jjlx', 'jjzfe']",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for URL manipulation if user input is used",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      10990,
      62,
      37153,
      3256,
      705,
      73,
      20362,
      87,
      3256,
      705,
      41098,
      89,
      5036,
      20520
    ],
    "start_token": 119,
    "end_token": 154,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      10289,
      17512,
      611,
      2836,
      5128,
      318,
      973
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for URL manipulation if user input is used"
  },
  {
    "line": 70,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for URL manipulation if user input is used",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 154,
    "end_token": 154,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      10289,
      17512,
      611,
      2836,
      5128,
      318,
      973
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for URL manipulation if user input is used"
  },
  {
    "line": 72,
    "text": "                       'discount_rate', 'nav_date', 'start_date', 'end_date',",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for URL manipulation if user input is used",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      15410,
      608,
      62,
      4873,
      3256,
      705,
      28341,
      62,
      4475,
      3256,
      705,
      9688,
      62,
      4475,
      3256,
      705,
      437,
      62,
      4475,
      3256
    ],
    "start_token": 154,
    "end_token": 197,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      10289,
      17512,
      611,
      2836,
      5128,
      318,
      973
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for URL manipulation if user input is used"
  },
  {
    "line": 97,
    "text": "DATA_ROWS_TIPS = '%s rows data found.Please wait for a moment.'",
    "annotation": "\ud83e\udde0 ML Signal: Checking Python version for compatibility",
    "confidence": 0.5,
    "tokens": [
      26947,
      62,
      49,
      22845,
      62,
      25621,
      3705,
      796,
      705,
      4,
      82,
      15274,
      1366,
      1043,
      13,
      5492,
      4043,
      329,
      257,
      2589,
      2637
    ],
    "start_token": 197,
    "end_token": 218,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      11361,
      2196,
      329,
      17764
    ],
    "label": "ml_signal",
    "reason": "Checking Python version for compatibility"
  },
  {
    "line": 88,
    "text": "SINA_NAV_HISTROY_DATA_CUR_URL = '%s%s/fundInfo/api/openapi.php/CaihuiFundInfoService.getNavcur?symbol=%s&datefrom=%s&dateto=%s&num=%s'",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly writing to sys.stdout can be risky if the output is not properly sanitized.",
    "confidence": 1.0,
    "tokens": [
      50,
      28893,
      62,
      4535,
      53,
      62,
      39,
      1797,
      5446,
      21414,
      62,
      26947,
      62,
      34,
      4261,
      62,
      21886,
      796,
      705,
      4,
      82,
      4,
      82,
      14,
      10990,
      12360,
      14,
      15042,
      14,
      9654,
      15042,
      13,
      10121,
      14,
      34,
      1872,
      71,
      9019,
      24553,
      12360,
      16177,
      13,
      1136,
      30575,
      22019,
      30,
      1837,
      23650,
      28,
      4,
      82,
      5,
      4475,
      6738,
      28,
      4,
      82,
      5,
      19608,
      27206,
      28,
      4,
      82,
      5,
      22510,
      28,
      4,
      82,
      6
    ],
    "start_token": 218,
    "end_token": 287,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      3597,
      284,
      25064,
      13,
      19282,
      448,
      460,
      307,
      17564,
      611,
      262,
      5072,
      318,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly writing to sys.stdout can be risky if the output is not properly sanitized."
  },
  {
    "line": 89,
    "text": "",
    "annotation": "\u2705 Best Practice: Consider using a logging framework instead of direct stdout writes for better control and flexibility.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 287,
    "end_token": 287,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      18931,
      9355,
      2427,
      286,
      1277,
      14367,
      448,
      6797,
      329,
      1365,
      1630,
      290,
      13688,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a logging framework instead of direct stdout writes for better control and flexibility."
  },
  {
    "line": 90,
    "text": "SINA_DATA_DETAIL_URL = '%s%s/quotes_service/api/%s/Market_Center.getHQNodeData?page=1&num=400&sort=symbol&asc=1&node=%s&symbol=&_s_r_a=page'",
    "annotation": "\ud83e\udde0 ML Signal: Usage of sys.stdout.write indicates a pattern of direct output handling.",
    "confidence": 0.5,
    "tokens": [
      50,
      28893,
      62,
      26947,
      62,
      35,
      20892,
      4146,
      62,
      21886,
      796,
      705,
      4,
      82,
      4,
      82,
      14,
      421,
      6421,
      62,
      15271,
      14,
      15042,
      14,
      4,
      82,
      14,
      27470,
      62,
      23656,
      13,
      1136,
      41275,
      19667,
      6601,
      30,
      7700,
      28,
      16,
      5,
      22510,
      28,
      7029,
      5,
      30619,
      28,
      1837,
      23650,
      5,
      3372,
      28,
      16,
      5,
      17440,
      28,
      4,
      82,
      5,
      1837,
      23650,
      28,
      5,
      62,
      82,
      62,
      81,
      62,
      64,
      28,
      7700,
      6
    ],
    "start_token": 287,
    "end_token": 358,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      25064,
      13,
      19282,
      448,
      13,
      13564,
      9217,
      257,
      3912,
      286,
      1277,
      5072,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of sys.stdout.write indicates a pattern of direct output handling."
  },
  {
    "line": 92,
    "text": "SINA_FUND_INFO_URL = '%s%s/fundInfo/api/openapi.php/FundPageInfoService.tabjjgk?symbol=%s&format=json'",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Flushing stdout can be risky if not handled properly, as it may lead to unexpected behavior in output.",
    "confidence": 0.5,
    "tokens": [
      50,
      28893,
      62,
      42296,
      35,
      62,
      10778,
      62,
      21886,
      796,
      705,
      4,
      82,
      4,
      82,
      14,
      10990,
      12360,
      14,
      15042,
      14,
      9654,
      15042,
      13,
      10121,
      14,
      24553,
      9876,
      12360,
      16177,
      13,
      8658,
      41098,
      70,
      74,
      30,
      1837,
      23650,
      28,
      4,
      82,
      5,
      18982,
      28,
      17752,
      6
    ],
    "start_token": 358,
    "end_token": 404,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1610,
      8023,
      14367,
      448,
      460,
      307,
      17564,
      611,
      407,
      12118,
      6105,
      11,
      355,
      340,
      743,
      1085,
      284,
      10059,
      4069,
      287,
      5072,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Flushing stdout can be risky if not handled properly, as it may lead to unexpected behavior in output."
  },
  {
    "line": 93,
    "text": "",
    "annotation": "\u2705 Best Practice: Ensure that flushing is necessary to avoid performance issues.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 404,
    "end_token": 404,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      781,
      8023,
      318,
      3306,
      284,
      3368,
      2854,
      2428,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure that flushing is necessary to avoid performance issues."
  },
  {
    "line": 94,
    "text": "##########################################################################",
    "annotation": "\ud83e\udde0 ML Signal: Usage of sys.stdout.flush indicates a pattern of manual output management.",
    "confidence": 0.5,
    "tokens": [
      29113,
      29113,
      7804,
      2235
    ],
    "start_token": 404,
    "end_token": 408,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      25064,
      13,
      19282,
      448,
      13,
      25925,
      9217,
      257,
      3912,
      286,
      10107,
      5072,
      4542,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of sys.stdout.flush indicates a pattern of manual output management."
  },
  {
    "line": 91,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly writing to sys.stdout can lead to issues if the output stream is redirected or closed.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 408,
    "end_token": 408,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      3597,
      284,
      25064,
      13,
      19282,
      448,
      460,
      1085,
      284,
      2428,
      611,
      262,
      5072,
      4269,
      318,
      45158,
      393,
      4838,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly writing to sys.stdout can lead to issues if the output stream is redirected or closed."
  },
  {
    "line": 92,
    "text": "SINA_FUND_INFO_URL = '%s%s/fundInfo/api/openapi.php/FundPageInfoService.tabjjgk?symbol=%s&format=json'",
    "annotation": "\u2705 Best Practice: Consider using the print function for better compatibility and readability.",
    "confidence": 1.0,
    "tokens": [
      50,
      28893,
      62,
      42296,
      35,
      62,
      10778,
      62,
      21886,
      796,
      705,
      4,
      82,
      4,
      82,
      14,
      10990,
      12360,
      14,
      15042,
      14,
      9654,
      15042,
      13,
      10121,
      14,
      24553,
      9876,
      12360,
      16177,
      13,
      8658,
      41098,
      70,
      74,
      30,
      1837,
      23650,
      28,
      4,
      82,
      5,
      18982,
      28,
      17752,
      6
    ],
    "start_token": 408,
    "end_token": 454,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      262,
      3601,
      2163,
      329,
      1365,
      17764,
      290,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using the print function for better compatibility and readability."
  },
  {
    "line": 94,
    "text": "##########################################################################",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Flushing sys.stdout without checking if it's open can lead to exceptions if the stream is closed.",
    "confidence": 1.0,
    "tokens": [
      29113,
      29113,
      7804,
      2235
    ],
    "start_token": 454,
    "end_token": 458,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1610,
      8023,
      25064,
      13,
      19282,
      448,
      1231,
      10627,
      611,
      340,
      338,
      1280,
      460,
      1085,
      284,
      13269,
      611,
      262,
      4269,
      318,
      4838,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Flushing sys.stdout without checking if it's open can lead to exceptions if the stream is closed."
  },
  {
    "line": 94,
    "text": "##########################################################################",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using sys.stdout directly can lead to issues if the output stream is redirected or closed.",
    "confidence": 1.0,
    "tokens": [
      29113,
      29113,
      7804,
      2235
    ],
    "start_token": 458,
    "end_token": 462,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      25064,
      13,
      19282,
      448,
      3264,
      460,
      1085,
      284,
      2428,
      611,
      262,
      5072,
      4269,
      318,
      45158,
      393,
      4838,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using sys.stdout directly can lead to issues if the output stream is redirected or closed."
  },
  {
    "line": 95,
    "text": "DATA_GETTING_TIPS = '[Getting data:]'",
    "annotation": "\u2705 Best Practice: Consider using the print function for better readability and automatic handling of newlines.",
    "confidence": 1.0,
    "tokens": [
      26947,
      62,
      18851,
      48996,
      62,
      25621,
      3705,
      796,
      44438,
      20570,
      1366,
      47715,
      6
    ],
    "start_token": 462,
    "end_token": 475,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      262,
      3601,
      2163,
      329,
      1365,
      1100,
      1799,
      290,
      11353,
      9041,
      286,
      649,
      6615,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using the print function for better readability and automatic handling of newlines."
  },
  {
    "line": 97,
    "text": "DATA_ROWS_TIPS = '%s rows data found.Please wait for a moment.'",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Flushing stdout can be unnecessary and may affect performance if used excessively.",
    "confidence": 1.0,
    "tokens": [
      26947,
      62,
      49,
      22845,
      62,
      25621,
      3705,
      796,
      705,
      4,
      82,
      15274,
      1366,
      1043,
      13,
      5492,
      4043,
      329,
      257,
      2589,
      2637
    ],
    "start_token": 475,
    "end_token": 496,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1610,
      8023,
      14367,
      448,
      460,
      307,
      13114,
      290,
      743,
      2689,
      2854,
      611,
      973,
      40437,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Flushing stdout can be unnecessary and may affect performance if used excessively."
  },
  {
    "line": 97,
    "text": "DATA_ROWS_TIPS = '%s rows data found.Please wait for a moment.'",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): sys.stdout.write can be redirected, which might lead to unintended data exposure if not handled properly.",
    "confidence": 0.5,
    "tokens": [
      26947,
      62,
      49,
      22845,
      62,
      25621,
      3705,
      796,
      705,
      4,
      82,
      15274,
      1366,
      1043,
      13,
      5492,
      4043,
      329,
      257,
      2589,
      2637
    ],
    "start_token": 496,
    "end_token": 517,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      25064,
      13,
      19282,
      448,
      13,
      13564,
      460,
      307,
      45158,
      11,
      543,
      1244,
      1085,
      284,
      30261,
      1366,
      7111,
      611,
      407,
      12118,
      6105,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "sys.stdout.write can be redirected, which might lead to unintended data exposure if not handled properly."
  },
  {
    "line": 98,
    "text": "DATA_INPUT_ERROR_MSG = 'date input error.'",
    "annotation": "\u2705 Best Practice: Consider using print() for writing to stdout for better readability and automatic flushing.",
    "confidence": 0.5,
    "tokens": [
      26947,
      62,
      1268,
      30076,
      62,
      24908,
      62,
      5653,
      38,
      796,
      705,
      4475,
      5128,
      4049,
      2637
    ],
    "start_token": 517,
    "end_token": 532,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      3601,
      3419,
      329,
      3597,
      284,
      14367,
      448,
      329,
      1365,
      1100,
      1799,
      290,
      11353,
      781,
      8023,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using print() for writing to stdout for better readability and automatic flushing."
  },
  {
    "line": 100,
    "text": "DATE_CHK_MSG = '\u5e74\u5ea6\u8f93\u5165\u9519\u8bef\uff1a\u8bf7\u8f93\u51651989\u5e74\u4ee5\u540e\u7684\u5e74\u4efd\u6570\u5b57\uff0c\u683c\u5f0f\uff1aYYYY'",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Directly writing to sys.stdout without validation can lead to injection vulnerabilities if msg is not sanitized.",
    "confidence": 0.5,
    "tokens": [
      35,
      6158,
      62,
      3398,
      42,
      62,
      5653,
      38,
      796,
      705,
      33176,
      112,
      41753,
      99,
      164,
      122,
      241,
      17739,
      98,
      165,
      242,
      247,
      46237,
      107,
      171,
      120,
      248,
      46237,
      115,
      164,
      122,
      241,
      17739,
      98,
      25475,
      33176,
      112,
      20015,
      98,
      28938,
      236,
      21410,
      33176,
      112,
      20015,
      121,
      46763,
      108,
      27764,
      245,
      171,
      120,
      234,
      43718,
      120,
      28156,
      237,
      171,
      120,
      248,
      26314,
      26314,
      6
    ],
    "start_token": 532,
    "end_token": 595,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      306,
      3597,
      284,
      25064,
      13,
      19282,
      448,
      1231,
      21201,
      460,
      1085,
      284,
      16954,
      23805,
      611,
      31456,
      318,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Directly writing to sys.stdout without validation can lead to injection vulnerabilities if msg is not sanitized."
  },
  {
    "line": 102,
    "text": "TOP_PARAS_MSG = 'top\u6709\u8bef\uff0c\u8bf7\u8f93\u5165\u6574\u6570\u6216all.'",
    "annotation": "\u2705 Best Practice: Flushing stdout immediately ensures that the message is output without delay, which is useful for real-time logging.",
    "confidence": 0.5,
    "tokens": [
      35222,
      62,
      27082,
      1921,
      62,
      5653,
      38,
      796,
      705,
      4852,
      17312,
      231,
      46237,
      107,
      171,
      120,
      234,
      46237,
      115,
      164,
      122,
      241,
      17739,
      98,
      46763,
      112,
      46763,
      108,
      22755,
      244,
      439,
      2637
    ],
    "start_token": 595,
    "end_token": 627,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      1610,
      8023,
      14367,
      448,
      3393,
      19047,
      326,
      262,
      3275,
      318,
      5072,
      1231,
      5711,
      11,
      543,
      318,
      4465,
      329,
      1103,
      12,
      2435,
      18931,
      13
    ],
    "label": "best_practice",
    "reason": "Flushing stdout immediately ensures that the message is output without delay, which is useful for real-time logging."
  },
  {
    "line": 100,
    "text": "DATE_CHK_MSG = '\u5e74\u5ea6\u8f93\u5165\u9519\u8bef\uff1a\u8bf7\u8f93\u51651989\u5e74\u4ee5\u540e\u7684\u5e74\u4efd\u6570\u5b57\uff0c\u683c\u5f0f\uff1aYYYY'",
    "annotation": "\u2705 Best Practice: Function name starts with an underscore, indicating it's intended for internal use.",
    "confidence": 0.5,
    "tokens": [
      35,
      6158,
      62,
      3398,
      42,
      62,
      5653,
      38,
      796,
      705,
      33176,
      112,
      41753,
      99,
      164,
      122,
      241,
      17739,
      98,
      165,
      242,
      247,
      46237,
      107,
      171,
      120,
      248,
      46237,
      115,
      164,
      122,
      241,
      17739,
      98,
      25475,
      33176,
      112,
      20015,
      98,
      28938,
      236,
      21410,
      33176,
      112,
      20015,
      121,
      46763,
      108,
      27764,
      245,
      171,
      120,
      234,
      43718,
      120,
      28156,
      237,
      171,
      120,
      248,
      26314,
      26314,
      6
    ],
    "start_token": 627,
    "end_token": 690,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      4940,
      351,
      281,
      44810,
      11,
      12739,
      340,
      338,
      5292,
      329,
      5387,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Function name starts with an underscore, indicating it's intended for internal use."
  },
  {
    "line": 102,
    "text": "TOP_PARAS_MSG = 'top\u6709\u8bef\uff0c\u8bf7\u8f93\u5165\u6574\u6570\u6216all.'",
    "annotation": "\u2705 Best Practice: Using 'in' to check membership in a dictionary's keys is efficient.",
    "confidence": 0.5,
    "tokens": [
      35222,
      62,
      27082,
      1921,
      62,
      5653,
      38,
      796,
      705,
      4852,
      17312,
      231,
      46237,
      107,
      171,
      120,
      234,
      46237,
      115,
      164,
      122,
      241,
      17739,
      98,
      46763,
      112,
      46763,
      108,
      22755,
      244,
      439,
      2637
    ],
    "start_token": 690,
    "end_token": 722,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      705,
      259,
      6,
      284,
      2198,
      9931,
      287,
      257,
      22155,
      338,
      8251,
      318,
      6942,
      13
    ],
    "label": "best_practice",
    "reason": "Using 'in' to check membership in a dictionary's keys is efficient."
  },
  {
    "line": 104,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic TypeError without additional context can make debugging difficult.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 722,
    "end_token": 722,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      5994,
      12331,
      1231,
      3224,
      4732,
      460,
      787,
      28769,
      2408,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic TypeError without additional context can make debugging difficult."
  },
  {
    "line": 107,
    "text": "DICT_NAV_EQUITY = {",
    "annotation": "\u2705 Best Practice: Explicitly returning True improves readability and clarity of the function's intent.",
    "confidence": 0.5,
    "tokens": [
      35,
      18379,
      62,
      4535,
      53,
      62,
      36,
      10917,
      9050,
      796,
      1391
    ],
    "start_token": 722,
    "end_token": 733,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      8024,
      6407,
      19575,
      1100,
      1799,
      290,
      16287,
      286,
      262,
      2163,
      338,
      6824,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly returning True improves readability and clarity of the function's intent."
  },
  {
    "line": 105,
    "text": "OFT_MSG = u'\u5f00\u653e\u578b\u57fa\u91d1\u7c7b\u578b\u8f93\u5165\u6709\u8bef\uff0c\u8bf7\u8f93\u5165all\u3001equity\u3001mix\u3001bond\u3001monetary\u3001qdii'",
    "annotation": "\u2705 Best Practice: Function name starts with an underscore, indicating it's intended for internal use.",
    "confidence": 1.0,
    "tokens": [
      46,
      9792,
      62,
      5653,
      38,
      796,
      334,
      6,
      28156,
      222,
      162,
      242,
      122,
      161,
      252,
      233,
      161,
      253,
      118,
      34932,
      239,
      163,
      109,
      119,
      161,
      252,
      233,
      164,
      122,
      241,
      17739,
      98,
      17312,
      231,
      46237,
      107,
      171,
      120,
      234,
      46237,
      115,
      164,
      122,
      241,
      17739,
      98,
      439,
      23513,
      4853,
      414,
      23513,
      19816,
      23513,
      65,
      623,
      23513,
      2144,
      8527,
      23513,
      80,
      67,
      4178,
      6
    ],
    "start_token": 733,
    "end_token": 796,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      4940,
      351,
      281,
      44810,
      11,
      12739,
      340,
      338,
      5292,
      329,
      5387,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Function name starts with an underscore, indicating it's intended for internal use."
  },
  {
    "line": 107,
    "text": "DICT_NAV_EQUITY = {",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of 'year' ensures type safety.",
    "confidence": 0.5,
    "tokens": [
      35,
      18379,
      62,
      4535,
      53,
      62,
      36,
      10917,
      9050,
      796,
      1391
    ],
    "start_token": 796,
    "end_token": 807,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      705,
      1941,
      6,
      19047,
      2099,
      3747,
      13
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of 'year' ensures type safety."
  },
  {
    "line": 108,
    "text": "    'fbrq': 'date',",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information disclosure if DATE_CHK_MSG contains sensitive information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      705,
      69,
      1671,
      80,
      10354,
      705,
      4475,
      3256
    ],
    "start_token": 807,
    "end_token": 818,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      13019,
      611,
      360,
      6158,
      62,
      3398,
      42,
      62,
      5653,
      38,
      4909,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information disclosure if DATE_CHK_MSG contains sensitive information."
  },
  {
    "line": 111,
    "text": "    'change': 'change'",
    "annotation": "\u2705 Best Practice: Using isinstance to check the type of 'quarter' ensures type safety.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      705,
      3803,
      10354,
      705,
      3803,
      6
    ],
    "start_token": 818,
    "end_token": 827,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      318,
      39098,
      284,
      2198,
      262,
      2099,
      286,
      705,
      24385,
      6,
      19047,
      2099,
      3747,
      13
    ],
    "label": "best_practice",
    "reason": "Using isinstance to check the type of 'quarter' ensures type safety."
  },
  {
    "line": 111,
    "text": "    'change': 'change'",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential information disclosure if DATE_CHK_Q_MSG contains sensitive information.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      705,
      3803,
      10354,
      705,
      3803,
      6
    ],
    "start_token": 827,
    "end_token": 836,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1321,
      13019,
      611,
      360,
      6158,
      62,
      3398,
      42,
      62,
      48,
      62,
      5653,
      38,
      4909,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential information disclosure if DATE_CHK_Q_MSG contains sensitive information."
  }
]
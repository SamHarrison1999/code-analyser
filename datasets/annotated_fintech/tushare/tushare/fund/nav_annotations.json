[
  {
    "line": 9,
    "text": "\"\"\"",
    "annotation": "\u2705 Best Practice: Ensures division operator behaves consistently between Python 2 and 3",
    "confidence": 1.0,
    "tokens": [
      37811
    ],
    "start_token": 0,
    "end_token": 1,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48221,
      942,
      7297,
      10088,
      39341,
      9835,
      1022,
      11361,
      362,
      290,
      513
    ],
    "label": "best_practice",
    "reason": "Ensures division operator behaves consistently between Python 2 and 3"
  },
  {
    "line": 21,
    "text": "except ImportError:",
    "annotation": "\u2705 Best Practice: Handles compatibility between Python 2 and 3 for importing modules",
    "confidence": 1.0,
    "tokens": [
      16341,
      17267,
      12331,
      25
    ],
    "start_token": 1,
    "end_token": 5,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7157,
      829,
      17764,
      1022,
      11361,
      362,
      290,
      513,
      329,
      33332,
      13103
    ],
    "label": "best_practice",
    "reason": "Handles compatibility between Python 2 and 3 for importing modules"
  },
  {
    "line": 49,
    "text": "                nav_date    \u51c0\u503c\u65e5\u671f",
    "annotation": "\u2705 Best Practice: Use of a default parameter value for `fund_type` improves function usability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6812,
      62,
      4475,
      220,
      220,
      220,
      10263,
      229,
      222,
      161,
      222,
      120,
      33768,
      98,
      17312,
      253
    ],
    "start_token": 5,
    "end_token": 36,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      4277,
      11507,
      1988,
      329,
      4600,
      10990,
      62,
      4906,
      63,
      19575,
      2163,
      42863,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a default parameter value for `fund_type` improves function usability."
  },
  {
    "line": 51,
    "text": "                jjlx        \u57fa\u91d1\u7c7b\u578b",
    "annotation": "\u2705 Best Practice: Writing a header or log can help in debugging and tracking execution.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      474,
      20362,
      87,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10263,
      253,
      118,
      34932,
      239,
      163,
      109,
      119,
      161,
      252,
      233
    ],
    "start_token": 36,
    "end_token": 72,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      22183,
      257,
      13639,
      393,
      2604,
      460,
      1037,
      287,
      28769,
      290,
      9646,
      9706,
      13
    ],
    "label": "best_practice",
    "reason": "Writing a header or log can help in debugging and tracking execution."
  },
  {
    "line": 51,
    "text": "                jjlx        \u57fa\u91d1\u7c7b\u578b",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of URL manipulation if `ct` values are not properly sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      474,
      20362,
      87,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10263,
      253,
      118,
      34932,
      239,
      163,
      109,
      119,
      161,
      252,
      233
    ],
    "start_token": 72,
    "end_token": 108,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      10289,
      17512,
      611,
      4600,
      310,
      63,
      3815,
      389,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of URL manipulation if `ct` values are not properly sanitized."
  },
  {
    "line": 61,
    "text": "                              ct.NAV_OPEN_T3))",
    "annotation": "\u2705 Best Practice: Calculating limit count dynamically based on `nums` and `pages`.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      4535,
      53,
      62,
      3185,
      1677,
      62,
      51,
      18,
      4008
    ],
    "start_token": 108,
    "end_token": 149,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27131,
      803,
      4179,
      954,
      32366,
      1912,
      319,
      4600,
      77,
      5700,
      63,
      290,
      4600,
      31126,
      44646
    ],
    "label": "best_practice",
    "reason": "Calculating limit count dynamically based on `nums` and `pages`."
  },
  {
    "line": 61,
    "text": "                              ct.NAV_OPEN_T3))",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of URL manipulation if `ct` values are not properly sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      4535,
      53,
      62,
      3185,
      1677,
      62,
      51,
      18,
      4008
    ],
    "start_token": 149,
    "end_token": 190,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      10289,
      17512,
      611,
      4600,
      310,
      63,
      3815,
      389,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of URL manipulation if `ct` values are not properly sanitized."
  },
  {
    "line": 71,
    "text": "                                        page,",
    "annotation": "\ud83e\udde0 ML Signal: Use of `pd.concat` indicates data aggregation, which is a common pattern in data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2443,
      11
    ],
    "start_token": 190,
    "end_token": 231,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4600,
      30094,
      13,
      1102,
      9246,
      63,
      9217,
      1366,
      46500,
      11,
      543,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of `pd.concat` indicates data aggregation, which is a common pattern in data processing."
  },
  {
    "line": 109,
    "text": "                sname       \u57fa\u91d1\u540d\u79f0",
    "annotation": "\u2705 Best Practice: Consider adding input validation for fund_type and sub_type to ensure they are valid options.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3013,
      480,
      220,
      220,
      220,
      220,
      220,
      220,
      10263,
      253,
      118,
      34932,
      239,
      28938,
      235,
      163,
      100,
      108
    ],
    "start_token": 231,
    "end_token": 264,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      5128,
      21201,
      329,
      1814,
      62,
      4906,
      290,
      850,
      62,
      4906,
      284,
      4155,
      484,
      389,
      4938,
      3689,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding input validation for fund_type and sub_type to ensure they are valid options."
  },
  {
    "line": 110,
    "text": "                per_nav     \u5355\u4f4d\u51c0\u503c",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of format string injection if ct.SINA_NAV_COUNT_URL or its parameters are user-controlled.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      583,
      62,
      28341,
      220,
      220,
      220,
      220,
      10263,
      235,
      243,
      19526,
      235,
      49035,
      222,
      161,
      222,
      120
    ],
    "start_token": 264,
    "end_token": 296,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      5794,
      4731,
      16954,
      611,
      269,
      83,
      13,
      50,
      28893,
      62,
      4535,
      53,
      62,
      34,
      28270,
      62,
      21886,
      393,
      663,
      10007,
      389,
      2836,
      12,
      14401,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of format string injection if ct.SINA_NAV_COUNT_URL or its parameters are user-controlled."
  },
  {
    "line": 115,
    "text": "                start_date  \u6210\u7acb\u65e5\u671f",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of format string injection if ct.SINA_NAV_DATA_URL or its parameters are user-controlled.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      62,
      4475,
      220,
      10545,
      230,
      238,
      44165,
      233,
      33768,
      98,
      17312,
      253
    ],
    "start_token": 296,
    "end_token": 324,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      5794,
      4731,
      16954,
      611,
      269,
      83,
      13,
      50,
      28893,
      62,
      4535,
      53,
      62,
      26947,
      62,
      21886,
      393,
      663,
      10007,
      389,
      2836,
      12,
      14401,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of format string injection if ct.SINA_NAV_DATA_URL or its parameters are user-controlled."
  },
  {
    "line": 125,
    "text": "                          ct.NAV_CLOSE_T2[fund_type],",
    "annotation": "\ud83e\udde0 ML Signal: The return of a DataFrame object can be used to train models that predict data structure or content.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      4535,
      53,
      62,
      32737,
      62,
      51,
      17,
      58,
      10990,
      62,
      4906,
      4357
    ],
    "start_token": 324,
    "end_token": 364,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      1441,
      286,
      257,
      6060,
      19778,
      2134,
      460,
      307,
      973,
      284,
      4512,
      4981,
      326,
      4331,
      1366,
      4645,
      393,
      2695,
      13
    ],
    "label": "ml_signal",
    "reason": "The return of a DataFrame object can be used to train models that predict data structure or content."
  },
  {
    "line": 159,
    "text": "     -------",
    "annotation": "\u2705 Best Practice: Consider adding input validation for fund_type and sub_type to ensure they are valid options.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 364,
    "end_token": 369,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      5128,
      21201,
      329,
      1814,
      62,
      4906,
      290,
      850,
      62,
      4906,
      284,
      4155,
      484,
      389,
      4938,
      3689,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding input validation for fund_type and sub_type to ensure they are valid options."
  },
  {
    "line": 160,
    "text": "        DataFrame",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of format string injection if ct.NAV_GRADING_T2 or ct.NAV_GRADING_T3 are user-controlled.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6060,
      19778
    ],
    "start_token": 369,
    "end_token": 378,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      5794,
      4731,
      16954,
      611,
      269,
      83,
      13,
      4535,
      53,
      62,
      10761,
      2885,
      2751,
      62,
      51,
      17,
      393,
      269,
      83,
      13,
      4535,
      53,
      62,
      10761,
      2885,
      2751,
      62,
      51,
      18,
      389,
      2836,
      12,
      14401,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of format string injection if ct.NAV_GRADING_T2 or ct.NAV_GRADING_T3 are user-controlled."
  },
  {
    "line": 165,
    "text": "                total_nav   \u7d2f\u8ba1\u51c0\u503c",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of format string injection if ct.NAV_GRADING_T2 or ct.NAV_GRADING_T3 are user-controlled.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2472,
      62,
      28341,
      220,
      220,
      13328,
      112,
      107,
      164,
      106,
      94,
      49035,
      222,
      161,
      222,
      120
    ],
    "start_token": 378,
    "end_token": 409,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      5794,
      4731,
      16954,
      611,
      269,
      83,
      13,
      4535,
      53,
      62,
      10761,
      2885,
      2751,
      62,
      51,
      17,
      393,
      269,
      83,
      13,
      4535,
      53,
      62,
      10761,
      2885,
      2751,
      62,
      51,
      18,
      389,
      2836,
      12,
      14401,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of format string injection if ct.NAV_GRADING_T2 or ct.NAV_GRADING_T3 are user-controlled."
  },
  {
    "line": 175,
    "text": "    ct._write_head()",
    "annotation": "\ud83e\udde0 ML Signal: The function returns a DataFrame, which is a common pattern in data processing tasks.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      269,
      83,
      13557,
      13564,
      62,
      2256,
      3419
    ],
    "start_token": 409,
    "end_token": 419,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      383,
      2163,
      5860,
      257,
      6060,
      19778,
      11,
      543,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "The function returns a DataFrame, which is a common pattern in data processing tasks."
  },
  {
    "line": 199,
    "text": "                  \u57fa\u91d1\u4ee3\u7801 e.g. 000001",
    "annotation": "\u2705 Best Practice: Use a default value for start if None is provided",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10263,
      253,
      118,
      34932,
      239,
      47987,
      163,
      254,
      223,
      304,
      13,
      70,
      13,
      17643,
      486
    ],
    "start_token": 419,
    "end_token": 451,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      4277,
      1988,
      329,
      923,
      611,
      6045,
      318,
      2810
    ],
    "label": "best_practice",
    "reason": "Use a default value for start if None is provided"
  },
  {
    "line": 201,
    "text": "                  \u5f00\u59cb\u65e5\u671f format\uff1aYYYY-MM-DD \u4e3a\u7a7a\u65f6\u53d6\u5f53\u524d\u65e5\u671f",
    "annotation": "\u2705 Best Practice: Use a default value for end if None is provided",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10263,
      120,
      222,
      34650,
      233,
      33768,
      98,
      17312,
      253,
      5794,
      171,
      120,
      248,
      26314,
      26314,
      12,
      12038,
      12,
      16458,
      220,
      10310,
      118,
      163,
      102,
      118,
      33768,
      114,
      20998,
      244,
      37605,
      241,
      30298,
      235,
      33768,
      98,
      17312,
      253
    ],
    "start_token": 451,
    "end_token": 505,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      4277,
      1988,
      329,
      886,
      611,
      6045,
      318,
      2810
    ],
    "label": "best_practice",
    "reason": "Use a default value for end if None is provided"
  },
  {
    "line": 204,
    "text": "      retry_count : int, \u9ed8\u8ba4 3",
    "annotation": "\ud83e\udde0 ML Signal: Accessing fund information based on a code",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      1005,
      563,
      62,
      9127,
      1058,
      493,
      11,
      16268,
      119,
      246,
      164,
      106,
      97,
      513
    ],
    "start_token": 505,
    "end_token": 524,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      1814,
      1321,
      1912,
      319,
      257,
      2438
    ],
    "label": "ml_signal",
    "reason": "Accessing fund information based on a code"
  },
  {
    "line": 206,
    "text": "      pause : int, \u9ed8\u8ba4 0",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of deprecated method 'ix' in pandas",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      14985,
      1058,
      493,
      11,
      16268,
      119,
      246,
      164,
      106,
      97,
      657
    ],
    "start_token": 524,
    "end_token": 540,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      39224,
      2446,
      705,
      844,
      6,
      287,
      19798,
      292
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of deprecated method 'ix' in pandas"
  },
  {
    "line": 208,
    "text": "      timeout: int \u9ed8\u8ba4 10s",
    "annotation": "\ud83e\udde0 ML Signal: Checking fund type to determine if it is monetary",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      26827,
      25,
      493,
      16268,
      119,
      246,
      164,
      106,
      97,
      838,
      82
    ],
    "start_token": 540,
    "end_token": 556,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      1814,
      2099,
      284,
      5004,
      611,
      340,
      318,
      15331
    ],
    "label": "ml_signal",
    "reason": "Checking fund type to determine if it is monetary"
  },
  {
    "line": 211,
    "text": "    -------",
    "annotation": "\ud83e\udde0 ML Signal: Writing header information, possibly for logging or output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      35656
    ],
    "start_token": 556,
    "end_token": 560,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      22183,
      13639,
      1321,
      11,
      5457,
      329,
      18931,
      393,
      5072
    ],
    "label": "ml_signal",
    "reason": "Writing header information, possibly for logging or output"
  },
  {
    "line": 212,
    "text": "      DataFrame",
    "annotation": "\ud83e\udde0 ML Signal: Calculating the number of historical records to fetch",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      6060,
      19778
    ],
    "start_token": 560,
    "end_token": 567,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      262,
      1271,
      286,
      6754,
      4406,
      284,
      21207
    ],
    "label": "ml_signal",
    "reason": "Calculating the number of historical records to fetch"
  },
  {
    "line": 212,
    "text": "      DataFrame",
    "annotation": "\ud83e\udde0 ML Signal: Parsing historical data with retry and timeout parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      6060,
      19778
    ],
    "start_token": 567,
    "end_token": 574,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23042,
      278,
      6754,
      1366,
      351,
      1005,
      563,
      290,
      26827,
      10007
    ],
    "label": "ml_signal",
    "reason": "Parsing historical data with retry and timeout parameters"
  },
  {
    "line": 239,
    "text": "    Parameters",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external URL for data fetching",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      40117
    ],
    "start_token": 574,
    "end_token": 578,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      10289,
      329,
      1366,
      21207,
      278
    ],
    "label": "ml_signal",
    "reason": "Usage of external URL for data fetching"
  },
  {
    "line": 239,
    "text": "    Parameters",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for URL manipulation or injection",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      40117
    ],
    "start_token": 578,
    "end_token": 582,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      10289,
      17512,
      393,
      16954
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for URL manipulation or injection"
  },
  {
    "line": 243,
    "text": "    return",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Network operation with potential for timeout or connection issues",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441
    ],
    "start_token": 582,
    "end_token": 586,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7311,
      4905,
      351,
      2785,
      329,
      26827,
      393,
      4637,
      2428
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Network operation with potential for timeout or connection issues"
  },
  {
    "line": 245,
    "text": "      DataFrame",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'gbk' encoding, which may not always be correct",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      6060,
      19778
    ],
    "start_token": 586,
    "end_token": 593,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      22296,
      74,
      6,
      21004,
      11,
      543,
      743,
      407,
      1464,
      307,
      3376
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'gbk' encoding, which may not always be correct"
  },
  {
    "line": 247,
    "text": "          jjjc      \u57fa\u91d1\u7b80\u79f0",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): json.loads can raise exceptions if text is not valid JSON",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      474,
      41098,
      66,
      220,
      220,
      220,
      220,
      220,
      10263,
      253,
      118,
      34932,
      239,
      163,
      106,
      222,
      163,
      100,
      108
    ],
    "start_token": 593,
    "end_token": 621,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      33918,
      13,
      46030,
      460,
      5298,
      13269,
      611,
      2420,
      318,
      407,
      4938,
      19449
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "json.loads can raise exceptions if text is not valid JSON"
  },
  {
    "line": 249,
    "text": "          clrq      \u6210\u7acb\u65e5\u671f",
    "annotation": "\u2705 Best Practice: Explicit conversion to int for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      537,
      81,
      80,
      220,
      220,
      220,
      220,
      220,
      10545,
      230,
      238,
      44165,
      233,
      33768,
      98,
      17312,
      253
    ],
    "start_token": 621,
    "end_token": 647,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      11315,
      284,
      493,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Explicit conversion to int for clarity"
  },
  {
    "line": 252,
    "text": "          ssdd      \u4e0a\u5e02\u5730\u70b9",
    "annotation": "\u2705 Best Practice: Use of specific exception type for error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37786,
      1860,
      220,
      220,
      220,
      220,
      220,
      220,
      41468,
      30585,
      224,
      28839,
      108,
      163,
      224,
      117
    ],
    "start_token": 647,
    "end_token": 672,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2176,
      6631,
      2099,
      329,
      4049,
      9041
    ],
    "label": "best_practice",
    "reason": "Use of specific exception type for error handling"
  },
  {
    "line": 256,
    "text": "          jjgm      \u57fa\u91d1\u89c4\u6a21(\u4ebf\u5143)",
    "annotation": "\u2705 Best Practice: Use of pandas DataFrame for structured data handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      474,
      73,
      39870,
      220,
      220,
      220,
      220,
      220,
      10263,
      253,
      118,
      34932,
      239,
      164,
      100,
      226,
      162,
      101,
      94,
      7,
      12859,
      123,
      17739,
      225,
      8
    ],
    "start_token": 672,
    "end_token": 706,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      6060,
      19778,
      329,
      20793,
      1366,
      9041
    ],
    "label": "best_practice",
    "reason": "Use of pandas DataFrame for structured data handling"
  },
  {
    "line": 258,
    "text": "          jjltfe    \u4e0a\u5e02\u6d41\u901a\u4efd\u989d(\u4ebf\u4efd)",
    "annotation": "\u2705 Best Practice: Setting index for DataFrame for better data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      474,
      73,
      2528,
      5036,
      220,
      220,
      220,
      220,
      41468,
      30585,
      224,
      38184,
      223,
      34460,
      248,
      20015,
      121,
      165,
      95,
      251,
      7,
      12859,
      123,
      20015,
      121,
      8
    ],
    "start_token": 706,
    "end_token": 741,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      6376,
      329,
      6060,
      19778,
      329,
      1365,
      1366,
      17512
    ],
    "label": "best_practice",
    "reason": "Setting index for DataFrame for better data manipulation"
  },
  {
    "line": 252,
    "text": "          ssdd      \u4e0a\u5e02\u5730\u70b9",
    "annotation": "\u2705 Best Practice: Function name suggests it's a private function, which is a good practice for internal utility functions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      37786,
      1860,
      220,
      220,
      220,
      220,
      220,
      220,
      41468,
      30585,
      224,
      28839,
      108,
      163,
      224,
      117
    ],
    "start_token": 741,
    "end_token": 766,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      5644,
      340,
      338,
      257,
      2839,
      2163,
      11,
      543,
      318,
      257,
      922,
      3357,
      329,
      5387,
      10361,
      5499,
      13
    ],
    "label": "best_practice",
    "reason": "Function name suggests it's a private function, which is a good practice for internal utility functions."
  },
  {
    "line": 254,
    "text": "          Type2Name \u57fa\u91d1\u7c7b\u578b",
    "annotation": "\ud83e\udde0 ML Signal: Logging or console writing can be a signal for error handling or debugging patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5994,
      17,
      5376,
      10263,
      253,
      118,
      34932,
      239,
      163,
      109,
      119,
      161,
      252,
      233
    ],
    "start_token": 766,
    "end_token": 789,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      393,
      8624,
      3597,
      460,
      307,
      257,
      6737,
      329,
      4049,
      9041,
      393,
      28769,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Logging or console writing can be a signal for error handling or debugging patterns."
  },
  {
    "line": 257,
    "text": "          jjfe      \u57fa\u91d1\u603b\u4efd\u989d(\u4ebf\u4efd)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): URL input is not validated or sanitized, which can lead to SSRF or other injection attacks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      474,
      73,
      5036,
      220,
      220,
      220,
      220,
      220,
      10263,
      253,
      118,
      34932,
      239,
      45250,
      119,
      20015,
      121,
      165,
      95,
      251,
      7,
      12859,
      123,
      20015,
      121,
      8
    ],
    "start_token": 789,
    "end_token": 824,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      10289,
      5128,
      318,
      407,
      31031,
      393,
      5336,
      36951,
      11,
      543,
      460,
      1085,
      284,
      6723,
      32754,
      393,
      584,
      16954,
      3434,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "URL input is not validated or sanitized, which can lead to SSRF or other injection attacks."
  },
  {
    "line": 259,
    "text": "          jjferq    \u57fa\u91d1\u4efd\u989d\u65e5\u671f",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No validation on the response content, which could lead to processing unexpected data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      474,
      73,
      2232,
      80,
      220,
      220,
      220,
      10263,
      253,
      118,
      34932,
      239,
      20015,
      121,
      165,
      95,
      251,
      33768,
      98,
      17312,
      253
    ],
    "start_token": 824,
    "end_token": 854,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      21201,
      319,
      262,
      2882,
      2695,
      11,
      543,
      714,
      1085,
      284,
      7587,
      10059,
      1366,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No validation on the response content, which could lead to processing unexpected data."
  },
  {
    "line": 263,
    "text": "    '''",
    "annotation": "\u2705 Best Practice: Conditional check for Python version compatibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      705,
      7061
    ],
    "start_token": 854,
    "end_token": 859,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9724,
      1859,
      2198,
      329,
      11361,
      2196,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Conditional check for Python version compatibility."
  },
  {
    "line": 265,
    "text": "        ct.P_TYPE['http'], ct.DOMAINS['ssf'], code)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Splitting strings without validation can lead to unexpected errors if the format changes.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357,
      269,
      83,
      13,
      39170,
      32,
      20913,
      17816,
      824,
      69,
      6,
      4357,
      2438,
      8
    ],
    "start_token": 859,
    "end_token": 889,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      13341,
      2535,
      13042,
      1231,
      21201,
      460,
      1085,
      284,
      10059,
      8563,
      611,
      262,
      5794,
      2458,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Splitting strings without validation can lead to unexpected errors if the format changes."
  },
  {
    "line": 266,
    "text": "    text = urlopen(request, timeout=10).read()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Regular expressions can be computationally expensive and should be used judiciously.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2420,
      796,
      19016,
      9654,
      7,
      25927,
      11,
      26827,
      28,
      940,
      737,
      961,
      3419
    ],
    "start_token": 889,
    "end_token": 905,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      23603,
      14700,
      460,
      307,
      2653,
      15208,
      5789,
      290,
      815,
      307,
      973,
      2553,
      6243,
      306,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Regular expressions can be computationally expensive and should be used judiciously."
  },
  {
    "line": 272,
    "text": "        status = str(org_js['result']['status']['msg'])",
    "annotation": "\u2705 Best Practice: Conditional check for Python version compatibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3722,
      796,
      965,
      7,
      2398,
      62,
      8457,
      17816,
      20274,
      6,
      7131,
      6,
      13376,
      6,
      7131,
      6,
      19662,
      6,
      12962
    ],
    "start_token": 905,
    "end_token": 931,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9724,
      1859,
      2198,
      329,
      11361,
      2196,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Conditional check for Python version compatibility."
  },
  {
    "line": 277,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Loading JSON without validation can lead to processing malicious data.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 931,
    "end_token": 931,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      12320,
      19449,
      1231,
      21201,
      460,
      1085,
      284,
      7587,
      17412,
      1366,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Loading JSON without validation can lead to processing malicious data."
  },
  {
    "line": 280,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of pandas DataFrame indicates data processing or analysis tasks.",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 931,
    "end_token": 931,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19798,
      292,
      6060,
      19778,
      9217,
      1366,
      7587,
      393,
      3781,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of pandas DataFrame indicates data processing or analysis tasks."
  },
  {
    "line": 282,
    "text": "",
    "annotation": "\u2705 Best Practice: Filling NaN values to ensure data consistency.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 931,
    "end_token": 931,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      376,
      4509,
      11013,
      45,
      3815,
      284,
      4155,
      1366,
      15794,
      13
    ],
    "label": "best_practice",
    "reason": "Filling NaN values to ensure data consistency."
  },
  {
    "line": 286,
    "text": "        request = Request(url)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide specific errors and make debugging difficult.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      796,
      19390,
      7,
      6371,
      8
    ],
    "start_token": 931,
    "end_token": 944,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      2176,
      8563,
      290,
      787,
      28769,
      2408,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide specific errors and make debugging difficult."
  },
  {
    "line": 276,
    "text": "    fund_df = fund_df.set_index('symbol')",
    "annotation": "\u2705 Best Practice: Function name should be descriptive and follow snake_case convention",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1814,
      62,
      7568,
      796,
      1814,
      62,
      7568,
      13,
      2617,
      62,
      9630,
      10786,
      1837,
      23650,
      11537
    ],
    "start_token": 944,
    "end_token": 962,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      815,
      307,
      35644,
      290,
      1061,
      17522,
      62,
      7442,
      9831
    ],
    "label": "best_practice",
    "reason": "Function name should be descriptive and follow snake_case convention"
  },
  {
    "line": 281,
    "text": "def _parse_fund_data(url, fund_type='open'):",
    "annotation": "\ud83e\udde0 ML Signal: Logging or console output can be used to track function usage",
    "confidence": 1.0,
    "tokens": [
      4299,
      4808,
      29572,
      62,
      10990,
      62,
      7890,
      7,
      6371,
      11,
      1814,
      62,
      4906,
      11639,
      9654,
      6,
      2599
    ],
    "start_token": 962,
    "end_token": 979,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      393,
      8624,
      5072,
      460,
      307,
      973,
      284,
      2610,
      2163,
      8748
    ],
    "label": "ml_signal",
    "reason": "Logging or console output can be used to track function usage"
  },
  {
    "line": 284,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No validation or sanitization of the URL input",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 979,
    "end_token": 979,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      21201,
      393,
      5336,
      270,
      1634,
      286,
      262,
      10289,
      5128
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No validation or sanitization of the URL input"
  },
  {
    "line": 286,
    "text": "        request = Request(url)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No exception handling for network-related errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      796,
      19390,
      7,
      6371,
      8
    ],
    "start_token": 979,
    "end_token": 992,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      6631,
      9041,
      329,
      3127,
      12,
      5363,
      8563
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No exception handling for network-related errors"
  },
  {
    "line": 288,
    "text": "        text = urlopen(request, timeout=10).read()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded character encoding may lead to issues with different encodings",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2420,
      796,
      19016,
      9654,
      7,
      25927,
      11,
      26827,
      28,
      940,
      737,
      961,
      3419
    ],
    "start_token": 992,
    "end_token": 1012,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      2095,
      21004,
      743,
      1085,
      284,
      2428,
      351,
      1180,
      2207,
      375,
      654
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded character encoding may lead to issues with different encodings"
  },
  {
    "line": 291,
    "text": "        text = text.decode('gbk') if ct.PY3 else text",
    "annotation": "\u2705 Best Practice: Raising specific exceptions for error conditions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2420,
      796,
      2420,
      13,
      12501,
      1098,
      10786,
      22296,
      74,
      11537,
      611,
      269,
      83,
      13,
      47,
      56,
      18,
      2073,
      2420
    ],
    "start_token": 1012,
    "end_token": 1038,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7567,
      1710,
      2176,
      13269,
      329,
      4049,
      3403
    ],
    "label": "best_practice",
    "reason": "Raising specific exceptions for error conditions"
  },
  {
    "line": 293,
    "text": "        reg = re.compile(r'\\,(.*?)\\:')",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes specific format of the text, which may lead to IndexError",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      842,
      796,
      302,
      13,
      5589,
      576,
      7,
      81,
      6,
      59,
      11,
      7,
      15885,
      10091,
      59,
      25,
      11537
    ],
    "start_token": 1038,
    "end_token": 1062,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      2176,
      5794,
      286,
      262,
      2420,
      11,
      543,
      743,
      1085,
      284,
      12901,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes specific format of the text, which may lead to IndexError"
  },
  {
    "line": 294,
    "text": "        text = reg.sub(r',\"\\1\":', text)",
    "annotation": "\u2705 Best Practice: Use of regular expressions for string manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2420,
      796,
      842,
      13,
      7266,
      7,
      81,
      40264,
      59,
      16,
      1298,
      3256,
      2420,
      8
    ],
    "start_token": 1062,
    "end_token": 1083,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      3218,
      14700,
      329,
      4731,
      17512
    ],
    "label": "best_practice",
    "reason": "Use of regular expressions for string manipulation"
  },
  {
    "line": 298,
    "text": "            jstr = json.dumps(text)",
    "annotation": "\u2705 Best Practice: Consistent use of string replacement for JSON formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      474,
      2536,
      796,
      33918,
      13,
      67,
      8142,
      7,
      5239,
      8
    ],
    "start_token": 1083,
    "end_token": 1104,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3515,
      7609,
      779,
      286,
      4731,
      9014,
      329,
      19449,
      33313
    ],
    "label": "best_practice",
    "reason": "Consistent use of string replacement for JSON formatting"
  },
  {
    "line": 303,
    "text": "                               columns=ct.NAV_COLUMNS[fund_type])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No error handling for JSON decoding errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      28,
      310,
      13,
      4535,
      53,
      62,
      25154,
      5883,
      8035,
      58,
      10990,
      62,
      4906,
      12962
    ],
    "start_token": 1104,
    "end_token": 1149,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      4049,
      9041,
      329,
      19449,
      39938,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No error handling for JSON decoding errors"
  },
  {
    "line": 303,
    "text": "                               columns=ct.NAV_COLUMNS[fund_type])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes \"total_num\" key is always present in the JSON",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      28,
      310,
      13,
      4535,
      53,
      62,
      25154,
      5883,
      8035,
      58,
      10990,
      62,
      4906,
      12962
    ],
    "start_token": 1149,
    "end_token": 1194,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      366,
      23350,
      62,
      22510,
      1,
      1994,
      318,
      1464,
      1944,
      287,
      262,
      19449
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes \"total_num\" key is always present in the JSON"
  },
  {
    "line": 305,
    "text": "        return fund_df",
    "annotation": "\u2705 Best Practice: Explicit conversion to integer",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1814,
      62,
      7568
    ],
    "start_token": 1194,
    "end_token": 1205,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      11315,
      284,
      18253
    ],
    "label": "best_practice",
    "reason": "Explicit conversion to integer"
  },
  {
    "line": 309,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Generic exception handling; specific exceptions should be caught",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1205,
    "end_token": 1205,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42044,
      6631,
      9041,
      26,
      2176,
      13269,
      815,
      307,
      4978
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Generic exception handling; specific exceptions should be caught"
  },
  {
    "line": 309,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Error logging can be used to identify common failure points",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1205,
    "end_token": 1205,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      13047,
      18931,
      460,
      307,
      973,
      284,
      5911,
      2219,
      5287,
      2173
    ],
    "label": "ml_signal",
    "reason": "Error logging can be used to identify common failure points"
  },
  {
    "line": 303,
    "text": "                               columns=ct.NAV_COLUMNS[fund_type])",
    "annotation": "\ud83e\udde0 ML Signal: Logging or console output can be used to track function usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      15180,
      28,
      310,
      13,
      4535,
      53,
      62,
      25154,
      5883,
      8035,
      58,
      10990,
      62,
      4906,
      12962
    ],
    "start_token": 1205,
    "end_token": 1250,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5972,
      2667,
      393,
      8624,
      5072,
      460,
      307,
      973,
      284,
      2610,
      2163,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Logging or console output can be used to track function usage patterns"
  },
  {
    "line": 305,
    "text": "        return fund_df",
    "annotation": "\ud83e\udde0 ML Signal: Conditional URL construction based on input parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1814,
      62,
      7568
    ],
    "start_token": 1250,
    "end_token": 1261,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      10289,
      5103,
      1912,
      319,
      5128,
      10007
    ],
    "label": "ml_signal",
    "reason": "Conditional URL construction based on input parameters"
  },
  {
    "line": 312,
    "text": "        \u83b7\u53d6\u57fa\u91d1\u6570\u91cf",
    "annotation": "\ud83e\udde0 ML Signal: Conditional URL construction based on input parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5525,
      236,
      115,
      20998,
      244,
      161,
      253,
      118,
      34932,
      239,
      46763,
      108,
      34932,
      237
    ],
    "start_token": 1261,
    "end_token": 1282,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      10289,
      5103,
      1912,
      319,
      5128,
      10007
    ],
    "label": "ml_signal",
    "reason": "Conditional URL construction based on input parameters"
  },
  {
    "line": 315,
    "text": "    ct._write_console()",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Network operation without exception handling can lead to unhandled exceptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      269,
      83,
      13557,
      13564,
      62,
      41947,
      3419
    ],
    "start_token": 1282,
    "end_token": 1292,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7311,
      4905,
      1231,
      6631,
      9041,
      460,
      1085,
      284,
      555,
      38788,
      13269
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Network operation without exception handling can lead to unhandled exceptions"
  },
  {
    "line": 317,
    "text": "        request = Request(url)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded character encoding may lead to issues with different encodings",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      796,
      19390,
      7,
      6371,
      8
    ],
    "start_token": 1292,
    "end_token": 1305,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      2095,
      21004,
      743,
      1085,
      284,
      2428,
      351,
      1180,
      2207,
      375,
      654
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded character encoding may lead to issues with different encodings"
  },
  {
    "line": 319,
    "text": "        text = text.decode('gbk')",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): json.loads can raise exceptions if the input is not valid JSON",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2420,
      796,
      2420,
      13,
      12501,
      1098,
      10786,
      22296,
      74,
      11537
    ],
    "start_token": 1305,
    "end_token": 1322,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      33918,
      13,
      46030,
      460,
      5298,
      13269,
      611,
      262,
      5128,
      318,
      407,
      4938,
      19449
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "json.loads can raise exceptions if the input is not valid JSON"
  },
  {
    "line": 321,
    "text": "            raise ValueError('get fund num error')",
    "annotation": "\u2705 Best Practice: Use constants or enums for status codes to improve readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5298,
      11052,
      12331,
      10786,
      1136,
      1814,
      997,
      4049,
      11537
    ],
    "start_token": 1322,
    "end_token": 1342,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      38491,
      393,
      551,
      5700,
      329,
      3722,
      12416,
      284,
      2987,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use constants or enums for status codes to improve readability"
  },
  {
    "line": 324,
    "text": "        reg = re.compile(r'\\,(.*?)\\:')",
    "annotation": "\u2705 Best Practice: Use constants or enums for status messages to improve readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      842,
      796,
      302,
      13,
      5589,
      576,
      7,
      81,
      6,
      59,
      11,
      7,
      15885,
      10091,
      59,
      25,
      11537
    ],
    "start_token": 1342,
    "end_token": 1366,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      38491,
      393,
      551,
      5700,
      329,
      3722,
      6218,
      284,
      2987,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use constants or enums for status messages to improve readability"
  },
  {
    "line": 326,
    "text": "        text = text.replace('{total_num', '{\"total_num\"')",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic exception without context can make debugging difficult",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2420,
      796,
      2420,
      13,
      33491,
      10786,
      90,
      23350,
      62,
      22510,
      3256,
      705,
      4895,
      23350,
      62,
      22510,
      1,
      11537
    ],
    "start_token": 1366,
    "end_token": 1391,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      6631,
      1231,
      4732,
      460,
      787,
      28769,
      2408
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic exception without context can make debugging difficult"
  },
  {
    "line": 325,
    "text": "        text = reg.sub(r',\"\\1\":', text)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of time.sleep indicates a retry mechanism with pauses",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2420,
      796,
      842,
      13,
      7266,
      7,
      81,
      40264,
      59,
      16,
      1298,
      3256,
      2420,
      8
    ],
    "start_token": 1391,
    "end_token": 1412,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      640,
      13,
      42832,
      9217,
      257,
      1005,
      563,
      9030,
      351,
      37622
    ],
    "label": "ml_signal",
    "reason": "Usage of time.sleep indicates a retry mechanism with pauses"
  },
  {
    "line": 327,
    "text": "        text = text.replace('null', '0')",
    "annotation": "\ud83e\udde0 ML Signal: Custom console writing function usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2420,
      796,
      2420,
      13,
      33491,
      10786,
      8423,
      3256,
      705,
      15,
      11537
    ],
    "start_token": 1412,
    "end_token": 1430,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8562,
      8624,
      3597,
      2163,
      8748
    ],
    "label": "ml_signal",
    "reason": "Custom console writing function usage"
  },
  {
    "line": 328,
    "text": "        org_js = json.loads(text)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional URL formatting based on monetary flag",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8745,
      62,
      8457,
      796,
      33918,
      13,
      46030,
      7,
      5239,
      8
    ],
    "start_token": 1430,
    "end_token": 1447,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      10289,
      33313,
      1912,
      319,
      15331,
      6056
    ],
    "label": "ml_signal",
    "reason": "Conditional URL formatting based on monetary flag"
  },
  {
    "line": 338,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for network-related exceptions",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1447,
    "end_token": 1447,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      3127,
      12,
      5363,
      13269
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for network-related exceptions"
  },
  {
    "line": 340,
    "text": "        \u8d27\u5e01\u548c\u8bc1\u5238\u578b\u57fa\u91d1\u91c7\u7528\u7684url\u4e0d\u540c\uff0c\u9700\u8981\u589e\u52a0\u57fa\u91d1\u7c7b\u578b\u5224\u65ad",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'gbk' encoding without validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5525,
      112,
      100,
      30585,
      223,
      161,
      240,
      234,
      46237,
      223,
      26344,
      116,
      161,
      252,
      233,
      161,
      253,
      118,
      34932,
      239,
      34932,
      229,
      18796,
      101,
      21410,
      6371,
      38834,
      28938,
      234,
      171,
      120,
      234,
      165,
      250,
      222,
      17358,
      223,
      161,
      95,
      252,
      27950,
      254,
      161,
      253,
      118,
      34932,
      239,
      163,
      109,
      119,
      161,
      252,
      233,
      26344,
      97,
      23877,
      255
    ],
    "start_token": 1447,
    "end_token": 1511,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      22296,
      74,
      6,
      21004,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'gbk' encoding without validation"
  },
  {
    "line": 342,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): json.loads can raise exceptions if text is not valid JSON",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1511,
    "end_token": 1511,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      33918,
      13,
      46030,
      460,
      5298,
      13269,
      611,
      2420,
      318,
      407,
      4938,
      19449
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "json.loads can raise exceptions if text is not valid JSON"
  },
  {
    "line": 344,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'result' and 'status' keys exist in JSON",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1511,
    "end_token": 1511,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      20274,
      6,
      290,
      705,
      13376,
      6,
      8251,
      2152,
      287,
      19449
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'result' and 'status' keys exist in JSON"
  },
  {
    "line": 347,
    "text": "                          (ct.P_TYPE['http'], ct.DOMAINS['ssf'],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raises generic ValueError without specific error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      357,
      310,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357,
      269,
      83,
      13,
      39170,
      32,
      20913,
      17816,
      824,
      69,
      6,
      4357
    ],
    "start_token": 1511,
    "end_token": 1557,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      2696,
      14276,
      11052,
      12331,
      1231,
      2176,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raises generic ValueError without specific error handling"
  },
  {
    "line": 350,
    "text": "        request = Request(ct.SINA_NAV_HISTROY_COUNT_URL %",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'data' key exists in JSON",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      796,
      19390,
      7,
      310,
      13,
      50,
      28893,
      62,
      4535,
      53,
      62,
      39,
      1797,
      5446,
      21414,
      62,
      34,
      28270,
      62,
      21886,
      4064
    ],
    "start_token": 1557,
    "end_token": 1586,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      7890,
      6,
      1994,
      7160,
      287,
      19449
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'data' key exists in JSON"
  },
  {
    "line": 353,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: DataFrame creation with specific columns",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1586,
    "end_token": 1586,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      19778,
      6282,
      351,
      2176,
      15180
    ],
    "label": "ml_signal",
    "reason": "DataFrame creation with specific columns"
  },
  {
    "line": 355,
    "text": "    text = text.decode('gbk')",
    "annotation": "\u2705 Best Practice: Explicit type conversion for DataFrame columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2420,
      796,
      2420,
      13,
      12501,
      1098,
      10786,
      22296,
      74,
      11537
    ],
    "start_token": 1586,
    "end_token": 1599,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      2099,
      11315,
      329,
      6060,
      19778,
      15180
    ],
    "label": "best_practice",
    "reason": "Explicit type conversion for DataFrame columns"
  },
  {
    "line": 358,
    "text": "    if status_code != 0:",
    "annotation": "\u2705 Best Practice: Use of rename for DataFrame column consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      3722,
      62,
      8189,
      14512,
      657,
      25
    ],
    "start_token": 1599,
    "end_token": 1609,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      36265,
      329,
      6060,
      19778,
      5721,
      15794
    ],
    "label": "best_practice",
    "reason": "Use of rename for DataFrame column consistency"
  },
  {
    "line": 361,
    "text": "    nums = org_js['result']['data']['total_num']",
    "annotation": "\u2705 Best Practice: Check for deprecated dtype usage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      997,
      82,
      796,
      8745,
      62,
      8457,
      17816,
      20274,
      6,
      7131,
      6,
      7890,
      6,
      7131,
      6,
      23350,
      62,
      22510,
      20520
    ],
    "start_token": 1609,
    "end_token": 1631,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      39224,
      288,
      4906,
      8748
    ],
    "label": "best_practice",
    "reason": "Check for deprecated dtype usage"
  },
  {
    "line": 361,
    "text": "    nums = org_js['result']['data']['total_num']",
    "annotation": "\u2705 Best Practice: Use of to_datetime for date conversion",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      997,
      82,
      796,
      8745,
      62,
      8457,
      17816,
      20274,
      6,
      7131,
      6,
      7890,
      6,
      7131,
      6,
      23350,
      62,
      22510,
      20520
    ],
    "start_token": 1631,
    "end_token": 1653,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      284,
      62,
      19608,
      8079,
      329,
      3128,
      11315
    ],
    "label": "best_practice",
    "reason": "Use of to_datetime for date conversion"
  },
  {
    "line": 361,
    "text": "    nums = org_js['result']['data']['total_num']",
    "annotation": "\u2705 Best Practice: Setting DataFrame index for time series data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      997,
      82,
      796,
      8745,
      62,
      8457,
      17816,
      20274,
      6,
      7131,
      6,
      7890,
      6,
      7131,
      6,
      23350,
      62,
      22510,
      20520
    ],
    "start_token": 1653,
    "end_token": 1675,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      6060,
      19778,
      6376,
      329,
      640,
      2168,
      1366
    ],
    "label": "best_practice",
    "reason": "Setting DataFrame index for time series data"
  },
  {
    "line": 361,
    "text": "    nums = org_js['result']['data']['total_num']",
    "annotation": "\u2705 Best Practice: Sorting DataFrame for chronological order",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      997,
      82,
      796,
      8745,
      62,
      8457,
      17816,
      20274,
      6,
      7131,
      6,
      7890,
      6,
      7131,
      6,
      23350,
      62,
      22510,
      20520
    ],
    "start_token": 1675,
    "end_token": 1697,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      6060,
      19778,
      329,
      45946,
      1502
    ],
    "label": "best_practice",
    "reason": "Sorting DataFrame for chronological order"
  },
  {
    "line": 361,
    "text": "    nums = org_js['result']['data']['total_num']",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of previous value and change percentage",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      997,
      82,
      796,
      8745,
      62,
      8457,
      17816,
      20274,
      6,
      7131,
      6,
      7890,
      6,
      7131,
      6,
      23350,
      62,
      22510,
      20520
    ],
    "start_token": 1697,
    "end_token": 1719,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      2180,
      1988,
      290,
      1487,
      5873
    ],
    "label": "ml_signal",
    "reason": "Calculation of previous value and change percentage"
  },
  {
    "line": 361,
    "text": "    nums = org_js['result']['data']['total_num']",
    "annotation": "\u2705 Best Practice: Dropping unnecessary columns after computation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      997,
      82,
      796,
      8745,
      62,
      8457,
      17816,
      20274,
      6,
      7131,
      6,
      7890,
      6,
      7131,
      6,
      23350,
      62,
      22510,
      20520
    ],
    "start_token": 1719,
    "end_token": 1741,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      13114,
      15180,
      706,
      29964
    ],
    "label": "best_practice",
    "reason": "Dropping unnecessary columns after computation"
  },
  {
    "line": 361,
    "text": "    nums = org_js['result']['data']['total_num']",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raises IOError with a generic error message",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      997,
      82,
      796,
      8745,
      62,
      8457,
      17816,
      20274,
      6,
      7131,
      6,
      7890,
      6,
      7131,
      6,
      23350,
      62,
      22510,
      20520
    ],
    "start_token": 1741,
    "end_token": 1763,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      2696,
      24418,
      12331,
      351,
      257,
      14276,
      4049,
      3275
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raises IOError with a generic error message"
  }
]
annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Usage of JSON library for data serialization/deserialization,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19449, 5888, 329, 1366, 11389, 1634, 14, 8906, 48499, 1634]",0.5,8,ml_signal,8,Usage of JSON library for data serialization/deserialization,,0,@group : tushare.pro,"[31, 8094, 1058, 256, 1530, 533, 13, 1676]"
üß† ML Signal: Usage of functools for higher-order functions,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1257, 310, 10141, 329, 2440, 12, 2875, 5499]",0.5,8,ml_signal,10,Usage of functools for higher-order functions,,8,,[]
üß† ML Signal: Usage of requests library for HTTP requests,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7007, 5888, 329, 14626, 7007]",0.5,13,ml_signal,12,Usage of requests library for HTTP requests,,8,import simplejson as json,"[11748, 2829, 17752, 355, 33918]"
‚ö†Ô∏è SAST Risk (Medium): Storing sensitive information like tokens in class variables can lead to security vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 520, 3255, 8564, 1321, 588, 16326, 287, 1398, 9633, 460, 1085, 284, 2324, 23805, 13]",1.0,19,sast_risk,11,Storing sensitive information like tokens in class variables can lead to security vulnerabilities.,Medium,13,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
‚úÖ Best Practice: Consider using environment variables or secure vaults to manage sensitive information.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 2858, 9633, 393, 5713, 410, 13185, 284, 6687, 8564, 1321, 13]",1.0,24,best_practice,12,Consider using environment variables or secure vaults to manage sensitive information.,,19,import simplejson as json,"[11748, 2829, 17752, 355, 33918]"
‚ö†Ô∏è SAST Risk (Medium): Using HTTP instead of HTTPS can expose data to interception and man-in-the-middle attacks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 14626, 2427, 286, 38288, 460, 15651, 1366, 284, 28759, 290, 582, 12, 259, 12, 1169, 12, 27171, 3434, 13]",1.0,26,sast_risk,14,Using HTTP instead of HTTPS can expose data to interception and man-in-the-middle attacks.,Medium,24,import requests,"[11748, 7007]"
"üß† ML Signal: Constructor method with parameters, useful for model training on class instantiation patterns","[8582, 100, 254, 10373, 26484, 25, 28407, 273, 2446, 351, 10007, 11, 4465, 329, 2746, 3047, 319, 1398, 9113, 3920, 7572]",0.5,26,ml_signal,15,"Constructor method with parameters, useful for model training on class instantiation patterns",,26,,[]
‚úÖ Best Practice: Use of default parameter values for flexibility and ease of use,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 329, 13688, 290, 10152, 286, 779]",0.5,26,best_practice,15,Use of default parameter values for flexibility and ease of use,,26,,[]
‚úÖ Best Practice: Use of docstring to describe parameters and their purpose,"[26486, 227, 6705, 19939, 25, 5765, 286, 2205, 8841, 284, 6901, 10007, 290, 511, 4007]",0.5,34,best_practice,23,Use of docstring to describe parameters and their purpose,,26,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Use of double underscore for private variable to indicate intended private access,"[26486, 227, 6705, 19939, 25, 5765, 286, 4274, 44810, 329, 2839, 7885, 284, 7603, 5292, 2839, 1895]",0.5,42,best_practice,24,Use of double underscore for private variable to indicate intended private access,,34,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
‚úÖ Best Practice: Use of double underscore for private variable to indicate intended private access,"[26486, 227, 6705, 19939, 25, 5765, 286, 4274, 44810, 329, 2839, 7885, 284, 7603, 5292, 2839, 1895]",0.5,50,best_practice,24,Use of double underscore for private variable to indicate intended private access,,42,        Parameters,"[220, 220, 220, 220, 220, 220, 220, 40117]"
üß† ML Signal: Method signature with variable arguments can indicate flexible API usage patterns,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 351, 7885, 7159, 460, 7603, 12846, 7824, 8748, 7572]",0.5,58,ml_signal,23,Method signature with variable arguments can indicate flexible API usage patterns,,50,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Medium): Potential exposure of sensitive information if __token is not handled securely,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 7111, 286, 8564, 1321, 611, 11593, 30001, 318, 407, 12118, 30835]",0.5,58,sast_risk,31,Potential exposure of sensitive information if __token is not handled securely,Medium,58,,[]
‚ö†Ô∏è SAST Risk (Medium): No validation or sanitization of input parameters before making the request,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 393, 5336, 270, 1634, 286, 5128, 10007, 878, 1642, 262, 2581]",0.5,77,sast_risk,32,No validation or sanitization of input parameters before making the request,Medium,58,"    def query(self, api_name, fields='', **kwargs):","[220, 220, 220, 825, 12405, 7, 944, 11, 40391, 62, 3672, 11, 7032, 11639, 3256, 12429, 46265, 22046, 2599]"
‚ö†Ô∏è SAST Risk (Medium): No error handling for network issues or request failures,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 4049, 9041, 329, 3127, 2428, 393, 2581, 15536]",1.0,97,sast_risk,34,No error handling for network issues or request failures,Medium,77,"            'api_name': api_name,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 15042, 62, 3672, 10354, 40391, 62, 3672, 11]"
‚ö†Ô∏è SAST Risk (Low): Assumes 'code' and 'msg' keys are always present in the response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 8189, 6, 290, 705, 19662, 6, 8251, 389, 1464, 1944, 287, 262, 2882]",0.5,115,sast_risk,36,Assumes 'code' and 'msg' keys are always present in the response,Low,97,"            'params': kwargs,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 37266, 10354, 479, 86, 22046, 11]"
‚ö†Ô∏è SAST Risk (Low): Assumes 'fields' and 'items' keys are always present in the response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 25747, 6, 290, 705, 23814, 6, 8251, 389, 1464, 1944, 287, 262, 2882]",0.5,115,sast_risk,39,Assumes 'fields' and 'items' keys are always present in the response,Low,115,,[]
‚úÖ Best Practice: Returning a DataFrame directly can be efficient for data manipulation,"[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 3264, 460, 307, 6942, 329, 1366, 17512]",0.5,115,best_practice,39,Returning a DataFrame directly can be efficient for data manipulation,,115,,[]
"‚úÖ Best Practice: Use of __getattr__ allows for dynamic attribute access, enhancing flexibility.","[26486, 227, 6705, 19939, 25, 5765, 286, 11593, 1136, 35226, 834, 3578, 329, 8925, 11688, 1895, 11, 27496, 13688, 13]",1.0,123,best_practice,38,"Use of __getattr__ allows for dynamic attribute access, enhancing flexibility.",,115,        },"[220, 220, 220, 220, 220, 220, 220, 1782]"
üß† ML Signal: Dynamic attribute access pattern can be used to infer usage of flexible APIs.,"[8582, 100, 254, 10373, 26484, 25, 26977, 11688, 1895, 3912, 460, 307, 973, 284, 13249, 8748, 286, 12846, 23113, 13]",0.5,123,ml_signal,39,Dynamic attribute access pattern can be used to infer usage of flexible APIs.,,123,,[]
"‚úÖ Best Practice: Use of functools.partial to pre-fill arguments in function calls, improving code reusability.","[26486, 227, 6705, 19939, 25, 5765, 286, 1257, 310, 10141, 13, 47172, 284, 662, 12, 20797, 7159, 287, 2163, 3848, 11, 10068, 2438, 302, 385, 1799, 13]",1.0,123,best_practice,39,"Use of functools.partial to pre-fill arguments in function calls, improving code reusability.",,123,,[]

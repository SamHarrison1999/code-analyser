[
  {
    "line": 8,
    "text": "\"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package indicates usage patterns and dependencies",
    "confidence": 0.5,
    "tokens": [
      37811
    ],
    "start_token": 0,
    "end_token": 1,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301,
      9217,
      8748,
      7572,
      290,
      20086
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package indicates usage patterns and dependencies"
  },
  {
    "line": 10,
    "text": "from tushare.util import upass",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package indicates usage patterns and dependencies",
    "confidence": 0.5,
    "tokens": [
      6738,
      256,
      1530,
      533,
      13,
      22602,
      1330,
      510,
      562
    ],
    "start_token": 1,
    "end_token": 10,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301,
      9217,
      8748,
      7572,
      290,
      20086
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package indicates usage patterns and dependencies"
  },
  {
    "line": 12,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package indicates usage patterns and dependencies",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 10,
    "end_token": 10,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301,
      9217,
      8748,
      7572,
      290,
      20086
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package indicates usage patterns and dependencies"
  },
  {
    "line": 13,
    "text": "PRICE_COLS = ['open', 'close', 'high', 'low', 'pre_close']",
    "annotation": "\ud83e\udde0 ML Signal: Defining constants for column names indicates common data structure usage",
    "confidence": 0.5,
    "tokens": [
      4805,
      8476,
      62,
      25154,
      50,
      796,
      37250,
      9654,
      3256,
      705,
      19836,
      3256,
      705,
      8929,
      3256,
      705,
      9319,
      3256,
      705,
      3866,
      62,
      19836,
      20520
    ],
    "start_token": 10,
    "end_token": 33,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2896,
      3191,
      38491,
      329,
      5721,
      3891,
      9217,
      2219,
      1366,
      4645,
      8748
    ],
    "label": "ml_signal",
    "reason": "Defining constants for column names indicates common data structure usage"
  },
  {
    "line": 17,
    "text": "         'Y': '1YEAR',",
    "annotation": "\u2705 Best Practice: Use of lambda for simple formatting function improves readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      56,
      10354,
      705,
      16,
      56,
      17133,
      3256
    ],
    "start_token": 33,
    "end_token": 49,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      37456,
      329,
      2829,
      33313,
      2163,
      19575,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of lambda for simple formatting function improves readability"
  },
  {
    "line": 18,
    "text": "         }",
    "annotation": "\ud83e\udde0 ML Signal: Defining frequency mappings indicates common usage patterns for time series data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1782
    ],
    "start_token": 49,
    "end_token": 58,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2896,
      3191,
      8373,
      285,
      39242,
      9217,
      2219,
      8748,
      7572,
      329,
      640,
      2168,
      1366
    ],
    "label": "ml_signal",
    "reason": "Defining frequency mappings indicates common usage patterns for time series data"
  },
  {
    "line": 21,
    "text": "def pro_api(token=''):",
    "annotation": "\u2705 Best Practice: Use 'is None' for None checks to improve readability and avoid potential issues with falsy values.",
    "confidence": 1.0,
    "tokens": [
      4299,
      386,
      62,
      15042,
      7,
      30001,
      28,
      7061,
      2599
    ],
    "start_token": 58,
    "end_token": 67,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      271,
      6045,
      6,
      329,
      6045,
      8794,
      284,
      2987,
      1100,
      1799,
      290,
      3368,
      2785,
      2428,
      351,
      27807,
      88,
      3815,
      13
    ],
    "label": "best_practice",
    "reason": "Use 'is None' for None checks to improve readability and avoid potential issues with falsy values."
  },
  {
    "line": 23,
    "text": "    \u521d\u59cb\u5316pro API,\u7b2c\u4e00\u6b21\u53ef\u4ee5\u901a\u8fc7ts.set_token('your token')\u6765\u8bb0\u5f55\u81ea\u5df1\u7684token\u51ed\u8bc1\uff0c\u4e34\u65f6token\u53ef\u4ee5\u901a\u8fc7\u672c\u53c2\u6570\u4f20\u5165",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential exposure of sensitive information if upass.get_token() is not securely handled.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10263,
      230,
      251,
      34650,
      233,
      44293,
      244,
      1676,
      7824,
      11,
      163,
      105,
      105,
      31660,
      162,
      105,
      94,
      20998,
      107,
      20015,
      98,
      34460,
      248,
      32573,
      229,
      912,
      13,
      2617,
      62,
      30001,
      10786,
      14108,
      11241,
      11537,
      30266,
      98,
      164,
      106,
      108,
      37605,
      243,
      164,
      229,
      103,
      32432,
      109,
      21410,
      30001,
      49035,
      255,
      46237,
      223,
      171,
      120,
      234,
      10310,
      112,
      33768,
      114,
      30001,
      20998,
      107,
      20015,
      98,
      34460,
      248,
      32573,
      229,
      17312,
      105,
      20998,
      224,
      46763,
      108,
      27670,
      254,
      17739,
      98
    ],
    "start_token": 67,
    "end_token": 148,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      7111,
      286,
      8564,
      1321,
      611,
      510,
      562,
      13,
      1136,
      62,
      30001,
      3419,
      318,
      407,
      30835,
      12118,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential exposure of sensitive information if upass.get_token() is not securely handled."
  },
  {
    "line": 25,
    "text": "    if token == '' or token is None:",
    "annotation": "\u2705 Best Practice: Use 'is not None' for None checks to improve readability and avoid potential issues with falsy values.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      11241,
      6624,
      10148,
      393,
      11241,
      318,
      6045,
      25
    ],
    "start_token": 148,
    "end_token": 160,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      271,
      407,
      6045,
      6,
      329,
      6045,
      8794,
      284,
      2987,
      1100,
      1799,
      290,
      3368,
      2785,
      2428,
      351,
      27807,
      88,
      3815,
      13
    ],
    "label": "best_practice",
    "reason": "Use 'is not None' for None checks to improve readability and avoid potential issues with falsy values."
  },
  {
    "line": 27,
    "text": "    if token is not None and token != '':",
    "annotation": "\ud83e\udde0 ML Signal: Usage of client.DataApi with a token indicates a pattern for API initialization.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      11241,
      318,
      407,
      6045,
      290,
      11241,
      14512,
      10148,
      25
    ],
    "start_token": 160,
    "end_token": 173,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      5456,
      13,
      6601,
      32,
      14415,
      351,
      257,
      11241,
      9217,
      257,
      3912,
      329,
      7824,
      37588,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of client.DataApi with a token indicates a pattern for API initialization."
  },
  {
    "line": 28,
    "text": "        pro = client.DataApi(token)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Generic exception message may not provide enough context for debugging.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      386,
      796,
      5456,
      13,
      6601,
      32,
      14415,
      7,
      30001,
      8
    ],
    "start_token": 173,
    "end_token": 190,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42044,
      6631,
      3275,
      743,
      407,
      2148,
      1576,
      4732,
      329,
      28769,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Generic exception message may not provide enough context for debugging."
  },
  {
    "line": 60,
    "text": "    ----------",
    "annotation": "\u2705 Best Practice: Use of strip() and upper()/lower() to standardize input",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 190,
    "end_token": 195,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10283,
      3419,
      290,
      6727,
      3419,
      14,
      21037,
      3419,
      284,
      3210,
      1096,
      5128
    ],
    "label": "best_practice",
    "reason": "Use of strip() and upper()/lower() to standardize input"
  },
  {
    "line": 62,
    "text": "    code:\u4ee3\u7801",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential NoneType call if pro_api is None",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2438,
      25,
      47987,
      163,
      254,
      223
    ],
    "start_token": 195,
    "end_token": 204,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      6045,
      6030,
      869,
      611,
      386,
      62,
      15042,
      318,
      6045
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential NoneType call if pro_api is None"
  },
  {
    "line": 64,
    "text": "    ",
    "annotation": "\ud83e\udde0 ML Signal: Retry pattern for network operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220
    ],
    "start_token": 204,
    "end_token": 208,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      563,
      3912,
      329,
      3127,
      4560
    ],
    "label": "ml_signal",
    "reason": "Retry pattern for network operations"
  },
  {
    "line": 67,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of strip() and upper()/lower() to standardize input",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 208,
    "end_token": 212,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10283,
      3419,
      290,
      6727,
      3419,
      14,
      21037,
      3419,
      284,
      3210,
      1096,
      5128
    ],
    "label": "best_practice",
    "reason": "Use of strip() and upper()/lower() to standardize input"
  },
  {
    "line": 69,
    "text": "    api = pro_api if pro_api is not None else pro_api()",
    "annotation": "\u2705 Best Practice: Use of strip() and upper() to standardize input",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      40391,
      796,
      386,
      62,
      15042,
      611,
      386,
      62,
      15042,
      318,
      407,
      6045,
      2073,
      386,
      62,
      15042,
      3419
    ],
    "start_token": 212,
    "end_token": 232,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      10283,
      3419,
      290,
      6727,
      3419,
      284,
      3210,
      1096,
      5128
    ],
    "label": "best_practice",
    "reason": "Use of strip() and upper() to standardize input"
  },
  {
    "line": 73,
    "text": "            asset = asset.strip().upper()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on API response",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      11171,
      796,
      11171,
      13,
      36311,
      22446,
      45828,
      3419
    ],
    "start_token": 232,
    "end_token": 251,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      7824,
      2882
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on API response"
  },
  {
    "line": 76,
    "text": "                    df = api.daily(ts_code=ts_code, start_date=start_date, end_date=end_date)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on API response",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      40391,
      13,
      29468,
      7,
      912,
      62,
      8189,
      28,
      912,
      62,
      8189,
      11,
      923,
      62,
      4475,
      28,
      9688,
      62,
      4475,
      11,
      886,
      62,
      4475,
      28,
      437,
      62,
      4475,
      8
    ],
    "start_token": 251,
    "end_token": 300,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      7824,
      2882
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on API response"
  },
  {
    "line": 87,
    "text": "                if freq == 'W':",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on API response",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2030,
      80,
      6624,
      705,
      54,
      10354
    ],
    "start_token": 300,
    "end_token": 322,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      7824,
      2882
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on API response"
  },
  {
    "line": 89,
    "text": "                if freq == 'M':",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on API response",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2030,
      80,
      6624,
      705,
      44,
      10354
    ],
    "start_token": 322,
    "end_token": 344,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      7824,
      2882
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on API response"
  },
  {
    "line": 93,
    "text": "                    data = df.set_index('trade_date', drop=False).merge(fcts.set_index('trade_date'), left_index=True, right_index=True, how='left')",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on API response",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      47764,
      13,
      2617,
      62,
      9630,
      10786,
      25351,
      62,
      4475,
      3256,
      4268,
      28,
      25101,
      737,
      647,
      469,
      7,
      69,
      310,
      82,
      13,
      2617,
      62,
      9630,
      10786,
      25351,
      62,
      4475,
      33809,
      1364,
      62,
      9630,
      28,
      17821,
      11,
      826,
      62,
      9630,
      28,
      17821,
      11,
      703,
      11639,
      9464,
      11537
    ],
    "start_token": 344,
    "end_token": 410,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      7824,
      2882
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on API response"
  },
  {
    "line": 101,
    "text": "                    for col in PRICE_COLS:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      951,
      287,
      4810,
      8476,
      62,
      25154,
      50,
      25
    ],
    "start_token": 410,
    "end_token": 438,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero"
  },
  {
    "line": 113,
    "text": "                    data = api.fut_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on API response",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      40391,
      13,
      69,
      315,
      62,
      29468,
      7,
      912,
      62,
      8189,
      28,
      912,
      62,
      8189,
      11,
      923,
      62,
      67,
      3609,
      28,
      9688,
      62,
      4475,
      11,
      886,
      62,
      4475,
      28,
      437,
      62,
      4475,
      11,
      5163,
      28,
      1069,
      3803,
      8
    ],
    "start_token": 438,
    "end_token": 496,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      7824,
      2882
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on API response"
  },
  {
    "line": 117,
    "text": "            elif asset == 'FD':",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on API response",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      11171,
      6624,
      705,
      26009,
      10354
    ],
    "start_token": 496,
    "end_token": 514,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      7824,
      2882
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on API response"
  },
  {
    "line": 121,
    "text": "                if freq == 'd':",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on API response",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2030,
      80,
      6624,
      705,
      67,
      10354
    ],
    "start_token": 514,
    "end_token": 536,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      7824,
      2882
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on API response"
  },
  {
    "line": 125,
    "text": "                data = api.coinbar(exchange=exchange, symbol=ts_code, freq=freq, start_dae=start_date, end_date=end_date,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on API response",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      40391,
      13,
      3630,
      5657,
      7,
      1069,
      3803,
      28,
      1069,
      3803,
      11,
      6194,
      28,
      912,
      62,
      8189,
      11,
      2030,
      80,
      28,
      19503,
      80,
      11,
      923,
      62,
      67,
      3609,
      28,
      9688,
      62,
      4475,
      11,
      886,
      62,
      4475,
      28,
      437,
      62,
      4475,
      11
    ],
    "start_token": 536,
    "end_token": 593,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      7824,
      2882
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on API response"
  },
  {
    "line": 132,
    "text": "                        data['ma_v_%s'%a] = MA(data['vol'], a).map(FORMAT).shift(-(a-1))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on API response",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      17816,
      2611,
      62,
      85,
      62,
      4,
      82,
      6,
      4,
      64,
      60,
      796,
      8779,
      7,
      7890,
      17816,
      10396,
      6,
      4357,
      257,
      737,
      8899,
      7,
      21389,
      1404,
      737,
      30846,
      7,
      30420,
      64,
      12,
      16,
      4008
    ],
    "start_token": 593,
    "end_token": 650,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      7824,
      2882
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on API response"
  },
  {
    "line": 136,
    "text": "            print(e)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): No validation on MA function output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      68,
      8
    ],
    "start_token": 650,
    "end_token": 665,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      1400,
      21201,
      319,
      8779,
      2163,
      5072
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "No validation on MA function output"
  },
  {
    "line": 136,
    "text": "            print(e)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Generic exception handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      68,
      8
    ],
    "start_token": 665,
    "end_token": 680,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42044,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Generic exception handling"
  },
  {
    "line": 136,
    "text": "            print(e)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): IOError is too generic for network errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      68,
      8
    ],
    "start_token": 680,
    "end_token": 695,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      24418,
      12331,
      318,
      1165,
      14276,
      329,
      3127,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "IOError is too generic for network errors"
  },
  {
    "line": 136,
    "text": "            print(e)",
    "annotation": "\ud83e\udde0 ML Signal: Example usage pattern for the pro_bar function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      68,
      8
    ],
    "start_token": 695,
    "end_token": 710,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17934,
      8748,
      3912,
      329,
      262,
      386,
      62,
      5657,
      2163
    ],
    "label": "ml_signal",
    "reason": "Example usage pattern for the pro_bar function"
  }
]
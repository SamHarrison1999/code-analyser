annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific modules from a package indicates usage patterns and dependencies,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301, 9217, 8748, 7572, 290, 20086]",0.5,1,ml_signal,8,Importing specific modules from a package indicates usage patterns and dependencies,,0,"""""""",[37811]
üß† ML Signal: Importing specific modules from a package indicates usage patterns and dependencies,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301, 9217, 8748, 7572, 290, 20086]",0.5,10,ml_signal,10,Importing specific modules from a package indicates usage patterns and dependencies,,1,from tushare.util import upass,"[6738, 256, 1530, 533, 13, 22602, 1330, 510, 562]"
üß† ML Signal: Importing specific modules from a package indicates usage patterns and dependencies,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301, 9217, 8748, 7572, 290, 20086]",0.5,10,ml_signal,12,Importing specific modules from a package indicates usage patterns and dependencies,,10,,[]
üß† ML Signal: Defining constants for column names indicates common data structure usage,"[8582, 100, 254, 10373, 26484, 25, 2896, 3191, 38491, 329, 5721, 3891, 9217, 2219, 1366, 4645, 8748]",0.5,33,ml_signal,13,Defining constants for column names indicates common data structure usage,,10,"PRICE_COLS = ['open', 'close', 'high', 'low', 'pre_close']","[4805, 8476, 62, 25154, 50, 796, 37250, 9654, 3256, 705, 19836, 3256, 705, 8929, 3256, 705, 9319, 3256, 705, 3866, 62, 19836, 20520]"
‚úÖ Best Practice: Use of lambda for simple formatting function improves readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 37456, 329, 2829, 33313, 2163, 19575, 1100, 1799]",1.0,49,best_practice,17,Use of lambda for simple formatting function improves readability,,33,"         'Y': '1YEAR',","[220, 220, 220, 220, 220, 220, 220, 220, 705, 56, 10354, 705, 16, 56, 17133, 3256]"
üß† ML Signal: Defining frequency mappings indicates common usage patterns for time series data,"[8582, 100, 254, 10373, 26484, 25, 2896, 3191, 8373, 285, 39242, 9217, 2219, 8748, 7572, 329, 640, 2168, 1366]",0.5,58,ml_signal,18,Defining frequency mappings indicates common usage patterns for time series data,,49,         },"[220, 220, 220, 220, 220, 220, 220, 220, 1782]"
‚úÖ Best Practice: Use 'is None' for None checks to improve readability and avoid potential issues with falsy values.,"[26486, 227, 6705, 19939, 25, 5765, 705, 271, 6045, 6, 329, 6045, 8794, 284, 2987, 1100, 1799, 290, 3368, 2785, 2428, 351, 27807, 88, 3815, 13]",1.0,67,best_practice,21,Use 'is None' for None checks to improve readability and avoid potential issues with falsy values.,,58,def pro_api(token=''):,"[4299, 386, 62, 15042, 7, 30001, 28, 7061, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Potential exposure of sensitive information if upass.get_token() is not securely handled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 7111, 286, 8564, 1321, 611, 510, 562, 13, 1136, 62, 30001, 3419, 318, 407, 30835, 12118, 13]",1.0,148,sast_risk,23,Potential exposure of sensitive information if upass.get_token() is not securely handled.,Medium,67,"    ÂàùÂßãÂåñpro API,Á¨¨‰∏ÄÊ¨°ÂèØ‰ª•ÈÄöËøáts.set_token('your token')Êù•ËÆ∞ÂΩïËá™Â∑±ÁöÑtokenÂá≠ËØÅÔºå‰∏¥Êó∂tokenÂèØ‰ª•ÈÄöËøáÊú¨ÂèÇÊï∞‰º†ÂÖ•","[220, 220, 220, 10263, 230, 251, 34650, 233, 44293, 244, 1676, 7824, 11, 163, 105, 105, 31660, 162, 105, 94, 20998, 107, 20015, 98, 34460, 248, 32573, 229, 912, 13, 2617, 62, 30001, 10786, 14108, 11241, 11537, 30266, 98, 164, 106, 108, 37605, 243, 164, 229, 103, 32432, 109, 21410, 30001, 49035, 255, 46237, 223, 171, 120, 234, 10310, 112, 33768, 114, 30001, 20998, 107, 20015, 98, 34460, 248, 32573, 229, 17312, 105, 20998, 224, 46763, 108, 27670, 254, 17739, 98]"
‚úÖ Best Practice: Use 'is not None' for None checks to improve readability and avoid potential issues with falsy values.,"[26486, 227, 6705, 19939, 25, 5765, 705, 271, 407, 6045, 6, 329, 6045, 8794, 284, 2987, 1100, 1799, 290, 3368, 2785, 2428, 351, 27807, 88, 3815, 13]",1.0,160,best_practice,25,Use 'is not None' for None checks to improve readability and avoid potential issues with falsy values.,,148,    if token == '' or token is None:,"[220, 220, 220, 611, 11241, 6624, 10148, 393, 11241, 318, 6045, 25]"
üß† ML Signal: Usage of client.DataApi with a token indicates a pattern for API initialization.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 5456, 13, 6601, 32, 14415, 351, 257, 11241, 9217, 257, 3912, 329, 7824, 37588, 13]",0.5,173,ml_signal,27,Usage of client.DataApi with a token indicates a pattern for API initialization.,,160,    if token is not None and token != '':,"[220, 220, 220, 611, 11241, 318, 407, 6045, 290, 11241, 14512, 10148, 25]"
‚ö†Ô∏è SAST Risk (Low): Generic exception message may not provide enough context for debugging.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 3275, 743, 407, 2148, 1576, 4732, 329, 28769, 13]",1.0,190,sast_risk,28,Generic exception message may not provide enough context for debugging.,Low,173,        pro = client.DataApi(token),"[220, 220, 220, 220, 220, 220, 220, 386, 796, 5456, 13, 6601, 32, 14415, 7, 30001, 8]"
‚úÖ Best Practice: Use of strip() and upper()/lower() to standardize input,"[26486, 227, 6705, 19939, 25, 5765, 286, 10283, 3419, 290, 6727, 3419, 14, 21037, 3419, 284, 3210, 1096, 5128]",1.0,195,best_practice,60,Use of strip() and upper()/lower() to standardize input,,190,    ----------,"[220, 220, 220, 24200, 438]"
‚ö†Ô∏è SAST Risk (Low): Potential NoneType call if pro_api is None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 869, 611, 386, 62, 15042, 318, 6045]",1.0,204,sast_risk,62,Potential NoneType call if pro_api is None,Low,195,    code:‰ª£Á†Å,"[220, 220, 220, 2438, 25, 47987, 163, 254, 223]"
üß† ML Signal: Retry pattern for network operations,"[8582, 100, 254, 10373, 26484, 25, 4990, 563, 3912, 329, 3127, 4560]",1.0,208,ml_signal,64,Retry pattern for network operations,,204,    ,"[220, 220, 220, 220]"
‚úÖ Best Practice: Use of strip() and upper()/lower() to standardize input,"[26486, 227, 6705, 19939, 25, 5765, 286, 10283, 3419, 290, 6727, 3419, 14, 21037, 3419, 284, 3210, 1096, 5128]",1.0,212,best_practice,67,Use of strip() and upper()/lower() to standardize input,,208,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use of strip() and upper() to standardize input,"[26486, 227, 6705, 19939, 25, 5765, 286, 10283, 3419, 290, 6727, 3419, 284, 3210, 1096, 5128]",1.0,232,best_practice,69,Use of strip() and upper() to standardize input,,212,    api = pro_api if pro_api is not None else pro_api(),"[220, 220, 220, 40391, 796, 386, 62, 15042, 611, 386, 62, 15042, 318, 407, 6045, 2073, 386, 62, 15042, 3419]"
‚ö†Ô∏è SAST Risk (Low): No validation on API response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 7824, 2882]",0.5,251,sast_risk,73,No validation on API response,Low,232,            asset = asset.strip().upper(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 11171, 796, 11171, 13, 36311, 22446, 45828, 3419]"
‚ö†Ô∏è SAST Risk (Low): No validation on API response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 7824, 2882]",0.5,300,sast_risk,76,No validation on API response,Low,251,"                    df = api.daily(ts_code=ts_code, start_date=start_date, end_date=end_date)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 40391, 13, 29468, 7, 912, 62, 8189, 28, 912, 62, 8189, 11, 923, 62, 4475, 28, 9688, 62, 4475, 11, 886, 62, 4475, 28, 437, 62, 4475, 8]"
‚ö†Ô∏è SAST Risk (Low): No validation on API response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 7824, 2882]",0.5,322,sast_risk,87,No validation on API response,Low,300,                if freq == 'W':,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2030, 80, 6624, 705, 54, 10354]"
‚ö†Ô∏è SAST Risk (Low): No validation on API response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 7824, 2882]",0.5,344,sast_risk,89,No validation on API response,Low,322,                if freq == 'M':,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2030, 80, 6624, 705, 44, 10354]"
‚ö†Ô∏è SAST Risk (Low): No validation on API response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 7824, 2882]",0.5,410,sast_risk,93,No validation on API response,Low,344,"                    data = df.set_index('trade_date', drop=False).merge(fcts.set_index('trade_date'), left_index=True, right_index=True, how='left')","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 47764, 13, 2617, 62, 9630, 10786, 25351, 62, 4475, 3256, 4268, 28, 25101, 737, 647, 469, 7, 69, 310, 82, 13, 2617, 62, 9630, 10786, 25351, 62, 4475, 33809, 1364, 62, 9630, 28, 17821, 11, 826, 62, 9630, 28, 17821, 11, 703, 11639, 9464, 11537]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632]",0.5,438,sast_risk,101,Potential division by zero,Low,410,                    for col in PRICE_COLS:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 951, 287, 4810, 8476, 62, 25154, 50, 25]"
‚ö†Ô∏è SAST Risk (Low): No validation on API response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 7824, 2882]",0.5,496,sast_risk,113,No validation on API response,Low,438,"                    data = api.fut_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 40391, 13, 69, 315, 62, 29468, 7, 912, 62, 8189, 28, 912, 62, 8189, 11, 923, 62, 67, 3609, 28, 9688, 62, 4475, 11, 886, 62, 4475, 28, 437, 62, 4475, 11, 5163, 28, 1069, 3803, 8]"
‚ö†Ô∏è SAST Risk (Low): No validation on API response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 7824, 2882]",0.5,514,sast_risk,117,No validation on API response,Low,496,            elif asset == 'FD':,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1288, 361, 11171, 6624, 705, 26009, 10354]"
‚ö†Ô∏è SAST Risk (Low): No validation on API response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 7824, 2882]",0.5,536,sast_risk,121,No validation on API response,Low,514,                if freq == 'd':,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2030, 80, 6624, 705, 67, 10354]"
‚ö†Ô∏è SAST Risk (Low): No validation on API response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 7824, 2882]",0.5,593,sast_risk,125,No validation on API response,Low,536,"                data = api.coinbar(exchange=exchange, symbol=ts_code, freq=freq, start_dae=start_date, end_date=end_date,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 40391, 13, 3630, 5657, 7, 1069, 3803, 28, 1069, 3803, 11, 6194, 28, 912, 62, 8189, 11, 2030, 80, 28, 19503, 80, 11, 923, 62, 67, 3609, 28, 9688, 62, 4475, 11, 886, 62, 4475, 28, 437, 62, 4475, 11]"
‚ö†Ô∏è SAST Risk (Low): No validation on API response,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 7824, 2882]",0.5,650,sast_risk,132,No validation on API response,Low,593,"                        data['ma_v_%s'%a] = MA(data['vol'], a).map(FORMAT).shift(-(a-1))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 17816, 2611, 62, 85, 62, 4, 82, 6, 4, 64, 60, 796, 8779, 7, 7890, 17816, 10396, 6, 4357, 257, 737, 8899, 7, 21389, 1404, 737, 30846, 7, 30420, 64, 12, 16, 4008]"
‚ö†Ô∏è SAST Risk (Low): No validation on MA function output,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 8779, 2163, 5072]",0.5,665,sast_risk,136,No validation on MA function output,Low,650,            print(e),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 68, 8]"
‚ö†Ô∏è SAST Risk (Low): Generic exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041]",1.0,680,sast_risk,136,Generic exception handling,Low,665,            print(e),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 68, 8]"
‚ö†Ô∏è SAST Risk (Low): IOError is too generic for network errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 24418, 12331, 318, 1165, 14276, 329, 3127, 8563]",1.0,695,sast_risk,136,IOError is too generic for network errors,Low,680,            print(e),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 68, 8]"
üß† ML Signal: Example usage pattern for the pro_bar function,"[8582, 100, 254, 10373, 26484, 25, 17934, 8748, 3912, 329, 262, 386, 62, 5657, 2163]",1.0,710,ml_signal,136,Example usage pattern for the pro_bar function,,695,            print(e),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 68, 8]"

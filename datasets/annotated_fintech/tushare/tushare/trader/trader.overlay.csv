annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"✅ Best Practice: Group standard library imports at the top, followed by third-party and local imports","[26486, 227, 6705, 19939, 25, 4912, 3210, 5888, 17944, 379, 262, 1353, 11, 3940, 416, 2368, 12, 10608, 290, 1957, 17944]",1.0,6,best_practice,7,"Group standard library imports at the top, followed by third-party and local imports",,0,@group : waditu,"[31, 8094, 1058, 266, 324, 34272]"
🧠 ML Signal: Importing specific modules from a package indicates usage patterns and dependencies,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301, 9217, 8748, 7572, 290, 20086]",0.5,8,ml_signal,13,Importing specific modules from a package indicates usage patterns and dependencies,,6,import time,"[11748, 640]"
🧠 ML Signal: Importing specific modules from a package indicates usage patterns and dependencies,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301, 9217, 8748, 7572, 290, 20086]",0.5,20,ml_signal,15,Importing specific modules from a package indicates usage patterns and dependencies,,8,from tushare.trader import vars as vs,"[6738, 256, 1530, 533, 13, 2213, 5067, 1330, 410, 945, 355, 3691]"
🧠 ML Signal: Importing specific modules from a package indicates usage patterns and dependencies,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301, 9217, 8748, 7572, 290, 20086]",0.5,31,ml_signal,17,Importing specific modules from a package indicates usage patterns and dependencies,,20,from tushare.util import upass as up,"[6738, 256, 1530, 533, 13, 22602, 1330, 510, 562, 355, 510]"
🧠 ML Signal: Importing specific functions from a module indicates specific usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 5499, 422, 257, 8265, 9217, 2176, 8748, 7572]",0.5,42,ml_signal,17,Importing specific functions from a module indicates specific usage patterns,,31,from tushare.util import upass as up,"[6738, 256, 1530, 533, 13, 22602, 1330, 510, 562, 355, 510]"
"🧠 ML Signal: Class definition for a trading API, useful for identifying patterns in financial trading systems","[8582, 100, 254, 10373, 26484, 25, 5016, 6770, 329, 257, 7313, 7824, 11, 4465, 329, 13720, 7572, 287, 3176, 7313, 3341]",0.5,161,ml_signal,23,"Class definition for a trading API, useful for identifying patterns in financial trading systems",,42,    提醒：本文涉及的思路和内容仅限于量化投资及程序化交易的研究与尝试，不作为个人或机构常规程序化交易的依据，,"[220, 220, 220, 10545, 237, 238, 165, 10253, 171, 120, 248, 17312, 105, 23877, 229, 162, 114, 231, 20998, 232, 21410, 45250, 251, 164, 115, 107, 161, 240, 234, 37863, 227, 22522, 117, 20015, 227, 165, 247, 238, 12859, 236, 34932, 237, 44293, 244, 162, 232, 243, 164, 113, 226, 20998, 232, 163, 101, 233, 41753, 237, 44293, 244, 12859, 97, 23626, 241, 21410, 163, 254, 242, 163, 102, 114, 10310, 236, 22887, 251, 46237, 243, 171, 120, 234, 38834, 43291, 10310, 118, 10310, 103, 21689, 22755, 244, 17312, 118, 162, 252, 226, 30585, 116, 164, 100, 226, 163, 101, 233, 41753, 237, 44293, 244, 12859, 97, 23626, 241, 21410, 160, 122, 251, 162, 235, 106, 171, 120, 234]"
✅ Best Practice: Docstring provides a clear description of the class purpose and usage warnings,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 1398, 4007, 290, 8748, 14601]",0.5,236,best_practice,24,Docstring provides a clear description of the class purpose and usage warnings,,161,    不对实盘的交易风险和政策风险产生的影响负责，如有问题请与我联系。,"[220, 220, 220, 220, 38834, 43380, 117, 22522, 252, 33566, 246, 21410, 12859, 97, 23626, 241, 45617, 236, 165, 247, 102, 161, 240, 234, 162, 242, 123, 163, 255, 244, 45617, 236, 165, 247, 102, 12859, 100, 37955, 21410, 37605, 109, 161, 241, 235, 164, 112, 253, 164, 112, 96, 171, 120, 234, 36685, 224, 17312, 231, 29785, 106, 165, 95, 246, 46237, 115, 10310, 236, 22755, 239, 164, 223, 242, 163, 111, 119, 16764]"
✅ Best Practice: Default mutable arguments should be avoided; use None instead of an empty string.,"[26486, 227, 6705, 19939, 25, 15161, 4517, 540, 7159, 815, 307, 13941, 26, 779, 6045, 2427, 286, 281, 6565, 4731, 13]",0.5,311,best_practice,24,Default mutable arguments should be avoided; use None instead of an empty string.,,236,    不对实盘的交易风险和政策风险产生的影响负责，如有问题请与我联系。,"[220, 220, 220, 220, 38834, 43380, 117, 22522, 252, 33566, 246, 21410, 12859, 97, 23626, 241, 45617, 236, 165, 247, 102, 161, 240, 234, 162, 242, 123, 163, 255, 244, 45617, 236, 165, 247, 102, 12859, 100, 37955, 21410, 37605, 109, 161, 241, 235, 164, 112, 253, 164, 112, 96, 171, 120, 234, 36685, 224, 17312, 231, 29785, 106, 165, 95, 246, 46237, 115, 10310, 236, 22755, 239, 164, 223, 242, 163, 111, 119, 16764]"
🧠 ML Signal: Usage of formatted strings for constructing URLs.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 39559, 13042, 329, 30580, 32336, 13]",1.0,325,ml_signal,27,Usage of formatted strings for constructing URLs.,,311,"    def __init__(self, broker = ''):","[220, 220, 220, 825, 11593, 15003, 834, 7, 944, 11, 20426, 796, 10148, 2599]"
"🧠 ML Signal: Instantiation of a requests session, common in network communication.","[8582, 100, 254, 10373, 26484, 25, 24470, 3920, 286, 257, 7007, 6246, 11, 2219, 287, 3127, 6946, 13]",0.5,380,ml_signal,33,"Instantiation of a requests session, common in network communication.",,325,                                             vs.PAGES['csclogin']),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3691, 13, 4537, 48075, 17816, 6359, 565, 519, 259, 6, 12962]"
"⚠️ SAST Risk (Low): Compatibility check for Python 2, which is outdated and may have security implications.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 46021, 2198, 329, 11361, 362, 11, 543, 318, 23572, 290, 743, 423, 2324, 10939, 13]",1.0,394,sast_risk,34,"Compatibility check for Python 2, which is outdated and may have security implications.",Low,380,        self.heart_active = True,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 11499, 62, 5275, 796, 6407]"
🧠 ML Signal: Usage of threading for background tasks.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4704, 278, 329, 4469, 8861, 13]",0.5,408,ml_signal,36,Usage of threading for background tasks.,,394,        if six.PY2:,"[220, 220, 220, 220, 220, 220, 220, 611, 2237, 13, 47, 56, 17, 25]"
✅ Best Practice: Use setDaemon method consistently across Python versions.,"[26486, 227, 6705, 19939, 25, 5765, 900, 26531, 7966, 2446, 9835, 1973, 11361, 6300, 13]",0.5,417,best_practice,39,Use setDaemon method consistently across Python versions.,,408,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
🧠 ML Signal: Usage of threading for background tasks.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4704, 278, 329, 4469, 8861, 13]",0.5,429,ml_signal,42,Usage of threading for background tasks.,,417,            ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220]"
🧠 ML Signal: Usage of headers update pattern,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 24697, 4296, 3912]",1.0,438,ml_signal,39,Usage of headers update pattern,,429,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
🧠 ML Signal: Pattern of constructing URLs with string formatting,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 30580, 32336, 351, 4731, 33313]",1.0,467,ml_signal,40,Pattern of constructing URLs with string formatting,,438,"            self.heart_thread = Thread(target = self.send_heartbeat, ","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 11499, 62, 16663, 796, 14122, 7, 16793, 796, 2116, 13, 21280, 62, 11499, 12945, 11, 220]"
🧠 ML Signal: Pattern of constructing URLs with string formatting,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 30580, 32336, 351, 4731, 33313]",1.0,487,ml_signal,45,Pattern of constructing URLs with string formatting,,467,        self.s.headers.update(vs.AGENT),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 82, 13, 50145, 13, 19119, 7, 14259, 13, 4760, 3525, 8]"
⚠️ SAST Risk (Low): Potential issue if utils.get_vcode or _login are not handling exceptions properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 3384, 4487, 13, 1136, 62, 85, 8189, 393, 4808, 38235, 389, 407, 9041, 13269, 6105]",1.0,521,sast_risk,48,Potential issue if utils.get_vcode or _login are not handling exceptions properly,Low,487,"        res = self.s.get(vs.V_CODE_URL%(vs.P_TYPE['https'],","[220, 220, 220, 220, 220, 220, 220, 581, 796, 2116, 13, 82, 13, 1136, 7, 14259, 13, 53, 62, 34, 16820, 62, 21886, 4, 7, 14259, 13, 47, 62, 25216, 17816, 5450, 6, 4357]"
✅ Best Practice: Consider using logging instead of print for better control over output,"[26486, 227, 6705, 19939, 25, 12642, 1262, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072]",1.0,571,best_practice,50,Consider using logging instead of print for better control over output,,521,                                          vs.PAGES['vimg'])),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3691, 13, 4537, 48075, 17816, 85, 9600, 20520, 4008]"
🧠 ML Signal: Keep-alive pattern for maintaining session,"[8582, 100, 254, 10373, 26484, 25, 9175, 12, 282, 425, 3912, 329, 10941, 6246]",0.5,598,ml_signal,51,Keep-alive pattern for maintaining session,,571,"        if self._login(utils.get_vcode('csc', res)) is False:","[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13557, 38235, 7, 26791, 13, 1136, 62, 85, 8189, 10786, 66, 1416, 3256, 581, 4008, 318, 10352, 25]"
"🧠 ML Signal: Use of a method with a name starting with an underscore, indicating a private method.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 2446, 351, 257, 1438, 3599, 351, 281, 44810, 11, 12739, 257, 2839, 2446, 13]",0.5,650,ml_signal,49,"Use of a method with a name starting with an underscore, indicating a private method.",,598,"                                          vs.DOMAINS['cscsh'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3691, 13, 39170, 32, 20913, 17816, 66, 1416, 1477, 6, 4357]"
"🧠 ML Signal: Accessing dictionary values using keys, indicating a pattern of data retrieval.","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 22155, 3815, 1262, 8251, 11, 12739, 257, 3912, 286, 1366, 45069, 13]",0.5,677,ml_signal,51,"Accessing dictionary values using keys, indicating a pattern of data retrieval.",,650,"        if self._login(utils.get_vcode('csc', res)) is False:","[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13557, 38235, 7, 26791, 13, 1136, 62, 85, 8189, 10786, 66, 1416, 3256, 581, 4008, 318, 10352, 25]"
✅ Best Practice: Use of a dictionary to organize login parameters for clarity and maintainability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 22155, 284, 16481, 17594, 10007, 329, 16287, 290, 5529, 1799, 13]",1.0,704,best_practice,51,Use of a dictionary to organize login parameters for clarity and maintainability.,,677,"        if self._login(utils.get_vcode('csc', res)) is False:","[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13557, 38235, 7, 26791, 13, 1136, 62, 85, 8189, 10786, 66, 1416, 3256, 581, 4008, 318, 10352, 25]"
⚠️ SAST Risk (High): Storing and using passwords directly from a dictionary can lead to security vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 520, 3255, 290, 1262, 21442, 3264, 422, 257, 22155, 460, 1085, 284, 2324, 23805, 13]",1.0,722,sast_risk,62,Storing and using passwords directly from a dictionary can lead to security vulnerabilities.,High,704,"            j_inputid = user,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 474, 62, 15414, 312, 796, 2836, 11]"
⚠️ SAST Risk (Medium): Sending sensitive information like passwords over a POST request without ensuring encryption.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32038, 8564, 1321, 588, 21442, 625, 257, 24582, 2581, 1231, 13359, 15835, 13]",0.5,740,sast_risk,66,Sending sensitive information like passwords over a POST request without ensuring encryption.,Medium,722,"            f_tdx = '',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 62, 8671, 87, 796, 705, 3256]"
"🧠 ML Signal: Checking for specific text in a response to determine login success, indicating a pattern for success criteria.","[8582, 100, 254, 10373, 26484, 25, 39432, 329, 2176, 2420, 287, 257, 2882, 284, 5004, 17594, 1943, 11, 12739, 257, 3912, 329, 1943, 9987, 13]",0.5,777,ml_signal,70,"Checking for specific text in a response to determine login success, indicating a pattern for success criteria.",,740,"        logined = self.s.post(vs.CSC_LOGIN_ACTION % (vs.P_TYPE['https'], ","[220, 220, 220, 220, 220, 220, 220, 2604, 1389, 796, 2116, 13, 82, 13, 7353, 7, 14259, 13, 34, 6173, 62, 25294, 1268, 62, 44710, 4064, 357, 14259, 13, 47, 62, 25216, 17816, 5450, 6, 4357, 220]"
"🧠 ML Signal: Checks if a thread is alive, indicating a pattern of monitoring thread status","[8582, 100, 254, 10373, 26484, 25, 47719, 611, 257, 4704, 318, 6776, 11, 12739, 257, 3912, 286, 9904, 4704, 3722]",0.5,785,ml_signal,69,"Checks if a thread is alive, indicating a pattern of monitoring thread status",,777,        ),"[220, 220, 220, 220, 220, 220, 220, 1267]"
"🧠 ML Signal: Sets a flag based on thread status, indicating a pattern of state management","[8582, 100, 254, 10373, 26484, 25, 21394, 257, 6056, 1912, 319, 4704, 3722, 11, 12739, 257, 3912, 286, 1181, 4542]",0.5,822,ml_signal,70,"Sets a flag based on thread status, indicating a pattern of state management",,785,"        logined = self.s.post(vs.CSC_LOGIN_ACTION % (vs.P_TYPE['https'], ","[220, 220, 220, 220, 220, 220, 220, 2604, 1389, 796, 2116, 13, 82, 13, 7353, 7, 14259, 13, 34, 6173, 62, 25294, 1268, 62, 44710, 4064, 357, 14259, 13, 47, 62, 25216, 17816, 5450, 6, 4357, 220]"
⚠️ SAST Risk (Low): Potential race condition if `start` is called on an already started thread,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 3234, 4006, 611, 4600, 9688, 63, 318, 1444, 319, 281, 1541, 2067, 4704]",1.0,835,sast_risk,74,Potential race condition if `start` is called on an already started thread,Low,822,            return True,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6407]"
✅ Best Practice: Consider checking if the thread is already started before calling `start`,"[26486, 227, 6705, 19939, 25, 12642, 10627, 611, 262, 4704, 318, 1541, 2067, 878, 4585, 4600, 9688, 63]",1.0,844,best_practice,75,Consider checking if the thread is already started before calling `start`,,835,        return False,"[220, 220, 220, 220, 220, 220, 220, 1441, 10352]"
🧠 ML Signal: Infinite loop pattern for continuous operation,"[8582, 100, 254, 10373, 26484, 25, 22380, 9052, 3912, 329, 12948, 4905]",1.0,857,ml_signal,74,Infinite loop pattern for continuous operation,,844,            return True,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6407]"
🧠 ML Signal: Method call pattern for checking account status,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 10627, 1848, 3722]",1.0,867,ml_signal,78,Method call pattern for checking account status,,857,    def keepalive(self):,"[220, 220, 220, 825, 1394, 282, 425, 7, 944, 2599]"
⚠️ SAST Risk (Medium): Catching all exceptions without specific handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 327, 19775, 477, 13269, 1231, 2176, 9041]",1.0,876,sast_risk,81,Catching all exceptions without specific handling,Medium,867,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
✅ Best Practice: Use a constant or configuration for sleep duration,"[26486, 227, 6705, 19939, 25, 5765, 257, 6937, 393, 8398, 329, 3993, 9478]",1.0,876,best_practice,84,Use a constant or configuration for sleep duration,,876,,[]
✅ Best Practice: Use a constant or configuration for sleep duration,"[26486, 227, 6705, 19939, 25, 5765, 257, 6937, 393, 8398, 329, 3993, 9478]",1.0,894,best_practice,87,Use a constant or configuration for sleep duration,,876,            if self.heart_active:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 11499, 62, 5275, 25]"
✅ Best Practice: Consider adding a docstring to describe the purpose and behavior of the method.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 4069, 286, 262, 2446, 13]",0.5,894,best_practice,84,Consider adding a docstring to describe the purpose and behavior of the method.,,894,,[]
✅ Best Practice: Ensure that self.baseinfo is initialized and has the expected structure.,"[26486, 227, 6705, 19939, 25, 48987, 326, 2116, 13, 8692, 10951, 318, 23224, 290, 468, 262, 2938, 4645, 13]",0.5,904,best_practice,86,Ensure that self.baseinfo is initialized and has the expected structure.,,894,        while True:,"[220, 220, 220, 220, 220, 220, 220, 981, 6407, 25]"
✅ Best Practice: Method should have a docstring explaining its purpose,"[26486, 227, 6705, 19939, 25, 11789, 815, 423, 257, 2205, 8841, 11170, 663, 4007]",1.0,914,best_practice,86,Method should have a docstring explaining its purpose,,904,        while True:,"[220, 220, 220, 220, 220, 220, 220, 981, 6407, 25]"
🧠 ML Signal: Setting a flag to control the state of an object,"[8582, 100, 254, 10373, 26484, 25, 25700, 257, 6056, 284, 1630, 262, 1181, 286, 281, 2134]",1.0,931,ml_signal,88,Setting a flag to control the state of an object,,914,                try:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1949, 25]"
✅ Best Practice: Add a docstring to describe the function and its parameters,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 2163, 290, 663, 10007]",0.5,957,best_practice,89,Add a docstring to describe the function and its parameters,,931,                    response = self.heartbeat(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2882, 796, 2116, 13, 11499, 12945, 3419]"
"⚠️ SAST Risk (Low): Potential typo in the docstring for 'pricce', should be 'price'","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 46517, 287, 262, 2205, 8841, 329, 705, 1050, 291, 344, 3256, 815, 307, 705, 20888, 6]",0.5,965,sast_risk,98,"Potential typo in the docstring for 'pricce', should be 'price'",Low,957,    def heartbeat(self):,"[220, 220, 220, 825, 36051, 7, 944, 2599]"
🧠 ML Signal: Pattern of checking JSON response for a specific key-value pair,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 10627, 19449, 2882, 329, 257, 2176, 1994, 12, 8367, 5166]",0.5,973,ml_signal,102,Pattern of checking JSON response for a specific key-value pair,,965,    def exit(self):,"[220, 220, 220, 825, 8420, 7, 944, 2599]"
✅ Best Practice: Simplify boolean expression to directly return the condition,"[26486, 227, 6705, 19939, 25, 45157, 1958, 25131, 5408, 284, 3264, 1441, 262, 4006]",0.5,987,best_practice,103,Simplify boolean expression to directly return the condition,,973,        self.heart_active = False,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 11499, 62, 5275, 796, 10352]"
✅ Best Practice: Add a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,1001,best_practice,103,Add a docstring to describe the function's purpose and parameters,,987,        self.heart_active = False,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 11499, 62, 5275, 796, 10352]"
"⚠️ SAST Risk (Low): Potential typo in the docstring for 'pricce', should be 'price'","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 46517, 287, 262, 2205, 8841, 329, 705, 1050, 291, 344, 3256, 815, 307, 705, 20888, 6]",0.5,1023,sast_risk,112,"Potential typo in the docstring for 'pricce', should be 'price'",Low,1001,        pricce:委托价格，int,"[220, 220, 220, 220, 220, 220, 220, 38151, 344, 25, 34650, 242, 33699, 246, 20015, 115, 43718, 120, 171, 120, 234, 600]"
🧠 ML Signal: Pattern of checking JSON response for a specific key-value pair,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 10627, 19449, 2882, 329, 257, 2176, 1994, 12, 8367, 5166]",0.5,1053,ml_signal,116,Pattern of checking JSON response for a specific key-value pair,,1023,"        jsonobj = utils.get_jdata(self._trading(stkcode, price, ","[220, 220, 220, 220, 220, 220, 220, 33918, 26801, 796, 3384, 4487, 13, 1136, 62, 73, 7890, 7, 944, 13557, 2213, 4980, 7, 301, 74, 8189, 11, 2756, 11, 220]"
✅ Best Practice: Simplify boolean expression to directly return the condition,"[26486, 227, 6705, 19939, 25, 45157, 1958, 25131, 5408, 284, 3264, 1441, 262, 4006]",0.5,1111,best_practice,117,Simplify boolean expression to directly return the condition,,1053,"                                                count, amount, 'B', 'buy'))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 954, 11, 2033, 11, 705, 33, 3256, 705, 17846, 6, 4008]"
🧠 ML Signal: Usage of external service URL for trading operations,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 2139, 10289, 329, 7313, 4560]",1.0,1169,ml_signal,117,Usage of external service URL for trading operations,,1111,"                                                count, amount, 'B', 'buy'))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 954, 11, 2033, 11, 705, 33, 3256, 705, 17846, 6, 4008]"
🧠 ML Signal: Parsing JSON data from a service response,"[8582, 100, 254, 10373, 26484, 25, 23042, 278, 19449, 1366, 422, 257, 2139, 2882]",1.0,1177,ml_signal,123,Parsing JSON data from a service response,,1169,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
⚠️ SAST Risk (Low): Potential division by zero if price is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 2756, 318, 6632]",0.5,1209,sast_risk,132,Potential division by zero if price is zero,Low,1177,"        jsonobj = utils.get_jdata(self._trading(stkcode, price, count, ","[220, 220, 220, 220, 220, 220, 220, 33918, 26801, 796, 3384, 4487, 13, 1136, 62, 73, 7890, 7, 944, 13557, 2213, 4980, 7, 301, 74, 8189, 11, 2756, 11, 954, 11, 220]"
⚠️ SAST Risk (Low): Potential division by zero if price is zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 2756, 318, 6632]",0.5,1231,sast_risk,134,Potential division by zero if price is zero,Low,1209,        res = True if jsonobj['result'] == 'true' else False,"[220, 220, 220, 220, 220, 220, 220, 581, 796, 6407, 611, 33918, 26801, 17816, 20274, 20520, 6624, 705, 7942, 6, 2073, 10352]"
✅ Best Practice: Use a dictionary literal for better readability,"[26486, 227, 6705, 19939, 25, 5765, 257, 22155, 18875, 329, 1365, 1100, 1799]",0.5,1253,best_practice,134,Use a dictionary literal for better readability,,1231,        res = True if jsonobj['result'] == 'true' else False,"[220, 220, 220, 220, 220, 220, 220, 581, 796, 6407, 611, 33918, 26801, 17816, 20274, 20520, 6624, 705, 7942, 6, 2073, 10352]"
🧠 ML Signal: Posting data to a trading service,"[8582, 100, 254, 10373, 26484, 25, 2947, 278, 1366, 284, 257, 7313, 2139]",0.5,1271,ml_signal,150,Posting data to a trading service,,1253,            if tradeflag == 'B':,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 3292, 32109, 6624, 705, 33, 10354]"
✅ Best Practice: Include a docstring to describe the function's purpose and return value,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 1441, 1988]",1.0,1300,best_practice,152,Include a docstring to describe the function's purpose and return value,,1271,                count = count if count else amount // price // 100 * 100 ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 954, 796, 954, 611, 954, 2073, 2033, 3373, 2756, 3373, 1802, 1635, 1802, 220]"
🧠 ML Signal: Method call pattern could be used to understand API usage,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 714, 307, 973, 284, 1833, 7824, 8748]",1.0,1316,ml_signal,165,Method call pattern could be used to understand API usage,,1300,"            buyprice = price,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2822, 20888, 796, 2756, 11]"
"🧠 ML Signal: Updates headers with a constant value, indicating a pattern of modifying request headers.","[8582, 100, 254, 10373, 26484, 25, 28090, 24697, 351, 257, 6937, 1988, 11, 12739, 257, 3912, 286, 30620, 2581, 24697, 13]",0.5,1337,ml_signal,166,"Updates headers with a constant value, indicating a pattern of modifying request headers.",,1316,            _ = utils.nowtime_str(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4808, 796, 3384, 4487, 13, 2197, 2435, 62, 2536, 3419]"
"⚠️ SAST Risk (Low): Potential risk if vs.BASE_URL or its components are user-controlled, leading to SSRF.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 3691, 13, 33, 11159, 62, 21886, 393, 663, 6805, 389, 2836, 12, 14401, 11, 3756, 284, 6723, 32754, 13]",0.5,1349,sast_risk,167,"Potential risk if vs.BASE_URL or its components are user-controlled, leading to SSRF.",Low,1337,            ),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1267]"
"🧠 ML Signal: Use of a utility function to parse JSON data, indicating a pattern of JSON handling.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 10361, 2163, 284, 21136, 19449, 1366, 11, 12739, 257, 3912, 286, 19449, 9041, 13]",0.5,1363,ml_signal,172,"Use of a utility function to parse JSON data, indicating a pattern of JSON handling.",,1349,            return tradeResult,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 3292, 23004]"
"🧠 ML Signal: Conversion of JSON data to a DataFrame, indicating a pattern of data processing.","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 19449, 1366, 284, 257, 6060, 19778, 11, 12739, 257, 3912, 286, 1366, 7587, 13]",0.5,1371,ml_signal,174,"Conversion of JSON data to a DataFrame, indicating a pattern of data processing.",,1363,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
"✅ Best Practice: Returns a DataFrame, which is a common and efficient data structure for data manipulation.","[26486, 227, 6705, 19939, 25, 16409, 257, 6060, 19778, 11, 543, 318, 257, 2219, 290, 6942, 1366, 4645, 329, 1366, 17512, 13]",0.5,1379,best_practice,174,"Returns a DataFrame, which is a common and efficient data structure for data manipulation.",,1371,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
🧠 ML Signal: Use of self.s.get indicates a pattern of making HTTP requests,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 2116, 13, 82, 13, 1136, 9217, 257, 3912, 286, 1642, 14626, 7007]",0.5,1383,ml_signal,190,Use of self.s.get indicates a pattern of making HTTP requests,,1379,    ,"[220, 220, 220, 220]"
⚠️ SAST Risk (Medium): Potential exposure to HTTP response data without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 7111, 284, 14626, 2882, 1366, 1231, 21201]",0.5,1387,sast_risk,190,Potential exposure to HTTP response data without validation,Medium,1383,    ,"[220, 220, 220, 220]"
🧠 ML Signal: Use of a utility function to parse JSON data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 10361, 2163, 284, 21136, 19449, 1366]",0.5,1438,ml_signal,196,Use of a utility function to parse JSON data,,1387,                                            vs.PAGES['position'])),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3691, 13, 4537, 48075, 17816, 9150, 20520, 4008]"
⚠️ SAST Risk (Low): Potential for JSON parsing errors if data is malformed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 19449, 32096, 8563, 611, 1366, 318, 6428, 12214]",0.5,1459,sast_risk,197,Potential for JSON parsing errors if data is malformed,Low,1438,        jsonobj = utils.get_jdata(txtdata),"[220, 220, 220, 220, 220, 220, 220, 33918, 26801, 796, 3384, 4487, 13, 1136, 62, 73, 7890, 7, 14116, 7890, 8]"
🧠 ML Signal: Conversion of JSON data to a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 19449, 1366, 284, 257, 6060, 19778]",1.0,1490,ml_signal,198,Conversion of JSON data to a DataFrame,,1459,"        df = pd.DataFrame(jsonobj['data'], columns=vs.POSITION_COLS)","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 7, 17752, 26801, 17816, 7890, 6, 4357, 15180, 28, 14259, 13, 37997, 17941, 62, 25154, 50, 8]"
✅ Best Practice: Explicitly specify columns when creating a DataFrame for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 11986, 15180, 618, 4441, 257, 6060, 19778, 329, 16287]",1.0,1521,best_practice,198,Explicitly specify columns when creating a DataFrame for clarity,,1490,"        df = pd.DataFrame(jsonobj['data'], columns=vs.POSITION_COLS)","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 7, 17752, 26801, 17816, 7890, 6, 4357, 15180, 28, 14259, 13, 37997, 17941, 62, 25154, 50, 8]"
✅ Best Practice: Add a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,1552,best_practice,198,Add a docstring to describe the function's purpose and parameters,,1521,"        df = pd.DataFrame(jsonobj['data'], columns=vs.POSITION_COLS)","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 7, 17752, 26801, 17816, 7890, 6, 4357, 15180, 28, 14259, 13, 37997, 17941, 62, 25154, 50, 8]"
✅ Best Practice: Use 'and' instead of '&' for logical operations,"[26486, 227, 6705, 19939, 25, 5765, 705, 392, 6, 2427, 286, 705, 5, 6, 329, 12219, 4560]",0.5,1613,best_practice,221,Use 'and' instead of '&' for logical operations,,1552,"                                                    vs.PAGES['entrustlist'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3691, 13, 4537, 48075, 17816, 298, 11469, 4868, 6, 4357]"
⚠️ SAST Risk (Medium): Potential risk of using external data without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 1262, 7097, 1366, 1231, 21201]",0.5,1622,sast_risk,232,Potential risk of using external data without validation,Medium,1613,        -----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 6329]"
🧠 ML Signal: Usage of pandas DataFrame for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 6060, 19778, 329, 1366, 17512]",0.5,1646,ml_signal,234,Usage of pandas DataFrame for data manipulation,,1622,        end:结束日期  YYYYMMDD,"[220, 220, 220, 220, 220, 220, 220, 886, 25, 163, 119, 241, 30266, 253, 33768, 98, 17312, 253, 220, 575, 26314, 56, 12038, 16458]"
✅ Best Practice: Docstring provides a clear description of the function and its parameters.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2163, 290, 663, 10007, 13]",0.5,1670,best_practice,234,Docstring provides a clear description of the function and its parameters.,,1646,        end:结束日期  YYYYMMDD,"[220, 220, 220, 220, 220, 220, 220, 886, 25, 163, 119, 241, 30266, 253, 33768, 98, 17312, 253, 220, 575, 26314, 56, 12038, 16458]"
✅ Best Practice: Using a dictionary to store parameters improves readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 257, 22155, 284, 3650, 10007, 19575, 1100, 1799, 290, 5529, 1799, 13]",0.5,1688,best_practice,245,Using a dictionary to store parameters improves readability and maintainability.,,1670,        orderprice:委托价格,"[220, 220, 220, 220, 220, 220, 220, 1502, 20888, 25, 34650, 242, 33699, 246, 20015, 115, 43718, 120]"
"⚠️ SAST Risk (Medium): Potential vulnerability if vs.CANCEL_URL or vs.P_TYPE['https'], vs.DOMAINS['csc'], vs.PAGES['cancel'] are user-controlled.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 15131, 611, 3691, 13, 34, 20940, 3698, 62, 21886, 393, 3691, 13, 47, 62, 25216, 17816, 5450, 6, 4357, 3691, 13, 39170, 32, 20913, 17816, 66, 1416, 6, 4357, 3691, 13, 4537, 48075, 17816, 66, 21130, 20520, 389, 2836, 12, 14401, 13]",0.5,1707,sast_risk,252,"Potential vulnerability if vs.CANCEL_URL or vs.P_TYPE['https'], vs.DOMAINS['csc'], vs.PAGES['cancel'] are user-controlled.",Medium,1688,        if (begin is None) & (end is None):,"[220, 220, 220, 220, 220, 220, 220, 611, 357, 27471, 318, 6045, 8, 1222, 357, 437, 318, 6045, 2599]"
⚠️ SAST Risk (Medium): Potential risk if result.text contains unexpected or malicious content.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 611, 1255, 13, 5239, 4909, 10059, 393, 17412, 2695, 13]",0.5,1738,sast_risk,255,Potential risk if result.text contains unexpected or malicious content.,Medium,1707,"            daterange = vs.DEAL_DATE_RANGE % (begin, end)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 288, 729, 858, 796, 3691, 13, 7206, 1847, 62, 35, 6158, 62, 49, 27746, 4064, 357, 27471, 11, 886, 8]"
🧠 ML Signal: Accessing specific keys in a JSON object can indicate expected data structure.,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 2176, 8251, 287, 257, 19449, 2134, 460, 7603, 2938, 1366, 4645, 13]",0.5,1755,ml_signal,256,Accessing specific keys in a JSON object can indicate expected data structure.,,1738,            selecttype = 'all',"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2922, 4906, 796, 705, 439, 6]"
✅ Best Practice: Include a docstring to describe the function's purpose and return value,"[26486, 227, 6705, 19939, 25, 40348, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 1441, 1988]",0.5,1772,best_practice,256,Include a docstring to describe the function's purpose and return value,,1755,            selecttype = 'all',"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2922, 4906, 796, 705, 439, 6]"
🧠 ML Signal: Method call pattern could be used to understand API usage,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 714, 307, 973, 284, 1833, 7824, 8748]",0.5,1781,ml_signal,271,Method call pattern could be used to understand API usage,,1772,        -----------,"[220, 220, 220, 220, 220, 220, 220, 24200, 6329]"
🧠 ML Signal: Method name with underscore prefix suggests a private method,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 351, 44810, 21231, 5644, 257, 2839, 2446]",0.5,1828,ml_signal,272,Method name with underscore prefix suggests a private method,,1781,"        ordersno:委托单号，多个以逗号分隔，e.g. 1866,1867","[220, 220, 220, 220, 220, 220, 220, 6266, 3919, 25, 34650, 242, 33699, 246, 39355, 243, 20998, 115, 171, 120, 234, 13783, 248, 10310, 103, 20015, 98, 34460, 245, 20998, 115, 26344, 228, 49694, 242, 171, 120, 234, 68, 13, 70, 13, 1248, 2791, 11, 1507, 3134]"
✅ Best Practice: Consider adding a docstring to describe the method's purpose,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2446, 338, 4007]",0.5,1883,best_practice,273,Consider adding a docstring to describe the method's purpose,,1828,        orderdata:委托日期 YYYYMMDD，多个以逗号分隔，对应委托单好,"[220, 220, 220, 220, 220, 220, 220, 1502, 7890, 25, 34650, 242, 33699, 246, 33768, 98, 17312, 253, 575, 26314, 56, 12038, 16458, 171, 120, 234, 13783, 248, 10310, 103, 20015, 98, 34460, 245, 20998, 115, 26344, 228, 49694, 242, 171, 120, 234, 43380, 117, 41753, 242, 34650, 242, 33699, 246, 39355, 243, 25001, 121]"
⚠️ SAST Risk (Low): Potential risk if vs.AGENT contains sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 3691, 13, 4760, 3525, 4909, 8564, 1321]",1.0,1892,sast_risk,275,Potential risk if vs.AGENT contains sensitive information,Low,1883,        ------------,"[220, 220, 220, 220, 220, 220, 220, 220, 10541]"
⚠️ SAST Risk (Medium): URL formatting with user-controlled variables can lead to SSRF or other injection attacks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 33313, 351, 2836, 12, 14401, 9633, 460, 1085, 284, 6723, 32754, 393, 584, 16954, 3434]",0.5,1900,sast_risk,277,URL formatting with user-controlled variables can lead to SSRF or other injection attacks,Medium,1892,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
🧠 ML Signal: Usage of utility function to parse JSON data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 10361, 2163, 284, 21136, 19449, 1366]",0.5,1915,ml_signal,279,Usage of utility function to parse JSON data,,1900,            params = dict(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 42287, 796, 8633, 7]"
🧠 ML Signal: Accessing nested JSON data,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 28376, 19449, 1366]",0.5,1938,ml_signal,281,Accessing nested JSON data,,1915,"                  orderdate = orderdate,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 4475, 796, 1502, 4475, 11]"
🧠 ML Signal: Modifying dictionary with additional data,"[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 22155, 351, 3224, 1366]",0.5,1969,ml_signal,283,Modifying dictionary with additional data,,1938,                               ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220]"
🧠 ML Signal: Returning a pandas Series object,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 19798, 292, 7171, 2134]",0.5,2026,ml_signal,285,Returning a pandas Series object,,1969,"            result = self.s.post(vs.CANCEL_URL % (vs.P_TYPE['https'], vs.DOMAINS['csc'], vs.PAGES['cancel']), ","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1255, 796, 2116, 13, 82, 13, 7353, 7, 14259, 13, 34, 20940, 3698, 62, 21886, 4064, 357, 14259, 13, 47, 62, 25216, 17816, 5450, 6, 4357, 3691, 13, 39170, 32, 20913, 17816, 66, 1416, 6, 4357, 3691, 13, 4537, 48075, 17816, 66, 21130, 20520, 828, 220]"
✅ Best Practice: Check if 'return_data' has 'get' method to ensure it behaves like a dictionary.,"[26486, 227, 6705, 19939, 25, 6822, 611, 705, 7783, 62, 7890, 6, 468, 705, 1136, 6, 2446, 284, 4155, 340, 39341, 588, 257, 22155, 13]",1.0,2041,best_practice,279,Check if 'return_data' has 'get' method to ensure it behaves like a dictionary.,,2026,            params = dict(,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 42287, 796, 8633, 7]"
⚠️ SAST Risk (Low): Raising a custom exception without additional context may obscure the error source.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 2183, 6631, 1231, 3224, 4732, 743, 18611, 262, 4049, 2723, 13]",1.0,2064,sast_risk,281,Raising a custom exception without additional context may obscure the error source.,Low,2041,"                  orderdate = orderdate,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 4475, 796, 1502, 4475, 11]"
✅ Best Practice: Custom exception class for specific error handling,"[26486, 227, 6705, 19939, 25, 8562, 6631, 1398, 329, 2176, 4049, 9041]",1.0,2087,best_practice,281,Custom exception class for specific error handling,,2064,"                  orderdate = orderdate,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1502, 4475, 796, 1502, 4475, 11]"
✅ Best Practice: Use of default parameter value for flexibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 1988, 329, 13688]",1.0,2118,best_practice,283,Use of default parameter value for flexibility,,2087,                               ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220]"
✅ Best Practice: Explicitly calling the superclass constructor,"[26486, 227, 6705, 19939, 25, 11884, 306, 4585, 262, 2208, 4871, 23772]",1.0,2175,best_practice,285,Explicitly calling the superclass constructor,,2118,"            result = self.s.post(vs.CANCEL_URL % (vs.P_TYPE['https'], vs.DOMAINS['csc'], vs.PAGES['cancel']), ","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1255, 796, 2116, 13, 82, 13, 7353, 7, 14259, 13, 34, 20940, 3698, 62, 21886, 4064, 357, 14259, 13, 47, 62, 25216, 17816, 5450, 6, 4357, 3691, 13, 39170, 32, 20913, 17816, 66, 1416, 6, 4357, 3691, 13, 4537, 48075, 17816, 66, 21130, 20520, 828, 220]"
🧠 ML Signal: Storing initialization parameters as instance variables,"[8582, 100, 254, 10373, 26484, 25, 520, 3255, 37588, 10007, 355, 4554, 9633]",1.0,2206,ml_signal,286,Storing initialization parameters as instance variables,,2175,                            params = params),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 42287, 796, 42287, 8]"
🧠 ML Signal: Method name suggests a health check or status update pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 257, 1535, 2198, 393, 3722, 4296, 3912]",0.5,2237,ml_signal,286,Method name suggests a health check or status update pattern,,2206,                            params = params),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 42287, 796, 42287, 8]"
🧠 ML Signal: Returning an attribute directly may indicate a getter pattern,"[8582, 100, 254, 10373, 26484, 25, 42882, 281, 11688, 3264, 743, 7603, 257, 651, 353, 3912]",0.5,2268,ml_signal,286,Returning an attribute directly may indicate a getter pattern,,2237,                            params = params),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 42287, 796, 42287, 8]"

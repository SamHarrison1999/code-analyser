annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚ö†Ô∏è SAST Risk (Low): Function does not validate input types, which could lead to runtime errors if DF is not a DataFrame or N is not an integer.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 15553, 857, 407, 26571, 5128, 3858, 11, 543, 714, 1085, 284, 19124, 8563, 611, 36323, 318, 407, 257, 6060, 19778, 393, 399, 318, 407, 281, 18253, 13]",0.5,0,sast_risk,3,"Function does not validate input types, which could lead to runtime errors if DF is not a DataFrame or N is not an integer.",Low,0,,[]
"‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose, parameters, and return value.","[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 11, 10007, 11, 290, 1441, 1988, 13]",1.0,5,best_practice,4,"Consider adding a docstring to describe the function's purpose, parameters, and return value.",,0,import numpy as np,"[11748, 299, 32152, 355, 45941]"
"‚úÖ Best Practice: Use descriptive parameter names for better readability, e.g., `data_frame` instead of `DF` and `span` instead of `N`.","[26486, 227, 6705, 19939, 25, 5765, 35644, 11507, 3891, 329, 1365, 1100, 1799, 11, 304, 13, 70, 1539, 4600, 7890, 62, 14535, 63, 2427, 286, 4600, 8068, 63, 290, 4600, 12626, 63, 2427, 286, 4600, 45, 44646]",1.0,11,best_practice,5,"Use descriptive parameter names for better readability, e.g., `data_frame` instead of `DF` and `span` instead of `N`.",,5,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
"üß† ML Signal: Usage of Exponential Moving Average (EMA) calculation, which is common in financial data analysis.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 5518, 35470, 26768, 13475, 357, 27630, 8, 17952, 11, 543, 318, 2219, 287, 3176, 1366, 3781, 13]",0.5,11,ml_signal,6,"Usage of Exponential Moving Average (EMA) calculation, which is common in financial data analysis.",,11,,[]
"‚ö†Ô∏è SAST Risk (Low): Function does not validate input types, which could lead to runtime errors if DF is not a DataFrame or N is not an integer.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 15553, 857, 407, 26571, 5128, 3858, 11, 543, 714, 1085, 284, 19124, 8563, 611, 36323, 318, 407, 257, 6060, 19778, 393, 399, 318, 407, 281, 18253, 13]",1.0,17,sast_risk,5,"Function does not validate input types, which could lead to runtime errors if DF is not a DataFrame or N is not an integer.",Low,11,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
‚úÖ Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,17,best_practice,6,Consider adding type hints for function parameters and return type for better readability and maintainability.,,17,,[]
"üß† ML Signal: Use of rolling mean function indicates time series data processing, which is common in financial or sensor data analysis.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10708, 1612, 2163, 9217, 640, 2168, 1366, 7587, 11, 543, 318, 2219, 287, 3176, 393, 12694, 1366, 3781, 13]",0.5,17,ml_signal,7,"Use of rolling mean function indicates time series data processing, which is common in financial or sensor data analysis.",,17,,[]
‚úÖ Best Practice: Use method chaining for better readability and to avoid intermediate variables.,"[26486, 227, 6705, 19939, 25, 5765, 2446, 442, 1397, 329, 1365, 1100, 1799, 290, 284, 3368, 19898, 9633, 13]",0.5,50,best_practice,9,Use method chaining for better readability and to avoid intermediate variables.,,17,"    return pd.Series.ewm(DF, span=N, min_periods=N - 1, adjust=True).mean()","[220, 220, 220, 1441, 279, 67, 13, 27996, 13, 413, 76, 7, 8068, 11, 11506, 28, 45, 11, 949, 62, 41007, 82, 28, 45, 532, 352, 11, 4532, 28, 17821, 737, 32604, 3419]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007, 13]",1.0,50,best_practice,7,Consider adding a docstring to describe the function's purpose and parameters.,,50,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure DF is a pandas DataFrame or Series to avoid unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 36323, 318, 257, 19798, 292, 6060, 19778, 393, 7171, 284, 3368, 10059, 4069, 13]",0.5,83,sast_risk,9,Ensure DF is a pandas DataFrame or Series to avoid unexpected behavior.,Low,50,"    return pd.Series.ewm(DF, span=N, min_periods=N - 1, adjust=True).mean()","[220, 220, 220, 1441, 279, 67, 13, 27996, 13, 413, 76, 7, 8068, 11, 11506, 28, 45, 11, 949, 62, 41007, 82, 28, 45, 532, 352, 11, 4532, 28, 17821, 737, 32604, 3419]"
üß† ML Signal: Usage of fillna indicates handling of missing data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6070, 2616, 9217, 9041, 286, 4814, 1366, 13]",0.5,83,ml_signal,11,Usage of fillna indicates handling of missing data.,,83,,[]
‚úÖ Best Practice: Use descriptive variable names instead of single letters like 'z'.,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 2427, 286, 2060, 7475, 588, 705, 89, 4458]",0.5,100,best_practice,13,Use descriptive variable names instead of single letters like 'z'.,,83,"    return pd.Series.rolling(DF, N).mean()","[220, 220, 220, 1441, 279, 67, 13, 27996, 13, 18886, 7, 8068, 11, 399, 737, 32604, 3419]"
‚ö†Ô∏è SAST Risk (Low): Ensure numpy is imported as np to avoid NameError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 299, 32152, 318, 17392, 355, 45941, 284, 3368, 6530, 12331, 13]",0.5,100,sast_risk,15,Ensure numpy is imported as np to avoid NameError.,Low,100,,[]
üß† ML Signal: Iterative calculation pattern for moving averages.,"[8582, 100, 254, 10373, 26484, 25, 40806, 876, 17952, 3912, 329, 3867, 25694, 13]",0.5,109,ml_signal,18,Iterative calculation pattern for moving averages.,,100,    z = len(DF),"[220, 220, 220, 1976, 796, 18896, 7, 8068, 8]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",0.5,121,best_practice,21,Use descriptive variable names for better readability,,109,"    for i in range(1, z):","[220, 220, 220, 329, 1312, 287, 2837, 7, 16, 11, 1976, 2599]"
"‚ö†Ô∏è SAST Risk (Low): Ensure that the functions MAX, ABS, REF, and MA handle edge cases and invalid inputs","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 5499, 25882, 11, 29950, 11, 4526, 37, 11, 290, 8779, 5412, 5743, 2663, 290, 12515, 17311]",0.5,131,sast_risk,23,"Ensure that the functions MAX, ABS, REF, and MA handle edge cases and invalid inputs",Low,121,    for i in range(z):,"[220, 220, 220, 329, 1312, 287, 2837, 7, 89, 2599]"
"üß† ML Signal: Function definition with parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",0.5,147,ml_signal,24,"Function definition with parameters, useful for learning function usage patterns",,131,        DF[i] = var[i],"[220, 220, 220, 220, 220, 220, 220, 36323, 58, 72, 60, 796, 1401, 58, 72, 60]"
"‚ö†Ô∏è SAST Risk (Low): Assumes DF is a DataFrame and N is a valid integer, lacks input validation","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 36323, 318, 257, 6060, 19778, 290, 399, 318, 257, 4938, 18253, 11, 16523, 5128, 21201]",0.5,147,sast_risk,26,"Assumes DF is a DataFrame and N is a valid integer, lacks input validation",Low,147,,[]
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",0.5,147,best_practice,27,Use descriptive variable names for better readability,,147,,[]
"‚ö†Ô∏è SAST Risk (Low): Function does not validate input types, which may lead to runtime errors if DF is not a DataFrame or N is not an integer.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 15553, 857, 407, 26571, 5128, 3858, 11, 543, 743, 1085, 284, 19124, 8563, 611, 36323, 318, 407, 257, 6060, 19778, 393, 399, 318, 407, 281, 18253, 13]",1.0,147,sast_risk,26,"Function does not validate input types, which may lead to runtime errors if DF is not a DataFrame or N is not an integer.",Low,147,,[]
‚úÖ Best Practice: Consider adding input validation to ensure DF is a DataFrame and N is a positive integer.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 5128, 21201, 284, 4155, 36323, 318, 257, 6060, 19778, 290, 399, 318, 257, 3967, 18253, 13]",1.0,147,best_practice,27,Consider adding input validation to ensure DF is a DataFrame and N is a positive integer.,,147,,[]
"üß† ML Signal: Use of rolling window operations, which are common in time series analysis.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 10708, 4324, 4560, 11, 543, 389, 2219, 287, 640, 2168, 3781, 13]",1.0,155,ml_signal,28,"Use of rolling window operations, which are common in time series analysis.",,147,"def ATR(DF, N):","[4299, 5161, 49, 7, 8068, 11, 399, 2599]"
"‚úÖ Best Practice: Add a docstring to describe the function's purpose, parameters, and return value for better readability and maintainability.","[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 11, 10007, 11, 290, 1441, 1988, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,164,best_practice,29,"Add a docstring to describe the function's purpose, parameters, and return value for better readability and maintainability.",,155,    C = DF['close'],"[220, 220, 220, 327, 796, 36323, 17816, 19836, 20520]"
üß† ML Signal: Function definition with parameters suggests a pattern for function usage,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 5644, 257, 3912, 329, 2163, 8748]",1.0,172,ml_signal,28,Function definition with parameters suggests a pattern for function usage,,164,"def ATR(DF, N):","[4299, 5161, 49, 7, 8068, 11, 399, 2599]"
‚úÖ Best Practice: Function name should be lowercase to follow PEP 8 naming conventions,"[26486, 227, 6705, 19939, 25, 15553, 1438, 815, 307, 2793, 7442, 284, 1061, 350, 8905, 807, 19264, 21396]",1.0,181,best_practice,29,Function name should be lowercase to follow PEP 8 naming conventions,,172,    C = DF['close'],"[220, 220, 220, 327, 796, 36323, 17816, 19836, 20520]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",0.5,190,best_practice,30,Consider adding a docstring to describe the function's purpose and parameters,,181,    H = DF['high'],"[220, 220, 220, 367, 796, 36323, 17816, 8929, 20520]"
‚ö†Ô∏è SAST Risk (Low): Assumes DF is a DataFrame or Series without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 36323, 318, 257, 6060, 19778, 393, 7171, 1231, 21201]",1.0,199,sast_risk,31,Assumes DF is a DataFrame or Series without validation,Low,190,    L = DF['low'],"[220, 220, 220, 406, 796, 36323, 17816, 9319, 20520]"
‚ö†Ô∏è SAST Risk (Low): Assumes N is a valid integer without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 399, 318, 257, 4938, 18253, 1231, 21201]",0.5,235,sast_risk,32,Assumes N is a valid integer without validation,Low,199,"    TR1 = MAX(MAX((H - L), ABS(REF(C, 1) - H)), ABS(REF(C, 1) - L))","[220, 220, 220, 7579, 16, 796, 25882, 7, 22921, 19510, 39, 532, 406, 828, 29950, 7, 31688, 7, 34, 11, 352, 8, 532, 367, 36911, 29950, 7, 31688, 7, 34, 11, 352, 8, 532, 406, 4008]"
‚úÖ Best Practice: Function name should be lowercase to follow PEP 8 naming conventions,"[26486, 227, 6705, 19939, 25, 15553, 1438, 815, 307, 2793, 7442, 284, 1061, 350, 8905, 807, 19264, 21396]",0.5,244,best_practice,30,Function name should be lowercase to follow PEP 8 naming conventions,,235,    H = DF['high'],"[220, 220, 220, 367, 796, 36323, 17816, 8929, 20520]"
üß† ML Signal: Use of built-in abs function to calculate absolute value,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3170, 12, 259, 2352, 2163, 284, 15284, 4112, 1988]",0.5,280,ml_signal,32,Use of built-in abs function to calculate absolute value,,244,"    TR1 = MAX(MAX((H - L), ABS(REF(C, 1) - H)), ABS(REF(C, 1) - L))","[220, 220, 220, 7579, 16, 796, 25882, 7, 22921, 19510, 39, 532, 406, 828, 29950, 7, 31688, 7, 34, 11, 352, 8, 532, 367, 36911, 29950, 7, 31688, 7, 34, 11, 352, 8, 532, 406, 4008]"
‚úÖ Best Practice: Function names should be lowercase to follow PEP 8 naming conventions,"[26486, 227, 6705, 19939, 25, 15553, 3891, 815, 307, 2793, 7442, 284, 1061, 350, 8905, 807, 19264, 21396]",1.0,316,best_practice,32,Function names should be lowercase to follow PEP 8 naming conventions,,280,"    TR1 = MAX(MAX((H - L), ABS(REF(C, 1) - H)), ABS(REF(C, 1) - L))","[220, 220, 220, 7579, 16, 796, 25882, 7, 22921, 19510, 39, 532, 406, 828, 29950, 7, 31688, 7, 34, 11, 352, 8, 532, 367, 36911, 29950, 7, 31688, 7, 34, 11, 352, 8, 532, 406, 4008]"
"‚ö†Ô∏è SAST Risk (Low): IF is not a built-in Python function, potential misuse or typo","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 16876, 318, 407, 257, 3170, 12, 259, 11361, 2163, 11, 2785, 29169, 393, 46517]",0.5,322,sast_risk,34,"IF is not a built-in Python function, potential misuse or typo",Low,316,    return atr,"[220, 220, 220, 1441, 379, 81]"
‚úÖ Best Practice: Function names should be lowercase according to PEP 8.,"[26486, 227, 6705, 19939, 25, 15553, 3891, 815, 307, 2793, 7442, 1864, 284, 350, 8905, 807, 13]",1.0,322,best_practice,35,Function names should be lowercase according to PEP 8.,,322,,[]
‚úÖ Best Practice: Variable names should be lowercase according to PEP 8.,"[26486, 227, 6705, 19939, 25, 35748, 3891, 815, 307, 2793, 7442, 1864, 284, 350, 8905, 807, 13]",1.0,330,best_practice,37,Variable names should be lowercase according to PEP 8.,,322,"def HHV(DF, N):","[4299, 47138, 53, 7, 8068, 11, 399, 2599]"
"‚ö†Ô∏è SAST Risk (High): Use of undefined function 'IF', which could lead to execution of arbitrary code if 'IF' is user-defined.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 28721, 2163, 705, 5064, 3256, 543, 714, 1085, 284, 9706, 286, 14977, 2438, 611, 705, 5064, 6, 318, 2836, 12, 23211, 13]",1.0,347,sast_risk,38,"Use of undefined function 'IF', which could lead to execution of arbitrary code if 'IF' is user-defined.",High,330,"    return pd.Series.rolling(DF, N).max()","[220, 220, 220, 1441, 279, 67, 13, 27996, 13, 18886, 7, 8068, 11, 399, 737, 9806, 3419]"
"üß† ML Signal: Return statements indicate the output of a function, useful for understanding function behavior.","[8582, 100, 254, 10373, 26484, 25, 8229, 6299, 7603, 262, 5072, 286, 257, 2163, 11, 4465, 329, 4547, 2163, 4069, 13]",1.0,347,ml_signal,40,"Return statements indicate the output of a function, useful for understanding function behavior.",,347,,[]
‚ö†Ô∏è SAST Risk (Low): Function name 'IF' is too generic and may conflict with built-in or other library functions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 15553, 1438, 705, 5064, 6, 318, 1165, 14276, 290, 743, 5358, 351, 3170, 12, 259, 393, 584, 5888, 5499, 13]",1.0,364,sast_risk,38,Function name 'IF' is too generic and may conflict with built-in or other library functions.,Low,347,"    return pd.Series.rolling(DF, N).max()","[220, 220, 220, 1441, 279, 67, 13, 27996, 13, 18886, 7, 8068, 11, 399, 737, 9806, 3419]"
‚ö†Ô∏è SAST Risk (Low): Use of np.where without input validation may lead to unexpected behavior if inputs are not as expected.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 45941, 13, 3003, 1231, 5128, 21201, 743, 1085, 284, 10059, 4069, 611, 17311, 389, 407, 355, 2938, 13]",1.0,364,sast_risk,40,Use of np.where without input validation may lead to unexpected behavior if inputs are not as expected.,Low,364,,[]
‚úÖ Best Practice: Consider using enumerate for better readability and to avoid potential index errors.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 27056, 378, 329, 1365, 1100, 1799, 290, 284, 3368, 2785, 6376, 8563, 13]",1.0,381,best_practice,42,Consider using enumerate for better readability and to avoid potential index errors.,,364,"    return pd.Series.rolling(DF, N).min()","[220, 220, 220, 1441, 279, 67, 13, 27996, 13, 18886, 7, 8068, 11, 399, 737, 1084, 3419]"
‚ö†Ô∏è SAST Risk (Low): Directly modifying input list V1 can lead to unintended side effects outside the function.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 30620, 5128, 1351, 569, 16, 460, 1085, 284, 30261, 1735, 3048, 2354, 262, 2163, 13]",1.0,381,sast_risk,44,Directly modifying input list V1 can lead to unintended side effects outside the function.,Low,381,,[]
"üß† ML Signal: Function definition with parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",0.5,381,ml_signal,43,"Function definition with parameters, useful for learning function usage patterns",,381,,[]
"üß† ML Signal: Use of DataFrame method 'diff', common in data manipulation tasks","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 6060, 19778, 2446, 705, 26069, 3256, 2219, 287, 1366, 17512, 8861]",0.5,388,ml_signal,45,"Use of DataFrame method 'diff', common in data manipulation tasks",,381,"def SUM(DF, N):","[4299, 35683, 7, 8068, 11, 399, 2599]"
‚úÖ Best Practice: Reassigning 'var' to improve readability and maintainability,"[26486, 227, 6705, 19939, 25, 797, 562, 38944, 705, 7785, 6, 284, 2987, 1100, 1799, 290, 5529, 1799]",0.5,388,best_practice,47,Reassigning 'var' to improve readability and maintainability,,388,,[]
"üß† ML Signal: Return statement, useful for understanding function output patterns","[8582, 100, 254, 10373, 26484, 25, 8229, 2643, 11, 4465, 329, 4547, 2163, 5072, 7572]",0.5,393,ml_signal,49,"Return statement, useful for understanding function output patterns",,388,def ABS(DF):,"[4299, 29950, 7, 8068, 2599]"
üß† ML Signal: Function definition with parameters indicating a pattern for statistical computation,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 12739, 257, 3912, 329, 13905, 29964]",0.5,393,ml_signal,47,Function definition with parameters indicating a pattern for statistical computation,,393,,[]
"‚úÖ Best Practice: Function name should be more descriptive, e.g., calculate_standard_deviation","[26486, 227, 6705, 19939, 25, 15553, 1438, 815, 307, 517, 35644, 11, 304, 13, 70, 1539, 15284, 62, 20307, 62, 7959, 3920]",0.5,393,best_practice,48,"Function name should be more descriptive, e.g., calculate_standard_deviation",,393,,[]
"‚úÖ Best Practice: Parameter names should be more descriptive, e.g., dataframe and window_size","[26486, 227, 6705, 19939, 25, 25139, 2357, 3891, 815, 307, 517, 35644, 11, 304, 13, 70, 1539, 1366, 14535, 290, 4324, 62, 7857]",0.5,398,best_practice,49,"Parameter names should be more descriptive, e.g., dataframe and window_size",,393,def ABS(DF):,"[4299, 29950, 7, 8068, 2599]"
"‚ö†Ô∏è SAST Risk (Low): Assumes DF is a DataFrame, which may not be validated","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 36323, 318, 257, 6060, 19778, 11, 543, 743, 407, 307, 31031]",1.0,406,sast_risk,50,"Assumes DF is a DataFrame, which may not be validated",Low,398,    return abs(DF),"[220, 220, 220, 1441, 2352, 7, 8068, 8]"
"‚ö†Ô∏è SAST Risk (Low): Assumes N is a valid integer for window size, which may not be validated","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 399, 318, 257, 4938, 18253, 329, 4324, 2546, 11, 543, 743, 407, 307, 31031]",0.5,406,sast_risk,51,"Assumes N is a valid integer for window size, which may not be validated",Low,406,,[]
"‚úÖ Best Practice: Import statements for required libraries (e.g., pandas) are missing","[26486, 227, 6705, 19939, 25, 17267, 6299, 329, 2672, 12782, 357, 68, 13, 70, 1539, 19798, 292, 8, 389, 4814]",0.5,406,best_practice,52,"Import statements for required libraries (e.g., pandas) are missing",,406,,[]
"üß† ML Signal: Function definition with parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,411,ml_signal,49,"Function definition with parameters, useful for learning function usage patterns",,406,def ABS(DF):,"[4299, 29950, 7, 8068, 2599]"
"üß† ML Signal: Calling a function with specific arguments, useful for learning function call patterns","[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2163, 351, 2176, 7159, 11, 4465, 329, 4673, 2163, 869, 7572]",1.0,411,ml_signal,51,"Calling a function with specific arguments, useful for learning function call patterns",,411,,[]
"üß† ML Signal: Calling a function with specific arguments, useful for learning function call patterns","[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2163, 351, 2176, 7159, 11, 4465, 329, 4673, 2163, 869, 7572]",1.0,418,ml_signal,53,"Calling a function with specific arguments, useful for learning function call patterns",,411,"def MAX(A, B):","[4299, 25882, 7, 32, 11, 347, 2599]"
"üß† ML Signal: Arithmetic operation on variables, useful for learning data manipulation patterns","[8582, 100, 254, 10373, 26484, 25, 943, 29848, 4905, 319, 9633, 11, 4465, 329, 4673, 1366, 17512, 7572]",1.0,423,ml_signal,55,"Arithmetic operation on variables, useful for learning data manipulation patterns",,418,    return var,"[220, 220, 220, 1441, 1401]"
"üß† ML Signal: Calling a function with specific arguments, useful for learning function call patterns","[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2163, 351, 2176, 7159, 11, 4465, 329, 4673, 2163, 869, 7572]",1.0,423,ml_signal,57,"Calling a function with specific arguments, useful for learning function call patterns",,423,,[]
"üß† ML Signal: Arithmetic operation on variables, useful for learning data manipulation patterns","[8582, 100, 254, 10373, 26484, 25, 943, 29848, 4905, 319, 9633, 11, 4465, 329, 4673, 1366, 17512, 7572]",1.0,438,ml_signal,59,"Arithmetic operation on variables, useful for learning data manipulation patterns",,423,"    var = IF(A < B, A, B)","[220, 220, 220, 1401, 796, 16876, 7, 32, 1279, 347, 11, 317, 11, 347, 8]"
"üß† ML Signal: Dictionary creation, useful for learning data structure usage patterns","[8582, 100, 254, 10373, 26484, 25, 28261, 6282, 11, 4465, 329, 4673, 1366, 4645, 8748, 7572]",1.0,438,ml_signal,61,"Dictionary creation, useful for learning data structure usage patterns",,438,,[]
"‚ö†Ô∏è SAST Risk (Low): Assumes 'pd' is imported and is pandas, could raise NameError if not","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 30094, 6, 318, 17392, 290, 318, 19798, 292, 11, 714, 5298, 6530, 12331, 611, 407]",0.5,450,sast_risk,63,"Assumes 'pd' is imported and is pandas, could raise NameError if not",Low,438,"def IF(COND, V1, V2):","[4299, 16876, 7, 10943, 35, 11, 569, 16, 11, 569, 17, 2599]"
"‚úÖ Best Practice: Explicit return of a variable, improves readability","[26486, 227, 6705, 19939, 25, 11884, 1441, 286, 257, 7885, 11, 19575, 1100, 1799]",0.5,463,best_practice,65,"Explicit return of a variable, improves readability",,450,    for i in range(len(var)):,"[220, 220, 220, 329, 1312, 287, 2837, 7, 11925, 7, 7785, 8, 2599]"
"üß† ML Signal: Function definition for a financial indicator, useful for feature extraction in ML models","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 329, 257, 3176, 16916, 11, 4465, 329, 3895, 22236, 287, 10373, 4981]",1.0,470,ml_signal,58,"Function definition for a financial indicator, useful for feature extraction in ML models",,463,"def MIN(A, B):","[4299, 20625, 7, 32, 11, 347, 2599]"
"üß† ML Signal: Usage of DataFrame columns, common in data preprocessing for ML","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 15180, 11, 2219, 287, 1366, 662, 36948, 329, 10373]",0.5,475,ml_signal,60,"Usage of DataFrame columns, common in data preprocessing for ML",,470,    return var,"[220, 220, 220, 1441, 1401]"
"‚ö†Ô∏è SAST Risk (Low): Potential division by zero if HHV(H, N) equals LLV(L, N)","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 47138, 53, 7, 39, 11, 399, 8, 21767, 27140, 53, 7, 43, 11, 399, 8]",1.0,493,sast_risk,64,"Potential division by zero if HHV(H, N) equals LLV(L, N)",Low,475,"    var = np.where(COND, V1, V2)","[220, 220, 220, 1401, 796, 45941, 13, 3003, 7, 10943, 35, 11, 569, 16, 11, 569, 17, 8]"
"üß† ML Signal: Calculation of moving averages, often used in time series analysis","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 3867, 25694, 11, 1690, 973, 287, 640, 2168, 3781]",0.5,510,ml_signal,66,"Calculation of moving averages, often used in time series analysis",,493,        V1[i] = var[i],"[220, 220, 220, 220, 220, 220, 220, 569, 16, 58, 72, 60, 796, 1401, 58, 72, 60]"
‚úÖ Best Practice: Use descriptive variable names for clarity,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 16287]",0.5,518,best_practice,70,Use descriptive variable names for clarity,,510,"def REF(DF, N):","[4299, 4526, 37, 7, 8068, 11, 399, 2599]"
"üß† ML Signal: Conversion to DataFrame, a common step in data preparation for ML","[8582, 100, 254, 10373, 26484, 25, 44101, 284, 6060, 19778, 11, 257, 2219, 2239, 287, 1366, 11824, 329, 10373]",0.5,526,ml_signal,72,"Conversion to DataFrame, a common step in data preparation for ML",,518,    var = DF - var,"[220, 220, 220, 1401, 796, 36323, 532, 1401]"
"üß† ML Signal: Function definition with parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,526,ml_signal,69,"Function definition with parameters, useful for learning function usage patterns",,526,,[]
"üß† ML Signal: Accessing DataFrame column, common operation in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 5721, 11, 2219, 4905, 287, 1366, 7587]",1.0,537,ml_signal,71,"Accessing DataFrame column, common operation in data processing",,526,    var = DF.diff(N),"[220, 220, 220, 1401, 796, 36323, 13, 26069, 7, 45, 8]"
"üß† ML Signal: Calculation involving moving average, common in financial data analysis","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 7411, 3867, 2811, 11, 2219, 287, 3176, 1366, 3781]",1.0,542,ml_signal,73,"Calculation involving moving average, common in financial data analysis",,537,    return var,"[220, 220, 220, 1441, 1401]"
"üß† ML Signal: Exponential moving average calculation, common in time series analysis","[8582, 100, 254, 10373, 26484, 25, 5518, 35470, 3867, 2811, 17952, 11, 2219, 287, 640, 2168, 3781]",1.0,542,ml_signal,75,"Exponential moving average calculation, common in time series analysis",,542,,[]
‚úÖ Best Practice: Use of descriptive dictionary keys for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 22155, 8251, 329, 16287]",1.0,559,best_practice,77,Use of descriptive dictionary keys for clarity,,542,"    return pd.Series.rolling(DF, N).std()","[220, 220, 220, 1441, 279, 67, 13, 27996, 13, 18886, 7, 8068, 11, 399, 737, 19282, 3419]"
‚úÖ Best Practice: Converting dictionary to DataFrame for structured data handling,"[26486, 227, 6705, 19939, 25, 35602, 889, 22155, 284, 6060, 19778, 329, 20793, 1366, 9041]",1.0,559,best_practice,79,Converting dictionary to DataFrame for structured data handling,,559,,[]
"üß† ML Signal: Returning a DataFrame, common pattern in data processing functions","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 11, 2219, 3912, 287, 1366, 7587, 5499]",1.0,575,ml_signal,81,"Returning a DataFrame, common pattern in data processing functions",,559,"    EMAFAST = EMA(DF, FAST)","[220, 220, 220, 412, 5673, 37, 11262, 796, 412, 5673, 7, 8068, 11, 376, 11262, 8]"
"üß† ML Signal: Function definition with multiple parameters, indicating a pattern for ML model input","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 3294, 10007, 11, 12739, 257, 3912, 329, 10373, 2746, 5128]",1.0,582,ml_signal,76,"Function definition with multiple parameters, indicating a pattern for ML model input",,575,"def STD(DF, N):","[4299, 48571, 7, 8068, 11, 399, 2599]"
"üß† ML Signal: Accessing DataFrame column, common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 5721, 11, 2219, 3912, 287, 1366, 7587]",0.5,582,ml_signal,78,"Accessing DataFrame column, common pattern in data processing",,582,,[]
"üß† ML Signal: Use of moving average function, common in financial data analysis","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3867, 2811, 2163, 11, 2219, 287, 3176, 1366, 3781]",1.0,596,ml_signal,80,"Use of moving average function, common in financial data analysis",,582,"def MACD(DF, FAST, SLOW, MID):","[4299, 20582, 35, 7, 8068, 11, 376, 11262, 11, 12419, 3913, 11, 25269, 2599]"
‚úÖ Best Practice: Use of descriptive variable names for dictionary keys,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 329, 22155, 8251]",0.5,612,best_practice,82,Use of descriptive variable names for dictionary keys,,596,"    EMASLOW = EMA(DF, SLOW)","[220, 220, 220, 17228, 1921, 43, 3913, 796, 412, 5673, 7, 8068, 11, 12419, 3913, 8]"
‚úÖ Best Practice: Creating a DataFrame from a dictionary for structured data handling,"[26486, 227, 6705, 19939, 25, 30481, 257, 6060, 19778, 422, 257, 22155, 329, 20793, 1366, 9041]",1.0,625,best_practice,84,Creating a DataFrame from a dictionary for structured data handling,,612,"    DEA = EMA(DIFF, MID)","[220, 220, 220, 28647, 796, 412, 5673, 7, 35, 29267, 11, 25269, 8]"
"üß† ML Signal: Returning a DataFrame, common pattern in data processing functions","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 11, 2219, 3912, 287, 1366, 7587, 5499]",0.5,652,ml_signal,86,"Returning a DataFrame, common pattern in data processing functions",,625,"    DICT = {'DIFF': DIFF, 'DEA': DEA, 'MACD': MACD}","[220, 220, 220, 360, 18379, 796, 1391, 6, 35, 29267, 10354, 360, 29267, 11, 705, 7206, 32, 10354, 28647, 11, 705, 44721, 35, 10354, 20582, 35, 92]"
"üß† ML Signal: Function definition with multiple parameters, indicating a complex operation","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 3294, 10007, 11, 12739, 257, 3716, 4905]",1.0,668,ml_signal,82,"Function definition with multiple parameters, indicating a complex operation",,652,"    EMASLOW = EMA(DF, SLOW)","[220, 220, 220, 17228, 1921, 43, 3913, 796, 412, 5673, 7, 8068, 11, 12419, 3913, 8]"
"üß† ML Signal: Usage of a custom function BBI, indicating a specific calculation pattern","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 2163, 347, 3483, 11, 12739, 257, 2176, 17952, 3912]",1.0,681,ml_signal,84,"Usage of a custom function BBI, indicating a specific calculation pattern",,668,"    DEA = EMA(DIFF, MID)","[220, 220, 220, 28647, 796, 412, 5673, 7, 35, 29267, 11, 25269, 8]"
üß† ML Signal: Calculation of upper band using a multiplier and standard deviation,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 6727, 4097, 1262, 257, 33090, 290, 3210, 28833]",0.5,708,ml_signal,86,Calculation of upper band using a multiplier and standard deviation,,681,"    DICT = {'DIFF': DIFF, 'DEA': DEA, 'MACD': MACD}","[220, 220, 220, 360, 18379, 796, 1391, 6, 35, 29267, 10354, 360, 29267, 11, 705, 7206, 32, 10354, 28647, 11, 705, 44721, 35, 10354, 20582, 35, 92]"
üß† ML Signal: Calculation of lower band using a multiplier and standard deviation,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 2793, 4097, 1262, 257, 33090, 290, 3210, 28833]",0.5,714,ml_signal,88,Calculation of lower band using a multiplier and standard deviation,,708,    return VAR,"[220, 220, 220, 1441, 569, 1503]"
‚úÖ Best Practice: Use of a dictionary to organize related data,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 22155, 284, 16481, 3519, 1366]",1.0,714,best_practice,90,Use of a dictionary to organize related data,,714,,[]
‚úÖ Best Practice: Conversion of dictionary to DataFrame for structured data handling,"[26486, 227, 6705, 19939, 25, 44101, 286, 22155, 284, 6060, 19778, 329, 20793, 1366, 9041]",1.0,723,best_practice,92,Conversion of dictionary to DataFrame for structured data handling,,714,    C = DF['close'],"[220, 220, 220, 327, 796, 36323, 17816, 19836, 20520]"
‚úÖ Best Practice: Explicit return of the DataFrame for clarity,"[26486, 227, 6705, 19939, 25, 11884, 1441, 286, 262, 6060, 19778, 329, 16287]",0.5,732,best_practice,94,Explicit return of the DataFrame for clarity,,723,    L = DF['low'],"[220, 220, 220, 406, 796, 36323, 17816, 9319, 20520]"
"üß† ML Signal: Function definition with multiple parameters, indicating a pattern for complex calculations","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 3294, 10007, 11, 12739, 257, 3912, 329, 3716, 16765]",1.0,732,ml_signal,89,"Function definition with multiple parameters, indicating a pattern for complex calculations",,732,,[]
"üß† ML Signal: Accessing a specific column from a DataFrame, common in data processing tasks","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 257, 2176, 5721, 422, 257, 6060, 19778, 11, 2219, 287, 1366, 7587, 8861]",1.0,746,ml_signal,91,"Accessing a specific column from a DataFrame, common in data processing tasks",,732,"def KDJ(DF, N, M1, M2):","[4299, 509, 35028, 7, 8068, 11, 399, 11, 337, 16, 11, 337, 17, 2599]"
"üß† ML Signal: Use of Exponential Moving Average (EMA), a common pattern in financial data analysis","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 5518, 35470, 26768, 13475, 357, 27630, 828, 257, 2219, 3912, 287, 3176, 1366, 3781]",1.0,755,ml_signal,93,"Use of Exponential Moving Average (EMA), a common pattern in financial data analysis",,746,    H = DF['high'],"[220, 220, 220, 367, 796, 36323, 17816, 8929, 20520]"
üß† ML Signal: Repeated pattern of EMA calculations with different parameters,"[8582, 100, 254, 10373, 26484, 25, 30558, 515, 3912, 286, 412, 5673, 16765, 351, 1180, 10007]",1.0,790,ml_signal,95,Repeated pattern of EMA calculations with different parameters,,755,"    RSV = (C - LLV(L, N)) / (HHV(H, N) - LLV(L, N)) * 100","[220, 220, 220, 19340, 53, 796, 357, 34, 532, 27140, 53, 7, 43, 11, 399, 4008, 1220, 357, 16768, 53, 7, 39, 11, 399, 8, 532, 27140, 53, 7, 43, 11, 399, 4008, 1635, 1802]"
‚úÖ Best Practice: Using a dictionary to organize related variables,"[26486, 227, 6705, 19939, 25, 8554, 257, 22155, 284, 16481, 3519, 9633]",1.0,796,best_practice,101,Using a dictionary to organize related variables,,790,    return VAR,"[220, 220, 220, 1441, 569, 1503]"
‚úÖ Best Practice: Converting a dictionary to a DataFrame for structured data handling,"[26486, 227, 6705, 19939, 25, 35602, 889, 257, 22155, 284, 257, 6060, 19778, 329, 20793, 1366, 9041]",1.0,821,best_practice,104,Converting a dictionary to a DataFrame for structured data handling,,796,"def OSC(DF, N, M):  # ÂèòÂä®ÈÄüÁéáÁ∫ø","[4299, 440, 6173, 7, 8068, 11, 399, 11, 337, 2599, 220, 1303, 10263, 237, 246, 27950, 101, 34460, 253, 163, 236, 229, 163, 118, 123]"
"‚úÖ Best Practice: Returning a DataFrame, which is a common practice for data processing functions","[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 11, 543, 318, 257, 2219, 3357, 329, 1366, 7587, 5499]",0.5,837,best_practice,106,"Returning a DataFrame, which is a common practice for data processing functions",,821,"    OS = (C - MA(C, N)) * 100","[220, 220, 220, 7294, 796, 357, 34, 532, 8779, 7, 34, 11, 399, 4008, 1635, 1802]"
üß† ML Signal: Function definition with financial indicator calculation,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 3176, 16916, 17952]",0.5,843,ml_signal,101,Function definition with financial indicator calculation,,837,    return VAR,"[220, 220, 220, 1441, 569, 1503]"
üß† ML Signal: Accessing 'close' column from DataFrame,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 705, 19836, 6, 5721, 422, 6060, 19778]",0.5,843,ml_signal,103,Accessing 'close' column from DataFrame,,843,,[]
üß† ML Signal: Calculation of moving average,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 3867, 2811]",1.0,852,ml_signal,105,Calculation of moving average,,843,    C = DF['close'],"[220, 220, 220, 327, 796, 36323, 17816, 19836, 20520]"
üß† ML Signal: Calculation of upper Bollinger Band,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 6727, 43479, 3889, 10243]",1.0,866,ml_signal,107,Calculation of upper Bollinger Band,,852,"    MAOSC = EMA(OS, M)","[220, 220, 220, 8779, 2640, 34, 796, 412, 5673, 7, 2640, 11, 337, 8]"
üß† ML Signal: Calculation of lower Bollinger Band,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 2793, 43479, 3889, 10243]",1.0,881,ml_signal,109,Calculation of lower Bollinger Band,,866,    VAR = pd.DataFrame(DICT),"[220, 220, 220, 569, 1503, 796, 279, 67, 13, 6601, 19778, 7, 35, 18379, 8]"
‚úÖ Best Practice: Use of descriptive dictionary keys for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 22155, 8251, 329, 16287]",0.5,881,best_practice,111,Use of descriptive dictionary keys for clarity,,881,,[]
‚úÖ Best Practice: Conversion of dictionary to DataFrame for structured data handling,"[26486, 227, 6705, 19939, 25, 44101, 286, 22155, 284, 6060, 19778, 329, 20793, 1366, 9041]",0.5,911,best_practice,113,Conversion of dictionary to DataFrame for structured data handling,,881,"def BBI(DF, N1, N2, N3, N4):  # Â§öÁ©∫ÊåáÊ†á","[4299, 347, 3483, 7, 8068, 11, 399, 16, 11, 399, 17, 11, 399, 18, 11, 399, 19, 2599, 220, 1303, 36469, 248, 163, 102, 118, 162, 234, 229, 43718, 229]"
‚úÖ Best Practice: Returning a DataFrame for consistency in data handling,"[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 329, 15794, 287, 1366, 9041]",0.5,951,best_practice,115,Returning a DataFrame for consistency in data handling,,911,"    bbi = (MA(C, N1) + MA(C, N2) + MA(C, N3) + MA(C, N4)) / 4","[220, 220, 220, 275, 8482, 796, 357, 5673, 7, 34, 11, 399, 16, 8, 1343, 8779, 7, 34, 11, 399, 17, 8, 1343, 8779, 7, 34, 11, 399, 18, 8, 1343, 8779, 7, 34, 11, 399, 19, 4008, 1220, 604]"
"üß† ML Signal: Function definition with parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,966,ml_signal,109,"Function definition with parameters, useful for learning function usage patterns",,951,    VAR = pd.DataFrame(DICT),"[220, 220, 220, 569, 1503, 796, 279, 67, 13, 6601, 19778, 7, 35, 18379, 8]"
"üß† ML Signal: Accessing DataFrame column, common operation in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 5721, 11, 2219, 4905, 287, 1366, 7587]",1.0,966,ml_signal,111,"Accessing DataFrame column, common operation in data processing",,966,,[]
"‚ö†Ô∏è SAST Risk (Low): Potential division by zero if REF(C, N) returns zero","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 4526, 37, 7, 34, 11, 399, 8, 5860, 6632]",0.5,996,sast_risk,113,"Potential division by zero if REF(C, N) returns zero",Low,966,"def BBI(DF, N1, N2, N3, N4):  # Â§öÁ©∫ÊåáÊ†á","[4299, 347, 3483, 7, 8068, 11, 399, 16, 11, 399, 17, 11, 399, 18, 11, 399, 19, 2599, 220, 1303, 36469, 248, 163, 102, 118, 162, 234, 229, 43718, 229]"
"üß† ML Signal: Calculation of moving average, common in time series analysis","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 3867, 2811, 11, 2219, 287, 640, 2168, 3781]",0.5,1036,ml_signal,115,"Calculation of moving average, common in time series analysis",,996,"    bbi = (MA(C, N1) + MA(C, N2) + MA(C, N3) + MA(C, N4)) / 4","[220, 220, 220, 275, 8482, 796, 357, 5673, 7, 34, 11, 399, 16, 8, 1343, 8779, 7, 34, 11, 399, 17, 8, 1343, 8779, 7, 34, 11, 399, 18, 8, 1343, 8779, 7, 34, 11, 399, 19, 4008, 1220, 604]"
"üß† ML Signal: Dictionary creation, useful for learning data structuring patterns","[8582, 100, 254, 10373, 26484, 25, 28261, 6282, 11, 4465, 329, 4673, 1366, 2878, 870, 7572]",1.0,1051,ml_signal,117,"Dictionary creation, useful for learning data structuring patterns",,1036,    VAR = pd.DataFrame(DICT),"[220, 220, 220, 569, 1503, 796, 279, 67, 13, 6601, 19778, 7, 35, 18379, 8]"
"üß† ML Signal: DataFrame creation from dictionary, common in data manipulation","[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 6282, 422, 22155, 11, 2219, 287, 1366, 17512]",1.0,1051,ml_signal,119,"DataFrame creation from dictionary, common in data manipulation",,1051,,[]
"‚úÖ Best Practice: Explicit return of the DataFrame, improves readability","[26486, 227, 6705, 19939, 25, 11884, 1441, 286, 262, 6060, 19778, 11, 19575, 1100, 1799]",1.0,1090,best_practice,121,"Explicit return of the DataFrame, improves readability",,1051,"def BBIBOLL(DF, N1, N2, N3, N4, N, M):  # Â§öÁ©∫Â∏ÉÊûóÁ∫ø","[4299, 347, 3483, 8202, 3069, 7, 8068, 11, 399, 16, 11, 399, 17, 11, 399, 18, 11, 399, 19, 11, 399, 11, 337, 2599, 220, 1303, 36469, 248, 163, 102, 118, 30585, 225, 162, 252, 245, 163, 118, 123]"
"üß† ML Signal: Function definition with parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,1104,ml_signal,116,"Function definition with parameters, useful for learning function usage patterns",,1090,    DICT = {'BBI': bbi},"[220, 220, 220, 360, 18379, 796, 1391, 6, 33, 3483, 10354, 275, 8482, 92]"
"üß† ML Signal: Accessing DataFrame column, common operation in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 5721, 11, 2219, 4905, 287, 1366, 7587]",1.0,1110,ml_signal,118,"Accessing DataFrame column, common operation in data processing",,1104,    return VAR,"[220, 220, 220, 1441, 569, 1503]"
"üß† ML Signal: Subtraction operation on series, useful for learning arithmetic operations on data","[8582, 100, 254, 10373, 26484, 25, 3834, 83, 7861, 4905, 319, 2168, 11, 4465, 329, 4673, 34768, 4560, 319, 1366]",1.0,1110,ml_signal,120,"Subtraction operation on series, useful for learning arithmetic operations on data",,1110,,[]
"üß† ML Signal: Function call pattern, useful for learning how functions are used","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 11, 4465, 329, 4673, 703, 5499, 389, 973]",1.0,1135,ml_signal,122,"Function call pattern, useful for learning how functions are used",,1110,"    bbiboll = BBI(DF, N1, N2, N3, N4)","[220, 220, 220, 275, 65, 571, 692, 796, 347, 3483, 7, 8068, 11, 399, 16, 11, 399, 17, 11, 399, 18, 11, 399, 19, 8]"
"üß† ML Signal: Dictionary creation, useful for learning data structuring patterns","[8582, 100, 254, 10373, 26484, 25, 28261, 6282, 11, 4465, 329, 4673, 1366, 2878, 870, 7572]",1.0,1155,ml_signal,124,"Dictionary creation, useful for learning data structuring patterns",,1135,"    DOWN = bbiboll - M * STD(bbiboll, N)","[220, 220, 220, 30320, 796, 275, 65, 571, 692, 532, 337, 1635, 48571, 7, 11848, 571, 692, 11, 399, 8]"
"üß† ML Signal: DataFrame creation from dictionary, common in data manipulation","[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 6282, 422, 22155, 11, 2219, 287, 1366, 17512]",1.0,1170,ml_signal,126,"DataFrame creation from dictionary, common in data manipulation",,1155,    VAR = pd.DataFrame(DICT),"[220, 220, 220, 569, 1503, 796, 279, 67, 13, 6601, 19778, 7, 35, 18379, 8]"
"‚úÖ Best Practice: Explicit return of a variable, improves readability","[26486, 227, 6705, 19939, 25, 11884, 1441, 286, 257, 7885, 11, 19575, 1100, 1799]",1.0,1170,best_practice,128,"Explicit return of a variable, improves readability",,1170,,[]
"üß† ML Signal: Function definition with parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",0.5,1191,ml_signal,123,"Function definition with parameters, useful for learning function usage patterns",,1170,"    UPER = bbiboll + M * STD(bbiboll, N)","[220, 220, 220, 15958, 1137, 796, 275, 65, 571, 692, 1343, 337, 1635, 48571, 7, 11848, 571, 692, 11, 399, 8]"
"üß† ML Signal: Accessing DataFrame columns, common operation in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 4905, 287, 1366, 7587]",0.5,1221,ml_signal,125,"Accessing DataFrame columns, common operation in data processing",,1191,"    DICT = {'BBIBOLL': bbiboll, 'UPER': UPER, 'DOWN': DOWN}","[220, 220, 220, 360, 18379, 796, 1391, 6, 33, 3483, 8202, 3069, 10354, 275, 65, 571, 692, 11, 705, 8577, 1137, 10354, 15958, 1137, 11, 705, 41925, 10354, 30320, 92]"
"üß† ML Signal: Accessing DataFrame columns, common operation in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 4905, 287, 1366, 7587]",0.5,1227,ml_signal,127,"Accessing DataFrame columns, common operation in data processing",,1221,    return VAR,"[220, 220, 220, 1441, 569, 1503]"
"üß† ML Signal: Accessing DataFrame columns, common operation in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 4905, 287, 1366, 7587]",0.5,1227,ml_signal,129,"Accessing DataFrame columns, common operation in data processing",,1227,,[]
"üß† ML Signal: Accessing DataFrame columns, common operation in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 4905, 287, 1366, 7587]",0.5,1236,ml_signal,131,"Accessing DataFrame columns, common operation in data processing",,1227,    C = DF['close'],"[220, 220, 220, 327, 796, 36323, 17816, 19836, 20520]"
"üß† ML Signal: Calculation of typical price, a common financial metric","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 7226, 2756, 11, 257, 2219, 3176, 18663]",0.5,1275,ml_signal,133,"Calculation of typical price, a common financial metric",,1236,"    PBX2 = (EMA(C, N2) + EMA(C, 2 * N2) + EMA(C, 4 * N2)) / 3","[220, 220, 220, 30524, 55, 17, 796, 357, 27630, 7, 34, 11, 399, 17, 8, 1343, 412, 5673, 7, 34, 11, 362, 1635, 399, 17, 8, 1343, 412, 5673, 7, 34, 11, 604, 1635, 399, 17, 4008, 1220, 513]"
"‚ö†Ô∏è SAST Risk (Low): Use of undefined functions SUM, IF, REF, potential NameError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 5499, 35683, 11, 16876, 11, 4526, 37, 11, 2785, 6530, 12331]",1.0,1314,sast_risk,135,"Use of undefined functions SUM, IF, REF, potential NameError",Low,1275,"    PBX4 = (EMA(C, N4) + EMA(C, 2 * N4) + EMA(C, 4 * N4)) / 3","[220, 220, 220, 30524, 55, 19, 796, 357, 27630, 7, 34, 11, 399, 19, 8, 1343, 412, 5673, 7, 34, 11, 362, 1635, 399, 19, 8, 1343, 412, 5673, 7, 34, 11, 604, 1635, 399, 19, 4008, 1220, 513]"
"üß† ML Signal: Calculation of MFI, a common financial indicator","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 337, 11674, 11, 257, 2219, 3176, 16916]",0.5,1348,ml_signal,138,"Calculation of MFI, a common financial indicator",,1314,"    DICT = {'PBX1': PBX1, 'PBX2': PBX2, 'PBX3': PBX3,","[220, 220, 220, 360, 18379, 796, 1391, 6, 49079, 55, 16, 10354, 30524, 55, 16, 11, 705, 49079, 55, 17, 10354, 30524, 55, 17, 11, 705, 49079, 55, 18, 10354, 30524, 55, 18, 11]"
‚úÖ Best Practice: Use of descriptive variable names for dictionary keys,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 329, 22155, 8251]",0.5,1363,best_practice,140,Use of descriptive variable names for dictionary keys,,1348,    VAR = pd.DataFrame(DICT),"[220, 220, 220, 569, 1503, 796, 279, 67, 13, 6601, 19778, 7, 35, 18379, 8]"
"‚ö†Ô∏è SAST Risk (Low): Use of undefined module 'pd', potential NameError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 8265, 705, 30094, 3256, 2785, 6530, 12331]",0.5,1363,sast_risk,142,"Use of undefined module 'pd', potential NameError",Low,1363,,[]
"üß† ML Signal: Returning a DataFrame, common in data processing functions","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 11, 2219, 287, 1366, 7587, 5499]",0.5,1382,ml_signal,144,"Returning a DataFrame, common in data processing functions",,1363,"def BOLL(DF, N):  # Â∏ÉÊûóÁ∫ø","[4299, 16494, 3069, 7, 8068, 11, 399, 2599, 220, 1303, 10263, 116, 225, 162, 252, 245, 163, 118, 123]"
"üß† ML Signal: Function definition with parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,1421,ml_signal,135,"Function definition with parameters, useful for learning function usage patterns",,1382,"    PBX4 = (EMA(C, N4) + EMA(C, 2 * N4) + EMA(C, 4 * N4)) / 3","[220, 220, 220, 30524, 55, 19, 796, 357, 27630, 7, 34, 11, 399, 19, 8, 1343, 412, 5673, 7, 34, 11, 362, 1635, 399, 19, 8, 1343, 412, 5673, 7, 34, 11, 604, 1635, 399, 19, 4008, 1220, 513]"
"üß† ML Signal: Accessing DataFrame columns, common operation in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 4905, 287, 1366, 7587]",1.0,1460,ml_signal,137,"Accessing DataFrame columns, common operation in data processing",,1421,"    PBX6 = (EMA(C, N6) + EMA(C, 2 * N6) + EMA(C, 4 * N6)) / 3","[220, 220, 220, 30524, 55, 21, 796, 357, 27630, 7, 34, 11, 399, 21, 8, 1343, 412, 5673, 7, 34, 11, 362, 1635, 399, 21, 8, 1343, 412, 5673, 7, 34, 11, 604, 1635, 399, 21, 4008, 1220, 513]"
"üß† ML Signal: Function call with specific parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,1498,ml_signal,139,"Function call with specific parameters, useful for learning function usage patterns",,1460,"            'PBX4': PBX4, 'PBX5': PBX5, 'PBX6': PBX6}","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 49079, 55, 19, 10354, 30524, 55, 19, 11, 705, 49079, 55, 20, 10354, 30524, 55, 20, 11, 705, 49079, 55, 21, 10354, 30524, 55, 21, 92]"
"üß† ML Signal: Function call with specific parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,1504,ml_signal,141,"Function call with specific parameters, useful for learning function usage patterns",,1498,    return VAR,"[220, 220, 220, 1441, 569, 1503]"
"‚ö†Ô∏è SAST Risk (Low): Division operation, potential for division by zero if HIGHV equals LOWV","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7458, 4905, 11, 2785, 329, 7297, 416, 6632, 611, 34677, 53, 21767, 46663, 53]",1.0,1504,sast_risk,143,"Division operation, potential for division by zero if HIGHV equals LOWV",Low,1504,,[]
"üß† ML Signal: Function call with specific parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,1523,ml_signal,144,"Function call with specific parameters, useful for learning function usage patterns",,1504,"def BOLL(DF, N):  # Â∏ÉÊûóÁ∫ø","[4299, 16494, 3069, 7, 8068, 11, 399, 2599, 220, 1303, 10263, 116, 225, 162, 252, 245, 163, 118, 123]"
"üß† ML Signal: Function call with specific parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,1535,ml_signal,146,"Function call with specific parameters, useful for learning function usage patterns",,1523,"    boll = MA(C, N)","[220, 220, 220, 275, 692, 796, 8779, 7, 34, 11, 399, 8]"
"üß† ML Signal: Function call with specific parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 2176, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,1551,ml_signal,148,"Function call with specific parameters, useful for learning function usage patterns",,1535,"    LB = boll - 2 * STD(C, N)","[220, 220, 220, 22199, 796, 275, 692, 532, 362, 1635, 48571, 7, 34, 11, 399, 8]"
‚úÖ Best Practice: Use of descriptive dictionary keys for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 22155, 8251, 329, 16287]",0.5,1566,best_practice,150,Use of descriptive dictionary keys for clarity,,1551,    VAR = pd.DataFrame(DICT),"[220, 220, 220, 569, 1503, 796, 279, 67, 13, 6601, 19778, 7, 35, 18379, 8]"
"üß† ML Signal: Creating a DataFrame from a dictionary, common data manipulation pattern","[8582, 100, 254, 10373, 26484, 25, 30481, 257, 6060, 19778, 422, 257, 22155, 11, 2219, 1366, 17512, 3912]",0.5,1566,ml_signal,152,"Creating a DataFrame from a dictionary, common data manipulation pattern",,1566,,[]
"üß† ML Signal: Returning a DataFrame, common pattern in data processing functions","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 11, 2219, 3912, 287, 1366, 7587, 5499]",0.5,1591,ml_signal,154,"Returning a DataFrame, common pattern in data processing functions",,1566,"def ROC(DF, N, M):  # ÂèòÂä®ÁéáÊåáÊ†á","[4299, 371, 4503, 7, 8068, 11, 399, 11, 337, 2599, 220, 1303, 10263, 237, 246, 27950, 101, 163, 236, 229, 162, 234, 229, 43718, 229]"
"üß† ML Signal: Function definition with parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,1600,ml_signal,145,"Function definition with parameters, useful for learning function usage patterns",,1591,    C = DF['close'],"[220, 220, 220, 327, 796, 36323, 17816, 19836, 20520]"
"üß† ML Signal: Accessing DataFrame columns, common pattern in data manipulation","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 3912, 287, 1366, 17512]",1.0,1617,ml_signal,147,"Accessing DataFrame columns, common pattern in data manipulation",,1600,"    UB = boll + 2 * STD(C, N)","[220, 220, 220, 471, 33, 796, 275, 692, 1343, 362, 1635, 48571, 7, 34, 11, 399, 8]"
"üß† ML Signal: Accessing DataFrame columns, common pattern in data manipulation","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 3912, 287, 1366, 17512]",1.0,1642,ml_signal,149,"Accessing DataFrame columns, common pattern in data manipulation",,1617,"    DICT = {'BOLL': boll, 'UB': UB, 'LB': LB}","[220, 220, 220, 360, 18379, 796, 1391, 6, 8202, 3069, 10354, 275, 692, 11, 705, 10526, 10354, 471, 33, 11, 705, 30501, 10354, 22199, 92]"
"üß† ML Signal: Accessing DataFrame columns, common pattern in data manipulation","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 3912, 287, 1366, 17512]",1.0,1648,ml_signal,151,"Accessing DataFrame columns, common pattern in data manipulation",,1642,    return VAR,"[220, 220, 220, 1441, 569, 1503]"
"‚ö†Ô∏è SAST Risk (Low): Potential division by zero if HHV(HIGH, N) equals LLV(LOW, N)","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 47138, 53, 7, 39, 18060, 11, 399, 8, 21767, 27140, 53, 7, 43, 3913, 11, 399, 8]",1.0,1648,sast_risk,153,"Potential division by zero if HHV(HIGH, N) equals LLV(LOW, N)",Low,1648,,[]
"‚ö†Ô∏è SAST Risk (Low): Potential division by zero if HHV(HIGH, N1) equals LLV(LOW, N1)","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632, 611, 47138, 53, 7, 39, 18060, 11, 399, 16, 8, 21767, 27140, 53, 7, 43, 3913, 11, 399, 16, 8]",1.0,1657,sast_risk,155,"Potential division by zero if HHV(HIGH, N1) equals LLV(LOW, N1)",Low,1648,    C = DF['close'],"[220, 220, 220, 327, 796, 36323, 17816, 19836, 20520]"
‚úÖ Best Practice: Use lowercase variable names for consistency with Python naming conventions,"[26486, 227, 6705, 19939, 25, 5765, 2793, 7442, 7885, 3891, 329, 15794, 351, 11361, 19264, 21396]",1.0,1669,best_practice,157,Use lowercase variable names for consistency with Python naming conventions,,1657,"    MAROC = MA(roc, M)","[220, 220, 220, 18805, 4503, 796, 8779, 7, 12204, 11, 337, 8]"
‚úÖ Best Practice: Use lowercase variable names for consistency with Python naming conventions,"[26486, 227, 6705, 19939, 25, 5765, 2793, 7442, 7885, 3891, 329, 15794, 351, 11361, 19264, 21396]",1.0,1684,best_practice,159,Use lowercase variable names for consistency with Python naming conventions,,1669,    VAR = pd.DataFrame(DICT),"[220, 220, 220, 569, 1503, 796, 279, 67, 13, 6601, 19778, 7, 35, 18379, 8]"
"üß† ML Signal: Returning a DataFrame, common pattern in data processing functions","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 11, 2219, 3912, 287, 1366, 7587, 5499]",1.0,1684,ml_signal,161,"Returning a DataFrame, common pattern in data processing functions",,1684,,[]
üß† ML Signal: Function definition with financial data processing,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 3176, 1366, 7587]",0.5,1709,ml_signal,154,Function definition with financial data processing,,1684,"def ROC(DF, N, M):  # ÂèòÂä®ÁéáÊåáÊ†á","[4299, 371, 4503, 7, 8068, 11, 399, 11, 337, 2599, 220, 1303, 10263, 237, 246, 27950, 101, 163, 236, 229, 162, 234, 229, 43718, 229]"
üß† ML Signal: Accessing 'close' column from DataFrame,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 705, 19836, 6, 5721, 422, 6060, 19778]",0.5,1735,ml_signal,156,Accessing 'close' column from DataFrame,,1709,"    roc = 100 * (C - REF(C, N)) / REF(C, N)","[220, 220, 220, 686, 66, 796, 1802, 1635, 357, 34, 532, 4526, 37, 7, 34, 11, 399, 4008, 1220, 4526, 37, 7, 34, 11, 399, 8]"
üß† ML Signal: Calculation of BIAS1 using moving average,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 20068, 1921, 16, 1262, 3867, 2811]",0.5,1756,ml_signal,158,Calculation of BIAS1 using moving average,,1735,"    DICT = {'ROC': roc, 'MAROC': MAROC}","[220, 220, 220, 360, 18379, 796, 1391, 6, 49, 4503, 10354, 686, 66, 11, 705, 40569, 4503, 10354, 18805, 4503, 92]"
üß† ML Signal: Calculation of BIAS2 using moving average,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 20068, 1921, 17, 1262, 3867, 2811]",0.5,1762,ml_signal,160,Calculation of BIAS2 using moving average,,1756,    return VAR,"[220, 220, 220, 1441, 569, 1503]"
üß† ML Signal: Calculation of BIAS3 using moving average,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 20068, 1921, 18, 1262, 3867, 2811]",0.5,1762,ml_signal,162,Calculation of BIAS3 using moving average,,1762,,[]
‚úÖ Best Practice: Use of descriptive dictionary keys,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 22155, 8251]",0.5,1771,best_practice,164,Use of descriptive dictionary keys,,1762,    C = DF['close'],"[220, 220, 220, 327, 796, 36323, 17816, 19836, 20520]"
‚úÖ Best Practice: Conversion of dictionary to DataFrame for structured data handling,"[26486, 227, 6705, 19939, 25, 44101, 286, 22155, 284, 6060, 19778, 329, 20793, 1366, 9041]",0.5,1785,best_practice,166,Conversion of dictionary to DataFrame for structured data handling,,1771,"    MTMMA = MA(mtm, M)","[220, 220, 220, 337, 15972, 5673, 796, 8779, 7, 16762, 76, 11, 337, 8]"
‚úÖ Best Practice: Returning a DataFrame for further analysis or processing,"[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 329, 2252, 3781, 393, 7587]",0.5,1800,best_practice,168,Returning a DataFrame for further analysis or processing,,1785,    VAR = pd.DataFrame(DICT),"[220, 220, 220, 569, 1503, 796, 279, 67, 13, 6601, 19778, 7, 35, 18379, 8]"
üß† ML Signal: Function definition with financial indicators can be used to train models for stock market predictions,"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 3176, 21337, 460, 307, 973, 284, 4512, 4981, 329, 4283, 1910, 16277]",0.5,1800,ml_signal,162,Function definition with financial indicators can be used to train models for stock market predictions,,1800,,[]
üß† ML Signal: Usage of DataFrame column 'close' indicates reliance on historical price data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 5721, 705, 19836, 6, 9217, 24126, 319, 6754, 2756, 1366]",0.5,1809,ml_signal,164,Usage of DataFrame column 'close' indicates reliance on historical price data,,1800,    C = DF['close'],"[220, 220, 220, 327, 796, 36323, 17816, 19836, 20520]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",0.5,1823,best_practice,166,Use descriptive variable names for better readability,,1809,"    MTMMA = MA(mtm, M)","[220, 220, 220, 337, 15972, 5673, 796, 8779, 7, 16762, 76, 11, 337, 8]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",0.5,1838,best_practice,168,Use descriptive variable names for better readability,,1823,    VAR = pd.DataFrame(DICT),"[220, 220, 220, 569, 1503, 796, 279, 67, 13, 6601, 19778, 7, 35, 18379, 8]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",0.5,1838,best_practice,170,Use descriptive variable names for better readability,,1838,,[]
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",0.5,1858,best_practice,172,Use descriptive variable names for better readability,,1838,"def MFI(DF, N):  # ËµÑÈáëÊåáÊ†á","[4299, 337, 11674, 7, 8068, 11, 399, 2599, 220, 1303, 5525, 113, 226, 34932, 239, 162, 234, 229, 43718, 229]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",0.5,1867,best_practice,174,Use descriptive variable names for better readability,,1858,    H = DF['high'],"[220, 220, 220, 367, 796, 36323, 17816, 8929, 20520]"
üß† ML Signal: Conversion to DataFrame suggests data preparation for further analysis or modeling,"[8582, 100, 254, 10373, 26484, 25, 44101, 284, 6060, 19778, 5644, 1366, 11824, 329, 2252, 3781, 393, 21128]",0.5,1876,ml_signal,175,Conversion to DataFrame suggests data preparation for further analysis or modeling,,1867,    L = DF['low'],"[220, 220, 220, 406, 796, 36323, 17816, 9319, 20520]"
"üß† ML Signal: Function definition with parameters, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4673, 2163, 8748, 7572]",1.0,1876,ml_signal,171,"Function definition with parameters, useful for learning function usage patterns",,1876,,[]
"üß† ML Signal: Accessing DataFrame columns, common operation in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 4905, 287, 1366, 7587]",1.0,1885,ml_signal,173,"Accessing DataFrame columns, common operation in data processing",,1876,    C = DF['close'],"[220, 220, 220, 327, 796, 36323, 17816, 19836, 20520]"
"üß† ML Signal: Accessing DataFrame columns, common operation in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 4905, 287, 1366, 7587]",1.0,1894,ml_signal,175,"Accessing DataFrame columns, common operation in data processing",,1885,    L = DF['low'],"[220, 220, 220, 406, 796, 36323, 17816, 9319, 20520]"
"üß† ML Signal: Accessing DataFrame columns, common operation in data processing","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 4905, 287, 1366, 7587]",1.0,1909,ml_signal,177,"Accessing DataFrame columns, common operation in data processing",,1894,    TYP = (C + H + L) / 3,"[220, 220, 220, 24412, 47, 796, 357, 34, 1343, 367, 1343, 406, 8, 1220, 513]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if 'REF' or 'MAX' are not defined or imported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 705, 31688, 6, 393, 705, 22921, 6, 389, 407, 5447, 393, 17392]",1.0,1940,sast_risk,179,Potential issue if 'REF' or 'MAX' are not defined or imported,Low,1909,"        SUM(IF(TYP < REF(TYP, 1), TYP * VOL, 0), N)","[220, 220, 220, 220, 220, 220, 220, 35683, 7, 5064, 7, 9936, 47, 1279, 4526, 37, 7, 9936, 47, 11, 352, 828, 24412, 47, 1635, 38570, 11, 657, 828, 399, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if 'REF' or 'MAX' are not defined or imported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 705, 31688, 6, 393, 705, 22921, 6, 389, 407, 5447, 393, 17392]",1.0,1955,sast_risk,182,Potential issue if 'REF' or 'MAX' are not defined or imported,Low,1940,    VAR = pd.DataFrame(DICT),"[220, 220, 220, 569, 1503, 796, 279, 67, 13, 6601, 19778, 7, 35, 18379, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if 'SUM' is not defined or imported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 705, 50, 5883, 6, 318, 407, 5447, 393, 17392]",1.0,1955,sast_risk,184,Potential issue if 'SUM' is not defined or imported,Low,1955,,[]
‚ö†Ô∏è SAST Risk (Low): Potential issue if 'SUM' is not defined or imported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 705, 50, 5883, 6, 318, 407, 5447, 393, 17392]",1.0,1965,sast_risk,186,Potential issue if 'SUM' is not defined or imported,Low,1955,"def SKDJ(DF, N, M):","[4299, 14277, 35028, 7, 8068, 11, 399, 11, 337, 2599]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if 'IF' is not defined or imported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 705, 5064, 6, 318, 407, 5447, 393, 17392]",1.0,1981,sast_risk,188,Potential issue if 'IF' is not defined or imported,Low,1965,"    LOWV = LLV(DF['low'], N)","[220, 220, 220, 46663, 53, 796, 27140, 53, 7, 8068, 17816, 9319, 6, 4357, 399, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if 'MA' is not defined or imported,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 705, 5673, 6, 318, 407, 5447, 393, 17392]",1.0,1994,sast_risk,191,Potential issue if 'MA' is not defined or imported,Low,1981,"    K = EMA(RSV, M)","[220, 220, 220, 509, 796, 412, 5673, 7, 6998, 53, 11, 337, 8]"
‚úÖ Best Practice: Use descriptive variable names for better readability,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799]",0.5,2017,best_practice,193,Use descriptive variable names for better readability,,1994,"    DICT = {'SKDJ_K': K, 'SKDJ_D': D}","[220, 220, 220, 360, 18379, 796, 1391, 6, 18831, 35028, 62, 42, 10354, 509, 11, 705, 18831, 35028, 62, 35, 10354, 360, 92]"
‚ö†Ô∏è SAST Risk (Low): Ensure 'pd' (pandas) is imported before use,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 30094, 6, 357, 79, 392, 292, 8, 318, 17392, 878, 779]",1.0,2023,sast_risk,195,Ensure 'pd' (pandas) is imported before use,Low,2017,    return VAR,"[220, 220, 220, 1441, 569, 1503]"
"üß† ML Signal: Returning a DataFrame, common pattern in data processing functions","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 11, 2219, 3912, 287, 1366, 7587, 5499]",1.0,2023,ml_signal,197,"Returning a DataFrame, common pattern in data processing functions",,2023,,[]
"üß† ML Signal: Function definition with multiple parameters, indicating a complex operation","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 3294, 10007, 11, 12739, 257, 3716, 4905]",1.0,2033,ml_signal,186,"Function definition with multiple parameters, indicating a complex operation",,2023,"def SKDJ(DF, N, M):","[4299, 14277, 35028, 7, 8068, 11, 399, 11, 337, 2599]"
"üß† ML Signal: Accessing DataFrame columns, common in data processing tasks","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 287, 1366, 7587, 8861]",1.0,2049,ml_signal,188,"Accessing DataFrame columns, common in data processing tasks",,2033,"    LOWV = LLV(DF['low'], N)","[220, 220, 220, 46663, 53, 796, 27140, 53, 7, 8068, 17816, 9319, 6, 4357, 399, 8]"
"üß† ML Signal: Accessing DataFrame columns, common in data processing tasks","[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 15180, 11, 2219, 287, 1366, 7587, 8861]",1.0,2065,ml_signal,189,"Accessing DataFrame columns, common in data processing tasks",,2049,"    HIGHV = HHV(DF['high'], N)","[220, 220, 220, 34677, 53, 796, 47138, 53, 7, 8068, 17816, 8929, 6, 4357, 399, 8]"
"‚ö†Ô∏è SAST Risk (Low): Use of undefined function IF, potential for NameError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 2163, 16876, 11, 2785, 329, 6530, 12331]",0.5,2078,sast_risk,191,"Use of undefined function IF, potential for NameError",Low,2065,"    K = EMA(RSV, M)","[220, 220, 220, 509, 796, 412, 5673, 7, 6998, 53, 11, 337, 8]"
"‚ö†Ô∏è SAST Risk (Low): Use of undefined function REF, potential for NameError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 2163, 4526, 37, 11, 2785, 329, 6530, 12331]",0.5,2093,sast_risk,194,"Use of undefined function REF, potential for NameError",Low,2078,    VAR = pd.DataFrame(DICT),"[220, 220, 220, 569, 1503, 796, 279, 67, 13, 6601, 19778, 7, 35, 18379, 8]"
"‚ö†Ô∏è SAST Risk (Low): Use of undefined function IF, potential for NameError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 2163, 16876, 11, 2785, 329, 6530, 12331]",0.5,2093,sast_risk,196,"Use of undefined function IF, potential for NameError",Low,2093,,[]
"‚ö†Ô∏è SAST Risk (Low): Use of undefined function REF, potential for NameError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 2163, 4526, 37, 11, 2785, 329, 6530, 12331]",0.5,2116,sast_risk,198,"Use of undefined function REF, potential for NameError",Low,2093,"def WR(DF, N, N1):  # Â®ÅÂªâÊåáÊ†á","[4299, 11342, 7, 8068, 11, 399, 11, 399, 16, 2599, 220, 1303, 10263, 101, 223, 161, 119, 231, 162, 234, 229, 43718, 229]"
"‚ö†Ô∏è SAST Risk (Low): Use of undefined function SUM, potential for NameError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 2163, 35683, 11, 2785, 329, 6530, 12331]",0.5,2125,sast_risk,200,"Use of undefined function SUM, potential for NameError",Low,2116,    LOW = DF['low'],"[220, 220, 220, 46663, 796, 36323, 17816, 9319, 20520]"
"‚ö†Ô∏è SAST Risk (Low): Use of undefined function SUM, potential for NameError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 2163, 35683, 11, 2785, 329, 6530, 12331]",0.5,2134,sast_risk,200,"Use of undefined function SUM, potential for NameError",Low,2125,    LOW = DF['low'],"[220, 220, 220, 46663, 796, 36323, 17816, 9319, 20520]"
"üß† ML Signal: Calculation of a difference, common in financial indicators","[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 257, 3580, 11, 2219, 287, 3176, 21337]",0.5,2143,ml_signal,200,"Calculation of a difference, common in financial indicators",,2134,    LOW = DF['low'],"[220, 220, 220, 46663, 796, 36323, 17816, 9319, 20520]"
"‚ö†Ô∏è SAST Risk (Low): Use of undefined function SMA, potential for NameError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 2163, 311, 5673, 11, 2785, 329, 6530, 12331]",0.5,2152,sast_risk,200,"Use of undefined function SMA, potential for NameError",Low,2143,    LOW = DF['low'],"[220, 220, 220, 46663, 796, 36323, 17816, 9319, 20520]"
"‚ö†Ô∏è SAST Risk (Low): Use of undefined function MA, potential for NameError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 2163, 8779, 11, 2785, 329, 6530, 12331]",0.5,2161,sast_risk,200,"Use of undefined function MA, potential for NameError",Low,2152,    LOW = DF['low'],"[220, 220, 220, 46663, 796, 36323, 17816, 9319, 20520]"
üß† ML Signal: Use of dictionary to store multiple related values,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 22155, 284, 3650, 3294, 3519, 3815]",1.0,2170,ml_signal,200,Use of dictionary to store multiple related values,,2161,    LOW = DF['low'],"[220, 220, 220, 46663, 796, 36323, 17816, 9319, 20520]"
"‚ö†Ô∏è SAST Risk (Low): Use of undefined module pd, potential for NameError","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 28721, 8265, 279, 67, 11, 2785, 329, 6530, 12331]",0.5,2179,sast_risk,200,"Use of undefined module pd, potential for NameError",Low,2170,    LOW = DF['low'],"[220, 220, 220, 46663, 796, 36323, 17816, 9319, 20520]"
"‚úÖ Best Practice: Explicit return of a variable, improves readability","[26486, 227, 6705, 19939, 25, 11884, 1441, 286, 257, 7885, 11, 19575, 1100, 1799]",0.5,2188,best_practice,200,"Explicit return of a variable, improves readability",,2179,    LOW = DF['low'],"[220, 220, 220, 46663, 796, 36323, 17816, 9319, 20520]"

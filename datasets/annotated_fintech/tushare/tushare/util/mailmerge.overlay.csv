annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Importing specific functions or classes from a module can improve code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 5499, 393, 6097, 422, 257, 8265, 460, 2987, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,6,best_practice,4,Importing specific functions or classes from a module can improve code readability and maintainability.,,0,from lxml import etree,"[6738, 300, 19875, 1330, 2123, 631]"
‚úÖ Best Practice: Using constants for namespaces improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 38491, 329, 3891, 43076, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,6,best_practice,6,Using constants for namespaces improves code readability and maintainability.,,6,,[]
‚úÖ Best Practice: Using constants for content types improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 38491, 329, 2695, 3858, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,7,best_practice,11,Using constants for content types improves code readability and maintainability.,,6,},[92]
‚úÖ Best Practice: Using constants for content types improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 8554, 38491, 329, 2695, 3858, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",0.5,39,best_practice,19,Using constants for content types improves code readability and maintainability.,,7,CONTENT_TYPE_SETTINGS = 'application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml',"[37815, 3525, 62, 25216, 62, 28480, 51, 20754, 796, 705, 31438, 14, 85, 358, 13, 9654, 19875, 687, 1381, 12, 14406, 276, 7990, 13, 4775, 36948, 4029, 13, 33692, 10, 19875, 6]"
‚úÖ Best Practice: Class names should follow the CapWords convention for readability,"[26486, 227, 6705, 19939, 25, 5016, 3891, 815, 1061, 262, 4476, 37117, 9831, 329, 1100, 1799]",0.5,39,best_practice,18,Class names should follow the CapWords convention for readability,,39,,[]
‚ö†Ô∏è SAST Risk (Low): Potential resource leak if ZipFile is not closed properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8271, 13044, 611, 38636, 8979, 318, 407, 4838, 6105]",1.0,39,sast_risk,18,Potential resource leak if ZipFile is not closed properly,Low,39,,[]
üß† ML Signal: Usage of ZipFile to handle compressed files,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 38636, 8979, 284, 5412, 25388, 3696]",1.0,39,ml_signal,20,Usage of ZipFile to handle compressed files,,39,,[]
üß† ML Signal: Dictionary to store parts of a document,"[8582, 100, 254, 10373, 26484, 25, 28261, 284, 3650, 3354, 286, 257, 3188]",0.5,46,ml_signal,22,Dictionary to store parts of a document,,39,class MailMerge(object):,"[4871, 11099, 13102, 469, 7, 15252, 2599]"
üß† ML Signal: Boolean flag to control behavior,"[8582, 100, 254, 10373, 26484, 25, 41146, 6056, 284, 1630, 4069]",0.5,58,ml_signal,26,Boolean flag to control behavior,,46,        self.settings = None,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 33692, 796, 6045]"
üß† ML Signal: Parsing XML content types from a zip file,"[8582, 100, 254, 10373, 26484, 25, 23042, 278, 23735, 2695, 3858, 422, 257, 19974, 2393]",1.0,80,ml_signal,28,Parsing XML content types from a zip file,,58,        self.remove_empty_tables = remove_empty_tables,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 28956, 62, 28920, 62, 83, 2977, 796, 4781, 62, 28920, 62, 83, 2977]"
üß† ML Signal: Iterating over XML elements to find specific content types,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 23735, 4847, 284, 1064, 2176, 2695, 3858]",1.0,110,ml_signal,30,Iterating over XML elements to find specific content types,,80,        content_types = etree.parse(self.zip.open('[Content_Types].xml')),"[220, 220, 220, 220, 220, 220, 220, 2695, 62, 19199, 796, 2123, 631, 13, 29572, 7, 944, 13, 13344, 13, 9654, 10786, 58, 19746, 62, 31431, 4083, 19875, 6, 4008]"
üß† ML Signal: Checking content type against known types,"[8582, 100, 254, 10373, 26484, 25, 39432, 2695, 2099, 1028, 1900, 3858]",1.0,137,ml_signal,32,Checking content type against known types,,110,            type = file.attrib['ContentType' % NAMESPACES],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2099, 796, 2393, 13, 1078, 822, 17816, 19746, 6030, 6, 4064, 399, 29559, 44938, 1546, 60]"
üß† ML Signal: Custom method to process file parts,"[8582, 100, 254, 10373, 26484, 25, 8562, 2446, 284, 1429, 2393, 3354]",1.0,161,ml_signal,35,Custom method to process file parts,,137,            elif type == CONTENT_TYPE_SETTINGS:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1288, 361, 2099, 6624, 22904, 3525, 62, 25216, 62, 28480, 51, 20754, 25]"
üß† ML Signal: List to track elements to delete,"[8582, 100, 254, 10373, 26484, 25, 7343, 284, 2610, 4847, 284, 12233]",0.5,161,ml_signal,39,List to track elements to delete,,161,,[]
üß† ML Signal: Regular expression to match specific patterns,"[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 284, 2872, 2176, 7572]",1.0,177,ml_signal,41,Regular expression to match specific patterns,,161,        for part in self.parts.values():,"[220, 220, 220, 220, 220, 220, 220, 329, 636, 287, 2116, 13, 42632, 13, 27160, 33529]"
üß† ML Signal: Iterating over document parts,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 3188, 3354]",0.5,217,ml_signal,43,Iterating over document parts,,177,            for parent in part.findall('.//{%(w)s}fldSimple/..' % NAMESPACES):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 2560, 287, 636, 13, 19796, 439, 7, 4458, 1003, 90, 4, 7, 86, 8, 82, 92, 69, 335, 26437, 14, 492, 6, 4064, 399, 29559, 44938, 1546, 2599]"
üß† ML Signal: Searching for specific XML structure,"[8582, 100, 254, 10373, 26484, 25, 11140, 278, 329, 2176, 23735, 4645]",0.5,259,ml_signal,45,Searching for specific XML structure,,217,                    if child.tag != '{%(w)s}fldSimple' % NAMESPACES:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 1200, 13, 12985, 14512, 705, 90, 4, 7, 86, 8, 82, 92, 69, 335, 26437, 6, 4064, 399, 29559, 44938, 1546, 25]"
üß† ML Signal: Extracting and matching instruction text,"[8582, 100, 254, 10373, 26484, 25, 29677, 278, 290, 12336, 12064, 2420]",0.5,259,ml_signal,53,Extracting and matching instruction text,,259,,[]
üß† ML Signal: Replacing XML element with a new structure,"[8582, 100, 254, 10373, 26484, 25, 18407, 4092, 23735, 5002, 351, 257, 649, 4645]",0.5,280,ml_signal,55,Replacing XML element with a new structure,,259,                children = list(parent),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1751, 796, 1351, 7, 8000, 8]"
üß† ML Signal: Zipping indices and elements for processing,"[8582, 100, 254, 10373, 26484, 25, 1168, 4501, 36525, 290, 4847, 329, 7587]",0.5,309,ml_signal,59,Zipping indices and elements for processing,,280,                    [children.index(e) for e in,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 685, 17197, 13, 9630, 7, 68, 8, 329, 304, 287]"
üß† ML Signal: Collecting elements to delete later,"[8582, 100, 254, 10373, 26484, 25, 9745, 278, 4847, 284, 12233, 1568]",1.0,309,ml_signal,76,Collecting elements to delete later,,309,,[]
üß† ML Signal: Removing elements marked for deletion,"[8582, 100, 254, 10373, 26484, 25, 3982, 5165, 4847, 7498, 329, 39948]",0.5,309,ml_signal,79,Removing elements marked for deletion,,309,,[]
üß† ML Signal: Modifying XML settings to remove specific elements,"[8582, 100, 254, 10373, 26484, 25, 3401, 4035, 23735, 6460, 284, 4781, 2176, 4847]",0.5,321,ml_signal,84,Modifying XML settings to remove specific elements,,309,        if self.settings:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 33692, 25]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and usage of the function,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 8748, 286, 262, 2163]",1.0,321,best_practice,70,Consider adding a docstring to describe the purpose and usage of the function,,321,,[]
üß† ML Signal: Accessing XML attributes using namespaces,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 23735, 12608, 1262, 3891, 43076]",0.5,349,ml_signal,72,Accessing XML attributes using namespaces,,321,                    instr.tag = 'MergeText',"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6480, 13, 12985, 796, 705, 13102, 469, 8206, 6]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'PartName' is not in file.attrib,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 7841, 5376, 6, 318, 407, 287, 2393, 13, 1078, 822]",0.5,380,sast_risk,74,Potential KeyError if 'PartName' is not in file.attrib,Low,349,                    # append the other tags in the w:r block too,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 24443, 262, 584, 15940, 287, 262, 266, 25, 81, 2512, 1165]"
‚ö†Ô∏è SAST Risk (Low): Potential IndexError if split does not result in two parts,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 12901, 12331, 611, 6626, 857, 407, 1255, 287, 734, 3354]",0.5,413,sast_risk,75,Potential IndexError if split does not result in two parts,Low,380,                    parent[idx_begin].extend(list(block)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2560, 58, 312, 87, 62, 27471, 4083, 2302, 437, 7, 4868, 7, 9967, 4008]"
üß† ML Signal: Accessing files within a zip archive,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 3696, 1626, 257, 19974, 15424]",1.0,413,ml_signal,76,Accessing files within a zip archive,,413,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for zip slip vulnerability if 'fn' is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 19974, 13819, 15131, 611, 705, 22184, 6, 318, 407, 6105, 5336, 36951]",0.5,461,sast_risk,78,Potential for zip slip vulnerability if 'fn' is not properly sanitized,Low,413,"                                  for i in range(idx_begin, idx_end)]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 1312, 287, 2837, 7, 312, 87, 62, 27471, 11, 4686, 87, 62, 437, 15437]"
üß† ML Signal: Parsing XML files,"[8582, 100, 254, 10373, 26484, 25, 23042, 278, 23735, 3696]",0.5,461,ml_signal,79,Parsing XML files,,461,,[]
‚ö†Ô∏è SAST Risk (Low): Potential XML parsing vulnerabilities if the XML content is untrusted,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 23735, 32096, 23805, 611, 262, 23735, 2695, 318, 1418, 81, 8459]",0.5,478,sast_risk,81,Potential XML parsing vulnerabilities if the XML content is untrusted,Low,461,            parent.remove(child),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2560, 13, 28956, 7, 9410, 8]"
üß† ML Signal: Iterating over merge fields to perform operations on them,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 20121, 7032, 284, 1620, 4560, 319, 606]",1.0,511,ml_signal,75,Iterating over merge fields to perform operations on them,,478,                    parent[idx_begin].extend(list(block)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2560, 58, 312, 87, 62, 27471, 4083, 2302, 437, 7, 4868, 7, 9967, 4008]"
üß† ML Signal: Using dynamic keyword arguments in a method call,"[8582, 100, 254, 10373, 26484, 25, 8554, 8925, 21179, 7159, 287, 257, 2446, 869]",1.0,543,ml_signal,77,Using dynamic keyword arguments in a method call,,511,"                    to_delete += [(parent, parent[i + 1])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 284, 62, 33678, 15853, 47527, 8000, 11, 2560, 58, 72, 1343, 352, 12962]"
‚ö†Ô∏è SAST Risk (Low): Ensure 'file' is a valid path or file-like object to prevent file handling issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 705, 7753, 6, 318, 257, 4938, 3108, 393, 2393, 12, 2339, 2134, 284, 2948, 2393, 9041, 2428]",0.5,543,sast_risk,79,Ensure 'file' is a valid path or file-like object to prevent file handling issues,Low,543,,[]
üß† ML Signal: Iterating over a list of files in a zip archive,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 3696, 287, 257, 19974, 15424]",1.0,560,ml_signal,81,Iterating over a list of files in a zip archive,,543,            parent.remove(child),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2560, 13, 28956, 7, 9410, 8]"
üß† ML Signal: Conditional logic based on file presence in a collection,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 2393, 4931, 287, 257, 4947]",1.0,582,ml_signal,83,Conditional logic based on file presence in a collection,,560,        # Remove mail merge settings to avoid error messages when opening document in Winword,"[220, 220, 220, 220, 220, 220, 220, 1303, 17220, 6920, 20121, 6460, 284, 3368, 4049, 6218, 618, 4756, 3188, 287, 7178, 4775]"
‚ö†Ô∏è SAST Risk (Low): Potential XML injection if 'self.parts[zi]' is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 23735, 16954, 611, 705, 944, 13, 42632, 58, 17027, 49946, 318, 2836, 12, 14401]",0.5,594,sast_risk,84,Potential XML injection if 'self.parts[zi]' is user-controlled,Low,582,        if self.settings:,"[220, 220, 220, 220, 220, 220, 220, 611, 2116, 13, 33692, 25]"
üß† ML Signal: Specific condition check for a settings file,"[8582, 100, 254, 10373, 26484, 25, 17377, 4006, 2198, 329, 257, 6460, 2393]",0.5,620,ml_signal,88,Specific condition check for a settings file,,594,                settings_root.remove(mail_merge),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6460, 62, 15763, 13, 28956, 7, 4529, 62, 647, 469, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential XML injection if 'self.settings' is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 23735, 16954, 611, 705, 944, 13, 33692, 6, 318, 2836, 12, 14401]",0.5,637,sast_risk,90,Potential XML injection if 'self.settings' is user-controlled,Low,620,"    def __get_tree_of_file(self, file):","[220, 220, 220, 825, 11593, 1136, 62, 21048, 62, 1659, 62, 7753, 7, 944, 11, 2393, 2599]"
‚ö†Ô∏è SAST Risk (Low): Reading from a zip file without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11725, 422, 257, 19974, 2393, 1231, 21201]",1.0,637,sast_risk,94,Reading from a zip file without validation,Low,637,,[]
‚úÖ Best Practice: Ensure resources are properly closed after use,"[26486, 227, 6705, 19939, 25, 48987, 4133, 389, 6105, 4838, 706, 779]",0.5,653,best_practice,96,Ensure resources are properly closed after use,,637,        # Replace all remaining merge fields with empty values,"[220, 220, 220, 220, 220, 220, 220, 1303, 40177, 477, 5637, 20121, 7032, 351, 6565, 3815]"
‚úÖ Best Practice: Use of default mutable arguments can lead to unexpected behavior; consider using None and initializing inside the function.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 4517, 540, 7159, 460, 1085, 284, 10059, 4069, 26, 2074, 1262, 6045, 290, 4238, 2890, 2641, 262, 2163, 13]",0.5,653,best_practice,89,Use of default mutable arguments can lead to unexpected behavior; consider using None and initializing inside the function.,,653,,[]
"üß† ML Signal: Use of instance variable self.parts, indicating object-oriented design.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4554, 7885, 2116, 13, 42632, 11, 12739, 2134, 12, 17107, 1486, 13]",0.5,684,ml_signal,91,"Use of instance variable self.parts, indicating object-oriented design.",,653,"        fn = file.attrib['PartName' % NAMESPACES].split('/', 1)[1]","[220, 220, 220, 220, 220, 220, 220, 24714, 796, 2393, 13, 1078, 822, 17816, 7841, 5376, 6, 4064, 399, 29559, 44938, 1546, 4083, 35312, 10786, 14, 3256, 352, 38381, 16, 60]"
"‚úÖ Best Practice: Use of a set to store unique fields, ensuring no duplicates.","[26486, 227, 6705, 19939, 25, 5765, 286, 257, 900, 284, 3650, 3748, 7032, 11, 13359, 645, 14184, 16856, 13]",0.5,708,best_practice,93,"Use of a set to store unique fields, ensuring no duplicates.",,684,"        return zi, etree.parse(self.zip.open(zi))","[220, 220, 220, 220, 220, 220, 220, 1441, 1976, 72, 11, 2123, 631, 13, 29572, 7, 944, 13, 13344, 13, 9654, 7, 17027, 4008]"
"üß† ML Signal: Use of XML parsing with findall, indicating processing of XML data.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 23735, 32096, 351, 1064, 439, 11, 12739, 7587, 286, 23735, 1366, 13]",0.5,724,ml_signal,96,"Use of XML parsing with findall, indicating processing of XML data.",,708,        # Replace all remaining merge fields with empty values,"[220, 220, 220, 220, 220, 220, 220, 1303, 40177, 477, 5637, 20121, 7032, 351, 6565, 3815]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'name' attribute is missing in mf.attrib.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 3672, 6, 11688, 318, 4814, 287, 285, 69, 13, 1078, 822, 13]",1.0,743,sast_risk,97,Potential KeyError if 'name' attribute is missing in mf.attrib.,Low,724,        for field in self.get_merge_fields():,"[220, 220, 220, 220, 220, 220, 220, 329, 2214, 287, 2116, 13, 1136, 62, 647, 469, 62, 25747, 33529]"
üß† ML Signal: Iterating over a dictionary's values,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 22155, 338, 3815]",1.0,761,ml_signal,101,Iterating over a dictionary's values,,743,        for zi in self.zip.filelist:,"[220, 220, 220, 220, 220, 220, 220, 329, 1976, 72, 287, 2116, 13, 13344, 13, 7753, 4868, 25]"
üß† ML Signal: Accessing the root element of an XML part,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 262, 6808, 5002, 286, 281, 23735, 636]",0.5,794,ml_signal,103,Accessing the root element of an XML part,,761,                xml = etree.tostring(self.parts[zi].getroot()),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 35555, 796, 2123, 631, 13, 83, 455, 1806, 7, 944, 13, 42632, 58, 17027, 4083, 1136, 15763, 28955]"
üß† ML Signal: String formatting with dictionary values,"[8582, 100, 254, 10373, 26484, 25, 10903, 33313, 351, 22155, 3815]",1.0,825,ml_signal,106,String formatting with dictionary values,,794,                xml = etree.tostring(self.settings.getroot()),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 35555, 796, 2123, 631, 13, 83, 455, 1806, 7, 944, 13, 33692, 13, 1136, 15763, 28955]"
üß† ML Signal: Iterating over XML children elements,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 23735, 1751, 4847]",1.0,836,ml_signal,110,Iterating over XML children elements,,825,        output.close(),"[220, 220, 220, 220, 220, 220, 220, 5072, 13, 19836, 3419]"
‚ö†Ô∏è SAST Risk (Low): Removing elements from an XML tree can lead to data loss if not handled properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3982, 5165, 4847, 422, 281, 23735, 5509, 460, 1085, 284, 1366, 2994, 611, 407, 12118, 6105]",0.5,853,sast_risk,112,Removing elements from an XML tree can lead to data loss if not handled properly,Low,836,"    def get_merge_fields(self, parts=None):","[220, 220, 220, 825, 651, 62, 647, 469, 62, 25747, 7, 944, 11, 3354, 28, 14202, 2599]"
üß† ML Signal: Enumerating over a list with index,"[8582, 100, 254, 10373, 26484, 25, 2039, 6975, 803, 625, 257, 1351, 351, 6376]",1.0,864,ml_signal,115,Enumerating over a list with index,,853,        fields = set(),"[220, 220, 220, 220, 220, 220, 220, 7032, 796, 900, 3419]"
üß† ML Signal: Creating and appending XML elements,"[8582, 100, 254, 10373, 26484, 25, 30481, 290, 598, 1571, 23735, 4847]",1.0,892,ml_signal,118,Creating and appending XML elements,,864,                fields.add(mf.attrib['name']),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7032, 13, 2860, 7, 76, 69, 13, 1078, 822, 17816, 3672, 6, 12962]"
üß† ML Signal: Deep copying XML elements,"[8582, 100, 254, 10373, 26484, 25, 10766, 23345, 23735, 4847]",1.0,914,ml_signal,123,Deep copying XML elements,,892,        Duplicate template page. Creates a copy of the template for each item,"[220, 220, 220, 220, 220, 220, 220, 49821, 5344, 11055, 2443, 13, 7921, 274, 257, 4866, 286, 262, 11055, 329, 1123, 2378]"
üß† ML Signal: Method call with unpacked dictionary arguments,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 8593, 6021, 22155, 7159]",1.0,914,ml_signal,128,Method call with unpacked dictionary arguments,,914,,[]
‚úÖ Best Practice: Use of default mutable arguments (like lists) is avoided,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 4517, 540, 7159, 357, 2339, 8341, 8, 318, 13941]",0.5,922,best_practice,122,Use of default mutable arguments (like lists) is avoided,,914,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
üß† ML Signal: Iterating over dictionary items,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 22155, 3709]",1.0,930,ml_signal,125,Iterating over dictionary items,,922,"        """"""","[220, 220, 220, 220, 220, 220, 220, 37227]"
‚úÖ Best Practice: Checking type before processing,"[26486, 227, 6705, 19939, 25, 39432, 2099, 878, 7587]",0.5,946,best_practice,126,Checking type before processing,,930,        for part in self.parts.values():,"[220, 220, 220, 220, 220, 220, 220, 329, 636, 287, 2116, 13, 42632, 13, 27160, 33529]"
üß† ML Signal: Method call with specific parameters,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 351, 2176, 10007]",0.5,962,ml_signal,129,Method call with specific parameters,,946,            tag = root.tag,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 7621, 796, 6808, 13, 12985]"
üß† ML Signal: Iterating over a collection,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 4947]",1.0,962,ml_signal,132,Iterating over a collection,,962,,[]
üß† ML Signal: Private method call,"[8582, 100, 254, 10373, 26484, 25, 15348, 2446, 869]",0.5,978,ml_signal,134,Private method call,,962,            for child in root:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 1200, 287, 6808, 25]"
üß† ML Signal: Usage of XML parsing and manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 23735, 32096, 290, 17512]",0.5,994,ml_signal,131,Usage of XML parsing and manipulation,,978,                continue,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2555]"
‚úÖ Best Practice: Convert mf to a list to avoid modifying the iterable during iteration,"[26486, 227, 6705, 19939, 25, 38240, 285, 69, 284, 257, 1351, 284, 3368, 30620, 262, 11629, 540, 1141, 24415]",1.0,1008,best_practice,133,Convert mf to a list to avoid modifying the iterable during iteration,,994,            children = [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1751, 796, 17635]"
‚ö†Ô∏è SAST Risk (Low): Potential XML namespace handling issue,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 23735, 25745, 9041, 2071]",0.5,1029,sast_risk,136,Potential XML namespace handling issue,Low,1008,                children.append(child),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1751, 13, 33295, 7, 9410, 8]"
‚úÖ Best Practice: Ensure text is always a string,"[26486, 227, 6705, 19939, 25, 48987, 2420, 318, 1464, 257, 4731]",0.5,1051,best_practice,139,Ensure text is always a string,,1029,                # Add page break in between replacements,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1303, 3060, 2443, 2270, 287, 1022, 36205]"
‚úÖ Best Practice: Default text to an empty string if None,"[26486, 227, 6705, 19939, 25, 15161, 2420, 284, 281, 6565, 4731, 611, 6045]",0.5,1095,best_practice,142,Default text to an empty string if None,,1051,                    pagebreak.attrib['{%(w)s}type' % NAMESPACES] = 'page',"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2443, 9032, 13, 1078, 822, 17816, 90, 4, 7, 86, 8, 82, 92, 4906, 6, 4064, 399, 29559, 44938, 1546, 60, 796, 705, 7700, 6]"
‚úÖ Best Practice: Handle text with newlines by splitting into parts,"[26486, 227, 6705, 19939, 25, 33141, 2420, 351, 649, 6615, 416, 26021, 656, 3354]",0.5,1095,best_practice,144,Handle text with newlines by splitting into parts,,1095,,[]
üß† ML Signal: Creation of XML elements,"[8582, 100, 254, 10373, 26484, 25, 21582, 286, 23735, 4847]",0.5,1123,ml_signal,147,Creation of XML elements,,1095,                    child_copy = deepcopy(child),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1200, 62, 30073, 796, 2769, 30073, 7, 9410, 8]"
üß† ML Signal: Handling of line breaks in XML,"[8582, 100, 254, 10373, 26484, 25, 49500, 286, 1627, 9457, 287, 23735]",0.5,1123,ml_signal,151,Handling of line breaks in XML,,1123,,[]
‚úÖ Best Practice: Check for placeholder existence before processing,"[26486, 227, 6705, 19939, 25, 6822, 329, 46076, 6224, 878, 7587]",0.5,1142,best_practice,154,Check for placeholder existence before processing,,1123,            parts = self.parts.values(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3354, 796, 2116, 13, 42632, 13, 27160, 3419]"
‚úÖ Best Practice: Insert nodes in reverse order to maintain correct sequence,"[26486, 227, 6705, 19939, 25, 35835, 13760, 287, 9575, 1502, 284, 5529, 3376, 8379]",0.5,1168,best_practice,158,Insert nodes in reverse order to maintain correct sequence,,1142,"                self.merge_rows(field, replacement)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2116, 13, 647, 469, 62, 8516, 7, 3245, 11, 9014, 8]"
üß† ML Signal: Method signature and parameter types can be used to infer method behavior and usage patterns.,"[8582, 100, 254, 10373, 26484, 25, 11789, 9877, 290, 11507, 3858, 460, 307, 973, 284, 13249, 2446, 4069, 290, 8748, 7572, 13]",1.0,1168,ml_signal,155,Method signature and parameter types can be used to infer method behavior and usage patterns.,,1168,,[]
‚úÖ Best Practice: Check for non-empty list before proceeding with operations.,"[26486, 227, 6705, 19939, 25, 6822, 329, 1729, 12, 28920, 1351, 878, 18788, 351, 4560, 13]",0.5,1181,best_practice,159,Check for non-empty list before proceeding with operations.,,1168,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of enumerate for index and value retrieval in loops.,"[26486, 227, 6705, 19939, 25, 5765, 286, 27056, 378, 329, 6376, 290, 1988, 45069, 287, 23607, 13]",0.5,1181,best_practice,162,Use of enumerate for index and value retrieval in loops.,,1181,,[]
‚ö†Ô∏è SAST Risk (Low): Potential performance issue with deepcopy if template is large.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2854, 2071, 351, 2769, 30073, 611, 11055, 318, 1588, 13]",0.5,1213,sast_risk,164,Potential performance issue with deepcopy if template is large.,Low,1181,"        for mf in part.findall('.//MergeField[@name=""%s""]' % field):","[220, 220, 220, 220, 220, 220, 220, 329, 285, 69, 287, 636, 13, 19796, 439, 7, 4458, 1003, 13102, 469, 15878, 58, 31, 3672, 2625, 4, 82, 8973, 6, 4064, 2214, 2599]"
üß† ML Signal: Usage of self.merge indicates a pattern of modifying or combining data structures.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2116, 13, 647, 469, 9217, 257, 3912, 286, 30620, 393, 19771, 1366, 8573, 13]",0.5,1235,ml_signal,166,Usage of self.merge indicates a pattern of modifying or combining data structures.,,1213,            mf.clear()  # clear away the attributes,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 285, 69, 13, 20063, 3419, 220, 1303, 1598, 1497, 262, 12608]"
üß† ML Signal: Conditional logic based on instance attribute can indicate feature flags or configuration options.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 4554, 11688, 460, 7603, 3895, 9701, 393, 8398, 3689, 13]",0.5,1249,ml_signal,170,Conditional logic based on instance attribute can indicate feature flags or configuration options.,,1235,            nodes = [],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13760, 796, 17635]"
‚ö†Ô∏è SAST Risk (Low): Removing elements from a parent structure can lead to unintended side effects if not handled carefully.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 3982, 5165, 4847, 422, 257, 2560, 4645, 460, 1085, 284, 30261, 1735, 3048, 611, 407, 12118, 7773, 13]",0.5,1278,sast_risk,173,Removing elements from a parent structure can lead to unintended side effects if not handled carefully.,Low,1249,"            text_parts = text.replace('\r', '').split('\n')","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2420, 62, 42632, 796, 2420, 13, 33491, 10786, 59, 81, 3256, 10148, 737, 35312, 10786, 59, 77, 11537]"
‚úÖ Best Practice: Use of default argument as None and setting it inside the function to avoid mutable default arguments.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 4578, 355, 6045, 290, 4634, 340, 2641, 262, 2163, 284, 3368, 4517, 540, 4277, 7159, 13]",0.5,1297,best_practice,168,Use of default argument as None and setting it inside the function to avoid mutable default arguments.,,1278,            mf.extend(children),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 285, 69, 13, 2302, 437, 7, 17197, 8]"
"üß† ML Signal: Iterating over XML elements, indicating XML parsing or manipulation.","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 23735, 4847, 11, 12739, 23735, 32096, 393, 17512, 13]",0.5,1319,ml_signal,172,"Iterating over XML elements, indicating XML parsing or manipulation.",,1297,            text = text or ''  # text might be None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2420, 796, 2420, 393, 10148, 220, 1303, 2420, 1244, 307, 6045]"
"üß† ML Signal: Searching for specific XML elements by attribute, indicating data extraction pattern.","[8582, 100, 254, 10373, 26484, 25, 11140, 278, 329, 2176, 23735, 4847, 416, 11688, 11, 12739, 1366, 22236, 3912, 13]",0.5,1355,ml_signal,175,"Searching for specific XML elements by attribute, indicating data extraction pattern.",,1319,                text_node = Element('{%(w)s}t' % NAMESPACES),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2420, 62, 17440, 796, 11703, 10786, 90, 4, 7, 86, 8, 82, 92, 83, 6, 4064, 399, 29559, 44938, 1546, 8]"
‚úÖ Best Practice: Returning multiple values as a tuple for clarity and structure.,"[26486, 227, 6705, 19939, 25, 42882, 3294, 3815, 355, 257, 46545, 329, 16287, 290, 4645, 13]",1.0,1391,best_practice,175,Returning multiple values as a tuple for clarity and structure.,,1355,                text_node = Element('{%(w)s}t' % NAMESPACES),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2420, 62, 17440, 796, 11703, 10786, 90, 4, 7, 86, 8, 82, 92, 83, 6, 4064, 399, 29559, 44938, 1546, 8]"
‚úÖ Best Practice: Consistent return type (tuple) even when returning None values.,"[26486, 227, 6705, 19939, 25, 3515, 7609, 1441, 2099, 357, 83, 29291, 8, 772, 618, 8024, 6045, 3815, 13]",0.5,1427,best_practice,175,Consistent return type (tuple) even when returning None values.,,1391,                text_node = Element('{%(w)s}t' % NAMESPACES),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2420, 62, 17440, 796, 11703, 10786, 90, 4, 7, 86, 8, 82, 92, 83, 6, 4064, 399, 29559, 44938, 1546, 8]"

[
  {
    "line": 11,
    "text": "    from httplib import HTTPSConnection",
    "annotation": "\u2705 Best Practice: Use of try-except for compatibility between Python 2 and 3",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      422,
      1841,
      489,
      571,
      1330,
      38288,
      32048
    ],
    "start_token": 0,
    "end_token": 10,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1949,
      12,
      16341,
      329,
      17764,
      1022,
      11361,
      362,
      290,
      513
    ],
    "label": "best_practice",
    "reason": "Use of try-except for compatibility between Python 2 and 3"
  },
  {
    "line": 13,
    "text": "    from http.client import HTTPSConnection",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules can indicate the functionality of the code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      422,
      2638,
      13,
      16366,
      1330,
      38288,
      32048
    ],
    "start_token": 10,
    "end_token": 20,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      460,
      7603,
      262,
      11244,
      286,
      262,
      2438
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules can indicate the functionality of the code"
  },
  {
    "line": 15,
    "text": "from tushare.util import vars as vs",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules can indicate the functionality of the code",
    "confidence": 1.0,
    "tokens": [
      6738,
      256,
      1530,
      533,
      13,
      22602,
      1330,
      410,
      945,
      355,
      3691
    ],
    "start_token": 20,
    "end_token": 31,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      460,
      7603,
      262,
      11244,
      286,
      262,
      2438
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules can indicate the functionality of the code"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules can indicate the functionality of the code",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 31,
    "end_token": 31,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      460,
      7603,
      262,
      11244,
      286,
      262,
      2438
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules can indicate the functionality of the code"
  },
  {
    "line": 16,
    "text": "from tushare.stock import cons as ct",
    "annotation": "\u2705 Best Practice: Initialize class variables with default values to ensure consistent state",
    "confidence": 0.5,
    "tokens": [
      6738,
      256,
      1530,
      533,
      13,
      13578,
      1330,
      762,
      355,
      269,
      83
    ],
    "start_token": 31,
    "end_token": 42,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      1398,
      9633,
      351,
      4277,
      3815,
      284,
      4155,
      6414,
      1181
    ],
    "label": "best_practice",
    "reason": "Initialize class variables with default values to ensure consistent state"
  },
  {
    "line": 17,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Initialization method with token parameter, indicating potential authentication or API usage",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 42,
    "end_token": 42,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      2446,
      351,
      11241,
      11507,
      11,
      12739,
      2785,
      18239,
      393,
      7824,
      8748
    ],
    "label": "ml_signal",
    "reason": "Initialization method with token parameter, indicating potential authentication or API usage"
  },
  {
    "line": 18,
    "text": "class Client:",
    "annotation": "\u2705 Best Practice: Ensure consistent spacing around parameters for readability",
    "confidence": 0.5,
    "tokens": [
      4871,
      20985,
      25
    ],
    "start_token": 42,
    "end_token": 45,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      6414,
      31050,
      1088,
      10007,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Ensure consistent spacing around parameters for readability"
  },
  {
    "line": 20,
    "text": "    def __init__(self , token):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Storing sensitive information like tokens in instance variables can lead to security risks if not handled properly",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      11593,
      15003,
      834,
      7,
      944,
      837,
      11241,
      2599
    ],
    "start_token": 45,
    "end_token": 57,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      520,
      3255,
      8564,
      1321,
      588,
      16326,
      287,
      4554,
      9633,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      12118,
      6105
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Storing sensitive information like tokens in instance variables can lead to security risks if not handled properly"
  },
  {
    "line": 21,
    "text": "        self.token = token",
    "annotation": "\ud83e\udde0 ML Signal: Use of HTTPSConnection indicates network communication, which can be a signal for network-related behavior",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30001,
      796,
      11241
    ],
    "start_token": 57,
    "end_token": 69,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      38288,
      32048,
      9217,
      3127,
      6946,
      11,
      543,
      460,
      307,
      257,
      6737,
      329,
      3127,
      12,
      5363,
      4069
    ],
    "label": "ml_signal",
    "reason": "Use of HTTPSConnection indicates network communication, which can be a signal for network-related behavior"
  },
  {
    "line": 23,
    "text": "        ",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Hardcoding URLs and ports can lead to security vulnerabilities if not validated or sanitized",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 69,
    "end_token": 77,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6912,
      66,
      7656,
      32336,
      290,
      14090,
      460,
      1085,
      284,
      2324,
      23805,
      611,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Hardcoding URLs and ports can lead to security vulnerabilities if not validated or sanitized"
  },
  {
    "line": 24,
    "text": "        ",
    "annotation": "\u2705 Best Practice: Consider using configuration files or environment variables for URLs and ports",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 77,
    "end_token": 85,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      8398,
      3696,
      393,
      2858,
      9633,
      329,
      32336,
      290,
      14090
    ],
    "label": "best_practice",
    "reason": "Consider using configuration files or environment variables for URLs and ports"
  },
  {
    "line": 19,
    "text": "    httpClient = None",
    "annotation": "\u2705 Best Practice: Use of __del__ method to ensure resources are released when the object is deleted",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2638,
      11792,
      796,
      6045
    ],
    "start_token": 85,
    "end_token": 92,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      11593,
      12381,
      834,
      2446,
      284,
      4155,
      4133,
      389,
      2716,
      618,
      262,
      2134,
      318,
      13140
    ],
    "label": "best_practice",
    "reason": "Use of __del__ method to ensure resources are released when the object is deleted"
  },
  {
    "line": 21,
    "text": "        self.token = token",
    "annotation": "\u2705 Best Practice: Checking if httpClient is not None before attempting to close it",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      30001,
      796,
      11241
    ],
    "start_token": 92,
    "end_token": 104,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      611,
      2638,
      11792,
      318,
      407,
      6045,
      878,
      9361,
      284,
      1969,
      340
    ],
    "label": "best_practice",
    "reason": "Checking if httpClient is not None before attempting to close it"
  },
  {
    "line": 23,
    "text": "        ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for exceptions if httpClient.close() fails, consider using try-except",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 104,
    "end_token": 112,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      13269,
      611,
      2638,
      11792,
      13,
      19836,
      3419,
      10143,
      11,
      2074,
      1262,
      1949,
      12,
      16341
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for exceptions if httpClient.close() fails, consider using try-except"
  },
  {
    "line": 34,
    "text": "        i = path.find('=', start)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential compatibility issue with non-ASCII characters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1312,
      796,
      3108,
      13,
      19796,
      10786,
      28,
      3256,
      923,
      8
    ],
    "start_token": 112,
    "end_token": 129,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      17764,
      2071,
      351,
      1729,
      12,
      42643,
      3978,
      3435
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential compatibility issue with non-ASCII characters"
  },
  {
    "line": 35,
    "text": "        while i != -1 :",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential compatibility issue with non-ASCII characters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      981,
      1312,
      14512,
      532,
      16,
      1058
    ],
    "start_token": 129,
    "end_token": 142,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      17764,
      2071,
      351,
      1729,
      12,
      42643,
      3978,
      3435
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential compatibility issue with non-ASCII characters"
  },
  {
    "line": 39,
    "text": "            if(i>=0):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential compatibility issue with non-ASCII characters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      7,
      72,
      29,
      28,
      15,
      2599
    ],
    "start_token": 142,
    "end_token": 160,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      17764,
      2071,
      351,
      1729,
      12,
      42643,
      3978,
      3435
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential compatibility issue with non-ASCII characters"
  },
  {
    "line": 48,
    "text": "                re += '&'",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential compatibility issue with non-ASCII characters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      302,
      15853,
      705,
      5,
      6
    ],
    "start_token": 160,
    "end_token": 180,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      17764,
      2071,
      351,
      1729,
      12,
      42643,
      3978,
      3435
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential compatibility issue with non-ASCII characters"
  },
  {
    "line": 50,
    "text": "            else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential compatibility issue with non-ASCII characters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 180,
    "end_token": 193,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      17764,
      2071,
      351,
      1729,
      12,
      42643,
      3978,
      3435
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential compatibility issue with non-ASCII characters"
  },
  {
    "line": 53,
    "text": "                        if ct.PY3:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential compatibility issue with non-ASCII characters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      269,
      83,
      13,
      47,
      56,
      18,
      25
    ],
    "start_token": 193,
    "end_token": 224,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      17764,
      2071,
      351,
      1729,
      12,
      42643,
      3978,
      3435
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential compatibility issue with non-ASCII characters"
  },
  {
    "line": 54,
    "text": "                            re += urllib.parse.quote(path[j])",
    "annotation": "\u2705 Best Practice: Method names should follow the snake_case convention in Python, consider renaming to __init__ if this is meant to be a constructor.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      302,
      15853,
      2956,
      297,
      571,
      13,
      29572,
      13,
      22708,
      7,
      6978,
      58,
      73,
      12962
    ],
    "start_token": 224,
    "end_token": 265,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11789,
      3891,
      815,
      1061,
      262,
      17522,
      62,
      7442,
      9831,
      287,
      11361,
      11,
      2074,
      8851,
      3723,
      284,
      11593,
      15003,
      834,
      611,
      428,
      318,
      4001,
      284,
      307,
      257,
      23772,
      13
    ],
    "label": "best_practice",
    "reason": "Method names should follow the snake_case convention in Python, consider renaming to __init__ if this is meant to be a constructor."
  },
  {
    "line": 56,
    "text": "                            re += urllib.quote(path[j])",
    "annotation": "\ud83e\udde0 ML Signal: Storing a token in an instance variable, indicating potential use of authentication or API access.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      302,
      15853,
      2956,
      297,
      571,
      13,
      22708,
      7,
      6978,
      58,
      73,
      12962
    ],
    "start_token": 265,
    "end_token": 304,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      520,
      3255,
      257,
      11241,
      287,
      281,
      4554,
      7885,
      11,
      12739,
      2785,
      779,
      286,
      18239,
      393,
      7824,
      1895,
      13
    ],
    "label": "ml_signal",
    "reason": "Storing a token in an instance variable, indicating potential use of authentication or API access."
  },
  {
    "line": 59,
    "text": "                start = n",
    "annotation": "\u2705 Best Practice: Consider using a more descriptive method name for encodepath",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      923,
      796,
      299
    ],
    "start_token": 304,
    "end_token": 322,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      517,
      35644,
      2446,
      1438,
      329,
      2207,
      375,
      538,
      776
    ],
    "label": "best_practice",
    "reason": "Consider using a more descriptive method name for encodepath"
  },
  {
    "line": 61,
    "text": "        return re",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potentially unsafe handling of HTTP requests without validation or sanitization",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      302
    ],
    "start_token": 322,
    "end_token": 331,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6902,
      3746,
      21596,
      9041,
      286,
      14626,
      7007,
      1231,
      21201,
      393,
      5336,
      270,
      1634
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potentially unsafe handling of HTTP requests without validation or sanitization"
  },
  {
    "line": 64,
    "text": "    def init(self, token):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Hardcoding sensitive information like tokens in headers can lead to security risks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      2315,
      7,
      944,
      11,
      11241,
      2599
    ],
    "start_token": 331,
    "end_token": 341,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6912,
      66,
      7656,
      8564,
      1321,
      588,
      16326,
      287,
      24697,
      460,
      1085,
      284,
      2324,
      7476
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Hardcoding sensitive information like tokens in headers can lead to security risks"
  },
  {
    "line": 67,
    "text": "        ",
    "annotation": "\ud83e\udde0 ML Signal: Checking response status to determine success or failure",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 341,
    "end_token": 349,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      2882,
      3722,
      284,
      5004,
      1943,
      393,
      5287
    ],
    "label": "ml_signal",
    "reason": "Checking response status to determine success or failure"
  },
  {
    "line": 72,
    "text": "        try:",
    "annotation": "\ud83e\udde0 ML Signal: Detecting file type by checking the path for specific extensions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 349,
    "end_token": 358,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35874,
      278,
      2393,
      2099,
      416,
      10627,
      262,
      3108,
      329,
      2176,
      18366
    ],
    "label": "ml_signal",
    "reason": "Detecting file type by checking the path for specific extensions"
  },
  {
    "line": 73,
    "text": "            self.httpClient.request('GET', path,",
    "annotation": "\u2705 Best Practice: Consider handling potential decoding errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      4023,
      11792,
      13,
      25927,
      10786,
      18851,
      3256,
      3108,
      11
    ],
    "start_token": 358,
    "end_token": 380,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      9041,
      2785,
      39938,
      8563
    ],
    "label": "best_practice",
    "reason": "Consider handling potential decoding errors"
  },
  {
    "line": 73,
    "text": "            self.httpClient.request('GET', path,",
    "annotation": "\u2705 Best Practice: Consider logging the exception for better debugging",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      4023,
      11792,
      13,
      25927,
      10786,
      18851,
      3256,
      3108,
      11
    ],
    "start_token": 380,
    "end_token": 402,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      18931,
      262,
      6631,
      329,
      1365,
      28769
    ],
    "label": "best_practice",
    "reason": "Consider logging the exception for better debugging"
  }
]
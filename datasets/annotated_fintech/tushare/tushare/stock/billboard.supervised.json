[
  {
    "line": 9,
    "text": "\"\"\"",
    "annotation": "\u2705 Best Practice: Importing specific modules or functions can improve code readability and reduce memory usage.",
    "confidence": 1.0,
    "tokens": [
      37811
    ],
    "start_token": 0,
    "end_token": 1,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      13103,
      393,
      5499,
      460,
      2987,
      2438,
      1100,
      1799,
      290,
      4646,
      4088,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific modules or functions can improve code readability and reduce memory usage."
  },
  {
    "line": 20,
    "text": "from tushare.util import dateu as du",
    "annotation": "\u2705 Best Practice: Handling ImportError ensures compatibility with different Python versions.",
    "confidence": 1.0,
    "tokens": [
      6738,
      256,
      1530,
      533,
      13,
      22602,
      1330,
      3128,
      84,
      355,
      7043
    ],
    "start_token": 1,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      49500,
      17267,
      12331,
      19047,
      17764,
      351,
      1180,
      11361,
      6300,
      13
    ],
    "label": "best_practice",
    "reason": "Handling ImportError ensures compatibility with different Python versions."
  },
  {
    "line": 60,
    "text": "        if(du.is_holiday(date)):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using urlopen without proper validation or sanitization of the URL can lead to security risks.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      7,
      646,
      13,
      271,
      62,
      37689,
      7,
      4475,
      8,
      2599
    ],
    "start_token": 12,
    "end_token": 30,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      19016,
      9654,
      1231,
      1774,
      21201,
      393,
      5336,
      270,
      1634,
      286,
      262,
      10289,
      460,
      1085,
      284,
      2324,
      7476,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using urlopen without proper validation or sanitization of the URL can lead to security risks."
  },
  {
    "line": 62,
    "text": "    for _ in range(retry_count):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Decoding and evaluating external data can lead to code injection vulnerabilities.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      4808,
      287,
      2837,
      7,
      1186,
      563,
      62,
      9127,
      2599
    ],
    "start_token": 30,
    "end_token": 43,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      4280,
      7656,
      290,
      22232,
      7097,
      1366,
      460,
      1085,
      284,
      2438,
      16954,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Decoding and evaluating external data can lead to code injection vulnerabilities."
  },
  {
    "line": 65,
    "text": "            request = Request(rv.LHB_URL%(ct.P_TYPE['http'], ct.DOMAINS['em'], date, date))",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Using eval on external data can lead to code execution vulnerabilities.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      796,
      19390,
      7,
      81,
      85,
      13,
      43,
      32886,
      62,
      21886,
      4,
      7,
      310,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357,
      269,
      83,
      13,
      39170,
      32,
      20913,
      17816,
      368,
      6,
      4357,
      3128,
      11,
      3128,
      4008
    ],
    "start_token": 43,
    "end_token": 90,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      8554,
      5418,
      319,
      7097,
      1366,
      460,
      1085,
      284,
      2438,
      9706,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Using eval on external data can lead to code execution vulnerabilities."
  },
  {
    "line": 89,
    "text": "                df[col] = df[col].map(ct.FORMAT)",
    "annotation": "\u2705 Best Practice: Logging exceptions instead of printing them can provide better insights and traceability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      58,
      4033,
      60,
      796,
      47764,
      58,
      4033,
      4083,
      8899,
      7,
      310,
      13,
      21389,
      1404,
      8
    ],
    "start_token": 90,
    "end_token": 121,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      13269,
      2427,
      286,
      13570,
      606,
      460,
      2148,
      1365,
      17218,
      290,
      12854,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Logging exceptions instead of printing them can provide better insights and traceability."
  },
  {
    "line": 91,
    "text": "        except Exception as e:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic IOError without specific context can make debugging difficult.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 121,
    "end_token": 133,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      24418,
      12331,
      1231,
      2176,
      4732,
      460,
      787,
      28769,
      2408,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic IOError without specific context can make debugging difficult."
  },
  {
    "line": 91,
    "text": "        except Exception as e:",
    "annotation": "\u2705 Best Practice: Provide a clear and concise docstring for the function, explaining parameters and return values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 133,
    "end_token": 145,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44290,
      257,
      1598,
      290,
      35327,
      2205,
      8841,
      329,
      262,
      2163,
      11,
      11170,
      10007,
      290,
      1441,
      3815
    ],
    "label": "best_practice",
    "reason": "Provide a clear and concise docstring for the function, explaining parameters and return values"
  },
  {
    "line": 114,
    "text": "        count\uff1a\u4e0a\u699c\u6b21\u6570",
    "annotation": "\u2705 Best Practice: Check input validity before proceeding with the main logic",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      954,
      171,
      120,
      248,
      41468,
      162,
      99,
      250,
      162,
      105,
      94,
      46763,
      108
    ],
    "start_token": 145,
    "end_token": 165,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      5128,
      19648,
      878,
      18788,
      351,
      262,
      1388,
      9156
    ],
    "label": "best_practice",
    "reason": "Check input validity before proceeding with the main logic"
  },
  {
    "line": 115,
    "text": "        bamount\uff1a\u7d2f\u79ef\u8d2d\u4e70\u989d(\u4e07)     ",
    "annotation": "\ud83e\udde0 ML Signal: Writing headers or logs can be a signal for tracking or auditing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      275,
      17287,
      171,
      120,
      248,
      163,
      112,
      107,
      163,
      100,
      107,
      164,
      112,
      255,
      20046,
      108,
      165,
      95,
      251,
      7,
      10310,
      229,
      8,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 165,
    "end_token": 200,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      22183,
      24697,
      393,
      17259,
      460,
      307,
      257,
      6737,
      329,
      9646,
      393,
      2709,
      1780
    ],
    "label": "ml_signal",
    "reason": "Writing headers or logs can be a signal for tracking or auditing"
  },
  {
    "line": 121,
    "text": "    ",
    "annotation": "\u2705 Best Practice: Use map with lambda for concise and readable transformations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220
    ],
    "start_token": 200,
    "end_token": 204,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      3975,
      351,
      37456,
      329,
      35327,
      290,
      31744,
      38226
    ],
    "label": "best_practice",
    "reason": "Use map with lambda for concise and readable transformations"
  },
  {
    "line": 123,
    "text": "        ct._write_head()",
    "annotation": "\u2705 Best Practice: Remove duplicates to ensure data integrity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13557,
      13564,
      62,
      2256,
      3419
    ],
    "start_token": 204,
    "end_token": 218,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17220,
      14184,
      16856,
      284,
      4155,
      1366,
      11540
    ],
    "label": "best_practice",
    "reason": "Remove duplicates to ensure data integrity"
  },
  {
    "line": 122,
    "text": "    if ct._check_lhb_input(days) is True:",
    "annotation": "\u2705 Best Practice: Consider using a logger instead of direct console writing for better control over logging levels and outputs.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      269,
      83,
      13557,
      9122,
      62,
      75,
      71,
      65,
      62,
      15414,
      7,
      12545,
      8,
      318,
      6407,
      25
    ],
    "start_token": 218,
    "end_token": 238,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      49706,
      2427,
      286,
      1277,
      8624,
      3597,
      329,
      1365,
      1630,
      625,
      18931,
      2974,
      290,
      23862,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a logger instead of direct console writing for better control over logging levels and outputs."
  },
  {
    "line": 125,
    "text": "                        pause=pause)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of time.sleep indicates a retry mechanism or rate limiting.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14985,
      28,
      32125,
      8
    ],
    "start_token": 238,
    "end_token": 265,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      640,
      13,
      42832,
      9217,
      257,
      1005,
      563,
      9030,
      393,
      2494,
      15637,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of time.sleep indicates a retry mechanism or rate limiting."
  },
  {
    "line": 128,
    "text": "            df = df.drop_duplicates('code')",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      47764,
      13,
      14781,
      62,
      646,
      489,
      16856,
      10786,
      8189,
      11537
    ],
    "start_token": 265,
    "end_token": 288,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      10289,
      5103,
      1262,
      4731,
      33313,
      460,
      1085,
      284,
      16954,
      23805,
      611,
      17311,
      389,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized."
  },
  {
    "line": 131,
    "text": "    ",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Network operations can fail or hang; consider adding more robust error handling or timeouts.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220
    ],
    "start_token": 288,
    "end_token": 292,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7311,
      4560,
      460,
      2038,
      393,
      8181,
      26,
      2074,
      4375,
      517,
      12373,
      4049,
      9041,
      393,
      640,
      5269,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Network operations can fail or hang; consider adding more robust error handling or timeouts."
  },
  {
    "line": 133,
    "text": "    ct._write_console()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure the encoding used is correct and consistent with the data source.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      269,
      83,
      13557,
      13564,
      62,
      41947,
      3419
    ],
    "start_token": 292,
    "end_token": 302,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      262,
      21004,
      973,
      318,
      3376,
      290,
      6414,
      351,
      262,
      1366,
      2723,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure the encoding used is correct and consistent with the data source."
  },
  {
    "line": 135,
    "text": "        time.sleep(pause)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Parsing HTML from untrusted sources can lead to security vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      32125,
      8
    ],
    "start_token": 302,
    "end_token": 315,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      23042,
      278,
      11532,
      422,
      1418,
      81,
      8459,
      4237,
      460,
      1085,
      284,
      2324,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Parsing HTML from untrusted sources can lead to security vulnerabilities."
  },
  {
    "line": 139,
    "text": "            text = urlopen(request, timeout=10).read()",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on Python version indicates compatibility handling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2420,
      796,
      19016,
      9654,
      7,
      25927,
      11,
      26827,
      28,
      940,
      737,
      961,
      3419
    ],
    "start_token": 315,
    "end_token": 339,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      11361,
      2196,
      9217,
      17764,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on Python version indicates compatibility handling."
  },
  {
    "line": 144,
    "text": "                sarr = [etree.tostring(node).decode('utf-8') for node in res]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the HTML content is sanitized before processing to prevent XSS or other injection attacks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      3258,
      796,
      685,
      316,
      631,
      13,
      83,
      455,
      1806,
      7,
      17440,
      737,
      12501,
      1098,
      10786,
      40477,
      12,
      23,
      11537,
      329,
      10139,
      287,
      581,
      60
    ],
    "start_token": 339,
    "end_token": 379,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      11532,
      2695,
      318,
      5336,
      36951,
      878,
      7587,
      284,
      2948,
      1395,
      5432,
      393,
      584,
      16954,
      3434,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the HTML content is sanitized before processing to prevent XSS or other injection attacks."
  },
  {
    "line": 146,
    "text": "                sarr = [etree.tostring(node) for node in res]",
    "annotation": "\u2705 Best Practice: Ensure that the column names in df.columns match the expected schema to prevent runtime errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      3258,
      796,
      685,
      316,
      631,
      13,
      83,
      455,
      1806,
      7,
      17440,
      8,
      329,
      10139,
      287,
      581,
      60
    ],
    "start_token": 379,
    "end_token": 412,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      262,
      5721,
      3891,
      287,
      47764,
      13,
      28665,
      82,
      2872,
      262,
      2938,
      32815,
      284,
      2948,
      19124,
      8563,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure that the column names in df.columns match the expected schema to prevent runtime errors."
  },
  {
    "line": 149,
    "text": "            df = pd.read_html(sarr)[0]",
    "annotation": "\u2705 Best Practice: Consider using pd.concat instead of DataFrame.append for better performance.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      961,
      62,
      6494,
      7,
      82,
      3258,
      38381,
      15,
      60
    ],
    "start_token": 412,
    "end_token": 437,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      279,
      67,
      13,
      1102,
      9246,
      2427,
      286,
      6060,
      19778,
      13,
      33295,
      329,
      1365,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using pd.concat instead of DataFrame.append for better performance."
  },
  {
    "line": 150,
    "text": "            df.columns = rv.LHB_GGTJ_COLS",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Regular expressions can be computationally expensive; ensure they are necessary and optimized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      374,
      85,
      13,
      43,
      32886,
      62,
      11190,
      51,
      41,
      62,
      25154,
      50
    ],
    "start_token": 437,
    "end_token": 465,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      23603,
      14700,
      460,
      307,
      2653,
      15208,
      5789,
      26,
      4155,
      484,
      389,
      3306,
      290,
      23392,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Regular expressions can be computationally expensive; ensure they are necessary and optimized."
  },
  {
    "line": 150,
    "text": "            df.columns = rv.LHB_GGTJ_COLS",
    "annotation": "\u2705 Best Practice: Catch specific exceptions instead of a general Exception to handle known error cases more effectively.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      374,
      85,
      13,
      43,
      32886,
      62,
      11190,
      51,
      41,
      62,
      25154,
      50
    ],
    "start_token": 465,
    "end_token": 493,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25750,
      2176,
      13269,
      2427,
      286,
      257,
      2276,
      35528,
      284,
      5412,
      1900,
      4049,
      2663,
      517,
      6840,
      13
    ],
    "label": "best_practice",
    "reason": "Catch specific exceptions instead of a general Exception to handle known error cases more effectively."
  },
  {
    "line": 150,
    "text": "            df.columns = rv.LHB_GGTJ_COLS",
    "annotation": "\u2705 Best Practice: Provide a clear and concise docstring for the function.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      374,
      85,
      13,
      43,
      32886,
      62,
      11190,
      51,
      41,
      62,
      25154,
      50
    ],
    "start_token": 493,
    "end_token": 521,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      44290,
      257,
      1598,
      290,
      35327,
      2205,
      8841,
      329,
      262,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Provide a clear and concise docstring for the function."
  },
  {
    "line": 171,
    "text": "    pause : int, \u9ed8\u8ba4 0",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential risk if ct._check_lhb_input is not properly validated.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      14985,
      1058,
      493,
      11,
      16268,
      119,
      246,
      164,
      106,
      97,
      657
    ],
    "start_token": 521,
    "end_token": 535,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      2526,
      611,
      269,
      83,
      13557,
      9122,
      62,
      75,
      71,
      65,
      62,
      15414,
      318,
      407,
      6105,
      31031,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential risk if ct._check_lhb_input is not properly validated."
  },
  {
    "line": 172,
    "text": "                \u91cd\u590d\u8bf7\u6c42\u6570\u636e\u8fc7\u7a0b\u4e2d\u6682\u505c\u7684\u79d2\u6570\uff0c\u9632\u6b62\u8bf7\u6c42\u95f4\u9694\u65f6\u95f4\u592a\u77ed\u51fa\u73b0\u7684\u95ee\u9898",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a custom function to write headers.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16268,
      229,
      235,
      13783,
      235,
      46237,
      115,
      162,
      109,
      224,
      46763,
      108,
      162,
      235,
      106,
      32573,
      229,
      163,
      101,
      233,
      40792,
      162,
      248,
      224,
      161,
      223,
      250,
      21410,
      163,
      100,
      240,
      46763,
      108,
      171,
      120,
      234,
      165,
      246,
      110,
      29826,
      95,
      46237,
      115,
      162,
      109,
      224,
      29785,
      112,
      49694,
      242,
      33768,
      114,
      29785,
      112,
      13783,
      103,
      163,
      253,
      255,
      49035,
      118,
      163,
      236,
      108,
      21410,
      29785,
      106,
      165,
      95,
      246
    ],
    "start_token": 535,
    "end_token": 620,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2183,
      2163,
      284,
      3551,
      24697,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of a custom function to write headers."
  },
  {
    "line": 175,
    "text": "    broker\uff1a\u8425\u4e1a\u90e8\u540d\u79f0",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of calling a function with retry and pause parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      20426,
      171,
      120,
      248,
      164,
      238,
      98,
      10310,
      21253,
      225,
      101,
      28938,
      235,
      163,
      100,
      108
    ],
    "start_token": 620,
    "end_token": 639,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4585,
      257,
      2163,
      351,
      1005,
      563,
      290,
      14985,
      10007,
      13
    ],
    "label": "ml_signal",
    "reason": "Pattern of calling a function with retry and pause parameters."
  },
  {
    "line": 178,
    "text": "    bcount\uff1a\u4e70\u5165\u5e2d\u4f4d\u6570",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataFrame object.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      275,
      9127,
      171,
      120,
      248,
      20046,
      108,
      17739,
      98,
      30585,
      255,
      19526,
      235,
      46763,
      108
    ],
    "start_token": 639,
    "end_token": 657,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      19778,
      2134,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning a DataFrame object."
  },
  {
    "line": 176,
    "text": "    count\uff1a\u4e0a\u699c\u6b21\u6570",
    "annotation": "\u2705 Best Practice: Consider using a logger instead of direct console output for better control over logging levels and outputs.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      954,
      171,
      120,
      248,
      41468,
      162,
      99,
      250,
      162,
      105,
      94,
      46763,
      108
    ],
    "start_token": 657,
    "end_token": 673,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      49706,
      2427,
      286,
      1277,
      8624,
      5072,
      329,
      1365,
      1630,
      625,
      18931,
      2974,
      290,
      23862,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a logger instead of direct console output for better control over logging levels and outputs."
  },
  {
    "line": 179,
    "text": "    samount\uff1a\u7d2f\u79ef\u5356\u51fa\u989d(\u4e07)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of time.sleep to handle rate limiting or retry logic.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6072,
      608,
      171,
      120,
      248,
      163,
      112,
      107,
      163,
      100,
      107,
      39355,
      244,
      49035,
      118,
      165,
      95,
      251,
      7,
      10310,
      229,
      8
    ],
    "start_token": 673,
    "end_token": 698,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      640,
      13,
      42832,
      284,
      5412,
      2494,
      15637,
      393,
      1005,
      563,
      9156,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of time.sleep to handle rate limiting or retry logic."
  },
  {
    "line": 182,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): URL construction using string formatting can lead to injection vulnerabilities if inputs are not properly sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 698,
    "end_token": 702,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      10289,
      5103,
      1262,
      4731,
      33313,
      460,
      1085,
      284,
      16954,
      23805,
      611,
      17311,
      389,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "URL construction using string formatting can lead to injection vulnerabilities if inputs are not properly sanitized."
  },
  {
    "line": 185,
    "text": "        df =  _broker_tops(days, pageNo=1, retry_count=retry_count,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Network operations can be risky; consider handling potential exceptions or errors.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      220,
      4808,
      7957,
      6122,
      62,
      35011,
      7,
      12545,
      11,
      2443,
      2949,
      28,
      16,
      11,
      1005,
      563,
      62,
      9127,
      28,
      1186,
      563,
      62,
      9127,
      11
    ],
    "start_token": 702,
    "end_token": 735,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7311,
      4560,
      460,
      307,
      17564,
      26,
      2074,
      9041,
      2785,
      13269,
      393,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Network operations can be risky; consider handling potential exceptions or errors."
  },
  {
    "line": 187,
    "text": "        return df",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Decoding with a specific encoding can lead to issues if the encoding is incorrect or changes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764
    ],
    "start_token": 735,
    "end_token": 744,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4280,
      7656,
      351,
      257,
      2176,
      21004,
      460,
      1085,
      284,
      2428,
      611,
      262,
      21004,
      318,
      11491,
      393,
      2458,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Decoding with a specific encoding can lead to issues if the encoding is incorrect or changes."
  },
  {
    "line": 189,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Parsing HTML from untrusted sources can lead to security vulnerabilities.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 744,
    "end_token": 744,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      23042,
      278,
      11532,
      422,
      1418,
      81,
      8459,
      4237,
      460,
      1085,
      284,
      2324,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Parsing HTML from untrusted sources can lead to security vulnerabilities."
  },
  {
    "line": 193,
    "text": "        time.sleep(pause)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on Python version indicates compatibility handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      32125,
      8
    ],
    "start_token": 744,
    "end_token": 757,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      11361,
      2196,
      9217,
      17764,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on Python version indicates compatibility handling."
  },
  {
    "line": 198,
    "text": "            text = text.decode('GBK')",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using read_html can be resource-intensive; ensure the input is sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2420,
      796,
      2420,
      13,
      12501,
      1098,
      10786,
      4579,
      42,
      11537
    ],
    "start_token": 757,
    "end_token": 778,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      1100,
      62,
      6494,
      460,
      307,
      8271,
      12,
      38096,
      26,
      4155,
      262,
      5128,
      318,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using read_html can be resource-intensive; ensure the input is sanitized."
  },
  {
    "line": 202,
    "text": "                sarr = [etree.tostring(node).decode('utf-8') for node in res]",
    "annotation": "\u2705 Best Practice: Consider using pd.concat instead of DataFrame.append for better performance.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      3258,
      796,
      685,
      316,
      631,
      13,
      83,
      455,
      1806,
      7,
      17440,
      737,
      12501,
      1098,
      10786,
      40477,
      12,
      23,
      11537,
      329,
      10139,
      287,
      581,
      60
    ],
    "start_token": 778,
    "end_token": 818,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      279,
      67,
      13,
      1102,
      9246,
      2427,
      286,
      6060,
      19778,
      13,
      33295,
      329,
      1365,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using pd.concat instead of DataFrame.append for better performance."
  },
  {
    "line": 204,
    "text": "                sarr = [etree.tostring(node) for node in res]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Regular expressions can be inefficient; ensure patterns are optimized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      3258,
      796,
      685,
      316,
      631,
      13,
      83,
      455,
      1806,
      7,
      17440,
      8,
      329,
      10139,
      287,
      581,
      60
    ],
    "start_token": 818,
    "end_token": 851,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      23603,
      14700,
      460,
      307,
      30904,
      26,
      4155,
      7572,
      389,
      23392,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Regular expressions can be inefficient; ensure patterns are optimized."
  },
  {
    "line": 204,
    "text": "                sarr = [etree.tostring(node) for node in res]",
    "annotation": "\ud83e\udde0 ML Signal: Recursive function calls can indicate complex data processing or pagination handling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      3258,
      796,
      685,
      316,
      631,
      13,
      83,
      455,
      1806,
      7,
      17440,
      8,
      329,
      10139,
      287,
      581,
      60
    ],
    "start_token": 851,
    "end_token": 884,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      3311,
      30753,
      2163,
      3848,
      460,
      7603,
      3716,
      1366,
      7587,
      393,
      42208,
      1883,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Recursive function calls can indicate complex data processing or pagination handling."
  },
  {
    "line": 204,
    "text": "                sarr = [etree.tostring(node) for node in res]",
    "annotation": "\u2705 Best Practice: Consider logging exceptions instead of printing for better error tracking and analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      3258,
      796,
      685,
      316,
      631,
      13,
      83,
      455,
      1806,
      7,
      17440,
      8,
      329,
      10139,
      287,
      581,
      60
    ],
    "start_token": 884,
    "end_token": 917,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      18931,
      13269,
      2427,
      286,
      13570,
      329,
      1365,
      4049,
      9646,
      290,
      3781,
      13
    ],
    "label": "best_practice",
    "reason": "Consider logging exceptions instead of printing for better error tracking and analysis."
  },
  {
    "line": 204,
    "text": "                sarr = [etree.tostring(node) for node in res]",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the function and its parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      264,
      3258,
      796,
      685,
      316,
      631,
      13,
      83,
      455,
      1806,
      7,
      17440,
      8,
      329,
      10139,
      287,
      581,
      60
    ],
    "start_token": 917,
    "end_token": 950,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2163,
      290,
      663,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the function and its parameters."
  },
  {
    "line": 225,
    "text": "    days:int",
    "annotation": "\u2705 Best Practice: Checking input validity before proceeding with the function logic.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1528,
      25,
      600
    ],
    "start_token": 950,
    "end_token": 956,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      5128,
      19648,
      878,
      18788,
      351,
      262,
      2163,
      9156,
      13
    ],
    "label": "best_practice",
    "reason": "Checking input validity before proceeding with the function logic."
  },
  {
    "line": 226,
    "text": "              \u5929\u6570\uff0c\u7edf\u8ba1n\u5929\u4ee5\u6765\u4e0a\u699c\u6b21\u6570\uff0c\u9ed8\u8ba4\u4e3a5\u5929\uff0c\u5176\u4f59\u662f10\u300130\u300160",
    "annotation": "\ud83e\udde0 ML Signal: Writing headers might indicate logging or data collection behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36469,
      102,
      46763,
      108,
      171,
      120,
      234,
      163,
      119,
      253,
      164,
      106,
      94,
      77,
      25465,
      20015,
      98,
      30266,
      98,
      41468,
      162,
      99,
      250,
      162,
      105,
      94,
      46763,
      108,
      171,
      120,
      234,
      165,
      119,
      246,
      164,
      106,
      97,
      10310,
      118,
      20,
      25465,
      171,
      120,
      234,
      17739,
      114,
      19526,
      247,
      42468,
      940,
      23513,
      1270,
      23513,
      1899
    ],
    "start_token": 956,
    "end_token": 1023,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      22183,
      24697,
      1244,
      7603,
      18931,
      393,
      1366,
      4947,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Writing headers might indicate logging or data collection behavior."
  },
  {
    "line": 229,
    "text": "    pause : int, \u9ed8\u8ba4 0",
    "annotation": "\ud83e\udde0 ML Signal: Usage of retry_count and pause suggests handling of network requests.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      14985,
      1058,
      493,
      11,
      16268,
      119,
      246,
      164,
      106,
      97,
      657
    ],
    "start_token": 1023,
    "end_token": 1037,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1005,
      563,
      62,
      9127,
      290,
      14985,
      5644,
      9041,
      286,
      3127,
      7007,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of retry_count and pause suggests handling of network requests."
  },
  {
    "line": 232,
    "text": "    Return",
    "annotation": "\ud83e\udde0 ML Signal: Mapping and formatting data indicates data preprocessing behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      8229
    ],
    "start_token": 1037,
    "end_token": 1041,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      290,
      33313,
      1366,
      9217,
      1366,
      662,
      36948,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping and formatting data indicates data preprocessing behavior."
  },
  {
    "line": 231,
    "text": "                ",
    "annotation": "\u2705 Best Practice: Consider using a logger instead of writing directly to the console for better control over logging levels and outputs.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 1041,
    "end_token": 1057,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      49706,
      2427,
      286,
      3597,
      3264,
      284,
      262,
      8624,
      329,
      1365,
      1630,
      625,
      18931,
      2974,
      290,
      23862,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a logger instead of writing directly to the console for better control over logging levels and outputs."
  },
  {
    "line": 234,
    "text": "    code:\u4ee3\u7801",
    "annotation": "\ud83e\udde0 ML Signal: Usage of time.sleep indicates a retry mechanism or rate limiting.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2438,
      25,
      47987,
      163,
      254,
      223
    ],
    "start_token": 1057,
    "end_token": 1066,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      640,
      13,
      42832,
      9217,
      257,
      1005,
      563,
      9030,
      393,
      2494,
      15637,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of time.sleep indicates a retry mechanism or rate limiting."
  },
  {
    "line": 237,
    "text": "    bcount:\u4e70\u5165\u6b21\u6570",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      275,
      9127,
      25,
      20046,
      108,
      17739,
      98,
      162,
      105,
      94,
      46763,
      108
    ],
    "start_token": 1066,
    "end_token": 1081,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      10289,
      5103,
      1262,
      4731,
      33313,
      460,
      1085,
      284,
      16954,
      23805,
      611,
      17311,
      389,
      407,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized."
  },
  {
    "line": 240,
    "text": "    net:\u51c0\u989d(\u4e07)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Network operations can fail or hang; consider adding more robust error handling or timeouts.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2010,
      25,
      49035,
      222,
      165,
      95,
      251,
      7,
      10310,
      229,
      8
    ],
    "start_token": 1081,
    "end_token": 1095,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7311,
      4560,
      460,
      2038,
      393,
      8181,
      26,
      2074,
      4375,
      517,
      12373,
      4049,
      9041,
      393,
      640,
      5269,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Network operations can fail or hang; consider adding more robust error handling or timeouts."
  },
  {
    "line": 242,
    "text": "    if ct._check_lhb_input(days) is True:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure the encoding used is correct and consistent with the server's response.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      269,
      83,
      13557,
      9122,
      62,
      75,
      71,
      65,
      62,
      15414,
      7,
      12545,
      8,
      318,
      6407,
      25
    ],
    "start_token": 1095,
    "end_token": 1115,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      262,
      21004,
      973,
      318,
      3376,
      290,
      6414,
      351,
      262,
      4382,
      338,
      2882,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure the encoding used is correct and consistent with the server's response."
  },
  {
    "line": 244,
    "text": "        df =  _inst_tops(days, pageNo=1, retry_count=retry_count,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Parsing HTML from untrusted sources can lead to security vulnerabilities.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      220,
      4808,
      8625,
      62,
      35011,
      7,
      12545,
      11,
      2443,
      2949,
      28,
      16,
      11,
      1005,
      563,
      62,
      9127,
      28,
      1186,
      563,
      62,
      9127,
      11
    ],
    "start_token": 1115,
    "end_token": 1147,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      23042,
      278,
      11532,
      422,
      1418,
      81,
      8459,
      4237,
      460,
      1085,
      284,
      2324,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Parsing HTML from untrusted sources can lead to security vulnerabilities."
  },
  {
    "line": 248,
    "text": " ",
    "annotation": "\u2705 Best Practice: Use list comprehensions for more concise and readable code.",
    "confidence": 0.5,
    "tokens": [
      220
    ],
    "start_token": 1147,
    "end_token": 1148,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1351,
      8569,
      507,
      329,
      517,
      35327,
      290,
      31744,
      2438,
      13
    ],
    "label": "best_practice",
    "reason": "Use list comprehensions for more concise and readable code."
  },
  {
    "line": 254,
    "text": "        try:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure the HTML content is sanitized before processing to prevent XSS or other injection attacks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 1148,
    "end_token": 1157,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      262,
      11532,
      2695,
      318,
      5336,
      36951,
      878,
      7587,
      284,
      2948,
      1395,
      5432,
      393,
      584,
      16954,
      3434,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure the HTML content is sanitized before processing to prevent XSS or other injection attacks."
  },
  {
    "line": 256,
    "text": "                                               ct.PAGES['fd'], last, pageNo))",
    "annotation": "\u2705 Best Practice: Consider using more descriptive variable names for better readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      4537,
      48075,
      17816,
      16344,
      6,
      4357,
      938,
      11,
      2443,
      2949,
      4008
    ],
    "start_token": 1157,
    "end_token": 1217,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      517,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using more descriptive variable names for better readability."
  },
  {
    "line": 259,
    "text": "            html = lxml.html.parse(StringIO(text))",
    "annotation": "\u2705 Best Practice: Using append in a loop can be inefficient; consider collecting data in a list and concatenating once.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      27711,
      796,
      300,
      19875,
      13,
      6494,
      13,
      29572,
      7,
      10100,
      9399,
      7,
      5239,
      4008
    ],
    "start_token": 1217,
    "end_token": 1242,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      24443,
      287,
      257,
      9052,
      460,
      307,
      30904,
      26,
      2074,
      13157,
      1366,
      287,
      257,
      1351,
      290,
      1673,
      36686,
      803,
      1752,
      13
    ],
    "label": "best_practice",
    "reason": "Using append in a loop can be inefficient; consider collecting data in a list and concatenating once."
  },
  {
    "line": 260,
    "text": "            res = html.xpath(\"//table[@id=\\\"dataTable\\\"]/tr\")",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Regular expressions can be error-prone; ensure patterns are well-defined and tested.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      581,
      796,
      27711,
      13,
      87,
      6978,
      7203,
      1003,
      11487,
      58,
      31,
      312,
      17553,
      7890,
      10962,
      7879,
      60,
      14,
      2213,
      4943
    ],
    "start_token": 1242,
    "end_token": 1273,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      23603,
      14700,
      460,
      307,
      4049,
      12,
      46330,
      26,
      4155,
      7572,
      389,
      880,
      12,
      23211,
      290,
      6789,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Regular expressions can be error-prone; ensure patterns are well-defined and tested."
  },
  {
    "line": 277,
    "text": "        except Exception as e:",
    "annotation": "\u2705 Best Practice: Catch specific exceptions instead of a general Exception to handle known error cases more effectively.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 1273,
    "end_token": 1285,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25750,
      2176,
      13269,
      2427,
      286,
      257,
      2276,
      35528,
      284,
      5412,
      1900,
      4049,
      2663,
      517,
      6840,
      13
    ],
    "label": "best_practice",
    "reason": "Catch specific exceptions instead of a general Exception to handle known error cases more effectively."
  },
  {
    "line": 260,
    "text": "            res = html.xpath(\"//table[@id=\\\"dataTable\\\"]/tr\")",
    "annotation": "\u2705 Best Practice: Docstring provides a clear description of the function's purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      581,
      796,
      27711,
      13,
      87,
      6978,
      7203,
      1003,
      11487,
      58,
      31,
      312,
      17553,
      7890,
      10962,
      7879,
      60,
      14,
      2213,
      4943
    ],
    "start_token": 1285,
    "end_token": 1316,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      3769,
      257,
      1598,
      6764,
      286,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Docstring provides a clear description of the function's purpose and parameters"
  },
  {
    "line": 278,
    "text": "            print(e)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes ct._write_head() is safe and does not handle exceptions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      68,
      8
    ],
    "start_token": 1316,
    "end_token": 1331,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      269,
      83,
      13557,
      13564,
      62,
      2256,
      3419,
      318,
      3338,
      290,
      857,
      407,
      5412,
      13269
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes ct._write_head() is safe and does not handle exceptions"
  },
  {
    "line": 280,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Usage of retry_count and pause parameters for network requests",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1331,
    "end_token": 1331,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1005,
      563,
      62,
      9127,
      290,
      14985,
      10007,
      329,
      3127,
      7007
    ],
    "label": "ml_signal",
    "reason": "Usage of retry_count and pause parameters for network requests"
  },
  {
    "line": 284,
    "text": "    Parameters",
    "annotation": "\u2705 Best Practice: Using map with lambda for consistent string formatting",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      40117
    ],
    "start_token": 1331,
    "end_token": 1335,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      3975,
      351,
      37456,
      329,
      6414,
      4731,
      33313
    ],
    "label": "best_practice",
    "reason": "Using map with lambda for consistent string formatting"
  },
  {
    "line": 284,
    "text": "    Parameters",
    "annotation": "\u2705 Best Practice: Consider using a logger instead of writing directly to the console for better control over logging levels and outputs.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      40117
    ],
    "start_token": 1335,
    "end_token": 1339,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      49706,
      2427,
      286,
      3597,
      3264,
      284,
      262,
      8624,
      329,
      1365,
      1630,
      625,
      18931,
      2974,
      290,
      23862,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a logger instead of writing directly to the console for better control over logging levels and outputs."
  },
  {
    "line": 287,
    "text": "                 \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570 ",
    "annotation": "\ud83e\udde0 ML Signal: Usage of time.sleep indicates a retry mechanism or rate limiting.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10263,
      99,
      224,
      34402,
      229,
      163,
      121,
      239,
      163,
      119,
      250,
      163,
      255,
      231,
      29785,
      106,
      165,
      95,
      246,
      34932,
      235,
      13783,
      235,
      33699,
      100,
      26193,
      234,
      21410,
      162,
      105,
      94,
      46763,
      108,
      220
    ],
    "start_token": 1339,
    "end_token": 1389,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      640,
      13,
      42832,
      9217,
      257,
      1005,
      563,
      9030,
      393,
      2494,
      15637,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of time.sleep indicates a retry mechanism or rate limiting."
  },
  {
    "line": 290,
    "text": "                ",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): URL construction using string formatting can lead to injection vulnerabilities if inputs are not properly sanitized.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 1389,
    "end_token": 1405,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      10289,
      5103,
      1262,
      4731,
      33313,
      460,
      1085,
      284,
      16954,
      23805,
      611,
      17311,
      389,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "URL construction using string formatting can lead to injection vulnerabilities if inputs are not properly sanitized."
  },
  {
    "line": 293,
    "text": "    code:\u80a1\u7968\u4ee3\u7801",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Network operations can fail or hang; consider adding more robust error handling or timeouts.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2438,
      25,
      164,
      224,
      94,
      163,
      98,
      101,
      47987,
      163,
      254,
      223
    ],
    "start_token": 1405,
    "end_token": 1420,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7311,
      4560,
      460,
      2038,
      393,
      8181,
      26,
      2074,
      4375,
      517,
      12373,
      4049,
      9041,
      393,
      640,
      5269,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Network operations can fail or hang; consider adding more robust error handling or timeouts."
  },
  {
    "line": 295,
    "text": "    date:\u4ea4\u6613\u65e5\u671f     ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Decoding with a specific encoding can lead to issues if the encoding is incorrect or changes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3128,
      25,
      12859,
      97,
      23626,
      241,
      33768,
      98,
      17312,
      253,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 1420,
    "end_token": 1438,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4280,
      7656,
      351,
      257,
      2176,
      21004,
      460,
      1085,
      284,
      2428,
      611,
      262,
      21004,
      318,
      11491,
      393,
      2458,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Decoding with a specific encoding can lead to issues if the encoding is incorrect or changes."
  },
  {
    "line": 297,
    "text": "    samount:\u673a\u6784\u5e2d\u4f4d\u5356\u51fa\u989d(\u4e07)     ",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Parsing HTML without sanitization can lead to security vulnerabilities like XSS.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      6072,
      608,
      25,
      17312,
      118,
      162,
      252,
      226,
      30585,
      255,
      19526,
      235,
      39355,
      244,
      49035,
      118,
      165,
      95,
      251,
      7,
      10310,
      229,
      8,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 1438,
    "end_token": 1469,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      23042,
      278,
      11532,
      1231,
      5336,
      270,
      1634,
      460,
      1085,
      284,
      2324,
      23805,
      588,
      1395,
      5432,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Parsing HTML without sanitization can lead to security vulnerabilities like XSS."
  },
  {
    "line": 301,
    "text": "    df =  _inst_detail(pageNo=1, retry_count=retry_count,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on Python version indicates compatibility handling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      220,
      4808,
      8625,
      62,
      49170,
      7,
      7700,
      2949,
      28,
      16,
      11,
      1005,
      563,
      62,
      9127,
      28,
      1186,
      563,
      62,
      9127,
      11
    ],
    "start_token": 1469,
    "end_token": 1495,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      11361,
      2196,
      9217,
      17764,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on Python version indicates compatibility handling."
  },
  {
    "line": 306,
    "text": " ",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using read_html can be risky if the HTML content is not trusted or sanitized.",
    "confidence": 0.5,
    "tokens": [
      220
    ],
    "start_token": 1495,
    "end_token": 1496,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      1100,
      62,
      6494,
      460,
      307,
      17564,
      611,
      262,
      11532,
      2695,
      318,
      407,
      13467,
      393,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using read_html can be risky if the HTML content is not trusted or sanitized."
  },
  {
    "line": 310,
    "text": "    for _ in range(retry_count):",
    "annotation": "\u2705 Best Practice: Consider using pd.concat instead of append for better performance with large DataFrames.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      4808,
      287,
      2837,
      7,
      1186,
      563,
      62,
      9127,
      2599
    ],
    "start_token": 1496,
    "end_token": 1509,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      279,
      67,
      13,
      1102,
      9246,
      2427,
      286,
      24443,
      329,
      1365,
      2854,
      351,
      1588,
      6060,
      35439,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using pd.concat instead of append for better performance with large DataFrames."
  },
  {
    "line": 314,
    "text": "                                               ct.PAGES['fd'], '', pageNo))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using regex to extract numbers can be error-prone if the format changes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      4537,
      48075,
      17816,
      16344,
      6,
      4357,
      705,
      3256,
      2443,
      2949,
      4008
    ],
    "start_token": 1509,
    "end_token": 1569,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      40364,
      284,
      7925,
      3146,
      460,
      307,
      4049,
      12,
      46330,
      611,
      262,
      5794,
      2458,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using regex to extract numbers can be error-prone if the format changes."
  },
  {
    "line": 318,
    "text": "            res = html.xpath(\"//table[@id=\\\"dataTable\\\"]/tr\")",
    "annotation": "\u2705 Best Practice: Consider logging exceptions instead of printing them for better error tracking and analysis.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      581,
      796,
      27711,
      13,
      87,
      6978,
      7203,
      1003,
      11487,
      58,
      31,
      312,
      17553,
      7890,
      10962,
      7879,
      60,
      14,
      2213,
      4943
    ],
    "start_token": 1569,
    "end_token": 1600,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      18931,
      13269,
      2427,
      286,
      13570,
      606,
      329,
      1365,
      4049,
      9646,
      290,
      3781,
      13
    ],
    "label": "best_practice",
    "reason": "Consider logging exceptions instead of printing them for better error tracking and analysis."
  },
  {
    "line": 311,
    "text": "        time.sleep(pause)",
    "annotation": "\ud83e\udde0 ML Signal: Function with specific pattern of data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      32125,
      8
    ],
    "start_token": 1600,
    "end_token": 1613,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      2176,
      3912,
      286,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Function with specific pattern of data manipulation"
  },
  {
    "line": 313,
    "text": "            request = Request(rv.LHB_SINA_URL%(ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[3],",
    "annotation": "\ud83e\udde0 ML Signal: Conditional check for specific character in a list element",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      796,
      19390,
      7,
      81,
      85,
      13,
      43,
      32886,
      62,
      50,
      28893,
      62,
      21886,
      4,
      7,
      310,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357,
      269,
      83,
      13,
      39170,
      32,
      20913,
      17816,
      14259,
      69,
      6,
      4357,
      374,
      85,
      13,
      43,
      32886,
      62,
      42,
      1268,
      5258,
      58,
      18,
      4357
    ],
    "start_token": 1613,
    "end_token": 1672,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      2198,
      329,
      2176,
      2095,
      287,
      257,
      1351,
      5002
    ],
    "label": "ml_signal",
    "reason": "Conditional check for specific character in a list element"
  },
  {
    "line": 315,
    "text": "            text = urlopen(request, timeout=10).read()",
    "annotation": "\ud83e\udde0 ML Signal: Assigning value from one index to another in a list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2420,
      796,
      19016,
      9654,
      7,
      25927,
      11,
      26827,
      28,
      940,
      737,
      961,
      3419
    ],
    "start_token": 1672,
    "end_token": 1696,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      1988,
      422,
      530,
      6376,
      284,
      1194,
      287,
      257,
      1351
    ],
    "label": "ml_signal",
    "reason": "Assigning value from one index to another in a list"
  },
  {
    "line": 317,
    "text": "            html = lxml.html.parse(StringIO(text))",
    "annotation": "\ud83e\udde0 ML Signal: Loop with specific range and index manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      27711,
      796,
      300,
      19875,
      13,
      6494,
      13,
      29572,
      7,
      10100,
      9399,
      7,
      5239,
      4008
    ],
    "start_token": 1696,
    "end_token": 1721,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26304,
      351,
      2176,
      2837,
      290,
      6376,
      17512
    ],
    "label": "ml_signal",
    "reason": "Loop with specific range and index manipulation"
  },
  {
    "line": 318,
    "text": "            res = html.xpath(\"//table[@id=\\\"dataTable\\\"]/tr\")",
    "annotation": "\ud83e\udde0 ML Signal: Reassigning list elements based on calculated index",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      581,
      796,
      27711,
      13,
      87,
      6978,
      7203,
      1003,
      11487,
      58,
      31,
      312,
      17553,
      7890,
      10962,
      7879,
      60,
      14,
      2213,
      4943
    ],
    "start_token": 1721,
    "end_token": 1752,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      797,
      562,
      38944,
      1351,
      4847,
      1912,
      319,
      10488,
      6376
    ],
    "label": "ml_signal",
    "reason": "Reassigning list elements based on calculated index"
  },
  {
    "line": 318,
    "text": "            res = html.xpath(\"//table[@id=\\\"dataTable\\\"]/tr\")",
    "annotation": "\ud83e\udde0 ML Signal: Loop with specific range and index manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      581,
      796,
      27711,
      13,
      87,
      6978,
      7203,
      1003,
      11487,
      58,
      31,
      312,
      17553,
      7890,
      10962,
      7879,
      60,
      14,
      2213,
      4943
    ],
    "start_token": 1752,
    "end_token": 1783,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26304,
      351,
      2176,
      2837,
      290,
      6376,
      17512
    ],
    "label": "ml_signal",
    "reason": "Loop with specific range and index manipulation"
  },
  {
    "line": 318,
    "text": "            res = html.xpath(\"//table[@id=\\\"dataTable\\\"]/tr\")",
    "annotation": "\ud83e\udde0 ML Signal: Assigning NaN to list elements",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      581,
      796,
      27711,
      13,
      87,
      6978,
      7203,
      1003,
      11487,
      58,
      31,
      312,
      17553,
      7890,
      10962,
      7879,
      60,
      14,
      2213,
      4943
    ],
    "start_token": 1783,
    "end_token": 1814,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2195,
      38944,
      11013,
      45,
      284,
      1351,
      4847
    ],
    "label": "ml_signal",
    "reason": "Assigning NaN to list elements"
  }
]
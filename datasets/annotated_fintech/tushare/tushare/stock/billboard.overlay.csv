annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Importing specific modules or functions can improve code readability and reduce memory usage.,"[26486, 227, 6705, 19939, 25, 17267, 278, 2176, 13103, 393, 5499, 460, 2987, 2438, 1100, 1799, 290, 4646, 4088, 8748, 13]",1.0,1,best_practice,9,Importing specific modules or functions can improve code readability and reduce memory usage.,,0,"""""""",[37811]
‚úÖ Best Practice: Handling ImportError ensures compatibility with different Python versions.,"[26486, 227, 6705, 19939, 25, 49500, 17267, 12331, 19047, 17764, 351, 1180, 11361, 6300, 13]",1.0,12,best_practice,20,Handling ImportError ensures compatibility with different Python versions.,,1,from tushare.util import dateu as du,"[6738, 256, 1530, 533, 13, 22602, 1330, 3128, 84, 355, 7043]"
‚ö†Ô∏è SAST Risk (Medium): Using urlopen without proper validation or sanitization of the URL can lead to security risks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 19016, 9654, 1231, 1774, 21201, 393, 5336, 270, 1634, 286, 262, 10289, 460, 1085, 284, 2324, 7476, 13]",1.0,30,sast_risk,60,Using urlopen without proper validation or sanitization of the URL can lead to security risks.,Medium,12,        if(du.is_holiday(date)):,"[220, 220, 220, 220, 220, 220, 220, 611, 7, 646, 13, 271, 62, 37689, 7, 4475, 8, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Decoding and evaluating external data can lead to code injection vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4280, 7656, 290, 22232, 7097, 1366, 460, 1085, 284, 2438, 16954, 23805, 13]",1.0,43,sast_risk,62,Decoding and evaluating external data can lead to code injection vulnerabilities.,Medium,30,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
‚ö†Ô∏è SAST Risk (High): Using eval on external data can lead to code execution vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 8554, 5418, 319, 7097, 1366, 460, 1085, 284, 2438, 9706, 23805, 13]",1.0,90,sast_risk,65,Using eval on external data can lead to code execution vulnerabilities.,High,43,"            request = Request(rv.LHB_URL%(ct.P_TYPE['http'], ct.DOMAINS['em'], date, date))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 81, 85, 13, 43, 32886, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 368, 6, 4357, 3128, 11, 3128, 4008]"
‚úÖ Best Practice: Logging exceptions instead of printing them can provide better insights and traceability.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 13269, 2427, 286, 13570, 606, 460, 2148, 1365, 17218, 290, 12854, 1799, 13]",1.0,121,best_practice,89,Logging exceptions instead of printing them can provide better insights and traceability.,,90,                df[col] = df[col].map(ct.FORMAT),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 58, 4033, 60, 796, 47764, 58, 4033, 4083, 8899, 7, 310, 13, 21389, 1404, 8]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic IOError without specific context can make debugging difficult.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 24418, 12331, 1231, 2176, 4732, 460, 787, 28769, 2408, 13]",1.0,133,sast_risk,91,Raising a generic IOError without specific context can make debugging difficult.,Low,121,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
"‚úÖ Best Practice: Provide a clear and concise docstring for the function, explaining parameters and return values","[26486, 227, 6705, 19939, 25, 44290, 257, 1598, 290, 35327, 2205, 8841, 329, 262, 2163, 11, 11170, 10007, 290, 1441, 3815]",0.5,145,best_practice,91,"Provide a clear and concise docstring for the function, explaining parameters and return values",,133,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚úÖ Best Practice: Check input validity before proceeding with the main logic,"[26486, 227, 6705, 19939, 25, 6822, 5128, 19648, 878, 18788, 351, 262, 1388, 9156]",1.0,165,best_practice,114,Check input validity before proceeding with the main logic,,145,        countÔºö‰∏äÊ¶úÊ¨°Êï∞,"[220, 220, 220, 220, 220, 220, 220, 954, 171, 120, 248, 41468, 162, 99, 250, 162, 105, 94, 46763, 108]"
üß† ML Signal: Writing headers or logs can be a signal for tracking or auditing,"[8582, 100, 254, 10373, 26484, 25, 22183, 24697, 393, 17259, 460, 307, 257, 6737, 329, 9646, 393, 2709, 1780]",0.5,200,ml_signal,115,Writing headers or logs can be a signal for tracking or auditing,,165,        bamountÔºöÁ¥ØÁßØË¥≠‰π∞È¢ù(‰∏á)     ,"[220, 220, 220, 220, 220, 220, 220, 275, 17287, 171, 120, 248, 163, 112, 107, 163, 100, 107, 164, 112, 255, 20046, 108, 165, 95, 251, 7, 10310, 229, 8, 220, 220, 220, 220, 220]"
‚úÖ Best Practice: Use map with lambda for concise and readable transformations,"[26486, 227, 6705, 19939, 25, 5765, 3975, 351, 37456, 329, 35327, 290, 31744, 38226]",0.5,204,best_practice,121,Use map with lambda for concise and readable transformations,,200,    ,"[220, 220, 220, 220]"
‚úÖ Best Practice: Remove duplicates to ensure data integrity,"[26486, 227, 6705, 19939, 25, 17220, 14184, 16856, 284, 4155, 1366, 11540]",1.0,218,best_practice,123,Remove duplicates to ensure data integrity,,204,        ct._write_head(),"[220, 220, 220, 220, 220, 220, 220, 269, 83, 13557, 13564, 62, 2256, 3419]"
‚úÖ Best Practice: Consider using a logger instead of direct console writing for better control over logging levels and outputs.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 49706, 2427, 286, 1277, 8624, 3597, 329, 1365, 1630, 625, 18931, 2974, 290, 23862, 13]",1.0,238,best_practice,122,Consider using a logger instead of direct console writing for better control over logging levels and outputs.,,218,    if ct._check_lhb_input(days) is True:,"[220, 220, 220, 611, 269, 83, 13557, 9122, 62, 75, 71, 65, 62, 15414, 7, 12545, 8, 318, 6407, 25]"
üß† ML Signal: Usage of time.sleep indicates a retry mechanism or rate limiting.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 640, 13, 42832, 9217, 257, 1005, 563, 9030, 393, 2494, 15637, 13]",1.0,265,ml_signal,125,Usage of time.sleep indicates a retry mechanism or rate limiting.,,238,                        pause=pause),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14985, 28, 32125, 8]"
‚ö†Ô∏è SAST Risk (Medium): URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 1262, 4731, 33313, 460, 1085, 284, 16954, 23805, 611, 17311, 389, 407, 5336, 36951, 13]",1.0,288,sast_risk,128,URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized.,Medium,265,            df = df.drop_duplicates('code'),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 14781, 62, 646, 489, 16856, 10786, 8189, 11537]"
‚ö†Ô∏è SAST Risk (Medium): Network operations can fail or hang; consider adding more robust error handling or timeouts.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4560, 460, 2038, 393, 8181, 26, 2074, 4375, 517, 12373, 4049, 9041, 393, 640, 5269, 13]",1.0,292,sast_risk,131,Network operations can fail or hang; consider adding more robust error handling or timeouts.,Medium,288,    ,"[220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Low): Ensure the encoding used is correct and consistent with the data source.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 262, 21004, 973, 318, 3376, 290, 6414, 351, 262, 1366, 2723, 13]",0.5,302,sast_risk,133,Ensure the encoding used is correct and consistent with the data source.,Low,292,    ct._write_console(),"[220, 220, 220, 269, 83, 13557, 13564, 62, 41947, 3419]"
‚ö†Ô∏è SAST Risk (Medium): Parsing HTML from untrusted sources can lead to security vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 23042, 278, 11532, 422, 1418, 81, 8459, 4237, 460, 1085, 284, 2324, 23805, 13]",0.5,315,sast_risk,135,Parsing HTML from untrusted sources can lead to security vulnerabilities.,Medium,302,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
üß† ML Signal: Conditional logic based on Python version indicates compatibility handling.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11361, 2196, 9217, 17764, 9041, 13]",1.0,339,ml_signal,139,Conditional logic based on Python version indicates compatibility handling.,,315,"            text = urlopen(request, timeout=10).read()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2420, 796, 19016, 9654, 7, 25927, 11, 26827, 28, 940, 737, 961, 3419]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the HTML content is sanitized before processing to prevent XSS or other injection attacks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 11532, 2695, 318, 5336, 36951, 878, 7587, 284, 2948, 1395, 5432, 393, 584, 16954, 3434, 13]",0.5,379,sast_risk,144,Ensure that the HTML content is sanitized before processing to prevent XSS or other injection attacks.,Low,339,                sarr = [etree.tostring(node).decode('utf-8') for node in res],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 685, 316, 631, 13, 83, 455, 1806, 7, 17440, 737, 12501, 1098, 10786, 40477, 12, 23, 11537, 329, 10139, 287, 581, 60]"
‚úÖ Best Practice: Ensure that the column names in df.columns match the expected schema to prevent runtime errors.,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 5721, 3891, 287, 47764, 13, 28665, 82, 2872, 262, 2938, 32815, 284, 2948, 19124, 8563, 13]",0.5,412,best_practice,146,Ensure that the column names in df.columns match the expected schema to prevent runtime errors.,,379,                sarr = [etree.tostring(node) for node in res],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 685, 316, 631, 13, 83, 455, 1806, 7, 17440, 8, 329, 10139, 287, 581, 60]"
‚úÖ Best Practice: Consider using pd.concat instead of DataFrame.append for better performance.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 279, 67, 13, 1102, 9246, 2427, 286, 6060, 19778, 13, 33295, 329, 1365, 2854, 13]",1.0,437,best_practice,149,Consider using pd.concat instead of DataFrame.append for better performance.,,412,            df = pd.read_html(sarr)[0],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 6494, 7, 82, 3258, 38381, 15, 60]"
‚ö†Ô∏è SAST Risk (Low): Regular expressions can be computationally expensive; ensure they are necessary and optimized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 23603, 14700, 460, 307, 2653, 15208, 5789, 26, 4155, 484, 389, 3306, 290, 23392, 13]",0.5,465,sast_risk,150,Regular expressions can be computationally expensive; ensure they are necessary and optimized.,Low,437,            df.columns = rv.LHB_GGTJ_COLS,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 374, 85, 13, 43, 32886, 62, 11190, 51, 41, 62, 25154, 50]"
‚úÖ Best Practice: Catch specific exceptions instead of a general Exception to handle known error cases more effectively.,"[26486, 227, 6705, 19939, 25, 25750, 2176, 13269, 2427, 286, 257, 2276, 35528, 284, 5412, 1900, 4049, 2663, 517, 6840, 13]",0.5,493,best_practice,150,Catch specific exceptions instead of a general Exception to handle known error cases more effectively.,,465,            df.columns = rv.LHB_GGTJ_COLS,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 374, 85, 13, 43, 32886, 62, 11190, 51, 41, 62, 25154, 50]"
‚úÖ Best Practice: Provide a clear and concise docstring for the function.,"[26486, 227, 6705, 19939, 25, 44290, 257, 1598, 290, 35327, 2205, 8841, 329, 262, 2163, 13]",1.0,521,best_practice,150,Provide a clear and concise docstring for the function.,,493,            df.columns = rv.LHB_GGTJ_COLS,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 374, 85, 13, 43, 32886, 62, 11190, 51, 41, 62, 25154, 50]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if ct._check_lhb_input is not properly validated.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 269, 83, 13557, 9122, 62, 75, 71, 65, 62, 15414, 318, 407, 6105, 31031, 13]",1.0,535,sast_risk,171,Potential risk if ct._check_lhb_input is not properly validated.,Low,521,"    pause : int, ÈªòËÆ§ 0","[220, 220, 220, 14985, 1058, 493, 11, 16268, 119, 246, 164, 106, 97, 657]"
üß† ML Signal: Usage of a custom function to write headers.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 2163, 284, 3551, 24697, 13]",1.0,620,ml_signal,172,Usage of a custom function to write headers.,,535,                ÈáçÂ§çËØ∑Ê±ÇÊï∞ÊçÆËøáÁ®ã‰∏≠ÊöÇÂÅúÁöÑÁßíÊï∞ÔºåÈò≤Ê≠¢ËØ∑Ê±ÇÈó¥ÈöîÊó∂Èó¥Â§™Áü≠Âá∫Áé∞ÁöÑÈóÆÈ¢ò,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16268, 229, 235, 13783, 235, 46237, 115, 162, 109, 224, 46763, 108, 162, 235, 106, 32573, 229, 163, 101, 233, 40792, 162, 248, 224, 161, 223, 250, 21410, 163, 100, 240, 46763, 108, 171, 120, 234, 165, 246, 110, 29826, 95, 46237, 115, 162, 109, 224, 29785, 112, 49694, 242, 33768, 114, 29785, 112, 13783, 103, 163, 253, 255, 49035, 118, 163, 236, 108, 21410, 29785, 106, 165, 95, 246]"
üß† ML Signal: Pattern of calling a function with retry and pause parameters.,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4585, 257, 2163, 351, 1005, 563, 290, 14985, 10007, 13]",0.5,639,ml_signal,175,Pattern of calling a function with retry and pause parameters.,,620,    brokerÔºöËê•‰∏öÈÉ®ÂêçÁß∞,"[220, 220, 220, 20426, 171, 120, 248, 164, 238, 98, 10310, 21253, 225, 101, 28938, 235, 163, 100, 108]"
üß† ML Signal: Returning a DataFrame object.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 2134, 13]",1.0,657,ml_signal,178,Returning a DataFrame object.,,639,    bcountÔºö‰π∞ÂÖ•Â∏≠‰ΩçÊï∞,"[220, 220, 220, 275, 9127, 171, 120, 248, 20046, 108, 17739, 98, 30585, 255, 19526, 235, 46763, 108]"
‚úÖ Best Practice: Consider using a logger instead of direct console output for better control over logging levels and outputs.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 49706, 2427, 286, 1277, 8624, 5072, 329, 1365, 1630, 625, 18931, 2974, 290, 23862, 13]",0.5,673,best_practice,176,Consider using a logger instead of direct console output for better control over logging levels and outputs.,,657,    countÔºö‰∏äÊ¶úÊ¨°Êï∞,"[220, 220, 220, 954, 171, 120, 248, 41468, 162, 99, 250, 162, 105, 94, 46763, 108]"
üß† ML Signal: Usage of time.sleep to handle rate limiting or retry logic.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 640, 13, 42832, 284, 5412, 2494, 15637, 393, 1005, 563, 9156, 13]",0.5,698,ml_signal,179,Usage of time.sleep to handle rate limiting or retry logic.,,673,    samountÔºöÁ¥ØÁßØÂçñÂá∫È¢ù(‰∏á),"[220, 220, 220, 6072, 608, 171, 120, 248, 163, 112, 107, 163, 100, 107, 39355, 244, 49035, 118, 165, 95, 251, 7, 10310, 229, 8]"
‚ö†Ô∏è SAST Risk (Medium): URL construction using string formatting can lead to injection vulnerabilities if inputs are not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 1262, 4731, 33313, 460, 1085, 284, 16954, 23805, 611, 17311, 389, 407, 6105, 5336, 36951, 13]",0.5,702,sast_risk,182,URL construction using string formatting can lead to injection vulnerabilities if inputs are not properly sanitized.,Medium,698,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Medium): Network operations can be risky; consider handling potential exceptions or errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4560, 460, 307, 17564, 26, 2074, 9041, 2785, 13269, 393, 8563, 13]",0.5,735,sast_risk,185,Network operations can be risky; consider handling potential exceptions or errors.,Medium,702,"        df =  _broker_tops(days, pageNo=1, retry_count=retry_count,","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 220, 4808, 7957, 6122, 62, 35011, 7, 12545, 11, 2443, 2949, 28, 16, 11, 1005, 563, 62, 9127, 28, 1186, 563, 62, 9127, 11]"
‚ö†Ô∏è SAST Risk (Low): Decoding with a specific encoding can lead to issues if the encoding is incorrect or changes.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4280, 7656, 351, 257, 2176, 21004, 460, 1085, 284, 2428, 611, 262, 21004, 318, 11491, 393, 2458, 13]",0.5,744,sast_risk,187,Decoding with a specific encoding can lead to issues if the encoding is incorrect or changes.,Low,735,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
‚ö†Ô∏è SAST Risk (Medium): Parsing HTML from untrusted sources can lead to security vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 23042, 278, 11532, 422, 1418, 81, 8459, 4237, 460, 1085, 284, 2324, 23805, 13]",0.5,744,sast_risk,189,Parsing HTML from untrusted sources can lead to security vulnerabilities.,Medium,744,,[]
üß† ML Signal: Conditional logic based on Python version indicates compatibility handling.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11361, 2196, 9217, 17764, 9041, 13]",0.5,757,ml_signal,193,Conditional logic based on Python version indicates compatibility handling.,,744,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
‚ö†Ô∏è SAST Risk (Low): Using read_html can be resource-intensive; ensure the input is sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1100, 62, 6494, 460, 307, 8271, 12, 38096, 26, 4155, 262, 5128, 318, 5336, 36951, 13]",0.5,778,sast_risk,198,Using read_html can be resource-intensive; ensure the input is sanitized.,Low,757,            text = text.decode('GBK'),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2420, 796, 2420, 13, 12501, 1098, 10786, 4579, 42, 11537]"
‚úÖ Best Practice: Consider using pd.concat instead of DataFrame.append for better performance.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 279, 67, 13, 1102, 9246, 2427, 286, 6060, 19778, 13, 33295, 329, 1365, 2854, 13]",0.5,818,best_practice,202,Consider using pd.concat instead of DataFrame.append for better performance.,,778,                sarr = [etree.tostring(node).decode('utf-8') for node in res],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 685, 316, 631, 13, 83, 455, 1806, 7, 17440, 737, 12501, 1098, 10786, 40477, 12, 23, 11537, 329, 10139, 287, 581, 60]"
‚ö†Ô∏è SAST Risk (Low): Regular expressions can be inefficient; ensure patterns are optimized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 23603, 14700, 460, 307, 30904, 26, 4155, 7572, 389, 23392, 13]",0.5,851,sast_risk,204,Regular expressions can be inefficient; ensure patterns are optimized.,Low,818,                sarr = [etree.tostring(node) for node in res],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 685, 316, 631, 13, 83, 455, 1806, 7, 17440, 8, 329, 10139, 287, 581, 60]"
üß† ML Signal: Recursive function calls can indicate complex data processing or pagination handling.,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 3848, 460, 7603, 3716, 1366, 7587, 393, 42208, 1883, 9041, 13]",1.0,884,ml_signal,204,Recursive function calls can indicate complex data processing or pagination handling.,,851,                sarr = [etree.tostring(node) for node in res],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 685, 316, 631, 13, 83, 455, 1806, 7, 17440, 8, 329, 10139, 287, 581, 60]"
‚úÖ Best Practice: Consider logging exceptions instead of printing for better error tracking and analysis.,"[26486, 227, 6705, 19939, 25, 12642, 18931, 13269, 2427, 286, 13570, 329, 1365, 4049, 9646, 290, 3781, 13]",1.0,917,best_practice,204,Consider logging exceptions instead of printing for better error tracking and analysis.,,884,                sarr = [etree.tostring(node) for node in res],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 685, 316, 631, 13, 83, 455, 1806, 7, 17440, 8, 329, 10139, 287, 581, 60]"
‚úÖ Best Practice: Docstring provides a clear description of the function and its parameters.,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2163, 290, 663, 10007, 13]",0.5,950,best_practice,204,Docstring provides a clear description of the function and its parameters.,,917,                sarr = [etree.tostring(node) for node in res],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 685, 316, 631, 13, 83, 455, 1806, 7, 17440, 8, 329, 10139, 287, 581, 60]"
‚úÖ Best Practice: Checking input validity before proceeding with the function logic.,"[26486, 227, 6705, 19939, 25, 39432, 5128, 19648, 878, 18788, 351, 262, 2163, 9156, 13]",0.5,956,best_practice,225,Checking input validity before proceeding with the function logic.,,950,    days:int,"[220, 220, 220, 1528, 25, 600]"
üß† ML Signal: Writing headers might indicate logging or data collection behavior.,"[8582, 100, 254, 10373, 26484, 25, 22183, 24697, 1244, 7603, 18931, 393, 1366, 4947, 4069, 13]",0.5,1023,ml_signal,226,Writing headers might indicate logging or data collection behavior.,,956,              Â§©Êï∞ÔºåÁªüËÆ°nÂ§©‰ª•Êù•‰∏äÊ¶úÊ¨°Êï∞ÔºåÈªòËÆ§‰∏∫5Â§©ÔºåÂÖ∂‰ΩôÊòØ10„ÄÅ30„ÄÅ60,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 36469, 102, 46763, 108, 171, 120, 234, 163, 119, 253, 164, 106, 94, 77, 25465, 20015, 98, 30266, 98, 41468, 162, 99, 250, 162, 105, 94, 46763, 108, 171, 120, 234, 165, 119, 246, 164, 106, 97, 10310, 118, 20, 25465, 171, 120, 234, 17739, 114, 19526, 247, 42468, 940, 23513, 1270, 23513, 1899]"
üß† ML Signal: Usage of retry_count and pause suggests handling of network requests.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1005, 563, 62, 9127, 290, 14985, 5644, 9041, 286, 3127, 7007, 13]",0.5,1037,ml_signal,229,Usage of retry_count and pause suggests handling of network requests.,,1023,"    pause : int, ÈªòËÆ§ 0","[220, 220, 220, 14985, 1058, 493, 11, 16268, 119, 246, 164, 106, 97, 657]"
üß† ML Signal: Mapping and formatting data indicates data preprocessing behavior.,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 290, 33313, 1366, 9217, 1366, 662, 36948, 4069, 13]",0.5,1041,ml_signal,232,Mapping and formatting data indicates data preprocessing behavior.,,1037,    Return,"[220, 220, 220, 8229]"
‚úÖ Best Practice: Consider using a logger instead of writing directly to the console for better control over logging levels and outputs.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 49706, 2427, 286, 3597, 3264, 284, 262, 8624, 329, 1365, 1630, 625, 18931, 2974, 290, 23862, 13]",1.0,1057,best_practice,231,Consider using a logger instead of writing directly to the console for better control over logging levels and outputs.,,1041,                ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220]"
üß† ML Signal: Usage of time.sleep indicates a retry mechanism or rate limiting.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 640, 13, 42832, 9217, 257, 1005, 563, 9030, 393, 2494, 15637, 13]",1.0,1066,ml_signal,234,Usage of time.sleep indicates a retry mechanism or rate limiting.,,1057,    code:‰ª£Á†Å,"[220, 220, 220, 2438, 25, 47987, 163, 254, 223]"
‚ö†Ô∏è SAST Risk (Medium): URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 1262, 4731, 33313, 460, 1085, 284, 16954, 23805, 611, 17311, 389, 407, 5336, 36951, 13]",1.0,1081,sast_risk,237,URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized.,Medium,1066,    bcount:‰π∞ÂÖ•Ê¨°Êï∞,"[220, 220, 220, 275, 9127, 25, 20046, 108, 17739, 98, 162, 105, 94, 46763, 108]"
‚ö†Ô∏è SAST Risk (Medium): Network operations can fail or hang; consider adding more robust error handling or timeouts.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4560, 460, 2038, 393, 8181, 26, 2074, 4375, 517, 12373, 4049, 9041, 393, 640, 5269, 13]",1.0,1095,sast_risk,240,Network operations can fail or hang; consider adding more robust error handling or timeouts.,Medium,1081,    net:ÂáÄÈ¢ù(‰∏á),"[220, 220, 220, 2010, 25, 49035, 222, 165, 95, 251, 7, 10310, 229, 8]"
‚ö†Ô∏è SAST Risk (Low): Ensure the encoding used is correct and consistent with the server's response.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 262, 21004, 973, 318, 3376, 290, 6414, 351, 262, 4382, 338, 2882, 13]",0.5,1115,sast_risk,242,Ensure the encoding used is correct and consistent with the server's response.,Low,1095,    if ct._check_lhb_input(days) is True:,"[220, 220, 220, 611, 269, 83, 13557, 9122, 62, 75, 71, 65, 62, 15414, 7, 12545, 8, 318, 6407, 25]"
‚ö†Ô∏è SAST Risk (Medium): Parsing HTML from untrusted sources can lead to security vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 23042, 278, 11532, 422, 1418, 81, 8459, 4237, 460, 1085, 284, 2324, 23805, 13]",1.0,1147,sast_risk,244,Parsing HTML from untrusted sources can lead to security vulnerabilities.,Medium,1115,"        df =  _inst_tops(days, pageNo=1, retry_count=retry_count,","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 220, 4808, 8625, 62, 35011, 7, 12545, 11, 2443, 2949, 28, 16, 11, 1005, 563, 62, 9127, 28, 1186, 563, 62, 9127, 11]"
‚úÖ Best Practice: Use list comprehensions for more concise and readable code.,"[26486, 227, 6705, 19939, 25, 5765, 1351, 8569, 507, 329, 517, 35327, 290, 31744, 2438, 13]",0.5,1148,best_practice,248,Use list comprehensions for more concise and readable code.,,1147, ,[220]
‚ö†Ô∏è SAST Risk (Low): Ensure the HTML content is sanitized before processing to prevent XSS or other injection attacks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 262, 11532, 2695, 318, 5336, 36951, 878, 7587, 284, 2948, 1395, 5432, 393, 584, 16954, 3434, 13]",0.5,1157,sast_risk,254,Ensure the HTML content is sanitized before processing to prevent XSS or other injection attacks.,Low,1148,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚úÖ Best Practice: Consider using more descriptive variable names for better readability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 517, 35644, 7885, 3891, 329, 1365, 1100, 1799, 13]",1.0,1217,best_practice,256,Consider using more descriptive variable names for better readability.,,1157,"                                               ct.PAGES['fd'], last, pageNo))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4537, 48075, 17816, 16344, 6, 4357, 938, 11, 2443, 2949, 4008]"
‚úÖ Best Practice: Using append in a loop can be inefficient; consider collecting data in a list and concatenating once.,"[26486, 227, 6705, 19939, 25, 8554, 24443, 287, 257, 9052, 460, 307, 30904, 26, 2074, 13157, 1366, 287, 257, 1351, 290, 1673, 36686, 803, 1752, 13]",1.0,1242,best_practice,259,Using append in a loop can be inefficient; consider collecting data in a list and concatenating once.,,1217,            html = lxml.html.parse(StringIO(text)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27711, 796, 300, 19875, 13, 6494, 13, 29572, 7, 10100, 9399, 7, 5239, 4008]"
‚ö†Ô∏è SAST Risk (Low): Regular expressions can be error-prone; ensure patterns are well-defined and tested.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 23603, 14700, 460, 307, 4049, 12, 46330, 26, 4155, 7572, 389, 880, 12, 23211, 290, 6789, 13]",1.0,1273,sast_risk,260,Regular expressions can be error-prone; ensure patterns are well-defined and tested.,Low,1242,"            res = html.xpath(""//table[@id=\""dataTable\""]/tr"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 796, 27711, 13, 87, 6978, 7203, 1003, 11487, 58, 31, 312, 17553, 7890, 10962, 7879, 60, 14, 2213, 4943]"
‚úÖ Best Practice: Catch specific exceptions instead of a general Exception to handle known error cases more effectively.,"[26486, 227, 6705, 19939, 25, 25750, 2176, 13269, 2427, 286, 257, 2276, 35528, 284, 5412, 1900, 4049, 2663, 517, 6840, 13]",0.5,1285,best_practice,277,Catch specific exceptions instead of a general Exception to handle known error cases more effectively.,,1273,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚úÖ Best Practice: Docstring provides a clear description of the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 14432, 8841, 3769, 257, 1598, 6764, 286, 262, 2163, 338, 4007, 290, 10007]",0.5,1316,best_practice,260,Docstring provides a clear description of the function's purpose and parameters,,1285,"            res = html.xpath(""//table[@id=\""dataTable\""]/tr"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 796, 27711, 13, 87, 6978, 7203, 1003, 11487, 58, 31, 312, 17553, 7890, 10962, 7879, 60, 14, 2213, 4943]"
‚ö†Ô∏è SAST Risk (Low): Assumes ct._write_head() is safe and does not handle exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 269, 83, 13557, 13564, 62, 2256, 3419, 318, 3338, 290, 857, 407, 5412, 13269]",0.5,1331,sast_risk,278,Assumes ct._write_head() is safe and does not handle exceptions,Low,1316,            print(e),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 68, 8]"
üß† ML Signal: Usage of retry_count and pause parameters for network requests,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1005, 563, 62, 9127, 290, 14985, 10007, 329, 3127, 7007]",1.0,1331,ml_signal,280,Usage of retry_count and pause parameters for network requests,,1331,,[]
‚úÖ Best Practice: Using map with lambda for consistent string formatting,"[26486, 227, 6705, 19939, 25, 8554, 3975, 351, 37456, 329, 6414, 4731, 33313]",0.5,1335,best_practice,284,Using map with lambda for consistent string formatting,,1331,    Parameters,"[220, 220, 220, 40117]"
‚úÖ Best Practice: Consider using a logger instead of writing directly to the console for better control over logging levels and outputs.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 49706, 2427, 286, 3597, 3264, 284, 262, 8624, 329, 1365, 1630, 625, 18931, 2974, 290, 23862, 13]",1.0,1339,best_practice,284,Consider using a logger instead of writing directly to the console for better control over logging levels and outputs.,,1335,    Parameters,"[220, 220, 220, 40117]"
üß† ML Signal: Usage of time.sleep indicates a retry mechanism or rate limiting.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 640, 13, 42832, 9217, 257, 1005, 563, 9030, 393, 2494, 15637, 13]",1.0,1389,ml_signal,287,Usage of time.sleep indicates a retry mechanism or rate limiting.,,1339,                 Â¶ÇÈÅáÁΩëÁªúÁ≠âÈóÆÈ¢òÈáçÂ§çÊâßË°åÁöÑÊ¨°Êï∞ ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10263, 99, 224, 34402, 229, 163, 121, 239, 163, 119, 250, 163, 255, 231, 29785, 106, 165, 95, 246, 34932, 235, 13783, 235, 33699, 100, 26193, 234, 21410, 162, 105, 94, 46763, 108, 220]"
‚ö†Ô∏è SAST Risk (Medium): URL construction using string formatting can lead to injection vulnerabilities if inputs are not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 1262, 4731, 33313, 460, 1085, 284, 16954, 23805, 611, 17311, 389, 407, 6105, 5336, 36951, 13]",1.0,1405,sast_risk,290,URL construction using string formatting can lead to injection vulnerabilities if inputs are not properly sanitized.,Medium,1389,                ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Medium): Network operations can fail or hang; consider adding more robust error handling or timeouts.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4560, 460, 2038, 393, 8181, 26, 2074, 4375, 517, 12373, 4049, 9041, 393, 640, 5269, 13]",0.5,1420,sast_risk,293,Network operations can fail or hang; consider adding more robust error handling or timeouts.,Medium,1405,    code:ËÇ°Á•®‰ª£Á†Å,"[220, 220, 220, 2438, 25, 164, 224, 94, 163, 98, 101, 47987, 163, 254, 223]"
‚ö†Ô∏è SAST Risk (Low): Decoding with a specific encoding can lead to issues if the encoding is incorrect or changes.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4280, 7656, 351, 257, 2176, 21004, 460, 1085, 284, 2428, 611, 262, 21004, 318, 11491, 393, 2458, 13]",0.5,1438,sast_risk,295,Decoding with a specific encoding can lead to issues if the encoding is incorrect or changes.,Low,1420,    date:‰∫§ÊòìÊó•Êúü     ,"[220, 220, 220, 3128, 25, 12859, 97, 23626, 241, 33768, 98, 17312, 253, 220, 220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Medium): Parsing HTML without sanitization can lead to security vulnerabilities like XSS.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 23042, 278, 11532, 1231, 5336, 270, 1634, 460, 1085, 284, 2324, 23805, 588, 1395, 5432, 13]",1.0,1469,sast_risk,297,Parsing HTML without sanitization can lead to security vulnerabilities like XSS.,Medium,1438,    samount:Êú∫ÊûÑÂ∏≠‰ΩçÂçñÂá∫È¢ù(‰∏á)     ,"[220, 220, 220, 6072, 608, 25, 17312, 118, 162, 252, 226, 30585, 255, 19526, 235, 39355, 244, 49035, 118, 165, 95, 251, 7, 10310, 229, 8, 220, 220, 220, 220, 220]"
üß† ML Signal: Conditional logic based on Python version indicates compatibility handling.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11361, 2196, 9217, 17764, 9041, 13]",1.0,1495,ml_signal,301,Conditional logic based on Python version indicates compatibility handling.,,1469,"    df =  _inst_detail(pageNo=1, retry_count=retry_count,","[220, 220, 220, 47764, 796, 220, 4808, 8625, 62, 49170, 7, 7700, 2949, 28, 16, 11, 1005, 563, 62, 9127, 28, 1186, 563, 62, 9127, 11]"
‚ö†Ô∏è SAST Risk (Medium): Using read_html can be risky if the HTML content is not trusted or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 1100, 62, 6494, 460, 307, 17564, 611, 262, 11532, 2695, 318, 407, 13467, 393, 5336, 36951, 13]",0.5,1496,sast_risk,306,Using read_html can be risky if the HTML content is not trusted or sanitized.,Medium,1495, ,[220]
‚úÖ Best Practice: Consider using pd.concat instead of append for better performance with large DataFrames.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 279, 67, 13, 1102, 9246, 2427, 286, 24443, 329, 1365, 2854, 351, 1588, 6060, 35439, 13]",1.0,1509,best_practice,310,Consider using pd.concat instead of append for better performance with large DataFrames.,,1496,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
‚ö†Ô∏è SAST Risk (Low): Using regex to extract numbers can be error-prone if the format changes.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 40364, 284, 7925, 3146, 460, 307, 4049, 12, 46330, 611, 262, 5794, 2458, 13]",0.5,1569,sast_risk,314,Using regex to extract numbers can be error-prone if the format changes.,Low,1509,"                                               ct.PAGES['fd'], '', pageNo))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4537, 48075, 17816, 16344, 6, 4357, 705, 3256, 2443, 2949, 4008]"
‚úÖ Best Practice: Consider logging exceptions instead of printing them for better error tracking and analysis.,"[26486, 227, 6705, 19939, 25, 12642, 18931, 13269, 2427, 286, 13570, 606, 329, 1365, 4049, 9646, 290, 3781, 13]",1.0,1600,best_practice,318,Consider logging exceptions instead of printing them for better error tracking and analysis.,,1569,"            res = html.xpath(""//table[@id=\""dataTable\""]/tr"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 796, 27711, 13, 87, 6978, 7203, 1003, 11487, 58, 31, 312, 17553, 7890, 10962, 7879, 60, 14, 2213, 4943]"
üß† ML Signal: Function with specific pattern of data manipulation,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 2176, 3912, 286, 1366, 17512]",0.5,1613,ml_signal,311,Function with specific pattern of data manipulation,,1600,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
üß† ML Signal: Conditional check for specific character in a list element,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 2198, 329, 2176, 2095, 287, 257, 1351, 5002]",0.5,1672,ml_signal,313,Conditional check for specific character in a list element,,1613,"            request = Request(rv.LHB_SINA_URL%(ct.P_TYPE['http'], ct.DOMAINS['vsf'], rv.LHB_KINDS[3],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 81, 85, 13, 43, 32886, 62, 50, 28893, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 14259, 69, 6, 4357, 374, 85, 13, 43, 32886, 62, 42, 1268, 5258, 58, 18, 4357]"
üß† ML Signal: Assigning value from one index to another in a list,"[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 1988, 422, 530, 6376, 284, 1194, 287, 257, 1351]",0.5,1696,ml_signal,315,Assigning value from one index to another in a list,,1672,"            text = urlopen(request, timeout=10).read()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2420, 796, 19016, 9654, 7, 25927, 11, 26827, 28, 940, 737, 961, 3419]"
üß† ML Signal: Loop with specific range and index manipulation,"[8582, 100, 254, 10373, 26484, 25, 26304, 351, 2176, 2837, 290, 6376, 17512]",0.5,1721,ml_signal,317,Loop with specific range and index manipulation,,1696,            html = lxml.html.parse(StringIO(text)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27711, 796, 300, 19875, 13, 6494, 13, 29572, 7, 10100, 9399, 7, 5239, 4008]"
üß† ML Signal: Reassigning list elements based on calculated index,"[8582, 100, 254, 10373, 26484, 25, 797, 562, 38944, 1351, 4847, 1912, 319, 10488, 6376]",0.5,1752,ml_signal,318,Reassigning list elements based on calculated index,,1721,"            res = html.xpath(""//table[@id=\""dataTable\""]/tr"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 796, 27711, 13, 87, 6978, 7203, 1003, 11487, 58, 31, 312, 17553, 7890, 10962, 7879, 60, 14, 2213, 4943]"
üß† ML Signal: Loop with specific range and index manipulation,"[8582, 100, 254, 10373, 26484, 25, 26304, 351, 2176, 2837, 290, 6376, 17512]",0.5,1783,ml_signal,318,Loop with specific range and index manipulation,,1752,"            res = html.xpath(""//table[@id=\""dataTable\""]/tr"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 796, 27711, 13, 87, 6978, 7203, 1003, 11487, 58, 31, 312, 17553, 7890, 10962, 7879, 60, 14, 2213, 4943]"
üß† ML Signal: Assigning NaN to list elements,"[8582, 100, 254, 10373, 26484, 25, 2195, 38944, 11013, 45, 284, 1351, 4847]",0.5,1814,ml_signal,318,Assigning NaN to list elements,,1783,"            res = html.xpath(""//table[@id=\""dataTable\""]/tr"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 796, 27711, 13, 87, 6978, 7203, 1003, 11487, 58, 31, 312, 17553, 7890, 10962, 7879, 60, 14, 2213, 4943]"

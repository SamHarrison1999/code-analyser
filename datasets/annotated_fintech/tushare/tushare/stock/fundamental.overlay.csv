annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Use of try-except for compatibility with different Python versions,"[26486, 227, 6705, 19939, 25, 5765, 286, 1949, 12, 16341, 329, 17764, 351, 1180, 11361, 6300]",0.5,13,best_practice,20,Use of try-except for compatibility with different Python versions,,0,"    from urllib2 import urlopen, Request","[220, 220, 220, 422, 2956, 297, 571, 17, 1330, 19016, 9654, 11, 19390]"
‚úÖ Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,26,best_practice,20,Consider adding type hints for the function parameters and return type for better readability and maintainability.,,13,"    from urllib2 import urlopen, Request","[220, 220, 220, 422, 2956, 297, 571, 17, 1330, 19016, 9654, 11, 19390]"
üß† ML Signal: Usage of default parameter values,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4277, 11507, 3815]",0.5,51,ml_signal,46,Usage of default parameter values,,26,"               timeToMarket,‰∏äÂ∏ÇÊó•Êúü","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 640, 2514, 27470, 11, 41468, 30585, 224, 33768, 98, 17312, 253]"
üß† ML Signal: String manipulation and date formatting,"[8582, 100, 254, 10373, 26484, 25, 10903, 17512, 290, 3128, 33313]",0.5,71,ml_signal,48,String manipulation and date formatting,,51,    wdate = du.last_tddate() if date is None else date,"[220, 220, 220, 266, 4475, 796, 7043, 13, 12957, 62, 83, 1860, 378, 3419, 611, 3128, 318, 6045, 2073, 3128]"
"‚ö†Ô∏è SAST Risk (Low): Hardcoded date comparison, consider using a date library for comparison","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 3128, 7208, 11, 2074, 1262, 257, 3128, 5888, 329, 7208]",0.5,83,sast_risk,50,"Hardcoded date comparison, consider using a date library for comparison",Low,71,    if wdate < '20160809':,"[220, 220, 220, 611, 266, 4475, 1279, 705, 1264, 1899, 34583, 10354]"
üß† ML Signal: Conditional logic for string formatting,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 329, 4731, 33313]",0.5,116,ml_signal,53,Conditional logic for string formatting,,83,"    request = Request(ct.ALL_STOCK_BASICS_FILE%(datepre, '' if date is None else wdate))","[220, 220, 220, 2581, 796, 19390, 7, 310, 13, 7036, 62, 2257, 11290, 62, 33, 1921, 19505, 62, 25664, 4, 7, 4475, 3866, 11, 10148, 611, 3128, 318, 6045, 2073, 266, 4475, 4008]"
‚ö†Ô∏è SAST Risk (Medium): Potential for format string injection if ct.ALL_STOCK_BASICS_FILE is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 5794, 4731, 16954, 611, 269, 83, 13, 7036, 62, 2257, 11290, 62, 33, 1921, 19505, 62, 25664, 318, 2836, 12, 14401]",0.5,129,sast_risk,55,Potential for format string injection if ct.ALL_STOCK_BASICS_FILE is user-controlled,Medium,116,    text = text.decode('GBK'),"[220, 220, 220, 2420, 796, 2420, 13, 12501, 1098, 10786, 4579, 42, 11537]"
‚ö†Ô∏è SAST Risk (Medium): Network operation without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4905, 1231, 6631, 9041]",0.5,156,sast_risk,57,Network operation without exception handling,Medium,129,"    df = pd.read_csv(StringIO(text), dtype={'code':'object'})","[220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 40664, 7, 10100, 9399, 7, 5239, 828, 288, 4906, 34758, 6, 8189, 10354, 6, 15252, 6, 30072]"
‚ö†Ô∏è SAST Risk (Low): Decoding with a specific encoding without handling potential exceptions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4280, 7656, 351, 257, 2176, 21004, 1231, 9041, 2785, 13269]",0.5,169,sast_risk,58,Decoding with a specific encoding without handling potential exceptions,Low,156,    df = df.set_index('code'),"[220, 220, 220, 47764, 796, 47764, 13, 2617, 62, 9630, 10786, 8189, 11537]"
üß† ML Signal: Data cleaning by replacing specific substrings,"[8582, 100, 254, 10373, 26484, 25, 6060, 12724, 416, 13586, 2176, 850, 37336]",0.5,182,ml_signal,58,Data cleaning by replacing specific substrings,,169,    df = df.set_index('code'),"[220, 220, 220, 47764, 796, 47764, 13, 2617, 62, 9630, 10786, 8189, 11537]"
‚ö†Ô∏è SAST Risk (Low): Reading CSV data without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11725, 44189, 1366, 1231, 6631, 9041]",0.5,195,sast_risk,58,Reading CSV data without exception handling,Low,182,    df = df.set_index('code'),"[220, 220, 220, 47764, 796, 47764, 13, 2617, 62, 9630, 10786, 8189, 11537]"
üß† ML Signal: Setting DataFrame index,"[8582, 100, 254, 10373, 26484, 25, 25700, 6060, 19778, 6376]",0.5,208,ml_signal,58,Setting DataFrame index,,195,    df = df.set_index('code'),"[220, 220, 220, 47764, 796, 47764, 13, 2617, 62, 9630, 10786, 8189, 11537]"
‚úÖ Best Practice: Check for valid input before proceeding with the function logic,"[26486, 227, 6705, 19939, 25, 6822, 329, 4938, 5128, 878, 18788, 351, 262, 2163, 9156]",0.5,237,best_practice,80,Check for valid input before proceeding with the function logic,,208,"        epcf,ÊØèËÇ°Áé∞ÈáëÊµÅÈáè(ÂÖÉ)","[220, 220, 220, 220, 220, 220, 220, 2462, 12993, 11, 162, 107, 237, 164, 224, 94, 163, 236, 108, 34932, 239, 38184, 223, 34932, 237, 7, 17739, 225, 8]"
‚úÖ Best Practice: Writing headers or logs can help in debugging and tracking,"[26486, 227, 6705, 19939, 25, 22183, 24697, 393, 17259, 460, 1037, 287, 28769, 290, 9646]",1.0,263,best_practice,82,Writing headers or logs can help in debugging and tracking,,237,"        profits_yoy,ÂáÄÂà©Ê∂¶ÂêåÊØî(%)","[220, 220, 220, 220, 220, 220, 220, 10177, 62, 88, 726, 11, 49035, 222, 26344, 102, 162, 114, 99, 28938, 234, 162, 107, 242, 7, 4407]"
üß† ML Signal: Recursive function call pattern,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 3912]",0.5,282,ml_signal,84,Recursive function call pattern,,263,"        report_date,ÂèëÂ∏ÉÊó•Êúü","[220, 220, 220, 220, 220, 220, 220, 989, 62, 4475, 11, 20998, 239, 30585, 225, 33768, 98, 17312, 253]"
‚úÖ Best Practice: Use of lambda for concise mapping,"[26486, 227, 6705, 19939, 25, 5765, 286, 37456, 329, 35327, 16855]",0.5,300,best_practice,86,Use of lambda for concise mapping,,282,"    if ct._check_input(year,quarter) is True:","[220, 220, 220, 611, 269, 83, 13557, 9122, 62, 15414, 7, 1941, 11, 24385, 8, 318, 6407, 25]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007, 13]",1.0,329,best_practice,88,Consider adding a docstring to describe the function's purpose and parameters.,,300,"        df =  _get_report_data(year, quarter, 1, pd.DataFrame())","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 220, 4808, 1136, 62, 13116, 62, 7890, 7, 1941, 11, 3860, 11, 352, 11, 279, 67, 13, 6601, 19778, 28955]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe string formatting in URL construction.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 4731, 33313, 287, 10289, 5103, 13]",1.0,338,sast_risk,92,Potentially unsafe string formatting in URL construction.,Medium,329,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
‚ö†Ô∏è SAST Risk (Medium): No exception handling for network-related errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 3127, 12, 5363, 8563, 13]",0.5,371,sast_risk,96,No exception handling for network-related errors.,Medium,338,"                     retry_count=3, pause=0.001):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 28, 18, 11, 14985, 28, 15, 13, 8298, 2599]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded character encoding may lead to issues with different encodings.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 2095, 21004, 743, 1085, 284, 2428, 351, 1180, 2207, 375, 654, 13]",0.5,384,sast_risk,98,Hardcoded character encoding may lead to issues with different encodings.,Low,371,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Parsing HTML without validation can lead to security risks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 23042, 278, 11532, 1231, 21201, 460, 1085, 284, 2324, 7476, 13]",1.0,393,sast_risk,100,Parsing HTML without validation can lead to security risks.,Medium,384,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚úÖ Best Practice: Use list comprehensions for more concise and readable code.,"[26486, 227, 6705, 19939, 25, 5765, 1351, 8569, 507, 329, 517, 35327, 290, 31744, 2438, 13]",0.5,414,best_practice,105,Use list comprehensions for more concise and readable code.,,393,"            text = text.replace('--', '')","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2420, 796, 2420, 13, 33491, 10786, 438, 3256, 10148, 8]"
‚ö†Ô∏è SAST Risk (Medium): Using read_html without validation can lead to security risks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 1100, 62, 6494, 1231, 21201, 460, 1085, 284, 2324, 7476, 13]",1.0,447,sast_risk,111,Using read_html without validation can lead to security risks.,Medium,414,                sarr = [etree.tostring(node) for node in res],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 685, 316, 631, 13, 83, 455, 1806, 7, 17440, 8, 329, 10139, 287, 581, 60]"
‚ö†Ô∏è SAST Risk (Low): Dropping columns without checking if they exist can lead to errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 21045, 2105, 15180, 1231, 10627, 611, 484, 2152, 460, 1085, 284, 8563, 13]",1.0,468,sast_risk,112,Dropping columns without checking if they exist can lead to errors.,Low,447,            sarr = ''.join(sarr),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 705, 4458, 22179, 7, 82, 3258, 8]"
"üß† ML Signal: Usage of DataFrame append method, which is a common pattern in data processing.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 6060, 19778, 24443, 2446, 11, 543, 318, 257, 2219, 3912, 287, 1366, 7587, 13]",0.5,492,ml_signal,116,"Usage of DataFrame append method, which is a common pattern in data processing.",,468,            df.columns = ct.REPORT_COLS,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 269, 83, 13, 2200, 15490, 62, 25154, 50]"
‚ö†Ô∏è SAST Risk (Low): Using regex without validation can lead to unexpected results.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 40364, 1231, 21201, 460, 1085, 284, 10059, 2482, 13]",1.0,512,sast_risk,119,Using regex without validation can lead to unexpected results.,Low,492,            if len(nextPage)>0:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 19545, 9876, 8, 29, 15, 25]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific error details.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 4049, 3307, 13]",1.0,532,sast_risk,119,Catching broad exceptions can hide specific error details.,Low,512,            if len(nextPage)>0:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 19545, 9876, 8, 29, 15, 25]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic IOError without specific details can make debugging difficult.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 24418, 12331, 1231, 2176, 3307, 460, 787, 28769, 2408, 13]",1.0,552,sast_risk,119,Raising a generic IOError without specific details can make debugging difficult.,Low,532,            if len(nextPage)>0:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 19545, 9876, 8, 29, 15, 25]"
"‚ö†Ô∏è SAST Risk (Low): No validation on the return value of ct._check_input, assuming it returns a boolean","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 262, 1441, 1988, 286, 269, 83, 13557, 9122, 62, 15414, 11, 13148, 340, 5860, 257, 25131]",0.5,556,sast_risk,139,"No validation on the return value of ct._check_input, assuming it returns a boolean",Low,552,    --------,"[220, 220, 220, 24200]"
‚úÖ Best Practice: Writing headers before processing data can help in debugging and logging,"[26486, 227, 6705, 19939, 25, 22183, 24697, 878, 7587, 1366, 460, 1037, 287, 28769, 290, 18931]",0.5,569,best_practice,141,Writing headers before processing data can help in debugging and logging,,556,"        code,‰ª£Á†Å","[220, 220, 220, 220, 220, 220, 220, 2438, 11, 47987, 163, 254, 223]"
üß† ML Signal: Usage of a recursive function to fetch data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 45115, 2163, 284, 21207, 1366]",1.0,596,ml_signal,143,Usage of a recursive function to fetch data,,569,"        roe,ÂáÄËµÑ‰∫ßÊî∂ÁõäÁéá(%)","[220, 220, 220, 220, 220, 220, 220, 686, 68, 11, 49035, 222, 164, 113, 226, 12859, 100, 162, 242, 114, 33566, 232, 163, 236, 229, 7, 4407]"
üß† ML Signal: Mapping function used to format data,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 2163, 973, 284, 5794, 1366]",1.0,619,ml_signal,145,Mapping function used to format data,,596,"        gross_profit_rate,ÊØõÂà©Áéá(%)","[220, 220, 220, 220, 220, 220, 220, 10319, 62, 9183, 62, 4873, 11, 162, 107, 249, 26344, 102, 163, 236, 229, 7, 4407]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007, 13]",0.5,640,best_practice,147,Consider adding a docstring to describe the function's purpose and parameters.,,619,"        eps,ÊØèËÇ°Êî∂Áõä","[220, 220, 220, 220, 220, 220, 220, 304, 862, 11, 162, 107, 237, 164, 224, 94, 162, 242, 114, 33566, 232]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe string formatting in URL construction.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 4731, 33313, 287, 10289, 5103, 13]",0.5,658,sast_risk,151,Potentially unsafe string formatting in URL construction.,Medium,640,"    if ct._check_input(year, quarter) is True:","[220, 220, 220, 611, 269, 83, 13557, 9122, 62, 15414, 7, 1941, 11, 3860, 8, 318, 6407, 25]"
"‚ö†Ô∏è SAST Risk (Medium): No exception handling for urlopen, which can raise URLError or HTTPError.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 19016, 9654, 11, 543, 460, 5298, 37902, 2538, 81, 1472, 393, 14626, 12331, 13]",0.5,693,sast_risk,156,"No exception handling for urlopen, which can raise URLError or HTTPError.",Medium,658,            data['code'] = data['code'].map(lambda x:str(x).zfill(6)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 17816, 8189, 20520, 796, 1366, 17816, 8189, 6, 4083, 8899, 7, 50033, 2124, 25, 2536, 7, 87, 737, 89, 20797, 7, 21, 4008]"
‚ö†Ô∏è SAST Risk (Low): Decoding with a specific encoding without handling potential exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4280, 7656, 351, 257, 2176, 21004, 1231, 9041, 2785, 13269, 13]",0.5,693,sast_risk,158,Decoding with a specific encoding without handling potential exceptions.,Low,693,,[]
‚ö†Ô∏è SAST Risk (Low): Parsing HTML without validation can lead to security risks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 23042, 278, 11532, 1231, 21201, 460, 1085, 284, 2324, 7476, 13]",1.0,712,sast_risk,160,Parsing HTML without validation can lead to security risks.,Low,693,"def _get_profit_data(year, quarter, pageNo, dataArr,","[4299, 4808, 1136, 62, 9183, 62, 7890, 7, 1941, 11, 3860, 11, 2443, 2949, 11, 1366, 3163, 81, 11]"
üß† ML Signal: Conditional logic based on Python version.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11361, 2196, 13]",0.5,721,ml_signal,165,Conditional logic based on Python version.,,712,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚ö†Ô∏è SAST Risk (Low): Using read_html without specifying a parser can lead to security risks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1100, 62, 6494, 1231, 31577, 257, 30751, 460, 1085, 284, 2324, 7476, 13]",0.5,742,sast_risk,171,Using read_html without specifying a parser can lead to security risks.,Low,721,"            text = text.replace('--', '')","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2420, 796, 2420, 13, 33491, 10786, 438, 3256, 10148, 8]"
‚ö†Ô∏è SAST Risk (Low): Using append in a loop can lead to performance issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 24443, 287, 257, 9052, 460, 1085, 284, 2854, 2428, 13]",1.0,774,sast_risk,173,Using append in a loop can lead to performance issues.,Low,742,"            res = html.xpath(""//table[@class=\""list_table\""]/tr"")","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 796, 27711, 13, 87, 6978, 7203, 1003, 11487, 58, 31, 4871, 17553, 4868, 62, 11487, 7879, 60, 14, 2213, 4943]"
‚ö†Ô∏è SAST Risk (Low): Using regex without validation can lead to unexpected results.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 40364, 1231, 21201, 460, 1085, 284, 10059, 2482, 13]",0.5,795,sast_risk,178,Using regex without validation can lead to unexpected results.,Low,774,            sarr = ''.join(sarr),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 705, 4458, 22179, 7, 82, 3258, 8]"
‚ö†Ô∏è SAST Risk (Medium): Catching all exceptions without logging or handling specific exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 327, 19775, 477, 13269, 1231, 18931, 393, 9041, 2176, 13269, 13]",0.5,816,sast_risk,178,Catching all exceptions without logging or handling specific exceptions.,Medium,795,            sarr = ''.join(sarr),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 705, 4458, 22179, 7, 82, 3258, 8]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic IOError without additional context.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 24418, 12331, 1231, 3224, 4732, 13]",1.0,837,sast_risk,178,Raising a generic IOError without additional context.,Low,816,            sarr = ''.join(sarr),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 705, 4458, 22179, 7, 82, 3258, 8]"
‚úÖ Best Practice: Check for valid input before proceeding with data fetching,"[26486, 227, 6705, 19939, 25, 6822, 329, 4938, 5128, 878, 18788, 351, 1366, 21207, 278]",1.0,841,best_practice,197,Check for valid input before proceeding with data fetching,,837,    Parameters,"[220, 220, 220, 40117]"
‚úÖ Best Practice: Writing headers before data processing can help in logging and debugging,"[26486, 227, 6705, 19939, 25, 22183, 24697, 878, 1366, 7587, 460, 1037, 287, 18931, 290, 28769]",1.0,857,best_practice,199,Writing headers before data processing can help in logging and debugging,,841,    year:int Âπ¥Â∫¶ e.g:2014,"[220, 220, 220, 614, 25, 600, 10263, 117, 112, 41753, 99, 304, 13, 70, 25, 4967]"
üß† ML Signal: Recursive data fetching pattern,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 1366, 21207, 278, 3912]",1.0,944,ml_signal,201,Recursive data fetching pattern,,857,       ËØ¥ÊòéÔºöÁî±‰∫éÊòØ‰ªéÁΩëÁ´ôËé∑ÂèñÁöÑÊï∞ÊçÆÔºåÈúÄË¶Å‰∏ÄÈ°µÈ°µÊäìÂèñÔºåÈÄüÂ∫¶ÂèñÂÜ≥‰∫éÊÇ®ÂΩìÂâçÁΩëÁªúÈÄüÂ∫¶,"[220, 220, 220, 220, 220, 220, 5525, 107, 112, 23626, 236, 171, 120, 248, 18796, 109, 12859, 236, 42468, 20015, 236, 163, 121, 239, 44165, 247, 164, 236, 115, 20998, 244, 21410, 46763, 108, 162, 235, 106, 171, 120, 234, 165, 250, 222, 17358, 223, 31660, 165, 94, 113, 165, 94, 113, 162, 232, 241, 20998, 244, 171, 120, 234, 34460, 253, 41753, 99, 20998, 244, 37863, 111, 12859, 236, 162, 224, 101, 37605, 241, 30298, 235, 163, 121, 239, 163, 119, 250, 34460, 253, 41753, 99]"
üß† ML Signal: Data transformation using map and lambda,"[8582, 100, 254, 10373, 26484, 25, 6060, 13389, 1262, 3975, 290, 37456]",1.0,948,ml_signal,203,Data transformation using map and lambda,,944,    Return,"[220, 220, 220, 8229]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007, 13]",0.5,953,best_practice,205,Consider adding a docstring to describe the function's purpose and parameters.,,948,    DataFrame,"[220, 220, 220, 6060, 19778]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe URL construction; ensure ct.OPERATION_URL and other components are sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 10289, 5103, 26, 4155, 269, 83, 13, 31054, 6234, 62, 21886, 290, 584, 6805, 389, 5336, 36951, 13]",0.5,987,sast_risk,209,Potentially unsafe URL construction; ensure ct.OPERATION_URL and other components are sanitized.,Medium,953,"        arturndays,Â∫îÊî∂Ë¥¶Ê¨æÂë®ËΩ¨Â§©Êï∞(Â§©)","[220, 220, 220, 220, 220, 220, 220, 1242, 333, 358, 592, 11, 41753, 242, 162, 242, 114, 164, 112, 99, 162, 105, 122, 37772, 101, 164, 121, 105, 25465, 46763, 108, 7, 25465, 8]"
‚ö†Ô∏è SAST Risk (Medium): urlopen can be vulnerable to SSRF; ensure the URL is trusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 19016, 9654, 460, 307, 8826, 284, 6723, 32754, 26, 4155, 262, 10289, 318, 13467, 13]",0.5,991,sast_risk,214,urlopen can be vulnerable to SSRF; ensure the URL is trusted.,Medium,987,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Decoding with a specific encoding can lead to issues if the encoding is incorrect.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4280, 7656, 351, 257, 2176, 21004, 460, 1085, 284, 2428, 611, 262, 21004, 318, 11491, 13]",1.0,1005,sast_risk,216,Decoding with a specific encoding can lead to issues if the encoding is incorrect.,Low,991,        ct._write_head(),"[220, 220, 220, 220, 220, 220, 220, 269, 83, 13557, 13564, 62, 2256, 3419]"
‚ö†Ô∏è SAST Risk (Medium): Parsing HTML from untrusted sources can lead to security issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 23042, 278, 11532, 422, 1418, 81, 8459, 4237, 460, 1085, 284, 2324, 2428, 13]",0.5,1018,sast_risk,218,Parsing HTML from untrusted sources can lead to security issues.,Medium,1005,        if data is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 1366, 318, 407, 6045, 25]"
‚úÖ Best Practice: Use list comprehensions for more concise and readable code.,"[26486, 227, 6705, 19939, 25, 5765, 1351, 8569, 507, 329, 517, 35327, 290, 31744, 2438, 13]",1.0,1018,best_practice,223,Use list comprehensions for more concise and readable code.,,1018,,[]
‚ö†Ô∏è SAST Risk (Low): Ensure the HTML content is safe to parse with read_html to avoid XSS.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 262, 11532, 2695, 318, 3338, 284, 21136, 351, 1100, 62, 6494, 284, 3368, 1395, 5432, 13]",0.5,1027,sast_risk,229,Ensure the HTML content is safe to parse with read_html to avoid XSS.,Low,1018,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
üß† ML Signal: Appending data to a DataFrame in a loop is a common pattern.,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 1366, 284, 257, 6060, 19778, 287, 257, 9052, 318, 257, 2219, 3912, 13]",0.5,1090,ml_signal,231,Appending data to a DataFrame in a loop is a common pattern.,,1027,"                                                     ct.PAGES['fd'], year,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4537, 48075, 17816, 16344, 6, 4357, 614, 11]"
‚ö†Ô∏è SAST Risk (Low): Ensure the regex pattern matches expected formats to avoid unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 262, 40364, 3912, 7466, 2938, 17519, 284, 3368, 10059, 4069, 13]",0.5,1115,sast_risk,236,Ensure the regex pattern matches expected formats to avoid unexpected behavior.,Low,1090,            html = lxml.html.parse(StringIO(text)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27711, 796, 300, 19875, 13, 6494, 13, 29572, 7, 10100, 9399, 7, 5239, 4008]"
üß† ML Signal: Recursive function calls can indicate complex data retrieval patterns.,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 3848, 460, 7603, 3716, 1366, 45069, 7572, 13]",1.0,1140,ml_signal,236,Recursive function calls can indicate complex data retrieval patterns.,,1115,            html = lxml.html.parse(StringIO(text)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27711, 796, 300, 19875, 13, 6494, 13, 29572, 7, 10100, 9399, 7, 5239, 4008]"
‚úÖ Best Practice: Consider logging the exception for debugging purposes.,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 6631, 329, 28769, 4959, 13]",0.5,1165,best_practice,236,Consider logging the exception for debugging purposes.,,1140,            html = lxml.html.parse(StringIO(text)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27711, 796, 300, 19875, 13, 6494, 13, 29572, 7, 10100, 9399, 7, 5239, 4008]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic IOError might not provide enough context for error handling.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 24418, 12331, 1244, 407, 2148, 1576, 4732, 329, 4049, 9041, 13]",0.5,1190,sast_risk,236,Raising a generic IOError might not provide enough context for error handling.,Low,1165,            html = lxml.html.parse(StringIO(text)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27711, 796, 300, 19875, 13, 6494, 13, 29572, 7, 10100, 9399, 7, 5239, 4008]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if ct._check_input does not handle unexpected input types or values.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 269, 83, 13557, 9122, 62, 15414, 857, 407, 5412, 10059, 5128, 3858, 393, 3815, 13]",1.0,1209,sast_risk,255,Potential issue if ct._check_input does not handle unexpected input types or values.,Low,1190,    raise IOError(ct.NETWORK_URL_ERROR_MSG),"[220, 220, 220, 5298, 24418, 12331, 7, 310, 13, 12884, 33249, 62, 21886, 62, 24908, 62, 5653, 38, 8]"
‚úÖ Best Practice: Writing headers before processing data can help in organizing output.,"[26486, 227, 6705, 19939, 25, 22183, 24697, 878, 7587, 1366, 460, 1037, 287, 16924, 5072, 13]",0.5,1209,best_practice,257,Writing headers before processing data can help in organizing output.,,1209,,[]
üß† ML Signal: Recursive data fetching pattern could be used to train models on data retrieval strategies.,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 1366, 21207, 278, 3912, 714, 307, 973, 284, 4512, 4981, 319, 1366, 45069, 10064, 13]",0.5,1213,ml_signal,259,Recursive data fetching pattern could be used to train models on data retrieval strategies.,,1209,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Using zfill to ensure consistent string length for codes.,"[26486, 227, 6705, 19939, 25, 8554, 1976, 20797, 284, 4155, 6414, 4731, 4129, 329, 12416, 13]",0.5,1217,best_practice,261,Using zfill to ensure consistent string length for codes.,,1213,    Parameters,"[220, 220, 220, 40117]"
‚úÖ Best Practice: Function parameters should be documented for clarity.,"[26486, 227, 6705, 19939, 25, 15553, 10007, 815, 307, 12395, 329, 16287, 13]",0.5,1221,best_practice,261,Function parameters should be documented for clarity.,,1217,    Parameters,"[220, 220, 220, 40117]"
üß† ML Signal: Usage of a retry mechanism indicates handling of network instability.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 1005, 563, 9030, 9217, 9041, 286, 3127, 24842, 13]",0.5,1261,ml_signal,264,Usage of a retry mechanism indicates handling of network instability.,,1221,    quarter:int Â≠£Â∫¶ :1„ÄÅ2„ÄÅ3„ÄÅ4ÔºåÂè™ËÉΩËæìÂÖ•Ëøô4‰∏™Â≠£Â∫¶,"[220, 220, 220, 3860, 25, 600, 10263, 255, 96, 41753, 99, 1058, 16, 23513, 17, 23513, 18, 23513, 19, 171, 120, 234, 20998, 103, 47797, 121, 164, 122, 241, 17739, 98, 32573, 247, 19, 10310, 103, 27764, 96, 41753, 99]"
üß† ML Signal: Usage of time.sleep indicates a pause or delay in execution.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 640, 13, 42832, 9217, 257, 14985, 393, 5711, 287, 9706, 13]",0.5,1265,ml_signal,267,Usage of time.sleep indicates a pause or delay in execution.,,1261,    Return,"[220, 220, 220, 8229]"
‚ö†Ô∏è SAST Risk (Medium): URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 1262, 4731, 33313, 460, 1085, 284, 16954, 23805, 611, 17311, 389, 407, 5336, 36951, 13]",0.5,1278,sast_risk,270,URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized.,Medium,1265,"        code,‰ª£Á†Å","[220, 220, 220, 220, 220, 220, 220, 2438, 11, 47987, 163, 254, 223]"
‚ö†Ô∏è SAST Risk (Medium): Network operations can lead to security risks if not properly handled.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4560, 460, 1085, 284, 2324, 7476, 611, 407, 6105, 12118, 13]",0.5,1303,sast_risk,274,Network operations can lead to security risks if not properly handled.,Medium,1278,"        nav,ÂáÄËµÑ‰∫ßÂ¢ûÈïøÁéá","[220, 220, 220, 220, 220, 220, 220, 6812, 11, 49035, 222, 164, 113, 226, 12859, 100, 161, 95, 252, 165, 243, 123, 163, 236, 229]"
‚ö†Ô∏è SAST Risk (Low): Decoding with a specific encoding can lead to issues if the encoding is incorrect.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4280, 7656, 351, 257, 2176, 21004, 460, 1085, 284, 2428, 611, 262, 21004, 318, 11491, 13]",0.5,1334,sast_risk,276,Decoding with a specific encoding can lead to issues if the encoding is incorrect.,Low,1303,"        epsg,ÊØèËÇ°Êî∂ÁõäÂ¢ûÈïøÁéá","[220, 220, 220, 220, 220, 220, 220, 304, 862, 70, 11, 162, 107, 237, 164, 224, 94, 162, 242, 114, 33566, 232, 161, 95, 252, 165, 243, 123, 163, 236, 229]"
‚ö†Ô∏è SAST Risk (Medium): Parsing HTML/XML can lead to security risks if the input is not trusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 23042, 278, 11532, 14, 55, 5805, 460, 1085, 284, 2324, 7476, 611, 262, 5128, 318, 407, 13467, 13]",0.5,1352,sast_risk,279,Parsing HTML/XML can lead to security risks if the input is not trusted.,Medium,1334,"    if ct._check_input(year, quarter) is True:","[220, 220, 220, 611, 269, 83, 13557, 9122, 62, 15414, 7, 1941, 11, 3860, 8, 318, 6407, 25]"
‚úÖ Best Practice: Use list comprehensions for more readable and efficient code.,"[26486, 227, 6705, 19939, 25, 5765, 1351, 8569, 507, 329, 517, 31744, 290, 6942, 2438, 13]",0.5,1377,best_practice,283,Use list comprehensions for more readable and efficient code.,,1352,#             data = data.drop_duplicates('code'),"[2, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 14781, 62, 646, 489, 16856, 10786, 8189, 11537]"
‚ö†Ô∏è SAST Risk (Medium): Using read_html can be risky if the HTML content is not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 1100, 62, 6494, 460, 307, 17564, 611, 262, 11532, 2695, 318, 407, 5336, 36951, 13]",0.5,1410,sast_risk,289,Using read_html can be risky if the HTML content is not sanitized.,Medium,1377,"                     retry_count=3, pause=0.001):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 28, 18, 11, 14985, 28, 15, 13, 8298, 2599]"
‚úÖ Best Practice: Use append method with ignore_index for better performance.,"[26486, 227, 6705, 19939, 25, 5765, 24443, 2446, 351, 8856, 62, 9630, 329, 1365, 2854, 13]",0.5,1423,best_practice,292,Use append method with ignore_index for better performance.,,1410,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
‚ö†Ô∏è SAST Risk (Low): Using regex to extract numbers can be error-prone if the pattern changes.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 40364, 284, 7925, 3146, 460, 307, 4049, 12, 46330, 611, 262, 3912, 2458, 13]",0.5,1467,sast_risk,294,Using regex to extract numbers can be error-prone if the pattern changes.,Low,1423,"            request = Request(ct.GROWTH_URL%(ct.P_TYPE['http'], ct.DOMAINS['vsf'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 310, 13, 10761, 3913, 4221, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 14259, 69, 6, 4357]"
üß† ML Signal: Recursive function calls indicate a pattern of handling paginated data.,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 3848, 7603, 257, 3912, 286, 9041, 42208, 3898, 1366, 13]",0.5,1511,ml_signal,294,Recursive function calls indicate a pattern of handling paginated data.,,1467,"            request = Request(ct.GROWTH_URL%(ct.P_TYPE['http'], ct.DOMAINS['vsf'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 310, 13, 10761, 3913, 4221, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 14259, 69, 6, 4357]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors and make debugging difficult.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563, 290, 787, 28769, 2408, 13]",1.0,1555,sast_risk,294,Catching broad exceptions can hide specific errors and make debugging difficult.,Low,1511,"            request = Request(ct.GROWTH_URL%(ct.P_TYPE['http'], ct.DOMAINS['vsf'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 310, 13, 10761, 3913, 4221, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 14259, 69, 6, 4357]"
‚ö†Ô∏è SAST Risk (Low): Raising generic IOError can be misleading if the error is not related to I/O operations.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 14276, 24418, 12331, 460, 307, 15850, 611, 262, 4049, 318, 407, 3519, 284, 314, 14, 46, 4560, 13]",0.5,1592,sast_risk,313,Raising generic IOError can be misleading if the error is not related to I/O operations.,Low,1555,"                pageNo = re.findall(r'\d+', nextPage[0])[0]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2443, 2949, 796, 302, 13, 19796, 439, 7, 81, 6, 59, 67, 10, 3256, 1306, 9876, 58, 15, 12962, 58, 15, 60]"
"‚ö†Ô∏è SAST Risk (Low): No validation on the return value of ct._check_input, assuming it returns a boolean.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 262, 1441, 1988, 286, 269, 83, 13557, 9122, 62, 15414, 11, 13148, 340, 5860, 257, 25131, 13]",0.5,1629,sast_risk,313,"No validation on the return value of ct._check_input, assuming it returns a boolean.",Low,1592,"                pageNo = re.findall(r'\d+', nextPage[0])[0]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2443, 2949, 796, 302, 13, 19796, 439, 7, 81, 6, 59, 67, 10, 3256, 1306, 9876, 58, 15, 12962, 58, 15, 60]"
üß† ML Signal: Function call to ct._write_head() indicates a logging or setup action.,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 269, 83, 13557, 13564, 62, 2256, 3419, 9217, 257, 18931, 393, 9058, 2223, 13]",0.5,1642,ml_signal,315,Function call to ct._write_head() indicates a logging or setup action.,,1629,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Recursive function call pattern with _get_debtpaying_data.,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 3912, 351, 4808, 1136, 62, 11275, 83, 32629, 62, 7890, 13]",0.5,1654,ml_signal,317,Recursive function call pattern with _get_debtpaying_data.,,1642,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚úÖ Best Practice: Using map with lambda for consistent string formatting.,"[26486, 227, 6705, 19939, 25, 8554, 3975, 351, 37456, 329, 6414, 4731, 33313, 13]",0.5,1673,best_practice,319,Using map with lambda for consistent string formatting.,,1654,    raise IOError(ct.NETWORK_URL_ERROR_MSG),"[220, 220, 220, 5298, 24418, 12331, 7, 310, 13, 12884, 33249, 62, 21886, 62, 24908, 62, 5653, 38, 8]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007, 13]",1.0,1673,best_practice,321,Consider adding a docstring to describe the function's purpose and parameters.,,1673,,[]
‚ö†Ô∏è SAST Risk (Medium): URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 1262, 4731, 33313, 460, 1085, 284, 16954, 23805, 611, 17311, 389, 407, 5336, 36951, 13]",1.0,1677,sast_risk,325,URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized.,Medium,1673,    Parameters,"[220, 220, 220, 40117]"
"‚ö†Ô∏è SAST Risk (Medium): No exception handling for urlopen, which can raise URLError or HTTPError.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 19016, 9654, 11, 543, 460, 5298, 37902, 2538, 81, 1472, 393, 14626, 12331, 13]",0.5,1684,sast_risk,330,"No exception handling for urlopen, which can raise URLError or HTTPError.",Medium,1677,       ,"[220, 220, 220, 220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Low): Decoding with a specific encoding ('GBK') without handling potential UnicodeDecodeError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4280, 7656, 351, 257, 2176, 21004, 19203, 4579, 42, 11537, 1231, 9041, 2785, 34371, 10707, 1098, 12331, 13]",0.5,1688,sast_risk,332,Decoding with a specific encoding ('GBK') without handling potential UnicodeDecodeError.,Low,1684,    --------,"[220, 220, 220, 24200]"
‚ö†Ô∏è SAST Risk (Medium): Parsing HTML without sanitization can lead to security risks like XSS.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 23042, 278, 11532, 1231, 5336, 270, 1634, 460, 1085, 284, 2324, 7476, 588, 1395, 5432, 13]",1.0,1693,sast_risk,333,Parsing HTML without sanitization can lead to security risks like XSS.,Medium,1688,    DataFrame,"[220, 220, 220, 6060, 19778]"
üß† ML Signal: Conditional logic based on Python version indicates compatibility handling.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11361, 2196, 9217, 17764, 9041, 13]",1.0,1715,ml_signal,338,Conditional logic based on Python version indicates compatibility handling.,,1693,"        cashratio,Áé∞ÈáëÊØîÁéá","[220, 220, 220, 220, 220, 220, 220, 5003, 10366, 952, 11, 163, 236, 108, 34932, 239, 162, 107, 242, 163, 236, 229]"
‚ö†Ô∏è SAST Risk (Low): Using read_html without specifying a parser can lead to security issues if the input is not trusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1100, 62, 6494, 1231, 31577, 257, 30751, 460, 1085, 284, 2324, 2428, 611, 262, 5128, 318, 407, 13467, 13]",1.0,1729,sast_risk,344,Using read_html without specifying a parser can lead to security issues if the input is not trusted.,Low,1715,        ct._write_head(),"[220, 220, 220, 220, 220, 220, 220, 269, 83, 13557, 13564, 62, 2256, 3419]"
üß† ML Signal: Setting DataFrame columns explicitly indicates data normalization practices.,"[8582, 100, 254, 10373, 26484, 25, 25700, 6060, 19778, 15180, 11777, 9217, 1366, 3487, 1634, 6593, 13]",0.5,1742,ml_signal,346,Setting DataFrame columns explicitly indicates data normalization practices.,,1729,        if df is not None:,"[220, 220, 220, 220, 220, 220, 220, 611, 47764, 318, 407, 6045, 25]"
‚úÖ Best Practice: Using append with ignore_index=True for DataFrame concatenation.,"[26486, 227, 6705, 19939, 25, 8554, 24443, 351, 8856, 62, 9630, 28, 17821, 329, 6060, 19778, 1673, 36686, 341, 13]",0.5,1777,best_practice,348,Using append with ignore_index=True for DataFrame concatenation.,,1742,            df['code'] = df['code'].map(lambda x:str(x).zfill(6)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 17816, 8189, 20520, 796, 47764, 17816, 8189, 6, 4083, 8899, 7, 50033, 2124, 25, 2536, 7, 87, 737, 89, 20797, 7, 21, 4008]"
‚ö†Ô∏è SAST Risk (Low): Using regex to extract numbers from strings can be error-prone if the format changes.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 40364, 284, 7925, 3146, 422, 13042, 460, 307, 4049, 12, 46330, 611, 262, 5794, 2458, 13]",0.5,1777,sast_risk,351,Using regex to extract numbers from strings can be error-prone if the format changes.,Low,1777,,[]
üß† ML Signal: Recursive function call pattern for pagination handling.,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 3912, 329, 42208, 1883, 9041, 13]",1.0,1777,ml_signal,351,Recursive function call pattern for pagination handling.,,1777,,[]
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors and make debugging difficult.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563, 290, 787, 28769, 2408, 13]",1.0,1777,sast_risk,351,Catching broad exceptions can hide specific errors and make debugging difficult.,Low,1777,,[]
‚ö†Ô∏è SAST Risk (Low): Raising IOError with a custom message without logging the original exception details.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 24418, 12331, 351, 257, 2183, 3275, 1231, 18931, 262, 2656, 6631, 3307, 13]",0.5,1798,sast_risk,369,Raising IOError with a custom message without logging the original exception details.,Low,1777,            sarr = ''.join(sarr),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 705, 4458, 22179, 7, 82, 3258, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if ct._check_input does not handle invalid inputs properly,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 269, 83, 13557, 9122, 62, 15414, 857, 407, 5412, 12515, 17311, 6105]",1.0,1819,sast_risk,369,Potential issue if ct._check_input does not handle invalid inputs properly,Low,1798,            sarr = ''.join(sarr),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 705, 4458, 22179, 7, 82, 3258, 8]"
‚úÖ Best Practice: Writing headers before processing data can help in debugging and logging,"[26486, 227, 6705, 19939, 25, 22183, 24697, 878, 7587, 1366, 460, 1037, 287, 28769, 290, 18931]",1.0,1844,best_practice,371,Writing headers before processing data can help in debugging and logging,,1819,            df = pd.read_html(sarr)[0],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 6494, 7, 82, 3258, 38381, 15, 60]"
üß† ML Signal: Recursive data fetching pattern,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 1366, 21207, 278, 3912]",1.0,1873,ml_signal,373,Recursive data fetching pattern,,1844,"            dataArr = dataArr.append(df, ignore_index=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 3163, 81, 796, 1366, 3163, 81, 13, 33295, 7, 7568, 11, 8856, 62, 9630, 28, 17821, 8]"
üß† ML Signal: Data transformation pattern using map and lambda,"[8582, 100, 254, 10373, 26484, 25, 6060, 13389, 3912, 1262, 3975, 290, 37456]",1.0,1893,ml_signal,375,Data transformation pattern using map and lambda,,1873,            if len(nextPage)>0:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 19545, 9876, 8, 29, 15, 25]"
üß† ML Signal: Logging or console output can be used to track function usage and error rates,"[8582, 100, 254, 10373, 26484, 25, 5972, 2667, 393, 8624, 5072, 460, 307, 973, 284, 2610, 2163, 8748, 290, 4049, 3965]",0.5,1929,ml_signal,377,Logging or console output can be used to track function usage and error rates,,1893,"                return _get_debtpaying_data(year, quarter, pageNo, dataArr)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 4808, 1136, 62, 11275, 83, 32629, 62, 7890, 7, 1941, 11, 3860, 11, 2443, 2949, 11, 1366, 3163, 81, 8]"
‚ö†Ô∏è SAST Risk (Low): Using a fixed sleep time might not be optimal for rate limiting,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 257, 5969, 3993, 640, 1244, 407, 307, 16586, 329, 2494, 15637]",0.5,1941,sast_risk,380,Using a fixed sleep time might not be optimal for rate limiting,Low,1929,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚ö†Ô∏è SAST Risk (Medium): URL construction without validation can lead to injection attacks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 1231, 21201, 460, 1085, 284, 16954, 3434]",1.0,1942,sast_risk,384,URL construction without validation can lead to injection attacks,Medium,1941, ,[220]
‚ö†Ô∏è SAST Risk (Medium): No exception handling for network errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 3127, 8563]",1.0,1968,sast_risk,387,No exception handling for network errors,Medium,1942,        Ëé∑ÂèñÁé∞ÈáëÊµÅÈáèÊï∞ÊçÆ,"[220, 220, 220, 220, 220, 220, 220, 5525, 236, 115, 20998, 244, 163, 236, 108, 34932, 239, 38184, 223, 34932, 237, 46763, 108, 162, 235, 106]"
‚ö†Ô∏è SAST Risk (Low): Decoding without error handling can lead to crashes,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4280, 7656, 1231, 4049, 9041, 460, 1085, 284, 17616]",0.5,1972,sast_risk,389,Decoding without error handling can lead to crashes,Low,1968,    --------,"[220, 220, 220, 24200]"
‚ö†Ô∏è SAST Risk (Medium): Parsing HTML without sanitization can lead to XSS,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 23042, 278, 11532, 1231, 5336, 270, 1634, 460, 1085, 284, 1395, 5432]",1.0,2059,sast_risk,392,Parsing HTML without sanitization can lead to XSS,Medium,1972,       ËØ¥ÊòéÔºöÁî±‰∫éÊòØ‰ªéÁΩëÁ´ôËé∑ÂèñÁöÑÊï∞ÊçÆÔºåÈúÄË¶Å‰∏ÄÈ°µÈ°µÊäìÂèñÔºåÈÄüÂ∫¶ÂèñÂÜ≥‰∫éÊÇ®ÂΩìÂâçÁΩëÁªúÈÄüÂ∫¶,"[220, 220, 220, 220, 220, 220, 5525, 107, 112, 23626, 236, 171, 120, 248, 18796, 109, 12859, 236, 42468, 20015, 236, 163, 121, 239, 44165, 247, 164, 236, 115, 20998, 244, 21410, 46763, 108, 162, 235, 106, 171, 120, 234, 165, 250, 222, 17358, 223, 31660, 165, 94, 113, 165, 94, 113, 162, 232, 241, 20998, 244, 171, 120, 234, 34460, 253, 41753, 99, 20998, 244, 37863, 111, 12859, 236, 162, 224, 101, 37605, 241, 30298, 235, 163, 121, 239, 163, 119, 250, 34460, 253, 41753, 99]"
‚úÖ Best Practice: Use list comprehensions for concise and efficient code,"[26486, 227, 6705, 19939, 25, 5765, 1351, 8569, 507, 329, 35327, 290, 6942, 2438]",0.5,2064,best_practice,396,Use list comprehensions for concise and efficient code,,2059,    DataFrame,"[220, 220, 220, 6060, 19778]"
‚ö†Ô∏è SAST Risk (Medium): Parsing HTML without sanitization can lead to XSS,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 23042, 278, 11532, 1231, 5336, 270, 1634, 460, 1085, 284, 1395, 5432]",1.0,2108,sast_risk,401,Parsing HTML without sanitization can lead to XSS,Medium,2064,"        cf_nm,ÁªèËê•Áé∞ÈáëÂáÄÊµÅÈáè‰∏éÂáÄÂà©Ê∂¶ÁöÑÊØîÁéá","[220, 220, 220, 220, 220, 220, 220, 30218, 62, 21533, 11, 163, 119, 237, 164, 238, 98, 163, 236, 108, 34932, 239, 49035, 222, 38184, 223, 34932, 237, 10310, 236, 49035, 222, 26344, 102, 162, 114, 99, 21410, 162, 107, 242, 163, 236, 229]"
‚úÖ Best Practice: Explicitly setting DataFrame columns improves readability,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6060, 19778, 15180, 19575, 1100, 1799]",0.5,2135,best_practice,403,Explicitly setting DataFrame columns improves readability,,2108,"        cashflowratio,Áé∞ÈáëÊµÅÈáèÊØîÁéá","[220, 220, 220, 220, 220, 220, 220, 5003, 11125, 10366, 952, 11, 163, 236, 108, 34932, 239, 38184, 223, 34932, 237, 162, 107, 242, 163, 236, 229]"
‚úÖ Best Practice: Using append in a loop can be inefficient; consider alternatives,"[26486, 227, 6705, 19939, 25, 8554, 24443, 287, 257, 9052, 460, 307, 30904, 26, 2074, 14693]",0.5,2149,best_practice,406,Using append in a loop can be inefficient; consider alternatives,,2135,        ct._write_head(),"[220, 220, 220, 220, 220, 220, 220, 269, 83, 13557, 13564, 62, 2256, 3419]"
‚ö†Ô∏è SAST Risk (Low): Regular expressions without validation can lead to unexpected behavior,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 23603, 14700, 1231, 21201, 460, 1085, 284, 10059, 4069]",0.5,2184,sast_risk,410,Regular expressions without validation can lead to unexpected behavior,Low,2149,            df['code'] = df['code'].map(lambda x:str(x).zfill(6)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 17816, 8189, 20520, 796, 47764, 17816, 8189, 6, 4083, 8899, 7, 50033, 2124, 25, 2536, 7, 87, 737, 89, 20797, 7, 21, 4008]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific error details,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 4049, 3307]",0.5,2204,sast_risk,414,Catching broad exceptions can hide specific error details,Low,2184,"def _get_cashflow_data(year, quarter, pageNo, dataArr,","[4299, 4808, 1136, 62, 30350, 11125, 62, 7890, 7, 1941, 11, 3860, 11, 2443, 2949, 11, 1366, 3163, 81, 11]"
‚ö†Ô∏è SAST Risk (Low): Raising generic IOError can obscure specific network issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 14276, 24418, 12331, 460, 18611, 2176, 3127, 2428]",0.5,2224,sast_risk,414,Raising generic IOError can obscure specific network issues,Low,2204,"def _get_cashflow_data(year, quarter, pageNo, dataArr,","[4299, 4808, 1136, 62, 30350, 11125, 62, 7890, 7, 1941, 11, 3860, 11, 2443, 2949, 11, 1366, 3163, 81, 11]"
‚úÖ Best Practice: Define imports at the top of the file for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 2896, 500, 17944, 379, 262, 1353, 286, 262, 2393, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,2254,best_practice,407,Define imports at the top of the file for better readability and maintainability,,2224,"        df =  _get_cashflow_data(year, quarter, 1, pd.DataFrame())","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 220, 4808, 1136, 62, 30350, 11125, 62, 7890, 7, 1941, 11, 3860, 11, 352, 11, 279, 67, 13, 6601, 19778, 28955]"
‚úÖ Best Practice: Use inspect.stack() carefully as it can be resource-intensive,"[26486, 227, 6705, 19939, 25, 5765, 10104, 13, 25558, 3419, 7773, 355, 340, 460, 307, 8271, 12, 38096]",0.5,2254,best_practice,412,Use inspect.stack() carefully as it can be resource-intensive,,2254,,[]
‚ö†Ô∏è SAST Risk (Low): Potential directory traversal if caller_file is manipulated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 24955, 62, 7753, 318, 25036]",0.5,2274,sast_risk,414,Potential directory traversal if caller_file is manipulated,Low,2254,"def _get_cashflow_data(year, quarter, pageNo, dataArr,","[4299, 4808, 1136, 62, 30350, 11125, 62, 7890, 7, 1941, 11, 3860, 11, 2443, 2949, 11, 1366, 3163, 81, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential directory traversal if pardir is manipulated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 8619, 33038, 282, 611, 41746, 343, 318, 25036]",0.5,2294,sast_risk,414,Potential directory traversal if pardir is manipulated,Low,2274,"def _get_cashflow_data(year, quarter, pageNo, dataArr,","[4299, 4808, 1136, 62, 30350, 11125, 62, 7890, 7, 1941, 11, 3860, 11, 2443, 2949, 11, 1366, 3163, 81, 11]"
‚úÖ Best Practice: Check if the code is a digit to ensure valid input,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 2438, 318, 257, 16839, 284, 4155, 4938, 5128]",1.0,2315,best_practice,424,Check if the code is a digit to ensure valid input,,2294,            text = text.decode('GBK'),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2420, 796, 2420, 13, 12501, 1098, 10786, 4579, 42, 11537]"
‚ö†Ô∏è SAST Risk (Medium): Potential for URL injection if `code` is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 10289, 16954, 611, 4600, 8189, 63, 318, 407, 6105, 31031]",0.5,2340,sast_risk,426,Potential for URL injection if `code` is not properly validated,Medium,2315,            html = lxml.html.parse(StringIO(text)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 27711, 796, 300, 19875, 13, 6494, 13, 29572, 7, 10100, 9399, 7, 5239, 4008]"
‚ö†Ô∏è SAST Risk (Medium): Network operations can be a point of failure or attack,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4560, 460, 307, 257, 966, 286, 5287, 393, 1368]",0.5,2359,sast_risk,428,Network operations can be a point of failure or attack,Medium,2340,            if ct.PY3:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 269, 83, 13, 47, 56, 18, 25]"
‚ö†Ô∏è SAST Risk (Low): Decoding with a specific encoding can lead to issues if the encoding is incorrect,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4280, 7656, 351, 257, 2176, 21004, 460, 1085, 284, 2428, 611, 262, 21004, 318, 11491]",0.5,2372,sast_risk,430,Decoding with a specific encoding can lead to issues if the encoding is incorrect,Low,2359,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Replacing specific characters to clean up the text,"[26486, 227, 6705, 19939, 25, 18407, 4092, 2176, 3435, 284, 3424, 510, 262, 2420]",0.5,2393,best_practice,432,Replacing specific characters to clean up the text,,2372,            sarr = ''.join(sarr),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 705, 4458, 22179, 7, 82, 3258, 8]"
‚ö†Ô∏è SAST Risk (Low): Reading CSV from a string can be risky if the content is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11725, 44189, 422, 257, 4731, 460, 307, 17564, 611, 262, 2695, 318, 407, 6105, 31031]",0.5,2420,sast_risk,433,Reading CSV from a string can be risky if the content is not properly validated,Low,2393,            sarr = '<table>%s</table>'%sarr,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 705, 27, 11487, 29, 4, 82, 3556, 11487, 29, 6, 4, 82, 3258]"
"üß† ML Signal: Returning a DataFrame, which is a common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 11, 543, 318, 257, 2219, 3912, 287, 1366, 7587]",1.0,2447,ml_signal,433,"Returning a DataFrame, which is a common pattern in data processing",,2420,            sarr = '<table>%s</table>'%sarr,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 705, 27, 11487, 29, 4, 82, 3556, 11487, 29, 6, 4, 82, 3258]"
‚úÖ Best Practice: Check if the code is a digit to ensure valid input,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 2438, 318, 257, 16839, 284, 4155, 4938, 5128]",1.0,2459,best_practice,443,Check if the code is a digit to ensure valid input,,2447,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚ö†Ô∏è SAST Risk (Medium): Potential for URL injection if `code` is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 10289, 16954, 611, 4600, 8189, 63, 318, 407, 6105, 31031]",1.0,2478,sast_risk,445,Potential for URL injection if `code` is not properly validated,Medium,2459,    raise IOError(ct.NETWORK_URL_ERROR_MSG),"[220, 220, 220, 5298, 24418, 12331, 7, 310, 13, 12884, 33249, 62, 21886, 62, 24908, 62, 5653, 38, 8]"
‚ö†Ô∏è SAST Risk (Medium): No exception handling for network operations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 3127, 4560]",1.0,2485,sast_risk,447,No exception handling for network operations,Medium,2478,       ,"[220, 220, 220, 220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Medium): No exception handling for decoding errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 39938, 8563]",0.5,2490,sast_risk,449,No exception handling for decoding errors,Medium,2485,    import os,"[220, 220, 220, 1330, 28686]"
‚úÖ Best Practice: Normalize line endings for consistent data processing,"[26486, 227, 6705, 19939, 25, 14435, 1096, 1627, 38168, 329, 6414, 1366, 7587]",0.5,2508,best_practice,451,Normalize line endings for consistent data processing,,2490,    caller_file = inspect.stack()[1][1]  ,"[220, 220, 220, 24955, 62, 7753, 796, 10104, 13, 25558, 3419, 58, 16, 7131, 16, 60, 220, 220]"
‚úÖ Best Practice: Replace tabs with commas for CSV format compatibility,"[26486, 227, 6705, 19939, 25, 40177, 22524, 351, 725, 292, 329, 44189, 5794, 17764]",0.5,2547,best_practice,452,Replace tabs with commas for CSV format compatibility,,2508,"    pardir = os.path.abspath(os.path.join(os.path.dirname(caller_file), os.path.pardir))","[220, 220, 220, 41746, 343, 796, 28686, 13, 6978, 13, 397, 2777, 776, 7, 418, 13, 6978, 13, 22179, 7, 418, 13, 6978, 13, 15908, 3672, 7, 13345, 263, 62, 7753, 828, 28686, 13, 6978, 13, 26037, 343, 4008]"
‚ö†Ô∏è SAST Risk (Medium): No validation or sanitization of CSV data before parsing,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 393, 5336, 270, 1634, 286, 44189, 1366, 878, 32096]",1.0,2586,sast_risk,452,No validation or sanitization of CSV data before parsing,Medium,2547,"    pardir = os.path.abspath(os.path.join(os.path.dirname(caller_file), os.path.pardir))","[220, 220, 220, 41746, 343, 796, 28686, 13, 6978, 13, 397, 2777, 776, 7, 418, 13, 6978, 13, 22179, 7, 418, 13, 6978, 13, 15908, 3672, 7, 13345, 263, 62, 7753, 828, 28686, 13, 6978, 13, 26037, 343, 4008]"
"üß† ML Signal: Returns a DataFrame, indicating data processing and analysis","[8582, 100, 254, 10373, 26484, 25, 16409, 257, 6060, 19778, 11, 12739, 1366, 7587, 290, 3781]",0.5,2625,ml_signal,452,"Returns a DataFrame, indicating data processing and analysis",,2586,"    pardir = os.path.abspath(os.path.join(os.path.dirname(caller_file), os.path.pardir))","[220, 220, 220, 41746, 343, 796, 28686, 13, 6978, 13, 397, 2777, 776, 7, 418, 13, 6978, 13, 22179, 7, 418, 13, 6978, 13, 15908, 3672, 7, 13345, 263, 62, 7753, 828, 28686, 13, 6978, 13, 26037, 343, 4008]"
‚úÖ Best Practice: Check if the code is a digit to ensure it is a valid stock code,"[26486, 227, 6705, 19939, 25, 6822, 611, 262, 2438, 318, 257, 16839, 284, 4155, 340, 318, 257, 4938, 4283, 2438]",1.0,2632,best_practice,462,Check if the code is a digit to ensure it is a valid stock code,,2625,       ,"[220, 220, 220, 220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Medium): Potential for URL injection if ct.SINA_CASHFLOW_URL is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 10289, 16954, 611, 269, 83, 13, 50, 28893, 62, 34, 11211, 3697, 3913, 62, 21886, 318, 407, 6105, 5336, 36951]",0.5,2636,sast_risk,464,Potential for URL injection if ct.SINA_CASHFLOW_URL is not properly sanitized,Medium,2632,    --------,"[220, 220, 220, 24200]"
"‚ö†Ô∏è SAST Risk (Medium): No exception handling for network operations, which may lead to unhandled exceptions","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 3127, 4560, 11, 543, 743, 1085, 284, 555, 38788, 13269]",1.0,2705,sast_risk,466,"No exception handling for network operations, which may lead to unhandled exceptions",Medium,2636,        Ë°åÂàóÂêçÁß∞‰∏∫‰∏≠Êñá‰∏îÊï∞ÁõÆËæÉÂ§öÔºåÂª∫ËÆÆËé∑ÂèñÊï∞ÊçÆÂêé‰øùÂ≠òÂà∞Êú¨Âú∞Êü•Áúã,"[220, 220, 220, 220, 220, 220, 220, 5525, 94, 234, 26344, 245, 28938, 235, 163, 100, 108, 10310, 118, 40792, 23877, 229, 10310, 242, 46763, 108, 33566, 106, 164, 122, 225, 13783, 248, 171, 120, 234, 161, 119, 118, 164, 106, 106, 164, 236, 115, 20998, 244, 46763, 108, 162, 235, 106, 28938, 236, 46479, 251, 27764, 246, 26344, 108, 17312, 105, 28839, 108, 162, 253, 98, 40367, 233]"
‚ö†Ô∏è SAST Risk (Low): Decoding with a specific encoding without handling potential decoding errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4280, 7656, 351, 257, 2176, 21004, 1231, 9041, 2785, 39938, 8563]",1.0,2715,sast_risk,468,Decoding with a specific encoding without handling potential decoding errors,Low,2705,    if code.isdigit():,"[220, 220, 220, 611, 2438, 13, 9409, 328, 270, 33529]"
‚úÖ Best Practice: Replacing specific patterns in text to ensure consistent formatting,"[26486, 227, 6705, 19939, 25, 18407, 4092, 2176, 7572, 287, 2420, 284, 4155, 6414, 33313]",1.0,2743,best_practice,469,Replacing specific patterns in text to ensure consistent formatting,,2715,        request = Request(ct.SINA_BALANCESHEET_URL%(code)),"[220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 310, 13, 50, 28893, 62, 33, 1847, 20940, 1546, 13909, 2767, 62, 21886, 4, 7, 8189, 4008]"
‚ö†Ô∏è SAST Risk (Low): Using StringIO without checking the content may lead to issues if the text is malformed,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 10903, 9399, 1231, 10627, 262, 2695, 743, 1085, 284, 2428, 611, 262, 2420, 318, 6428, 12214]",0.5,2771,sast_risk,469,Using StringIO without checking the content may lead to issues if the text is malformed,Low,2743,        request = Request(ct.SINA_BALANCESHEET_URL%(code)),"[220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 310, 13, 50, 28893, 62, 33, 1847, 20940, 1546, 13909, 2767, 62, 21886, 4, 7, 8189, 4008]"
"üß† ML Signal: Returning a DataFrame, which is a common pattern in data processing functions","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 11, 543, 318, 257, 2219, 3912, 287, 1366, 7587, 5499]",1.0,2799,ml_signal,469,"Returning a DataFrame, which is a common pattern in data processing functions",,2771,        request = Request(ct.SINA_BALANCESHEET_URL%(code)),"[220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 310, 13, 50, 28893, 62, 33, 1847, 20940, 1546, 13909, 2767, 62, 21886, 4, 7, 8189, 4008]"

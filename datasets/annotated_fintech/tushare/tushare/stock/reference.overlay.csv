annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"‚úÖ Best Practice: Group imports into standard library, third-party, and local sections","[26486, 227, 6705, 19939, 25, 4912, 17944, 656, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 9004]",0.5,6,best_practice,9,"Group imports into standard library, third-party, and local sections",,0,from __future__ import division,"[6738, 11593, 37443, 834, 1330, 7297]"
"‚úÖ Best Practice: Group imports into standard library, third-party, and local sections","[26486, 227, 6705, 19939, 25, 4912, 17944, 656, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 9004]",0.5,12,best_practice,12,"Group imports into standard library, third-party, and local sections",,6,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
"‚úÖ Best Practice: Group imports into standard library, third-party, and local sections","[26486, 227, 6705, 19939, 25, 4912, 17944, 656, 3210, 5888, 11, 2368, 12, 10608, 11, 290, 1957, 9004]",0.5,23,best_practice,21,"Group imports into standard library, third-party, and local sections",,12,from tushare.util.netbase import Client,"[6738, 256, 1530, 533, 13, 22602, 13, 3262, 8692, 1330, 20985]"
‚úÖ Best Practice: Handle both Python 2 and 3 imports for compatibility,"[26486, 227, 6705, 19939, 25, 33141, 1111, 11361, 362, 290, 513, 17944, 329, 17764]",0.5,36,best_practice,25,Handle both Python 2 and 3 imports for compatibility,,23,"    from urllib2 import urlopen, Request","[220, 220, 220, 422, 2956, 297, 571, 17, 1330, 19016, 9654, 11, 19390]"
‚úÖ Best Practice: Handle both Python 2 and 3 imports for compatibility,"[26486, 227, 6705, 19939, 25, 33141, 1111, 11361, 362, 290, 513, 17944, 329, 17764]",0.5,36,best_practice,27,Handle both Python 2 and 3 imports for compatibility,,36,,[]
‚úÖ Best Practice: Consider using a constant or configuration for the default value 'all',"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 6937, 393, 8398, 329, 262, 4277, 1988, 705, 439, 6]",0.5,51,best_practice,47,Consider using a constant or configuration for the default value 'all',,36,    report_date:ÂÖ¨Â∏ÉÊó•Êúü,"[220, 220, 220, 989, 62, 4475, 25, 17739, 105, 30585, 225, 33768, 98, 17312, 253]"
üß† ML Signal: Usage of a custom function to write headers,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2183, 2163, 284, 3551, 24697]",0.5,85,ml_signal,49,Usage of a custom function to write headers,,51,    shares:ËΩ¨Â¢ûÂíåÈÄÅËÇ°Êï∞ÔºàÊØè10ËÇ°Ôºâ,"[220, 220, 220, 7303, 25, 164, 121, 105, 161, 95, 252, 161, 240, 234, 34460, 223, 164, 224, 94, 46763, 108, 171, 120, 230, 162, 107, 237, 940, 164, 224, 94, 171, 120, 231]"
üß† ML Signal: Custom function call with retry and pause parameters,"[8582, 100, 254, 10373, 26484, 25, 8562, 2163, 869, 351, 1005, 563, 290, 14985, 10007]",0.5,89,ml_signal,51,Custom function call with retry and pause parameters,,85,    ,"[220, 220, 220, 220]"
üß† ML Signal: Appending data to a DataFrame in a loop,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 1366, 284, 257, 6060, 19778, 287, 257, 9052]",0.5,117,ml_signal,54,Appending data to a DataFrame in a loop,,89,"        df, pages = _dist_cotent(year, 0, retry_count, pause)","[220, 220, 220, 220, 220, 220, 220, 47764, 11, 5468, 796, 4808, 17080, 62, 25557, 298, 7, 1941, 11, 657, 11, 1005, 563, 62, 9127, 11, 14985, 8]"
üß† ML Signal: Conditional logic based on the 'top' parameter,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 705, 4852, 6, 11507]",0.5,126,ml_signal,59,Conditional logic based on the 'top' parameter,,117,    elif top <= 25:,"[220, 220, 220, 1288, 361, 1353, 19841, 1679, 25]"
üß† ML Signal: Returning a subset of data using DataFrame.head(),"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 24637, 286, 1366, 1262, 6060, 19778, 13, 2256, 3419]",0.5,140,ml_signal,61,Returning a subset of data using DataFrame.head(),,126,        return df.head(top),"[220, 220, 220, 220, 220, 220, 220, 1441, 47764, 13, 2256, 7, 4852, 8]"
‚úÖ Best Practice: Check type of 'top' before using it in calculations,"[26486, 227, 6705, 19939, 25, 6822, 2099, 286, 705, 4852, 6, 878, 1262, 340, 287, 16765]",0.5,158,best_practice,64,Check type of 'top' before using it in calculations,,140,            ct._write_head(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13557, 13564, 62, 2256, 3419]"
‚úÖ Best Practice: Use integer division for clarity,"[26486, 227, 6705, 19939, 25, 5765, 18253, 7297, 329, 16287]",0.5,180,best_practice,67,Use integer division for clarity,,158,            if int(allPages) < int(pages):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 493, 7, 439, 47798, 8, 1279, 493, 7, 31126, 2599]"
‚ö†Ô∏è SAST Risk (Low): Using print statements for error messages can expose sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 3601, 6299, 329, 4049, 6218, 460, 15651, 8564, 1321]",0.5,189,sast_risk,77,Using print statements for error messages can expose sensitive information,Low,180,def _fun_divi(x):,"[4299, 4808, 12543, 62, 7146, 72, 7, 87, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Use of `re.compile` with user input can lead to ReDoS (Regular Expression Denial of Service) if `x` is not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 4600, 260, 13, 5589, 576, 63, 351, 2836, 5128, 460, 1085, 284, 797, 46498, 357, 40164, 41986, 5601, 498, 286, 4809, 8, 611, 4600, 87, 63, 318, 407, 6105, 5336, 36951, 13]",0.5,240,sast_risk,71,Use of `re.compile` with user input can lead to ReDoS (Regular Expression Denial of Service) if `x` is not properly sanitized.,Medium,189,"                                            pause), ignore_index=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14985, 828, 8856, 62, 9630, 28, 17821, 8]"
‚úÖ Best Practice: Use raw strings for regex patterns to avoid issues with escape sequences.,"[26486, 227, 6705, 19939, 25, 5765, 8246, 13042, 329, 40364, 7572, 284, 3368, 2428, 351, 6654, 16311, 13]",0.5,249,best_practice,73,Use raw strings for regex patterns to avoid issues with escape sequences.,,240,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Pattern matching and extraction from strings.,"[8582, 100, 254, 10373, 26484, 25, 23939, 12336, 290, 22236, 422, 13042, 13]",0.5,272,ml_signal,74,Pattern matching and extraction from strings.,,249,            print(ct.TOP_PARAS_MSG),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 310, 13, 35222, 62, 27082, 1921, 62, 5653, 38, 8]"
‚úÖ Best Practice: Use of ternary operator for concise conditional return.,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 1441, 13]",1.0,281,best_practice,77,Use of ternary operator for concise conditional return.,,272,def _fun_divi(x):,"[4299, 4808, 12543, 62, 7146, 72, 7, 87, 2599]"
‚úÖ Best Practice: Check for type before processing to avoid errors.,"[26486, 227, 6705, 19939, 25, 6822, 329, 2099, 878, 7587, 284, 3368, 8563, 13]",0.5,297,best_practice,80,Check for type before processing to avoid errors.,,281,        res = reg.findall(x),"[220, 220, 220, 220, 220, 220, 220, 581, 796, 842, 13, 19796, 439, 7, 87, 8]"
‚úÖ Best Practice: Use of `unicode` ensures compatibility with non-ASCII characters in Python 2.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4600, 46903, 1098, 63, 19047, 17764, 351, 1729, 12, 42643, 3978, 3435, 287, 11361, 362, 13]",0.5,321,best_practice,81,Use of `unicode` ensures compatibility with non-ASCII characters in Python 2.,,297,        return 0 if len(res)<1 else float(res[0]) ,"[220, 220, 220, 220, 220, 220, 220, 1441, 657, 611, 18896, 7, 411, 8, 27, 16, 2073, 12178, 7, 411, 58, 15, 12962, 220]"
‚ö†Ô∏è SAST Risk (Medium): Use of `re.compile` with user input can lead to ReDoS (Regular Expression Denial of Service) if `x` is not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 4600, 260, 13, 5589, 576, 63, 351, 2836, 5128, 460, 1085, 284, 797, 46498, 357, 40164, 41986, 5601, 498, 286, 4809, 8, 611, 4600, 87, 63, 318, 407, 6105, 5336, 36951, 13]",0.5,345,sast_risk,85,Use of `re.compile` with user input can lead to ReDoS (Regular Expression Denial of Service) if `x` is not properly sanitized.,Medium,321,"            s2 = unicode('ÂÖÉ','utf-8')","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 17, 796, 28000, 1098, 10786, 17739, 225, 41707, 40477, 12, 23, 11537]"
üß† ML Signal: Pattern matching and extraction from strings.,"[8582, 100, 254, 10373, 26484, 25, 23939, 12336, 290, 22236, 422, 13042, 13]",0.5,365,ml_signal,87,Pattern matching and extraction from strings.,,345,            res = reg.findall(x),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 796, 842, 13, 19796, 439, 7, 87, 8]"
‚úÖ Best Practice: Use of ternary operator for concise conditional return.,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 1441, 13]",1.0,374,best_practice,89,Use of ternary operator for concise conditional return.,,365,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Return a default value when input is not as expected.,"[26486, 227, 6705, 19939, 25, 8229, 257, 4277, 1988, 618, 5128, 318, 407, 355, 2938, 13]",0.5,374,best_practice,92,Return a default value when input is not as expected.,,374,,[]
üß† ML Signal: Conditional logic based on Python version,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11361, 2196]",0.5,398,ml_signal,85,Conditional logic based on Python version,,374,"            s2 = unicode('ÂÖÉ','utf-8')","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 17, 796, 28000, 1098, 10786, 17739, 225, 41707, 40477, 12, 23, 11537]"
üß† ML Signal: Regular expression usage pattern,"[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 8748, 3912]",1.0,418,ml_signal,87,Regular expression usage pattern,,398,            res = reg.findall(x),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 796, 842, 13, 19796, 439, 7, 87, 8]"
üß† ML Signal: Regular expression usage pattern,"[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 8748, 3912]",1.0,427,ml_signal,89,Regular expression usage pattern,,418,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Regular expression findall usage,"[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 1064, 439, 8748]",1.0,427,ml_signal,91,Regular expression findall usage,,427,,[]
üß† ML Signal: Regular expression findall usage,"[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 1064, 439, 8748]",1.0,427,ml_signal,92,Regular expression findall usage,,427,,[]
‚úÖ Best Practice: Use of ternary operator for concise conditional assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 16237]",1.0,467,best_practice,95,Use of ternary operator for concise conditional assignment,,427,"            reg1 = re.compile(r'ËΩ¨Â¢û(.*?)ËÇ°', re.UNICODE)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 842, 16, 796, 302, 13, 5589, 576, 7, 81, 6, 164, 121, 105, 161, 95, 252, 7, 15885, 10091, 164, 224, 94, 3256, 302, 13, 4944, 2149, 16820, 8]"
‚úÖ Best Practice: Use of ternary operator for concise conditional assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 16237]",1.0,489,best_practice,97,Use of ternary operator for concise conditional assignment,,467,            res1 = reg1.findall(x),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 16, 796, 842, 16, 13, 19796, 439, 7, 87, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential issue with handling non-unicode strings in Python 2,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 351, 9041, 1729, 12, 46903, 1098, 13042, 287, 11361, 362]",0.5,506,sast_risk,101,Potential issue with handling non-unicode strings in Python 2,Low,489,            return res1 + res2,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 581, 16, 1343, 581, 17]"
üß† ML Signal: Use of unicode function in Python 2,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 28000, 1098, 2163, 287, 11361, 362]",0.5,522,ml_signal,103,Use of unicode function in Python 2,,506,"        if isinstance(x, unicode):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 87, 11, 28000, 1098, 2599]"
üß† ML Signal: Use of unicode function in Python 2,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 28000, 1098, 2163, 287, 11361, 362]",0.5,550,ml_signal,104,Use of unicode function in Python 2,,522,"            s1 = unicode('ËΩ¨Â¢û','utf-8')","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 16, 796, 28000, 1098, 10786, 164, 121, 105, 161, 95, 252, 41707, 40477, 12, 23, 11537]"
üß† ML Signal: Use of unicode function in Python 2,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 28000, 1098, 2163, 287, 11361, 362]",0.5,593,ml_signal,107,Use of unicode function in Python 2,,550,"            reg1 = re.compile(r'%s(.*?)%s'%(s1, s3), re.UNICODE)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 842, 16, 796, 302, 13, 5589, 576, 7, 81, 6, 4, 82, 7, 15885, 10091, 4, 82, 6, 4, 7, 82, 16, 11, 264, 18, 828, 302, 13, 4944, 2149, 16820, 8]"
üß† ML Signal: Regular expression usage pattern,"[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 8748, 3912]",1.0,615,ml_signal,109,Regular expression usage pattern,,593,            res1 = reg1.findall(x),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 16, 796, 842, 16, 13, 19796, 439, 7, 87, 8]"
üß† ML Signal: Regular expression usage pattern,"[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 8748, 3912]",1.0,646,ml_signal,111,Regular expression usage pattern,,615,            res1 = 0 if len(res1)<1 else float(res1[0]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 16, 796, 657, 611, 18896, 7, 411, 16, 8, 27, 16, 2073, 12178, 7, 411, 16, 58, 15, 12962]"
üß† ML Signal: Regular expression findall usage,"[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 1064, 439, 8748]",1.0,663,ml_signal,113,Regular expression findall usage,,646,            return res1 + res2,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 581, 16, 1343, 581, 17]"
üß† ML Signal: Regular expression findall usage,"[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 1064, 439, 8748]",1.0,676,ml_signal,115,Regular expression findall usage,,663,            return 0,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 657]"
‚úÖ Best Practice: Use of ternary operator for concise conditional assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 16237]",1.0,680,best_practice,117,Use of ternary operator for concise conditional assignment,,676,    ,"[220, 220, 220, 220]"
‚úÖ Best Practice: Use of ternary operator for concise conditional assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 16237]",1.0,693,best_practice,119,Use of ternary operator for concise conditional assignment,,680,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
"‚úÖ Best Practice: Function name is misspelled, should be _dist_content","[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 2051, 15803, 11, 815, 307, 4808, 17080, 62, 11299]",1.0,736,best_practice,107,"Function name is misspelled, should be _dist_content",,693,"            reg1 = re.compile(r'%s(.*?)%s'%(s1, s3), re.UNICODE)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 842, 16, 796, 302, 13, 5589, 576, 7, 81, 6, 4, 82, 7, 15885, 10091, 4, 82, 6, 4, 7, 82, 16, 11, 264, 18, 828, 302, 13, 4944, 2149, 16820, 8]"
üß† ML Signal: Loop with retry pattern,"[8582, 100, 254, 10373, 26484, 25, 26304, 351, 1005, 563, 3912]",0.5,758,ml_signal,109,Loop with retry pattern,,736,            res1 = reg1.findall(x),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 16, 796, 842, 16, 13, 19796, 439, 7, 87, 8]"
‚ö†Ô∏è SAST Risk (Low): Use of time.sleep can lead to performance issues in async environments,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 640, 13, 42832, 460, 1085, 284, 2854, 2428, 287, 30351, 12493]",1.0,789,sast_risk,111,Use of time.sleep can lead to performance issues in async environments,Low,758,            res1 = 0 if len(res1)<1 else float(res1[0]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 581, 16, 796, 657, 611, 18896, 7, 411, 16, 8, 27, 16, 2073, 12178, 7, 411, 16, 58, 15, 12962]"
üß† ML Signal: Conditional logging based on page number,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 18931, 1912, 319, 2443, 1271]",0.5,802,ml_signal,115,Conditional logging based on page number,,789,            return 0,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 657]"
‚ö†Ô∏è SAST Risk (Medium): Potential for URL injection if inputs are not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 10289, 16954, 611, 17311, 389, 407, 31031]",1.0,806,sast_risk,117,Potential for URL injection if inputs are not validated,Medium,802,    ,"[220, 220, 220, 220]"
üß† ML Signal: Use of XPath for HTML parsing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 11961, 776, 329, 11532, 32096]",0.5,819,ml_signal,120,Use of XPath for HTML parsing,,806,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
üß† ML Signal: Conditional logic based on Python version,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11361, 2196]",0.5,841,ml_signal,123,Conditional logic based on Python version,,819,                ct._write_console(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13557, 13564, 62, 41947, 3419]"
‚ö†Ô∏è SAST Risk (Low): Potential for HTML injection if sarr is not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11532, 16954, 611, 264, 3258, 318, 407, 5336, 36951]",1.0,881,sast_risk,128,Potential for HTML injection if sarr is not sanitized,Low,841,                sarr = [etree.tostring(node).decode('utf-8') for node in res],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 685, 316, 631, 13, 83, 455, 1806, 7, 17440, 737, 12501, 1098, 10786, 40477, 12, 23, 11537, 329, 10139, 287, 581, 60]"
‚úÖ Best Practice: Explicitly setting DataFrame columns,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6060, 19778, 15180]",0.5,902,best_practice,131,Explicitly setting DataFrame columns,,881,            sarr = ''.join(sarr),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 705, 4458, 22179, 7, 82, 3258, 8]"
üß† ML Signal: Mapping functions to DataFrame columns,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 5499, 284, 6060, 19778, 15180]",0.5,930,ml_signal,133,Mapping functions to DataFrame columns,,902,"            df = df.drop(df.columns[0], axis=1)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 14781, 7, 7568, 13, 28665, 82, 58, 15, 4357, 16488, 28, 16, 8]"
üß† ML Signal: Zero-padding numeric codes,"[8582, 100, 254, 10373, 26484, 25, 12169, 12, 39231, 35575, 12416]",0.5,956,ml_signal,138,Zero-padding numeric codes,,930,            df['code'] = df['code'].astype(object),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 17816, 8189, 20520, 796, 47764, 17816, 8189, 6, 4083, 459, 2981, 7, 15252, 8]"
üß† ML Signal: Conditional logic for pagination,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 329, 42208, 1883]",0.5,992,ml_signal,142,Conditional logic for pagination,,956,"                page = html.xpath('//div[@class=\""mod_pages\""]/a')","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2443, 796, 27711, 13, 87, 6978, 10786, 1003, 7146, 58, 31, 4871, 17553, 4666, 62, 31126, 7879, 60, 14, 64, 11537]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2428]",0.5,1022,sast_risk,144,Catching broad exceptions can hide issues,Low,992,                    asr = page[len(page)-2],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 355, 81, 796, 2443, 58, 11925, 7, 7700, 13219, 17, 60]"
‚úÖ Best Practice: Returning tuple for consistent return type,"[26486, 227, 6705, 19939, 25, 42882, 46545, 329, 6414, 1441, 2099]",0.5,1052,best_practice,144,Returning tuple for consistent return type,,1022,                    asr = page[len(page)-2],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 355, 81, 796, 2443, 58, 11925, 7, 7700, 13219, 17, 60]"
‚ö†Ô∏è SAST Risk (Low): Raising IOError with a generic error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 24418, 12331, 351, 257, 14276, 4049, 3275]",0.5,1077,sast_risk,161,Raising IOError with a generic error message,Low,1052,                code:‰ª£Á†Å    ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2438, 25, 47987, 163, 254, 223, 220, 220, 220, 220]"
‚úÖ Best Practice: Consider using a more descriptive function name for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 517, 35644, 2163, 1438, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,1102,best_practice,161,Consider using a more descriptive function name for better readability and maintainability.,,1077,                code:‰ª£Á†Å    ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2438, 25, 47987, 163, 254, 223, 220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the URL in 'p' is from a trusted source to prevent potential security risks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 10289, 287, 705, 79, 6, 318, 422, 257, 13467, 2723, 284, 2948, 2785, 2324, 7476, 13]",0.5,1132,sast_risk,163,Ensure that the URL in 'p' is from a trusted source to prevent potential security risks.,Low,1102,                year:ÂàÜÈÖçÂπ¥Â∫¶    ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 614, 25, 26344, 228, 165, 227, 235, 33176, 112, 41753, 99, 220, 220, 220, 220]"
üß† ML Signal: Usage of a recursive or iterative function pattern to accumulate data.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 45115, 393, 11629, 876, 2163, 3912, 284, 29915, 1366, 13]",0.5,1160,ml_signal,165,Usage of a recursive or iterative function pattern to accumulate data.,,1132,                incshares:ËΩ¨Â¢ûËÇ°,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 753, 1477, 3565, 25, 164, 121, 105, 161, 95, 252, 164, 224, 94]"
‚úÖ Best Practice: Ensure that the column index exists before attempting to drop it to avoid potential errors.,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 5721, 6376, 7160, 878, 9361, 284, 4268, 340, 284, 3368, 2785, 8563, 13]",0.5,1186,best_practice,167,Ensure that the column index exists before attempting to drop it to avoid potential errors.,,1160,                cash:Ê¥æÁé∞   ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5003, 25, 162, 112, 122, 163, 236, 108, 220, 220, 220]"
‚úÖ Best Practice: Use constants or configuration for column names to avoid hardcoding.,"[26486, 227, 6705, 19939, 25, 5765, 38491, 393, 8398, 329, 5721, 3891, 284, 3368, 1327, 66, 7656, 13]",0.5,1221,best_practice,169,Use constants or configuration for column names to avoid hardcoding.,,1186,                regdate:ËÇ°ÊùÉÁôªËÆ∞Êó•    ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 842, 4475, 25, 164, 224, 94, 30266, 225, 163, 247, 119, 164, 106, 108, 33768, 98, 220, 220, 220, 220]"
üß† ML Signal: Usage of lambda functions for data transformation.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 5499, 329, 1366, 13389, 13]",0.5,1261,ml_signal,171,Usage of lambda functions for data transformation.,,1221,"                eventproc:‰∫ã‰ª∂ËøõÁ®ã ,È¢ÑÊ°àÊàñÂÆûÊñΩ","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1785, 36942, 25, 12859, 233, 20015, 114, 32573, 249, 163, 101, 233, 837, 165, 95, 226, 162, 94, 230, 22755, 244, 22522, 252, 23877, 121]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe URL construction without validation or sanitization,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 10289, 5103, 1231, 21201, 393, 5336, 270, 1634]",0.5,1296,sast_risk,168,Potentially unsafe URL construction without validation or sanitization,Medium,1261,                plandate:È¢ÑÊ°àÂÖ¨Â∏ÉÊó•    ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 458, 392, 378, 25, 165, 95, 226, 162, 94, 230, 17739, 105, 30585, 225, 33768, 98, 220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Low): Potential compatibility issue with different Python versions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 17764, 2071, 351, 1180, 11361, 6300]",0.5,1331,sast_risk,170,Potential compatibility issue with different Python versions,Low,1296,                exdate:Èô§ÊùÉÈô§ÊÅØÊó•    ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 409, 4475, 25, 165, 247, 97, 30266, 225, 165, 247, 97, 162, 223, 107, 33768, 98, 220, 220, 220, 220]"
‚úÖ Best Practice: Use list comprehension for more concise and readable code,"[26486, 227, 6705, 19939, 25, 5765, 1351, 35915, 329, 517, 35327, 290, 31744, 2438]",0.5,1358,best_practice,172,Use list comprehension for more concise and readable code,,1331,                anndate:ÂÖ¨ÂëäÊó•Êúü,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 281, 358, 378, 25, 17739, 105, 37772, 232, 33768, 98, 17312, 253]"
‚úÖ Best Practice: Use list comprehension for more concise and readable code,"[26486, 227, 6705, 19939, 25, 5765, 1351, 35915, 329, 517, 35327, 290, 31744, 2438]",0.5,1374,best_practice,173,Use list comprehension for more concise and readable code,,1358,                ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220]"
üß† ML Signal: Pattern of replacing specific substrings in HTML content,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 13586, 2176, 850, 37336, 287, 11532, 2695]",0.5,1435,ml_signal,176,Pattern of replacing specific substrings in HTML content,,1374,        p = 'cfidata.aspx?sortfd=&sortway=&curpage=1&fr=content&ndk=A0A1934A1939A1957A1966A1983&xztj=&mystock=',"[220, 220, 220, 220, 220, 220, 220, 279, 796, 705, 12993, 312, 1045, 13, 31740, 30, 30619, 16344, 28, 5, 30619, 1014, 28, 5, 22019, 7700, 28, 16, 5, 8310, 28, 11299, 5, 358, 74, 28, 32, 15, 32, 1129, 2682, 32, 1129, 2670, 32, 1129, 3553, 32, 44227, 32, 29279, 5, 87, 89, 83, 73, 28, 5, 1820, 13578, 11639]"
‚ö†Ô∏è SAST Risk (Low): Potentially unsafe HTML content parsing without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 21596, 11532, 2695, 32096, 1231, 21201]",0.5,1454,sast_risk,178,Potentially unsafe HTML content parsing without validation,Low,1435,"        df = df.drop([3], axis=1)","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 14781, 26933, 18, 4357, 16488, 28, 16, 8]"
üß† ML Signal: Pattern of appending data to a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 598, 1571, 1366, 284, 257, 6060, 19778]",0.5,1485,ml_signal,180,Pattern of appending data to a DataFrame,,1454,        df['code'] = df['code'].map(lambda x: str(x).zfill(6)),"[220, 220, 220, 220, 220, 220, 220, 47764, 17816, 8189, 20520, 796, 47764, 17816, 8189, 6, 4083, 8899, 7, 50033, 2124, 25, 965, 7, 87, 737, 89, 20797, 7, 21, 4008]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe XPath expression without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 11961, 776, 5408, 1231, 21201]",0.5,1485,sast_risk,182,Potentially unsafe XPath expression without validation,Medium,1485,,[]
üß† ML Signal: Recursive function pattern,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 3912]",1.0,1502,ml_signal,184,Recursive function pattern,,1485,"def _profit_divis(pageNo, dataArr, nextPage):","[4299, 4808, 9183, 62, 7146, 271, 7, 7700, 2949, 11, 1366, 3163, 81, 11, 1306, 9876, 2599]"
üß† ML Signal: Recursive function pattern,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 3912]",1.0,1544,ml_signal,186,Recursive function pattern,,1502,"        html = lxml.html.parse('%sdata.cfi.cn/%s'%(ct.P_TYPE['http'], nextPage))","[220, 220, 220, 220, 220, 220, 220, 27711, 796, 300, 19875, 13, 6494, 13, 29572, 10786, 4, 82, 7890, 13, 66, 12463, 13, 31522, 14, 4, 82, 6, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 1306, 9876, 4008]"
"‚ö†Ô∏è SAST Risk (Low): No validation on the return value of _check_input, assuming it returns a boolean","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 21201, 319, 262, 1441, 1988, 286, 4808, 9122, 62, 15414, 11, 13148, 340, 5860, 257, 25131]",0.5,1553,sast_risk,205,"No validation on the return value of _check_input, assuming it returns a boolean",Low,1544,"def forecast_data(year, quarter):","[4299, 11092, 62, 7890, 7, 1941, 11, 3860, 2599]"
‚úÖ Best Practice: Consider logging or handling the case where _check_input returns False,"[26486, 227, 6705, 19939, 25, 12642, 18931, 393, 9041, 262, 1339, 810, 4808, 9122, 62, 15414, 5860, 10352]",0.5,1580,best_practice,207,Consider logging or handling the case where _check_input returns False,,1553,        Ëé∑Âèñ‰∏öÁª©È¢ÑÂëäÊï∞ÊçÆ,"[220, 220, 220, 220, 220, 220, 220, 5525, 236, 115, 20998, 244, 10310, 248, 163, 119, 102, 165, 95, 226, 37772, 232, 46763, 108, 162, 235, 106]"
üß† ML Signal: Usage of a recursive function to fetch data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 45115, 2163, 284, 21207, 1366]",0.5,1584,ml_signal,209,Usage of a recursive function to fetch data,,1580,    --------,"[220, 220, 220, 24200]"
‚úÖ Best Practice: Ensure that the data variable is not None before creating a DataFrame,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 1366, 7885, 318, 407, 6045, 878, 4441, 257, 6060, 19778]",0.5,1624,best_practice,211,Ensure that the data variable is not None before creating a DataFrame,,1584,    quarter:int Â≠£Â∫¶ :1„ÄÅ2„ÄÅ3„ÄÅ4ÔºåÂè™ËÉΩËæìÂÖ•Ëøô4‰∏™Â≠£Â∫¶,"[220, 220, 220, 3860, 25, 600, 10263, 255, 96, 41753, 99, 1058, 16, 23513, 17, 23513, 18, 23513, 19, 171, 120, 234, 20998, 103, 47797, 121, 164, 122, 241, 17739, 98, 32573, 247, 19, 10310, 103, 27764, 96, 41753, 99]"
üß† ML Signal: Mapping function used to format data,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 2163, 973, 284, 5794, 1366]",0.5,1631,ml_signal,213,Mapping function used to format data,,1624,       ,"[220, 220, 220, 220, 220, 220, 220]"
‚úÖ Best Practice: Consider handling potential exceptions when mapping and filling codes,"[26486, 227, 6705, 19939, 25, 12642, 9041, 2785, 13269, 618, 16855, 290, 12591, 12416]",0.5,1635,best_practice,215,Consider handling potential exceptions when mapping and filling codes,,1631,    --------,"[220, 220, 220, 24200]"
‚úÖ Best Practice: Consider using a logger instead of writing directly to the console for better control over logging levels and outputs.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 49706, 2427, 286, 3597, 3264, 284, 262, 8624, 329, 1365, 1630, 625, 18931, 2974, 290, 23862, 13]",0.5,1722,best_practice,212,Consider using a logger instead of writing directly to the console for better control over logging levels and outputs.,,1635,       ËØ¥ÊòéÔºöÁî±‰∫éÊòØ‰ªéÁΩëÁ´ôËé∑ÂèñÁöÑÊï∞ÊçÆÔºåÈúÄË¶Å‰∏ÄÈ°µÈ°µÊäìÂèñÔºåÈÄüÂ∫¶ÂèñÂÜ≥‰∫éÊÇ®ÂΩìÂâçÁΩëÁªúÈÄüÂ∫¶,"[220, 220, 220, 220, 220, 220, 5525, 107, 112, 23626, 236, 171, 120, 248, 18796, 109, 12859, 236, 42468, 20015, 236, 163, 121, 239, 44165, 247, 164, 236, 115, 20998, 244, 21410, 46763, 108, 162, 235, 106, 171, 120, 234, 165, 250, 222, 17358, 223, 31660, 165, 94, 113, 165, 94, 113, 162, 232, 241, 20998, 244, 171, 120, 234, 34460, 253, 41753, 99, 20998, 244, 37863, 111, 12859, 236, 162, 224, 101, 37605, 241, 30298, 235, 163, 121, 239, 163, 119, 250, 34460, 253, 41753, 99]"
‚úÖ Best Practice: Specify the encoding explicitly to avoid potential issues with different default encodings.,"[26486, 227, 6705, 19939, 25, 18291, 1958, 262, 21004, 11777, 284, 3368, 2785, 2428, 351, 1180, 4277, 2207, 375, 654, 13]",0.5,1726,best_practice,215,Specify the encoding explicitly to avoid potential issues with different default encodings.,,1722,    --------,"[220, 220, 220, 24200]"
‚ö†Ô∏è SAST Risk (Medium): Parsing HTML from a URL without validation can lead to security risks like injection attacks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 23042, 278, 11532, 422, 257, 10289, 1231, 21201, 460, 1085, 284, 2324, 7476, 588, 16954, 3434, 13]",0.5,1730,sast_risk,215,Parsing HTML from a URL without validation can lead to security risks like injection attacks.,Medium,1726,    --------,"[220, 220, 220, 24200]"
"üß† ML Signal: Usage of XPath to extract data from HTML, indicating web scraping behavior.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 11961, 776, 284, 7925, 1366, 422, 11532, 11, 12739, 3992, 46743, 4069, 13]",0.5,1759,ml_signal,221,"Usage of XPath to extract data from HTML, indicating web scraping behavior.",,1730,"        pre_eps,‰∏äÂπ¥ÂêåÊúüÊØèËÇ°Êî∂Áõä","[220, 220, 220, 220, 220, 220, 220, 662, 62, 25386, 11, 41468, 33176, 112, 28938, 234, 17312, 253, 162, 107, 237, 164, 224, 94, 162, 242, 114, 33566, 232]"
‚úÖ Best Practice: Use list comprehensions for more concise and readable code.,"[26486, 227, 6705, 19939, 25, 5765, 1351, 8569, 507, 329, 517, 35327, 290, 31744, 2438, 13]",0.5,1777,best_practice,225,Use list comprehensions for more concise and readable code.,,1759,"    if ct._check_input(year, quarter) is True:","[220, 220, 220, 611, 269, 83, 13557, 9122, 62, 15414, 7, 1941, 11, 3860, 8, 318, 6407, 25]"
‚úÖ Best Practice: Consider using a more descriptive variable name than 'sarr' for clarity.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 517, 35644, 7885, 1438, 621, 705, 82, 3258, 6, 329, 16287, 13]",0.5,1786,best_practice,230,Consider using a more descriptive variable name than 'sarr' for clarity.,,1777,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
‚ö†Ô∏è SAST Risk (Low): Using read_html on potentially untrusted HTML content can lead to security issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 1100, 62, 6494, 319, 6196, 1418, 81, 8459, 11532, 2695, 460, 1085, 284, 2324, 2428, 13]",0.5,1806,sast_risk,233,Using read_html on potentially untrusted HTML content can lead to security issues.,Low,1786,"def _get_forecast_data(year, quarter, pageNo, dataArr):","[4299, 4808, 1136, 62, 754, 2701, 62, 7890, 7, 1941, 11, 3860, 11, 2443, 2949, 11, 1366, 3163, 81, 2599]"
‚úÖ Best Practice: Dropping columns by index can be error-prone; consider using column names instead.,"[26486, 227, 6705, 19939, 25, 21045, 2105, 15180, 416, 6376, 460, 307, 4049, 12, 46330, 26, 2074, 1262, 5721, 3891, 2427, 13]",0.5,1816,best_practice,234,Dropping columns by index can be error-prone; consider using column names instead.,,1806,    ct._write_console(),"[220, 220, 220, 269, 83, 13557, 13564, 62, 41947, 3419]"
"üß† ML Signal: Appending data to a DataFrame, indicating data aggregation behavior.","[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 1366, 284, 257, 6060, 19778, 11, 12739, 1366, 46500, 4069, 13]",0.5,1879,ml_signal,238,"Appending data to a DataFrame, indicating data aggregation behavior.",,1816,"                                                ct.PAGES['fd'], year, quarter, pageNo,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4537, 48075, 17816, 16344, 6, 4357, 614, 11, 3860, 11, 2443, 2949, 11]"
"üß† ML Signal: Recursive function call pattern, indicating iterative data fetching.","[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 3912, 11, 12739, 11629, 876, 1366, 21207, 278, 13]",0.5,1936,ml_signal,239,"Recursive function call pattern, indicating iterative data fetching.",,1879,"                                                ct.PAGE_NUM[1]),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4537, 8264, 62, 41359, 58, 16, 46570]"
‚úÖ Best Practice: Consider logging exceptions instead of printing them for better error tracking and analysis.,"[26486, 227, 6705, 19939, 25, 12642, 18931, 13269, 2427, 286, 13570, 606, 329, 1365, 4049, 9646, 290, 3781, 13]",0.5,1964,best_practice,241,Consider logging exceptions instead of printing them for better error tracking and analysis.,,1936,"        res = html.xpath(""//table[@class=\""list_table\""]/tr"")","[220, 220, 220, 220, 220, 220, 220, 581, 796, 27711, 13, 87, 6978, 7203, 1003, 11487, 58, 31, 4871, 17553, 4868, 62, 11487, 7879, 60, 14, 2213, 4943]"
‚úÖ Best Practice: Consider using type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,2021,best_practice,239,Consider using type hints for function parameters and return type for better readability and maintainability.,,1964,"                                                ct.PAGE_NUM[1]),","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4537, 8264, 62, 41359, 58, 16, 46570]"
‚úÖ Best Practice: Use a more descriptive variable name instead of 'du' for better readability.,"[26486, 227, 6705, 19939, 25, 5765, 257, 517, 35644, 7885, 1438, 2427, 286, 705, 646, 6, 329, 1365, 1100, 1799, 13]",0.5,2025,best_practice,261,Use a more descriptive variable name instead of 'du' for better readability.,,2021,    ,"[220, 220, 220, 220]"
‚úÖ Best Practice: Use a more descriptive variable name instead of 'du' for better readability.,"[26486, 227, 6705, 19939, 25, 5765, 257, 517, 35644, 7885, 1438, 2427, 286, 705, 646, 6, 329, 1365, 1100, 1799, 13]",0.5,2040,best_practice,263,Use a more descriptive variable name instead of 'du' for better readability.,,2025,"def xsg_data(year=None, month=None, ","[4299, 2124, 45213, 62, 7890, 7, 1941, 28, 14202, 11, 1227, 28, 14202, 11, 220]"
‚ö†Ô∏è SAST Risk (Low): Using time.sleep can lead to performance issues in production environments.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 640, 13, 42832, 460, 1085, 284, 2854, 2428, 287, 3227, 12493, 13]",0.5,2044,sast_risk,265,Using time.sleep can lead to performance issues in production environments.,Low,2040,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use f-strings for better readability and performance.,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 37336, 329, 1365, 1100, 1799, 290, 2854, 13]",0.5,2048,best_practice,268,Use f-strings for better readability and performance.,,2044,    --------,"[220, 220, 220, 24200]"
‚ö†Ô∏è SAST Risk (Medium): No validation or sanitization of the URL before making the request.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 393, 5336, 270, 1634, 286, 262, 10289, 878, 1642, 262, 2581, 13]",1.0,2098,sast_risk,272,No validation or sanitization of the URL before making the request.,Medium,2048,                 Â¶ÇÈÅáÁΩëÁªúÁ≠âÈóÆÈ¢òÈáçÂ§çÊâßË°åÁöÑÊ¨°Êï∞ ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10263, 99, 224, 34402, 229, 163, 121, 239, 163, 119, 250, 163, 255, 231, 29785, 106, 165, 95, 246, 34932, 235, 13783, 235, 33699, 100, 26193, 234, 21410, 162, 105, 94, 46763, 108, 220]"
‚úÖ Best Practice: Use 'if' condition to check Python version in a more explicit way.,"[26486, 227, 6705, 19939, 25, 5765, 705, 361, 6, 4006, 284, 2198, 11361, 2196, 287, 257, 517, 7952, 835, 13]",0.5,2183,best_practice,274,Use 'if' condition to check Python version in a more explicit way.,,2098,                ÈáçÂ§çËØ∑Ê±ÇÊï∞ÊçÆËøáÁ®ã‰∏≠ÊöÇÂÅúÁöÑÁßíÊï∞ÔºåÈò≤Ê≠¢ËØ∑Ê±ÇÈó¥ÈöîÊó∂Èó¥Â§™Áü≠Âá∫Áé∞ÁöÑÈóÆÈ¢ò,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16268, 229, 235, 13783, 235, 46237, 115, 162, 109, 224, 46763, 108, 162, 235, 106, 32573, 229, 163, 101, 233, 40792, 162, 248, 224, 161, 223, 250, 21410, 163, 100, 240, 46763, 108, 171, 120, 234, 165, 246, 110, 29826, 95, 46237, 115, 162, 109, 224, 29785, 112, 49694, 242, 33768, 114, 29785, 112, 13783, 103, 163, 253, 255, 49035, 118, 163, 236, 108, 21410, 29785, 106, 165, 95, 246]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide other issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 584, 2428, 13]",0.5,2187,sast_risk,277,Catching broad exceptions can hide other issues.,Low,2183,    ------,"[220, 220, 220, 40103]"
‚úÖ Best Practice: Avoid using 'list' as a variable name as it shadows the built-in list type.,"[26486, 227, 6705, 19939, 25, 24390, 1262, 705, 4868, 6, 355, 257, 7885, 1438, 355, 340, 16187, 262, 3170, 12, 259, 1351, 2099, 13]",0.5,2202,best_practice,281,Avoid using 'list' as a variable name as it shadows the built-in list type.,,2187,    date:Ëß£Á¶ÅÊó•Êúü,"[220, 220, 220, 3128, 25, 164, 100, 96, 163, 99, 223, 33768, 98, 17312, 253]"
‚úÖ Best Practice: Use more descriptive column indices or names for better readability.,"[26486, 227, 6705, 19939, 25, 5765, 517, 35644, 5721, 36525, 393, 3891, 329, 1365, 1100, 1799, 13]",0.5,2219,best_practice,286,Use more descriptive column indices or names for better readability.,,2202,    month = du.get_month() if month is None else month,"[220, 220, 220, 1227, 796, 7043, 13, 1136, 62, 8424, 3419, 611, 1227, 318, 6045, 2073, 1227]"
‚ö†Ô∏è SAST Risk (Low): Potential for ValueError if conversion fails.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 11052, 12331, 611, 11315, 10143, 13]",1.0,2228,sast_risk,289,Potential for ValueError if conversion fails.,Low,2219,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚úÖ Best Practice: Ensure that rv.XSG_COLS matches the expected DataFrame structure.,"[26486, 227, 6705, 19939, 25, 48987, 326, 374, 85, 13, 55, 38475, 62, 25154, 50, 7466, 262, 2938, 6060, 19778, 4645, 13]",0.5,2237,best_practice,289,Ensure that rv.XSG_COLS matches the expected DataFrame structure.,,2228,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚ö†Ô∏è SAST Risk (Medium): Raising a generic IOError without specific context can be misleading.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7567, 1710, 257, 14276, 24418, 12331, 1231, 2176, 4732, 460, 307, 15850, 13]",1.0,2246,sast_risk,289,Raising a generic IOError without specific context can be misleading.,Medium,2237,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'quarter' is not a valid key in rv.QUARTS_DIC,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 24385, 6, 318, 407, 257, 4938, 1994, 287, 374, 85, 13, 10917, 1503, 4694, 62, 35, 2149]",1.0,2246,sast_risk,312,Potential KeyError if 'quarter' is not a valid key in rv.QUARTS_DIC,Low,2246,,[]
‚ö†Ô∏è SAST Risk (Low): Possible TypeError if 'year' is not an integer,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33671, 5994, 12331, 611, 705, 1941, 6, 318, 407, 281, 18253]",0.5,2276,sast_risk,315,Possible TypeError if 'year' is not an integer,Low,2246,"                  retry_count=3, pause=0.001):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 28, 18, 11, 14985, 28, 15, 13, 8298, 2599]"
‚ö†Ô∏è SAST Risk (Low): Possible TypeError if 'year' is not an integer,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33671, 5994, 12331, 611, 705, 1941, 6, 318, 407, 281, 18253]",0.5,2280,sast_risk,319,Possible TypeError if 'year' is not an integer,Low,2276,    --------,"[220, 220, 220, 24200]"
‚úÖ Best Practice: Ensure that the function ct._write_head() is defined and imported correctly,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 2163, 269, 83, 13557, 13564, 62, 2256, 3419, 318, 5447, 290, 17392, 9380]",0.5,2329,best_practice,321,Ensure that the function ct._write_head() is defined and imported correctly,,2280,    quarter:Â≠£Â∫¶ÔºàÂè™ËÉΩËæìÂÖ•1Ôºå2Ôºå3Ôºå4Ëøô‰∏™Âõõ‰∏™Êï∞Â≠óÔºâ,"[220, 220, 220, 3860, 25, 27764, 96, 41753, 99, 171, 120, 230, 20998, 103, 47797, 121, 164, 122, 241, 17739, 98, 16, 171, 120, 234, 17, 171, 120, 234, 18, 171, 120, 234, 19, 32573, 247, 10310, 103, 32368, 249, 10310, 103, 46763, 108, 27764, 245, 171, 120, 231]"
üß† ML Signal: Usage of retry_count and pause parameters for network requests,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1005, 563, 62, 9127, 290, 14985, 10007, 329, 3127, 7007]",1.0,2379,ml_signal,323,Usage of retry_count and pause parameters for network requests,,2329,                 Â¶ÇÈÅáÁΩëÁªúÁ≠âÈóÆÈ¢òÈáçÂ§çÊâßË°åÁöÑÊ¨°Êï∞ ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10263, 99, 224, 34402, 229, 163, 121, 239, 163, 119, 250, 163, 255, 231, 29785, 106, 165, 95, 246, 34932, 235, 13783, 235, 33699, 100, 26193, 234, 21410, 162, 105, 94, 46763, 108, 220]"
üß† ML Signal: Appending data to a DataFrame in a loop,"[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 1366, 284, 257, 6060, 19778, 287, 257, 9052]",0.5,2383,ml_signal,326,Appending data to a DataFrame in a loop,,2379,    ,"[220, 220, 220, 220]"
‚úÖ Best Practice: Function name is misspelled; should be _holding_content,"[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 2051, 15803, 26, 815, 307, 4808, 19216, 62, 11299]",1.0,2397,best_practice,324,Function name is misspelled; should be _holding_content,,2383,"    pause : int, ÈªòËÆ§ 0","[220, 220, 220, 14985, 1058, 493, 11, 16268, 119, 246, 164, 106, 97, 657]"
üß† ML Signal: Retry pattern with a fixed number of attempts,"[8582, 100, 254, 10373, 26484, 25, 4990, 563, 3912, 351, 257, 5969, 1271, 286, 6370]",0.5,2401,ml_signal,326,Retry pattern with a fixed number of attempts,,2397,    ,"[220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Low): Use of time.sleep can lead to inefficient waiting,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 640, 13, 42832, 460, 1085, 284, 30904, 4953]",0.5,2405,sast_risk,328,Use of time.sleep can lead to inefficient waiting,Low,2401,    ------,"[220, 220, 220, 40103]"
‚úÖ Best Practice: Improper indentation,"[26486, 227, 6705, 19939, 25, 12205, 525, 33793, 341]",1.0,2420,best_practice,330,Improper indentation,,2405,    code:ËÇ°Á•®‰ª£Á†Å,"[220, 220, 220, 2438, 25, 164, 224, 94, 163, 98, 101, 47987, 163, 254, 223]"
‚ö†Ô∏è SAST Risk (Low): Potentially unsafe console output,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 21596, 8624, 5072]",0.5,2435,sast_risk,333,Potentially unsafe console output,Low,2420,    nums:Âü∫ÈáëÂÆ∂Êï∞,"[220, 220, 220, 997, 82, 25, 161, 253, 118, 34932, 239, 22522, 35050, 243, 108]"
‚ö†Ô∏è SAST Risk (Medium): URL construction without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 1231, 21201]",1.0,2464,sast_risk,335,URL construction without validation,Medium,2435,    count:Âü∫ÈáëÊåÅËÇ°Êï∞Ôºà‰∏áËÇ°Ôºâ,"[220, 220, 220, 954, 25, 161, 253, 118, 34932, 239, 162, 234, 223, 164, 224, 94, 46763, 108, 171, 120, 230, 10310, 229, 164, 224, 94, 171, 120, 231]"
‚ö†Ô∏è SAST Risk (Medium): No exception handling for network operations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 3127, 4560]",0.5,2468,sast_risk,339,No exception handling for network operations,Medium,2464,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Compatibility handling for Python 3,"[26486, 227, 6705, 19939, 25, 46021, 9041, 329, 11361, 513]",0.5,2476,best_practice,341,Compatibility handling for Python 3,,2468,    if quarter == 1:,"[220, 220, 220, 611, 3860, 6624, 352, 25]"
‚úÖ Best Practice: Replacing '--' with '0' might not be universally correct,"[26486, 227, 6705, 19939, 25, 18407, 4092, 705, 438, 6, 351, 705, 15, 6, 1244, 407, 307, 26208, 3376]",1.0,2488,best_practice,343,Replacing '--' with '0' might not be universally correct,,2476,        end = end%year,"[220, 220, 220, 220, 220, 220, 220, 886, 796, 886, 4, 1941]"
‚ö†Ô∏è SAST Risk (Medium): No validation of JSON structure,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 286, 19449, 4645]",0.5,2506,sast_risk,345,No validation of JSON structure,Medium,2488,"        start, end = start%year, end%year","[220, 220, 220, 220, 220, 220, 220, 923, 11, 886, 796, 923, 4, 1941, 11, 886, 4, 1941]"
üß† ML Signal: Data transformation and cleaning pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 13389, 290, 12724, 3912]",1.0,2519,ml_signal,348,Data transformation and cleaning pattern,,2506,"    for idx in range(1, pages):","[220, 220, 220, 329, 4686, 87, 287, 2837, 7, 16, 11, 5468, 2599]"
‚úÖ Best Practice: Dropping columns without checking if they exist,"[26486, 227, 6705, 19939, 25, 21045, 2105, 15180, 1231, 10627, 611, 484, 2152]",0.5,2542,best_practice,350,Dropping columns without checking if they exist,,2519,                  ignore_index=True),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8856, 62, 9630, 28, 17821, 8]"
üß† ML Signal: Data type conversion pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 2099, 11315, 3912]",1.0,2542,ml_signal,352,Data type conversion pattern,,2542,,[]
üß† ML Signal: Data scaling pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 20796, 3912]",0.5,2555,ml_signal,355,Data scaling pattern,,2542,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
üß† ML Signal: Data formatting pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 33313, 3912]",1.0,2597,ml_signal,361,Data formatting pattern,,2555,"                     ct.PAGES['163fh'], ct.PAGES['163fh'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4537, 48075, 17816, 24136, 69, 71, 6, 4357, 269, 83, 13, 4537, 48075, 17816, 24136, 69, 71, 6, 4357]"
‚úÖ Best Practice: Renaming columns without checking if they exist,"[26486, 227, 6705, 19939, 25, 7152, 3723, 15180, 1231, 10627, 611, 484, 2152]",0.5,2621,best_practice,363,Renaming columns without checking if they exist,,2597,"            lines = urlopen(request, timeout = 10).read()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3951, 796, 19016, 9654, 7, 25927, 11, 26827, 796, 838, 737, 961, 3419]"
‚úÖ Best Practice: Selecting columns without checking if they exist,"[26486, 227, 6705, 19939, 25, 9683, 278, 15180, 1231, 10627, 611, 484, 2152]",0.5,2645,best_practice,363,Selecting columns without checking if they exist,,2621,"            lines = urlopen(request, timeout = 10).read()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3951, 796, 19016, 9654, 7, 25927, 11, 26827, 796, 838, 737, 961, 3419]"
‚ö†Ô∏è SAST Risk (Low): Generic exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041]",0.5,2669,sast_risk,363,Generic exception handling,Low,2645,"            lines = urlopen(request, timeout = 10).read()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3951, 796, 19016, 9654, 7, 25927, 11, 26827, 796, 838, 737, 961, 3419]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic IOError,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 24418, 12331]",1.0,2686,sast_risk,387,Raising a generic IOError,Low,2669,            if pageNo == 0:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2443, 2949, 6624, 657, 25]"
‚úÖ Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,2718,best_practice,362,Consider adding type hints for function parameters and return type for better readability and maintainability.,,2686,"                     pageNo, start, end, _random(5)))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2443, 2949, 11, 923, 11, 886, 11, 4808, 25120, 7, 20, 22305]"
‚ö†Ô∏è SAST Risk (Low): Ensure that 'pd' and 'ct' are properly imported and validated to avoid potential NameError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 705, 30094, 6, 290, 705, 310, 6, 389, 6105, 17392, 290, 31031, 284, 3368, 2785, 6530, 12331, 13]",0.5,2744,sast_risk,388,Ensure that 'pd' and 'ct' are properly imported and validated to avoid potential NameError.,Low,2718,"                return df, int(lines['pagecount'])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 47764, 11, 493, 7, 6615, 17816, 7700, 9127, 6, 12962]"
‚ö†Ô∏è SAST Risk (Low): Ensure that 'ct' is properly imported and validated to avoid potential NameError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 705, 310, 6, 318, 6105, 17392, 290, 31031, 284, 3368, 2785, 6530, 12331, 13]",0.5,2757,sast_risk,389,Ensure that 'ct' is properly imported and validated to avoid potential NameError.,Low,2744,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Ensure that '_newstocks' is properly imported and validated to avoid potential NameError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 705, 62, 3605, 29522, 6, 318, 6105, 17392, 290, 31031, 284, 3368, 2785, 6530, 12331, 13]",0.5,2761,sast_risk,392,Ensure that '_newstocks' is properly imported and validated to avoid potential NameError.,Low,2757,    ,"[220, 220, 220, 220]"
"üß† ML Signal: The function returns a DataFrame, which is a common pattern in data processing tasks.","[8582, 100, 254, 10373, 26484, 25, 383, 2163, 5860, 257, 6060, 19778, 11, 543, 318, 257, 2219, 3912, 287, 1366, 7587, 8861, 13]",0.5,2765,ml_signal,395,"The function returns a DataFrame, which is a common pattern in data processing tasks.",,2761,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Retry pattern with a fixed number of attempts,"[8582, 100, 254, 10373, 26484, 25, 4990, 563, 3912, 351, 257, 5969, 1271, 286, 6370]",1.0,2765,ml_signal,393,Retry pattern with a fixed number of attempts,,2765,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for excessive sleep causing delays,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 13181, 3993, 6666, 16119]",1.0,2769,sast_risk,395,Potential for excessive sleep causing delays,Low,2765,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Logging or console output for debugging,"[26486, 227, 6705, 19939, 25, 5972, 2667, 393, 8624, 5072, 329, 28769]",0.5,2773,best_practice,397,Logging or console output for debugging,,2769,    Parameters,"[220, 220, 220, 40117]"
‚ö†Ô∏è SAST Risk (Medium): URL construction without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 1231, 21201]",1.0,2823,sast_risk,400,URL construction without validation,Medium,2773,                 Â¶ÇÈÅáÁΩëÁªúÁ≠âÈóÆÈ¢òÈáçÂ§çÊâßË°åÁöÑÊ¨°Êï∞ ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10263, 99, 224, 34402, 229, 163, 121, 239, 163, 119, 250, 163, 255, 231, 29785, 106, 165, 95, 246, 34932, 235, 13783, 235, 33699, 100, 26193, 234, 21410, 162, 105, 94, 46763, 108, 220]"
‚úÖ Best Practice: Use of list comprehension for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 35915, 329, 1100, 1799]",1.0,2838,best_practice,407,Use of list comprehension for readability,,2823,    code:ËÇ°Á•®‰ª£Á†Å,"[220, 220, 220, 2438, 25, 164, 224, 94, 163, 98, 101, 47987, 163, 254, 223]"
‚úÖ Best Practice: Avoid hardcoding HTML tags,"[26486, 227, 6705, 19939, 25, 24390, 1327, 66, 7656, 11532, 15940]",0.5,2858,best_practice,412,Avoid hardcoding HTML tags,,2838,    amount:ÂèëË°åÊï∞Èáè(‰∏áËÇ°),"[220, 220, 220, 2033, 25, 20998, 239, 26193, 234, 46763, 108, 34932, 237, 7, 10310, 229, 164, 224, 94, 8]"
‚ö†Ô∏è SAST Risk (Medium): Potential for HTML injection in pd.read_html,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 11532, 16954, 287, 279, 67, 13, 961, 62, 6494]",0.5,2874,sast_risk,415,Potential for HTML injection in pd.read_html,Medium,2858,    pe:ÂèëË°åÂ∏ÇÁõàÁéá,"[220, 220, 220, 613, 25, 20998, 239, 26193, 234, 30585, 224, 33566, 230, 163, 236, 229]"
‚úÖ Best Practice: Explicitly specify axis for drop operation,"[26486, 227, 6705, 19939, 25, 11884, 306, 11986, 16488, 329, 4268, 4905]",0.5,2896,best_practice,417,Explicitly specify axis for drop operation,,2874,    fundsÔºöÂãüÈõÜËµÑÈáë(‰∫øÂÖÉ),"[220, 220, 220, 5153, 171, 120, 248, 47947, 253, 37239, 228, 164, 113, 226, 34932, 239, 7, 12859, 123, 17739, 225, 8]"
‚úÖ Best Practice: Use of lambda for concise mapping,"[26486, 227, 6705, 19939, 25, 5765, 286, 37456, 329, 35327, 16855]",1.0,2907,best_practice,420,Use of lambda for concise mapping,,2896,    data = pd.DataFrame(),"[220, 220, 220, 1366, 796, 279, 67, 13, 6601, 19778, 3419]"
‚úÖ Best Practice: Use of ternary operator for concise conditional,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340]",0.5,2907,best_practice,425,Use of ternary operator for concise conditional,,2907,,[]
‚ö†Ô∏è SAST Risk (Low): Potential for large memory usage with data.append,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1588, 4088, 8748, 351, 1366, 13, 33295]",0.5,2907,sast_risk,426,Potential for large memory usage with data.append,Low,2907,,[]
üß† ML Signal: Recursive function call pattern,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 3912]",1.0,2907,ml_signal,426,Recursive function call pattern,,2907,,[]
‚úÖ Best Practice: Exception handling with logging,"[26486, 227, 6705, 19939, 25, 35528, 9041, 351, 18931]",0.5,2907,best_practice,426,Exception handling with logging,,2907,,[]
‚úÖ Best Practice: Consider specifying the data type for the parameters in the docstring for clarity.,"[26486, 227, 6705, 19939, 25, 12642, 31577, 262, 1366, 2099, 329, 262, 10007, 287, 262, 2205, 8841, 329, 16287, 13]",0.5,2907,best_practice,425,Consider specifying the data type for the parameters in the docstring for clarity.,,2907,,[]
‚úÖ Best Practice: Initialize the DataFrame outside of the loop to avoid reinitialization.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 262, 6060, 19778, 2354, 286, 262, 9052, 284, 3368, 6865, 6847, 1634, 13]",0.5,2922,best_practice,453,Initialize the DataFrame outside of the loop to avoid reinitialization.,,2907,            pageNo += 1,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2443, 2949, 15853, 352]"
üß† ML Signal: Usage of retry_count and pause parameters indicates handling of network issues.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1005, 563, 62, 9127, 290, 14985, 10007, 9217, 9041, 286, 3127, 2428, 13]",0.5,2937,ml_signal,457,Usage of retry_count and pause parameters indicates handling of network issues.,,2922,            print(ex),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 1069, 8]"
üß† ML Signal: Looping with a fixed range suggests a pattern for data pagination.,"[8582, 100, 254, 10373, 26484, 25, 6706, 15816, 351, 257, 5969, 2837, 5644, 257, 3912, 329, 1366, 42208, 1883, 13]",0.5,2937,ml_signal,461,Looping with a fixed range suggests a pattern for data pagination.,,2937,,[]
üß† ML Signal: Usage of retry_count and pause parameters indicates handling of network issues.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1005, 563, 62, 9127, 290, 14985, 10007, 9217, 9041, 286, 3127, 2428, 13]",0.5,2937,ml_signal,461,Usage of retry_count and pause parameters indicates handling of network issues.,,2937,,[]
‚úÖ Best Practice: Consider using pd.concat instead of append for better performance.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 279, 67, 13, 1102, 9246, 2427, 286, 24443, 329, 1365, 2854, 13]",0.5,2941,best_practice,466,Consider using pd.concat instead of append for better performance.,,2937,    --------,"[220, 220, 220, 24200]"
üß† ML Signal: Breaking out of the loop on None suggests a pattern for handling end of data.,"[8582, 100, 254, 10373, 26484, 25, 24942, 503, 286, 262, 9052, 319, 6045, 5644, 257, 3912, 329, 9041, 886, 286, 1366, 13]",0.5,2955,ml_signal,469,Breaking out of the loop on None suggests a pattern for handling end of data.,,2941,"    pause : int, ÈªòËÆ§ 0","[220, 220, 220, 14985, 1058, 493, 11, 16268, 119, 246, 164, 106, 97, 657]"
üß† ML Signal: Loop with retry logic indicates handling of transient failures,"[8582, 100, 254, 10373, 26484, 25, 26304, 351, 1005, 563, 9156, 9217, 9041, 286, 32361, 15536]",0.5,2959,ml_signal,466,Loop with retry logic indicates handling of transient failures,,2955,    --------,"[220, 220, 220, 24200]"
‚ö†Ô∏è SAST Risk (Low): Potential for excessive sleep causing delays,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 13181, 3993, 6666, 16119]",0.5,3009,sast_risk,468,Potential for excessive sleep causing delays,Low,2959,                 Â¶ÇÈÅáÁΩëÁªúÁ≠âÈóÆÈ¢òÈáçÂ§çÊâßË°åÁöÑÊ¨°Êï∞ ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10263, 99, 224, 34402, 229, 163, 121, 239, 163, 119, 250, 163, 255, 231, 29785, 106, 165, 95, 246, 34932, 235, 13783, 235, 33699, 100, 26193, 234, 21410, 162, 105, 94, 46763, 108, 220]"
"‚ö†Ô∏è SAST Risk (Low): Potential side effect in console writing, could leak information","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1735, 1245, 287, 8624, 3597, 11, 714, 13044, 1321]",0.5,3013,sast_risk,471,"Potential side effect in console writing, could leak information",Low,3009,    ,"[220, 220, 220, 220]"
"‚ö†Ô∏è SAST Risk (Medium): URL construction without validation, potential for injection","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 1231, 21201, 11, 2785, 329, 16954]",0.5,3018,sast_risk,474,"URL construction without validation, potential for injection",Medium,3013,    DataFrame,"[220, 220, 220, 6060, 19778]"
‚úÖ Best Practice: Use of list comprehension for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 1351, 35915, 329, 1100, 1799]",1.0,3036,best_practice,481,Use of list comprehension for readability,,3018,    marketprice:ÊúÄÊñ∞Â∏ÇÂú∫‰ª∑Ê†º,"[220, 220, 220, 1910, 20888, 25, 17312, 222, 23877, 108, 30585, 224, 28839, 118, 20015, 115, 43718, 120]"
‚úÖ Best Practice: String formatting for readability,"[26486, 227, 6705, 19939, 25, 10903, 33313, 329, 1100, 1799]",1.0,3050,best_practice,485,String formatting for readability,,3036,    issue_date:‰∏äÂ∏ÇÊó•Êúü,"[220, 220, 220, 2071, 62, 4475, 25, 41468, 30585, 224, 33768, 98, 17312, 253]"
"‚ö†Ô∏è SAST Risk (Medium): Use of read_html with untrusted input, potential for HTML injection","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 1100, 62, 6494, 351, 1418, 81, 8459, 5128, 11, 2785, 329, 11532, 16954]",0.5,3079,sast_risk,488,"Use of read_html with untrusted input, potential for HTML injection",Medium,3050,    perreturn:ÊØè‰∏≠‰∏ÄËÇ°Êî∂ÁõäÔºà‰∏áÂÖÉÔºâ,"[220, 220, 220, 583, 7783, 25, 162, 107, 237, 40792, 31660, 164, 224, 94, 162, 242, 114, 33566, 232, 171, 120, 230, 10310, 229, 17739, 225, 171, 120, 231]"
‚úÖ Best Practice: Dropping unnecessary columns for data cleanliness,"[26486, 227, 6705, 19939, 25, 21045, 2105, 13114, 15180, 329, 1366, 3424, 26061]",1.0,3100,best_practice,493,Dropping unnecessary columns for data cleanliness,,3079,"        data = _newcbonds(1, retry_count,","[220, 220, 220, 220, 220, 220, 220, 1366, 796, 4808, 3605, 21101, 24764, 7, 16, 11, 1005, 563, 62, 9127, 11]"
‚úÖ Best Practice: Explicitly setting DataFrame columns for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6060, 19778, 15180, 329, 16287]",0.5,3105,best_practice,495,Explicitly setting DataFrame columns for clarity,,3100,    else:,"[220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of map and lambda for consistent data formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 3975, 290, 37456, 329, 6414, 1366, 33313]",1.0,3110,best_practice,495,Use of map and lambda for consistent data formatting,,3105,    else:,"[220, 220, 220, 2073, 25]"
"‚ö†Ô∏è SAST Risk (Low): Generic exception handling, potential to miss specific errors","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041, 11, 2785, 284, 2051, 2176, 8563]",1.0,3115,sast_risk,495,"Generic exception handling, potential to miss specific errors",Low,3110,    else:,"[220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Consider adding type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,3136,best_practice,494,Consider adding type hints for function parameters and return type for better readability and maintainability.,,3115,                    pause),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14985, 8]"
üß† ML Signal: Use of default values for function parameters.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 3815, 329, 2163, 10007, 13]",0.5,3149,ml_signal,519,Use of default values for function parameters.,,3136,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if `du.diff_day` does not handle invalid date formats properly.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 4600, 646, 13, 26069, 62, 820, 63, 857, 407, 5412, 12515, 3128, 17519, 6105, 13]",0.5,3176,sast_risk,522,Potential risk if `du.diff_day` does not handle invalid date formats properly.,Low,3149,            sarr = '<table>%s</table>'%sarr,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 264, 3258, 796, 705, 27, 11487, 29, 4, 82, 3556, 11487, 29, 6, 4, 82, 3258]"
üß† ML Signal: String manipulation to remove characters.,"[8582, 100, 254, 10373, 26484, 25, 10903, 17512, 284, 4781, 3435, 13]",0.5,3193,ml_signal,525,String manipulation to remove characters.,,3176,                return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
"üß† ML Signal: Use of pandas DataFrame, common in data processing tasks.","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 6060, 19778, 11, 2219, 287, 1366, 7587, 8861, 13]",0.5,3220,ml_signal,528,"Use of pandas DataFrame, common in data processing tasks.",,3193,            df.columns = rv.NEW_CBONDS_COLS,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 374, 85, 13, 13965, 62, 23199, 1340, 5258, 62, 25154, 50]"
"üß† ML Signal: Function call to write headers, indicating logging or output preparation.","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 3551, 24697, 11, 12739, 18931, 393, 5072, 11824, 13]",0.5,3257,ml_signal,529,"Function call to write headers, indicating logging or output preparation.",,3220,            df['scode'] = df['scode'].map(lambda x: str(x).zfill(6)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 17816, 1416, 1098, 20520, 796, 47764, 17816, 1416, 1098, 6, 4083, 8899, 7, 50033, 2124, 25, 965, 7, 87, 737, 89, 20797, 7, 21, 4008]"
üß† ML Signal: Use of retry logic in function parameters.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 1005, 563, 9156, 287, 2163, 10007, 13]",0.5,3294,ml_signal,529,Use of retry logic in function parameters.,,3257,            df['scode'] = df['scode'].map(lambda x: str(x).zfill(6)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 17816, 1416, 1098, 20520, 796, 47764, 17816, 1416, 1098, 6, 4083, 8899, 7, 50033, 2124, 25, 965, 7, 87, 737, 89, 20797, 7, 21, 4008]"
üß† ML Signal: Loop with retry pattern,"[8582, 100, 254, 10373, 26484, 25, 26304, 351, 1005, 563, 3912]",1.0,3303,ml_signal,533,Loop with retry pattern,,3294,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential for high-frequency requests due to low pause,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1029, 12, 35324, 7007, 2233, 284, 1877, 14985]",1.0,3303,sast_risk,535,Potential for high-frequency requests due to low pause,Low,3303,,[]
üß† ML Signal: Console writing operation,"[8582, 100, 254, 10373, 26484, 25, 24371, 3597, 4905]",0.5,3303,ml_signal,537,Console writing operation,,3303,,[]
üß† ML Signal: URL construction pattern,"[8582, 100, 254, 10373, 26484, 25, 10289, 5103, 3912]",1.0,3336,ml_signal,540,URL construction pattern,,3303,    Ëé∑ÂèñÊ≤™Â∏ÇËûçËµÑËûçÂà∏Êï∞ÊçÆÂàóË°®,"[220, 220, 220, 5525, 236, 115, 20998, 244, 162, 110, 103, 30585, 224, 164, 252, 235, 164, 113, 226, 164, 252, 235, 26344, 116, 46763, 108, 162, 235, 106, 26344, 245, 26193, 101]"
üß† ML Signal: URL construction pattern,"[8582, 100, 254, 10373, 26484, 25, 10289, 5103, 3912]",1.0,3421,ml_signal,550,URL construction pattern,,3336,                ÈáçÂ§çËØ∑Ê±ÇÊï∞ÊçÆËøáÁ®ã‰∏≠ÊöÇÂÅúÁöÑÁßíÊï∞ÔºåÈò≤Ê≠¢ËØ∑Ê±ÇÈó¥ÈöîÊó∂Èó¥Â§™Áü≠Âá∫Áé∞ÁöÑÈóÆÈ¢ò,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16268, 229, 235, 13783, 235, 46237, 115, 162, 109, 224, 46763, 108, 162, 235, 106, 32573, 229, 163, 101, 233, 40792, 162, 248, 224, 161, 223, 250, 21410, 163, 100, 240, 46763, 108, 171, 120, 234, 165, 246, 110, 29826, 95, 46237, 115, 162, 109, 224, 29785, 112, 49694, 242, 33768, 114, 29785, 112, 13783, 103, 163, 253, 255, 49035, 118, 163, 236, 108, 21410, 29785, 106, 165, 95, 246]"
üß† ML Signal: URL construction pattern,"[8582, 100, 254, 10373, 26484, 25, 10289, 5103, 3912]",1.0,3439,ml_signal,555,URL construction pattern,,3421,    opDate:‰ø°Áî®‰∫§ÊòìÊó•Êúü,"[220, 220, 220, 1034, 10430, 25, 46479, 94, 18796, 101, 12859, 97, 23626, 241, 33768, 98, 17312, 253]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe use of cookies,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 779, 286, 14746]",0.5,3468,sast_risk,557,Potentially unsafe use of cookies,Medium,3439,    rzmre: Êú¨Êó•ËûçËµÑ‰π∞ÂÖ•È¢ù(ÂÖÉ),"[220, 220, 220, 374, 89, 76, 260, 25, 42164, 105, 33768, 98, 164, 252, 235, 164, 113, 226, 20046, 108, 17739, 98, 165, 95, 251, 7, 17739, 225, 8]"
üß† ML Signal: Data retrieval pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 45069, 3912]",1.0,3498,ml_signal,559,Data retrieval pattern,,3468,    rqylje: Êú¨Êó•ËûçÂà∏‰ΩôÈáèÈáëÈ¢ù(ÂÖÉ),"[220, 220, 220, 374, 80, 2645, 18015, 25, 42164, 105, 33768, 98, 164, 252, 235, 26344, 116, 19526, 247, 34932, 237, 34932, 239, 165, 95, 251, 7, 17739, 225, 8]"
‚úÖ Best Practice: Use of conditional expression for Python version compatibility,"[26486, 227, 6705, 19939, 25, 5765, 286, 26340, 5408, 329, 11361, 2196, 17764]",0.5,3533,best_practice,561,Use of conditional expression for Python version compatibility,,3498,    rzrqjyzl:Êú¨Êó•ËûçËµÑËûçÂà∏‰ΩôÈ¢ù(ÂÖÉ),"[220, 220, 220, 374, 89, 81, 80, 73, 45579, 75, 25, 17312, 105, 33768, 98, 164, 252, 235, 164, 113, 226, 164, 252, 235, 26344, 116, 19526, 247, 165, 95, 251, 7, 17739, 225, 8]"
üß† ML Signal: Data slicing pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 49289, 3912]",1.0,3537,ml_signal,562,Data slicing pattern,,3533,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): JSON parsing without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 19449, 32096, 1231, 21201]",0.5,3546,sast_risk,566,JSON parsing without validation,Low,3537,        return None,"[220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
üß† ML Signal: Calculation of page count,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 2443, 954]",0.5,3555,ml_signal,566,Calculation of page count,,3546,        return None,"[220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
üß† ML Signal: Calculation of data pages,"[8582, 100, 254, 10373, 26484, 25, 2199, 14902, 286, 1366, 5468]",0.5,3565,ml_signal,569,Calculation of data pages,,3555,    ct._write_head(),"[220, 220, 220, 269, 83, 13557, 13564, 62, 2256, 3419]"
üß† ML Signal: DataFrame creation pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 6282, 3912]",1.0,3585,ml_signal,570,DataFrame creation pattern,,3565,"    df = _sh_hz(data, start=start, end=end,","[220, 220, 220, 47764, 796, 4808, 1477, 62, 32179, 7, 7890, 11, 923, 28, 9688, 11, 886, 28, 437, 11]"
üß† ML Signal: Date formatting pattern,"[8582, 100, 254, 10373, 26484, 25, 7536, 33313, 3912]",1.0,3590,ml_signal,573,Date formatting pattern,,3585,    return df,"[220, 220, 220, 1441, 47764]"
üß† ML Signal: Data appending pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 598, 1571, 3912]",1.0,3595,ml_signal,573,Data appending pattern,,3590,    return df,"[220, 220, 220, 1441, 47764]"
üß† ML Signal: Recursive function call pattern,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 3912]",1.0,3600,ml_signal,573,Recursive function call pattern,,3595,    return df,"[220, 220, 220, 1441, 47764]"
‚ö†Ô∏è SAST Risk (Low): Generic exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041]",0.5,3605,sast_risk,573,Generic exception handling,Low,3600,    return df,"[220, 220, 220, 1441, 47764]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic IOError,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 24418, 12331]",0.5,3610,sast_risk,573,Raising a generic IOError,Low,3605,    return df,"[220, 220, 220, 1441, 47764]"
‚úÖ Best Practice: Use of inline if-else for concise date formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 26098, 611, 12, 17772, 329, 35327, 3128, 33313]",0.5,3629,best_practice,602,Use of inline if-else for concise date formatting,,3610,            lines = json.loads(lines),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3951, 796, 33918, 13, 46030, 7, 6615, 8]"
‚úÖ Best Practice: Use of inline if-else for concise date formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 26098, 611, 12, 17772, 329, 35327, 3128, 33313]",0.5,3665,best_practice,604,Use of inline if-else for concise date formatting,,3629,            datapage = int(pagecount/5+1 if pagecount%5>0 else pagecount/5),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 4818, 499, 496, 796, 493, 7, 7700, 9127, 14, 20, 10, 16, 611, 2443, 9127, 4, 20, 29, 15, 2073, 2443, 9127, 14, 20, 8]"
‚úÖ Best Practice: Use of inline if-else for concise date formatting,"[26486, 227, 6705, 19939, 25, 5765, 286, 26098, 611, 12, 17772, 329, 35327, 3128, 33313]",0.5,3724,best_practice,606,Use of inline if-else for concise date formatting,,3665,"            df['opDate'] = df['opDate'].map(lambda x: '%s-%s-%s'%(x[0:4], x[4:6], x[6:8]))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 17816, 404, 10430, 20520, 796, 47764, 17816, 404, 10430, 6, 4083, 8899, 7, 50033, 2124, 25, 705, 4, 82, 12, 4, 82, 12, 4, 82, 6, 4, 7, 87, 58, 15, 25, 19, 4357, 2124, 58, 19, 25, 21, 4357, 2124, 58, 21, 25, 23, 60, 4008]"
‚úÖ Best Practice: Clear logic to prioritize date over start and end,"[26486, 227, 6705, 19939, 25, 11459, 9156, 284, 32980, 3128, 625, 923, 290, 886]",0.5,3745,best_practice,608,Clear logic to prioritize date over start and end,,3724,            if beginPage < datapage*5:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2221, 9876, 1279, 4818, 499, 496, 9, 20, 25]"
‚úÖ Best Practice: Initialize an empty DataFrame for data collection,"[26486, 227, 6705, 19939, 25, 20768, 1096, 281, 6565, 6060, 19778, 329, 1366, 4947]",0.5,3784,best_practice,609,Initialize an empty DataFrame for data collection,,3745,"                data = _sh_hz(data, start=start, end=end, pageNo=pageNo, ","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 4808, 1477, 62, 32179, 7, 7890, 11, 923, 28, 9688, 11, 886, 28, 437, 11, 2443, 2949, 28, 7700, 2949, 11, 220]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if ct._write_head() modifies global state,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 269, 83, 13557, 13564, 62, 2256, 3419, 953, 6945, 3298, 1181]",0.5,3799,sast_risk,613,Potential issue if ct._write_head() modifies global state,Low,3784,            print(e),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 68, 8]"
"üß† ML Signal: Function call with multiple parameters, useful for learning API usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 869, 351, 3294, 10007, 11, 4465, 329, 4673, 7824, 8748, 7572]",0.5,3808,ml_signal,614,"Function call with multiple parameters, useful for learning API usage patterns",,3799,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Return the result of the function for further processing,"[26486, 227, 6705, 19939, 25, 8229, 262, 1255, 286, 262, 2163, 329, 2252, 7587]",0.5,3835,best_practice,620,Return the result of the function for further processing,,3808,"                      start='', end='',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 923, 11639, 3256, 886, 11639, 3256]"
‚úÖ Best Practice: Use of retry mechanism to handle transient errors,"[26486, 227, 6705, 19939, 25, 5765, 286, 1005, 563, 9030, 284, 5412, 32361, 8563]",0.5,3849,best_practice,619,Use of retry mechanism to handle transient errors,,3835,"def sh_margin_details(date='', symbol='', ","[4299, 427, 62, 36153, 62, 36604, 7, 4475, 11639, 3256, 6194, 11639, 3256, 220]"
‚ö†Ô∏è SAST Risk (Low): Potential for high-frequency requests due to low pause value,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1029, 12, 35324, 7007, 2233, 284, 1877, 14985, 1988]",1.0,3883,sast_risk,621,Potential for high-frequency requests due to low pause value,Low,3849,"                      retry_count=3, pause=0.001):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 28, 18, 11, 14985, 28, 15, 13, 8298, 2599]"
‚úÖ Best Practice: Use of string formatting for URL construction,"[26486, 227, 6705, 19939, 25, 5765, 286, 4731, 33313, 329, 10289, 5103]",1.0,3887,best_practice,625,Use of string formatting for URL construction,,3883,    --------,"[220, 220, 220, 24200]"
‚ö†Ô∏è SAST Risk (Low): Potential for integer overflow if pageNo is very large,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 18253, 30343, 611, 2443, 2949, 318, 845, 1588]",1.0,3893,sast_risk,632,Potential for integer overflow if pageNo is very large,Low,3887,    end:string,"[220, 220, 220, 886, 25, 8841]"
‚úÖ Best Practice: Use of constants for URL construction,"[26486, 227, 6705, 19939, 25, 5765, 286, 38491, 329, 10289, 5103]",1.0,3978,best_practice,637,Use of constants for URL construction,,3893,                ÈáçÂ§çËØ∑Ê±ÇÊï∞ÊçÆËøáÁ®ã‰∏≠ÊöÇÂÅúÁöÑÁßíÊï∞ÔºåÈò≤Ê≠¢ËØ∑Ê±ÇÈó¥ÈöîÊó∂Èó¥Â§™Áü≠Âá∫Áé∞ÁöÑÈóÆÈ¢ò,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 16268, 229, 235, 13783, 235, 46237, 115, 162, 109, 224, 46763, 108, 162, 235, 106, 32573, 229, 163, 101, 233, 40792, 162, 248, 224, 161, 223, 250, 21410, 163, 100, 240, 46763, 108, 171, 120, 234, 165, 246, 110, 29826, 95, 46237, 115, 162, 109, 224, 29785, 112, 49694, 242, 33768, 114, 29785, 112, 13783, 103, 163, 253, 255, 49035, 118, 163, 236, 108, 21410, 29785, 106, 165, 95, 246]"
‚ö†Ô∏è SAST Risk (Medium): Potential exposure of sensitive data in URL parameters,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 7111, 286, 8564, 1366, 287, 10289, 10007]",0.5,3982,sast_risk,638,Potential exposure of sensitive data in URL parameters,Medium,3978,    ,"[220, 220, 220, 220]"
‚úÖ Best Practice: Conditional decoding based on Python version,"[26486, 227, 6705, 19939, 25, 9724, 1859, 39938, 1912, 319, 11361, 2196]",1.0,4002,best_practice,644,Conditional decoding based on Python version,,3982,    securityAbbr:Ê†áÁöÑËØÅÂà∏ÁÆÄÁß∞,"[220, 220, 220, 2324, 4826, 1671, 25, 43718, 229, 21410, 46237, 223, 26344, 116, 163, 106, 222, 163, 100, 108]"
‚ö†Ô∏è SAST Risk (Low): Potential for JSONDecodeError if lines is not valid JSON,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 19449, 10707, 1098, 12331, 611, 3951, 318, 407, 4938, 19449]",1.0,4031,sast_risk,647,Potential for JSONDecodeError if lines is not valid JSON,Low,4002,    rzche:Êú¨Êó•ËûçËµÑÂÅøËøòÈ¢ù(ÂÖÉ),"[220, 220, 220, 374, 89, 2395, 25, 17312, 105, 33768, 98, 164, 252, 235, 164, 113, 226, 161, 223, 123, 32573, 246, 165, 95, 251, 7, 17739, 225, 8]"
‚úÖ Best Practice: Use of integer division for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 18253, 7297, 329, 16287]",0.5,4055,best_practice,650,Use of integer division for clarity,,4031,    rqchl: Êú¨Êó•ËûçÂà∏ÂÅøËøòÈáè,"[220, 220, 220, 374, 80, 354, 75, 25, 42164, 105, 33768, 98, 164, 252, 235, 26344, 116, 161, 223, 123, 32573, 246, 34932, 237]"
‚úÖ Best Practice: Use of pandas for data manipulation,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 329, 1366, 17512]",0.5,4070,best_practice,655,Use of pandas for data manipulation,,4055,    if (start != '') & (end != ''):,"[220, 220, 220, 611, 357, 9688, 14512, 10148, 8, 1222, 357, 437, 14512, 10148, 2599]"
"üß† ML Signal: Appending data to a DataFrame, common in data processing tasks","[8582, 100, 254, 10373, 26484, 25, 2034, 1571, 1366, 284, 257, 6060, 19778, 11, 2219, 287, 1366, 7587, 8861]",0.5,4090,ml_signal,659,"Appending data to a DataFrame, common in data processing tasks",,4070,"    df = _sh_mx(data, date=date, start=start,","[220, 220, 220, 47764, 796, 4808, 1477, 62, 36802, 7, 7890, 11, 3128, 28, 4475, 11, 923, 28, 9688, 11]"
üß† ML Signal: Recursive function call pattern,"[8582, 100, 254, 10373, 26484, 25, 3311, 30753, 2163, 869, 3912]",1.0,4114,ml_signal,660,Recursive function call pattern,,4090,"                end=end, symbol=symbol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 28, 437, 11, 6194, 28, 1837, 23650, 11]"
"‚ö†Ô∏è SAST Risk (Low): Generic exception handling, may hide specific errors","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041, 11, 743, 7808, 2176, 8563]",1.0,4138,sast_risk,660,"Generic exception handling, may hide specific errors",Low,4114,"                end=end, symbol=symbol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 28, 437, 11, 6194, 28, 1837, 23650, 11]"
‚ö†Ô∏è SAST Risk (Medium): Raising IOError with a potentially user-facing error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7567, 1710, 24418, 12331, 351, 257, 6196, 2836, 12, 29532, 4049, 3275]",1.0,4162,sast_risk,660,Raising IOError with a potentially user-facing error message,Medium,4138,"                end=end, symbol=symbol,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 28, 437, 11, 6194, 28, 1837, 23650, 11]"
‚úÖ Best Practice: Consider importing necessary modules at the beginning of the file for clarity.,"[26486, 227, 6705, 19939, 25, 12642, 33332, 3306, 13103, 379, 262, 3726, 286, 262, 2393, 329, 16287, 13]",0.5,4182,best_practice,659,Consider importing necessary modules at the beginning of the file for clarity.,,4162,"    df = _sh_mx(data, date=date, start=start,","[220, 220, 220, 47764, 796, 4808, 1477, 62, 36802, 7, 7890, 11, 3128, 28, 4475, 11, 923, 28, 9688, 11]"
‚úÖ Best Practice: Initialize variables before use to avoid potential reference errors.,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 878, 779, 284, 3368, 2785, 4941, 8563, 13]",0.5,4230,best_practice,684,Initialize variables before use to avoid potential reference errors.,,4182,"            ref = rv.MAR_SH_HZ_REF_URL%(ct.P_TYPE['http'], ct.DOMAINS['sse'])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1006, 796, 374, 85, 13, 40569, 62, 9693, 62, 39, 57, 62, 31688, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 82, 325, 6, 12962]"
‚úÖ Best Practice: Use descriptive function names for better readability.,"[26486, 227, 6705, 19939, 25, 5765, 35644, 2163, 3891, 329, 1365, 1100, 1799, 13]",0.5,4273,best_practice,687,Use descriptive function names for better readability.,,4230,"                                    symbol, start, end, tail,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 11, 923, 11, 886, 11, 7894, 11]"
‚úÖ Best Practice: Use logging instead of print statements for better control over output.,"[26486, 227, 6705, 19939, 25, 5765, 18931, 2427, 286, 3601, 6299, 329, 1365, 1630, 625, 5072, 13]",0.5,4292,best_practice,691,Use logging instead of print statements for better control over output.,,4273,            lines = lines[19:-1],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3951, 796, 3951, 58, 1129, 21912, 16, 60]"
‚úÖ Best Practice: Use descriptive variable names for better readability.,"[26486, 227, 6705, 19939, 25, 5765, 35644, 7885, 3891, 329, 1365, 1100, 1799, 13]",0.5,4309,best_practice,695,Use descriptive variable names for better readability.,,4292,            if pagecount == 0:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2443, 9127, 6624, 657, 25]"
‚ö†Ô∏è SAST Risk (Low): Using append in a loop can be inefficient; consider using pd.concat instead.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 24443, 287, 257, 9052, 460, 307, 30904, 26, 2074, 1262, 279, 67, 13, 1102, 9246, 2427, 13]",0.5,4330,sast_risk,702,Using append in a loop can be inefficient; consider using pd.concat instead.,Low,4309,            if beginPage < datapage*5:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 2221, 9876, 1279, 4818, 499, 496, 9, 20, 25]"
‚ö†Ô∏è SAST Risk (Medium): Catching broad exceptions can hide errors; specify exception types.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 327, 19775, 3154, 13269, 460, 7808, 8563, 26, 11986, 6631, 3858, 13]",0.5,4366,sast_risk,705,Catching broad exceptions can hide errors; specify exception types.,Medium,4330,"                       retry_count=retry_count, pause=pause)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 28, 1186, 563, 62, 9127, 11, 14985, 28, 32125, 8]"
üß† ML Signal: Retry logic with a counter and pause can indicate robustness in network operations.,"[8582, 100, 254, 10373, 26484, 25, 4990, 563, 9156, 351, 257, 3753, 290, 14985, 460, 7603, 12373, 1108, 287, 3127, 4560, 13]",0.5,4405,ml_signal,703,Retry logic with a counter and pause can indicate robustness in network operations.,,4366,"                data = _sh_mx(data, start=start, end=end, pageNo=pageNo, ","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 4808, 1477, 62, 36802, 7, 7890, 11, 923, 28, 9688, 11, 886, 28, 437, 11, 2443, 2949, 28, 7700, 2949, 11, 220]"
‚ö†Ô∏è SAST Risk (Low): Using time.sleep can lead to inefficient waiting; consider async alternatives.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 640, 13, 42832, 460, 1085, 284, 30904, 4953, 26, 2074, 30351, 14693, 13]",0.5,4441,sast_risk,705,Using time.sleep can lead to inefficient waiting; consider async alternatives.,Low,4405,"                       retry_count=retry_count, pause=pause)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 28, 1186, 563, 62, 9127, 11, 14985, 28, 32125, 8]"
‚ö†Ô∏è SAST Risk (Low): Direct console writing can be a debugging leftover; ensure it's intended for production.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 8624, 3597, 460, 307, 257, 28769, 39191, 26, 4155, 340, 338, 5292, 329, 3227, 13]",0.5,4456,sast_risk,707,Direct console writing can be a debugging leftover; ensure it's intended for production.,Low,4441,            print(e),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 68, 8]"
‚ö†Ô∏è SAST Risk (Medium): URL construction with string interpolation can lead to injection vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 351, 4731, 39555, 341, 460, 1085, 284, 16954, 23805, 13]",0.5,4475,sast_risk,710,URL construction with string interpolation can lead to injection vulnerabilities.,Medium,4456,    raise IOError(ct.NETWORK_URL_ERROR_MSG),"[220, 220, 220, 5298, 24418, 12331, 7, 310, 13, 12884, 33249, 62, 21886, 62, 24908, 62, 5653, 38, 8]"
‚ö†Ô∏è SAST Risk (Medium): No validation or sanitization of the response data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 393, 5336, 270, 1634, 286, 262, 2882, 1366, 13]",0.5,4503,sast_risk,713,No validation or sanitization of the response data.,Medium,4475,"def sz_margins(start=None, end=None, retry_count=3, pause=0.001):","[4299, 264, 89, 62, 30887, 1040, 7, 9688, 28, 14202, 11, 886, 28, 14202, 11, 1005, 563, 62, 9127, 28, 18, 11, 14985, 28, 15, 13, 8298, 2599]"
üß† ML Signal: Checking response length can indicate a heuristic for data validation.,"[8582, 100, 254, 10373, 26484, 25, 39432, 2882, 4129, 460, 7603, 257, 339, 27915, 329, 1366, 21201, 13]",0.5,4507,ml_signal,714,Checking response length can indicate a heuristic for data validation.,,4503,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): No error handling for pd.read_html which can throw exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 279, 67, 13, 961, 62, 6494, 543, 460, 3714, 13269, 13]",0.5,4513,sast_risk,718,No error handling for pd.read_html which can throw exceptions.,Low,4507,    start:string,"[220, 220, 220, 923, 25, 8841]"
‚ö†Ô∏è SAST Risk (Low): Directly setting DataFrame columns without validation.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 306, 4634, 6060, 19778, 15180, 1231, 21201, 13]",0.5,4519,sast_risk,720,Directly setting DataFrame columns without validation.,Low,4513,    end:string,"[220, 220, 220, 886, 25, 8841]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563, 13]",0.5,4567,sast_risk,721,Catching broad exceptions can hide specific errors.,Low,4519,                  ÁªìÊùüÊó•Êúü formatÔºöYYYY-MM-DD ÈªòËÆ§‰∏∫‰ªäÊó•,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13328, 119, 241, 30266, 253, 33768, 98, 17312, 253, 5794, 171, 120, 248, 26314, 26314, 12, 12038, 12, 16458, 16268, 119, 246, 164, 106, 97, 10310, 118, 20015, 232, 33768, 98]"
‚ö†Ô∏è SAST Risk (Low): Raising IOError with a custom message; ensure message does not leak sensitive info.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 24418, 12331, 351, 257, 2183, 3275, 26, 4155, 3275, 857, 407, 13044, 8564, 7508, 13]",0.5,4615,sast_risk,721,Raising IOError with a custom message; ensure message does not leak sensitive info.,Low,4567,                  ÁªìÊùüÊó•Êúü formatÔºöYYYY-MM-DD ÈªòËÆ§‰∏∫‰ªäÊó•,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13328, 119, 241, 30266, 253, 33768, 98, 17312, 253, 5794, 171, 120, 248, 26314, 26314, 12, 12038, 12, 16458, 16268, 119, 246, 164, 106, 97, 10310, 118, 20015, 232, 33768, 98]"
‚úÖ Best Practice: Use of retry logic to handle transient network issues,"[26486, 227, 6705, 19939, 25, 5765, 286, 1005, 563, 9156, 284, 5412, 32361, 3127, 2428]",0.5,4624,best_practice,744,Use of retry logic to handle transient network issues,,4615,        return None,"[220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
‚úÖ Best Practice: Pause between retries to avoid overwhelming the server,"[26486, 227, 6705, 19939, 25, 350, 682, 1022, 1005, 1678, 284, 3368, 9721, 262, 4382]",0.5,4655,best_practice,746,Pause between retries to avoid overwhelming the server,,4624,"        date_range = pd.date_range(start=start, end=end, freq='B')","[220, 220, 220, 220, 220, 220, 220, 3128, 62, 9521, 796, 279, 67, 13, 4475, 62, 9521, 7, 9688, 28, 9688, 11, 886, 28, 437, 11, 2030, 80, 11639, 33, 11537]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe string formatting for URLs,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 4731, 33313, 329, 32336]",0.5,4664,sast_risk,749,Potentially unsafe string formatting for URLs,Medium,4655,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Medium): No validation or sanitization of the URL,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 393, 5336, 270, 1634, 286, 262, 10289]",1.0,4705,sast_risk,752,No validation or sanitization of the URL,Medium,4664,"                data = data.append(_sz_hz(str(date.date()), retry_count, pause) )","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 33295, 28264, 82, 89, 62, 32179, 7, 2536, 7, 4475, 13, 4475, 3419, 828, 1005, 563, 62, 9127, 11, 14985, 8, 1267]"
‚ö†Ô∏è SAST Risk (Medium): No exception handling for network errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 3127, 8563]",0.5,4710,sast_risk,753,No exception handling for network errors,Medium,4705,    except:,"[220, 220, 220, 2845, 25]"
üß† ML Signal: Checking response length to determine if data is valid,"[8582, 100, 254, 10373, 26484, 25, 39432, 2882, 4129, 284, 5004, 611, 1366, 318, 4938]",0.5,4715,ml_signal,755,Checking response length to determine if data is valid,,4710,    else:,"[220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Assumes the HTML structure is consistent,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 262, 11532, 4645, 318, 6414]",0.5,4723,sast_risk,757,Assumes the HTML structure is consistent,Low,4715,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
üß† ML Signal: Mapping function to format stock codes,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 2163, 284, 5794, 4283, 12416]",0.5,4736,ml_signal,760,Mapping function to format stock codes,,4723,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
üß† ML Signal: Adding a new column with a constant value,"[8582, 100, 254, 10373, 26484, 25, 18247, 257, 649, 5721, 351, 257, 6937, 1988]",0.5,4745,ml_signal,763,Adding a new column with a constant value,,4736,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚ö†Ô∏è SAST Risk (Low): Generic exception handling without specific error actions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041, 1231, 2176, 4049, 4028]",1.0,4769,sast_risk,766,Generic exception handling without specific error actions,Low,4745,"            lines = urlopen(request, timeout = 10).read()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3951, 796, 19016, 9654, 7, 25927, 11, 26827, 796, 838, 737, 961, 3419]"
‚ö†Ô∏è SAST Risk (Low): Raises a generic IOError without specific context,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 257, 14276, 24418, 12331, 1231, 2176, 4732]",1.0,4798,sast_risk,770,Raises a generic IOError without specific context,Low,4769,            df.columns = rv.MAR_SZ_HZ_COLS,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 374, 85, 13, 40569, 62, 50, 57, 62, 39, 57, 62, 25154, 50]"
‚úÖ Best Practice: Check for None to handle default parameter values,"[26486, 227, 6705, 19939, 25, 6822, 329, 6045, 284, 5412, 4277, 11507, 3815]",0.5,4807,best_practice,763,Check for None to handle default parameter values,,4798,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
üß† ML Signal: Conversion of code to a specific symbol format,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 2438, 284, 257, 2176, 6194, 5794]",0.5,4826,ml_signal,767,Conversion of code to a specific symbol format,,4807,            if len(lines) <= 200:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 6615, 8, 19841, 939, 25]"
üß† ML Signal: Conditional assignment based on gdtype value,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 16237, 1912, 319, 308, 67, 4906, 1988]",0.5,4856,ml_signal,769,Conditional assignment based on gdtype value,,4826,"            df = pd.read_html(lines, skiprows=[0])[0]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 6494, 7, 6615, 11, 14267, 8516, 41888, 15, 12962, 58, 15, 60]"
üß† ML Signal: Conditional logic based on year and quarter parameters,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 614, 290, 3860, 10007]",0.5,4868,ml_signal,772,Conditional logic based on year and quarter parameters,,4856,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
üß† ML Signal: Retry pattern with a specified number of attempts,"[8582, 100, 254, 10373, 26484, 25, 4990, 563, 3912, 351, 257, 7368, 1271, 286, 6370]",0.5,4877,ml_signal,774,Retry pattern with a specified number of attempts,,4868,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Use of time.sleep can lead to performance issues,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 640, 13, 42832, 460, 1085, 284, 2854, 2428]",0.5,4877,sast_risk,777,Use of time.sleep can lead to performance issues,Low,4877,,[]
üß† ML Signal: URL construction with dynamic parameters,"[8582, 100, 254, 10373, 26484, 25, 10289, 5103, 351, 8925, 10007]",0.5,4881,ml_signal,780,URL construction with dynamic parameters,,4877,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Medium): Network operation without exception handling for specific errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4905, 1231, 6631, 9041, 329, 2176, 8563]",0.5,4885,sast_risk,783,Network operation without exception handling for specific errors,Medium,4881,    --------,"[220, 220, 220, 24200]"
üß† ML Signal: Conditional decoding based on Python version,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 39938, 1912, 319, 11361, 2196]",0.5,4937,ml_signal,785,Conditional decoding based on Python version,,4885,                ÊòéÁªÜÊï∞ÊçÆÊó•Êúü formatÔºöYYYY-MM-DD ÈªòËÆ§‰∏∫Á©∫'',"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10545, 246, 236, 163, 119, 228, 46763, 108, 162, 235, 106, 33768, 98, 17312, 253, 5794, 171, 120, 248, 26314, 26314, 12, 12038, 12, 16458, 16268, 119, 246, 164, 106, 97, 10310, 118, 163, 102, 118, 7061]"
üß† ML Signal: Use of regular expressions to extract data,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 3218, 14700, 284, 7925, 1366]",0.5,4987,ml_signal,787,Use of regular expressions to extract data,,4937,                 Â¶ÇÈÅáÁΩëÁªúÁ≠âÈóÆÈ¢òÈáçÂ§çÊâßË°åÁöÑÊ¨°Êï∞ ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10263, 99, 224, 34402, 229, 163, 121, 239, 163, 119, 250, 163, 255, 231, 29785, 106, 165, 95, 246, 34932, 235, 13783, 235, 33699, 100, 26193, 234, 21410, 162, 105, 94, 46763, 108, 220]"
‚ö†Ô∏è SAST Risk (Low): Use of json.loads can lead to security issues if input is not sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 33918, 13, 46030, 460, 1085, 284, 2324, 2428, 611, 5128, 318, 407, 5336, 36951]",0.5,4991,sast_risk,790,Use of json.loads can lead to security issues if input is not sanitized,Low,4987,    ,"[220, 220, 220, 220]"
üß† ML Signal: Conditional extraction of dictionary values,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 22236, 286, 22155, 3815]",0.5,5008,ml_signal,795,Conditional extraction of dictionary values,,4991,    stockCode:Ê†áÁöÑËØÅÂà∏‰ª£Á†Å,"[220, 220, 220, 4283, 10669, 25, 43718, 229, 21410, 46237, 223, 26344, 116, 47987, 163, 254, 223]"
üß† ML Signal: Nested data extraction and processing,"[8582, 100, 254, 10373, 26484, 25, 399, 7287, 1366, 22236, 290, 7587]",0.5,5037,ml_signal,802,Nested data extraction and processing,,5008,    rzrqye:ËûçËµÑËûçÂà∏‰ΩôÈ¢ù(ÂÖÉ),"[220, 220, 220, 374, 89, 81, 80, 5948, 25, 164, 252, 235, 164, 113, 226, 164, 252, 235, 26344, 116, 19526, 247, 165, 95, 251, 7, 17739, 225, 8]"
‚úÖ Best Practice: Use of pandas for data manipulation,"[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 329, 1366, 17512]",0.5,5059,best_practice,811,Use of pandas for data manipulation,,5037,                return pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 3419]"
‚úÖ Best Practice: Use of append with ignore_index for DataFrame,"[26486, 227, 6705, 19939, 25, 5765, 286, 24443, 351, 8856, 62, 9630, 329, 6060, 19778]",0.5,5081,best_practice,811,Use of append with ignore_index for DataFrame,,5059,                return pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 3419]"
üß† ML Signal: Filtering DataFrame based on condition,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 6060, 19778, 1912, 319, 4006]",0.5,5111,ml_signal,824,Filtering DataFrame based on condition,,5081,"                  retry_count=3, pause=0.001):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 28, 18, 11, 14985, 28, 15, 13, 8298, 2599]"
‚ö†Ô∏è SAST Risk (Low): Generic exception handling without specific error types,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041, 1231, 2176, 4049, 3858]",0.5,5141,sast_risk,824,Generic exception handling without specific error types,Low,5111,"                  retry_count=3, pause=0.001):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 28, 18, 11, 14985, 28, 15, 13, 8298, 2599]"
‚ö†Ô∏è SAST Risk (Medium): Raising IOError with a generic error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7567, 1710, 24418, 12331, 351, 257, 14276, 4049, 3275]",0.5,5150,sast_risk,826,Raising IOError with a generic error message,Medium,5141,        return None,"[220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
‚úÖ Best Practice: Add a docstring to describe the function's purpose and return value,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 1441, 1988]",0.5,5169,best_practice,810,Add a docstring to describe the function's purpose and return value,,5150,            if len(lines) <= 200:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 6615, 8, 19841, 939, 25]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk if 'rv' or 'ct' are user-controlled and not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 611, 705, 81, 85, 6, 393, 705, 310, 6, 389, 2836, 12, 14401, 290, 407, 31031]",0.5,5199,sast_risk,824,Potential risk if 'rv' or 'ct' are user-controlled and not validated,Medium,5169,"                  retry_count=3, pause=0.001):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 28, 18, 11, 14985, 28, 15, 13, 8298, 2599]"
üß† ML Signal: Usage of external client to fetch data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 5456, 284, 21207, 1366]",1.0,5220,ml_signal,828,Usage of external client to fetch data,,5199,        code = ct._code_to_symbol(code),"[220, 220, 220, 220, 220, 220, 220, 2438, 796, 269, 83, 13557, 8189, 62, 1462, 62, 1837, 23650, 7, 8189, 8]"
‚úÖ Best Practice: Ensure compatibility with Python 3 by checking version,"[26486, 227, 6705, 19939, 25, 48987, 17764, 351, 11361, 513, 416, 10627, 2196]",1.0,5227,best_practice,830,Ensure compatibility with Python 3 by checking version,,5220,    qdate = '',"[220, 220, 220, 10662, 4475, 796, 10148]"
‚ö†Ô∏è SAST Risk (Low): json.loads can raise exceptions if content is not valid JSON,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33918, 13, 46030, 460, 5298, 13269, 611, 2695, 318, 407, 4938, 19449]",1.0,5249,sast_risk,832,json.loads can raise exceptions if content is not valid JSON,Low,5227,"        qdate = du.get_q_date(year, quarter)","[220, 220, 220, 220, 220, 220, 220, 10662, 4475, 796, 7043, 13, 1136, 62, 80, 62, 4475, 7, 1941, 11, 3860, 8]"
üß† ML Signal: Conversion of JSON data to DataFrame,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 19449, 1366, 284, 6060, 19778]",1.0,5262,ml_signal,834,Conversion of JSON data to DataFrame,,5249,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
‚úÖ Best Practice: Use lambda functions for concise data transformations,"[26486, 227, 6705, 19939, 25, 5765, 37456, 5499, 329, 35327, 1366, 38226]",0.5,5310,best_practice,836,Use lambda functions for concise data transformations,,5262,"            request = Request(rv.TOP10_HOLDERS_URL%(ct.P_TYPE['http'], ct.DOMAINS['gw'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 81, 85, 13, 35222, 940, 62, 39, 15173, 4877, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 70, 86, 6, 4357]"
üß† ML Signal: Data cleaning by replacing '-' with NaN,"[8582, 100, 254, 10373, 26484, 25, 6060, 12724, 416, 13586, 705, 19355, 351, 11013, 45]",0.5,5354,ml_signal,837,Data cleaning by replacing '-' with NaN,,5310,"                                    gdtype, code.upper()))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 308, 67, 4906, 11, 2438, 13, 45828, 3419, 4008]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'rv.HSGT_TEMP' is not in DataFrame,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 81, 85, 13, 7998, 19555, 62, 51, 39494, 6, 318, 407, 287, 6060, 19778]",0.5,5398,sast_risk,837,Potential KeyError if 'rv.HSGT_TEMP' is not in DataFrame,Low,5354,"                                    gdtype, code.upper()))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 308, 67, 4906, 11, 2438, 13, 45828, 3419, 4008]"
‚ö†Ô∏è SAST Risk (Low): Potential KeyError if 'rv.HSGT_COLS' does not match DataFrame columns,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7383, 12331, 611, 705, 81, 85, 13, 7998, 19555, 62, 25154, 50, 6, 857, 407, 2872, 6060, 19778, 15180]",0.5,5442,sast_risk,837,Potential KeyError if 'rv.HSGT_COLS' does not match DataFrame columns,Low,5398,"                                    gdtype, code.upper()))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 308, 67, 4906, 11, 2438, 13, 45828, 3419, 4008]"
‚úÖ Best Practice: Sort DataFrame for consistent data ordering,"[26486, 227, 6705, 19939, 25, 33947, 6060, 19778, 329, 6414, 1366, 16216]",1.0,5486,best_practice,837,Sort DataFrame for consistent data ordering,,5442,"                                    gdtype, code.upper()))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 308, 67, 4906, 11, 2438, 13, 45828, 3419, 4008]"
üß† ML Signal: Returning a DataFrame object,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 2134]",0.5,5530,ml_signal,837,Returning a DataFrame object,,5486,"                                    gdtype, code.upper()))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 308, 67, 4906, 11, 2438, 13, 45828, 3419, 4008]"
‚úÖ Best Practice: Provide a docstring for the function to describe its purpose and parameters,"[26486, 227, 6705, 19939, 25, 44290, 257, 2205, 8841, 329, 262, 2163, 284, 6901, 663, 4007, 290, 10007]",1.0,5578,best_practice,836,Provide a docstring for the function to describe its purpose and parameters,,5530,"            request = Request(rv.TOP10_HOLDERS_URL%(ct.P_TYPE['http'], ct.DOMAINS['gw'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 81, 85, 13, 35222, 940, 62, 39, 15173, 4877, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 70, 86, 6, 4357]"
‚úÖ Best Practice: Convert date to a consistent format for processing,"[26486, 227, 6705, 19939, 25, 38240, 3128, 284, 257, 6414, 5794, 329, 7587]",1.0,5605,best_practice,857,Convert date to a consistent format for processing,,5578,                    hold = inrow['cgs'],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1745, 796, 287, 808, 17816, 66, 14542, 20520]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of CSV injection if the URL or data is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 44189, 16954, 611, 262, 10289, 393, 1366, 318, 407, 6105, 5336, 36951]",0.5,5644,sast_risk,860,Potential risk of CSV injection if the URL or data is not properly sanitized,Medium,5605,"                    dlist.append([qt, name, hold, h_pro, sharetype, status])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 288, 4868, 13, 33295, 26933, 39568, 11, 1438, 11, 1745, 11, 289, 62, 1676, 11, 2648, 4906, 11, 3722, 12962]"
üß† ML Signal: Usage of external data source (CSV file) for data processing,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 1366, 2723, 357, 7902, 53, 2393, 8, 329, 1366, 7587]",0.5,5683,ml_signal,860,Usage of external data source (CSV file) for data processing,,5644,"                    dlist.append([qt, name, hold, h_pro, sharetype, status])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 288, 4868, 13, 33295, 26933, 39568, 11, 1438, 11, 1745, 11, 289, 62, 1676, 11, 2648, 4906, 11, 3722, 12962]"
‚úÖ Best Practice: Return the DataFrame for further processing or analysis,"[26486, 227, 6705, 19939, 25, 8229, 262, 6060, 19778, 329, 2252, 7587, 393, 3781]",1.0,5713,best_practice,862,Return the DataFrame for further processing or analysis,,5683,"                data = data.append(ddata, ignore_index=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 33295, 7, 1860, 1045, 11, 8856, 62, 9630, 28, 17821, 8]"
‚úÖ Best Practice: Ensure the date is consistently formatted by removing hyphens.,"[26486, 227, 6705, 19939, 25, 48987, 262, 3128, 318, 9835, 39559, 416, 10829, 5328, 5135, 13]",1.0,5717,best_practice,875,Ensure the date is consistently formatted by removing hyphens.,,5713,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of CSV injection if the data source is untrusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 44189, 16954, 611, 262, 1366, 2723, 318, 1418, 81, 8459, 13]",1.0,5745,sast_risk,876,Potential risk of CSV injection if the data source is untrusted.,Medium,5717,    Ëé∑ÂèñÊ≤™Ê∑±Ê∏ØÈÄöËµÑÈáëÊµÅÂêë,"[220, 220, 220, 5525, 236, 115, 20998, 244, 162, 110, 103, 162, 115, 109, 162, 116, 107, 34460, 248, 164, 113, 226, 34932, 239, 38184, 223, 28938, 239]"
üß† ML Signal: Reading CSV files is a common operation that can be used to identify data processing patterns.,"[8582, 100, 254, 10373, 26484, 25, 11725, 44189, 3696, 318, 257, 2219, 4905, 326, 460, 307, 973, 284, 5911, 1366, 7587, 7572, 13]",0.5,5750,ml_signal,879,Reading CSV files is a common operation that can be used to identify data processing patterns.,,5745,    --------------,"[220, 220, 220, 220, 26171]"
üß† ML Signal: Returning a DataFrame is a common pattern in data processing functions.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 318, 257, 2219, 3912, 287, 1366, 7587, 5499, 13]",0.5,5771,ml_signal,881,Returning a DataFrame is a common pattern in data processing functions.,,5750,    ggt_ss: Ê∏ØËÇ°ÈÄö(Ê≤™),"[220, 220, 220, 308, 13655, 62, 824, 25, 10545, 116, 107, 164, 224, 94, 34460, 248, 7, 162, 110, 103, 8]"
‚úÖ Best Practice: Add import statement for pandas to ensure the code runs without errors,"[26486, 227, 6705, 19939, 25, 3060, 1330, 2643, 329, 19798, 292, 284, 4155, 262, 2438, 4539, 1231, 8563]",1.0,5785,best_practice,880,Add import statement for pandas to ensure the code runs without errors,,5771,    date: ‰∫§ÊòìÊó•Êúü,"[220, 220, 220, 3128, 25, 220, 12859, 97, 23626, 241, 33768, 98, 17312, 253]"
‚úÖ Best Practice: Add import statement for ct (assuming it's a module) to ensure the code runs without errors,"[26486, 227, 6705, 19939, 25, 3060, 1330, 2643, 329, 269, 83, 357, 32935, 340, 338, 257, 8265, 8, 284, 4155, 262, 2438, 4539, 1231, 8563]",1.0,5806,best_practice,881,Add import statement for ct (assuming it's a module) to ensure the code runs without errors,,5785,    ggt_ss: Ê∏ØËÇ°ÈÄö(Ê≤™),"[220, 220, 220, 308, 13655, 62, 824, 25, 10545, 116, 107, 164, 224, 94, 34460, 248, 7, 162, 110, 103, 8]"
‚úÖ Best Practice: Ensure consistent string formatting by using a single quote style,"[26486, 227, 6705, 19939, 25, 48987, 6414, 4731, 33313, 416, 1262, 257, 2060, 9577, 3918]",0.5,5819,best_practice,893,Ensure consistent string formatting by using a single quote style,,5806,    df = pd.DataFrame(js),"[220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 7, 8457, 8]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of CSV injection if the data is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 44189, 16954, 611, 262, 1366, 318, 407, 6105, 5336, 36951]",0.5,5835,sast_risk,896,Potential risk of CSV injection if the data is not properly sanitized,Medium,5819,    df = df[rv.HSGT_TEMP],"[220, 220, 220, 47764, 796, 47764, 58, 81, 85, 13, 7998, 19555, 62, 51, 39494, 60]"
üß† ML Signal: Usage of external data source (CSV file) which could be used to train models on data ingestion patterns,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 1366, 2723, 357, 7902, 53, 2393, 8, 543, 714, 307, 973, 284, 4512, 4981, 319, 1366, 38382, 7572]",0.5,5851,ml_signal,897,Usage of external data source (CSV file) which could be used to train models on data ingestion patterns,,5835,    df.columns = rv.HSGT_COLS,"[220, 220, 220, 47764, 13, 28665, 82, 796, 374, 85, 13, 7998, 19555, 62, 25154, 50]"
‚úÖ Best Practice: Add a function docstring to describe the function's purpose and return value,"[26486, 227, 6705, 19939, 25, 3060, 257, 2163, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 1441, 1988]",0.5,5867,best_practice,897,Add a function docstring to describe the function's purpose and return value,,5851,    df.columns = rv.HSGT_COLS,"[220, 220, 220, 47764, 13, 28665, 82, 796, 374, 85, 13, 7998, 19555, 62, 25154, 50]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the URL used in pd.read_csv is from a trusted source to prevent CSV injection attacks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 10289, 973, 287, 279, 67, 13, 961, 62, 40664, 318, 422, 257, 13467, 2723, 284, 2948, 44189, 16954, 3434]",1.0,5873,sast_risk,910,Ensure that the URL used in pd.read_csv is from a trusted source to prevent CSV injection attacks,Low,5867,    return DataFrame,"[220, 220, 220, 1441, 6060, 19778]"
üß† ML Signal: Usage of pd.read_csv indicates data ingestion from a CSV file,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 279, 67, 13, 961, 62, 40664, 9217, 1366, 38382, 422, 257, 44189, 2393]",0.5,5888,ml_signal,913,Usage of pd.read_csv indicates data ingestion from a CSV file,,5873,    name: ËØÅÂà∏ÂêçÁß∞,"[220, 220, 220, 1438, 25, 5525, 107, 223, 26344, 116, 28938, 235, 163, 100, 108]"
‚úÖ Best Practice: Use parameterized URLs to avoid hardcoding and improve maintainability,"[26486, 227, 6705, 19939, 25, 5765, 11507, 1143, 32336, 284, 3368, 1327, 66, 7656, 290, 2987, 5529, 1799]",0.5,5903,best_practice,913,Use parameterized URLs to avoid hardcoding and improve maintainability,,5888,    name: ËØÅÂà∏ÂêçÁß∞,"[220, 220, 220, 1438, 25, 5525, 107, 223, 26344, 116, 28938, 235, 163, 100, 108]"
üß† ML Signal: Returning a DataFrame is a common pattern in data processing functions,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 318, 257, 2219, 3912, 287, 1366, 7587, 5499]",1.0,5921,ml_signal,915,Returning a DataFrame is a common pattern in data processing functions,,5903,    buy_total:ËûçËµÑ‰ΩôÈ¢ù,"[220, 220, 220, 2822, 62, 23350, 25, 164, 252, 235, 164, 113, 226, 19526, 247, 165, 95, 251]"
‚úÖ Best Practice: Function docstring provides a clear description of the function's purpose and return value.,"[26486, 227, 6705, 19939, 25, 15553, 2205, 8841, 3769, 257, 1598, 6764, 286, 262, 2163, 338, 4007, 290, 1441, 1988, 13]",1.0,5938,best_practice,914,Function docstring provides a clear description of the function's purpose and return value.,,5921,    buy: ‰ªäÊó•‰π∞ÂÖ•È¢ù,"[220, 220, 220, 2822, 25, 220, 20015, 232, 33768, 98, 20046, 108, 17739, 98, 165, 95, 251]"
"‚ö†Ô∏è SAST Risk (Low): No error handling for file reading, which may raise exceptions if the file is missing or corrupted.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 1400, 4049, 9041, 329, 2393, 3555, 11, 543, 743, 5298, 13269, 611, 262, 2393, 318, 4814, 393, 26940, 13]",1.0,5943,sast_risk,928,"No error handling for file reading, which may raise exceptions if the file is missing or corrupted.",Low,5938,    return df,"[220, 220, 220, 1441, 47764]"
üß† ML Signal: Usage of lambda function for data transformation.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 2163, 329, 1366, 13389, 13]",1.0,5970,ml_signal,933,Usage of lambda function for data transformation.,,5943,         Ê≤™Ê∑±ËûçÂà∏ËûçÂà∏Ê†áÁöÑ,"[220, 220, 220, 220, 220, 220, 220, 220, 10545, 110, 103, 162, 115, 109, 164, 252, 235, 26344, 116, 164, 252, 235, 26344, 116, 43718, 229, 21410]"
üß† ML Signal: Use of np.where for conditional data replacement.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 45941, 13, 3003, 329, 26340, 1366, 9014, 13]",0.5,5975,ml_signal,935,Use of np.where for conditional data replacement.,,5970,    ---------------,"[220, 220, 220, 220, 24305]"
‚úÖ Best Practice: Provide a default value for the 'date' parameter to ensure function flexibility.,"[26486, 227, 6705, 19939, 25, 44290, 257, 4277, 1988, 329, 262, 705, 4475, 6, 11507, 284, 4155, 2163, 13688, 13]",0.5,5979,best_practice,934,Provide a default value for the 'date' parameter to ensure function flexibility.,,5975,    Parameters,"[220, 220, 220, 40117]"
‚úÖ Best Practice: Convert date to a consistent format for further processing.,"[26486, 227, 6705, 19939, 25, 38240, 3128, 284, 257, 6414, 5794, 329, 2252, 7587, 13]",0.5,5984,best_practice,958,Convert date to a consistent format for further processing.,,5979,    ---------------,"[220, 220, 220, 220, 24305]"
‚ö†Ô∏è SAST Risk (Medium): Ensure that the URL is properly sanitized to prevent injection attacks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 48987, 326, 262, 10289, 318, 6105, 5336, 36951, 284, 2948, 16954, 3434, 13]",1.0,5996,sast_risk,961,Ensure that the URL is properly sanitized to prevent injection attacks.,Medium,5984,            ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220]"
"üß† ML Signal: Reading data from a URL, which could be used to identify network access patterns.","[8582, 100, 254, 10373, 26484, 25, 11725, 1366, 422, 257, 10289, 11, 543, 714, 307, 973, 284, 5911, 3127, 1895, 7572, 13]",0.5,6008,ml_signal,961,"Reading data from a URL, which could be used to identify network access patterns.",,5996,            ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220]"
‚úÖ Best Practice: Return a DataFrame for structured data handling.,"[26486, 227, 6705, 19939, 25, 8229, 257, 6060, 19778, 329, 20793, 1366, 9041, 13]",0.5,6013,best_practice,963,Return a DataFrame for structured data handling.,,6008,    --------------,"[220, 220, 220, 220, 26171]"
‚úÖ Best Practice: Consider specifying default values for start_date and end_date as None instead of empty strings for better type consistency.,"[26486, 227, 6705, 19939, 25, 12642, 31577, 4277, 3815, 329, 923, 62, 4475, 290, 886, 62, 4475, 355, 6045, 2427, 286, 6565, 13042, 329, 1365, 2099, 15794, 13]",0.5,6019,best_practice,962,Consider specifying default values for start_date and end_date as None instead of empty strings for better type consistency.,,6013,    return DataFrame,"[220, 220, 220, 1441, 6060, 19778]"
‚ö†Ô∏è SAST Risk (Low): Ensure that the file path and content are trusted to prevent CSV injection attacks.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 262, 2393, 3108, 290, 2695, 389, 13467, 284, 2948, 44189, 16954, 3434, 13]",1.0,6035,sast_risk,983,Ensure that the file path and content are trusted to prevent CSV injection attacks.,Low,6019,    deals: Ë¥®ÊäºÊ¨°Êï∞,"[220, 220, 220, 7529, 25, 5525, 112, 101, 162, 232, 120, 162, 105, 94, 46763, 108]"
‚ö†Ô∏è SAST Risk (Low): Ensure that start_date is validated and sanitized to prevent logical errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 923, 62, 4475, 318, 31031, 290, 5336, 36951, 284, 2948, 12219, 8563, 13]",0.5,6065,sast_risk,989,Ensure that start_date is validated and sanitized to prevent logical errors.,Low,6035,"    df = pd.read_csv(ct.GPZY_URL%(ct.P_TYPE['http'],","[220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 40664, 7, 310, 13, 16960, 57, 56, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357]"
‚ö†Ô∏è SAST Risk (Low): Ensure that end_date is validated and sanitized to prevent logical errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 886, 62, 4475, 318, 31031, 290, 5336, 36951, 284, 2948, 12219, 8563, 13]",0.5,6070,sast_risk,992,Ensure that end_date is validated and sanitized to prevent logical errors.,Low,6065,    return df,"[220, 220, 220, 1441, 47764]"
‚úÖ Best Practice: Consider using vectorized operations for better performance.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 15879, 1143, 4560, 329, 1365, 2854, 13]",0.5,6070,best_practice,994,Consider using vectorized operations for better performance.,,6070,,[]
üß† ML Signal: Mapping and formatting operations on DataFrame columns.,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 290, 33313, 4560, 319, 6060, 19778, 15180, 13]",0.5,6074,ml_signal,996,Mapping and formatting operations on DataFrame columns.,,6070,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Conversion of data types in DataFrame columns.,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1366, 3858, 287, 6060, 19778, 15180, 13]",0.5,6078,ml_signal,998,Conversion of data types in DataFrame columns.,,6074,    ,"[220, 220, 220, 220]"
‚úÖ Best Practice: Use of a leading underscore in the function name suggests it's intended for internal use.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 3756, 44810, 287, 262, 2163, 1438, 5644, 340, 338, 5292, 329, 5387, 779, 13]",0.5,6078,best_practice,994,Use of a leading underscore in the function name suggests it's intended for internal use.,,6078,,[]
‚úÖ Best Practice: Importing only the required function from a module.,"[26486, 227, 6705, 19939, 25, 17267, 278, 691, 262, 2672, 2163, 422, 257, 8265, 13]",0.5,6098,best_practice,997,Importing only the required function from a module.,,6078,    ËÇ°Á•®Ë¥®ÊäºÊï∞ÊçÆ,"[220, 220, 220, 5525, 224, 94, 163, 98, 101, 164, 112, 101, 162, 232, 120, 46763, 108, 162, 235, 106]"
üß† ML Signal: Generates a random number within a specified range.,"[8582, 100, 254, 10373, 26484, 25, 2980, 689, 257, 4738, 1271, 1626, 257, 7368, 2837, 13]",1.0,6102,ml_signal,998,Generates a random number within a specified range.,,6098,    ,"[220, 220, 220, 220]"
"‚ö†Ô∏è SAST Risk (Low): The function returns a random number as a string, which could be misused if not properly validated elsewhere.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 383, 2163, 5860, 257, 4738, 1271, 355, 257, 4731, 11, 543, 714, 307, 2984, 1484, 611, 407, 6105, 31031, 8057, 13]",0.5,6106,sast_risk,998,"The function returns a random number as a string, which could be misused if not properly validated elsewhere.",Low,6102,    ,"[220, 220, 220, 220]"

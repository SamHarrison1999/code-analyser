[
  {
    "line": 9,
    "text": "from __future__ import division",
    "annotation": "\u2705 Best Practice: Importing division from __future__ ensures consistent division behavior across Python 2 and 3.",
    "confidence": 1.0,
    "tokens": [
      6738,
      11593,
      37443,
      834,
      1330,
      7297
    ],
    "start_token": 0,
    "end_token": 6,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      7297,
      422,
      11593,
      37443,
      834,
      19047,
      6414,
      7297,
      4069,
      1973,
      11361,
      362,
      290,
      513,
      13
    ],
    "label": "best_practice",
    "reason": "Importing division from __future__ ensures consistent division behavior across Python 2 and 3."
  },
  {
    "line": 28,
    "text": "except ImportError:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using urllib2 in Python 2 can lead to compatibility issues. Consider using a library that supports both Python 2 and 3.",
    "confidence": 0.5,
    "tokens": [
      16341,
      17267,
      12331,
      25
    ],
    "start_token": 6,
    "end_token": 10,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      2956,
      297,
      571,
      17,
      287,
      11361,
      362,
      460,
      1085,
      284,
      17764,
      2428,
      13,
      12642,
      1262,
      257,
      5888,
      326,
      6971,
      1111,
      11361,
      362,
      290,
      513,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using urllib2 in Python 2 can lead to compatibility issues. Consider using a library that supports both Python 2 and 3."
  },
  {
    "line": 66,
    "text": "    ",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using urlopen without proper validation or sanitization of the URL can lead to security vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220
    ],
    "start_token": 10,
    "end_token": 14,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      19016,
      9654,
      1231,
      1774,
      21201,
      393,
      5336,
      270,
      1634,
      286,
      262,
      10289,
      460,
      1085,
      284,
      2324,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using urlopen without proper validation or sanitization of the URL can lead to security vulnerabilities."
  },
  {
    "line": 70,
    "text": "            request = Request(url)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide specific errors and make debugging difficult.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      796,
      19390,
      7,
      6371,
      8
    ],
    "start_token": 14,
    "end_token": 31,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      2176,
      8563,
      290,
      787,
      28769,
      2408,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide specific errors and make debugging difficult."
  },
  {
    "line": 74,
    "text": "        except Exception as e:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using json.loads on data from an untrusted source can lead to security vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 31,
    "end_token": 43,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      33918,
      13,
      46030,
      319,
      1366,
      422,
      281,
      1418,
      81,
      8459,
      2723,
      460,
      1085,
      284,
      2324,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using json.loads on data from an untrusted source can lead to security vulnerabilities."
  },
  {
    "line": 85,
    "text": "            df = pd.DataFrame(js['record'], columns=cols)",
    "annotation": "\u2705 Best Practice: Using applymap for element-wise operations on DataFrame is efficient and readable.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      7,
      8457,
      17816,
      22105,
      6,
      4357,
      15180,
      28,
      4033,
      82,
      8
    ],
    "start_token": 43,
    "end_token": 72,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      4174,
      8899,
      329,
      5002,
      12,
      3083,
      4560,
      319,
      6060,
      19778,
      318,
      6942,
      290,
      31744,
      13
    ],
    "label": "best_practice",
    "reason": "Using applymap for element-wise operations on DataFrame is efficient and readable."
  },
  {
    "line": 89,
    "text": "            for col in cols[1:]:",
    "annotation": "\u2705 Best Practice: Explicitly converting data types ensures data consistency and prevents unexpected behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      951,
      287,
      951,
      82,
      58,
      16,
      25,
      5974
    ],
    "start_token": 72,
    "end_token": 92,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      23202,
      1366,
      3858,
      19047,
      1366,
      15794,
      290,
      15174,
      10059,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly converting data types ensures data consistency and prevents unexpected behavior."
  },
  {
    "line": 97,
    "text": "            df = df.set_index('date')",
    "annotation": "\u2705 Best Practice: Setting the index to a meaningful column like 'date' improves data manipulation and access.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      47764,
      13,
      2617,
      62,
      9630,
      10786,
      4475,
      11537
    ],
    "start_token": 92,
    "end_token": 113,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      262,
      6376,
      284,
      257,
      11570,
      5721,
      588,
      705,
      4475,
      6,
      19575,
      1366,
      17512,
      290,
      1895,
      13
    ],
    "label": "best_practice",
    "reason": "Setting the index to a meaningful column like 'date' improves data manipulation and access."
  },
  {
    "line": 97,
    "text": "            df = df.set_index('date')",
    "annotation": "\u2705 Best Practice: Sorting the DataFrame by index ensures that data is in a predictable order.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      47764,
      13,
      2617,
      62,
      9630,
      10786,
      4475,
      11537
    ],
    "start_token": 113,
    "end_token": 134,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      262,
      6060,
      19778,
      416,
      6376,
      19047,
      326,
      1366,
      318,
      287,
      257,
      20039,
      1502,
      13
    ],
    "label": "best_practice",
    "reason": "Sorting the DataFrame by index ensures that data is in a predictable order."
  },
  {
    "line": 106,
    "text": "     Parameters",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic IOError without specific context can make error handling less informative.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 134,
    "end_token": 139,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      24418,
      12331,
      1231,
      2176,
      4732,
      460,
      787,
      4049,
      9041,
      1342,
      30304,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic IOError without specific context can make error handling less informative."
  },
  {
    "line": 106,
    "text": "     Parameters",
    "annotation": "\u2705 Best Practice: Consider using a logger instead of writing directly to the console for better control over logging levels and outputs.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 139,
    "end_token": 144,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      49706,
      2427,
      286,
      3597,
      3264,
      284,
      262,
      8624,
      329,
      1365,
      1630,
      625,
      18931,
      2974,
      290,
      23862,
      13
    ],
    "label": "best_practice",
    "reason": "Consider using a logger instead of writing directly to the console for better control over logging levels and outputs."
  },
  {
    "line": 107,
    "text": "     ------",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of URL injection if `types` or `page` are not properly sanitized.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      40103
    ],
    "start_token": 144,
    "end_token": 149,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      10289,
      16954,
      611,
      4600,
      19199,
      63,
      393,
      4600,
      7700,
      63,
      389,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of URL injection if `types` or `page` are not properly sanitized."
  },
  {
    "line": 111,
    "text": "        DataFrame \u5f53\u65e5\u6240\u6709\u80a1\u7968\u4ea4\u6613\u6570\u636e(DataFrame)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): The use of `urlopen` without proper exception handling can lead to unhandled exceptions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6060,
      19778,
      10263,
      121,
      241,
      33768,
      98,
      33699,
      222,
      17312,
      231,
      164,
      224,
      94,
      163,
      98,
      101,
      12859,
      97,
      23626,
      241,
      46763,
      108,
      162,
      235,
      106,
      7,
      6601,
      19778,
      8
    ],
    "start_token": 149,
    "end_token": 186,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      383,
      779,
      286,
      4600,
      6371,
      9654,
      63,
      1231,
      1774,
      6631,
      9041,
      460,
      1085,
      284,
      555,
      38788,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "The use of `urlopen` without proper exception handling can lead to unhandled exceptions."
  },
  {
    "line": 115,
    "text": "                                 ct.PAGES['jv'], types, page))",
    "annotation": "\u2705 Best Practice: Compile regex patterns outside of frequently called functions to improve performance.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      4537,
      48075,
      17816,
      73,
      85,
      6,
      4357,
      3858,
      11,
      2443,
      4008
    ],
    "start_token": 186,
    "end_token": 232,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3082,
      576,
      40364,
      7572,
      2354,
      286,
      6777,
      1444,
      5499,
      284,
      2987,
      2854,
      13
    ],
    "label": "best_practice",
    "reason": "Compile regex patterns outside of frequently called functions to improve performance."
  },
  {
    "line": 117,
    "text": "    if text == 'null':",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using `text.decode('gbk')` without handling potential decoding errors can lead to exceptions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      2420,
      6624,
      705,
      8423,
      10354
    ],
    "start_token": 232,
    "end_token": 241,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      4600,
      5239,
      13,
      12501,
      1098,
      10786,
      22296,
      74,
      11537,
      63,
      1231,
      9041,
      2785,
      39938,
      8563,
      460,
      1085,
      284,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using `text.decode('gbk')` without handling potential decoding errors can lead to exceptions."
  },
  {
    "line": 121,
    "text": "    text = text.replace('\"{symbol', '{\"symbol')",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on Python version indicates compatibility handling.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2420,
      796,
      2420,
      13,
      33491,
      10786,
      1,
      90,
      1837,
      23650,
      3256,
      705,
      4895,
      1837,
      23650,
      11537
    ],
    "start_token": 241,
    "end_token": 260,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      11361,
      2196,
      9217,
      17764,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on Python version indicates compatibility handling."
  },
  {
    "line": 125,
    "text": "    else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): The `encoding` parameter in `json.dumps` is deprecated in Python 3 and can lead to unexpected behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 260,
    "end_token": 265,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      383,
      4600,
      12685,
      7656,
      63,
      11507,
      287,
      4600,
      17752,
      13,
      67,
      8142,
      63,
      318,
      39224,
      287,
      11361,
      513,
      290,
      460,
      1085,
      284,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "The `encoding` parameter in `json.dumps` is deprecated in Python 3 and can lead to unexpected behavior."
  },
  {
    "line": 127,
    "text": "    js = json.loads(jstr)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Loading JSON data without validation can lead to security issues like JSON injection.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      44804,
      796,
      33918,
      13,
      46030,
      7,
      73,
      2536,
      8
    ],
    "start_token": 265,
    "end_token": 277,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      12320,
      19449,
      1366,
      1231,
      21201,
      460,
      1085,
      284,
      2324,
      2428,
      588,
      19449,
      16954,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Loading JSON data without validation can lead to security issues like JSON injection."
  },
  {
    "line": 127,
    "text": "    js = json.loads(jstr)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of `pd.DataFrame` indicates data processing and transformation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      44804,
      796,
      33918,
      13,
      46030,
      7,
      73,
      2536,
      8
    ],
    "start_token": 277,
    "end_token": 289,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4600,
      30094,
      13,
      6601,
      19778,
      63,
      9217,
      1366,
      7587,
      290,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of `pd.DataFrame` indicates data processing and transformation."
  },
  {
    "line": 127,
    "text": "    js = json.loads(jstr)",
    "annotation": "\ud83e\udde0 ML Signal: Dropping columns from DataFrame suggests data cleaning or feature selection.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      44804,
      796,
      33918,
      13,
      46030,
      7,
      73,
      2536,
      8
    ],
    "start_token": 289,
    "end_token": 301,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21045,
      2105,
      15180,
      422,
      6060,
      19778,
      5644,
      1366,
      12724,
      393,
      3895,
      6356,
      13
    ],
    "label": "ml_signal",
    "reason": "Dropping columns from DataFrame suggests data cleaning or feature selection."
  },
  {
    "line": 145,
    "text": "        retry_count : int, \u9ed8\u8ba4 3",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for NoneType error if 'src' is None or not in TICK_SRCS",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1005,
      563,
      62,
      9127,
      1058,
      493,
      11,
      16268,
      119,
      246,
      164,
      106,
      97,
      513
    ],
    "start_token": 301,
    "end_token": 322,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      6045,
      6030,
      4049,
      611,
      705,
      10677,
      6,
      318,
      6045,
      393,
      407,
      287,
      309,
      11860,
      62,
      50,
      7397,
      50
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for NoneType error if 'src' is None or not in TICK_SRCS"
  },
  {
    "line": 149,
    "text": "        src : \u6570\u636e\u6e90\u9009\u62e9\uff0c\u53ef\u8f93\u5165sn(\u65b0\u6d6a)\u3001tt(\u817e\u8baf)\u3001nt(\u7f51\u6613)\uff0c\u9ed8\u8ba4sn",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of stock code to symbol, indicating financial data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      12351,
      1058,
      10545,
      243,
      108,
      162,
      235,
      106,
      162,
      118,
      238,
      34460,
      231,
      162,
      233,
      102,
      171,
      120,
      234,
      20998,
      107,
      164,
      122,
      241,
      17739,
      98,
      16184,
      7,
      23877,
      108,
      38184,
      103,
      8,
      23513,
      926,
      7,
      164,
      227,
      122,
      164,
      106,
      107,
      8,
      23513,
      429,
      7,
      163,
      121,
      239,
      23626,
      241,
      8,
      171,
      120,
      234,
      165,
      119,
      246,
      164,
      106,
      97,
      16184
    ],
    "start_token": 322,
    "end_token": 391,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      4283,
      2438,
      284,
      6194,
      11,
      12739,
      3176,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Conversion of stock code to symbol, indicating financial data processing"
  },
  {
    "line": 151,
    "text": "     -------",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of stock code to symbol with digits, indicating financial data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 391,
    "end_token": 396,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      4283,
      2438,
      284,
      6194,
      351,
      19561,
      11,
      12739,
      3176,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Conversion of stock code to symbol with digits, indicating financial data processing"
  },
  {
    "line": 151,
    "text": "     -------",
    "annotation": "\ud83e\udde0 ML Signal: Date string manipulation, common in time-series data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 396,
    "end_token": 401,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7536,
      4731,
      17512,
      11,
      2219,
      287,
      640,
      12,
      25076,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Date string manipulation, common in time-series data processing"
  },
  {
    "line": 151,
    "text": "     -------",
    "annotation": "\ud83e\udde0 ML Signal: URL construction for data retrieval, indicating web scraping or API usage",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 401,
    "end_token": 406,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      5103,
      329,
      1366,
      45069,
      11,
      12739,
      3992,
      46743,
      393,
      7824,
      8748
    ],
    "label": "ml_signal",
    "reason": "URL construction for data retrieval, indicating web scraping or API usage"
  },
  {
    "line": 164,
    "text": "            ct.TICK_SRCS[1] : ct.TICK_PRICE_URL_TT % (ct.P_TYPE['http'], ct.DOMAINS['tt'], ct.PAGES['idx'],",
    "annotation": "\ud83e\udde0 ML Signal: Retry pattern, useful for training models on network reliability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      51,
      11860,
      62,
      50,
      7397,
      50,
      58,
      16,
      60,
      1058,
      269,
      83,
      13,
      51,
      11860,
      62,
      4805,
      8476,
      62,
      21886,
      62,
      15751,
      4064,
      357,
      310,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357,
      269,
      83,
      13,
      39170,
      32,
      20913,
      17816,
      926,
      6,
      4357,
      269,
      83,
      13,
      4537,
      48075,
      17816,
      312,
      87,
      6,
      4357
    ],
    "start_token": 406,
    "end_token": 473,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      563,
      3912,
      11,
      4465,
      329,
      3047,
      4981,
      319,
      3127,
      17843
    ],
    "label": "ml_signal",
    "reason": "Retry pattern, useful for training models on network reliability"
  },
  {
    "line": 166,
    "text": "            ct.TICK_SRCS[2] : ct.TICK_PRICE_URL_NT % (ct.P_TYPE['http'], ct.DOMAINS['163'], date[0:4], ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for high-frequency requests, consider increasing pause",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      51,
      11860,
      62,
      50,
      7397,
      50,
      58,
      17,
      60,
      1058,
      269,
      83,
      13,
      51,
      11860,
      62,
      4805,
      8476,
      62,
      21886,
      62,
      11251,
      4064,
      357,
      310,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357,
      269,
      83,
      13,
      39170,
      32,
      20913,
      17816,
      24136,
      6,
      4357,
      3128,
      58,
      15,
      25,
      19,
      4357,
      220
    ],
    "start_token": 473,
    "end_token": 537,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      1029,
      12,
      35324,
      7007,
      11,
      2074,
      3649,
      14985
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for high-frequency requests, consider increasing pause"
  },
  {
    "line": 170,
    "text": "        time.sleep(pause)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Reading from URL without validation, potential for malicious input",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      32125,
      8
    ],
    "start_token": 537,
    "end_token": 550,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      11725,
      422,
      10289,
      1231,
      21201,
      11,
      2785,
      329,
      17412,
      5128
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Reading from URL without validation, potential for malicious input"
  },
  {
    "line": 174,
    "text": "                df.columns = ct.TICK_COLUMNS",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Requesting URL without validation, potential for malicious input",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      269,
      83,
      13,
      51,
      11860,
      62,
      25154,
      5883,
      8035
    ],
    "start_token": 550,
    "end_token": 579,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      19390,
      278,
      10289,
      1231,
      21201,
      11,
      2785,
      329,
      17412,
      5128
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Requesting URL without validation, potential for malicious input"
  },
  {
    "line": 176,
    "text": "                re = Request(url[src])",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Opening URL without validation, potential for malicious input",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      302,
      796,
      19390,
      7,
      6371,
      58,
      10677,
      12962
    ],
    "start_token": 579,
    "end_token": 602,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      25522,
      10289,
      1231,
      21201,
      11,
      2785,
      329,
      17412,
      5128
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Opening URL without validation, potential for malicious input"
  },
  {
    "line": 178,
    "text": "                lines = lines.decode('GBK') ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Decoding with specific encoding, potential for encoding issues",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3951,
      796,
      3951,
      13,
      12501,
      1098,
      10786,
      4579,
      42,
      11537,
      220
    ],
    "start_token": 602,
    "end_token": 628,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4280,
      7656,
      351,
      2176,
      21004,
      11,
      2785,
      329,
      21004,
      2428
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Decoding with specific encoding, potential for encoding issues"
  },
  {
    "line": 179,
    "text": "                if len(lines) < 20:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Reading from StringIO without validation, potential for malformed data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      6615,
      8,
      1279,
      1160,
      25
    ],
    "start_token": 628,
    "end_token": 651,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11725,
      422,
      10903,
      9399,
      1231,
      21201,
      11,
      2785,
      329,
      6428,
      12214,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Reading from StringIO without validation, potential for malformed data"
  },
  {
    "line": 179,
    "text": "                if len(lines) < 20:",
    "annotation": "\u2705 Best Practice: Logging exceptions instead of printing, for better error tracking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      6615,
      8,
      1279,
      1160,
      25
    ],
    "start_token": 651,
    "end_token": 674,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5972,
      2667,
      13269,
      2427,
      286,
      13570,
      11,
      329,
      1365,
      4049,
      9646
    ],
    "label": "best_practice",
    "reason": "Logging exceptions instead of printing, for better error tracking"
  },
  {
    "line": 196,
    "text": "                  \u80a1\u7968\u4ee3\u7801 e.g. 600848",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising generic IOError, consider using more specific exception",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5525,
      224,
      94,
      163,
      98,
      101,
      47987,
      163,
      254,
      223,
      304,
      13,
      70,
      13,
      10053,
      23,
      2780
    ],
    "start_token": 674,
    "end_token": 708,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      14276,
      24418,
      12331,
      11,
      2074,
      1262,
      517,
      2176,
      6631
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising generic IOError, consider using more specific exception"
  },
  {
    "line": 196,
    "text": "                  \u80a1\u7968\u4ee3\u7801 e.g. 600848",
    "annotation": "\u2705 Best Practice: Validate input parameters to ensure they meet expected formats and constraints",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5525,
      224,
      94,
      163,
      98,
      101,
      47987,
      163,
      254,
      223,
      304,
      13,
      70,
      13,
      10053,
      23,
      2780
    ],
    "start_token": 708,
    "end_token": 742,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3254,
      20540,
      5128,
      10007,
      284,
      4155,
      484,
      1826,
      2938,
      17519,
      290,
      17778
    ],
    "label": "best_practice",
    "reason": "Validate input parameters to ensure they meet expected formats and constraints"
  },
  {
    "line": 199,
    "text": "        retry_count : int, \u9ed8\u8ba4 3",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of stock code to symbol, indicating usage of financial data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1005,
      563,
      62,
      9127,
      1058,
      493,
      11,
      16268,
      119,
      246,
      164,
      106,
      97,
      513
    ],
    "start_token": 742,
    "end_token": 763,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      4283,
      2438,
      284,
      6194,
      11,
      12739,
      8748,
      286,
      3176,
      1366
    ],
    "label": "ml_signal",
    "reason": "Conversion of stock code to symbol, indicating usage of financial data"
  },
  {
    "line": 201,
    "text": "        pause : int, \u9ed8\u8ba4 0",
    "annotation": "\ud83e\udde0 ML Signal: Volume conversion, indicating financial data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14985,
      1058,
      493,
      11,
      16268,
      119,
      246,
      164,
      106,
      97,
      657
    ],
    "start_token": 763,
    "end_token": 781,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      14701,
      11315,
      11,
      12739,
      3176,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Volume conversion, indicating financial data processing"
  },
  {
    "line": 203,
    "text": "     return",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for tight loop causing high CPU usage without sufficient pause",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 781,
    "end_token": 786,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      5381,
      9052,
      6666,
      1029,
      9135,
      8748,
      1231,
      6751,
      14985
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for tight loop causing high CPU usage without sufficient pause"
  },
  {
    "line": 207,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential for URL injection if `ct.SINA_DD` is not properly sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 786,
    "end_token": 790,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      329,
      10289,
      16954,
      611,
      4600,
      310,
      13,
      50,
      28893,
      62,
      16458,
      63,
      318,
      407,
      6105,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential for URL injection if `ct.SINA_DD` is not properly sanitized"
  },
  {
    "line": 209,
    "text": "        return None",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Network operation without exception handling for specific network errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 790,
    "end_token": 799,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7311,
      4905,
      1231,
      6631,
      9041,
      329,
      2176,
      3127,
      8563
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Network operation without exception handling for specific network errors"
  },
  {
    "line": 212,
    "text": "    for _ in range(retry_count):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes the response is always encoded in 'GBK', which might not be the case",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      4808,
      287,
      2837,
      7,
      1186,
      563,
      62,
      9127,
      2599
    ],
    "start_token": 799,
    "end_token": 812,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      262,
      2882,
      318,
      1464,
      30240,
      287,
      705,
      4579,
      42,
      3256,
      543,
      1244,
      407,
      307,
      262,
      1339
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes the response is always encoded in 'GBK', which might not be the case"
  },
  {
    "line": 216,
    "text": "                                symbol, vol, date))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes CSV format is always correct and does not handle parsing errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      11,
      2322,
      11,
      3128,
      4008
    ],
    "start_token": 812,
    "end_token": 849,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      44189,
      5794,
      318,
      1464,
      3376,
      290,
      857,
      407,
      5412,
      32096,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes CSV format is always correct and does not handle parsing errors"
  },
  {
    "line": 219,
    "text": "            if len(lines) < 100:",
    "annotation": "\ud83e\udde0 ML Signal: Mapping function applied to DataFrame, indicating data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      6615,
      8,
      1279,
      1802,
      25
    ],
    "start_token": 849,
    "end_token": 868,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      2163,
      5625,
      284,
      6060,
      19778,
      11,
      12739,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Mapping function applied to DataFrame, indicating data transformation"
  },
  {
    "line": 219,
    "text": "            if len(lines) < 100:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Generic exception handling, which may hide specific errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      6615,
      8,
      1279,
      1802,
      25
    ],
    "start_token": 868,
    "end_token": 887,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42044,
      6631,
      9041,
      11,
      543,
      743,
      7808,
      2176,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Generic exception handling, which may hide specific errors"
  },
  {
    "line": 234,
    "text": "        \u83b7\u53d6\u5f53\u65e5\u5206\u7b14\u660e\u7ec6\u6570\u636e",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Raises a generic IOError, which may not accurately describe the error context",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5525,
      236,
      115,
      20998,
      244,
      37605,
      241,
      33768,
      98,
      26344,
      228,
      163,
      105,
      242,
      23626,
      236,
      163,
      119,
      228,
      46763,
      108,
      162,
      235,
      106
    ],
    "start_token": 887,
    "end_token": 918,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7567,
      2696,
      257,
      14276,
      24418,
      12331,
      11,
      543,
      743,
      407,
      14351,
      6901,
      262,
      4049,
      4732
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Raises a generic IOError, which may not accurately describe the error context"
  },
  {
    "line": 218,
    "text": "            lines = lines.decode('GBK') ",
    "annotation": "\ud83e\udde0 ML Signal: Function with multiple parameters, including optional ones with default values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3951,
      796,
      3951,
      13,
      12501,
      1098,
      10786,
      4579,
      42,
      11537,
      220
    ],
    "start_token": 918,
    "end_token": 940,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      3294,
      10007,
      11,
      1390,
      11902,
      3392,
      351,
      4277,
      3815
    ],
    "label": "ml_signal",
    "reason": "Function with multiple parameters, including optional ones with default values"
  },
  {
    "line": 235,
    "text": "    Parameters",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential NoneType dereference if code is None",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      40117
    ],
    "start_token": 940,
    "end_token": 944,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      6045,
      6030,
      390,
      35790,
      611,
      2438,
      318,
      6045
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential NoneType dereference if code is None"
  },
  {
    "line": 238,
    "text": "                  \u80a1\u7968\u4ee3\u7801 e.g. 600848",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of stock code to symbol",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5525,
      224,
      94,
      163,
      98,
      101,
      47987,
      163,
      254,
      223,
      304,
      13,
      70,
      13,
      10053,
      23,
      2780
    ],
    "start_token": 944,
    "end_token": 978,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      4283,
      2438,
      284,
      6194
    ],
    "label": "ml_signal",
    "reason": "Conversion of stock code to symbol"
  },
  {
    "line": 240,
    "text": "                  \u5982\u9047\u7f51\u7edc\u7b49\u95ee\u9898\u91cd\u590d\u6267\u884c\u7684\u6b21\u6570",
    "annotation": "\ud83e\udde0 ML Signal: Usage of current date in function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10263,
      99,
      224,
      34402,
      229,
      163,
      121,
      239,
      163,
      119,
      250,
      163,
      255,
      231,
      29785,
      106,
      165,
      95,
      246,
      34932,
      235,
      13783,
      235,
      33699,
      100,
      26193,
      234,
      21410,
      162,
      105,
      94,
      46763,
      108
    ],
    "start_token": 978,
    "end_token": 1028,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      1459,
      3128,
      287,
      2163
    ],
    "label": "ml_signal",
    "reason": "Usage of current date in function"
  },
  {
    "line": 241,
    "text": "        pause : int, \u9ed8\u8ba4 0",
    "annotation": "\ud83e\udde0 ML Signal: Retry pattern with a loop",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14985,
      1058,
      493,
      11,
      16268,
      119,
      246,
      164,
      106,
      97,
      657
    ],
    "start_token": 1028,
    "end_token": 1046,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      563,
      3912,
      351,
      257,
      9052
    ],
    "label": "ml_signal",
    "reason": "Retry pattern with a loop"
  },
  {
    "line": 244,
    "text": "     -------",
    "annotation": "\ud83e\udde0 ML Signal: Usage of time.sleep to pause execution",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 1046,
    "end_token": 1051,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      640,
      13,
      42832,
      284,
      14985,
      9706
    ],
    "label": "ml_signal",
    "reason": "Usage of time.sleep to pause execution"
  },
  {
    "line": 247,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Construction of a URL request",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 1051,
    "end_token": 1055,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20395,
      286,
      257,
      10289,
      2581
    ],
    "label": "ml_signal",
    "reason": "Construction of a URL request"
  },
  {
    "line": 251,
    "text": "    date = du.today()",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Network operation without exception handling for specific errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3128,
      796,
      7043,
      13,
      40838,
      3419
    ],
    "start_token": 1055,
    "end_token": 1064,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7311,
      4905,
      1231,
      6631,
      9041,
      329,
      2176,
      8563
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Network operation without exception handling for specific errors"
  },
  {
    "line": 253,
    "text": "        time.sleep(pause)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes data is encoded in 'GBK' without checking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      32125,
      8
    ],
    "start_token": 1064,
    "end_token": 1077,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      1366,
      318,
      30240,
      287,
      705,
      4579,
      42,
      6,
      1231,
      10627
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes data is encoded in 'GBK' without checking"
  },
  {
    "line": 255,
    "text": "            request = Request(ct.TODAY_TICKS_PAGE_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'],",
    "annotation": "\u26a0\ufe0f SAST Risk (High): Use of eval() with untrusted input",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2581,
      796,
      19390,
      7,
      310,
      13,
      51,
      3727,
      4792,
      62,
      51,
      11860,
      50,
      62,
      4537,
      8264,
      62,
      21886,
      4064,
      357,
      310,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357,
      269,
      83,
      13,
      39170,
      32,
      20913,
      17816,
      14259,
      69,
      6,
      4357
    ],
    "start_token": 1077,
    "end_token": 1128,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      11922,
      2599,
      5765,
      286,
      5418,
      3419,
      351,
      1418,
      81,
      8459,
      5128
    ],
    "label": "sast_risk",
    "severity": "High",
    "reason": "Use of eval() with untrusted input"
  },
  {
    "line": 258,
    "text": "            data_str = urlopen(request, timeout=10).read()",
    "annotation": "\ud83e\udde0 ML Signal: Conversion between data formats (string to JSON)",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      2536,
      796,
      19016,
      9654,
      7,
      25927,
      11,
      26827,
      28,
      940,
      737,
      961,
      3419
    ],
    "start_token": 1128,
    "end_token": 1154,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      1022,
      1366,
      17519,
      357,
      8841,
      284,
      19449,
      8
    ],
    "label": "ml_signal",
    "reason": "Conversion between data formats (string to JSON)"
  },
  {
    "line": 262,
    "text": "                                           dict(__getitem__ = lambda s, n:n))())",
    "annotation": "\ud83e\udde0 ML Signal: Dynamic determination of number of pages",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8633,
      7,
      834,
      1136,
      9186,
      834,
      796,
      37456,
      264,
      11,
      299,
      25,
      77,
      4008,
      28955
    ],
    "start_token": 1154,
    "end_token": 1211,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26977,
      12123,
      286,
      1271,
      286,
      5468
    ],
    "label": "ml_signal",
    "reason": "Dynamic determination of number of pages"
  },
  {
    "line": 264,
    "text": "            data_str = json.loads(data_str)",
    "annotation": "\ud83e\udde0 ML Signal: Initialization of an empty DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      2536,
      796,
      33918,
      13,
      46030,
      7,
      7890,
      62,
      2536,
      8
    ],
    "start_token": 1211,
    "end_token": 1234,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20768,
      1634,
      286,
      281,
      6565,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Initialization of an empty DataFrame"
  },
  {
    "line": 266,
    "text": "            data = pd.DataFrame()",
    "annotation": "\ud83e\udde0 ML Signal: Function call to write headers",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      279,
      67,
      13,
      6601,
      19778,
      3419
    ],
    "start_token": 1234,
    "end_token": 1253,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      3551,
      24697
    ],
    "label": "ml_signal",
    "reason": "Function call to write headers"
  },
  {
    "line": 267,
    "text": "            ct._write_head()",
    "annotation": "\ud83e\udde0 ML Signal: Looping through pages to append data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13557,
      13564,
      62,
      2256,
      3419
    ],
    "start_token": 1253,
    "end_token": 1271,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6706,
      15816,
      832,
      5468,
      284,
      24443,
      1366
    ],
    "label": "ml_signal",
    "reason": "Looping through pages to append data"
  },
  {
    "line": 271,
    "text": "        except Exception as er:",
    "annotation": "\ud83e\udde0 ML Signal: DataFrame append pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      1931,
      25
    ],
    "start_token": 1271,
    "end_token": 1283,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      19778,
      24443,
      3912
    ],
    "label": "ml_signal",
    "reason": "DataFrame append pattern"
  },
  {
    "line": 273,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Generic exception handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 1283,
    "end_token": 1292,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42044,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Generic exception handling"
  },
  {
    "line": 278,
    "text": "def _today_ticks(symbol, tdate, pageNo, retry_count, pause):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Raises IOError with a generic error message",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      40838,
      62,
      83,
      3378,
      7,
      1837,
      23650,
      11,
      256,
      4475,
      11,
      2443,
      2949,
      11,
      1005,
      563,
      62,
      9127,
      11,
      14985,
      2599
    ],
    "start_token": 1292,
    "end_token": 1315,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7567,
      2696,
      24418,
      12331,
      351,
      257,
      14276,
      4049,
      3275
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Raises IOError with a generic error message"
  },
  {
    "line": 263,
    "text": "            data_str = json.dumps(data_str)",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the function's purpose and parameters.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      62,
      2536,
      796,
      33918,
      13,
      67,
      8142,
      7,
      7890,
      62,
      2536,
      8
    ],
    "start_token": 1315,
    "end_token": 1339,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the function's purpose and parameters."
  },
  {
    "line": 267,
    "text": "            ct._write_head()",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potentially unsafe URL construction; ensure inputs are sanitized to prevent injection.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13557,
      13564,
      62,
      2256,
      3419
    ],
    "start_token": 1339,
    "end_token": 1357,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6902,
      3746,
      21596,
      10289,
      5103,
      26,
      4155,
      17311,
      389,
      5336,
      36951,
      284,
      2948,
      16954,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potentially unsafe URL construction; ensure inputs are sanitized to prevent injection."
  },
  {
    "line": 275,
    "text": "    raise IOError(ct.NETWORK_URL_ERROR_MSG)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on Python version indicates compatibility handling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      5298,
      24418,
      12331,
      7,
      310,
      13,
      12884,
      33249,
      62,
      21886,
      62,
      24908,
      62,
      5653,
      38,
      8
    ],
    "start_token": 1357,
    "end_token": 1376,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      11361,
      2196,
      9217,
      17764,
      9041,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on Python version indicates compatibility handling."
  },
  {
    "line": 281,
    "text": "        time.sleep(pause)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using StringIO without explicit encoding can lead to issues in Python 2.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      32125,
      8
    ],
    "start_token": 1376,
    "end_token": 1389,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      10903,
      9399,
      1231,
      7952,
      21004,
      460,
      1085,
      284,
      2428,
      287,
      11361,
      362,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using StringIO without explicit encoding can lead to issues in Python 2."
  },
  {
    "line": 285,
    "text": "                                                         symbol, tdate, pageNo",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using lambda for simple string replacement; consider using a named function for clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      11,
      256,
      4475,
      11,
      2443,
      2949
    ],
    "start_token": 1389,
    "end_token": 1452,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      37456,
      329,
      2829,
      4731,
      9014,
      26,
      2074,
      1262,
      257,
      3706,
      2163,
      329,
      16287,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using lambda for simple string replacement; consider using a named function for clarity."
  },
  {
    "line": 288,
    "text": "            if ct.PY3:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide specific errors; consider catching specific exceptions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      269,
      83,
      13,
      47,
      56,
      18,
      25
    ],
    "start_token": 1452,
    "end_token": 1471,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      2176,
      8563,
      26,
      2074,
      16508,
      2176,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide specific errors; consider catching specific exceptions."
  },
  {
    "line": 295,
    "text": "            df = pd.read_html(StringIO(sarr), parse_dates=False)[0]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising IOError with a custom message; ensure the message is informative and user-friendly.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      961,
      62,
      6494,
      7,
      10100,
      9399,
      7,
      82,
      3258,
      828,
      21136,
      62,
      19581,
      28,
      25101,
      38381,
      15,
      60
    ],
    "start_token": 1471,
    "end_token": 1505,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      24418,
      12331,
      351,
      257,
      2183,
      3275,
      26,
      4155,
      262,
      3275,
      318,
      30304,
      290,
      2836,
      12,
      13120,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising IOError with a custom message; ensure the message is informative and user-friendly."
  },
  {
    "line": 295,
    "text": "            df = pd.read_html(StringIO(sarr), parse_dates=False)[0]",
    "annotation": "\u2705 Best Practice: Consider adding error handling for the function call",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      961,
      62,
      6494,
      7,
      10100,
      9399,
      7,
      82,
      3258,
      828,
      21136,
      62,
      19581,
      28,
      25101,
      38381,
      15,
      60
    ],
    "start_token": 1505,
    "end_token": 1539,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      4049,
      9041,
      329,
      262,
      2163,
      869
    ],
    "label": "best_practice",
    "reason": "Consider adding error handling for the function call"
  },
  {
    "line": 297,
    "text": "            df['pchange'] = df['pchange'].map(lambda x : x.replace('%', ''))",
    "annotation": "\u2705 Best Practice: Consider adding error handling for the function call",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      17816,
      79,
      3803,
      20520,
      796,
      47764,
      17816,
      79,
      3803,
      6,
      4083,
      8899,
      7,
      50033,
      2124,
      1058,
      2124,
      13,
      33491,
      10786,
      4,
      3256,
      10148,
      4008
    ],
    "start_token": 1539,
    "end_token": 1575,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      4049,
      9041,
      329,
      262,
      2163,
      869
    ],
    "label": "best_practice",
    "reason": "Consider adding error handling for the function call"
  },
  {
    "line": 301,
    "text": "            return df",
    "annotation": "\u2705 Best Practice: Consider adding error handling for the function call",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764
    ],
    "start_token": 1575,
    "end_token": 1588,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      4049,
      9041,
      329,
      262,
      2163,
      869
    ],
    "label": "best_practice",
    "reason": "Consider adding error handling for the function call"
  },
  {
    "line": 303,
    "text": "        ",
    "annotation": "\u2705 Best Practice: Use pd.concat instead of append for better performance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 1588,
    "end_token": 1596,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      279,
      67,
      13,
      1102,
      9246,
      2427,
      286,
      24443,
      329,
      1365,
      2854
    ],
    "label": "best_practice",
    "reason": "Use pd.concat instead of append for better performance"
  },
  {
    "line": 305,
    "text": "def get_today_all():",
    "annotation": "\u2705 Best Practice: Use pd.concat instead of append for better performance",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      40838,
      62,
      439,
      33529
    ],
    "start_token": 1596,
    "end_token": 1603,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      279,
      67,
      13,
      1102,
      9246,
      2427,
      286,
      24443,
      329,
      1365,
      2854
    ],
    "label": "best_practice",
    "reason": "Use pd.concat instead of append for better performance"
  },
  {
    "line": 305,
    "text": "def get_today_all():",
    "annotation": "\ud83e\udde0 ML Signal: Returns a DataFrame containing stock trading data",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      40838,
      62,
      439,
      33529
    ],
    "start_token": 1603,
    "end_token": 1610,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      257,
      6060,
      19778,
      7268,
      4283,
      7313,
      1366
    ],
    "label": "ml_signal",
    "reason": "Returns a DataFrame containing stock trading data"
  },
  {
    "line": 304,
    "text": "    ",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with parameters, useful for understanding function usage patterns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220
    ],
    "start_token": 1610,
    "end_token": 1614,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      10007,
      11,
      4465,
      329,
      4547,
      2163,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function definition with parameters, useful for understanding function usage patterns"
  },
  {
    "line": 342,
    "text": "            7\uff1aask\uff0c\u7ade\u5356\u4ef7\uff0c\u5373\u201c\u5356\u4e00\u201d\u62a5\u4ef7",
    "annotation": "\u2705 Best Practice: Use isinstance for type checking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      767,
      171,
      120,
      248,
      2093,
      171,
      120,
      234,
      44165,
      252,
      39355,
      244,
      20015,
      115,
      171,
      120,
      234,
      39355,
      111,
      447,
      250,
      39355,
      244,
      31660,
      447,
      251,
      162,
      232,
      98,
      20015,
      115
    ],
    "start_token": 1614,
    "end_token": 1656,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      329,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use isinstance for type checking"
  },
  {
    "line": 345,
    "text": "            10\uff1ab1_v\uff0c\u59d4\u4e70\u4e00\uff08\u7b14\u6570 bid volume\uff09",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a collection, common pattern in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      838,
      171,
      120,
      248,
      65,
      16,
      62,
      85,
      171,
      120,
      234,
      34650,
      242,
      20046,
      108,
      31660,
      171,
      120,
      230,
      163,
      105,
      242,
      46763,
      108,
      8406,
      6115,
      171,
      120,
      231
    ],
    "start_token": 1656,
    "end_token": 1696,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      4947,
      11,
      2219,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Iterating over a collection, common pattern in data processing"
  },
  {
    "line": 349,
    "text": "            14\uff1ab3_v\uff0c\u201c\u4e70\u4e09\u201d",
    "annotation": "\u2705 Best Practice: Avoid magic numbers, use named constants for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1478,
      171,
      120,
      248,
      65,
      18,
      62,
      85,
      171,
      120,
      234,
      447,
      250,
      20046,
      108,
      49011,
      447,
      251
    ],
    "start_token": 1696,
    "end_token": 1725,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      24390,
      5536,
      3146,
      11,
      779,
      3706,
      38491,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Avoid magic numbers, use named constants for clarity"
  },
  {
    "line": 351,
    "text": "            16\uff1ab4_v\uff0c\u201c\u4e70\u56db\u201d",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potentially unsafe string formatting in URL construction",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1467,
      171,
      120,
      248,
      65,
      19,
      62,
      85,
      171,
      120,
      234,
      447,
      250,
      20046,
      108,
      32368,
      249,
      447,
      251
    ],
    "start_token": 1725,
    "end_token": 1755,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6902,
      3746,
      21596,
      4731,
      33313,
      287,
      10289,
      5103
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potentially unsafe string formatting in URL construction"
  },
  {
    "line": 354,
    "text": "            19\uff1ab5_p\uff0c\u201c\u4e70\u4e94\u201d",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Network operation without exception handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      678,
      171,
      120,
      248,
      65,
      20,
      62,
      79,
      171,
      120,
      234,
      447,
      250,
      20046,
      108,
      49390,
      447,
      251
    ],
    "start_token": 1755,
    "end_token": 1784,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7311,
      4905,
      1231,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Network operation without exception handling"
  },
  {
    "line": 356,
    "text": "            21\uff1aa1_p\uff0c\u59d4\u5356\u4e00\uff08\u4ef7\u683c ask price\uff09",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded encoding, consider using a more flexible approach",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2310,
      171,
      120,
      248,
      64,
      16,
      62,
      79,
      171,
      120,
      234,
      34650,
      242,
      39355,
      244,
      31660,
      171,
      120,
      230,
      20015,
      115,
      43718,
      120,
      1265,
      2756,
      171,
      120,
      231
    ],
    "start_token": 1784,
    "end_token": 1823,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      21004,
      11,
      2074,
      1262,
      257,
      517,
      12846,
      3164
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded encoding, consider using a more flexible approach"
  },
  {
    "line": 358,
    "text": "            30\uff1adate\uff0c\u65e5\u671f\uff1b",
    "annotation": "\ud83e\udde0 ML Signal: Regular expression usage, useful for pattern extraction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1542,
      171,
      120,
      248,
      4475,
      171,
      120,
      234,
      33768,
      98,
      17312,
      253,
      171,
      120,
      249
    ],
    "start_token": 1823,
    "end_token": 1849,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23603,
      5408,
      8748,
      11,
      4465,
      329,
      3912,
      22236
    ],
    "label": "ml_signal",
    "reason": "Regular expression usage, useful for pattern extraction"
  },
  {
    "line": 364,
    "text": "            symbols_list += ct._code_to_symbol(code) + ','",
    "annotation": "\ud83e\udde0 ML Signal: Enumerate usage, common pattern for index-value iteration",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14354,
      62,
      4868,
      15853,
      269,
      83,
      13557,
      8189,
      62,
      1462,
      62,
      1837,
      23650,
      7,
      8189,
      8,
      1343,
      705,
      4032
    ],
    "start_token": 1849,
    "end_token": 1879,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2039,
      6975,
      378,
      8748,
      11,
      2219,
      3912,
      329,
      6376,
      12,
      8367,
      24415
    ],
    "label": "ml_signal",
    "reason": "Enumerate usage, common pattern for index-value iteration"
  },
  {
    "line": 368,
    "text": "    symbols_list = symbols_list[:-1] if len(symbols_list) > 8 else symbols_list ",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension, common pattern for data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      14354,
      62,
      4868,
      796,
      14354,
      62,
      4868,
      58,
      21912,
      16,
      60,
      611,
      18896,
      7,
      1837,
      2022,
      10220,
      62,
      4868,
      8,
      1875,
      807,
      2073,
      14354,
      62,
      4868,
      220
    ],
    "start_token": 1879,
    "end_token": 1909,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      11,
      2219,
      3912,
      329,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "List comprehension, common pattern for data transformation"
  },
  {
    "line": 373,
    "text": "    reg = re.compile(r'\\=\"(.*?)\\\";')",
    "annotation": "\u2705 Best Practice: Use of pandas for data manipulation, a common data science practice",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      842,
      796,
      302,
      13,
      5589,
      576,
      7,
      81,
      6,
      59,
      2625,
      7,
      15885,
      10091,
      7879,
      26,
      11537
    ],
    "start_token": 1909,
    "end_token": 1929,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      19798,
      292,
      329,
      1366,
      17512,
      11,
      257,
      2219,
      1366,
      3783,
      3357
    ],
    "label": "best_practice",
    "reason": "Use of pandas for data manipulation, a common data science practice"
  },
  {
    "line": 375,
    "text": "    regSym = re.compile(r'(?:sh|sz|gb_)(.*?)\\=')",
    "annotation": "\u2705 Best Practice: Dropping unnecessary columns for cleaner dataframes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      842,
      43094,
      796,
      302,
      13,
      5589,
      576,
      7,
      81,
      6,
      7,
      27514,
      1477,
      91,
      82,
      89,
      91,
      22296,
      62,
      5769,
      15885,
      10091,
      59,
      28,
      11537
    ],
    "start_token": 1929,
    "end_token": 1957,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      13114,
      15180,
      329,
      21723,
      1366,
      37805
    ],
    "label": "best_practice",
    "reason": "Dropping unnecessary columns for cleaner dataframes"
  },
  {
    "line": 375,
    "text": "    regSym = re.compile(r'(?:sh|sz|gb_)(.*?)\\=')",
    "annotation": "\ud83e\udde0 ML Signal: List comprehension for column filtering",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      842,
      43094,
      796,
      302,
      13,
      5589,
      576,
      7,
      81,
      6,
      7,
      27514,
      1477,
      91,
      82,
      89,
      91,
      22296,
      62,
      5769,
      15885,
      10091,
      59,
      28,
      11537
    ],
    "start_token": 1957,
    "end_token": 1985,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7343,
      35915,
      329,
      5721,
      25431
    ],
    "label": "ml_signal",
    "reason": "List comprehension for column filtering"
  },
  {
    "line": 375,
    "text": "    regSym = re.compile(r'(?:sh|sz|gb_)(.*?)\\=')",
    "annotation": "\ud83e\udde0 ML Signal: Lambda function usage, common in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      842,
      43094,
      796,
      302,
      13,
      5589,
      576,
      7,
      81,
      6,
      7,
      27514,
      1477,
      91,
      82,
      89,
      91,
      22296,
      62,
      5769,
      15885,
      10091,
      59,
      28,
      11537
    ],
    "start_token": 1985,
    "end_token": 2013,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      21114,
      6814,
      2163,
      8748,
      11,
      2219,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Lambda function usage, common in data processing"
  },
  {
    "line": 404,
    "text": "                  \u80a1\u7968\u4ee3\u7801 e.g. 600848",
    "annotation": "\u2705 Best Practice: Use of default values for function parameters improves function usability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5525,
      224,
      94,
      163,
      98,
      101,
      47987,
      163,
      254,
      223,
      304,
      13,
      70,
      13,
      10053,
      23,
      2780
    ],
    "start_token": 2013,
    "end_token": 2047,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      3815,
      329,
      2163,
      10007,
      19575,
      2163,
      42863,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default values for function parameters improves function usability."
  },
  {
    "line": 409,
    "text": "      autype:string",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Network operations can fail; ensure proper error handling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      1960,
      2981,
      25,
      8841
    ],
    "start_token": 2047,
    "end_token": 2056,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7311,
      4560,
      460,
      2038,
      26,
      4155,
      1774,
      4049,
      9041,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Network operations can fail; ensure proper error handling."
  },
  {
    "line": 419,
    "text": "      DataFrame",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Network operations can fail; ensure proper error handling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      6060,
      19778
    ],
    "start_token": 2056,
    "end_token": 2063,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7311,
      4560,
      460,
      2038,
      26,
      4155,
      1774,
      4049,
      9041,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Network operations can fail; ensure proper error handling."
  },
  {
    "line": 425,
    "text": "          volume \u6210\u4ea4\u91cf",
    "annotation": "\u2705 Best Practice: Use of append method for DataFrame to concatenate data.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6115,
      10545,
      230,
      238,
      12859,
      97,
      34932,
      237
    ],
    "start_token": 2063,
    "end_token": 2080,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      24443,
      2446,
      329,
      6060,
      19778,
      284,
      1673,
      36686,
      378,
      1366,
      13
    ],
    "label": "best_practice",
    "reason": "Use of append method for DataFrame to concatenate data."
  },
  {
    "line": 429,
    "text": "    start = du.today_last_year() if start is None else start",
    "annotation": "\u2705 Best Practice: Use of drop_duplicates to ensure data integrity.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      923,
      796,
      7043,
      13,
      40838,
      62,
      12957,
      62,
      1941,
      3419,
      611,
      923,
      318,
      6045,
      2073,
      923
    ],
    "start_token": 2080,
    "end_token": 2099,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4268,
      62,
      646,
      489,
      16856,
      284,
      4155,
      1366,
      11540,
      13
    ],
    "label": "best_practice",
    "reason": "Use of drop_duplicates to ensure data integrity."
  },
  {
    "line": 433,
    "text": "    ct._write_head()",
    "annotation": "\u2705 Best Practice: Setting 'date' as index for better data manipulation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      269,
      83,
      13557,
      13564,
      62,
      2256,
      3419
    ],
    "start_token": 2099,
    "end_token": 2109,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      705,
      4475,
      6,
      355,
      6376,
      329,
      1365,
      1366,
      17512,
      13
    ],
    "label": "best_practice",
    "reason": "Setting 'date' as index for better data manipulation."
  },
  {
    "line": 435,
    "text": "                          retry_count, pause)",
    "annotation": "\u2705 Best Practice: Sorting data for consistent output.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1005,
      563,
      62,
      9127,
      11,
      14985,
      8
    ],
    "start_token": 2109,
    "end_token": 2141,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      24707,
      1366,
      329,
      6414,
      5072,
      13
    ],
    "label": "best_practice",
    "reason": "Sorting data for consistent output."
  },
  {
    "line": 440,
    "text": "            qt = qs[d]",
    "annotation": "\u2705 Best Practice: Dropping unnecessary columns to optimize data size.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10662,
      83,
      796,
      10662,
      82,
      58,
      67,
      60
    ],
    "start_token": 2141,
    "end_token": 2160,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      13114,
      15180,
      284,
      27183,
      1366,
      2546,
      13
    ],
    "label": "best_practice",
    "reason": "Dropping unnecessary columns to optimize data size."
  },
  {
    "line": 444,
    "text": "            if df is None:  # \u53ef\u80fddf\u4e3a\u7a7a\uff0c\u9000\u51fa\u5faa\u73af",
    "annotation": "\u2705 Best Practice: Mapping and type conversion for consistent data format.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      47764,
      318,
      6045,
      25,
      220,
      1303,
      10263,
      237,
      107,
      47797,
      121,
      7568,
      10310,
      118,
      163,
      102,
      118,
      171,
      120,
      234,
      34460,
      222,
      49035,
      118,
      36181,
      103,
      163,
      236,
      107
    ],
    "start_token": 2160,
    "end_token": 2201,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      337,
      5912,
      290,
      2099,
      11315,
      329,
      6414,
      1366,
      5794,
      13
    ],
    "label": "best_practice",
    "reason": "Mapping and type conversion for consistent data format."
  },
  {
    "line": 459,
    "text": "        data = data[(data.date >= start) & (data.date <= end)]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Network operations can fail; ensure proper error handling.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      58,
      7,
      7890,
      13,
      4475,
      18189,
      923,
      8,
      1222,
      357,
      7890,
      13,
      4475,
      19841,
      886,
      15437
    ],
    "start_token": 2201,
    "end_token": 2227,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7311,
      4560,
      460,
      2038,
      26,
      4155,
      1774,
      4049,
      9041,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Network operations can fail; ensure proper error handling."
  },
  {
    "line": 484,
    "text": "                    if (du.get_hour() > 9) & (du.get_hour() < 18):",
    "annotation": "\u2705 Best Practice: Function name is misspelled; should be _parse_fq_factor for clarity and consistency.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      357,
      646,
      13,
      1136,
      62,
      9769,
      3419,
      1875,
      860,
      8,
      1222,
      357,
      646,
      13,
      1136,
      62,
      9769,
      3419,
      1279,
      1248,
      2599
    ],
    "start_token": 2227,
    "end_token": 2268,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      318,
      2051,
      15803,
      26,
      815,
      307,
      4808,
      29572,
      62,
      69,
      80,
      62,
      31412,
      329,
      16287,
      290,
      15794,
      13
    ],
    "label": "best_practice",
    "reason": "Function name is misspelled; should be _parse_fq_factor for clarity and consistency."
  },
  {
    "line": 486,
    "text": "                    else:",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of code to symbol indicates a pattern of data transformation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 2268,
    "end_token": 2289,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      2438,
      284,
      6194,
      9217,
      257,
      3912,
      286,
      1366,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Conversion of code to symbol indicates a pattern of data transformation."
  },
  {
    "line": 488,
    "text": "            ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): URL construction with external input can lead to injection if not properly sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 2289,
    "end_token": 2301,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      10289,
      5103,
      351,
      7097,
      5128,
      460,
      1085,
      284,
      16954,
      611,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "URL construction with external input can lead to injection if not properly sanitized."
  },
  {
    "line": 491,
    "text": "            for label in ['open', 'high', 'low', 'close']:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Network operation without exception handling can lead to unhandled exceptions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      6167,
      287,
      37250,
      9654,
      3256,
      705,
      8929,
      3256,
      705,
      9319,
      3256,
      705,
      19836,
      6,
      5974
    ],
    "start_token": 2301,
    "end_token": 2328,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7311,
      4905,
      1231,
      6631,
      9041,
      460,
      1085,
      284,
      555,
      38788,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Network operation without exception handling can lead to unhandled exceptions."
  },
  {
    "line": 493,
    "text": "                data[label] = data[label].map(ct.FORMAT)",
    "annotation": "\u2705 Best Practice: Slicing operation is used to remove specific characters, which is efficient.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      58,
      18242,
      60,
      796,
      1366,
      58,
      18242,
      4083,
      8899,
      7,
      310,
      13,
      21389,
      1404,
      8
    ],
    "start_token": 2328,
    "end_token": 2359,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      311,
      677,
      278,
      4905,
      318,
      973,
      284,
      4781,
      2176,
      3435,
      11,
      543,
      318,
      6942,
      13
    ],
    "label": "best_practice",
    "reason": "Slicing operation is used to remove specific characters, which is efficient."
  },
  {
    "line": 495,
    "text": "            data = data.set_index('date')",
    "annotation": "\u2705 Best Practice: Conditional decoding based on Python version ensures compatibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      13,
      2617,
      62,
      9630,
      10786,
      4475,
      11537
    ],
    "start_token": 2359,
    "end_token": 2380,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9724,
      1859,
      39938,
      1912,
      319,
      11361,
      2196,
      19047,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Conditional decoding based on Python version ensures compatibility."
  },
  {
    "line": 497,
    "text": "            return data",
    "annotation": "\u2705 Best Practice: Replacing specific patterns in text for JSON compatibility.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1366
    ],
    "start_token": 2380,
    "end_token": 2393,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18407,
      4092,
      2176,
      7572,
      287,
      2420,
      329,
      19449,
      17764,
      13
    ],
    "label": "best_practice",
    "reason": "Replacing specific patterns in text for JSON compatibility."
  },
  {
    "line": 504,
    "text": "            for label in ['open', 'high', 'close', 'low']:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Loading JSON data without validation can lead to security risks if data is untrusted.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      6167,
      287,
      37250,
      9654,
      3256,
      705,
      8929,
      3256,
      705,
      19836,
      3256,
      705,
      9319,
      6,
      5974
    ],
    "start_token": 2393,
    "end_token": 2420,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      12320,
      19449,
      1366,
      1231,
      21201,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      1366,
      318,
      1418,
      81,
      8459,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Loading JSON data without validation can lead to security risks if data is untrusted."
  },
  {
    "line": 506,
    "text": "            data = data.set_index('date')",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of JSON data to DataFrame indicates a pattern of data structuring.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      13,
      2617,
      62,
      9630,
      10786,
      4475,
      11537
    ],
    "start_token": 2420,
    "end_token": 2441,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      19449,
      1366,
      284,
      6060,
      19778,
      9217,
      257,
      3912,
      286,
      1366,
      2878,
      870,
      13
    ],
    "label": "ml_signal",
    "reason": "Conversion of JSON data to DataFrame indicates a pattern of data structuring."
  },
  {
    "line": 507,
    "text": "            data = data.sort_index(ascending = False)",
    "annotation": "\u2705 Best Practice: Mapping function to handle exceptions during date conversion.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      13,
      30619,
      62,
      9630,
      7,
      3372,
      1571,
      796,
      10352,
      8
    ],
    "start_token": 2441,
    "end_token": 2465,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      337,
      5912,
      2163,
      284,
      5412,
      13269,
      1141,
      3128,
      11315,
      13
    ],
    "label": "best_practice",
    "reason": "Mapping function to handle exceptions during date conversion."
  },
  {
    "line": 510,
    "text": "",
    "annotation": "\u2705 Best Practice: Checking data type before conversion ensures data integrity.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 2465,
    "end_token": 2465,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      1366,
      2099,
      878,
      11315,
      19047,
      1366,
      11540,
      13
    ],
    "label": "best_practice",
    "reason": "Checking data type before conversion ensures data integrity."
  },
  {
    "line": 512,
    "text": "def _parase_fq_factor(code, start, end):",
    "annotation": "\u2705 Best Practice: Converting date strings to datetime objects for better manipulation.",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      1845,
      589,
      62,
      69,
      80,
      62,
      31412,
      7,
      8189,
      11,
      923,
      11,
      886,
      2599
    ],
    "start_token": 2465,
    "end_token": 2481,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      3128,
      13042,
      284,
      4818,
      8079,
      5563,
      329,
      1365,
      17512,
      13
    ],
    "label": "best_practice",
    "reason": "Converting date strings to datetime objects for better manipulation."
  },
  {
    "line": 514,
    "text": "    request = Request(ct.HIST_FQ_FACTOR_URL%(ct.P_TYPE['http'],",
    "annotation": "\u2705 Best Practice: Dropping duplicates to ensure data uniqueness.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2581,
      796,
      19390,
      7,
      310,
      13,
      39,
      8808,
      62,
      37,
      48,
      62,
      37,
      10659,
      1581,
      62,
      21886,
      4,
      7,
      310,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357
    ],
    "start_token": 2481,
    "end_token": 2512,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      14184,
      16856,
      284,
      4155,
      1366,
      49650,
      13
    ],
    "label": "best_practice",
    "reason": "Dropping duplicates to ensure data uniqueness."
  },
  {
    "line": 516,
    "text": "    text = urlopen(request, timeout=10).read()",
    "annotation": "\u2705 Best Practice: Converting factor to float for numerical operations.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2420,
      796,
      19016,
      9654,
      7,
      25927,
      11,
      26827,
      28,
      940,
      737,
      961,
      3419
    ],
    "start_token": 2512,
    "end_token": 2528,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      35602,
      889,
      5766,
      284,
      12178,
      329,
      29052,
      4560,
      13
    ],
    "label": "best_practice",
    "reason": "Converting factor to float for numerical operations."
  },
  {
    "line": 518,
    "text": "    text = text.decode('utf-8') if ct.PY3 else text",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataFrame suggests a pattern of data processing and output.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2420,
      796,
      2420,
      13,
      12501,
      1098,
      10786,
      40477,
      12,
      23,
      11537,
      611,
      269,
      83,
      13,
      47,
      56,
      18,
      2073,
      2420
    ],
    "start_token": 2528,
    "end_token": 2551,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      19778,
      5644,
      257,
      3912,
      286,
      1366,
      7587,
      290,
      5072,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning a DataFrame suggests a pattern of data processing and output."
  },
  {
    "line": 505,
    "text": "                data[label] = data[label].map(ct.FORMAT)",
    "annotation": "\u2705 Best Practice: Function name should be descriptive to indicate its purpose",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      58,
      18242,
      60,
      796,
      1366,
      58,
      18242,
      4083,
      8899,
      7,
      310,
      13,
      21389,
      1404,
      8
    ],
    "start_token": 2551,
    "end_token": 2582,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      1438,
      815,
      307,
      35644,
      284,
      7603,
      663,
      4007
    ],
    "label": "best_practice",
    "reason": "Function name should be descriptive to indicate its purpose"
  },
  {
    "line": 507,
    "text": "            data = data.sort_index(ascending = False)",
    "annotation": "\u2705 Best Practice: Use of len() to check the length of a list or string",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      13,
      30619,
      62,
      9630,
      7,
      3372,
      1571,
      796,
      10352,
      8
    ],
    "start_token": 2582,
    "end_token": 2606,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      18896,
      3419,
      284,
      2198,
      262,
      4129,
      286,
      257,
      1351,
      393,
      4731
    ],
    "label": "best_practice",
    "reason": "Use of len() to check the length of a list or string"
  },
  {
    "line": 509,
    "text": "            return data",
    "annotation": "\ud83e\udde0 ML Signal: Slicing operation on a list or string",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1366
    ],
    "start_token": 2606,
    "end_token": 2619,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      311,
      677,
      278,
      4905,
      319,
      257,
      1351,
      393,
      4731
    ],
    "label": "ml_signal",
    "reason": "Slicing operation on a list or string"
  },
  {
    "line": 511,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Loop with retry pattern for network operations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 2619,
    "end_token": 2619,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      26304,
      351,
      1005,
      563,
      3912,
      329,
      3127,
      4560
    ],
    "label": "ml_signal",
    "reason": "Loop with retry pattern for network operations"
  },
  {
    "line": 513,
    "text": "    symbol = ct._code_to_symbol(code)",
    "annotation": "\ud83e\udde0 ML Signal: Usage of time.sleep for retry delay",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      6194,
      796,
      269,
      83,
      13557,
      8189,
      62,
      1462,
      62,
      1837,
      23650,
      7,
      8189,
      8
    ],
    "start_token": 2619,
    "end_token": 2636,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      640,
      13,
      42832,
      329,
      1005,
      563,
      5711
    ],
    "label": "ml_signal",
    "reason": "Usage of time.sleep for retry delay"
  },
  {
    "line": 516,
    "text": "    text = urlopen(request, timeout=10).read()",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): URL input not validated or sanitized",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2420,
      796,
      19016,
      9654,
      7,
      25927,
      11,
      26827,
      28,
      940,
      737,
      961,
      3419
    ],
    "start_token": 2636,
    "end_token": 2652,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      10289,
      5128,
      407,
      31031,
      393,
      5336,
      36951
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "URL input not validated or sanitized"
  },
  {
    "line": 518,
    "text": "    text = text.decode('utf-8') if ct.PY3 else text",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No exception handling for network operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2420,
      796,
      2420,
      13,
      12501,
      1098,
      10786,
      40477,
      12,
      23,
      11537,
      611,
      269,
      83,
      13,
      47,
      56,
      18,
      2073,
      2420
    ],
    "start_token": 2652,
    "end_token": 2675,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      6631,
      9041,
      329,
      3127,
      4560
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No exception handling for network operations"
  },
  {
    "line": 520,
    "text": "    text = text.replace('total', '\"total\"')",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded character encoding",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2420,
      796,
      2420,
      13,
      33491,
      10786,
      23350,
      3256,
      705,
      1,
      23350,
      1,
      11537
    ],
    "start_token": 2675,
    "end_token": 2691,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      2095,
      21004
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded character encoding"
  },
  {
    "line": 522,
    "text": "    text = text.replace(':\"', '\":\"')",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Parsing HTML without validation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2420,
      796,
      2420,
      13,
      33491,
      7,
      10354,
      1,
      3256,
      705,
      2404,
      11537
    ],
    "start_token": 2691,
    "end_token": 2706,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      23042,
      278,
      11532,
      1231,
      21201
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Parsing HTML without validation"
  },
  {
    "line": 524,
    "text": "    text = text.replace('_', '-')",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): XPath expression could be manipulated if input is not controlled",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2420,
      796,
      2420,
      13,
      33491,
      10786,
      62,
      3256,
      705,
      12,
      11537
    ],
    "start_token": 2706,
    "end_token": 2720,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11961,
      776,
      5408,
      714,
      307,
      25036,
      611,
      5128,
      318,
      407,
      6856
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "XPath expression could be manipulated if input is not controlled"
  },
  {
    "line": 527,
    "text": "    df['date'] = df['date'].map(_fun_except) # for null case",
    "annotation": "\u2705 Best Practice: Use list comprehension for readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      17816,
      4475,
      20520,
      796,
      47764,
      17816,
      4475,
      6,
      4083,
      8899,
      28264,
      12543,
      62,
      16341,
      8,
      1303,
      329,
      9242,
      1339
    ],
    "start_token": 2720,
    "end_token": 2743,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1351,
      35915,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use list comprehension for readability"
  },
  {
    "line": 530,
    "text": "    df = df.drop_duplicates('date')",
    "annotation": "\u2705 Best Practice: Use join for string concatenation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      47764,
      13,
      14781,
      62,
      646,
      489,
      16856,
      10786,
      4475,
      11537
    ],
    "start_token": 2743,
    "end_token": 2758,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4654,
      329,
      4731,
      1673,
      36686,
      341
    ],
    "label": "best_practice",
    "reason": "Use join for string concatenation"
  },
  {
    "line": 535,
    "text": "def _fun_except(x):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes HTML structure is consistent",
    "confidence": 0.5,
    "tokens": [
      4299,
      4808,
      12543,
      62,
      16341,
      7,
      87,
      2599
    ],
    "start_token": 2758,
    "end_token": 2766,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      11532,
      4645,
      318,
      6414
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes HTML structure is consistent"
  },
  {
    "line": 539,
    "text": "        return x",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes ct.HIST_FQ_COLS has correct length",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      2124
    ],
    "start_token": 2766,
    "end_token": 2775,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      269,
      83,
      13,
      39,
      8808,
      62,
      37,
      48,
      62,
      25154,
      50,
      468,
      3376,
      4129
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes ct.HIST_FQ_COLS has correct length"
  },
  {
    "line": 544,
    "text": "        time.sleep(pause)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): np.object is deprecated, use 'object' instead",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      32125,
      8
    ],
    "start_token": 2775,
    "end_token": 2788,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      45941,
      13,
      15252,
      318,
      39224,
      11,
      779,
      705,
      15252,
      6,
      2427
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "np.object is deprecated, use 'object' instead"
  },
  {
    "line": 544,
    "text": "        time.sleep(pause)",
    "annotation": "\u2705 Best Practice: Use drop_duplicates to ensure unique entries",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      32125,
      8
    ],
    "start_token": 2788,
    "end_token": 2801,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4268,
      62,
      646,
      489,
      16856,
      284,
      4155,
      3748,
      12784
    ],
    "label": "best_practice",
    "reason": "Use drop_duplicates to ensure unique entries"
  },
  {
    "line": 544,
    "text": "        time.sleep(pause)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Generic exception handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      32125,
      8
    ],
    "start_token": 2801,
    "end_token": 2814,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42044,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Generic exception handling"
  },
  {
    "line": 560,
    "text": "                return pd.DataFrame()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raises IOError which is deprecated in Python 3",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      6601,
      19778,
      3419
    ],
    "start_token": 2814,
    "end_token": 2836,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      2696,
      24418,
      12331,
      543,
      318,
      39224,
      287,
      11361,
      513
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raises IOError which is deprecated in Python 3"
  },
  {
    "line": 543,
    "text": "    for _ in range(retry_count):",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): The URL used in the request is constructed using string formatting, which can lead to injection vulnerabilities if not properly sanitized.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      4808,
      287,
      2837,
      7,
      1186,
      563,
      62,
      9127,
      2599
    ],
    "start_token": 2836,
    "end_token": 2849,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      383,
      10289,
      973,
      287,
      262,
      2581,
      318,
      12006,
      1262,
      4731,
      33313,
      11,
      543,
      460,
      1085,
      284,
      16954,
      23805,
      611,
      407,
      6105,
      5336,
      36951,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "The URL used in the request is constructed using string formatting, which can lead to injection vulnerabilities if not properly sanitized."
  },
  {
    "line": 544,
    "text": "        time.sleep(pause)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): The use of urlopen without proper exception handling can lead to unhandled exceptions if the request fails.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      32125,
      8
    ],
    "start_token": 2849,
    "end_token": 2862,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      383,
      779,
      286,
      19016,
      9654,
      1231,
      1774,
      6631,
      9041,
      460,
      1085,
      284,
      555,
      38788,
      13269,
      611,
      262,
      2581,
      10143,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "The use of urlopen without proper exception handling can lead to unhandled exceptions if the request fails."
  },
  {
    "line": 544,
    "text": "        time.sleep(pause)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Decoding with a specific encoding ('GBK') without handling potential decoding errors can lead to exceptions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      32125,
      8
    ],
    "start_token": 2862,
    "end_token": 2875,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4280,
      7656,
      351,
      257,
      2176,
      21004,
      19203,
      4579,
      42,
      11537,
      1231,
      9041,
      2785,
      39938,
      8563,
      460,
      1085,
      284,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Decoding with a specific encoding ('GBK') without handling potential decoding errors can lead to exceptions."
  },
  {
    "line": 544,
    "text": "        time.sleep(pause)",
    "annotation": "\u2705 Best Practice: Chaining multiple replace calls can be less readable; consider using a loop or a single regex substitution for clarity.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      640,
      13,
      42832,
      7,
      32125,
      8
    ],
    "start_token": 2875,
    "end_token": 2888,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      609,
      1397,
      3294,
      6330,
      3848,
      460,
      307,
      1342,
      31744,
      26,
      2074,
      1262,
      257,
      9052,
      393,
      257,
      2060,
      40364,
      32097,
      329,
      16287,
      13
    ],
    "label": "best_practice",
    "reason": "Chaining multiple replace calls can be less readable; consider using a loop or a single regex substitution for clarity."
  },
  {
    "line": 560,
    "text": "                return pd.DataFrame()",
    "annotation": "\u2705 Best Practice: Use f-strings for better readability and performance in string formatting.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      6601,
      19778,
      3419
    ],
    "start_token": 2888,
    "end_token": 2910,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      277,
      12,
      37336,
      329,
      1365,
      1100,
      1799,
      290,
      2854,
      287,
      4731,
      33313,
      13
    ],
    "label": "best_practice",
    "reason": "Use f-strings for better readability and performance in string formatting."
  },
  {
    "line": 560,
    "text": "                return pd.DataFrame()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Reading CSV data from a string without validation can lead to parsing errors if the data format is unexpected.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      6601,
      19778,
      3419
    ],
    "start_token": 2910,
    "end_token": 2932,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      11725,
      44189,
      1366,
      422,
      257,
      4731,
      1231,
      21201,
      460,
      1085,
      284,
      32096,
      8563,
      611,
      262,
      1366,
      5794,
      318,
      10059,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Reading CSV data from a string without validation can lead to parsing errors if the data format is unexpected."
  },
  {
    "line": 560,
    "text": "                return pd.DataFrame()",
    "annotation": "\ud83e\udde0 ML Signal: Calculating percentage change is a common operation in financial data analysis.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      6601,
      19778,
      3419
    ],
    "start_token": 2932,
    "end_token": 2954,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      5873,
      1487,
      318,
      257,
      2219,
      4905,
      287,
      3176,
      1366,
      3781,
      13
    ],
    "label": "ml_signal",
    "reason": "Calculating percentage change is a common operation in financial data analysis."
  },
  {
    "line": 560,
    "text": "                return pd.DataFrame()",
    "annotation": "\ud83e\udde0 ML Signal: Converting amounts to a different unit (e.g., billions) is a common data transformation.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      6601,
      19778,
      3419
    ],
    "start_token": 2954,
    "end_token": 2976,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      6867,
      284,
      257,
      1180,
      4326,
      357,
      68,
      13,
      70,
      1539,
      13188,
      8,
      318,
      257,
      2219,
      1366,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Converting amounts to a different unit (e.g., billions) is a common data transformation."
  },
  {
    "line": 560,
    "text": "                return pd.DataFrame()",
    "annotation": "\ud83e\udde0 ML Signal: Mapping data to a specific format is a common data preprocessing step.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      279,
      67,
      13,
      6601,
      19778,
      3419
    ],
    "start_token": 2976,
    "end_token": 2998,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      1366,
      284,
      257,
      2176,
      5794,
      318,
      257,
      2219,
      1366,
      662,
      36948,
      2239,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping data to a specific format is a common data preprocessing step."
  },
  {
    "line": 564,
    "text": "                df.columns = ct.HIST_FQ_COLS",
    "annotation": "\u2705 Best Practice: Ensure that the column order in the DataFrame is explicitly defined for consistency.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      269,
      83,
      13,
      39,
      8808,
      62,
      37,
      48,
      62,
      25154,
      50
    ],
    "start_token": 2998,
    "end_token": 3029,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      262,
      5721,
      1502,
      287,
      262,
      6060,
      19778,
      318,
      11777,
      5447,
      329,
      15794,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure that the column order in the DataFrame is explicitly defined for consistency."
  },
  {
    "line": 566,
    "text": "                df['date'] = pd.to_datetime(df['date'])",
    "annotation": "\ud83e\udde0 ML Signal: Padding strings with zeros is a common operation for standardizing code formats.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      17816,
      4475,
      20520,
      796,
      279,
      67,
      13,
      1462,
      62,
      19608,
      8079,
      7,
      7568,
      17816,
      4475,
      6,
      12962
    ],
    "start_token": 3029,
    "end_token": 3062,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      350,
      26872,
      13042,
      351,
      1976,
      27498,
      318,
      257,
      2219,
      4905,
      329,
      3210,
      2890,
      2438,
      17519,
      13
    ],
    "label": "ml_signal",
    "reason": "Padding strings with zeros is a common operation for standardizing code formats."
  },
  {
    "line": 568,
    "text": "        except ValueError as e:",
    "annotation": "\u2705 Best Practice: Explicitly converting data types ensures consistency and can prevent unexpected behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      11052,
      12331,
      355,
      304,
      25
    ],
    "start_token": 3062,
    "end_token": 3075,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      11884,
      306,
      23202,
      1366,
      3858,
      19047,
      15794,
      290,
      460,
      2948,
      10059,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Explicitly converting data types ensures consistency and can prevent unexpected behavior."
  },
  {
    "line": 571,
    "text": "        except Exception as e:",
    "annotation": "\u2705 Best Practice: Always return a consistent data type (e.g., DataFrame) for predictable function behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 3075,
    "end_token": 3087,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      16622,
      1441,
      257,
      6414,
      1366,
      2099,
      357,
      68,
      13,
      70,
      1539,
      6060,
      19778,
      8,
      329,
      20039,
      2163,
      4069,
      13
    ],
    "label": "best_practice",
    "reason": "Always return a consistent data type (e.g., DataFrame) for predictable function behavior."
  },
  {
    "line": 578,
    "text": "def get_index():",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names improves code readability.",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      9630,
      33529
    ],
    "start_token": 3087,
    "end_token": 3092,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      19575,
      2438,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names improves code readability."
  },
  {
    "line": 579,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on the 'index' parameter indicates a decision point.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 3092,
    "end_token": 3096,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      262,
      705,
      9630,
      6,
      11507,
      9217,
      257,
      2551,
      966,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on the 'index' parameter indicates a decision point."
  },
  {
    "line": 584,
    "text": "          code:\u6307\u6570\u4ee3\u7801",
    "annotation": "\ud83e\udde0 ML Signal: Alternative path in conditional logic, useful for understanding branching behavior.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      25,
      162,
      234,
      229,
      46763,
      108,
      47987,
      163,
      254,
      223
    ],
    "start_token": 3096,
    "end_token": 3116,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27182,
      3108,
      287,
      26340,
      9156,
      11,
      4465,
      329,
      4547,
      49526,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Alternative path in conditional logic, useful for understanding branching behavior."
  },
  {
    "line": 585,
    "text": "          name:\u6307\u6570\u540d\u79f0",
    "annotation": "\u2705 Best Practice: Returning a value at the end of the function is a clear and expected pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1438,
      25,
      162,
      234,
      229,
      46763,
      108,
      28938,
      235,
      163,
      100,
      108
    ],
    "start_token": 3116,
    "end_token": 3137,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      257,
      1988,
      379,
      262,
      886,
      286,
      262,
      2163,
      318,
      257,
      1598,
      290,
      2938,
      3912,
      13
    ],
    "label": "best_practice",
    "reason": "Returning a value at the end of the function is a clear and expected pattern."
  },
  {
    "line": 621,
    "text": "    return url",
    "annotation": "\u2705 Best Practice: Use of ternary operator for concise conditional assignment",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      19016
    ],
    "start_token": 3137,
    "end_token": 3142,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1059,
      77,
      560,
      10088,
      329,
      35327,
      26340,
      16237
    ],
    "label": "best_practice",
    "reason": "Use of ternary operator for concise conditional assignment"
  },
  {
    "line": 625,
    "text": "                  ktype='D', autype='qfq', ",
    "annotation": "\u2705 Best Practice: Use of ternary operator for concise conditional assignment",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      4906,
      11639,
      35,
      3256,
      1960,
      2981,
      11639,
      80,
      69,
      80,
      3256,
      220
    ],
    "start_token": 3142,
    "end_token": 3172,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1059,
      77,
      560,
      10088,
      329,
      35327,
      26340,
      16237
    ],
    "label": "best_practice",
    "reason": "Use of ternary operator for concise conditional assignment"
  },
  {
    "line": 627,
    "text": "                  retry_count=3,",
    "annotation": "\u2705 Best Practice: Use of bitwise operator for concise conditional checks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1005,
      563,
      62,
      9127,
      28,
      18,
      11
    ],
    "start_token": 3172,
    "end_token": 3196,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1643,
      3083,
      10088,
      329,
      35327,
      26340,
      8794
    ],
    "label": "best_practice",
    "reason": "Use of bitwise operator for concise conditional checks"
  },
  {
    "line": 629,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use of ternary operator for concise conditional assignment",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 3196,
    "end_token": 3200,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1059,
      77,
      560,
      10088,
      329,
      35327,
      26340,
      16237
    ],
    "label": "best_practice",
    "reason": "Use of ternary operator for concise conditional assignment"
  },
  {
    "line": 631,
    "text": "    ---------",
    "annotation": "\u2705 Best Practice: Use of membership test for cleaner conditional checks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      45337
    ],
    "start_token": 3200,
    "end_token": 3204,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      9931,
      1332,
      329,
      21723,
      26340,
      8794
    ],
    "label": "best_practice",
    "reason": "Use of membership test for cleaner conditional checks"
  },
  {
    "line": 633,
    "text": "      code:string",
    "annotation": "\u2705 Best Practice: Use of ternary operator for concise conditional assignment",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      2438,
      25,
      8841
    ],
    "start_token": 3204,
    "end_token": 3212,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1059,
      77,
      560,
      10088,
      329,
      35327,
      26340,
      16237
    ],
    "label": "best_practice",
    "reason": "Use of ternary operator for concise conditional assignment"
  },
  {
    "line": 633,
    "text": "      code:string",
    "annotation": "\u2705 Best Practice: Use of membership test for cleaner conditional checks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      2438,
      25,
      8841
    ],
    "start_token": 3212,
    "end_token": 3220,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      9931,
      1332,
      329,
      21723,
      26340,
      8794
    ],
    "label": "best_practice",
    "reason": "Use of membership test for cleaner conditional checks"
  },
  {
    "line": 638,
    "text": "                  \u7ed3\u675f\u65e5\u671f format\uff1aYYYY-MM-DD \u4e3a\u7a7a\u65f6\u53d6\u6700\u8fd1\u4e00\u4e2a\u4ea4\u6613\u65e5",
    "annotation": "\u2705 Best Practice: Use of ternary operator for concise conditional assignment",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13328,
      119,
      241,
      30266,
      253,
      33768,
      98,
      17312,
      253,
      5794,
      171,
      120,
      248,
      26314,
      26314,
      12,
      12038,
      12,
      16458,
      220,
      10310,
      118,
      163,
      102,
      118,
      33768,
      114,
      20998,
      244,
      17312,
      222,
      32573,
      239,
      31660,
      10310,
      103,
      12859,
      97,
      23626,
      241,
      33768,
      98
    ],
    "start_token": 3220,
    "end_token": 3279,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1059,
      77,
      560,
      10088,
      329,
      35327,
      26340,
      16237
    ],
    "label": "best_practice",
    "reason": "Use of ternary operator for concise conditional assignment"
  },
  {
    "line": 640,
    "text": "                  \u590d\u6743\u7c7b\u578b\uff0cqfq-\u524d\u590d\u6743 hfq-\u540e\u590d\u6743 None-\u4e0d\u590d\u6743\uff0c\u9ed8\u8ba4\u4e3aqfq",
    "annotation": "\u2705 Best Practice: Use of bitwise operator for concise conditional checks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      36469,
      235,
      30266,
      225,
      163,
      109,
      119,
      161,
      252,
      233,
      171,
      120,
      234,
      80,
      69,
      80,
      12,
      30298,
      235,
      13783,
      235,
      30266,
      225,
      289,
      69,
      80,
      12,
      28938,
      236,
      13783,
      235,
      30266,
      225,
      6045,
      12,
      38834,
      13783,
      235,
      30266,
      225,
      171,
      120,
      234,
      165,
      119,
      246,
      164,
      106,
      97,
      10310,
      118,
      80,
      69,
      80
    ],
    "start_token": 3279,
    "end_token": 3350,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1643,
      3083,
      10088,
      329,
      35327,
      26340,
      8794
    ],
    "label": "best_practice",
    "reason": "Use of bitwise operator for concise conditional checks"
  },
  {
    "line": 642,
    "text": "                  \u6570\u636e\u7c7b\u578b\uff0cD=\u65e5k\u7ebf W=\u5468 M=\u6708 5=5\u5206\u949f 15=15\u5206\u949f 30=30\u5206\u949f 60=60\u5206\u949f\uff0c\u9ed8\u8ba4\u4e3aD",
    "annotation": "\ud83e\udde0 ML Signal: URL pattern generation for data fetching",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10545,
      243,
      108,
      162,
      235,
      106,
      163,
      109,
      119,
      161,
      252,
      233,
      171,
      120,
      234,
      35,
      28,
      33768,
      98,
      74,
      163,
      118,
      123,
      370,
      28,
      37772,
      101,
      337,
      28,
      17312,
      230,
      642,
      28,
      20,
      26344,
      228,
      165,
      240,
      253,
      1315,
      28,
      1314,
      26344,
      228,
      165,
      240,
      253,
      1542,
      28,
      1270,
      26344,
      228,
      165,
      240,
      253,
      3126,
      28,
      1899,
      26344,
      228,
      165,
      240,
      253,
      171,
      120,
      234,
      165,
      119,
      246,
      164,
      106,
      97,
      10310,
      118,
      35
    ],
    "start_token": 3350,
    "end_token": 3442,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      3912,
      5270,
      329,
      1366,
      21207,
      278
    ],
    "label": "ml_signal",
    "reason": "URL pattern generation for data fetching"
  },
  {
    "line": 648,
    "text": "    -------",
    "annotation": "\ud83e\udde0 ML Signal: Handling of date ranges for data fetching",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      35656
    ],
    "start_token": 3442,
    "end_token": 3446,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      286,
      3128,
      16069,
      329,
      1366,
      21207,
      278
    ],
    "label": "ml_signal",
    "reason": "Handling of date ranges for data fetching"
  },
  {
    "line": 653,
    "text": "          close \u6536\u76d8\u4ef7",
    "annotation": "\ud83e\udde0 ML Signal: URL pattern generation for data fetching",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1969,
      10545,
      242,
      114,
      33566,
      246,
      20015,
      115
    ],
    "start_token": 3446,
    "end_token": 3463,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      3912,
      5270,
      329,
      1366,
      21207,
      278
    ],
    "label": "ml_signal",
    "reason": "URL pattern generation for data fetching"
  },
  {
    "line": 658,
    "text": "          code \u80a1\u7968\u4ee3\u7801",
    "annotation": "\u2705 Best Practice: Use of string formatting for cleaner code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2438,
      5525,
      224,
      94,
      163,
      98,
      101,
      47987,
      163,
      254,
      223
    ],
    "start_token": 3463,
    "end_token": 3483,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4731,
      33313,
      329,
      21723,
      2438
    ],
    "label": "best_practice",
    "reason": "Use of string formatting for cleaner code"
  },
  {
    "line": 663,
    "text": "    autype = '' if autype is None else autype",
    "annotation": "\u2705 Best Practice: Use of membership test for cleaner conditional checks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1960,
      2981,
      796,
      10148,
      611,
      1960,
      2981,
      318,
      6045,
      2073,
      1960,
      2981
    ],
    "start_token": 3483,
    "end_token": 3498,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      9931,
      1332,
      329,
      21723,
      26340,
      8794
    ],
    "label": "best_practice",
    "reason": "Use of membership test for cleaner conditional checks"
  },
  {
    "line": 664,
    "text": "    if (start is not None) & (start != ''):",
    "annotation": "\ud83e\udde0 ML Signal: URL pattern generation for data fetching",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      611,
      357,
      9688,
      318,
      407,
      6045,
      8,
      1222,
      357,
      9688,
      14512,
      10148,
      2599
    ],
    "start_token": 3498,
    "end_token": 3514,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      10289,
      3912,
      5270,
      329,
      1366,
      21207,
      278
    ],
    "label": "ml_signal",
    "reason": "URL pattern generation for data fetching"
  },
  {
    "line": 668,
    "text": "        if code[:1] in ('1', '5') or index:",
    "annotation": "\u2705 Best Practice: Use of string formatting for cleaner code",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      2438,
      58,
      25,
      16,
      60,
      287,
      19203,
      16,
      3256,
      705,
      20,
      11537,
      393,
      6376,
      25
    ],
    "start_token": 3514,
    "end_token": 3537,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4731,
      33313,
      329,
      21723,
      2438
    ],
    "label": "best_practice",
    "reason": "Use of string formatting for cleaner code"
  },
  {
    "line": 669,
    "text": "            fq = ''",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of TypeError for input validation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      80,
      796,
      10148
    ],
    "start_token": 3537,
    "end_token": 3552,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      5994,
      12331,
      329,
      5128,
      21201
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of TypeError for input validation"
  },
  {
    "line": 676,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: Data fetching with retry mechanism",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 3552,
    "end_token": 3561,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      21207,
      278,
      351,
      1005,
      563,
      9030
    ],
    "label": "ml_signal",
    "reason": "Data fetching with retry mechanism"
  },
  {
    "line": 681,
    "text": "                enddate = str(year+1) + '-12-31'",
    "annotation": "\u2705 Best Practice: Use of membership test for cleaner conditional checks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      886,
      4475,
      796,
      965,
      7,
      1941,
      10,
      16,
      8,
      1343,
      705,
      12,
      1065,
      12,
      3132,
      6
    ],
    "start_token": 3561,
    "end_token": 3592,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      9931,
      1332,
      329,
      21723,
      26340,
      8794
    ],
    "label": "best_practice",
    "reason": "Use of membership test for cleaner conditional checks"
  },
  {
    "line": 682,
    "text": "                url = ct.KLINE_TT_URL%(ct.P_TYPE['http'], ct.DOMAINS['tt'],",
    "annotation": "\u2705 Best Practice: Use of bitwise operator for concise conditional checks",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19016,
      796,
      269,
      83,
      13,
      42,
      24027,
      62,
      15751,
      62,
      21886,
      4,
      7,
      310,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357,
      269,
      83,
      13,
      39170,
      32,
      20913,
      17816,
      926,
      6,
      4357
    ],
    "start_token": 3592,
    "end_token": 3639,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      1643,
      3083,
      10088,
      329,
      35327,
      26340,
      8794
    ],
    "label": "best_practice",
    "reason": "Use of bitwise operator for concise conditional checks"
  },
  {
    "line": 684,
    "text": "                                    ct.TT_K_TYPE[ktype.upper()], startdate, enddate,",
    "annotation": "\u2705 Best Practice: Use of explicit comparison for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      15751,
      62,
      42,
      62,
      25216,
      58,
      74,
      4906,
      13,
      45828,
      3419,
      4357,
      923,
      4475,
      11,
      886,
      4475,
      11
    ],
    "start_token": 3639,
    "end_token": 3695,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      7952,
      7208,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use of explicit comparison for clarity"
  },
  {
    "line": 687,
    "text": "        dataflag = '%s%s'%(fq, ct.TT_K_TYPE[ktype.upper()])",
    "annotation": "\ud83e\udde0 ML Signal: Data filtering based on date range",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      32109,
      796,
      705,
      4,
      82,
      4,
      82,
      6,
      4,
      7,
      69,
      80,
      11,
      269,
      83,
      13,
      15751,
      62,
      42,
      62,
      25216,
      58,
      74,
      4906,
      13,
      45828,
      3419,
      12962
    ],
    "start_token": 3695,
    "end_token": 3731,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      25431,
      1912,
      319,
      3128,
      2837
    ],
    "label": "ml_signal",
    "reason": "Data filtering based on date range"
  },
  {
    "line": 690,
    "text": "                                    symbol, ktype, ktype,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Unreachable code due to return statement above",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      11,
      479,
      4906,
      11,
      479,
      4906,
      11
    ],
    "start_token": 3731,
    "end_token": 3774,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      791,
      16250,
      540,
      2438,
      2233,
      284,
      1441,
      2643,
      2029
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Unreachable code due to return statement above"
  },
  {
    "line": 669,
    "text": "            fq = ''",
    "annotation": "\u2705 Best Practice: Function parameters should be aligned for better readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      80,
      796,
      10148
    ],
    "start_token": 3774,
    "end_token": 3789,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      10007,
      815,
      307,
      19874,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Function parameters should be aligned for better readability."
  },
  {
    "line": 677,
    "text": "            years = du.tt_dates(start, end)",
    "annotation": "\ud83e\udde0 ML Signal: Retry pattern with a loop and pause can be used to train models for network reliability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      812,
      796,
      7043,
      13,
      926,
      62,
      19581,
      7,
      9688,
      11,
      886,
      8
    ],
    "start_token": 3789,
    "end_token": 3812,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      563,
      3912,
      351,
      257,
      9052,
      290,
      14985,
      460,
      307,
      973,
      284,
      4512,
      4981,
      329,
      3127,
      17843,
      13
    ],
    "label": "ml_signal",
    "reason": "Retry pattern with a loop and pause can be used to train models for network reliability."
  },
  {
    "line": 679,
    "text": "            for year in years:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using time.sleep can lead to performance issues in asynchronous environments.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      614,
      287,
      812,
      25
    ],
    "start_token": 3812,
    "end_token": 3828,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      640,
      13,
      42832,
      460,
      1085,
      284,
      2854,
      2428,
      287,
      39354,
      12493,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using time.sleep can lead to performance issues in asynchronous environments."
  },
  {
    "line": 682,
    "text": "                url = ct.KLINE_TT_URL%(ct.P_TYPE['http'], ct.DOMAINS['tt'],",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No validation or sanitization of the URL before making a request.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      19016,
      796,
      269,
      83,
      13,
      42,
      24027,
      62,
      15751,
      62,
      21886,
      4,
      7,
      310,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357,
      269,
      83,
      13,
      39170,
      32,
      20913,
      17816,
      926,
      6,
      4357
    ],
    "start_token": 3828,
    "end_token": 3875,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      21201,
      393,
      5336,
      270,
      1634,
      286,
      262,
      10289,
      878,
      1642,
      257,
      2581,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No validation or sanitization of the URL before making a request."
  },
  {
    "line": 684,
    "text": "                                    ct.TT_K_TYPE[ktype.upper()], startdate, enddate,",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): No exception handling for urlopen which can raise URLError or HTTPError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      15751,
      62,
      42,
      62,
      25216,
      58,
      74,
      4906,
      13,
      45828,
      3419,
      4357,
      923,
      4475,
      11,
      886,
      4475,
      11
    ],
    "start_token": 3875,
    "end_token": 3931,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      1400,
      6631,
      9041,
      329,
      19016,
      9654,
      543,
      460,
      5298,
      37902,
      2538,
      81,
      1472,
      393,
      14626,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "No exception handling for urlopen which can raise URLError or HTTPError."
  },
  {
    "line": 686,
    "text": "                urls.append(url)",
    "annotation": "\u2705 Best Practice: Magic numbers should be avoided; use a named constant for better readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2956,
      7278,
      13,
      33295,
      7,
      6371,
      8
    ],
    "start_token": 3931,
    "end_token": 3953,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6139,
      3146,
      815,
      307,
      13941,
      26,
      779,
      257,
      3706,
      6937,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Magic numbers should be avoided; use a named constant for better readability."
  },
  {
    "line": 690,
    "text": "                                    symbol, ktype, ktype,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing exceptions can leak sensitive information.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      11,
      479,
      4906,
      11,
      479,
      4906,
      11
    ],
    "start_token": 3953,
    "end_token": 3996,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      13269,
      460,
      13044,
      8564,
      1321,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing exceptions can leak sensitive information."
  },
  {
    "line": 693,
    "text": "    else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential compatibility issue with Python 2 and 3.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 3996,
    "end_token": 4001,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      17764,
      2071,
      351,
      11361,
      362,
      290,
      513,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential compatibility issue with Python 2 and 3."
  },
  {
    "line": 695,
    "text": "    data = pd.DataFrame()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Splitting and accessing list elements without validation can lead to IndexError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      796,
      279,
      67,
      13,
      6601,
      19778,
      3419
    ],
    "start_token": 4001,
    "end_token": 4012,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      13341,
      2535,
      290,
      22534,
      1351,
      4847,
      1231,
      21201,
      460,
      1085,
      284,
      12901,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Splitting and accessing list elements without validation can lead to IndexError."
  },
  {
    "line": 698,
    "text": "                                       symbol, code,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Regular expression usage without validation can lead to ReDoS.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      11,
      2438,
      11
    ],
    "start_token": 4012,
    "end_token": 4054,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      23603,
      5408,
      8748,
      1231,
      21201,
      460,
      1085,
      284,
      797,
      46498,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Regular expression usage without validation can lead to ReDoS."
  },
  {
    "line": 698,
    "text": "                                       symbol, code,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using re.subn without checking the result can lead to unexpected behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      11,
      2438,
      11
    ],
    "start_token": 4054,
    "end_token": 4096,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      302,
      13,
      7266,
      77,
      1231,
      10627,
      262,
      1255,
      460,
      1085,
      284,
      10059,
      4069,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using re.subn without checking the result can lead to unexpected behavior."
  },
  {
    "line": 701,
    "text": "                           ignore_index=True)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): json.loads can raise a JSONDecodeError if the input is not valid JSON.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      8856,
      62,
      9630,
      28,
      17821,
      8
    ],
    "start_token": 4096,
    "end_token": 4128,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      33918,
      13,
      46030,
      460,
      5298,
      257,
      19449,
      10707,
      1098,
      12331,
      611,
      262,
      5128,
      318,
      407,
      4938,
      19449,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "json.loads can raise a JSONDecodeError if the input is not valid JSON."
  },
  {
    "line": 702,
    "text": "    if ktype not in ct.K_MIN_LABELS:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Accessing dictionary keys without validation can lead to KeyError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      479,
      4906,
      407,
      287,
      269,
      83,
      13,
      42,
      62,
      23678,
      62,
      48780,
      37142,
      25
    ],
    "start_token": 4128,
    "end_token": 4146,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8798,
      278,
      22155,
      8251,
      1231,
      21201,
      460,
      1085,
      284,
      7383,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Accessing dictionary keys without validation can lead to KeyError."
  },
  {
    "line": 705,
    "text": "                data = data[(data.date >= start) & (data.date <= end)]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Accessing nested dictionary keys without validation can lead to KeyError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      58,
      7,
      7890,
      13,
      4475,
      18189,
      923,
      8,
      1222,
      357,
      7890,
      13,
      4475,
      19841,
      886,
      15437
    ],
    "start_token": 4146,
    "end_token": 4180,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8798,
      278,
      28376,
      22155,
      8251,
      1231,
      21201,
      460,
      1085,
      284,
      7383,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Accessing nested dictionary keys without validation can lead to KeyError."
  },
  {
    "line": 708,
    "text": "    ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Accessing list elements without validation can lead to IndexError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220
    ],
    "start_token": 4180,
    "end_token": 4184,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8798,
      278,
      1351,
      4847,
      1231,
      21201,
      460,
      1085,
      284,
      12901,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Accessing list elements without validation can lead to IndexError."
  },
  {
    "line": 711,
    "text": "                symbol='',",
    "annotation": "\u2705 Best Practice: Use keyword arguments for better readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      11639,
      3256
    ],
    "start_token": 4184,
    "end_token": 4202,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      21179,
      7159,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use keyword arguments for better readability."
  },
  {
    "line": 716,
    "text": "                pause=0.001):",
    "annotation": "\u2705 Best Practice: Use consistent variable naming and spacing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14985,
      28,
      15,
      13,
      8298,
      2599
    ],
    "start_token": 4202,
    "end_token": 4223,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      6414,
      7885,
      19264,
      290,
      31050,
      13
    ],
    "label": "best_practice",
    "reason": "Use consistent variable naming and spacing."
  },
  {
    "line": 717,
    "text": "    for _ in range(retry_count):",
    "annotation": "\ud83e\udde0 ML Signal: Date formatting pattern can be used to train models for date parsing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      4808,
      287,
      2837,
      7,
      1186,
      563,
      62,
      9127,
      2599
    ],
    "start_token": 4223,
    "end_token": 4236,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7536,
      33313,
      3912,
      460,
      307,
      973,
      284,
      4512,
      4981,
      329,
      3128,
      32096,
      13
    ],
    "label": "ml_signal",
    "reason": "Date formatting pattern can be used to train models for date parsing."
  },
  {
    "line": 722,
    "text": "                if len(lines) < 100: #no data",
    "annotation": "\u2705 Best Practice: Consider using a more descriptive variable name than 'col'.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      6615,
      8,
      1279,
      1802,
      25,
      1303,
      3919,
      1366
    ],
    "start_token": 4236,
    "end_token": 4262,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      517,
      35644,
      7885,
      1438,
      621,
      705,
      4033,
      4458
    ],
    "label": "best_practice",
    "reason": "Consider using a more descriptive variable name than 'col'."
  },
  {
    "line": 725,
    "text": "                print(e)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Converting data types without validation can lead to ValueError.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      68,
      8
    ],
    "start_token": 4262,
    "end_token": 4281,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      35602,
      889,
      1366,
      3858,
      1231,
      21201,
      460,
      1085,
      284,
      11052,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Converting data types without validation can lead to ValueError."
  },
  {
    "line": 715,
    "text": "                retry_count=3,",
    "annotation": "\u2705 Best Practice: Check if 'symbols' is a list, set, tuple, or pd.Series for flexibility",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1005,
      563,
      62,
      9127,
      28,
      18,
      11
    ],
    "start_token": 4281,
    "end_token": 4303,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      705,
      1837,
      2022,
      10220,
      6,
      318,
      257,
      1351,
      11,
      900,
      11,
      46545,
      11,
      393,
      279,
      67,
      13,
      27996,
      329,
      13688
    ],
    "label": "best_practice",
    "reason": "Check if 'symbols' is a list, set, tuple, or pd.Series for flexibility"
  },
  {
    "line": 717,
    "text": "    for _ in range(retry_count):",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a collection to fetch data for each item",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      4808,
      287,
      2837,
      7,
      1186,
      563,
      62,
      9127,
      2599
    ],
    "start_token": 4303,
    "end_token": 4316,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      4947,
      284,
      21207,
      1366,
      329,
      1123,
      2378
    ],
    "label": "ml_signal",
    "reason": "Iterating over a collection to fetch data for each item"
  },
  {
    "line": 722,
    "text": "                if len(lines) < 100: #no data",
    "annotation": "\ud83e\udde0 ML Signal: Adding a new column to a DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      6615,
      8,
      1279,
      1802,
      25,
      1303,
      3919,
      1366
    ],
    "start_token": 4316,
    "end_token": 4342,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      18247,
      257,
      649,
      5721,
      284,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Adding a new column to a DataFrame"
  },
  {
    "line": 724,
    "text": "            except Exception as e:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): DataFrame.append is inefficient for large datasets; consider using pd.concat",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 4342,
    "end_token": 4358,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6060,
      19778,
      13,
      33295,
      318,
      30904,
      329,
      1588,
      40522,
      26,
      2074,
      1262,
      279,
      67,
      13,
      1102,
      9246
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "DataFrame.append is inefficient for large datasets; consider using pd.concat"
  },
  {
    "line": 726,
    "text": "            else:",
    "annotation": "\u2705 Best Practice: Return None explicitly if input is not a valid type",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 4358,
    "end_token": 4371,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      6045,
      11777,
      611,
      5128,
      318,
      407,
      257,
      4938,
      2099
    ],
    "label": "best_practice",
    "reason": "Return None explicitly if input is not a valid type"
  },
  {
    "line": 725,
    "text": "                print(e)",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      68,
      8
    ],
    "start_token": 4371,
    "end_token": 4390,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters and return type for better readability and maintainability."
  },
  {
    "line": 746,
    "text": "                for col in df.columns[1:6]:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of default parameter values can be a signal for ML models to understand function behavior.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      951,
      287,
      47764,
      13,
      28665,
      82,
      58,
      16,
      25,
      21,
      5974
    ],
    "start_token": 4390,
    "end_token": 4417,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      4277,
      11507,
      3815,
      460,
      307,
      257,
      6737,
      329,
      10373,
      4981,
      284,
      1833,
      2163,
      4069,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of default parameter values can be a signal for ML models to understand function behavior."
  },
  {
    "line": 748,
    "text": "                return df",
    "annotation": "\u2705 Best Practice: Consider validating the date format to ensure it matches the expected 'YYYY-MM-DD' format.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764
    ],
    "start_token": 4417,
    "end_token": 4434,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4938,
      803,
      262,
      3128,
      5794,
      284,
      4155,
      340,
      7466,
      262,
      2938,
      705,
      26314,
      26314,
      12,
      12038,
      12,
      16458,
      6,
      5794,
      13
    ],
    "label": "best_practice",
    "reason": "Consider validating the date format to ensure it matches the expected 'YYYY-MM-DD' format."
  },
  {
    "line": 750,
    "text": "def get_hists(symbols, start=None, end=None,",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded date strings can lead to maintenance issues and potential logic errors.",
    "confidence": 1.0,
    "tokens": [
      4299,
      651,
      62,
      71,
      1023,
      7,
      1837,
      2022,
      10220,
      11,
      923,
      28,
      14202,
      11,
      886,
      28,
      14202,
      11
    ],
    "start_token": 4434,
    "end_token": 4452,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      3128,
      13042,
      460,
      1085,
      284,
      9262,
      2428,
      290,
      2785,
      9156,
      8563,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded date strings can lead to maintenance issues and potential logic errors."
  },
  {
    "line": 753,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on parameter values can be used to infer function behavior patterns.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 4452,
    "end_token": 4456,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      11507,
      3815,
      460,
      307,
      973,
      284,
      13249,
      2163,
      4069,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on parameter values can be used to infer function behavior patterns."
  },
  {
    "line": 755,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Using external input (date) to construct file paths can lead to path traversal vulnerabilities.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 4456,
    "end_token": 4460,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8554,
      7097,
      5128,
      357,
      4475,
      8,
      284,
      5678,
      2393,
      13532,
      460,
      1085,
      284,
      3108,
      33038,
      282,
      23805,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Using external input (date) to construct file paths can lead to path traversal vulnerabilities."
  },
  {
    "line": 759,
    "text": "            data = get_hist_data(symbol, start=start, end=end,",
    "annotation": "\ud83e\udde0 ML Signal: Returning data frames is a common pattern in data processing functions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      651,
      62,
      10034,
      62,
      7890,
      7,
      1837,
      23650,
      11,
      923,
      28,
      9688,
      11,
      886,
      28,
      437,
      11
    ],
    "start_token": 4460,
    "end_token": 4490,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      1366,
      13431,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587,
      5499,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning data frames is a common pattern in data processing functions."
  },
  {
    "line": 754,
    "text": "    \u6279\u91cf\u83b7\u53d6\u5386\u53f2\u884c\u60c5\u6570\u636e\uff0c\u5177\u4f53\u53c2\u6570\u548c\u8fd4\u56de\u6570\u636e\u7c7b\u578b\u8bf7\u53c2\u8003get_hist_data\u63a5\u53e3",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10545,
      231,
      117,
      34932,
      237,
      164,
      236,
      115,
      20998,
      244,
      43889,
      228,
      20998,
      110,
      26193,
      234,
      46349,
      227,
      46763,
      108,
      162,
      235,
      106,
      171,
      120,
      234,
      17739,
      115,
      19526,
      241,
      20998,
      224,
      46763,
      108,
      161,
      240,
      234,
      32573,
      242,
      32368,
      252,
      46763,
      108,
      162,
      235,
      106,
      163,
      109,
      119,
      161,
      252,
      233,
      46237,
      115,
      20998,
      224,
      32003,
      225,
      1136,
      62,
      10034,
      62,
      7890,
      162,
      236,
      98,
      20998,
      96
    ],
    "start_token": 4490,
    "end_token": 4561,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the function's purpose and parameters"
  },
  {
    "line": 756,
    "text": "    df = pd.DataFrame()",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of datetime object to string format",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      6601,
      19778,
      3419
    ],
    "start_token": 4561,
    "end_token": 4572,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      4818,
      8079,
      2134,
      284,
      4731,
      5794
    ],
    "label": "ml_signal",
    "reason": "Conversion of datetime object to string format"
  },
  {
    "line": 758,
    "text": "        for symbol in symbols:",
    "annotation": "\u2705 Best Practice: Chaining string methods for concise code",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      6194,
      287,
      14354,
      25
    ],
    "start_token": 4572,
    "end_token": 4584,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      609,
      1397,
      4731,
      5050,
      329,
      35327,
      2438
    ],
    "label": "best_practice",
    "reason": "Chaining string methods for concise code"
  },
  {
    "line": 759,
    "text": "            data = get_hist_data(symbol, start=start, end=end,",
    "annotation": "\ud83e\udde0 ML Signal: Function signature with default parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      651,
      62,
      10034,
      62,
      7890,
      7,
      1837,
      23650,
      11,
      923,
      28,
      9688,
      11,
      886,
      28,
      437,
      11
    ],
    "start_token": 4584,
    "end_token": 4614,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      9877,
      351,
      4277,
      10007
    ],
    "label": "ml_signal",
    "reason": "Function signature with default parameters"
  },
  {
    "line": 762,
    "text": "            data['code'] = symbol",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for path traversal if filepath is user-controlled",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      17816,
      8189,
      20520,
      796,
      6194
    ],
    "start_token": 4614,
    "end_token": 4631,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      3108,
      33038,
      282,
      611,
      2393,
      6978,
      318,
      2836,
      12,
      14401
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for path traversal if filepath is user-controlled"
  },
  {
    "line": 764,
    "text": "        return df",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Opening a file without exception handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764
    ],
    "start_token": 4631,
    "end_token": 4640,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      25522,
      257,
      2393,
      1231,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Opening a file without exception handling"
  },
  {
    "line": 767,
    "text": "  ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of deprecated .ix indexer",
    "confidence": 1.0,
    "tokens": [
      220,
      220
    ],
    "start_token": 4640,
    "end_token": 4642,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      39224,
      764,
      844,
      6376,
      263
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of deprecated .ix indexer"
  },
  {
    "line": 771,
    "text": "    \u83b7\u53d6\u6bcf\u65e5\u6536\u76d8\u884c\u60c5",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of deprecated .ix indexer",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      5525,
      236,
      115,
      20998,
      244,
      162,
      107,
      237,
      33768,
      98,
      162,
      242,
      114,
      33566,
      246,
      26193,
      234,
      46349,
      227
    ],
    "start_token": 4642,
    "end_token": 4664,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      39224,
      764,
      844,
      6376,
      263
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of deprecated .ix indexer"
  },
  {
    "line": 777,
    "text": "    -------------",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over stock indices",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      32501
    ],
    "start_token": 4664,
    "end_token": 4669,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      4283,
      36525
    ],
    "label": "ml_signal",
    "reason": "Iterating over stock indices"
  },
  {
    "line": 780,
    "text": "    price \u73b0\u4ef7, change \u6da8\u8dcc, open \u4eca\u5f00, high \u6700\u9ad8,",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on frequency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2756,
      13328,
      236,
      108,
      20015,
      115,
      11,
      1487,
      10545,
      114,
      101,
      164,
      115,
      234,
      11,
      1280,
      220,
      20015,
      232,
      28156,
      222,
      11,
      1029,
      42164,
      222,
      165,
      45865,
      11
    ],
    "start_token": 4669,
    "end_token": 4700,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      8373
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on frequency"
  },
  {
    "line": 787,
    "text": "    activity \u6d3b\u8dc3\u5ea6, avgturnover \u7b14\u6362\u624b, attack \u653b\u51fb\u6ce2%,",
    "annotation": "\u2705 Best Practice: Use a loop or mapping for renaming columns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      3842,
      10545,
      112,
      119,
      164,
      115,
      225,
      41753,
      99,
      11,
      1196,
      13655,
      700,
      2502,
      13328,
      105,
      242,
      162,
      235,
      95,
      33699,
      233,
      11,
      1368,
      10545,
      242,
      119,
      49035,
      119,
      37345,
      95,
      7441
    ],
    "start_token": 4700,
    "end_token": 4735,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      9052,
      393,
      16855,
      329,
      8851,
      3723,
      15180
    ],
    "label": "best_practice",
    "reason": "Use a loop or mapping for renaming columns"
  },
  {
    "line": 794,
    "text": "    datepre = '' if date is None else wdate[0:4] + wdate[4:6] + '/'",
    "annotation": "\u2705 Best Practice: Use a loop or mapping for type conversion",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3128,
      3866,
      796,
      10148,
      611,
      3128,
      318,
      6045,
      2073,
      266,
      4475,
      58,
      15,
      25,
      19,
      60,
      1343,
      266,
      4475,
      58,
      19,
      25,
      21,
      60,
      1343,
      31051,
      6
    ],
    "start_token": 4735,
    "end_token": 4765,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      9052,
      393,
      16855,
      329,
      2099,
      11315
    ],
    "label": "best_practice",
    "reason": "Use a loop or mapping for type conversion"
  },
  {
    "line": 801,
    "text": "def get_dt_time(t):",
    "annotation": "\u2705 Best Practice: Use a loop or mapping for repetitive operations",
    "confidence": 0.5,
    "tokens": [
      4299,
      651,
      62,
      28664,
      62,
      2435,
      7,
      83,
      2599
    ],
    "start_token": 4765,
    "end_token": 4774,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      9052,
      393,
      16855,
      329,
      28585,
      4560
    ],
    "label": "best_practice",
    "reason": "Use a loop or mapping for repetitive operations"
  },
  {
    "line": 806,
    "text": "",
    "annotation": "\u2705 Best Practice: Use a loop or mapping for repetitive assignments",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 4774,
    "end_token": 4774,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      9052,
      393,
      16855,
      329,
      28585,
      25815
    ],
    "label": "best_practice",
    "reason": "Use a loop or mapping for repetitive assignments"
  },
  {
    "line": 851,
    "text": "                df.loc[:,'ASKPRICE7']  = 0",
    "annotation": "\ud83e\udde0 ML Signal: Printing dataframes for debugging",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      17946,
      58,
      25,
      4032,
      1921,
      42,
      4805,
      8476,
      22,
      20520,
      220,
      796,
      657
    ],
    "start_token": 4774,
    "end_token": 4804,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44118,
      1366,
      37805,
      329,
      28769
    ],
    "label": "ml_signal",
    "reason": "Printing dataframes for debugging"
  },
  {
    "line": 851,
    "text": "                df.loc[:,'ASKPRICE7']  = 0",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential data loss if df is not properly validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      17946,
      58,
      25,
      4032,
      1921,
      42,
      4805,
      8476,
      22,
      20520,
      220,
      796,
      657
    ],
    "start_token": 4804,
    "end_token": 4834,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1366,
      2994,
      611,
      47764,
      318,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential data loss if df is not properly validated"
  },
  {
    "line": 877,
    "text": "                df.loc[:,'BIDVOL3']  = 0",
    "annotation": "\u2705 Best Practice: Strip and normalize the code to uppercase for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      17946,
      58,
      25,
      4032,
      33,
      2389,
      44558,
      18,
      20520,
      220,
      796,
      657
    ],
    "start_token": 4834,
    "end_token": 4863,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18508,
      290,
      3487,
      1096,
      262,
      2438,
      284,
      334,
      39921,
      589,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Strip and normalize the code to uppercase for consistency"
  },
  {
    "line": 879,
    "text": "                df.loc[:,'BIDVOL5']  = 0",
    "annotation": "\ud83e\udde0 ML Signal: Retry pattern for network operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      17946,
      58,
      25,
      4032,
      33,
      2389,
      44558,
      20,
      20520,
      220,
      796,
      657
    ],
    "start_token": 4863,
    "end_token": 4892,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      4990,
      563,
      3912,
      329,
      3127,
      4560
    ],
    "label": "ml_signal",
    "reason": "Retry pattern for network operations"
  },
  {
    "line": 883,
    "text": "                df.loc[:,'BIDVOL9']  = 0",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing error messages can leak information",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      17946,
      58,
      25,
      4032,
      33,
      2389,
      44558,
      24,
      20520,
      220,
      796,
      657
    ],
    "start_token": 4892,
    "end_token": 4921,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      4049,
      6218,
      460,
      13044,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing error messages can leak information"
  },
  {
    "line": 886,
    "text": "                df.loc[:,'VOL30']=0.0",
    "annotation": "\u2705 Best Practice: Unpacking connection tuple for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      17946,
      58,
      25,
      4032,
      44558,
      1270,
      20520,
      28,
      15,
      13,
      15
    ],
    "start_token": 4921,
    "end_token": 4949,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      791,
      41291,
      4637,
      46545,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Unpacking connection tuple for clarity"
  },
  {
    "line": 888,
    "text": "                df.loc[:,'TOTAL_TURNOVER']=0.0",
    "annotation": "\u2705 Best Practice: Strip and normalize the frequency to uppercase for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      17946,
      58,
      25,
      4032,
      51,
      27510,
      62,
      51,
      4261,
      15285,
      5959,
      20520,
      28,
      15,
      13,
      15
    ],
    "start_token": 4949,
    "end_token": 4982,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18508,
      290,
      3487,
      1096,
      262,
      8373,
      284,
      334,
      39921,
      589,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Strip and normalize the frequency to uppercase for consistency"
  },
  {
    "line": 890,
    "text": "                print(df)",
    "annotation": "\u2705 Best Practice: Strip and normalize the asset type to uppercase for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      7568,
      8
    ],
    "start_token": 4982,
    "end_token": 5001,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      18508,
      290,
      3487,
      1096,
      262,
      11171,
      2099,
      284,
      334,
      39921,
      589,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Strip and normalize the asset type to uppercase for consistency"
  },
  {
    "line": 892,
    "text": "#                 df = bar(stk, conn=cons, start_date=date, end_date=date, freq=freq, market=market, asset=asset)",
    "annotation": "\u2705 Best Practice: Use a helper function to determine market code",
    "confidence": 1.0,
    "tokens": [
      2,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      2318,
      7,
      301,
      74,
      11,
      48260,
      28,
      5936,
      11,
      923,
      62,
      4475,
      28,
      4475,
      11,
      886,
      62,
      4475,
      28,
      4475,
      11,
      2030,
      80,
      28,
      19503,
      80,
      11,
      1910,
      28,
      10728,
      11,
      11171,
      28,
      562,
      316,
      8
    ],
    "start_token": 5001,
    "end_token": 5056,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      31904,
      2163,
      284,
      5004,
      1910,
      2438
    ],
    "label": "best_practice",
    "reason": "Use a helper function to determine market code"
  },
  {
    "line": 895,
    "text": "    ",
    "annotation": "\u2705 Best Practice: Use getattr for dynamic function retrieval",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220
    ],
    "start_token": 5056,
    "end_token": 5060,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      651,
      35226,
      329,
      8925,
      2163,
      45069
    ],
    "label": "best_practice",
    "reason": "Use getattr for dynamic function retrieval"
  },
  {
    "line": 898,
    "text": " ",
    "annotation": "\u2705 Best Practice: Adjust ktype for non-standard assets",
    "confidence": 0.5,
    "tokens": [
      220
    ],
    "start_token": 5060,
    "end_token": 5061,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20292,
      479,
      4906,
      329,
      1729,
      12,
      20307,
      6798
    ],
    "label": "best_practice",
    "reason": "Adjust ktype for non-standard assets"
  },
  {
    "line": 904,
    "text": "           factors = [],",
    "annotation": "\ud83e\udde0 ML Signal: Pagination pattern for data retrieval",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5087,
      796,
      685,
      4357
    ],
    "start_token": 5061,
    "end_token": 5075,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      31525,
      1883,
      3912,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Pagination pattern for data retrieval"
  },
  {
    "line": 907,
    "text": "    BAR\u6570\u636e",
    "annotation": "\u2705 Best Practice: Use append for DataFrame concatenation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      31597,
      46763,
      108,
      162,
      235,
      106
    ],
    "start_token": 5075,
    "end_token": 5084,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      24443,
      329,
      6060,
      19778,
      1673,
      36686,
      341
    ],
    "label": "best_practice",
    "reason": "Use append for DataFrame concatenation"
  },
  {
    "line": 910,
    "text": "    code:\u8bc1\u5238\u4ee3\u7801\uff0c\u652f\u6301\u80a1\u7968,ETF/LOF,\u671f\u8d27/\u671f\u6743,\u6e2f\u80a1",
    "annotation": "\u2705 Best Practice: Use lambda for concise datetime formatting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2438,
      25,
      46237,
      223,
      26344,
      116,
      47987,
      163,
      254,
      223,
      171,
      120,
      234,
      162,
      242,
      107,
      162,
      234,
      223,
      164,
      224,
      94,
      163,
      98,
      101,
      11,
      22274,
      14,
      43,
      19238,
      11,
      17312,
      253,
      164,
      112,
      100,
      14,
      17312,
      253,
      30266,
      225,
      11,
      162,
      116,
      107,
      164,
      224,
      94
    ],
    "start_token": 5084,
    "end_token": 5135,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      37456,
      329,
      35327,
      4818,
      8079,
      33313
    ],
    "label": "best_practice",
    "reason": "Use lambda for concise datetime formatting"
  },
  {
    "line": 921,
    "text": "        tor:\u6362\u624b\u7387\uff0c\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['tor']",
    "annotation": "\u2705 Best Practice: Convert datetime column to datetime type",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      7332,
      25,
      162,
      235,
      95,
      33699,
      233,
      163,
      236,
      229,
      171,
      120,
      234,
      165,
      119,
      246,
      164,
      106,
      97,
      38834,
      32573,
      242,
      32368,
      252,
      171,
      120,
      234,
      32573,
      242,
      32368,
      252,
      165,
      250,
      222,
      162,
      234,
      229,
      22522,
      248,
      171,
      120,
      248,
      31412,
      28,
      17816,
      13165,
      20520
    ],
    "start_token": 5135,
    "end_token": 5189,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      4818,
      8079,
      5721,
      284,
      4818,
      8079,
      2099
    ],
    "label": "best_practice",
    "reason": "Convert datetime column to datetime type"
  },
  {
    "line": 923,
    "text": "    retry_count:\u7f51\u7edc\u91cd\u8bd5\u6b21\u6570",
    "annotation": "\u2705 Best Practice: Use method chaining for DataFrame operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1005,
      563,
      62,
      9127,
      25,
      163,
      121,
      239,
      163,
      119,
      250,
      34932,
      235,
      46237,
      243,
      162,
      105,
      94,
      46763,
      108
    ],
    "start_token": 5189,
    "end_token": 5212,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2446,
      442,
      1397,
      329,
      6060,
      19778,
      4560
    ],
    "label": "best_practice",
    "reason": "Use method chaining for DataFrame operations"
  },
  {
    "line": 928,
    "text": "    code:\u4ee3\u7801",
    "annotation": "\u2705 Best Practice: Sort data by index for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2438,
      25,
      47987,
      163,
      254,
      223
    ],
    "start_token": 5212,
    "end_token": 5221,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      33947,
      1366,
      416,
      6376,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Sort data by index for consistency"
  },
  {
    "line": 932,
    "text": "    code/open/close/high/low/avg_price\uff1a\u5747\u4ef7  position\uff1a\u6301\u4ed3\u91cf  vol\uff1a\u6210\u4ea4\u603b\u91cf",
    "annotation": "\u2705 Best Practice: Adjust volume for specific ktype",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2438,
      14,
      9654,
      14,
      19836,
      14,
      8929,
      14,
      9319,
      14,
      615,
      70,
      62,
      20888,
      171,
      120,
      248,
      161,
      251,
      229,
      20015,
      115,
      220,
      2292,
      171,
      120,
      248,
      162,
      234,
      223,
      20015,
      241,
      34932,
      237,
      220,
      2322,
      171,
      120,
      248,
      22755,
      238,
      12859,
      97,
      45250,
      119,
      34932,
      237
    ],
    "start_token": 5221,
    "end_token": 5271,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20292,
      6115,
      329,
      2176,
      479,
      4906
    ],
    "label": "best_practice",
    "reason": "Adjust volume for specific ktype"
  },
  {
    "line": 941,
    "text": "            ktype = freq.strip().upper()",
    "annotation": "\u2705 Best Practice: Drop unnecessary columns for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      4906,
      796,
      2030,
      80,
      13,
      36311,
      22446,
      45828,
      3419
    ],
    "start_token": 5271,
    "end_token": 5292,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14258,
      13114,
      15180,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Drop unnecessary columns for clarity"
  },
  {
    "line": 946,
    "text": "            else:",
    "annotation": "\u2705 Best Practice: Use a separate function for factor adjustment",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 5292,
    "end_token": 5305,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      4553,
      2163,
      329,
      5766,
      15068
    ],
    "label": "best_practice",
    "reason": "Use a separate function for factor adjustment"
  },
  {
    "line": 949,
    "text": "            if ktype in ct.KTYPE_LOW_COLS:",
    "annotation": "\u2705 Best Practice: Merge DataFrames for additional data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      479,
      4906,
      287,
      269,
      83,
      13,
      42,
      25216,
      62,
      43,
      3913,
      62,
      25154,
      50,
      25
    ],
    "start_token": 5305,
    "end_token": 5332,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39407,
      6060,
      35439,
      329,
      3224,
      1366
    ],
    "label": "best_practice",
    "reason": "Merge DataFrames for additional data"
  },
  {
    "line": 951,
    "text": "                for i in range(100): ",
    "annotation": "\u2705 Best Practice: Fill missing values with backfill method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1312,
      287,
      2837,
      7,
      3064,
      2599,
      220
    ],
    "start_token": 5332,
    "end_token": 5355,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      27845,
      4814,
      3815,
      351,
      736,
      20797,
      2446
    ],
    "label": "best_practice",
    "reason": "Fill missing values with backfill method"
  },
  {
    "line": 935,
    "text": "    for _ in range(retry_count):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of deprecated 'ix' indexer, which can lead to unexpected behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      4808,
      287,
      2837,
      7,
      1186,
      563,
      62,
      9127,
      2599
    ],
    "start_token": 5355,
    "end_token": 5368,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      39224,
      705,
      844,
      6,
      6376,
      263,
      11,
      543,
      460,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of deprecated 'ix' indexer, which can lead to unexpected behavior"
  },
  {
    "line": 937,
    "text": "            if conn is None:",
    "annotation": "\ud83e\udde0 ML Signal: Usage of lambda function for mapping",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      48260,
      318,
      6045,
      25
    ],
    "start_token": 5368,
    "end_token": 5384,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      37456,
      2163,
      329,
      16855
    ],
    "label": "ml_signal",
    "reason": "Usage of lambda function for mapping"
  },
  {
    "line": 939,
    "text": "                return None",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on variable 'adj'",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 5384,
    "end_token": 5401,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      7885,
      705,
      41255,
      6
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on variable 'adj'"
  },
  {
    "line": 945,
    "text": "                func = getattr(api, ct.ASSET[asset])",
    "annotation": "\ud83e\udde0 ML Signal: Mapping function applied to data column",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25439,
      796,
      651,
      35226,
      7,
      15042,
      11,
      269,
      83,
      13,
      10705,
      2767,
      58,
      562,
      316,
      12962
    ],
    "start_token": 5401,
    "end_token": 5432,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      2163,
      5625,
      284,
      1366,
      5721
    ],
    "label": "ml_signal",
    "reason": "Mapping function applied to data column"
  },
  {
    "line": 947,
    "text": "                ktype = 'XD' if ktype == 'D' else ktype",
    "annotation": "\u2705 Best Practice: Dropping temporary columns after use to maintain clean data structure",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      4906,
      796,
      705,
      55,
      35,
      6,
      611,
      479,
      4906,
      6624,
      705,
      35,
      6,
      2073,
      479,
      4906
    ],
    "start_token": 5432,
    "end_token": 5464,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      21045,
      2105,
      8584,
      15180,
      706,
      779,
      284,
      5529,
      3424,
      1366,
      4645
    ],
    "label": "best_practice",
    "reason": "Dropping temporary columns after use to maintain clean data structure"
  },
  {
    "line": 949,
    "text": "            if ktype in ct.KTYPE_LOW_COLS:",
    "annotation": "\u2705 Best Practice: Checking for None and length > 0 before processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      479,
      4906,
      287,
      269,
      83,
      13,
      42,
      25216,
      62,
      43,
      3913,
      62,
      25154,
      50,
      25
    ],
    "start_token": 5464,
    "end_token": 5491,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      39432,
      329,
      6045,
      290,
      4129,
      1875,
      657,
      878,
      7587
    ],
    "label": "best_practice",
    "reason": "Checking for None and length > 0 before processing"
  },
  {
    "line": 951,
    "text": "                for i in range(100): ",
    "annotation": "\ud83e\udde0 ML Signal: Checking for specific value in list",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      329,
      1312,
      287,
      2837,
      7,
      3064,
      2599,
      220
    ],
    "start_token": 5491,
    "end_token": 5514,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      39432,
      329,
      2176,
      1988,
      287,
      1351
    ],
    "label": "ml_signal",
    "reason": "Checking for specific value in list"
  },
  {
    "line": 954,
    "text": "                    data = data.append(df) if i == 0 else df.append(data,  ignore_index=True)",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on variable 'ktype'",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      13,
      33295,
      7,
      7568,
      8,
      611,
      1312,
      6624,
      657,
      2073,
      47764,
      13,
      33295,
      7,
      7890,
      11,
      220,
      8856,
      62,
      9630,
      28,
      17821,
      8
    ],
    "start_token": 5514,
    "end_token": 5559,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      7885,
      705,
      74,
      4906,
      6
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on variable 'ktype'"
  },
  {
    "line": 956,
    "text": "                        break",
    "annotation": "\u2705 Best Practice: Merging dataframes with index alignment",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2270
    ],
    "start_token": 5559,
    "end_token": 5583,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      4638,
      2667,
      1366,
      37805,
      351,
      6376,
      19114
    ],
    "label": "best_practice",
    "reason": "Merging dataframes with index alignment"
  },
  {
    "line": 958,
    "text": "            if ktype in ct.KTYPE_ARR:",
    "annotation": "\u2705 Best Practice: Using fillna with method to handle missing data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      479,
      4906,
      287,
      269,
      83,
      13,
      42,
      25216,
      62,
      26465,
      25
    ],
    "start_token": 5583,
    "end_token": 5606,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8554,
      6070,
      2616,
      351,
      2446,
      284,
      5412,
      4814,
      1366
    ],
    "label": "best_practice",
    "reason": "Using fillna with method to handle missing data"
  },
  {
    "line": 953,
    "text": "                    df =  api.to_df(ds)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Use of deprecated 'ix' indexer, which can lead to unexpected behavior",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      220,
      40391,
      13,
      1462,
      62,
      7568,
      7,
      9310,
      8
    ],
    "start_token": 5606,
    "end_token": 5636,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      5765,
      286,
      39224,
      705,
      844,
      6,
      6376,
      263,
      11,
      543,
      460,
      1085,
      284,
      10059,
      4069
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Use of deprecated 'ix' indexer, which can lead to unexpected behavior"
  },
  {
    "line": 968,
    "text": "                .set_index('datetime', drop=True, inplace=False) \\",
    "annotation": "\u2705 Best Practice: Use string formatting for better readability and maintainability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      764,
      2617,
      62,
      9630,
      10786,
      19608,
      8079,
      3256,
      4268,
      28,
      17821,
      11,
      287,
      5372,
      28,
      25101,
      8,
      3467
    ],
    "start_token": 5636,
    "end_token": 5669,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      4731,
      33313,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799
    ],
    "label": "best_practice",
    "reason": "Use string formatting for better readability and maintainability"
  },
  {
    "line": 977,
    "text": "                data = data[ct.BAR_X_COLS]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide errors and make debugging difficult",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      58,
      310,
      13,
      33,
      1503,
      62,
      55,
      62,
      25154,
      50,
      60
    ],
    "start_token": 5669,
    "end_token": 5698,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      8563,
      290,
      787,
      28769,
      2408
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide errors and make debugging difficult"
  },
  {
    "line": 980,
    "text": "                    data = data[ct.BAR_X_FUTURE_RL_COLS]",
    "annotation": "\u2705 Best Practice: The 'else' block after 'try' is redundant if 'except' returns",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      58,
      310,
      13,
      33,
      1503,
      62,
      55,
      62,
      37,
      3843,
      11335,
      62,
      7836,
      62,
      25154,
      50,
      60
    ],
    "start_token": 5698,
    "end_token": 5737,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      383,
      705,
      17772,
      6,
      2512,
      706,
      705,
      28311,
      6,
      318,
      30806,
      611,
      705,
      16341,
      6,
      5860
    ],
    "label": "best_practice",
    "reason": "The 'else' block after 'try' is redundant if 'except' returns"
  },
  {
    "line": 984,
    "text": "            if asset == 'E':",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic IOError without context can make error handling difficult",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      11171,
      6624,
      705,
      36,
      10354
    ],
    "start_token": 5737,
    "end_token": 5754,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      24418,
      12331,
      1231,
      4732,
      460,
      787,
      4049,
      9041,
      2408
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic IOError without context can make error handling difficult"
  },
  {
    "line": 981,
    "text": "                else:",
    "annotation": "\u2705 Best Practice: Consider providing type hints for function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 5754,
    "end_token": 5771,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4955,
      2099,
      20269,
      329,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider providing type hints for function parameters and return type for better readability and maintainability."
  },
  {
    "line": 985,
    "text": "                if adj is not None:",
    "annotation": "\ud83e\udde0 ML Signal: Conditional logic based on asset type can indicate different processing paths.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      9224,
      318,
      407,
      6045,
      25
    ],
    "start_token": 5771,
    "end_token": 5792,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      11171,
      2099,
      460,
      7603,
      1180,
      7587,
      13532,
      13
    ],
    "label": "ml_signal",
    "reason": "Conditional logic based on asset type can indicate different processing paths."
  },
  {
    "line": 988,
    "text": "                        data = data.merge(df, left_index=True, right_index=True)",
    "annotation": "\ud83e\udde0 ML Signal: Different asset types trigger different function calls.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      13,
      647,
      469,
      7,
      7568,
      11,
      1364,
      62,
      9630,
      28,
      17821,
      11,
      826,
      62,
      9630,
      28,
      17821,
      8
    ],
    "start_token": 5792,
    "end_token": 5836,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      20615,
      11171,
      3858,
      7616,
      1180,
      2163,
      3848,
      13
    ],
    "label": "ml_signal",
    "reason": "Different asset types trigger different function calls."
  },
  {
    "line": 991,
    "text": "                        def get_val(day):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using os.path.exists can be risky if the path is user-controlled, leading to potential path traversal issues.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      825,
      651,
      62,
      2100,
      7,
      820,
      2599
    ],
    "start_token": 5836,
    "end_token": 5866,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      28686,
      13,
      6978,
      13,
      1069,
      1023,
      460,
      307,
      17564,
      611,
      262,
      3108,
      318,
      2836,
      12,
      14401,
      11,
      3756,
      284,
      2785,
      3108,
      33038,
      282,
      2428,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using os.path.exists can be risky if the path is user-controlled, leading to potential path traversal issues."
  },
  {
    "line": 993,
    "text": "                        data['adj_factor'] = data.index.map(lambda x: get_val(str(x)[0:10]))",
    "annotation": "\ud83e\udde0 ML Signal: Use of pandas to read data from a pickle file indicates data processing patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      17816,
      41255,
      62,
      31412,
      20520,
      796,
      1366,
      13,
      9630,
      13,
      8899,
      7,
      50033,
      2124,
      25,
      651,
      62,
      2100,
      7,
      2536,
      7,
      87,
      38381,
      15,
      25,
      940,
      60,
      4008
    ],
    "start_token": 5866,
    "end_token": 5918,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19798,
      292,
      284,
      1100,
      1366,
      422,
      257,
      2298,
      293,
      2393,
      9217,
      1366,
      7587,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of pandas to read data from a pickle file indicates data processing patterns."
  },
  {
    "line": 996,
    "text": "                            data[col] = data[col] * data['adj_factor']",
    "annotation": "\ud83e\udde0 ML Signal: Function call to get_instrument suggests dynamic data retrieval.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      58,
      4033,
      60,
      796,
      1366,
      58,
      4033,
      60,
      1635,
      1366,
      17816,
      41255,
      62,
      31412,
      20520
    ],
    "start_token": 5918,
    "end_token": 5961,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      869,
      284,
      651,
      62,
      259,
      43872,
      5644,
      8925,
      1366,
      45069,
      13
    ],
    "label": "ml_signal",
    "reason": "Function call to get_instrument suggests dynamic data retrieval."
  },
  {
    "line": 996,
    "text": "                            data[col] = data[col] * data['adj_factor']",
    "annotation": "\ud83e\udde0 ML Signal: Use of to_pickle indicates data serialization patterns.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      58,
      4033,
      60,
      796,
      1366,
      58,
      4033,
      60,
      1635,
      1366,
      17816,
      41255,
      62,
      31412,
      20520
    ],
    "start_token": 5961,
    "end_token": 6004,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      284,
      62,
      27729,
      293,
      9217,
      1366,
      11389,
      1634,
      7572,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of to_pickle indicates data serialization patterns."
  },
  {
    "line": 996,
    "text": "                            data[col] = data[col] * data['adj_factor']",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Accessing DataFrame values without checking if the code exists can lead to IndexError.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      58,
      4033,
      60,
      796,
      1366,
      58,
      4033,
      60,
      1635,
      1366,
      17816,
      41255,
      62,
      31412,
      20520
    ],
    "start_token": 6004,
    "end_token": 6047,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      8798,
      278,
      6060,
      19778,
      3815,
      1231,
      10627,
      611,
      262,
      2438,
      7160,
      460,
      1085,
      284,
      12901,
      12331,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Accessing DataFrame values without checking if the code exists can lead to IndexError."
  },
  {
    "line": 1025,
    "text": "                        data['ma%s'%a] = data['ma%s'%a].astype(float)",
    "annotation": "\u2705 Best Practice: Convert date to integer for consistent format and easier comparison",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      17816,
      2611,
      4,
      82,
      6,
      4,
      64,
      60,
      796,
      1366,
      17816,
      2611,
      4,
      82,
      6,
      4,
      64,
      4083,
      459,
      2981,
      7,
      22468,
      8
    ],
    "start_token": 6047,
    "end_token": 6094,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      3128,
      284,
      18253,
      329,
      6414,
      5794,
      290,
      4577,
      7208
    ],
    "label": "best_practice",
    "reason": "Convert date to integer for consistent format and easier comparison"
  },
  {
    "line": 1027,
    "text": "                data[col] = data[col].astype(float)",
    "annotation": "\u2705 Best Practice: Convert today's date to integer for consistent format and easier comparison",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      58,
      4033,
      60,
      796,
      1366,
      58,
      4033,
      4083,
      459,
      2981,
      7,
      22468,
      8
    ],
    "start_token": 6094,
    "end_token": 6123,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      1909,
      338,
      3128,
      284,
      18253,
      329,
      6414,
      5794,
      290,
      4577,
      7208
    ],
    "label": "best_practice",
    "reason": "Convert today's date to integer for consistent format and easier comparison"
  },
  {
    "line": 1032,
    "text": "            return None",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing error messages can expose sensitive information",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 6123,
    "end_token": 6136,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      4049,
      6218,
      460,
      15651,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing error messages can expose sensitive information"
  },
  {
    "line": 1037,
    "text": "    raise IOError(ct.NETWORK_URL_ERROR_MSG)",
    "annotation": "\u2705 Best Practice: Use a helper function to determine market code for better readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5298,
      24418,
      12331,
      7,
      310,
      13,
      12884,
      33249,
      62,
      21886,
      62,
      24908,
      62,
      5653,
      38,
      8
    ],
    "start_token": 6136,
    "end_token": 6155,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      31904,
      2163,
      284,
      5004,
      1910,
      2438,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use a helper function to determine market code for better readability"
  },
  {
    "line": 1038,
    "text": "",
    "annotation": "\u2705 Best Practice: Use appropriate API connection based on asset type",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 6155,
    "end_token": 6155,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      5035,
      7824,
      4637,
      1912,
      319,
      11171,
      2099
    ],
    "label": "best_practice",
    "reason": "Use appropriate API connection based on asset type"
  },
  {
    "line": 1043,
    "text": "        mkcode = ct._market_code(code)",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of fetching transaction data for the current date",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      33480,
      8189,
      796,
      269,
      83,
      13557,
      10728,
      62,
      8189,
      7,
      8189,
      8
    ],
    "start_token": 6155,
    "end_token": 6174,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      21207,
      278,
      8611,
      1366,
      329,
      262,
      1459,
      3128
    ],
    "label": "ml_signal",
    "reason": "Pattern of fetching transaction data for the current date"
  },
  {
    "line": 1046,
    "text": "    else:",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of fetching historical transaction data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 6174,
    "end_token": 6179,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      21207,
      278,
      6754,
      8611,
      1366
    ],
    "label": "ml_signal",
    "reason": "Pattern of fetching historical transaction data"
  },
  {
    "line": 1048,
    "text": "            mks = pd.read_pickle(ct.INST_PLK_F)",
    "annotation": "\u2705 Best Practice: Convert data to DataFrame for easier manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      285,
      591,
      796,
      279,
      67,
      13,
      961,
      62,
      27729,
      293,
      7,
      310,
      13,
      38604,
      62,
      6489,
      42,
      62,
      37,
      8
    ],
    "start_token": 6179,
    "end_token": 6210,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      1366,
      284,
      6060,
      19778,
      329,
      4577,
      17512
    ],
    "label": "best_practice",
    "reason": "Convert data to DataFrame for easier manipulation"
  },
  {
    "line": 1050,
    "text": "            mks = get_instrument(xapi)",
    "annotation": "\u2705 Best Practice: Append data to DataFrame in a consistent manner",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      285,
      591,
      796,
      651,
      62,
      259,
      43872,
      7,
      87,
      15042,
      8
    ],
    "start_token": 6210,
    "end_token": 6232,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      437,
      1366,
      284,
      6060,
      19778,
      287,
      257,
      6414,
      5642
    ],
    "label": "best_practice",
    "reason": "Append data to DataFrame in a consistent manner"
  },
  {
    "line": 1057,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use lambda for concise date formatting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 6232,
    "end_token": 6236,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      37456,
      329,
      35327,
      3128,
      33313
    ],
    "label": "best_practice",
    "reason": "Use lambda for concise date formatting"
  },
  {
    "line": 1059,
    "text": "    Parameters:",
    "annotation": "\u2705 Best Practice: Select relevant columns for the final DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      40117,
      25
    ],
    "start_token": 6236,
    "end_token": 6241,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9683,
      5981,
      15180,
      329,
      262,
      2457,
      6060,
      19778
    ],
    "label": "best_practice",
    "reason": "Select relevant columns for the final DataFrame"
  },
  {
    "line": 1061,
    "text": "    code:\u8bc1\u5238\u4ee3\u7801\uff0c\u652f\u6301\u80a1\u7968,ETF/LOF,\u671f\u8d27/\u671f\u6743,\u6e2f\u80a1",
    "annotation": "\u2705 Best Practice: Rename columns for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2438,
      25,
      46237,
      223,
      26344,
      116,
      47987,
      163,
      254,
      223,
      171,
      120,
      234,
      162,
      242,
      107,
      162,
      234,
      223,
      164,
      224,
      94,
      163,
      98,
      101,
      11,
      22274,
      14,
      43,
      19238,
      11,
      17312,
      253,
      164,
      112,
      100,
      14,
      17312,
      253,
      30266,
      225,
      11,
      162,
      116,
      107,
      164,
      224,
      94
    ],
    "start_token": 6241,
    "end_token": 6292,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      480,
      15180,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Rename columns for clarity"
  },
  {
    "line": 1067,
    "text": "                            \u4e0a\u6d77\u4e2a\u80a1\u671f\u6743         QQ \u9999\u6e2f\u6307\u6570         FH \u90d1\u5dde\u5546\u54c1         QZ \u5927\u8fde\u5546\u54c1         QD \u4e0a\u6d77\u671f\u8d27         QS",
    "annotation": "\u2705 Best Practice: Drop unnecessary columns for the current date",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      41468,
      38184,
      115,
      10310,
      103,
      164,
      224,
      94,
      17312,
      253,
      30266,
      225,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1195,
      48,
      16268,
      99,
      247,
      162,
      116,
      107,
      162,
      234,
      229,
      46763,
      108,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      376,
      39,
      16268,
      225,
      239,
      32432,
      252,
      161,
      243,
      228,
      161,
      241,
      223,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1195,
      57,
      36469,
      100,
      32573,
      252,
      161,
      243,
      228,
      161,
      241,
      223,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1195,
      35,
      220,
      41468,
      38184,
      115,
      17312,
      253,
      164,
      112,
      100,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1195,
      50
    ],
    "start_token": 6292,
    "end_token": 6423,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14258,
      13114,
      15180,
      329,
      262,
      1459,
      3128
    ],
    "label": "best_practice",
    "reason": "Drop unnecessary columns for the current date"
  },
  {
    "line": 1070,
    "text": "                            \u7f8e\u80a1\u77e5\u540d\u516c\u53f8         MG B\u80a1\u8f6cH\u80a1         HB \u80a1\u4efd\u8f6c\u8ba9         SB \u80a1\u6307\u671f\u8d27         CZ \u9999\u6e2f\u521b\u4e1a\u677f         KG \u9999\u6e2f\u4fe1\u6258\u57fa\u91d1         KT",
    "annotation": "\u2705 Best Practice: Drop unnecessary columns for historical data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13328,
      122,
      236,
      164,
      224,
      94,
      163,
      253,
      98,
      28938,
      235,
      17739,
      105,
      20998,
      116,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      34809,
      347,
      164,
      224,
      94,
      164,
      121,
      105,
      39,
      164,
      224,
      94,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      25997,
      5525,
      224,
      94,
      20015,
      121,
      164,
      121,
      105,
      164,
      106,
      102,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      18056,
      5525,
      224,
      94,
      162,
      234,
      229,
      17312,
      253,
      164,
      112,
      100,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      327,
      57,
      16268,
      99,
      247,
      162,
      116,
      107,
      26344,
      249,
      10310,
      248,
      30266,
      123,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      509,
      38,
      16268,
      99,
      247,
      162,
      116,
      107,
      46479,
      94,
      33699,
      246,
      161,
      253,
      118,
      34932,
      239,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      42293
    ],
    "start_token": 6423,
    "end_token": 6581,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14258,
      13114,
      15180,
      329,
      6754,
      1366
    ],
    "label": "best_practice",
    "reason": "Drop unnecessary columns for historical data"
  },
  {
    "line": 1072,
    "text": "                              \u4e2d\u8bc1\u6307\u6570         ZZ \u6e2f\u80a1\u901a         GH",
    "annotation": "\u2705 Best Practice: Use loc for conditional updates",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40792,
      46237,
      223,
      162,
      234,
      229,
      46763,
      108,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1168,
      57,
      10545,
      116,
      107,
      164,
      224,
      94,
      34460,
      248,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      24739
    ],
    "start_token": 6581,
    "end_token": 6646,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1179,
      329,
      26340,
      5992
    ],
    "label": "best_practice",
    "reason": "Use loc for conditional updates"
  },
  {
    "line": 1075,
    "text": "    Return",
    "annotation": "\u2705 Best Practice: Sort data by date for consistency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      8229
    ],
    "start_token": 6646,
    "end_token": 6650,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      33947,
      1366,
      416,
      3128,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Sort data by date for consistency"
  },
  {
    "line": 1076,
    "text": "    ----------",
    "annotation": "\u2705 Best Practice: Rename columns for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 6650,
    "end_token": 6655,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      480,
      15180,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Rename columns for clarity"
  },
  {
    "line": 1085,
    "text": "",
    "annotation": "\u2705 Best Practice: Drop unnecessary columns for the current date",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 6655,
    "end_token": 6655,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14258,
      13114,
      15180,
      329,
      262,
      1459,
      3128
    ],
    "label": "best_practice",
    "reason": "Drop unnecessary columns for the current date"
  },
  {
    "line": 1085,
    "text": "",
    "annotation": "\u2705 Best Practice: Drop unnecessary columns for historical data",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 6655,
    "end_token": 6655,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14258,
      13114,
      15180,
      329,
      6754,
      1366
    ],
    "label": "best_practice",
    "reason": "Drop unnecessary columns for historical data"
  },
  {
    "line": 1087,
    "text": "    code = code.strip().upper()",
    "annotation": "\u2705 Best Practice: Rename columns for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2438,
      796,
      2438,
      13,
      36311,
      22446,
      45828,
      3419
    ],
    "start_token": 6655,
    "end_token": 6666,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      7152,
      480,
      15180,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Rename columns for clarity"
  },
  {
    "line": 1090,
    "text": "    for _ in range(retry_count):",
    "annotation": "\u2705 Best Practice: Drop unnecessary columns for other market codes",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      4808,
      287,
      2837,
      7,
      1186,
      563,
      62,
      9127,
      2599
    ],
    "start_token": 6666,
    "end_token": 6679,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14258,
      13114,
      15180,
      329,
      584,
      1910,
      12416
    ],
    "label": "best_practice",
    "reason": "Drop unnecessary columns for other market codes"
  },
  {
    "line": 1093,
    "text": "                print(ct.MSG_NOT_CONNECTED)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing exception messages can expose sensitive information",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      310,
      13,
      5653,
      38,
      62,
      11929,
      62,
      10943,
      48842,
      1961,
      8
    ],
    "start_token": 6679,
    "end_token": 6707,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      6631,
      6218,
      460,
      15651,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing exception messages can expose sensitive information"
  },
  {
    "line": 1076,
    "text": "    ----------",
    "annotation": "\u2705 Best Practice: Add a docstring to describe the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      24200,
      438
    ],
    "start_token": 6707,
    "end_token": 6712,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      3060,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Add a docstring to describe the function's purpose and parameters"
  },
  {
    "line": 1089,
    "text": "    today = int(str(du.today()).replace('-', ''))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing error messages can expose sensitive information",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1909,
      796,
      493,
      7,
      2536,
      7,
      646,
      13,
      40838,
      3419,
      737,
      33491,
      10786,
      12,
      3256,
      10148,
      4008
    ],
    "start_token": 6712,
    "end_token": 6732,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      4049,
      6218,
      460,
      15651,
      8564,
      1321
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing error messages can expose sensitive information"
  },
  {
    "line": 1094,
    "text": "                return None",
    "annotation": "\u2705 Best Practice: Use isinstance for type checking",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 6732,
    "end_token": 6749,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      329,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use isinstance for type checking"
  },
  {
    "line": 1104,
    "text": "                df =  api.to_df(ds)",
    "annotation": "\u2705 Best Practice: Use pd.concat instead of DataFrame.append for better performance",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      220,
      40391,
      13,
      1462,
      62,
      7568,
      7,
      9310,
      8
    ],
    "start_token": 6749,
    "end_token": 6775,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      279,
      67,
      13,
      1102,
      9246,
      2427,
      286,
      6060,
      19778,
      13,
      33295,
      329,
      1365,
      2854
    ],
    "label": "best_practice",
    "reason": "Use pd.concat instead of DataFrame.append for better performance"
  },
  {
    "line": 1126,
    "text": "                    if date == today:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching broad exceptions can hide bugs and make debugging difficult",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      3128,
      6624,
      1909,
      25
    ],
    "start_token": 6775,
    "end_token": 6799,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      3154,
      13269,
      460,
      7808,
      11316,
      290,
      787,
      28769,
      2408
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching broad exceptions can hide bugs and make debugging difficult"
  },
  {
    "line": 1130,
    "text": "                        data = data.drop(['hour', 'minute', 'nature', 'direction'], axis=1)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising generic IOError without specific context can be misleading",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      13,
      14781,
      7,
      17816,
      9769,
      3256,
      705,
      11374,
      3256,
      705,
      21353,
      3256,
      705,
      37295,
      6,
      4357,
      16488,
      28,
      16,
      8
    ],
    "start_token": 6799,
    "end_token": 6845,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      14276,
      24418,
      12331,
      1231,
      2176,
      4732,
      460,
      307,
      15850
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising generic IOError without specific context can be misleading"
  },
  {
    "line": 1130,
    "text": "                        data = data.drop(['hour', 'minute', 'nature', 'direction'], axis=1)",
    "annotation": "\u2705 Best Practice: Initialize variables before using them in a loop",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      13,
      14781,
      7,
      17816,
      9769,
      3256,
      705,
      11374,
      3256,
      705,
      21353,
      3256,
      705,
      37295,
      6,
      4357,
      16488,
      28,
      16,
      8
    ],
    "start_token": 6845,
    "end_token": 6891,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      878,
      1262,
      606,
      287,
      257,
      9052
    ],
    "label": "best_practice",
    "reason": "Initialize variables before using them in a loop"
  },
  {
    "line": 1133,
    "text": "                    data = data.drop(['hour', 'minute', 'nature_name', 'zengcang', 'direction', 'nature'], axis=1)",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over a range with a fixed step size",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      13,
      14781,
      7,
      17816,
      9769,
      3256,
      705,
      11374,
      3256,
      705,
      21353,
      62,
      3672,
      3256,
      705,
      89,
      1516,
      66,
      648,
      3256,
      705,
      37295,
      3256,
      705,
      21353,
      6,
      4357,
      16488,
      28,
      16,
      8
    ],
    "start_token": 6891,
    "end_token": 6944,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      257,
      2837,
      351,
      257,
      5969,
      2239,
      2546
    ],
    "label": "ml_signal",
    "reason": "Iterating over a range with a fixed step size"
  },
  {
    "line": 1135,
    "text": "        except Exception as e:",
    "annotation": "\u2705 Best Practice: Use list concatenation for readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2845,
      35528,
      355,
      304,
      25
    ],
    "start_token": 6944,
    "end_token": 6956,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      1351,
      1673,
      36686,
      341,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use list concatenation for readability"
  },
  {
    "line": 1137,
    "text": "        else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes that the API returns a list with a predictable length",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 6956,
    "end_token": 6965,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      326,
      262,
      7824,
      5860,
      257,
      1351,
      351,
      257,
      20039,
      4129
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes that the API returns a list with a predictable length"
  },
  {
    "line": 1139,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Converting data to a DataFrame before returning",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 6965,
    "end_token": 6965,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      1366,
      284,
      257,
      6060,
      19778,
      878,
      8024
    ],
    "label": "ml_signal",
    "reason": "Converting data to a DataFrame before returning"
  },
  {
    "line": 1138,
    "text": "            return data",
    "annotation": "\u2705 Best Practice: Import statements should be at the top of the file for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1366
    ],
    "start_token": 6965,
    "end_token": 6978,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      6299,
      815,
      307,
      379,
      262,
      1353,
      286,
      262,
      2393,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Import statements should be at the top of the file for better readability and maintainability."
  },
  {
    "line": 1142,
    "text": "def quotes(symbols, conn=None, asset='E', market=[], retry_count = 3):",
    "annotation": "\u2705 Best Practice: Use of default parameter values to provide flexibility in function usage.",
    "confidence": 0.5,
    "tokens": [
      4299,
      13386,
      7,
      1837,
      2022,
      10220,
      11,
      48260,
      28,
      14202,
      11,
      11171,
      11639,
      36,
      3256,
      1910,
      41888,
      4357,
      1005,
      563,
      62,
      9127,
      796,
      513,
      2599
    ],
    "start_token": 6978,
    "end_token": 7003,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      284,
      2148,
      13688,
      287,
      2163,
      8748,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default parameter values to provide flexibility in function usage."
  },
  {
    "line": 1142,
    "text": "def quotes(symbols, conn=None, asset='E', market=[], retry_count = 3):",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameter values can indicate optional dependencies or configurations.",
    "confidence": 0.5,
    "tokens": [
      4299,
      13386,
      7,
      1837,
      2022,
      10220,
      11,
      48260,
      28,
      14202,
      11,
      11171,
      11639,
      36,
      3256,
      1910,
      41888,
      4357,
      1005,
      563,
      62,
      9127,
      796,
      513,
      2599
    ],
    "start_token": 7003,
    "end_token": 7028,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      11507,
      3815,
      460,
      7603,
      11902,
      20086,
      393,
      25412,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of default parameter values can indicate optional dependencies or configurations."
  },
  {
    "line": 1147,
    "text": "        symbols : string, array-like object (list, tuple, Series).",
    "annotation": "\ud83e\udde0 ML Signal: Iterative data fetching pattern, common in data processing tasks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14354,
      1058,
      4731,
      11,
      7177,
      12,
      2339,
      2134,
      357,
      4868,
      11,
      46545,
      11,
      7171,
      737
    ],
    "start_token": 7028,
    "end_token": 7050,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      876,
      1366,
      21207,
      278,
      3912,
      11,
      2219,
      287,
      1366,
      7587,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterative data fetching pattern, common in data processing tasks."
  },
  {
    "line": 1150,
    "text": "    -------",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for infinite loop if `get_instrument_info` consistently returns 300 items.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      35656
    ],
    "start_token": 7050,
    "end_token": 7054,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      15541,
      9052,
      611,
      4600,
      1136,
      62,
      259,
      43872,
      62,
      10951,
      63,
      9835,
      5860,
      5867,
      3709,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for infinite loop if `get_instrument_info` consistently returns 300 items."
  },
  {
    "line": 1154,
    "text": "        try:",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of data to a DataFrame, indicating data processing or analysis task.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 7054,
    "end_token": 7063,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      1366,
      284,
      257,
      6060,
      19778,
      11,
      12739,
      1366,
      7587,
      393,
      3781,
      4876,
      13
    ],
    "label": "ml_signal",
    "reason": "Conversion of data to a DataFrame, indicating data processing or analysis task."
  },
  {
    "line": 1157,
    "text": "                return None",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of pickle for data serialization can lead to security risks if loading untrusted data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 7063,
    "end_token": 7080,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      2298,
      293,
      329,
      1366,
      11389,
      1634,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      11046,
      1418,
      81,
      8459,
      1366,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of pickle for data serialization can lead to security risks if loading untrusted data."
  },
  {
    "line": 1160,
    "text": "            if isinstance(symbols, list) or isinstance(symbols, set) or isinstance(symbols, tuple) or isinstance(symbols, pd.Series):",
    "annotation": "\ud83e\udde0 ML Signal: Returning processed data, common in data transformation functions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      1837,
      2022,
      10220,
      11,
      1351,
      8,
      393,
      318,
      39098,
      7,
      1837,
      2022,
      10220,
      11,
      900,
      8,
      393,
      318,
      39098,
      7,
      1837,
      2022,
      10220,
      11,
      46545,
      8,
      393,
      318,
      39098,
      7,
      1837,
      2022,
      10220,
      11,
      279,
      67,
      13,
      27996,
      2599
    ],
    "start_token": 7080,
    "end_token": 7134,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      13686,
      1366,
      11,
      2219,
      287,
      1366,
      13389,
      5499,
      13
    ],
    "label": "ml_signal",
    "reason": "Returning processed data, common in data transformation functions."
  },
  {
    "line": 1153,
    "text": "    for _ in range(retry_count):",
    "annotation": "\u2705 Best Practice: Import statements should be at the top of the file.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      4808,
      287,
      2837,
      7,
      1186,
      563,
      62,
      9127,
      2599
    ],
    "start_token": 7134,
    "end_token": 7147,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      6299,
      815,
      307,
      379,
      262,
      1353,
      286,
      262,
      2393,
      13
    ],
    "label": "best_practice",
    "reason": "Import statements should be at the top of the file."
  },
  {
    "line": 1157,
    "text": "                return None",
    "annotation": "\ud83e\udde0 ML Signal: Function with default parameter value indicating optional argument usage.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 7147,
    "end_token": 7164,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      351,
      4277,
      11507,
      1988,
      12739,
      11902,
      4578,
      8748,
      13
    ],
    "label": "ml_signal",
    "reason": "Function with default parameter value indicating optional argument usage."
  },
  {
    "line": 1157,
    "text": "                return None",
    "annotation": "\u2705 Best Practice: Use of default parameter value to handle optional argument.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      6045
    ],
    "start_token": 7164,
    "end_token": 7181,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      1988,
      284,
      5412,
      11902,
      4578,
      13
    ],
    "label": "best_practice",
    "reason": "Use of default parameter value to handle optional argument."
  },
  {
    "line": 1160,
    "text": "            if isinstance(symbols, list) or isinstance(symbols, set) or isinstance(symbols, tuple) or isinstance(symbols, pd.Series):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential use of an undefined variable 'ct' if not imported.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      1837,
      2022,
      10220,
      11,
      1351,
      8,
      393,
      318,
      39098,
      7,
      1837,
      2022,
      10220,
      11,
      900,
      8,
      393,
      318,
      39098,
      7,
      1837,
      2022,
      10220,
      11,
      46545,
      8,
      393,
      318,
      39098,
      7,
      1837,
      2022,
      10220,
      11,
      279,
      67,
      13,
      27996,
      2599
    ],
    "start_token": 7181,
    "end_token": 7235,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      779,
      286,
      281,
      28721,
      7885,
      705,
      310,
      6,
      611,
      407,
      17392,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential use of an undefined variable 'ct' if not imported."
  },
  {
    "line": 1165,
    "text": "                    elif asset == 'INDEX':",
    "annotation": "\ud83e\udde0 ML Signal: Use of a loop to process data in chunks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      11171,
      6624,
      705,
      12115,
      6369,
      10354
    ],
    "start_token": 7235,
    "end_token": 7262,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      257,
      9052,
      284,
      1429,
      1366,
      287,
      22716,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of a loop to process data in chunks."
  },
  {
    "line": 1171,
    "text": "                mkcode = _get_mkcode(symbols, asset=asset, xapi=xapi)",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of data to a DataFrame, indicating data processing pattern.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      33480,
      8189,
      796,
      4808,
      1136,
      62,
      28015,
      8189,
      7,
      1837,
      2022,
      10220,
      11,
      11171,
      28,
      562,
      316,
      11,
      2124,
      15042,
      28,
      87,
      15042,
      8
    ],
    "start_token": 7262,
    "end_token": 7301,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      1366,
      284,
      257,
      6060,
      19778,
      11,
      12739,
      1366,
      7587,
      3912,
      13
    ],
    "label": "ml_signal",
    "reason": "Conversion of data to a DataFrame, indicating data processing pattern."
  },
  {
    "line": 1174,
    "text": "                elif asset == 'INDEX':",
    "annotation": "\u2705 Best Practice: Check if xapi is None to avoid calling methods on a NoneType",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1288,
      361,
      11171,
      6624,
      705,
      12115,
      6369,
      10354
    ],
    "start_token": 7301,
    "end_token": 7324,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      611,
      2124,
      15042,
      318,
      6045,
      284,
      3368,
      4585,
      5050,
      319,
      257,
      6045,
      6030
    ],
    "label": "best_practice",
    "reason": "Check if xapi is None to avoid calling methods on a NoneType"
  },
  {
    "line": 1176,
    "text": "                else:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing error messages can expose internal state",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 7324,
    "end_token": 7341,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      4049,
      6218,
      460,
      15651,
      5387,
      1181
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing error messages can expose internal state"
  },
  {
    "line": 1179,
    "text": "                data = data.drop(['market', 'active1', 'active2', 'reversed_bytes0', 'reversed_bytes1', 'reversed_bytes2',",
    "annotation": "\ud83e\udde0 ML Signal: Usage of xapi.get_markets() indicates interaction with an API",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      13,
      14781,
      7,
      17816,
      10728,
      3256,
      705,
      5275,
      16,
      3256,
      705,
      5275,
      17,
      3256,
      705,
      260,
      690,
      276,
      62,
      33661,
      15,
      3256,
      705,
      260,
      690,
      276,
      62,
      33661,
      16,
      3256,
      705,
      260,
      690,
      276,
      62,
      33661,
      17,
      3256
    ],
    "start_token": 7341,
    "end_token": 7397,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      2124,
      15042,
      13,
      1136,
      62,
      34162,
      3419,
      9217,
      10375,
      351,
      281,
      7824
    ],
    "label": "ml_signal",
    "reason": "Usage of xapi.get_markets() indicates interaction with an API"
  },
  {
    "line": 1181,
    "text": "                                  'reversed_bytes4',",
    "annotation": "\ud83e\udde0 ML Signal: Conversion to DataFrame suggests data processing or analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      260,
      690,
      276,
      62,
      33661,
      19,
      3256
    ],
    "start_token": 7397,
    "end_token": 7438,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      284,
      6060,
      19778,
      5644,
      1366,
      7587,
      393,
      3781
    ],
    "label": "ml_signal",
    "reason": "Conversion to DataFrame suggests data processing or analysis"
  },
  {
    "line": 1180,
    "text": "                                  'reversed_bytes3',",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a single parameter, indicating a common pattern for data processing functions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      260,
      690,
      276,
      62,
      33661,
      18,
      3256
    ],
    "start_token": 7438,
    "end_token": 7479,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      2060,
      11507,
      11,
      12739,
      257,
      2219,
      3912,
      329,
      1366,
      7587,
      5499
    ],
    "label": "ml_signal",
    "reason": "Function definition with a single parameter, indicating a common pattern for data processing functions"
  },
  {
    "line": 1181,
    "text": "                                  'reversed_bytes4',",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): External URL usage in pd.read_csv can lead to data exposure or injection if not properly validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      260,
      690,
      276,
      62,
      33661,
      19,
      3256
    ],
    "start_token": 7479,
    "end_token": 7520,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      34579,
      10289,
      8748,
      287,
      279,
      67,
      13,
      961,
      62,
      40664,
      460,
      1085,
      284,
      1366,
      7111,
      393,
      16954,
      611,
      407,
      6105,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "External URL usage in pd.read_csv can lead to data exposure or injection if not properly validated"
  },
  {
    "line": 1185,
    "text": "                                  'reversed_bytes8',",
    "annotation": "\ud83e\udde0 ML Signal: Setting a DataFrame index, a common operation in data manipulation tasks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      260,
      690,
      276,
      62,
      33661,
      23,
      3256
    ],
    "start_token": 7520,
    "end_token": 7561,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      25700,
      257,
      6060,
      19778,
      6376,
      11,
      257,
      2219,
      4905,
      287,
      1366,
      17512,
      8861
    ],
    "label": "ml_signal",
    "reason": "Setting a DataFrame index, a common operation in data manipulation tasks"
  },
  {
    "line": 1186,
    "text": "                                  'reversed_bytes9'], axis=1)",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataFrame, indicating the function's purpose is data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      260,
      690,
      276,
      62,
      33661,
      24,
      6,
      4357,
      16488,
      28,
      16,
      8
    ],
    "start_token": 7561,
    "end_token": 7607,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      19778,
      11,
      12739,
      262,
      2163,
      338,
      4007,
      318,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Returning a DataFrame, indicating the function's purpose is data transformation"
  },
  {
    "line": 1185,
    "text": "                                  'reversed_bytes8',",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a parameter, indicating a reusable component",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      260,
      690,
      276,
      62,
      33661,
      23,
      3256
    ],
    "start_token": 7607,
    "end_token": 7648,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      11507,
      11,
      12739,
      257,
      42339,
      7515
    ],
    "label": "ml_signal",
    "reason": "Function definition with a parameter, indicating a reusable component"
  },
  {
    "line": 1186,
    "text": "                                  'reversed_bytes9'], axis=1)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): External URL usage can lead to security risks if not validated",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      705,
      260,
      690,
      276,
      62,
      33661,
      24,
      6,
      4357,
      16488,
      28,
      16,
      8
    ],
    "start_token": 7648,
    "end_token": 7694,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      34579,
      10289,
      8748,
      460,
      1085,
      284,
      2324,
      7476,
      611,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "External URL usage can lead to security risks if not validated"
  },
  {
    "line": 1188,
    "text": "                data = data.drop(['market'], axis=1)",
    "annotation": "\ud83e\udde0 ML Signal: Reading data from a CSV file, indicating data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      796,
      1366,
      13,
      14781,
      7,
      17816,
      10728,
      6,
      4357,
      16488,
      28,
      16,
      8
    ],
    "start_token": 7694,
    "end_token": 7723,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11725,
      1366,
      422,
      257,
      44189,
      2393,
      11,
      12739,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Reading data from a CSV file, indicating data processing"
  },
  {
    "line": 1191,
    "text": "        else:",
    "annotation": "\u2705 Best Practice: Setting 'datetime' as index for better time series handling",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 7723,
    "end_token": 7732,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      25700,
      705,
      19608,
      8079,
      6,
      355,
      6376,
      329,
      1365,
      640,
      2168,
      9041
    ],
    "label": "best_practice",
    "reason": "Setting 'datetime' as index for better time series handling"
  },
  {
    "line": 1193,
    "text": "    raise IOError(ct.NETWORK_URL_ERROR_MSG)",
    "annotation": "\ud83e\udde0 ML Signal: Returning a DataFrame, indicating data transformation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      5298,
      24418,
      12331,
      7,
      310,
      13,
      12884,
      33249,
      62,
      21886,
      62,
      24908,
      62,
      5653,
      38,
      8
    ],
    "start_token": 7732,
    "end_token": 7751,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      42882,
      257,
      6060,
      19778,
      11,
      12739,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Returning a DataFrame, indicating data transformation"
  },
  {
    "line": 1190,
    "text": "            print(e)",
    "annotation": "\u2705 Best Practice: Use of a leading underscore in the function name indicates it's intended for internal use.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      68,
      8
    ],
    "start_token": 7751,
    "end_token": 7766,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      257,
      3756,
      44810,
      287,
      262,
      2163,
      1438,
      9217,
      340,
      338,
      5292,
      329,
      5387,
      779,
      13
    ],
    "label": "best_practice",
    "reason": "Use of a leading underscore in the function name indicates it's intended for internal use."
  },
  {
    "line": 1192,
    "text": "            return data",
    "annotation": "\u2705 Best Practice: Importing only the required function from a module.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      1366
    ],
    "start_token": 7766,
    "end_token": 7779,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      691,
      262,
      2672,
      2163,
      422,
      257,
      8265,
      13
    ],
    "label": "best_practice",
    "reason": "Importing only the required function from a module."
  },
  {
    "line": 1194,
    "text": "",
    "annotation": "\u2705 Best Practice: Use of exponentiation for calculating powers of 10.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7779,
    "end_token": 7779,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      28622,
      3920,
      329,
      26019,
      5635,
      286,
      838,
      13
    ],
    "label": "best_practice",
    "reason": "Use of exponentiation for calculating powers of 10."
  },
  {
    "line": 1194,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of random number generation.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7779,
    "end_token": 7779,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4738,
      1271,
      5270,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of random number generation."
  },
  {
    "line": 1194,
    "text": "",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Predictable random number generation with randint.",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 7779,
    "end_token": 7779,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      49461,
      540,
      4738,
      1271,
      5270,
      351,
      43720,
      600,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Predictable random number generation with randint."
  }
]
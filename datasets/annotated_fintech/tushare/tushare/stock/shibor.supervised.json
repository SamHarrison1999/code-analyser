[
  {
    "line": 13,
    "text": "from tushare.util.netbase import Client",
    "annotation": "\u2705 Best Practice: Importing specific modules or classes can improve code readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      6738,
      256,
      1530,
      533,
      13,
      22602,
      13,
      3262,
      8692,
      1330,
      20985
    ],
    "start_token": 0,
    "end_token": 11,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      278,
      2176,
      13103,
      393,
      6097,
      460,
      2987,
      2438,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Importing specific modules or classes can improve code readability and maintainability."
  },
  {
    "line": 32,
    "text": "    9M:9\u4e2a\u6708\u62c6\u653e\u5229\u7387",
    "annotation": "\u2705 Best Practice: Use of default parameter value to handle optional argument",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      860,
      44,
      25,
      24,
      10310,
      103,
      17312,
      230,
      162,
      233,
      228,
      162,
      242,
      122,
      26344,
      102,
      163,
      236,
      229
    ],
    "start_token": 11,
    "end_token": 33,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      4277,
      11507,
      1988,
      284,
      5412,
      11902,
      4578
    ],
    "label": "best_practice",
    "reason": "Use of default parameter value to handle optional argument"
  },
  {
    "line": 35,
    "text": "    year = du.get_year() if year is None else year",
    "annotation": "\u2705 Best Practice: Encoding string for compatibility with different Python versions",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      614,
      796,
      7043,
      13,
      1136,
      62,
      1941,
      3419,
      611,
      614,
      318,
      6045,
      2073,
      614
    ],
    "start_token": 33,
    "end_token": 50,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14711,
      7656,
      4731,
      329,
      17764,
      351,
      1180,
      11361,
      6300
    ],
    "label": "best_practice",
    "reason": "Encoding string for compatibility with different Python versions"
  },
  {
    "line": 36,
    "text": "    lab = ct.SHIBOR_TYPE['Shibor']",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential risk of URL manipulation if input is not validated",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2248,
      796,
      269,
      83,
      13,
      9693,
      9865,
      1581,
      62,
      25216,
      17816,
      2484,
      571,
      273,
      20520
    ],
    "start_token": 50,
    "end_token": 68,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2526,
      286,
      10289,
      17512,
      611,
      5128,
      318,
      407,
      31031
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential risk of URL manipulation if input is not validated"
  },
  {
    "line": 43,
    "text": "        content = clt.gvalue()",
    "annotation": "\ud83e\udde0 ML Signal: Use of external data source (URL) for data retrieval",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2695,
      796,
      537,
      83,
      13,
      70,
      8367,
      3419
    ],
    "start_token": 68,
    "end_token": 83,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      7097,
      1366,
      2723,
      357,
      21886,
      8,
      329,
      1366,
      45069
    ],
    "label": "ml_signal",
    "reason": "Use of external data source (URL) for data retrieval"
  },
  {
    "line": 45,
    "text": "        df.columns = ct.SHIBOR_COLS",
    "annotation": "\ud83e\udde0 ML Signal: Use of pandas for data manipulation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      269,
      83,
      13,
      9693,
      9865,
      1581,
      62,
      25154,
      50
    ],
    "start_token": 83,
    "end_token": 104,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19798,
      292,
      329,
      1366,
      17512
    ],
    "label": "ml_signal",
    "reason": "Use of pandas for data manipulation"
  },
  {
    "line": 48,
    "text": "            df['date'] = df['date'].astype(np.datetime64)",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda function for data transformation",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      17816,
      4475,
      20520,
      796,
      47764,
      17816,
      4475,
      6,
      4083,
      459,
      2981,
      7,
      37659,
      13,
      19608,
      8079,
      2414,
      8
    ],
    "start_token": 104,
    "end_token": 134,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      2163,
      329,
      1366,
      13389
    ],
    "label": "ml_signal",
    "reason": "Use of lambda function for data transformation"
  },
  {
    "line": 50,
    "text": "            df['date'] = df['date'].astype('datetime64[D]')",
    "annotation": "\u2705 Best Practice: Conditional logic based on library version for compatibility",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      17816,
      4475,
      20520,
      796,
      47764,
      17816,
      4475,
      6,
      4083,
      459,
      2981,
      10786,
      19608,
      8079,
      2414,
      58,
      35,
      60,
      11537
    ],
    "start_token": 134,
    "end_token": 165,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      9724,
      1859,
      9156,
      1912,
      319,
      5888,
      2196,
      329,
      17764
    ],
    "label": "best_practice",
    "reason": "Conditional logic based on library version for compatibility"
  },
  {
    "line": 52,
    "text": "    except:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Broad exception handling can mask specific errors",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      2845,
      25
    ],
    "start_token": 165,
    "end_token": 170,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      9765,
      6631,
      9041,
      460,
      9335,
      2176,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Broad exception handling can mask specific errors"
  },
  {
    "line": 51,
    "text": "        return df",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441,
      47764
    ],
    "start_token": 170,
    "end_token": 179,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters and return type for better readability and maintainability."
  },
  {
    "line": 80,
    "text": "    9M_A:\u5356\u51fa",
    "annotation": "\ud83e\udde0 ML Signal: Use of default parameter value to handle optional input.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      860,
      44,
      62,
      32,
      25,
      39355,
      244,
      49035,
      118
    ],
    "start_token": 179,
    "end_token": 191,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      4277,
      11507,
      1988,
      284,
      5412,
      11902,
      5128,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of default parameter value to handle optional input."
  },
  {
    "line": 83,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential compatibility issue with string encoding in different Python versions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 191,
    "end_token": 195,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      17764,
      2071,
      351,
      4731,
      21004,
      287,
      1180,
      11361,
      6300,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential compatibility issue with string encoding in different Python versions."
  },
  {
    "line": 87,
    "text": "    try:",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential security risk if `ct.SHIBOR_DATA_URL` or its components are user-controlled.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1949,
      25
    ],
    "start_token": 195,
    "end_token": 200,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2324,
      2526,
      611,
      4600,
      310,
      13,
      9693,
      9865,
      1581,
      62,
      26947,
      62,
      21886,
      63,
      393,
      663,
      6805,
      389,
      2836,
      12,
      14401,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential security risk if `ct.SHIBOR_DATA_URL` or its components are user-controlled."
  },
  {
    "line": 91,
    "text": "                                               year))",
    "annotation": "\ud83e\udde0 ML Signal: Use of external data source (HTTP client) to fetch data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      614,
      4008
    ],
    "start_token": 200,
    "end_token": 248,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      7097,
      1366,
      2723,
      357,
      40717,
      5456,
      8,
      284,
      21207,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of external data source (HTTP client) to fetch data."
  },
  {
    "line": 92,
    "text": "        content = clt.gvalue()",
    "annotation": "\ud83e\udde0 ML Signal: Use of pandas to process and manipulate data.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2695,
      796,
      537,
      83,
      13,
      70,
      8367,
      3419
    ],
    "start_token": 248,
    "end_token": 263,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      19798,
      292,
      284,
      1429,
      290,
      18510,
      1366,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of pandas to process and manipulate data."
  },
  {
    "line": 95,
    "text": "        df.columns = ct.SHIBOR_Q_COLS",
    "annotation": "\ud83e\udde0 ML Signal: Use of lambda function for data transformation.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      13,
      28665,
      82,
      796,
      269,
      83,
      13,
      9693,
      9865,
      1581,
      62,
      48,
      62,
      25154,
      50
    ],
    "start_token": 263,
    "end_token": 286,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      37456,
      2163,
      329,
      1366,
      13389,
      13
    ],
    "label": "ml_signal",
    "reason": "Use of lambda function for data transformation."
  },
  {
    "line": 98,
    "text": "            df['date'] = df['date'].astype(np.datetime64)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Version-dependent behavior, could lead to unexpected results if not tested across versions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      17816,
      4475,
      20520,
      796,
      47764,
      17816,
      4475,
      6,
      4083,
      459,
      2981,
      7,
      37659,
      13,
      19608,
      8079,
      2414,
      8
    ],
    "start_token": 286,
    "end_token": 316,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      10628,
      12,
      21186,
      4069,
      11,
      714,
      1085,
      284,
      10059,
      2482,
      611,
      407,
      6789,
      1973,
      6300,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Version-dependent behavior, could lead to unexpected results if not tested across versions."
  },
  {
    "line": 109,
    "text": "    ------",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Catching all exceptions can hide errors and make debugging difficult.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      40103
    ],
    "start_token": 316,
    "end_token": 320,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      327,
      19775,
      477,
      13269,
      460,
      7808,
      8563,
      290,
      787,
      28769,
      2408,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Catching all exceptions can hide errors and make debugging difficult."
  },
  {
    "line": 98,
    "text": "            df['date'] = df['date'].astype(np.datetime64)",
    "annotation": "\u2705 Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      17816,
      4475,
      20520,
      796,
      47764,
      17816,
      4475,
      6,
      4083,
      459,
      2981,
      7,
      37659,
      13,
      19608,
      8079,
      2414,
      8
    ],
    "start_token": 320,
    "end_token": 350,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      2099,
      20269,
      329,
      262,
      2163,
      10007,
      290,
      1441,
      2099,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding type hints for the function parameters and return type for better readability and maintainability."
  },
  {
    "line": 110,
    "text": "      year:\u5e74\u4efd(int)",
    "annotation": "\u2705 Best Practice: Use a more descriptive variable name instead of 'du' for better readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      614,
      25,
      33176,
      112,
      20015,
      121,
      7,
      600,
      8
    ],
    "start_token": 350,
    "end_token": 364,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      517,
      35644,
      7885,
      1438,
      2427,
      286,
      705,
      646,
      6,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use a more descriptive variable name instead of 'du' for better readability."
  },
  {
    "line": 112,
    "text": "    Return",
    "annotation": "\u2705 Best Practice: Use a more descriptive variable name instead of 'lab' for better readability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      8229
    ],
    "start_token": 364,
    "end_token": 368,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      517,
      35644,
      7885,
      1438,
      2427,
      286,
      705,
      23912,
      6,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use a more descriptive variable name instead of 'lab' for better readability."
  },
  {
    "line": 113,
    "text": "    ------",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Encoding might cause issues if not handled properly across different Python versions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      40103
    ],
    "start_token": 368,
    "end_token": 372,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      14711,
      7656,
      1244,
      2728,
      2428,
      611,
      407,
      12118,
      6105,
      1973,
      1180,
      11361,
      6300,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Encoding might cause issues if not handled properly across different Python versions."
  },
  {
    "line": 117,
    "text": "    year = du.get_year() if year is None else year",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Ensure that the URL is properly sanitized to prevent injection attacks.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      614,
      796,
      7043,
      13,
      1136,
      62,
      1941,
      3419,
      611,
      614,
      318,
      6045,
      2073,
      614
    ],
    "start_token": 372,
    "end_token": 389,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      48987,
      326,
      262,
      10289,
      318,
      6105,
      5336,
      36951,
      284,
      2948,
      16954,
      3434,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Ensure that the URL is properly sanitized to prevent injection attacks."
  },
  {
    "line": 122,
    "text": "                                               ct.PAGES['dw'], 'Shibor_Tendency',",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external data sources can be a signal for data-driven applications.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      4537,
      48075,
      17816,
      67,
      86,
      6,
      4357,
      705,
      2484,
      571,
      273,
      62,
      51,
      437,
      1387,
      3256
    ],
    "start_token": 389,
    "end_token": 454,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      1366,
      4237,
      460,
      307,
      257,
      6737,
      329,
      1366,
      12,
      15808,
      5479,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of external data sources can be a signal for data-driven applications."
  },
  {
    "line": 124,
    "text": "                                               year))",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the content is from a trusted source to prevent malicious data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      614,
      4008
    ],
    "start_token": 454,
    "end_token": 502,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      2695,
      318,
      422,
      257,
      13467,
      2723,
      284,
      2948,
      17412,
      1366,
      7587,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the content is from a trusted source to prevent malicious data processing."
  },
  {
    "line": 125,
    "text": "        content = clt.gvalue()",
    "annotation": "\u2705 Best Practice: Ensure that the column names in ct.SHIBOR_MA_COLS match the expected data format.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2695,
      796,
      537,
      83,
      13,
      70,
      8367,
      3419
    ],
    "start_token": 502,
    "end_token": 517,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      326,
      262,
      5721,
      3891,
      287,
      269,
      83,
      13,
      9693,
      9865,
      1581,
      62,
      5673,
      62,
      25154,
      50,
      2872,
      262,
      2938,
      1366,
      5794,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure that the column names in ct.SHIBOR_MA_COLS match the expected data format."
  },
  {
    "line": 128,
    "text": "        df['date'] = df['date'].map(lambda x: x.date())",
    "annotation": "\ud83e\udde0 ML Signal: Mapping functions over data frames can indicate data transformation processes.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      17816,
      4475,
      20520,
      796,
      47764,
      17816,
      4475,
      6,
      4083,
      8899,
      7,
      50033,
      2124,
      25,
      2124,
      13,
      4475,
      28955
    ],
    "start_token": 517,
    "end_token": 543,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      5499,
      625,
      1366,
      13431,
      460,
      7603,
      1366,
      13389,
      7767,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping functions over data frames can indicate data transformation processes."
  },
  {
    "line": 129,
    "text": "        if pd.__version__ < '0.21':",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Version-dependent code can lead to maintenance challenges.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      279,
      67,
      13,
      834,
      9641,
      834,
      1279,
      705,
      15,
      13,
      2481,
      10354
    ],
    "start_token": 543,
    "end_token": 563,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      10628,
      12,
      21186,
      2438,
      460,
      1085,
      284,
      9262,
      6459,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Version-dependent code can lead to maintenance challenges."
  },
  {
    "line": 139,
    "text": "    \"\"\"",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching all exceptions can hide potential errors. Consider catching specific exceptions.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 563,
    "end_token": 567,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      477,
      13269,
      460,
      7808,
      2785,
      8563,
      13,
      12642,
      16508,
      2176,
      13269,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching all exceptions can hide potential errors. Consider catching specific exceptions."
  },
  {
    "line": 139,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use a default value for function parameters to improve usability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 567,
    "end_token": 571,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      4277,
      1988,
      329,
      2163,
      10007,
      284,
      2987,
      42863,
      13
    ],
    "label": "best_practice",
    "reason": "Use a default value for function parameters to improve usability."
  },
  {
    "line": 142,
    "text": "    ------",
    "annotation": "\u2705 Best Practice: Use encoding to ensure compatibility with different Python versions.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      40103
    ],
    "start_token": 571,
    "end_token": 575,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      21004,
      284,
      4155,
      17764,
      351,
      1180,
      11361,
      6300,
      13
    ],
    "label": "best_practice",
    "reason": "Use encoding to ensure compatibility with different Python versions."
  },
  {
    "line": 143,
    "text": "      year:\u5e74\u4efd(int)",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential security risk if `ct.SHIBOR_DATA_URL` is constructed from untrusted input.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      614,
      25,
      33176,
      112,
      20015,
      121,
      7,
      600,
      8
    ],
    "start_token": 575,
    "end_token": 589,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2324,
      2526,
      611,
      4600,
      310,
      13,
      9693,
      9865,
      1581,
      62,
      26947,
      62,
      21886,
      63,
      318,
      12006,
      422,
      1418,
      81,
      8459,
      5128,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential security risk if `ct.SHIBOR_DATA_URL` is constructed from untrusted input."
  },
  {
    "line": 150,
    "text": "    year = du.get_year() if year is None else year",
    "annotation": "\ud83e\udde0 ML Signal: Usage of external data fetching via a client.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      614,
      796,
      7043,
      13,
      1136,
      62,
      1941,
      3419,
      611,
      614,
      318,
      6045,
      2073,
      614
    ],
    "start_token": 589,
    "end_token": 606,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      7097,
      1366,
      21207,
      278,
      2884,
      257,
      5456,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of external data fetching via a client."
  },
  {
    "line": 152,
    "text": "    lab = lab.encode('utf-8') if ct.PY3 else lab",
    "annotation": "\ud83e\udde0 ML Signal: Reading data into a DataFrame, common in data processing tasks.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2248,
      796,
      2248,
      13,
      268,
      8189,
      10786,
      40477,
      12,
      23,
      11537,
      611,
      269,
      83,
      13,
      47,
      56,
      18,
      2073,
      2248
    ],
    "start_token": 606,
    "end_token": 629,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11725,
      1366,
      656,
      257,
      6060,
      19778,
      11,
      2219,
      287,
      1366,
      7587,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Reading data into a DataFrame, common in data processing tasks."
  },
  {
    "line": 155,
    "text": "                                               ct.PAGES['dw'], 'LPR',",
    "annotation": "\ud83e\udde0 ML Signal: Mapping and transforming date values, common in time series data processing.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      83,
      13,
      4537,
      48075,
      17816,
      67,
      86,
      6,
      4357,
      705,
      43,
      4805,
      3256
    ],
    "start_token": 629,
    "end_token": 689,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      337,
      5912,
      290,
      25449,
      3128,
      3815,
      11,
      2219,
      287,
      640,
      2168,
      1366,
      7587,
      13
    ],
    "label": "ml_signal",
    "reason": "Mapping and transforming date values, common in time series data processing."
  },
  {
    "line": 157,
    "text": "                                               year))",
    "annotation": "\u2705 Best Practice: Check for version compatibility when using library features.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      614,
      4008
    ],
    "start_token": 689,
    "end_token": 737,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      6822,
      329,
      2196,
      17764,
      618,
      1262,
      5888,
      3033,
      13
    ],
    "label": "best_practice",
    "reason": "Check for version compatibility when using library features."
  },
  {
    "line": 159,
    "text": "        df = pd.read_excel(StringIO(content), skiprows=[0])",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Catching all exceptions can hide errors and make debugging difficult.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      47764,
      796,
      279,
      67,
      13,
      961,
      62,
      1069,
      5276,
      7,
      10100,
      9399,
      7,
      11299,
      828,
      14267,
      8516,
      41888,
      15,
      12962
    ],
    "start_token": 737,
    "end_token": 764,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      327,
      19775,
      477,
      13269,
      460,
      7808,
      8563,
      290,
      787,
      28769,
      2408,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Catching all exceptions can hide errors and make debugging difficult."
  },
  {
    "line": 171,
    "text": "def lpr_ma_data(year=None):",
    "annotation": "\ud83e\udde0 ML Signal: Default parameter value usage pattern",
    "confidence": 1.0,
    "tokens": [
      4299,
      300,
      1050,
      62,
      2611,
      62,
      7890,
      7,
      1941,
      28,
      14202,
      2599
    ],
    "start_token": 764,
    "end_token": 776,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15161,
      11507,
      1988,
      8748,
      3912
    ],
    "label": "ml_signal",
    "reason": "Default parameter value usage pattern"
  },
  {
    "line": 174,
    "text": "    Parameters",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential compatibility issue with string encoding",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      40117
    ],
    "start_token": 776,
    "end_token": 780,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      17764,
      2071,
      351,
      4731,
      21004
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential compatibility issue with string encoding"
  },
  {
    "line": 175,
    "text": "    ------",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potential security risk with URL formatting",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      40103
    ],
    "start_token": 780,
    "end_token": 784,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      32480,
      2324,
      2526,
      351,
      10289,
      33313
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potential security risk with URL formatting"
  },
  {
    "line": 182,
    "text": "    1Y_10:10\u65e5\u5747\u503c",
    "annotation": "\ud83e\udde0 ML Signal: Network call to fetch data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      352,
      56,
      62,
      940,
      25,
      940,
      33768,
      98,
      161,
      251,
      229,
      161,
      222,
      120
    ],
    "start_token": 784,
    "end_token": 801,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7311,
      869,
      284,
      21207,
      1366
    ],
    "label": "ml_signal",
    "reason": "Network call to fetch data"
  },
  {
    "line": 184,
    "text": "    \"\"\"",
    "annotation": "\ud83e\udde0 ML Signal: Data processing pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 801,
    "end_token": 805,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      7587,
      3912
    ],
    "label": "ml_signal",
    "reason": "Data processing pattern"
  },
  {
    "line": 187,
    "text": "    lab = lab.encode('utf-8') if ct.PY3 else lab",
    "annotation": "\ud83e\udde0 ML Signal: Date conversion pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2248,
      796,
      2248,
      13,
      268,
      8189,
      10786,
      40477,
      12,
      23,
      11537,
      611,
      269,
      83,
      13,
      47,
      56,
      18,
      2073,
      2248
    ],
    "start_token": 805,
    "end_token": 828,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      7536,
      11315,
      3912
    ],
    "label": "ml_signal",
    "reason": "Date conversion pattern"
  },
  {
    "line": 189,
    "text": "        clt = Client(url=ct.SHIBOR_DATA_URL%(ct.P_TYPE['http'], ct.DOMAINS['shibor'],",
    "annotation": "\u2705 Best Practice: Version check for backward compatibility",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      537,
      83,
      796,
      20985,
      7,
      6371,
      28,
      310,
      13,
      9693,
      9865,
      1581,
      62,
      26947,
      62,
      21886,
      4,
      7,
      310,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357,
      269,
      83,
      13,
      39170,
      32,
      20913,
      17816,
      1477,
      571,
      273,
      6,
      4357
    ],
    "start_token": 828,
    "end_token": 874,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      10628,
      2198,
      329,
      19528,
      17764
    ],
    "label": "best_practice",
    "reason": "Version check for backward compatibility"
  },
  {
    "line": 189,
    "text": "        clt = Client(url=ct.SHIBOR_DATA_URL%(ct.P_TYPE['http'], ct.DOMAINS['shibor'],",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Broad exception handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      537,
      83,
      796,
      20985,
      7,
      6371,
      28,
      310,
      13,
      9693,
      9865,
      1581,
      62,
      26947,
      62,
      21886,
      4,
      7,
      310,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357,
      269,
      83,
      13,
      39170,
      32,
      20913,
      17816,
      1477,
      571,
      273,
      6,
      4357
    ],
    "start_token": 874,
    "end_token": 920,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      9765,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Broad exception handling"
  }
]
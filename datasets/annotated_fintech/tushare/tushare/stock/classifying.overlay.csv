annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚ö†Ô∏è SAST Risk (Low): _network_error_classes is an internal utility and may change in future versions of pandas,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4808, 27349, 62, 18224, 62, 37724, 318, 281, 5387, 10361, 290, 743, 1487, 287, 2003, 6300, 286, 19798, 292]",1.0,14,sast_risk,13,_network_error_classes is an internal utility and may change in future versions of pandas,Low,0,from tushare.stock import ref_vars as rv,"[6738, 256, 1530, 533, 13, 13578, 1330, 1006, 62, 85, 945, 355, 374, 85]"
üß† ML Signal: Usage of custom network client for API requests,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2183, 3127, 5456, 329, 7824, 7007]",0.5,16,ml_signal,17,Usage of custom network client for API requests,,14,import time,"[11748, 640]"
‚úÖ Best Practice: Use of try-except for compatibility between Python 2 and 3,"[26486, 227, 6705, 19939, 25, 5765, 286, 1949, 12, 16341, 329, 17764, 1022, 11361, 362, 290, 513]",0.5,16,best_practice,20,Use of try-except for compatibility between Python 2 and 3,,16,,[]
"üß† ML Signal: Function with default parameter value, indicating common usage pattern","[8582, 100, 254, 10373, 26484, 25, 15553, 351, 4277, 11507, 1988, 11, 12739, 2219, 8748, 3912]",0.5,18,ml_signal,21,"Function with default parameter value, indicating common usage pattern",,16,try:,"[28311, 25]"
‚úÖ Best Practice: Use of if-else for conditional logic based on parameter value,"[26486, 227, 6705, 19939, 25, 5765, 286, 611, 12, 17772, 329, 26340, 9156, 1912, 319, 11507, 1988]",0.5,22,best_practice,36,Use of if-else for conditional logic based on parameter value,,18,    -------,"[220, 220, 220, 35656]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if 'ct.TSDATA_CLASS' or 'ct.DOMAINS' are user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 310, 13, 4694, 26947, 62, 31631, 6, 393, 705, 310, 13, 39170, 32, 20913, 6, 389, 2836, 12, 14401]",1.0,42,sast_risk,39,Potential risk if 'ct.TSDATA_CLASS' or 'ct.DOMAINS' are user-controlled,Low,22,        name :ËÇ°Á•®ÂêçÁß∞,"[220, 220, 220, 220, 220, 220, 220, 1438, 1058, 164, 224, 94, 163, 98, 101, 28938, 235, 163, 100, 108]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if 'ct.TSDATA_CLASS' or 'ct.DOMAINS' are user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 705, 310, 13, 4694, 26947, 62, 31631, 6, 393, 705, 310, 13, 39170, 32, 20913, 6, 389, 2836, 12, 14401]",1.0,51,sast_risk,42,Potential risk if 'ct.TSDATA_CLASS' or 'ct.DOMAINS' are user-controlled,Low,42,    if standard == 'sw':,"[220, 220, 220, 611, 3210, 6624, 705, 2032, 10354]"
"‚úÖ Best Practice: Returning a DataFrame object, which is a common practice for data handling functions","[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 2134, 11, 543, 318, 257, 2219, 3357, 329, 1366, 9041, 5499]",0.5,93,best_practice,43,"Returning a DataFrame object, which is a common practice for data handling functions",,51,"#         df = _get_type_data(ct.SINA_INDUSTRY_INDEX_URL%(ct.P_TYPE['http'],","[2, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 4808, 1136, 62, 4906, 62, 7890, 7, 310, 13, 50, 28893, 62, 12115, 7759, 18276, 62, 12115, 6369, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357]"
‚úÖ Best Practice: Add import statement for pandas to ensure the code runs without errors,"[26486, 227, 6705, 19939, 25, 3060, 1330, 2643, 329, 19798, 292, 284, 4155, 262, 2438, 4539, 1231, 8563]",1.0,102,best_practice,42,Add import statement for pandas to ensure the code runs without errors,,93,    if standard == 'sw':,"[220, 220, 220, 611, 3210, 6624, 705, 2032, 10354]"
‚úÖ Best Practice: Add import statement for ct (assumed to be a module) to ensure the code runs without errors,"[26486, 227, 6705, 19939, 25, 3060, 1330, 2643, 329, 269, 83, 357, 562, 18940, 284, 307, 257, 8265, 8, 284, 4155, 262, 2438, 4539, 1231, 8563]",1.0,144,best_practice,43,Add import statement for ct (assumed to be a module) to ensure the code runs without errors,,102,"#         df = _get_type_data(ct.SINA_INDUSTRY_INDEX_URL%(ct.P_TYPE['http'],","[2, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 4808, 1136, 62, 4906, 62, 7890, 7, 310, 13, 50, 28893, 62, 12115, 7759, 18276, 62, 12115, 6369, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357]"
üß† ML Signal: Reading a CSV file into a DataFrame is a common data loading pattern,"[8582, 100, 254, 10373, 26484, 25, 11725, 257, 44189, 2393, 656, 257, 6060, 19778, 318, 257, 2219, 1366, 11046, 3912]",1.0,156,ml_signal,54,Reading a CSV file into a DataFrame is a common data loading pattern,,144,#     for row in df.values:,"[2, 220, 220, 220, 220, 329, 5752, 287, 47764, 13, 27160, 25]"
‚ö†Ô∏è SAST Risk (Low): Ensure the CSV file path is validated or sanitized to prevent path traversal,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 262, 44189, 2393, 3108, 318, 31031, 393, 5336, 36951, 284, 2948, 3108, 33038, 282]",0.5,192,sast_risk,55,Ensure the CSV file path is validated or sanitized to prevent path traversal,Low,156,"#         rowDf =  _get_detail(row[0], retry_count=10, pause=0.01)","[2, 220, 220, 220, 220, 220, 220, 220, 220, 5752, 35, 69, 796, 220, 4808, 1136, 62, 49170, 7, 808, 58, 15, 4357, 1005, 563, 62, 9127, 28, 940, 11, 14985, 28, 15, 13, 486, 8]"
üß† ML Signal: Returning a DataFrame is a common pattern in data processing functions,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 318, 257, 2219, 3912, 287, 1366, 7587, 5499]",1.0,209,ml_signal,57,Returning a DataFrame is a common pattern in data processing functions,,192,#         data.append(rowDf),"[2, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 13, 33295, 7, 808, 35, 69, 8]"
‚ö†Ô∏è SAST Risk (Low): Function name 'concetps' is likely a typo and may lead to confusion or errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 15553, 1438, 705, 1102, 66, 316, 862, 6, 318, 1884, 257, 46517, 290, 743, 1085, 284, 10802, 393, 8563, 13]",1.0,245,sast_risk,55,Function name 'concetps' is likely a typo and may lead to confusion or errors.,Low,209,"#         rowDf =  _get_detail(row[0], retry_count=10, pause=0.01)","[2, 220, 220, 220, 220, 220, 220, 220, 220, 5752, 35, 69, 796, 220, 4808, 1136, 62, 49170, 7, 808, 58, 15, 4357, 1005, 563, 62, 9127, 28, 940, 11, 14985, 28, 15, 13, 486, 8]"
"‚ö†Ô∏è SAST Risk (Medium): Assuming ct._write_head() is a method from an imported module, its behavior is unknown and could have side effects.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 33238, 269, 83, 13557, 13564, 62, 2256, 3419, 318, 257, 2446, 422, 281, 17392, 8265, 11, 663, 4069, 318, 6439, 290, 714, 423, 1735, 3048, 13]",0.5,262,sast_risk,57,"Assuming ct._write_head() is a method from an imported module, its behavior is unknown and could have side effects.",Medium,245,#         data.append(rowDf),"[2, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 13, 33295, 7, 808, 35, 69, 8]"
‚ö†Ô∏è SAST Risk (Medium): URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5103, 1262, 4731, 33313, 460, 1085, 284, 16954, 23805, 611, 17311, 389, 407, 5336, 36951, 13]",0.5,267,sast_risk,59,URL construction using string formatting can lead to injection vulnerabilities if inputs are not sanitized.,Medium,262,    return df,"[220, 220, 220, 1441, 47764]"
"‚ö†Ô∏è SAST Risk (Medium): _get_detail(row[0]) may return None, leading to potential issues if not handled properly.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 4808, 1136, 62, 49170, 7, 808, 58, 15, 12962, 743, 1441, 6045, 11, 3756, 284, 2785, 2428, 611, 407, 12118, 6105, 13]",0.5,294,sast_risk,64,"_get_detail(row[0]) may return None, leading to potential issues if not handled properly.",Medium,267,        Ëé∑ÂèñÊ¶ÇÂøµÂàÜÁ±ªÊï∞ÊçÆ,"[220, 220, 220, 220, 220, 220, 220, 5525, 236, 115, 20998, 244, 162, 99, 224, 33232, 113, 26344, 228, 163, 109, 119, 46763, 108, 162, 235, 106]"
‚úÖ Best Practice: Adding a new column to a DataFrame should be done with caution to ensure consistency.,"[26486, 227, 6705, 19939, 25, 18247, 257, 649, 5721, 284, 257, 6060, 19778, 815, 307, 1760, 351, 13041, 284, 4155, 15794, 13]",0.5,299,best_practice,67,Adding a new column to a DataFrame should be done with caution to ensure consistency.,,294,    DataFrame,"[220, 220, 220, 6060, 19778]"
‚úÖ Best Practice: Using pd.concat for combining DataFrames is efficient and maintains data integrity.,"[26486, 227, 6705, 19939, 25, 8554, 279, 67, 13, 1102, 9246, 329, 19771, 6060, 35439, 318, 6942, 290, 16047, 1366, 11540, 13]",0.5,319,best_practice,69,Using pd.concat for combining DataFrames is efficient and maintains data integrity.,,299,        name :ËÇ°Á•®ÂêçÁß∞,"[220, 220, 220, 220, 220, 220, 220, 1438, 1058, 164, 224, 94, 163, 98, 101, 28938, 235, 163, 100, 108]"
‚ö†Ô∏è SAST Risk (Medium): Writing to a fixed file path can lead to data exposure or overwriting important files.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 22183, 284, 257, 5969, 2393, 3108, 460, 1085, 284, 1366, 7111, 393, 6993, 799, 278, 1593, 3696, 13]",1.0,339,sast_risk,69,Writing to a fixed file path can lead to data exposure or overwriting important files.,Medium,319,        name :ËÇ°Á•®ÂêçÁß∞,"[220, 220, 220, 220, 220, 220, 220, 1438, 1058, 164, 224, 94, 163, 98, 101, 28938, 235, 163, 100, 108]"
"‚úÖ Best Practice: Default parameter values should be immutable, use None or similar if mutable types are needed","[26486, 227, 6705, 19939, 25, 15161, 11507, 3815, 815, 307, 40139, 11, 779, 6045, 393, 2092, 611, 4517, 540, 3858, 389, 2622]",1.0,358,best_practice,68,"Default parameter values should be immutable, use None or similar if mutable types are needed",,339,        code :ËÇ°Á•®‰ª£Á†Å,"[220, 220, 220, 220, 220, 220, 220, 2438, 1058, 164, 224, 94, 163, 98, 101, 47987, 163, 254, 223]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of URL manipulation if _random is not properly controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 10289, 17512, 611, 4808, 25120, 318, 407, 6105, 6856]",0.5,368,sast_risk,78,Potential risk of URL manipulation if _random is not properly controlled,Medium,358,    ct._write_head(),"[220, 220, 220, 269, 83, 13557, 13564, 62, 2256, 3419]"
üß† ML Signal: Decoding content based on Python version indicates handling of different environments,"[8582, 100, 254, 10373, 26484, 25, 4280, 7656, 2695, 1912, 319, 11361, 2196, 9217, 9041, 286, 1180, 12493]",1.0,378,ml_signal,82,Decoding content based on Python version indicates handling of different environments,,368,    for row in df.values:,"[220, 220, 220, 329, 5752, 287, 47764, 13, 27160, 25]"
‚ö†Ô∏è SAST Risk (Low): json.loads can raise exceptions if content is not valid JSON,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33918, 13, 46030, 460, 5298, 13269, 611, 2695, 318, 407, 4938, 19449]",0.5,402,sast_risk,85,json.loads can raise exceptions if content is not valid JSON,Low,378,            rowDf['c_name'] = row[1],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5752, 35, 69, 17816, 66, 62, 3672, 20520, 796, 5752, 58, 16, 60]"
üß† ML Signal: Use of pandas DataFrame indicates data manipulation and analysis,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 6060, 19778, 9217, 1366, 17512, 290, 3781]",0.5,402,ml_signal,92,Use of pandas DataFrame indicates data manipulation and analysis,,402,,[]
üß† ML Signal: Usage of a specific function from an external library (fd.get_stock_basics),"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2176, 2163, 422, 281, 7097, 5888, 357, 16344, 13, 1136, 62, 13578, 62, 12093, 873, 8]",0.5,423,ml_signal,101,Usage of a specific function from an external library (fd.get_stock_basics),,402,        c_name :Ê¶ÇÂøµÂêçÁß∞,"[220, 220, 220, 220, 220, 220, 220, 269, 62, 3672, 1058, 162, 99, 224, 33232, 113, 28938, 235, 163, 100, 108]"
‚úÖ Best Practice: Selecting only necessary columns for processing,"[26486, 227, 6705, 19939, 25, 9683, 278, 691, 3306, 15180, 329, 7587]",1.0,455,best_practice,103,Selecting only necessary columns for processing,,423,"    clt = Client(ct.ET_CONCEPTS_INDEX_URL%(ct.P_TYPE['http'],","[220, 220, 220, 537, 83, 796, 20985, 7, 310, 13, 2767, 62, 10943, 5222, 47, 4694, 62, 12115, 6369, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357]"
‚úÖ Best Practice: Resetting index after modifying DataFrame structure,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 706, 30620, 6060, 19778, 4645]",0.5,466,best_practice,105,Resetting index after modifying DataFrame structure,,455,    content = clt.gvalue(),"[220, 220, 220, 2695, 796, 537, 83, 13, 70, 8367, 3419]"
‚úÖ Best Practice: Sorting DataFrame for consistent output,"[26486, 227, 6705, 19939, 25, 311, 24707, 6060, 19778, 329, 6414, 5072]",1.0,477,best_practice,107,Sorting DataFrame for consistent output,,466,    js = json.loads(content),"[220, 220, 220, 44804, 796, 33918, 13, 46030, 7, 11299, 8]"
‚úÖ Best Practice: Use of reset_index with inplace=True for modifying the DataFrame in place,"[26486, 227, 6705, 19939, 25, 5765, 286, 13259, 62, 9630, 351, 287, 5372, 28, 17821, 329, 30620, 262, 6060, 19778, 287, 1295]",1.0,477,best_practice,116,Use of reset_index with inplace=True for modifying the DataFrame in place,,477,,[]
üß† ML Signal: Filtering DataFrame columns for specific use cases,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 6060, 19778, 15180, 329, 2176, 779, 2663]",0.5,484,ml_signal,118,Filtering DataFrame columns for specific use cases,,477,def get_area_classified():,"[4299, 651, 62, 20337, 62, 31691, 33529]"
"‚ö†Ô∏è SAST Risk (Low): Use of deprecated .ix indexer, consider using .loc or .iloc instead","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 39224, 764, 844, 6376, 263, 11, 2074, 1262, 764, 17946, 393, 764, 346, 420, 2427]",1.0,511,sast_risk,120,"Use of deprecated .ix indexer, consider using .loc or .iloc instead",Low,484,        Ëé∑ÂèñÂú∞ÂüüÂàÜÁ±ªÊï∞ÊçÆ,"[220, 220, 220, 220, 220, 220, 220, 5525, 236, 115, 20998, 244, 28839, 108, 161, 253, 253, 26344, 228, 163, 109, 119, 46763, 108, 162, 235, 106]"
‚úÖ Best Practice: Sorting DataFrame by 'code' for consistent ordering,"[26486, 227, 6705, 19939, 25, 311, 24707, 6060, 19778, 416, 705, 8189, 6, 329, 6414, 16216]",0.5,515,best_practice,122,Sorting DataFrame by 'code' for consistent ordering,,511,    --------,"[220, 220, 220, 24200]"
‚úÖ Best Practice: Add a function docstring to describe the purpose and return value of the function,"[26486, 227, 6705, 19939, 25, 3060, 257, 2163, 2205, 8841, 284, 6901, 262, 4007, 290, 1441, 1988, 286, 262, 2163]",1.0,519,best_practice,121,Add a function docstring to describe the purpose and return value of the function,,515,    Return,"[220, 220, 220, 8229]"
üß† ML Signal: Usage of external library function to get stock basics,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 5888, 2163, 284, 651, 4283, 19165]",1.0,540,ml_signal,131,Usage of external library function to get stock basics,,519,    df = df.sort_values('area').reset_index(drop=True),"[220, 220, 220, 47764, 796, 47764, 13, 30619, 62, 27160, 10786, 20337, 27691, 42503, 62, 9630, 7, 14781, 28, 17821, 8]"
‚úÖ Best Practice: Resetting index to ensure DataFrame operations do not carry over the old index,"[26486, 227, 6705, 19939, 25, 30027, 889, 6376, 284, 4155, 6060, 19778, 4560, 466, 407, 3283, 625, 262, 1468, 6376]",1.0,540,best_practice,133,Resetting index to ensure DataFrame operations do not carry over the old index,,540,,[]
üß† ML Signal: Selecting specific columns for classification,"[8582, 100, 254, 10373, 26484, 25, 9683, 278, 2176, 15180, 329, 17923]",1.0,547,ml_signal,135,Selecting specific columns for classification,,540,def get_gem_classified():,"[4299, 651, 62, 24090, 62, 31691, 33529]"
"‚ö†Ô∏è SAST Risk (Low): Use of deprecated 'ix' method, which can lead to unexpected behavior","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 39224, 705, 844, 6, 2446, 11, 543, 460, 1085, 284, 10059, 4069]",0.5,571,sast_risk,137,"Use of deprecated 'ix' method, which can lead to unexpected behavior",Low,547,        Ëé∑ÂèñÂàõ‰∏öÊùøËÇ°Á•®,"[220, 220, 220, 220, 220, 220, 220, 5525, 236, 115, 20998, 244, 26344, 249, 10310, 248, 30266, 123, 164, 224, 94, 163, 98, 101]"
‚úÖ Best Practice: Sorting values for consistent output,"[26486, 227, 6705, 19939, 25, 311, 24707, 3815, 329, 6414, 5072]",1.0,595,best_practice,137,Sorting values for consistent output,,571,        Ëé∑ÂèñÂàõ‰∏öÊùøËÇ°Á•®,"[220, 220, 220, 220, 220, 220, 220, 5525, 236, 115, 20998, 244, 26344, 249, 10310, 248, 30266, 123, 164, 224, 94, 163, 98, 101]"
‚úÖ Best Practice: Returning a DataFrame for further processing or analysis,"[26486, 227, 6705, 19939, 25, 42882, 257, 6060, 19778, 329, 2252, 7587, 393, 3781]",1.0,619,best_practice,137,Returning a DataFrame for further processing or analysis,,595,        Ëé∑ÂèñÂàõ‰∏öÊùøËÇ°Á•®,"[220, 220, 220, 220, 220, 220, 220, 5525, 236, 115, 20998, 244, 26344, 249, 10310, 248, 30266, 123, 164, 224, 94, 163, 98, 101]"
‚úÖ Best Practice: Add a docstring to describe the function's purpose and return value,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 1441, 1988]",0.5,623,best_practice,136,Add a docstring to describe the function's purpose and return value,,619,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Usage of external library function to get stock basics,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 5888, 2163, 284, 651, 4283, 19165]",1.0,641,ml_signal,146,Usage of external library function to get stock basics,,623,    df = df[ct.FOR_CLASSIFY_COLS],"[220, 220, 220, 47764, 796, 47764, 58, 310, 13, 13775, 62, 31631, 5064, 56, 62, 25154, 50, 60]"
‚úÖ Best Practice: Reset index to ensure DataFrame operations do not rely on existing index,"[26486, 227, 6705, 19939, 25, 30027, 6376, 284, 4155, 6060, 19778, 4560, 466, 407, 8814, 319, 4683, 6376]",1.0,662,best_practice,148,Reset index to ensure DataFrame operations do not rely on existing index,,641,    df = df.sort_values('code').reset_index(drop=True),"[220, 220, 220, 47764, 796, 47764, 13, 30619, 62, 27160, 10786, 8189, 27691, 42503, 62, 9630, 7, 14781, 28, 17821, 8]"
üß† ML Signal: Filtering DataFrame columns for specific classification,"[8582, 100, 254, 10373, 26484, 25, 7066, 20212, 6060, 19778, 15180, 329, 2176, 17923]",1.0,666,ml_signal,150,Filtering DataFrame columns for specific classification,,662,    ,"[220, 220, 220, 220]"
"‚ö†Ô∏è SAST Risk (Low): Use of deprecated 'ix' indexer, should use 'loc' or 'iloc' instead","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 39224, 705, 844, 6, 6376, 263, 11, 815, 779, 705, 17946, 6, 393, 705, 346, 420, 6, 2427]",1.0,674,sast_risk,152,"Use of deprecated 'ix' indexer, should use 'loc' or 'iloc' instead",Low,666,def get_sme_classified():,"[4299, 651, 62, 82, 1326, 62, 31691, 33529]"
‚úÖ Best Practice: Sort DataFrame by 'code' for consistent ordering,"[26486, 227, 6705, 19939, 25, 33947, 6060, 19778, 416, 705, 8189, 6, 329, 6414, 16216]",1.0,697,best_practice,154,Sort DataFrame by 'code' for consistent ordering,,674,        Ëé∑Âèñ‰∏≠Â∞èÊùøËÇ°Á•®,"[220, 220, 220, 220, 220, 220, 220, 5525, 236, 115, 20998, 244, 40792, 22887, 237, 30266, 123, 164, 224, 94, 163, 98, 101]"
üß† ML Signal: Returning a DataFrame after processing,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 706, 7587]",0.5,701,ml_signal,156,Returning a DataFrame after processing,,697,    --------,"[220, 220, 220, 24200]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe URL construction with string formatting,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 10289, 5103, 351, 4731, 33313]",0.5,716,sast_risk,161,Potentially unsafe URL construction with string formatting,Medium,701,    df = fd.get_stock_basics(),"[220, 220, 220, 47764, 796, 277, 67, 13, 1136, 62, 13578, 62, 12093, 873, 3419]"
‚ö†Ô∏è SAST Risk (Medium): No validation or sanitization of the response from urlopen,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 393, 5336, 270, 1634, 286, 262, 2882, 422, 19016, 9654]",0.5,737,sast_risk,165,No validation or sanitization of the response from urlopen,Medium,716,    df = df.sort_values('code').reset_index(drop=True),"[220, 220, 220, 47764, 796, 47764, 13, 30619, 62, 27160, 10786, 8189, 27691, 42503, 62, 9630, 7, 14781, 28, 17821, 8]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded character encoding,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 2095, 21004]",0.5,737,sast_risk,167,Hardcoded character encoding,Low,737,,[]
‚úÖ Best Practice: Use raw strings for regex patterns to avoid escape sequence issues,"[26486, 227, 6705, 19939, 25, 5765, 8246, 13042, 329, 40364, 7572, 284, 3368, 6654, 8379, 2428]",0.5,742,best_practice,173,Use raw strings for regex patterns to avoid escape sequence issues,,737,    DataFrame,"[220, 220, 220, 6060, 19778]"
‚úÖ Best Practice: Consider using a more descriptive variable name than 'text',"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 517, 35644, 7885, 1438, 621, 705, 5239, 6]",0.5,762,best_practice,175,Consider using a more descriptive variable name than 'text',,742,        name :ËÇ°Á•®ÂêçÁß∞,"[220, 220, 220, 220, 220, 220, 220, 1438, 1058, 164, 224, 94, 163, 98, 101, 28938, 235, 163, 100, 108]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe JSON operations without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 19449, 4560, 1231, 21201]",0.5,780,sast_risk,179,Potentially unsafe JSON operations without validation,Medium,762,    df = df[ct.FOR_CLASSIFY_COLS],"[220, 220, 220, 47764, 796, 47764, 58, 310, 13, 13775, 62, 31631, 5064, 56, 62, 25154, 50, 60]"
üß† ML Signal: Usage of pandas for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 329, 1366, 17512]",0.5,786,ml_signal,182,Usage of pandas for data manipulation,,780,    return df ,"[220, 220, 220, 1441, 47764, 220]"
üß† ML Signal: Usage of pandas for data concatenation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 329, 1366, 1673, 36686, 341]",0.5,807,ml_signal,185,Usage of pandas for data concatenation,,786,"def _get_detail(tag, retry_count=3, pause=0.001):","[4299, 4808, 1136, 62, 49170, 7, 12985, 11, 1005, 563, 62, 9127, 28, 18, 11, 14985, 28, 15, 13, 8298, 2599]"
"‚úÖ Best Practice: Function name is prefixed with an underscore, indicating intended private use.","[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 7694, 2966, 351, 281, 44810, 11, 12739, 5292, 2839, 779, 13]",0.5,828,best_practice,181,"Function name is prefixed with an underscore, indicating intended private use.",,807,    df = df.sort_values('code').reset_index(drop=True),"[220, 220, 220, 47764, 796, 47764, 13, 30619, 62, 27160, 10786, 8189, 27691, 42503, 62, 9630, 7, 14781, 28, 17821, 8]"
"‚ö†Ô∏è SAST Risk (Medium): No validation or sanitization of the URL input, which could lead to SSRF or other injection attacks.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 393, 5336, 270, 1634, 286, 262, 10289, 5128, 11, 543, 714, 1085, 284, 6723, 32754, 393, 584, 16954, 3434, 13]",0.5,828,sast_risk,184,"No validation or sanitization of the URL input, which could lead to SSRF or other injection attacks.",Medium,828,,[]
‚ö†Ô∏è SAST Risk (Medium): No exception handling for network-related errors like timeouts or connection issues.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 3127, 12, 5363, 8563, 588, 640, 5269, 393, 4637, 2428, 13]",0.5,840,sast_risk,186,No exception handling for network-related errors like timeouts or connection issues.,Medium,828,    dfc = pd.DataFrame(),"[220, 220, 220, 288, 16072, 796, 279, 67, 13, 6601, 19778, 3419]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded character encoding may lead to issues if the data is not in 'GBK'.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 2095, 21004, 743, 1085, 284, 2428, 611, 262, 1366, 318, 407, 287, 705, 4579, 42, 4458]",0.5,848,sast_risk,188,Hardcoded character encoding may lead to issues if the data is not in 'GBK'.,Low,840,    num_limit = 100,"[220, 220, 220, 997, 62, 32374, 796, 1802]"
"‚ö†Ô∏è SAST Risk (Low): Assumes the split will always succeed, which may not be the case if the data format changes.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 262, 6626, 481, 1464, 6758, 11, 543, 743, 407, 307, 262, 1339, 611, 262, 1366, 5794, 2458, 13]",0.5,860,sast_risk,190,"Assumes the split will always succeed, which may not be the case if the data format changes.",Low,848,        p = p+1,"[220, 220, 220, 220, 220, 220, 220, 279, 796, 279, 10, 16]"
"‚ö†Ô∏è SAST Risk (Medium): No validation of JSON structure, which could lead to runtime errors if the format is unexpected.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 286, 19449, 4645, 11, 543, 714, 1085, 284, 19124, 8563, 611, 262, 5794, 318, 10059, 13]",0.5,877,sast_risk,192,"No validation of JSON structure, which could lead to runtime errors if the format is unexpected.",Medium,860,            time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
‚úÖ Best Practice: List comprehension used for concise and readable data transformation.,"[26486, 227, 6705, 19939, 25, 7343, 35915, 973, 329, 35327, 290, 31744, 1366, 13389, 13]",0.5,899,best_practice,194,List comprehension used for concise and readable data transformation.,,877,                ct._write_console(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13557, 13564, 62, 41947, 3419]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can mask specific error types and make debugging difficult.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 9335, 2176, 4049, 3858, 290, 787, 28769, 2408, 13]",0.5,921,sast_risk,194,Catching broad exceptions can mask specific error types and make debugging difficult.,Low,899,                ct._write_console(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13557, 13564, 62, 41947, 3419]"
‚úÖ Best Practice: Error message is converted to string for consistent output.,"[26486, 227, 6705, 19939, 25, 13047, 3275, 318, 11513, 284, 4731, 329, 6414, 5072, 13]",0.5,945,best_practice,204,Error message is converted to string for consistent output.,,921,"        reg = re.compile(r'\,(.*?)\:')","[220, 220, 220, 220, 220, 220, 220, 842, 796, 302, 13, 5589, 576, 7, 81, 6, 59, 11, 7, 15885, 10091, 59, 25, 11537]"
‚ö†Ô∏è SAST Risk (Medium): Using a hardcoded URL can lead to security risks if the URL is compromised.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 257, 1327, 40976, 10289, 460, 1085, 284, 2324, 7476, 611, 262, 10289, 318, 19066, 13]",0.5,966,sast_risk,205,Using a hardcoded URL can lead to security risks if the URL is compromised.,Medium,945,"        text = reg.sub(r',""\1"":', text)","[220, 220, 220, 220, 220, 220, 220, 2420, 796, 842, 13, 7266, 7, 81, 40264, 59, 16, 1298, 3256, 2420, 8]"
"üß† ML Signal: Usage of external data sources (e.g., reading from a URL) can indicate data dependency patterns.","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 7097, 1366, 4237, 357, 68, 13, 70, 1539, 3555, 422, 257, 10289, 8, 460, 7603, 1366, 20203, 7572, 13]",0.5,987,ml_signal,205,"Usage of external data sources (e.g., reading from a URL) can indicate data dependency patterns.",,966,"        text = reg.sub(r',""\1"":', text)","[220, 220, 220, 220, 220, 220, 220, 2420, 796, 842, 13, 7266, 7, 81, 40264, 59, 16, 1298, 3256, 2420, 8]"
‚úÖ Best Practice: Explicitly setting column names improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 5721, 3891, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1003,best_practice,209,Explicitly setting column names improves code readability and maintainability.,,987,        js = json.loads(jstr),"[220, 220, 220, 220, 220, 220, 220, 44804, 796, 33918, 13, 46030, 7, 73, 2536, 8]"
‚úÖ Best Practice: Using map with zfill ensures consistent formatting of stock codes.,"[26486, 227, 6705, 19939, 25, 8554, 3975, 351, 1976, 20797, 19047, 6414, 33313, 286, 4283, 12416, 13]",1.0,1029,best_practice,211,Using map with zfill ensures consistent formatting of stock codes.,,1003,#         df = df[ct.FOR_CLASSIFY_B_COLS],"[2, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 58, 310, 13, 13775, 62, 31631, 5064, 56, 62, 33, 62, 25154, 50, 60]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can mask specific errors and make debugging difficult.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 9335, 2176, 8563, 290, 787, 28769, 2408, 13]",1.0,1050,sast_risk,213,Catching broad exceptions can mask specific errors and make debugging difficult.,Low,1029,"        dfc = pd.concat([dfc, df])","[220, 220, 220, 220, 220, 220, 220, 288, 16072, 796, 279, 67, 13, 1102, 9246, 26933, 7568, 66, 11, 47764, 12962]"
‚úÖ Best Practice: Logging errors instead of printing them can be more useful for debugging and production use.,"[26486, 227, 6705, 19939, 25, 5972, 2667, 8563, 2427, 286, 13570, 606, 460, 307, 517, 4465, 329, 28769, 290, 3227, 779, 13]",0.5,1071,best_practice,213,Logging errors instead of printing them can be more useful for debugging and production use.,,1050,"        dfc = pd.concat([dfc, df])","[220, 220, 220, 220, 220, 220, 220, 288, 16072, 796, 279, 67, 13, 1102, 9246, 26933, 7568, 66, 11, 47764, 12962]"
üß† ML Signal: Function definition with a specific purpose (fetching data),"[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2176, 4007, 357, 69, 7569, 278, 1366, 8]",1.0,1089,ml_signal,212,Function definition with a specific purpose (fetching data),,1071,"        df = df[['code', 'name']]","[220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 58, 17816, 8189, 3256, 705, 3672, 6, 11907]"
‚ö†Ô∏è SAST Risk (Medium): External URL access without validation or error handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 34579, 10289, 1895, 1231, 21201, 393, 4049, 9041]",0.5,1110,sast_risk,223,External URL access without validation or error handling,Medium,1089,        data_str = data_str.decode('GBK'),"[220, 220, 220, 220, 220, 220, 220, 1366, 62, 2536, 796, 1366, 62, 2536, 13, 12501, 1098, 10786, 4579, 42, 11537]"
‚úÖ Best Practice: Explicitly setting DataFrame columns for clarity,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 6060, 19778, 15180, 329, 16287]",1.0,1144,best_practice,227,Explicitly setting DataFrame columns for clarity,,1110,"                          columns=['tag', 'name'])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 15180, 28, 17816, 12985, 3256, 705, 3672, 6, 12962]"
‚úÖ Best Practice: Using map with lambda for consistent data formatting,"[26486, 227, 6705, 19939, 25, 8554, 3975, 351, 37456, 329, 6414, 1366, 33313]",0.5,1152,best_practice,229,Using map with lambda for consistent data formatting,,1144,    except Exception as er:,"[220, 220, 220, 2845, 35528, 355, 1931, 25]"
‚ö†Ô∏è SAST Risk (Low): Generic exception handling without specific error actions,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041, 1231, 2176, 4049, 4028]",1.0,1152,sast_risk,231,Generic exception handling without specific error actions,Low,1152,,[]
‚ö†Ô∏è SAST Risk (Medium): Potential security risk if the URL or file path is not properly validated or sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2324, 2526, 611, 262, 10289, 393, 2393, 3108, 318, 407, 6105, 31031, 393, 5336, 36951, 13]",0.5,1165,sast_risk,242,Potential security risk if the URL or file path is not properly validated or sanitized.,Medium,1152,        weight:ÊùÉÈáç,"[220, 220, 220, 220, 220, 220, 220, 3463, 25, 30266, 225, 34932, 235]"
‚úÖ Best Practice: Explicitly setting column names improves code readability and maintainability.,"[26486, 227, 6705, 19939, 25, 11884, 306, 4634, 5721, 3891, 19575, 2438, 1100, 1799, 290, 5529, 1799, 13]",1.0,1219,best_practice,245,Explicitly setting column names improves code readability and maintainability.,,1165,"        wt = pd.read_excel(ct.HS300_CLASSIFY_URL_FTP%(ct.P_TYPE['http'], ct.DOMAINS['idx'], ","[220, 220, 220, 220, 220, 220, 220, 266, 83, 796, 279, 67, 13, 961, 62, 1069, 5276, 7, 310, 13, 7998, 6200, 62, 31631, 5064, 56, 62, 21886, 62, 37, 7250, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 312, 87, 6, 4357, 220]"
üß† ML Signal: Usage of lambda function for data transformation.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 2163, 329, 1366, 13389, 13]",0.5,1291,ml_signal,246,Usage of lambda function for data transformation.,,1219,"                                                  ct.PAGES['hs300w']), usecols=[0, 4, 5, 8])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4537, 48075, 17816, 11994, 6200, 86, 20520, 828, 779, 4033, 82, 41888, 15, 11, 604, 11, 642, 11, 807, 12962]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors and make debugging difficult.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563, 290, 787, 28769, 2408, 13]",1.0,1299,sast_risk,250,Catching broad exceptions can hide specific errors and make debugging difficult.,Low,1291,    except Exception as er:,"[220, 220, 220, 2845, 35528, 355, 1931, 25]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of URL manipulation if ct.SSEQ_CQ_REF_URL or ct.DOMAINS['sse'] are user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 10289, 17512, 611, 269, 83, 13, 50, 5188, 48, 62, 34, 48, 62, 31688, 62, 21886, 393, 269, 83, 13, 39170, 32, 20913, 17816, 82, 325, 20520, 389, 2836, 12, 14401]",0.5,1319,sast_risk,262,Potential risk of URL manipulation if ct.SSEQ_CQ_REF_URL or ct.DOMAINS['sse'] are user-controlled,Medium,1299,        name :ËÇ°Á•®ÂêçÁß∞,"[220, 220, 220, 220, 220, 220, 220, 1438, 1058, 164, 224, 94, 163, 98, 101, 28938, 235, 163, 100, 108]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of URL manipulation if rv.TERMINATED_URL or ct.DOMAINS['sseq'] are user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 10289, 17512, 611, 374, 85, 13, 5781, 23678, 11617, 62, 21886, 393, 269, 83, 13, 39170, 32, 20913, 17816, 82, 41068, 20520, 389, 2836, 12, 14401]",0.5,1391,sast_risk,266,Potential risk of URL manipulation if rv.TERMINATED_URL or ct.DOMAINS['sseq'] are user-controlled,Medium,1319,"                                                  ct.PAGES['sz50b']), parse_cols=[0, 4, 5])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4537, 48075, 17816, 82, 89, 1120, 65, 20520, 828, 21136, 62, 4033, 82, 41888, 15, 11, 604, 11, 642, 12962]"
‚ö†Ô∏è SAST Risk (Low): Use of _random() might not be cryptographically secure,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 4808, 25120, 3419, 1244, 407, 307, 8194, 33145, 5713]",0.5,1416,sast_risk,267,Use of _random() might not be cryptographically secure,Low,1391,        df.columns = ct.FOR_CLASSIFY_B_COLS,"[220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 269, 83, 13, 13775, 62, 31631, 5064, 56, 62, 33, 62, 25154, 50]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if gvalue() returns unexpected data types,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 308, 8367, 3419, 5860, 10059, 1366, 3858]",0.5,1425,sast_risk,269,Potential issue if gvalue() returns unexpected data types,Low,1416,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
‚úÖ Best Practice: Ensure compatibility with both Python 2 and 3,"[26486, 227, 6705, 19939, 25, 48987, 17764, 351, 1111, 11361, 362, 290, 513]",0.5,1444,best_practice,271,Ensure compatibility with both Python 2 and 3,,1425,        print(str(er))      ,"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 2536, 7, 263, 4008, 220, 220, 220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Low): Assumes lines has enough characters to slice,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 3951, 468, 1576, 3435, 284, 16416]",0.5,1444,sast_risk,273,Assumes lines has enough characters to slice,Low,1444,,[]
‚ö†Ô∏è SAST Risk (Low): json.loads can raise exceptions if the input is not valid JSON,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33918, 13, 46030, 460, 5298, 13269, 611, 262, 5128, 318, 407, 4938, 19449]",0.5,1448,sast_risk,275,json.loads can raise exceptions if the input is not valid JSON,Low,1444,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Usage of pandas DataFrame for data manipulation,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 19798, 292, 6060, 19778, 329, 1366, 17512]",0.5,1452,ml_signal,275,Usage of pandas DataFrame for data manipulation,,1448,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Renaming columns for clarity and consistency,"[26486, 227, 6705, 19939, 25, 7152, 3723, 15180, 329, 16287, 290, 15794]",1.0,1456,best_practice,275,Renaming columns for clarity and consistency,,1452,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563]",1.0,1461,sast_risk,285,Catching broad exceptions can hide specific errors,Low,1456,    try:,"[220, 220, 220, 1949, 25]"
‚úÖ Best Practice: Logging exceptions can help in debugging,"[26486, 227, 6705, 19939, 25, 5972, 2667, 13269, 460, 1037, 287, 28769]",0.5,1466,best_practice,285,Logging exceptions can help in debugging,,1461,    try:,"[220, 220, 220, 1949, 25]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of URL manipulation if ct.SSEQ_CQ_REF_URL or ct.DOMAINS['sse'] are user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 10289, 17512, 611, 269, 83, 13, 50, 5188, 48, 62, 34, 48, 62, 31688, 62, 21886, 393, 269, 83, 13, 39170, 32, 20913, 17816, 82, 325, 20520, 389, 2836, 12, 14401]",1.0,1539,sast_risk,287,Potential risk of URL manipulation if ct.SSEQ_CQ_REF_URL or ct.DOMAINS['sse'] are user-controlled,Medium,1466,"                                                   ct.PAGES['zz500wt']), usecols=[0, 4, 5, 8])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4537, 48075, 17816, 3019, 4059, 46569, 20520, 828, 779, 4033, 82, 41888, 15, 11, 604, 11, 642, 11, 807, 12962]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of URL manipulation if rv.SUSPENDED_URL or ct.DOMAINS['sseq'] are user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 10289, 17512, 611, 374, 85, 13, 50, 2937, 47, 49361, 62, 21886, 393, 269, 83, 13, 39170, 32, 20913, 17816, 82, 41068, 20520, 389, 2836, 12, 14401]",1.0,1547,sast_risk,291,Potential risk of URL manipulation if rv.SUSPENDED_URL or ct.DOMAINS['sseq'] are user-controlled,Medium,1539,    except Exception as er:,"[220, 220, 220, 2845, 35528, 355, 1931, 25]"
‚ö†Ô∏è SAST Risk (Low): Use of _random() might not be cryptographically secure,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 4808, 25120, 3419, 1244, 407, 307, 8194, 33145, 5713]",0.5,1561,sast_risk,292,Use of _random() might not be cryptographically secure,Low,1547,        print(str(er)) ,"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 2536, 7, 263, 4008, 220]"
‚ö†Ô∏è SAST Risk (Low): Potential issue if gvalue() returns unexpected data types,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2071, 611, 308, 8367, 3419, 5860, 10059, 1366, 3858]",0.5,1561,sast_risk,294,Potential issue if gvalue() returns unexpected data types,Low,1561,,[]
‚úÖ Best Practice: Ensure compatibility with both Python 2 and 3,"[26486, 227, 6705, 19939, 25, 48987, 17764, 351, 1111, 11361, 362, 290, 513]",0.5,1565,best_practice,296,Ensure compatibility with both Python 2 and 3,,1561,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Low): Assumes lines has enough characters to slice,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 3951, 468, 1576, 3435, 284, 16416]",0.5,1569,sast_risk,298,Assumes lines has enough characters to slice,Low,1565,    Return,"[220, 220, 220, 8229]"
‚ö†Ô∏è SAST Risk (Low): json.loads can raise exceptions if input is not valid JSON,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 33918, 13, 46030, 460, 5298, 13269, 611, 5128, 318, 407, 4938, 19449]",0.5,1574,sast_risk,300,json.loads can raise exceptions if input is not valid JSON,Low,1569,    DataFrame,"[220, 220, 220, 6060, 19778]"
‚ö†Ô∏è SAST Risk (Low): Assumes 'result' key exists in lines,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 705, 20274, 6, 1994, 7160, 287, 3951]",0.5,1594,sast_risk,302,Assumes 'result' key exists in lines,Low,1574,        name :ËÇ°Á•®ÂêçÁß∞,"[220, 220, 220, 220, 220, 220, 220, 1438, 1058, 164, 224, 94, 163, 98, 101, 28938, 235, 163, 100, 108]"
‚ö†Ô∏è SAST Risk (Low): Assumes rv.TERMINATED_COLS matches the number of columns in df,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 374, 85, 13, 5781, 23678, 11617, 62, 25154, 50, 7466, 262, 1271, 286, 15180, 287, 47764]",0.5,1611,sast_risk,303,Assumes rv.TERMINATED_COLS matches the number of columns in df,Low,1594,        oDate:‰∏äÂ∏ÇÊó•Êúü,"[220, 220, 220, 220, 220, 220, 220, 267, 10430, 25, 41468, 30585, 224, 33768, 98, 17312, 253]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563]",1.0,1628,sast_risk,303,Catching broad exceptions can hide specific errors,Low,1611,        oDate:‰∏äÂ∏ÇÊó•Êúü,"[220, 220, 220, 220, 220, 220, 220, 267, 10430, 25, 41468, 30585, 224, 33768, 98, 17312, 253]"
‚úÖ Best Practice: Consider logging the error instead of printing,"[26486, 227, 6705, 19939, 25, 12642, 18931, 262, 4049, 2427, 286, 13570]",0.5,1645,best_practice,303,Consider logging the error instead of printing,,1628,        oDate:‰∏äÂ∏ÇÊó•Êúü,"[220, 220, 220, 220, 220, 220, 220, 267, 10430, 25, 41468, 30585, 224, 33768, 98, 17312, 253]"
‚úÖ Best Practice: Use of a leading underscore in the function name indicates it's intended for internal use.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 3756, 44810, 287, 262, 2163, 1438, 9217, 340, 338, 5292, 329, 5387, 779, 13]",1.0,1649,best_practice,299,Use of a leading underscore in the function name indicates it's intended for internal use.,,1645,    --------,"[220, 220, 220, 24200]"
‚úÖ Best Practice: Importing only the required function from a module.,"[26486, 227, 6705, 19939, 25, 17267, 278, 691, 262, 2672, 2163, 422, 257, 8265, 13]",0.5,1668,best_practice,301,Importing only the required function from a module.,,1649,        code :ËÇ°Á•®‰ª£Á†Å,"[220, 220, 220, 220, 220, 220, 220, 2438, 1058, 164, 224, 94, 163, 98, 101, 47987, 163, 254, 223]"
‚úÖ Best Practice: Use of exponentiation for calculating powers of 10.,"[26486, 227, 6705, 19939, 25, 5765, 286, 28622, 3920, 329, 26019, 5635, 286, 838, 13]",1.0,1685,best_practice,303,Use of exponentiation for calculating powers of 10.,,1668,        oDate:‰∏äÂ∏ÇÊó•Êúü,"[220, 220, 220, 220, 220, 220, 220, 267, 10430, 25, 41468, 30585, 224, 33768, 98, 17312, 253]"
üß† ML Signal: Use of random number generation.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4738, 1271, 5270, 13]",0.5,1702,ml_signal,303,Use of random number generation.,,1685,        oDate:‰∏äÂ∏ÇÊó•Êúü,"[220, 220, 220, 220, 220, 220, 220, 267, 10430, 25, 41468, 30585, 224, 33768, 98, 17312, 253]"

[
  {
    "line": 1,
    "text": "# -*- coding:utf-8 -*-",
    "annotation": "\ud83e\udde0 ML Signal: Presence of metadata such as author and contact information",
    "confidence": 0.5,
    "tokens": [
      2,
      532,
      9,
      12,
      19617,
      25,
      40477,
      12,
      23,
      532,
      9,
      12
    ],
    "start_token": 0,
    "end_token": 12,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      46523,
      286,
      20150,
      884,
      355,
      1772,
      290,
      2800,
      1321
    ],
    "label": "ml_signal",
    "reason": "Presence of metadata such as author and contact information"
  },
  {
    "line": 10,
    "text": "",
    "annotation": "\u2705 Best Practice: Use docstrings to describe the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 12,
    "end_token": 12,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2205,
      37336,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Use docstrings to describe the function's purpose and parameters"
  },
  {
    "line": 28,
    "text": "      list",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame rows is a common pattern in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      1351
    ],
    "start_token": 12,
    "end_token": 18,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15274,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame rows is a common pattern in data processing"
  },
  {
    "line": 30,
    "text": "    '''",
    "annotation": "\ud83e\udde0 ML Signal: Appending to a list is a common pattern for accumulating results",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      705,
      7061
    ],
    "start_token": 18,
    "end_token": 23,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      257,
      1351,
      318,
      257,
      2219,
      3912,
      329,
      44657,
      2482
    ],
    "label": "ml_signal",
    "reason": "Appending to a list is a common pattern for accumulating results"
  },
  {
    "line": 33,
    "text": "    MA = []",
    "annotation": "\ud83e\udde0 ML Signal: Using a fixed-size list to maintain a moving window",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      8779,
      796,
      17635
    ],
    "start_token": 23,
    "end_token": 29,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8554,
      257,
      5969,
      12,
      7857,
      1351,
      284,
      5529,
      257,
      3867,
      4324
    ],
    "label": "ml_signal",
    "reason": "Using a fixed-size list to maintain a moving window"
  },
  {
    "line": 35,
    "text": "    for index, row in data.iterrows():",
    "annotation": "\ud83e\udde0 ML Signal: Calculating the average of a list is a common statistical operation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      6376,
      11,
      5752,
      287,
      1366,
      13,
      2676,
      8516,
      33529
    ],
    "start_token": 29,
    "end_token": 42,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      262,
      2811,
      286,
      257,
      1351,
      318,
      257,
      2219,
      13905,
      4905
    ],
    "label": "ml_signal",
    "reason": "Calculating the average of a list is a common statistical operation"
  },
  {
    "line": 35,
    "text": "    for index, row in data.iterrows():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Returning a numpy array without checking for empty input data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      6376,
      11,
      5752,
      287,
      1366,
      13,
      2676,
      8516,
      33529
    ],
    "start_token": 42,
    "end_token": 55,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      42882,
      257,
      299,
      32152,
      7177,
      1231,
      10627,
      329,
      6565,
      5128,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Returning a numpy array without checking for empty input data"
  },
  {
    "line": 35,
    "text": "    for index, row in data.iterrows():",
    "annotation": "\u2705 Best Practice: Use docstrings to describe function parameters and return values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      6376,
      11,
      5752,
      287,
      1366,
      13,
      2676,
      8516,
      33529
    ],
    "start_token": 55,
    "end_token": 68,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2205,
      37336,
      284,
      6901,
      2163,
      10007,
      290,
      1441,
      3815
    ],
    "label": "best_practice",
    "reason": "Use docstrings to describe function parameters and return values"
  },
  {
    "line": 53,
    "text": "                  \u901a\u8fc7 get_h_data \u53d6\u5f97\u7684\u80a1\u7968\u6570\u636e",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame rows to compute statistics",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16268,
      222,
      248,
      32573,
      229,
      651,
      62,
      71,
      62,
      7890,
      10263,
      237,
      244,
      36181,
      245,
      21410,
      164,
      224,
      94,
      163,
      98,
      101,
      46763,
      108,
      162,
      235,
      106
    ],
    "start_token": 68,
    "end_token": 112,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15274,
      284,
      24061,
      7869
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame rows to compute statistics"
  },
  {
    "line": 55,
    "text": "                  \u79fb\u52a8\u5e73\u5747\u7ebf\u65f6\u957f\uff0c\u65f6\u95f4\u5355\u4f4d\u6839\u636edata\u51b3\u5b9a",
    "annotation": "\ud83e\udde0 ML Signal: Appending values to a list for rolling computation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13328,
      100,
      119,
      27950,
      101,
      33176,
      111,
      161,
      251,
      229,
      163,
      118,
      123,
      33768,
      114,
      165,
      243,
      123,
      171,
      120,
      234,
      33768,
      114,
      29785,
      112,
      39355,
      243,
      19526,
      235,
      43718,
      117,
      162,
      235,
      106,
      7890,
      37863,
      111,
      22522,
      248
    ],
    "start_token": 112,
    "end_token": 168,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      3815,
      284,
      257,
      1351,
      329,
      10708,
      29964
    ],
    "label": "ml_signal",
    "reason": "Appending values to a list for rolling computation"
  },
  {
    "line": 58,
    "text": "",
    "annotation": "\u2705 Best Practice: Efficiently manage list size for rolling window",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 168,
    "end_token": 168,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      412,
      5632,
      306,
      6687,
      1351,
      2546,
      329,
      10708,
      4324
    ],
    "label": "best_practice",
    "reason": "Efficiently manage list size for rolling window"
  },
  {
    "line": 60,
    "text": "    -------",
    "annotation": "\ud83e\udde0 ML Signal: Calculating standard deviation over a rolling window",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      35656
    ],
    "start_token": 168,
    "end_token": 172,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      3210,
      28833,
      625,
      257,
      10708,
      4324
    ],
    "label": "ml_signal",
    "reason": "Calculating standard deviation over a rolling window"
  },
  {
    "line": 62,
    "text": "          \u79fb\u52a8\u5e73\u5747\u7ebf",
    "annotation": "\u2705 Best Practice: Convert list to numpy array for consistency and performance",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13328,
      100,
      119,
      27950,
      101,
      33176,
      111,
      161,
      251,
      229,
      163,
      118,
      123
    ],
    "start_token": 172,
    "end_token": 194,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      1351,
      284,
      299,
      32152,
      7177,
      329,
      15794,
      290,
      2854
    ],
    "label": "best_practice",
    "reason": "Convert list to numpy array for consistency and performance"
  },
  {
    "line": 59,
    "text": "    return",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441
    ],
    "start_token": 194,
    "end_token": 198,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability"
  },
  {
    "line": 61,
    "text": "      list",
    "annotation": "\u2705 Best Practice: Initialize variables before using them in a loop",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      1351
    ],
    "start_token": 198,
    "end_token": 204,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      878,
      1262,
      606,
      287,
      257,
      9052
    ],
    "label": "best_practice",
    "reason": "Initialize variables before using them in a loop"
  },
  {
    "line": 63,
    "text": "    '''",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over financial data to compute indicators",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      705,
      7061
    ],
    "start_token": 204,
    "end_token": 209,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      3176,
      1366,
      284,
      24061,
      21337
    ],
    "label": "ml_signal",
    "reason": "Iterating over financial data to compute indicators"
  },
  {
    "line": 65,
    "text": "    values = []",
    "annotation": "\ud83e\udde0 ML Signal: Exponential moving average calculation pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      3815,
      796,
      17635
    ],
    "start_token": 209,
    "end_token": 215,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5518,
      35470,
      3867,
      2811,
      17952,
      3912
    ],
    "label": "ml_signal",
    "reason": "Exponential moving average calculation pattern"
  },
  {
    "line": 66,
    "text": "    MD = []",
    "annotation": "\u2705 Best Practice: Use docstrings to describe function parameters and return values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      10670,
      796,
      17635
    ],
    "start_token": 215,
    "end_token": 221,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2205,
      37336,
      284,
      6901,
      2163,
      10007,
      290,
      1441,
      3815
    ],
    "label": "best_practice",
    "reason": "Use docstrings to describe function parameters and return values"
  },
  {
    "line": 83,
    "text": "        day_ema += a ** index * price",
    "annotation": "\u2705 Best Practice: Initialize variables before use",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1110,
      62,
      19687,
      15853,
      257,
      12429,
      6376,
      1635,
      2756
    ],
    "start_token": 221,
    "end_token": 237,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      878,
      779
    ],
    "label": "best_practice",
    "reason": "Initialize variables before use"
  },
  {
    "line": 90,
    "text": "    '''",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if n is set to -1",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      705,
      7061
    ],
    "start_token": 237,
    "end_token": 242,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      299,
      318,
      900,
      284,
      532,
      16
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if n is set to -1"
  },
  {
    "line": 94,
    "text": "          data:pandas.DataFrame",
    "annotation": "\ud83e\udde0 ML Signal: Conversion of list to numpy array, common in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      25,
      79,
      392,
      292,
      13,
      6601,
      19778
    ],
    "start_token": 242,
    "end_token": 259,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      44101,
      286,
      1351,
      284,
      299,
      32152,
      7177,
      11,
      2219,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Conversion of list to numpy array, common in data processing"
  },
  {
    "line": 94,
    "text": "          data:pandas.DataFrame",
    "annotation": "\u2705 Best Practice: Use docstring to describe function parameters and return values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      25,
      79,
      392,
      292,
      13,
      6601,
      19778
    ],
    "start_token": 259,
    "end_token": 276,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2205,
      8841,
      284,
      6901,
      2163,
      10007,
      290,
      1441,
      3815
    ],
    "label": "best_practice",
    "reason": "Use docstring to describe function parameters and return values"
  },
  {
    "line": 118,
    "text": "            past_ema = today_ema",
    "annotation": "\ud83e\udde0 ML Signal: Use of numpy for numerical operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1613,
      62,
      19687,
      796,
      1909,
      62,
      19687
    ],
    "start_token": 276,
    "end_token": 294,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      299,
      32152,
      329,
      29052,
      4560
    ],
    "label": "ml_signal",
    "reason": "Use of numpy for numerical operations"
  },
  {
    "line": 122,
    "text": "    return np.asarray(EMA)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential data mutation by adding a new column to the DataFrame",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      45941,
      13,
      292,
      18747,
      7,
      27630,
      8
    ],
    "start_token": 294,
    "end_token": 305,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      1366,
      15148,
      416,
      4375,
      257,
      649,
      5721,
      284,
      262,
      6060,
      19778
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential data mutation by adding a new column to the DataFrame"
  },
  {
    "line": 126,
    "text": "    import numpy as np",
    "annotation": "\u2705 Best Practice: Use of docstring to describe function parameters and return values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1330,
      299,
      32152,
      355,
      45941
    ],
    "start_token": 305,
    "end_token": 313,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      2163,
      10007,
      290,
      1441,
      3815
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe function parameters and return values"
  },
  {
    "line": 142,
    "text": "        return",
    "annotation": "\u2705 Best Practice: Initialize lists to store computed values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 313,
    "end_token": 321,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      8341,
      284,
      3650,
      29231,
      3815
    ],
    "label": "best_practice",
    "reason": "Initialize lists to store computed values"
  },
  {
    "line": 144,
    "text": "          OSC:numpy.ndarray<numpy.float64>",
    "annotation": "\u2705 Best Practice: Use of None to check for uninitialized variables",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      440,
      6173,
      25,
      77,
      32152,
      13,
      358,
      18747,
      27,
      77,
      32152,
      13,
      22468,
      2414,
      29
    ],
    "start_token": 321,
    "end_token": 345,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      6045,
      284,
      2198,
      329,
      555,
      17532,
      9633
    ],
    "label": "best_practice",
    "reason": "Use of None to check for uninitialized variables"
  },
  {
    "line": 147,
    "text": "              \u5dee\u79bb\u503c",
    "annotation": "\u2705 Best Practice: Initialize last_k and last_d with default values if None",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      10263,
      115,
      106,
      163,
      99,
      119,
      161,
      222,
      120
    ],
    "start_token": 345,
    "end_token": 367,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      938,
      62,
      74,
      290,
      938,
      62,
      67,
      351,
      4277,
      3815,
      611,
      6045
    ],
    "label": "best_practice",
    "reason": "Initialize last_k and last_d with default values if None"
  },
  {
    "line": 151,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Accessing specific columns in a DataFrame",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 367,
    "end_token": 367,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      8798,
      278,
      2176,
      15180,
      287,
      257,
      6060,
      19778
    ],
    "label": "ml_signal",
    "reason": "Accessing specific columns in a DataFrame"
  },
  {
    "line": 153,
    "text": "    ema_slow = np.asarray(ema(data, slow_n, val_name))",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of RSV (Raw Stochastic Value)",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      795,
      64,
      62,
      38246,
      796,
      45941,
      13,
      292,
      18747,
      7,
      19687,
      7,
      7890,
      11,
      3105,
      62,
      77,
      11,
      1188,
      62,
      3672,
      4008
    ],
    "start_token": 367,
    "end_token": 392,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      19340,
      53,
      357,
      27369,
      520,
      5374,
      3477,
      11052,
      8
    ],
    "label": "ml_signal",
    "reason": "Calculation of RSV (Raw Stochastic Value)"
  },
  {
    "line": 155,
    "text": "    data[\"diff\"] = DIFF",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of K, D, J values",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1366,
      14692,
      26069,
      8973,
      796,
      360,
      29267
    ],
    "start_token": 392,
    "end_token": 402,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      509,
      11,
      360,
      11,
      449,
      3815
    ],
    "label": "ml_signal",
    "reason": "Calculation of K, D, J values"
  },
  {
    "line": 159,
    "text": "",
    "annotation": "\u2705 Best Practice: Append computed values to lists",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 402,
    "end_token": 402,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      2034,
      437,
      29231,
      3815,
      284,
      8341
    ],
    "label": "best_practice",
    "reason": "Append computed values to lists"
  },
  {
    "line": 159,
    "text": "",
    "annotation": "\u2705 Best Practice: Update last_k and last_d for next iteration",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 402,
    "end_token": 402,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      10133,
      938,
      62,
      74,
      290,
      938,
      62,
      67,
      329,
      1306,
      24415
    ],
    "label": "best_practice",
    "reason": "Update last_k and last_d for next iteration"
  },
  {
    "line": 159,
    "text": "",
    "annotation": "\u2705 Best Practice: Convert lists to numpy arrays before returning",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 402,
    "end_token": 402,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      38240,
      8341,
      284,
      299,
      32152,
      26515,
      878,
      8024
    ],
    "label": "best_practice",
    "reason": "Convert lists to numpy arrays before returning"
  },
  {
    "line": 159,
    "text": "",
    "annotation": "\u2705 Best Practice: Use docstrings to describe the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 402,
    "end_token": 402,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2205,
      37336,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Use docstrings to describe the function's purpose and parameters"
  },
  {
    "line": 213,
    "text": "                \u7edf\u8ba1\u65f6\u957f\uff0c\u65f6\u95f4\u5355\u4f4d\u6839\u636edata\u51b3\u5b9a",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names for readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      13328,
      119,
      253,
      164,
      106,
      94,
      33768,
      114,
      165,
      243,
      123,
      171,
      120,
      234,
      33768,
      114,
      29785,
      112,
      39355,
      243,
      19526,
      235,
      43718,
      117,
      162,
      235,
      106,
      7890,
      37863,
      111,
      22522,
      248
    ],
    "start_token": 402,
    "end_token": 449,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names for readability"
  },
  {
    "line": 215,
    "text": "        -------",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names for readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 449,
    "end_token": 457,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names for readability"
  },
  {
    "line": 217,
    "text": "              RSI\u7ebf",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names for readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      371,
      11584,
      163,
      118,
      123
    ],
    "start_token": 457,
    "end_token": 475,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names for readability"
  },
  {
    "line": 219,
    "text": "    '''",
    "annotation": "\u2705 Best Practice: Use of descriptive variable names for readability",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      705,
      7061
    ],
    "start_token": 475,
    "end_token": 480,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      35644,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use of descriptive variable names for readability"
  },
  {
    "line": 219,
    "text": "    '''",
    "annotation": "\u2705 Best Practice: Returning multiple values as a tuple for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      705,
      7061
    ],
    "start_token": 480,
    "end_token": 485,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      3294,
      3815,
      355,
      257,
      46545,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Returning multiple values as a tuple for clarity"
  },
  {
    "line": 232,
    "text": "                DOWN.append(0)",
    "annotation": "\u2705 Best Practice: Initialize lists outside of the loop to avoid reinitialization on each iteration",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      30320,
      13,
      33295,
      7,
      15,
      8
    ],
    "start_token": 485,
    "end_token": 506,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      8341,
      2354,
      286,
      262,
      9052,
      284,
      3368,
      6865,
      6847,
      1634,
      319,
      1123,
      24415
    ],
    "label": "best_practice",
    "reason": "Initialize lists outside of the loop to avoid reinitialization on each iteration"
  },
  {
    "line": 236,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame rows is a common pattern in data processing",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 506,
    "end_token": 506,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15274,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame rows is a common pattern in data processing"
  },
  {
    "line": 238,
    "text": "                del UP[0]",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for clarity",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1619,
      15958,
      58,
      15,
      60
    ],
    "start_token": 506,
    "end_token": 526,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for clarity"
  },
  {
    "line": 240,
    "text": "                del DOWN[0]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for list to grow indefinitely if 'n' is not reached",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1619,
      30320,
      58,
      15,
      60
    ],
    "start_token": 526,
    "end_token": 546,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      1351,
      284,
      1663,
      24391,
      611,
      705,
      77,
      6,
      318,
      407,
      4251
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for list to grow indefinitely if 'n' is not reached"
  },
  {
    "line": 244,
    "text": "            rsi = np.sum(UP) / (-np.sum(DOWN) + np.sum(UP)) * 100",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential for list to grow indefinitely if 'n' is not reached",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      374,
      13396,
      796,
      45941,
      13,
      16345,
      7,
      8577,
      8,
      1220,
      13841,
      37659,
      13,
      16345,
      7,
      41925,
      8,
      1343,
      45941,
      13,
      16345,
      7,
      8577,
      4008,
      1635,
      1802
    ],
    "start_token": 546,
    "end_token": 583,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      329,
      1351,
      284,
      1663,
      24391,
      611,
      705,
      77,
      6,
      318,
      407,
      4251
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential for list to grow indefinitely if 'n' is not reached"
  },
  {
    "line": 247,
    "text": "    return np.asarray(RSI)",
    "annotation": "\u2705 Best Practice: Use built-in functions like max() and min() for clarity and efficiency",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      45941,
      13,
      292,
      18747,
      7,
      6998,
      40,
      8
    ],
    "start_token": 583,
    "end_token": 595,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      3170,
      12,
      259,
      5499,
      588,
      3509,
      3419,
      290,
      949,
      3419,
      329,
      16287,
      290,
      9332
    ],
    "label": "best_practice",
    "reason": "Use built-in functions like max() and min() for clarity and efficiency"
  },
  {
    "line": 250,
    "text": "def boll(data, n=10, val_name=\"close\", k=2):",
    "annotation": "\ud83e\udde0 ML Signal: Calculation of financial indicators is a common pattern in financial data analysis",
    "confidence": 0.5,
    "tokens": [
      4299,
      275,
      692,
      7,
      7890,
      11,
      299,
      28,
      940,
      11,
      1188,
      62,
      3672,
      2625,
      19836,
      1600,
      479,
      28,
      17,
      2599
    ],
    "start_token": 595,
    "end_token": 615,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2199,
      14902,
      286,
      3176,
      21337,
      318,
      257,
      2219,
      3912,
      287,
      3176,
      1366,
      3781
    ],
    "label": "ml_signal",
    "reason": "Calculation of financial indicators is a common pattern in financial data analysis"
  },
  {
    "line": 253,
    "text": "        Parameters",
    "annotation": "\u2705 Best Practice: Return the result at the end of the function for clarity",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40117
    ],
    "start_token": 615,
    "end_token": 623,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      262,
      1255,
      379,
      262,
      886,
      286,
      262,
      2163,
      329,
      16287
    ],
    "label": "best_practice",
    "reason": "Return the result at the end of the function for clarity"
  },
  {
    "line": 249,
    "text": "",
    "annotation": "\u2705 Best Practice: Use lowercase variable names for lists to follow PEP 8 naming conventions",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 623,
    "end_token": 623,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2793,
      7442,
      7885,
      3891,
      329,
      8341,
      284,
      1061,
      350,
      8905,
      807,
      19264,
      21396
    ],
    "label": "best_practice",
    "reason": "Use lowercase variable names for lists to follow PEP 8 naming conventions"
  },
  {
    "line": 251,
    "text": "    '''",
    "annotation": "\u2705 Best Practice: Use lowercase variable names for lists to follow PEP 8 naming conventions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      705,
      7061
    ],
    "start_token": 623,
    "end_token": 628,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2793,
      7442,
      7885,
      3891,
      329,
      8341,
      284,
      1061,
      350,
      8905,
      807,
      19264,
      21396
    ],
    "label": "best_practice",
    "reason": "Use lowercase variable names for lists to follow PEP 8 naming conventions"
  },
  {
    "line": 254,
    "text": "        ------",
    "annotation": "\ud83e\udde0 ML Signal: Appending to a list in a loop is a common pattern in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      40103
    ],
    "start_token": 628,
    "end_token": 636,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      257,
      1351,
      287,
      257,
      9052,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Appending to a list in a loop is a common pattern in data processing"
  },
  {
    "line": 257,
    "text": "          n:int",
    "annotation": "\u2705 Best Practice: Use deque for efficient pop from the left instead of list",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      299,
      25,
      600
    ],
    "start_token": 636,
    "end_token": 648,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      390,
      4188,
      329,
      6942,
      1461,
      422,
      262,
      1364,
      2427,
      286,
      1351
    ],
    "label": "best_practice",
    "reason": "Use deque for efficient pop from the left instead of list"
  },
  {
    "line": 259,
    "text": "        return",
    "annotation": "\ud83e\udde0 ML Signal: Calculating moving average is a common pattern in time series analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 648,
    "end_token": 656,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      3867,
      2811,
      318,
      257,
      2219,
      3912,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Calculating moving average is a common pattern in time series analysis"
  },
  {
    "line": 259,
    "text": "        return",
    "annotation": "\ud83e\udde0 ML Signal: Converting list to numpy array is a common pattern for numerical computations",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 656,
    "end_token": 664,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      35602,
      889,
      1351,
      284,
      299,
      32152,
      7177,
      318,
      257,
      2219,
      3912,
      329,
      29052,
      2653,
      602
    ],
    "label": "ml_signal",
    "reason": "Converting list to numpy array is a common pattern for numerical computations"
  },
  {
    "line": 259,
    "text": "        return",
    "annotation": "\u2705 Best Practice: Use of docstring to describe function parameters and return values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1441
    ],
    "start_token": 664,
    "end_token": 672,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      2163,
      10007,
      290,
      1441,
      3815
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe function parameters and return values"
  },
  {
    "line": 335,
    "text": "          data:pandas.DataFrame",
    "annotation": "\u2705 Best Practice: Use docstring to describe function parameters and return values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      25,
      79,
      392,
      292,
      13,
      6601,
      19778
    ],
    "start_token": 672,
    "end_token": 689,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2205,
      8841,
      284,
      6901,
      2163,
      10007,
      290,
      1441,
      3815
    ],
    "label": "best_practice",
    "reason": "Use docstring to describe function parameters and return values"
  },
  {
    "line": 349,
    "text": "              -DI\u6307\u6807",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'ma' function is defined and handles edge cases",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      532,
      17931,
      162,
      234,
      229,
      43718,
      229
    ],
    "start_token": 689,
    "end_token": 709,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      2611,
      6,
      2163,
      318,
      5447,
      290,
      17105,
      5743,
      2663
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'ma' function is defined and handles edge cases"
  },
  {
    "line": 351,
    "text": "              ADX\u6307\u6807",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure 'data' contains 'close' column to avoid KeyError",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5984,
      55,
      162,
      234,
      229,
      43718,
      229
    ],
    "start_token": 709,
    "end_token": 729,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      705,
      7890,
      6,
      4909,
      705,
      19836,
      6,
      5721,
      284,
      3368,
      7383,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure 'data' contains 'close' column to avoid KeyError"
  },
  {
    "line": 353,
    "text": "              ADXR\u6307\u6807",
    "annotation": "\ud83e\udde0 ML Signal: Usage of numpy for numerical operations",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      5984,
      55,
      49,
      162,
      234,
      229,
      43718,
      229
    ],
    "start_token": 729,
    "end_token": 750,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      299,
      32152,
      329,
      29052,
      4560
    ],
    "label": "ml_signal",
    "reason": "Usage of numpy for numerical operations"
  },
  {
    "line": 354,
    "text": "        ref.",
    "annotation": "\u2705 Best Practice: Use of docstring to describe function parameters and return values",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1006,
      13
    ],
    "start_token": 750,
    "end_token": 759,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      2163,
      10007,
      290,
      1441,
      3815
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe function parameters and return values"
  },
  {
    "line": 369,
    "text": "    M_DI = [0.]",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame rows, common pattern in data processing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      337,
      62,
      17931,
      796,
      685,
      15,
      8183
    ],
    "start_token": 759,
    "end_token": 769,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15274,
      11,
      2219,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame rows, common pattern in data processing"
  },
  {
    "line": 390,
    "text": "            tr = max(row[\"high\"] - past_row[\"low\"], row[\"high\"] - past_row[\"close\"], past_row[\"close\"] - row[\"low\"])",
    "annotation": "\u2705 Best Practice: Use of np.isclose for floating-point comparison",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      491,
      796,
      3509,
      7,
      808,
      14692,
      8929,
      8973,
      532,
      1613,
      62,
      808,
      14692,
      9319,
      33116,
      5752,
      14692,
      8929,
      8973,
      532,
      1613,
      62,
      808,
      14692,
      19836,
      33116,
      1613,
      62,
      808,
      14692,
      19836,
      8973,
      532,
      5752,
      14692,
      9319,
      8973,
      8
    ],
    "start_token": 769,
    "end_token": 818,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      45941,
      13,
      271,
      19836,
      329,
      12462,
      12,
      4122,
      7208
    ],
    "label": "best_practice",
    "reason": "Use of np.isclose for floating-point comparison"
  },
  {
    "line": 397,
    "text": "            if len(TR) == n:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): _get_any_ma function is used but not defined in the provided code",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      5446,
      8,
      6624,
      299,
      25
    ],
    "start_token": 818,
    "end_token": 837,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4808,
      1136,
      62,
      1092,
      62,
      2611,
      2163,
      318,
      973,
      475,
      407,
      5447,
      287,
      262,
      2810,
      2438
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "_get_any_ma function is used but not defined in the provided code"
  },
  {
    "line": 398,
    "text": "                del TR[0]",
    "annotation": "\u2705 Best Practice: Use docstring to describe function purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1619,
      7579,
      58,
      15,
      60
    ],
    "start_token": 837,
    "end_token": 857,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2205,
      8841,
      284,
      6901,
      2163,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Use docstring to describe function purpose and parameters"
  },
  {
    "line": 415,
    "text": "            # \u3000\u3000di sum\u4e3a\u4e0a\u5347\u6307\u6807\u548c\u4e0b\u964d\u6307\u6807\u7684\u603b\u548c",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame rows to calculate metrics",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1303,
      220,
      5099,
      222,
      5099,
      222,
      10989,
      2160,
      10310,
      118,
      41468,
      39355,
      229,
      162,
      234,
      229,
      43718,
      229,
      161,
      240,
      234,
      10310,
      233,
      165,
      247,
      235,
      162,
      234,
      229,
      43718,
      229,
      21410,
      45250,
      119,
      161,
      240,
      234
    ],
    "start_token": 857,
    "end_token": 905,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15274,
      284,
      15284,
      20731
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame rows to calculate metrics"
  },
  {
    "line": 437,
    "text": "",
    "annotation": "\u2705 Best Practice: Use docstrings to describe the function's purpose and parameters",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 905,
    "end_token": 905,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      2205,
      37336,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Use docstrings to describe the function's purpose and parameters"
  },
  {
    "line": 453,
    "text": "",
    "annotation": "\u2705 Best Practice: Initialize variables with default values",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 905,
    "end_token": 905,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      20768,
      1096,
      9633,
      351,
      4277,
      3815
    ],
    "label": "best_practice",
    "reason": "Initialize variables with default values"
  },
  {
    "line": 461,
    "text": "",
    "annotation": "\u2705 Best Practice: Use numpy for efficient array operations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 905,
    "end_token": 905,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      299,
      32152,
      329,
      6942,
      7177,
      4560
    ],
    "label": "best_practice",
    "reason": "Use numpy for efficient array operations"
  },
  {
    "line": 477,
    "text": "    '''",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if O equals L",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      705,
      7061
    ],
    "start_token": 905,
    "end_token": 910,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      440,
      21767,
      406
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if O equals L"
  },
  {
    "line": 480,
    "text": "    for index, row in data.iterrows():",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if PC equals L",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      6376,
      11,
      5752,
      287,
      1366,
      13,
      2676,
      8516,
      33529
    ],
    "start_token": 910,
    "end_token": 923,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      4217,
      21767,
      406
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if PC equals L"
  },
  {
    "line": 481,
    "text": "        if index == 0:",
    "annotation": "\u2705 Best Practice: Return values as numpy arrays for consistency",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      6376,
      6624,
      657,
      25
    ],
    "start_token": 923,
    "end_token": 935,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8229,
      3815,
      355,
      299,
      32152,
      26515,
      329,
      15794
    ],
    "label": "best_practice",
    "reason": "Return values as numpy arrays for consistency"
  },
  {
    "line": 480,
    "text": "    for index, row in data.iterrows():",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with default parameters, useful for learning API usage patterns",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      329,
      6376,
      11,
      5752,
      287,
      1366,
      13,
      2676,
      8516,
      33529
    ],
    "start_token": 935,
    "end_token": 948,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      4277,
      10007,
      11,
      4465,
      329,
      4673,
      7824,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Function definition with default parameters, useful for learning API usage patterns"
  },
  {
    "line": 499,
    "text": "            f = row[\"close\"] - last_row[\"open\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Assumes 'close' column exists in the DataFrame, potential KeyError",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      277,
      796,
      5752,
      14692,
      19836,
      8973,
      532,
      938,
      62,
      808,
      14692,
      9654,
      8973
    ],
    "start_token": 948,
    "end_token": 972,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      2195,
      8139,
      705,
      19836,
      6,
      5721,
      7160,
      287,
      262,
      6060,
      19778,
      11,
      2785,
      7383,
      12331
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Assumes 'close' column exists in the DataFrame, potential KeyError"
  },
  {
    "line": 501,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Use of moving average function, common in financial data analysis",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 972,
    "end_token": 972,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      3867,
      2811,
      2163,
      11,
      2219,
      287,
      3176,
      1366,
      3781
    ],
    "label": "ml_signal",
    "reason": "Use of moving average function, common in financial data analysis"
  },
  {
    "line": 503,
    "text": "            k = max(a, b)",
    "annotation": "\ud83e\udde0 ML Signal: Use of custom moving average function, indicates custom financial analysis logic",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      479,
      796,
      3509,
      7,
      64,
      11,
      275,
      8
    ],
    "start_token": 972,
    "end_token": 991,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      5765,
      286,
      2183,
      3867,
      2811,
      2163,
      11,
      9217,
      2183,
      3176,
      3781,
      9156
    ],
    "label": "ml_signal",
    "reason": "Use of custom moving average function, indicates custom financial analysis logic"
  },
  {
    "line": 504,
    "text": "            l = 3",
    "annotation": "\u2705 Best Practice: Returning multiple values as a tuple, clear and concise",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      300,
      796,
      513
    ],
    "start_token": 991,
    "end_token": 1005,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      42882,
      3294,
      3815,
      355,
      257,
      46545,
      11,
      1598,
      290,
      35327
    ],
    "label": "best_practice",
    "reason": "Returning multiple values as a tuple, clear and concise"
  },
  {
    "line": 502,
    "text": "            x = e + (1 / 2) * f + g",
    "annotation": "\u2705 Best Practice: Import statements should be at the top of the file for better readability and maintainability.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2124,
      796,
      304,
      1343,
      357,
      16,
      1220,
      362,
      8,
      1635,
      277,
      1343,
      308
    ],
    "start_token": 1005,
    "end_token": 1029,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      17267,
      6299,
      815,
      307,
      379,
      262,
      1353,
      286,
      262,
      2393,
      329,
      1365,
      1100,
      1799,
      290,
      5529,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Import statements should be at the top of the file for better readability and maintainability."
  },
  {
    "line": 504,
    "text": "            l = 3",
    "annotation": "\u2705 Best Practice: Docstring should be at the beginning of the function for better readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      300,
      796,
      513
    ],
    "start_token": 1029,
    "end_token": 1043,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      14432,
      8841,
      815,
      307,
      379,
      262,
      3726,
      286,
      262,
      2163,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Docstring should be at the beginning of the function for better readability."
  },
  {
    "line": 536,
    "text": "    for index, row in data.iterrows():",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): The function _get_any_ma is used but not defined in the code, which could lead to potential security risks if it is not properly implemented.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      329,
      6376,
      11,
      5752,
      287,
      1366,
      13,
      2676,
      8516,
      33529
    ],
    "start_token": 1043,
    "end_token": 1056,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      383,
      2163,
      4808,
      1136,
      62,
      1092,
      62,
      2611,
      318,
      973,
      475,
      407,
      5447,
      287,
      262,
      2438,
      11,
      543,
      714,
      1085,
      284,
      2785,
      2324,
      7476,
      611,
      340,
      318,
      407,
      6105,
      9177,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "The function _get_any_ma is used but not defined in the code, which could lead to potential security risks if it is not properly implemented."
  },
  {
    "line": 538,
    "text": "        if row[\"close\"] > row[\"open\"]:",
    "annotation": "\u2705 Best Practice: Use triple double quotes for docstrings to maintain consistency with PEP 257.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      5752,
      14692,
      19836,
      8973,
      1875,
      5752,
      14692,
      9654,
      1,
      5974
    ],
    "start_token": 1056,
    "end_token": 1074,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      15055,
      4274,
      13386,
      329,
      2205,
      37336,
      284,
      5529,
      15794,
      351,
      350,
      8905,
      36100,
      13
    ],
    "label": "best_practice",
    "reason": "Use triple double quotes for docstrings to maintain consistency with PEP 257."
  },
  {
    "line": 552,
    "text": "        avs = sum(AV_volumes)",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame rows is a common pattern in data processing tasks.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1196,
      82,
      796,
      2160,
      7,
      10116,
      62,
      10396,
      8139,
      8
    ],
    "start_token": 1074,
    "end_token": 1091,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15274,
      318,
      257,
      2219,
      3912,
      287,
      1366,
      7587,
      8861,
      13
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame rows is a common pattern in data processing tasks."
  },
  {
    "line": 554,
    "text": "        cvs = sum(CV_volumes)",
    "annotation": "\ud83e\udde0 ML Signal: Appending to a list in a loop is a common pattern for accumulating results.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      269,
      14259,
      796,
      2160,
      7,
      33538,
      62,
      10396,
      8139,
      8
    ],
    "start_token": 1091,
    "end_token": 1108,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      2034,
      1571,
      284,
      257,
      1351,
      287,
      257,
      9052,
      318,
      257,
      2219,
      3912,
      329,
      44657,
      2482,
      13
    ],
    "label": "ml_signal",
    "reason": "Appending to a list in a loop is a common pattern for accumulating results."
  },
  {
    "line": 559,
    "text": "            vr = 0",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for better readability.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      410,
      81,
      796,
      657
    ],
    "start_token": 1108,
    "end_token": 1123,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1365,
      1100,
      1799,
      13
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for better readability."
  },
  {
    "line": 561,
    "text": "        VR.append(vr)",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that the input data is validated to prevent potential issues with unexpected data types.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6453,
      13,
      33295,
      7,
      37020,
      8
    ],
    "start_token": 1123,
    "end_token": 1136,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      262,
      5128,
      1366,
      318,
      31031,
      284,
      2948,
      2785,
      2428,
      351,
      10059,
      1366,
      3858,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that the input data is validated to prevent potential issues with unexpected data types."
  },
  {
    "line": 561,
    "text": "        VR.append(vr)",
    "annotation": "\u2705 Best Practice: Use of docstring to describe function purpose and parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6453,
      13,
      33295,
      7,
      37020,
      8
    ],
    "start_token": 1136,
    "end_token": 1149,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      286,
      2205,
      8841,
      284,
      6901,
      2163,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Use of docstring to describe function purpose and parameters"
  },
  {
    "line": 578,
    "text": "        -------",
    "annotation": "\ud83e\udde0 ML Signal: Iterating over DataFrame rows, common pattern in data processing",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      35656
    ],
    "start_token": 1149,
    "end_token": 1157,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      40806,
      803,
      625,
      6060,
      19778,
      15274,
      11,
      2219,
      3912,
      287,
      1366,
      7587
    ],
    "label": "ml_signal",
    "reason": "Iterating over DataFrame rows, common pattern in data processing"
  },
  {
    "line": 586,
    "text": "    H, L, O, PC = np.array([0]), np.array([0]), np.array([0]), np.array([0])",
    "annotation": "\u2705 Best Practice: Use a docstring to describe the function's purpose and parameters",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      367,
      11,
      406,
      11,
      440,
      11,
      4217,
      796,
      45941,
      13,
      18747,
      26933,
      15,
      46570,
      45941,
      13,
      18747,
      26933,
      15,
      46570,
      45941,
      13,
      18747,
      26933,
      15,
      46570,
      45941,
      13,
      18747,
      26933,
      15,
      12962
    ],
    "start_token": 1157,
    "end_token": 1192,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      2163,
      338,
      4007,
      290,
      10007
    ],
    "label": "best_practice",
    "reason": "Use a docstring to describe the function's purpose and parameters"
  },
  {
    "line": 598,
    "text": "            if len(H) == n:",
    "annotation": "\u2705 Best Practice: Use descriptive variable names for readability",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      39,
      8,
      6624,
      299,
      25
    ],
    "start_token": 1192,
    "end_token": 1211,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      35644,
      7885,
      3891,
      329,
      1100,
      1799
    ],
    "label": "best_practice",
    "reason": "Use descriptive variable names for readability"
  },
  {
    "line": 600,
    "text": "            l = row[\"low\"]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero if (data[\"high\"] - data[\"low\"]) is zero",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      300,
      796,
      5752,
      14692,
      9319,
      8973
    ],
    "start_token": 1211,
    "end_token": 1228,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632,
      611,
      357,
      7890,
      14692,
      8929,
      8973,
      532,
      1366,
      14692,
      9319,
      8973,
      8,
      318,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero if (data[\"high\"] - data[\"low\"]) is zero"
  },
  {
    "line": 602,
    "text": "            if len(L) == n:",
    "annotation": "\ud83e\udde0 ML Signal: Returns a computed financial indicator which could be used in ML models for stock prediction",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      43,
      8,
      6624,
      299,
      25
    ],
    "start_token": 1228,
    "end_token": 1247,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      16409,
      257,
      29231,
      3176,
      16916,
      543,
      714,
      307,
      973,
      287,
      10373,
      4981,
      329,
      4283,
      17724
    ],
    "label": "ml_signal",
    "reason": "Returns a computed financial indicator which could be used in ML models for stock prediction"
  },
  {
    "line": 600,
    "text": "            l = row[\"low\"]",
    "annotation": "\u2705 Best Practice: Function definition with parameters, even if not implemented, indicates planned functionality",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      300,
      796,
      5752,
      14692,
      9319,
      8973
    ],
    "start_token": 1247,
    "end_token": 1264,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      15553,
      6770,
      351,
      10007,
      11,
      772,
      611,
      407,
      9177,
      11,
      9217,
      6027,
      11244
    ],
    "label": "best_practice",
    "reason": "Function definition with parameters, even if not implemented, indicates planned functionality"
  },
  {
    "line": 602,
    "text": "            if len(L) == n:",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Raising a generic exception without specific error handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      43,
      8,
      6624,
      299,
      25
    ],
    "start_token": 1264,
    "end_token": 1283,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      7567,
      1710,
      257,
      14276,
      6631,
      1231,
      2176,
      4049,
      9041
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Raising a generic exception without specific error handling"
  },
  {
    "line": 606,
    "text": "            if len(O) == n:",
    "annotation": "\u2705 Best Practice: Set figure size for consistent plot dimensions",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      46,
      8,
      6624,
      299,
      25
    ],
    "start_token": 1283,
    "end_token": 1302,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5345,
      3785,
      2546,
      329,
      6414,
      7110,
      15225
    ],
    "label": "best_practice",
    "reason": "Set figure size for consistent plot dimensions"
  },
  {
    "line": 610,
    "text": "            if len(PC) == n:",
    "annotation": "\ud83e\udde0 ML Signal: Plotting time series data, useful for trend analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      18896,
      7,
      5662,
      8,
      6624,
      299,
      25
    ],
    "start_token": 1302,
    "end_token": 1321,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      28114,
      889,
      640,
      2168,
      1366,
      11,
      4465,
      329,
      5182,
      3781
    ],
    "label": "ml_signal",
    "reason": "Plotting time series data, useful for trend analysis"
  },
  {
    "line": 617,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculating moving average, a common feature in time series analysis",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1321,
    "end_token": 1321,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      3867,
      2811,
      11,
      257,
      2219,
      3895,
      287,
      640,
      2168,
      3781
    ],
    "label": "ml_signal",
    "reason": "Calculating moving average, a common feature in time series analysis"
  },
  {
    "line": 628,
    "text": "          data:pandas.DataFrame",
    "annotation": "\ud83e\udde0 ML Signal: Calculating moving deviation, useful for volatility analysis",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      25,
      79,
      392,
      292,
      13,
      6601,
      19778
    ],
    "start_token": 1321,
    "end_token": 1338,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      3867,
      28833,
      11,
      4465,
      329,
      30772,
      3781
    ],
    "label": "ml_signal",
    "reason": "Calculating moving deviation, useful for volatility analysis"
  },
  {
    "line": 637,
    "text": "              DPO\u6307\u6807",
    "annotation": "\ud83e\udde0 ML Signal: Calculating exponential moving average, useful for smoothing data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      360,
      16402,
      162,
      234,
      229,
      43718,
      229
    ],
    "start_token": 1338,
    "end_token": 1358,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      39682,
      3867,
      2811,
      11,
      4465,
      329,
      32746,
      722,
      1366
    ],
    "label": "ml_signal",
    "reason": "Calculating exponential moving average, useful for smoothing data"
  },
  {
    "line": 646,
    "text": "    return DPO, MADPO",
    "annotation": "\ud83e\udde0 ML Signal: Calculating MACD, a momentum indicator",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1441,
      360,
      16402,
      11,
      45878,
      16402
    ],
    "start_token": 1358,
    "end_token": 1367,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      20582,
      35,
      11,
      257,
      12858,
      16916
    ],
    "label": "ml_signal",
    "reason": "Calculating MACD, a momentum indicator"
  },
  {
    "line": 657,
    "text": "                      \u901a\u8fc7 get_h_data \u53d6\u5f97\u7684\u80a1\u7968\u6570\u636e",
    "annotation": "\ud83e\udde0 ML Signal: Calculating KDJ, a stochastic indicator",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16268,
      222,
      248,
      32573,
      229,
      651,
      62,
      71,
      62,
      7890,
      10263,
      237,
      244,
      36181,
      245,
      21410,
      164,
      224,
      94,
      163,
      98,
      101,
      46763,
      108,
      162,
      235,
      106
    ],
    "start_token": 1367,
    "end_token": 1415,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      509,
      35028,
      11,
      257,
      3995,
      354,
      3477,
      16916
    ],
    "label": "ml_signal",
    "reason": "Calculating KDJ, a stochastic indicator"
  },
  {
    "line": 668,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculating RSI, a momentum oscillator",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1415,
    "end_token": 1415,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      371,
      11584,
      11,
      257,
      12858,
      24969,
      1352
    ],
    "label": "ml_signal",
    "reason": "Calculating RSI, a momentum oscillator"
  },
  {
    "line": 681,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculating Bollinger Bands, useful for volatility analysis",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1415,
    "end_token": 1415,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      43479,
      3889,
      347,
      1746,
      11,
      4465,
      329,
      30772,
      3781
    ],
    "label": "ml_signal",
    "reason": "Calculating Bollinger Bands, useful for volatility analysis"
  },
  {
    "line": 693,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculating Williams %R, a momentum indicator",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1415,
    "end_token": 1415,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      6484,
      4064,
      49,
      11,
      257,
      12858,
      16916
    ],
    "label": "ml_signal",
    "reason": "Calculating Williams %R, a momentum indicator"
  },
  {
    "line": 702,
    "text": "          data:pandas.DataFrame",
    "annotation": "\ud83e\udde0 ML Signal: Calculating DMI, a directional movement indicator",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      25,
      79,
      392,
      292,
      13,
      6601,
      19778
    ],
    "start_token": 1415,
    "end_token": 1432,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      360,
      8895,
      11,
      257,
      47424,
      3356,
      16916
    ],
    "label": "ml_signal",
    "reason": "Calculating DMI, a directional movement indicator"
  },
  {
    "line": 714,
    "text": "        CS.append(row[\"close\"])",
    "annotation": "\ud83e\udde0 ML Signal: Calculating BIAS, a bias indicator",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      9429,
      13,
      33295,
      7,
      808,
      14692,
      19836,
      8973,
      8
    ],
    "start_token": 1432,
    "end_token": 1448,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      20068,
      1921,
      11,
      257,
      10690,
      16916
    ],
    "label": "ml_signal",
    "reason": "Calculating BIAS, a bias indicator"
  },
  {
    "line": 723,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculating ASI, an accumulation swing index",
    "confidence": 0.5,
    "tokens": [],
    "start_token": 1448,
    "end_token": 1448,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      7054,
      40,
      11,
      281,
      24106,
      9628,
      6376
    ],
    "label": "ml_signal",
    "reason": "Calculating ASI, an accumulation swing index"
  },
  {
    "line": 732,
    "text": "                      \u901a\u8fc7 get_h_data \u53d6\u5f97\u7684\u80a1\u7968\u6570\u636e",
    "annotation": "\ud83e\udde0 ML Signal: Calculating VR, a volume ratio indicator",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      16268,
      222,
      248,
      32573,
      229,
      651,
      62,
      71,
      62,
      7890,
      10263,
      237,
      244,
      36181,
      245,
      21410,
      164,
      224,
      94,
      163,
      98,
      101,
      46763,
      108,
      162,
      235,
      106
    ],
    "start_token": 1448,
    "end_token": 1496,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      6453,
      11,
      257,
      6115,
      8064,
      16916
    ],
    "label": "ml_signal",
    "reason": "Calculating VR, a volume ratio indicator"
  },
  {
    "line": 741,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Calculating ARBR, an arbitrage indicator",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 1496,
    "end_token": 1496,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      5923,
      11473,
      11,
      281,
      9277,
      8394,
      16916
    ],
    "label": "ml_signal",
    "reason": "Calculating ARBR, an arbitrage indicator"
  },
  {
    "line": 751,
    "text": "    return np.asarray(MTM)",
    "annotation": "\ud83e\udde0 ML Signal: Calculating DPO, a detrended price oscillator",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      1441,
      45941,
      13,
      292,
      18747,
      7,
      13752,
      44,
      8
    ],
    "start_token": 1496,
    "end_token": 1508,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      360,
      16402,
      11,
      257,
      1062,
      10920,
      276,
      2756,
      24969,
      1352
    ],
    "label": "ml_signal",
    "reason": "Calculating DPO, a detrended price oscillator"
  },
  {
    "line": 761,
    "text": "          data:pandas.DataFrame",
    "annotation": "\ud83e\udde0 ML Signal: Calculating TRIX, a triple exponential average",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      1366,
      25,
      79,
      392,
      292,
      13,
      6601,
      19778
    ],
    "start_token": 1508,
    "end_token": 1525,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      37679,
      55,
      11,
      257,
      15055,
      39682,
      2811
    ],
    "label": "ml_signal",
    "reason": "Calculating TRIX, a triple exponential average"
  },
  {
    "line": 771,
    "text": "    OBV = tmp * data[\"volume\"]",
    "annotation": "\ud83e\udde0 ML Signal: Calculating BBI, a bull bear index",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      25334,
      53,
      796,
      45218,
      1635,
      1366,
      14692,
      29048,
      8973
    ],
    "start_token": 1525,
    "end_token": 1537,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      347,
      3483,
      11,
      257,
      6473,
      6842,
      6376
    ],
    "label": "ml_signal",
    "reason": "Calculating BBI, a bull bear index"
  },
  {
    "line": 780,
    "text": "    import matplotlib.pyplot as plt",
    "annotation": "\ud83e\udde0 ML Signal: Calculating MTM, a momentum indicator",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      1330,
      2603,
      29487,
      8019,
      13,
      9078,
      29487,
      355,
      458,
      83
    ],
    "start_token": 1537,
    "end_token": 1550,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      337,
      15972,
      11,
      257,
      12858,
      16916
    ],
    "label": "ml_signal",
    "reason": "Calculating MTM, a momentum indicator"
  },
  {
    "line": 781,
    "text": "    from pylab import rcParams",
    "annotation": "\ud83e\udde0 ML Signal: Calculating OBV, an on-balance volume indicator",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      422,
      279,
      2645,
      397,
      1330,
      48321,
      10044,
      4105
    ],
    "start_token": 1550,
    "end_token": 1561,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      27131,
      803,
      25334,
      53,
      11,
      281,
      319,
      12,
      20427,
      6115,
      16916
    ],
    "label": "ml_signal",
    "reason": "Calculating OBV, an on-balance volume indicator"
  },
  {
    "line": 781,
    "text": "    from pylab import rcParams",
    "annotation": "\u2705 Best Practice: Use tight_layout to prevent overlap of subplots",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      422,
      279,
      2645,
      397,
      1330,
      48321,
      10044,
      4105
    ],
    "start_token": 1561,
    "end_token": 1572,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      5381,
      62,
      39786,
      284,
      2948,
      21721,
      286,
      850,
      489,
      1747
    ],
    "label": "best_practice",
    "reason": "Use tight_layout to prevent overlap of subplots"
  },
  {
    "line": 781,
    "text": "    from pylab import rcParams",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure the output path is validated to prevent path traversal",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      422,
      279,
      2645,
      397,
      1330,
      48321,
      10044,
      4105
    ],
    "start_token": 1572,
    "end_token": 1583,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      262,
      5072,
      3108,
      318,
      31031,
      284,
      2948,
      3108,
      33038,
      282
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure the output path is validated to prevent path traversal"
  }
]
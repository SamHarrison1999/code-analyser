[
  {
    "line": 9,
    "text": "@contact: jimmysoa@sina.cn",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      31,
      32057,
      25,
      474,
      320,
      1820,
      568,
      64,
      31,
      82,
      1437,
      13,
      31522
    ],
    "start_token": 0,
    "end_token": 13,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package indicates usage patterns"
  },
  {
    "line": 11,
    "text": "import pandas as pd",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      11748,
      19798,
      292,
      355,
      279,
      67
    ],
    "start_token": 13,
    "end_token": 19,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package indicates usage patterns"
  },
  {
    "line": 14,
    "text": "try:",
    "annotation": "\ud83e\udde0 ML Signal: Handling imports for different Python versions shows compatibility patterns",
    "confidence": 0.5,
    "tokens": [
      28311,
      25
    ],
    "start_token": 19,
    "end_token": 21,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      17944,
      329,
      1180,
      11361,
      6300,
      2523,
      17764,
      7572
    ],
    "label": "ml_signal",
    "reason": "Handling imports for different Python versions shows compatibility patterns"
  },
  {
    "line": 16,
    "text": "except ImportError:",
    "annotation": "\ud83e\udde0 ML Signal: Handling imports for different Python versions shows compatibility patterns",
    "confidence": 0.5,
    "tokens": [
      16341,
      17267,
      12331,
      25
    ],
    "start_token": 21,
    "end_token": 25,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      49500,
      17944,
      329,
      1180,
      11361,
      6300,
      2523,
      17764,
      7572
    ],
    "label": "ml_signal",
    "reason": "Handling imports for different Python versions shows compatibility patterns"
  },
  {
    "line": 20,
    "text": "    \"\"\"",
    "annotation": "\u2705 Best Practice: Use 'is None' to check for NoneType",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      37227
    ],
    "start_token": 25,
    "end_token": 29,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      705,
      271,
      6045,
      6,
      284,
      2198,
      329,
      6045,
      6030
    ],
    "label": "best_practice",
    "reason": "Use 'is None' to check for NoneType"
  },
  {
    "line": 24,
    "text": "    if symbols is None or symbols == '':",
    "annotation": "\u2705 Best Practice: Use isinstance for type checking",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      611,
      14354,
      318,
      6045,
      393,
      14354,
      6624,
      10148,
      25
    ],
    "start_token": 29,
    "end_token": 41,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      318,
      39098,
      329,
      2099,
      10627
    ],
    "label": "best_practice",
    "reason": "Use isinstance for type checking"
  },
  {
    "line": 27,
    "text": "        if isinstance(symbols, list) or isinstance(symbols, set) or isinstance(symbols, tuple) or isinstance(symbols, pd.Series):",
    "annotation": "\ud83e\udde0 ML Signal: Pattern of string concatenation",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      611,
      318,
      39098,
      7,
      1837,
      2022,
      10220,
      11,
      1351,
      8,
      393,
      318,
      39098,
      7,
      1837,
      2022,
      10220,
      11,
      900,
      8,
      393,
      318,
      39098,
      7,
      1837,
      2022,
      10220,
      11,
      46545,
      8,
      393,
      318,
      39098,
      7,
      1837,
      2022,
      10220,
      11,
      279,
      67,
      13,
      27996,
      2599
    ],
    "start_token": 41,
    "end_token": 91,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      23939,
      286,
      4731,
      1673,
      36686,
      341
    ],
    "label": "ml_signal",
    "reason": "Pattern of string concatenation"
  },
  {
    "line": 31,
    "text": "            symbols_list = 'znb_' + symbols",
    "annotation": "\u2705 Best Practice: Avoid magic numbers; use named constants",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      14354,
      62,
      4868,
      796,
      705,
      89,
      46803,
      62,
      6,
      1343,
      14354
    ],
    "start_token": 91,
    "end_token": 113,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      24390,
      5536,
      3146,
      26,
      779,
      3706,
      38491
    ],
    "label": "best_practice",
    "reason": "Avoid magic numbers; use named constants"
  },
  {
    "line": 33,
    "text": "    request = Request(ct.LIVE_DATA_URL%(ct.P_TYPE['http'], ct.DOMAINS['sinahq'],",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Potentially unsafe string formatting in URL",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      2581,
      796,
      19390,
      7,
      310,
      13,
      43,
      9306,
      62,
      26947,
      62,
      21886,
      4,
      7,
      310,
      13,
      47,
      62,
      25216,
      17816,
      4023,
      6,
      4357,
      269,
      83,
      13,
      39170,
      32,
      20913,
      17816,
      31369,
      993,
      80,
      6,
      4357
    ],
    "start_token": 113,
    "end_token": 151,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      6902,
      3746,
      21596,
      4731,
      33313,
      287,
      10289
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Potentially unsafe string formatting in URL"
  },
  {
    "line": 36,
    "text": "    datalist = []",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Network operation without exception handling",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      4818,
      49845,
      796,
      17635
    ],
    "start_token": 151,
    "end_token": 158,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      7311,
      4905,
      1231,
      6631,
      9041
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Network operation without exception handling"
  },
  {
    "line": 41,
    "text": "        symbolstr = cont[0].split('_') ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Hardcoded encoding may lead to issues with different data sources",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      6194,
      2536,
      796,
      542,
      58,
      15,
      4083,
      35312,
      10786,
      62,
      11537,
      220
    ],
    "start_token": 158,
    "end_token": 177,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      6912,
      40976,
      21004,
      743,
      1085,
      284,
      2428,
      351,
      1180,
      1366,
      4237
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Hardcoded encoding may lead to issues with different data sources"
  },
  {
    "line": 49,
    "text": "            arrs = [symbol, valarr[0], valarr[3],  price-preclose , chg, valarr[30] + ' ' + valarr[31]]",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Potential division by zero",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      610,
      3808,
      796,
      685,
      1837,
      23650,
      11,
      1188,
      3258,
      58,
      15,
      4357,
      1188,
      3258,
      58,
      18,
      4357,
      220,
      2756,
      12,
      3866,
      19836,
      837,
      442,
      70,
      11,
      1188,
      3258,
      58,
      1270,
      60,
      1343,
      705,
      705,
      1343,
      1188,
      3258,
      58,
      3132,
      11907
    ],
    "start_token": 177,
    "end_token": 228,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      32480,
      7297,
      416,
      6632
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Potential division by zero"
  },
  {
    "line": 52,
    "text": "        else:",
    "annotation": "\ud83e\udde0 ML Signal: DataFrame creation from list of lists",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2073,
      25
    ],
    "start_token": 228,
    "end_token": 237,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6060,
      19778,
      6282,
      422,
      1351,
      286,
      8341
    ],
    "label": "ml_signal",
    "reason": "DataFrame creation from list of lists"
  }
]
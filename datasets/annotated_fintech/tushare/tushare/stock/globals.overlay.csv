annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific modules from a package indicates usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301, 9217, 8748, 7572]",1.0,13,ml_signal,9,Importing specific modules from a package indicates usage patterns,,0,@contact: jimmysoa@sina.cn,"[31, 32057, 25, 474, 320, 1820, 568, 64, 31, 82, 1437, 13, 31522]"
üß† ML Signal: Importing specific modules from a package indicates usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301, 9217, 8748, 7572]",1.0,19,ml_signal,11,Importing specific modules from a package indicates usage patterns,,13,import pandas as pd,"[11748, 19798, 292, 355, 279, 67]"
üß† ML Signal: Handling imports for different Python versions shows compatibility patterns,"[8582, 100, 254, 10373, 26484, 25, 49500, 17944, 329, 1180, 11361, 6300, 2523, 17764, 7572]",0.5,21,ml_signal,14,Handling imports for different Python versions shows compatibility patterns,,19,try:,"[28311, 25]"
üß† ML Signal: Handling imports for different Python versions shows compatibility patterns,"[8582, 100, 254, 10373, 26484, 25, 49500, 17944, 329, 1180, 11361, 6300, 2523, 17764, 7572]",0.5,25,ml_signal,16,Handling imports for different Python versions shows compatibility patterns,,21,except ImportError:,"[16341, 17267, 12331, 25]"
‚úÖ Best Practice: Use 'is None' to check for NoneType,"[26486, 227, 6705, 19939, 25, 5765, 705, 271, 6045, 6, 284, 2198, 329, 6045, 6030]",0.5,29,best_practice,20,Use 'is None' to check for NoneType,,25,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use isinstance for type checking,"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 329, 2099, 10627]",0.5,41,best_practice,24,Use isinstance for type checking,,29,    if symbols is None or symbols == '':,"[220, 220, 220, 611, 14354, 318, 6045, 393, 14354, 6624, 10148, 25]"
üß† ML Signal: Pattern of string concatenation,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 4731, 1673, 36686, 341]",0.5,91,ml_signal,27,Pattern of string concatenation,,41,"        if isinstance(symbols, list) or isinstance(symbols, set) or isinstance(symbols, tuple) or isinstance(symbols, pd.Series):","[220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 1837, 2022, 10220, 11, 1351, 8, 393, 318, 39098, 7, 1837, 2022, 10220, 11, 900, 8, 393, 318, 39098, 7, 1837, 2022, 10220, 11, 46545, 8, 393, 318, 39098, 7, 1837, 2022, 10220, 11, 279, 67, 13, 27996, 2599]"
‚úÖ Best Practice: Avoid magic numbers; use named constants,"[26486, 227, 6705, 19939, 25, 24390, 5536, 3146, 26, 779, 3706, 38491]",1.0,113,best_practice,31,Avoid magic numbers; use named constants,,91,            symbols_list = 'znb_' + symbols,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14354, 62, 4868, 796, 705, 89, 46803, 62, 6, 1343, 14354]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe string formatting in URL,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 4731, 33313, 287, 10289]",0.5,151,sast_risk,33,Potentially unsafe string formatting in URL,Medium,113,"    request = Request(ct.LIVE_DATA_URL%(ct.P_TYPE['http'], ct.DOMAINS['sinahq'],","[220, 220, 220, 2581, 796, 19390, 7, 310, 13, 43, 9306, 62, 26947, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 31369, 993, 80, 6, 4357]"
‚ö†Ô∏è SAST Risk (Medium): Network operation without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4905, 1231, 6631, 9041]",0.5,158,sast_risk,36,Network operation without exception handling,Medium,151,    datalist = [],"[220, 220, 220, 4818, 49845, 796, 17635]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded encoding may lead to issues with different data sources,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 21004, 743, 1085, 284, 2428, 351, 1180, 1366, 4237]",0.5,177,sast_risk,41,Hardcoded encoding may lead to issues with different data sources,Low,158,        symbolstr = cont[0].split('_') ,"[220, 220, 220, 220, 220, 220, 220, 6194, 2536, 796, 542, 58, 15, 4083, 35312, 10786, 62, 11537, 220]"
‚ö†Ô∏è SAST Risk (Low): Potential division by zero,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 7297, 416, 6632]",0.5,228,sast_risk,49,Potential division by zero,Low,177,"            arrs = [symbol, valarr[0], valarr[3],  price-preclose , chg, valarr[30] + ' ' + valarr[31]]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 610, 3808, 796, 685, 1837, 23650, 11, 1188, 3258, 58, 15, 4357, 1188, 3258, 58, 18, 4357, 220, 2756, 12, 3866, 19836, 837, 442, 70, 11, 1188, 3258, 58, 1270, 60, 1343, 705, 705, 1343, 1188, 3258, 58, 3132, 11907]"
üß† ML Signal: DataFrame creation from list of lists,"[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 6282, 422, 1351, 286, 8341]",0.5,237,ml_signal,52,DataFrame creation from list of lists,,228,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"

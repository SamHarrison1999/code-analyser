annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
‚úÖ Best Practice: Importing division from __future__ ensures consistent division behavior across Python 2 and 3.,"[26486, 227, 6705, 19939, 25, 17267, 278, 7297, 422, 11593, 37443, 834, 19047, 6414, 7297, 4069, 1973, 11361, 362, 290, 513, 13]",1.0,6,best_practice,9,Importing division from __future__ ensures consistent division behavior across Python 2 and 3.,,0,from __future__ import division,"[6738, 11593, 37443, 834, 1330, 7297]"
‚ö†Ô∏è SAST Risk (Low): Using urllib2 in Python 2 can lead to compatibility issues. Consider using a library that supports both Python 2 and 3.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 2956, 297, 571, 17, 287, 11361, 362, 460, 1085, 284, 17764, 2428, 13, 12642, 1262, 257, 5888, 326, 6971, 1111, 11361, 362, 290, 513, 13]",0.5,10,sast_risk,28,Using urllib2 in Python 2 can lead to compatibility issues. Consider using a library that supports both Python 2 and 3.,Low,6,except ImportError:,"[16341, 17267, 12331, 25]"
‚ö†Ô∏è SAST Risk (Medium): Using urlopen without proper validation or sanitization of the URL can lead to security vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 19016, 9654, 1231, 1774, 21201, 393, 5336, 270, 1634, 286, 262, 10289, 460, 1085, 284, 2324, 23805, 13]",0.5,14,sast_risk,66,Using urlopen without proper validation or sanitization of the URL can lead to security vulnerabilities.,Medium,10,    ,"[220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors and make debugging difficult.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563, 290, 787, 28769, 2408, 13]",0.5,31,sast_risk,70,Catching broad exceptions can hide specific errors and make debugging difficult.,Low,14,            request = Request(url),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 6371, 8]"
‚ö†Ô∏è SAST Risk (Medium): Using json.loads on data from an untrusted source can lead to security vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 33918, 13, 46030, 319, 1366, 422, 281, 1418, 81, 8459, 2723, 460, 1085, 284, 2324, 23805, 13]",0.5,43,sast_risk,74,Using json.loads on data from an untrusted source can lead to security vulnerabilities.,Medium,31,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚úÖ Best Practice: Using applymap for element-wise operations on DataFrame is efficient and readable.,"[26486, 227, 6705, 19939, 25, 8554, 4174, 8899, 329, 5002, 12, 3083, 4560, 319, 6060, 19778, 318, 6942, 290, 31744, 13]",1.0,72,best_practice,85,Using applymap for element-wise operations on DataFrame is efficient and readable.,,43,"            df = pd.DataFrame(js['record'], columns=cols)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 7, 8457, 17816, 22105, 6, 4357, 15180, 28, 4033, 82, 8]"
‚úÖ Best Practice: Explicitly converting data types ensures data consistency and prevents unexpected behavior.,"[26486, 227, 6705, 19939, 25, 11884, 306, 23202, 1366, 3858, 19047, 1366, 15794, 290, 15174, 10059, 4069, 13]",0.5,92,best_practice,89,Explicitly converting data types ensures data consistency and prevents unexpected behavior.,,72,            for col in cols[1:]:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 951, 287, 951, 82, 58, 16, 25, 5974]"
‚úÖ Best Practice: Setting the index to a meaningful column like 'date' improves data manipulation and access.,"[26486, 227, 6705, 19939, 25, 25700, 262, 6376, 284, 257, 11570, 5721, 588, 705, 4475, 6, 19575, 1366, 17512, 290, 1895, 13]",0.5,113,best_practice,97,Setting the index to a meaningful column like 'date' improves data manipulation and access.,,92,            df = df.set_index('date'),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 2617, 62, 9630, 10786, 4475, 11537]"
‚úÖ Best Practice: Sorting the DataFrame by index ensures that data is in a predictable order.,"[26486, 227, 6705, 19939, 25, 311, 24707, 262, 6060, 19778, 416, 6376, 19047, 326, 1366, 318, 287, 257, 20039, 1502, 13]",0.5,134,best_practice,97,Sorting the DataFrame by index ensures that data is in a predictable order.,,113,            df = df.set_index('date'),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 47764, 13, 2617, 62, 9630, 10786, 4475, 11537]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic IOError without specific context can make error handling less informative.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 24418, 12331, 1231, 2176, 4732, 460, 787, 4049, 9041, 1342, 30304, 13]",1.0,139,sast_risk,106,Raising a generic IOError without specific context can make error handling less informative.,Low,134,     Parameters,"[220, 220, 220, 220, 40117]"
‚úÖ Best Practice: Consider using a logger instead of writing directly to the console for better control over logging levels and outputs.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 49706, 2427, 286, 3597, 3264, 284, 262, 8624, 329, 1365, 1630, 625, 18931, 2974, 290, 23862, 13]",1.0,144,best_practice,106,Consider using a logger instead of writing directly to the console for better control over logging levels and outputs.,,139,     Parameters,"[220, 220, 220, 220, 40117]"
‚ö†Ô∏è SAST Risk (Medium): Potential risk of URL injection if `types` or `page` are not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 2526, 286, 10289, 16954, 611, 4600, 19199, 63, 393, 4600, 7700, 63, 389, 407, 6105, 5336, 36951, 13]",1.0,149,sast_risk,107,Potential risk of URL injection if `types` or `page` are not properly sanitized.,Medium,144,     ------,"[220, 220, 220, 220, 40103]"
‚ö†Ô∏è SAST Risk (Medium): The use of `urlopen` without proper exception handling can lead to unhandled exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 383, 779, 286, 4600, 6371, 9654, 63, 1231, 1774, 6631, 9041, 460, 1085, 284, 555, 38788, 13269, 13]",0.5,186,sast_risk,111,The use of `urlopen` without proper exception handling can lead to unhandled exceptions.,Medium,149,        DataFrame ÂΩìÊó•ÊâÄÊúâËÇ°Á•®‰∫§ÊòìÊï∞ÊçÆ(DataFrame),"[220, 220, 220, 220, 220, 220, 220, 6060, 19778, 10263, 121, 241, 33768, 98, 33699, 222, 17312, 231, 164, 224, 94, 163, 98, 101, 12859, 97, 23626, 241, 46763, 108, 162, 235, 106, 7, 6601, 19778, 8]"
‚úÖ Best Practice: Compile regex patterns outside of frequently called functions to improve performance.,"[26486, 227, 6705, 19939, 25, 3082, 576, 40364, 7572, 2354, 286, 6777, 1444, 5499, 284, 2987, 2854, 13]",1.0,232,best_practice,115,Compile regex patterns outside of frequently called functions to improve performance.,,186,"                                 ct.PAGES['jv'], types, page))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 4537, 48075, 17816, 73, 85, 6, 4357, 3858, 11, 2443, 4008]"
‚ö†Ô∏è SAST Risk (Low): Using `text.decode('gbk')` without handling potential decoding errors can lead to exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 4600, 5239, 13, 12501, 1098, 10786, 22296, 74, 11537, 63, 1231, 9041, 2785, 39938, 8563, 460, 1085, 284, 13269, 13]",0.5,241,sast_risk,117,Using `text.decode('gbk')` without handling potential decoding errors can lead to exceptions.,Low,232,    if text == 'null':,"[220, 220, 220, 611, 2420, 6624, 705, 8423, 10354]"
üß† ML Signal: Conditional logic based on Python version indicates compatibility handling.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11361, 2196, 9217, 17764, 9041, 13]",0.5,260,ml_signal,121,Conditional logic based on Python version indicates compatibility handling.,,241,"    text = text.replace('""{symbol', '{""symbol')","[220, 220, 220, 2420, 796, 2420, 13, 33491, 10786, 1, 90, 1837, 23650, 3256, 705, 4895, 1837, 23650, 11537]"
‚ö†Ô∏è SAST Risk (Low): The `encoding` parameter in `json.dumps` is deprecated in Python 3 and can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 383, 4600, 12685, 7656, 63, 11507, 287, 4600, 17752, 13, 67, 8142, 63, 318, 39224, 287, 11361, 513, 290, 460, 1085, 284, 10059, 4069, 13]",1.0,265,sast_risk,125,The `encoding` parameter in `json.dumps` is deprecated in Python 3 and can lead to unexpected behavior.,Low,260,    else:,"[220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Medium): Loading JSON data without validation can lead to security issues like JSON injection.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 12320, 19449, 1366, 1231, 21201, 460, 1085, 284, 2324, 2428, 588, 19449, 16954, 13]",0.5,277,sast_risk,127,Loading JSON data without validation can lead to security issues like JSON injection.,Medium,265,    js = json.loads(jstr),"[220, 220, 220, 44804, 796, 33918, 13, 46030, 7, 73, 2536, 8]"
üß† ML Signal: Usage of `pd.DataFrame` indicates data processing and transformation.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4600, 30094, 13, 6601, 19778, 63, 9217, 1366, 7587, 290, 13389, 13]",0.5,289,ml_signal,127,Usage of `pd.DataFrame` indicates data processing and transformation.,,277,    js = json.loads(jstr),"[220, 220, 220, 44804, 796, 33918, 13, 46030, 7, 73, 2536, 8]"
üß† ML Signal: Dropping columns from DataFrame suggests data cleaning or feature selection.,"[8582, 100, 254, 10373, 26484, 25, 21045, 2105, 15180, 422, 6060, 19778, 5644, 1366, 12724, 393, 3895, 6356, 13]",0.5,301,ml_signal,127,Dropping columns from DataFrame suggests data cleaning or feature selection.,,289,    js = json.loads(jstr),"[220, 220, 220, 44804, 796, 33918, 13, 46030, 7, 73, 2536, 8]"
‚ö†Ô∏è SAST Risk (Low): Potential for NoneType error if 'src' is None or not in TICK_SRCS,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 6030, 4049, 611, 705, 10677, 6, 318, 6045, 393, 407, 287, 309, 11860, 62, 50, 7397, 50]",1.0,322,sast_risk,145,Potential for NoneType error if 'src' is None or not in TICK_SRCS,Low,301,"        retry_count : int, ÈªòËÆ§ 3","[220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 1058, 493, 11, 16268, 119, 246, 164, 106, 97, 513]"
"üß† ML Signal: Conversion of stock code to symbol, indicating financial data processing","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4283, 2438, 284, 6194, 11, 12739, 3176, 1366, 7587]",1.0,391,ml_signal,149,"Conversion of stock code to symbol, indicating financial data processing",,322,        src : Êï∞ÊçÆÊ∫êÈÄâÊã©ÔºåÂèØËæìÂÖ•sn(Êñ∞Êµ™)„ÄÅtt(ËÖæËÆØ)„ÄÅnt(ÁΩëÊòì)ÔºåÈªòËÆ§sn,"[220, 220, 220, 220, 220, 220, 220, 12351, 1058, 10545, 243, 108, 162, 235, 106, 162, 118, 238, 34460, 231, 162, 233, 102, 171, 120, 234, 20998, 107, 164, 122, 241, 17739, 98, 16184, 7, 23877, 108, 38184, 103, 8, 23513, 926, 7, 164, 227, 122, 164, 106, 107, 8, 23513, 429, 7, 163, 121, 239, 23626, 241, 8, 171, 120, 234, 165, 119, 246, 164, 106, 97, 16184]"
"üß† ML Signal: Conversion of stock code to symbol with digits, indicating financial data processing","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4283, 2438, 284, 6194, 351, 19561, 11, 12739, 3176, 1366, 7587]",1.0,396,ml_signal,151,"Conversion of stock code to symbol with digits, indicating financial data processing",,391,     -------,"[220, 220, 220, 220, 35656]"
"üß† ML Signal: Date string manipulation, common in time-series data processing","[8582, 100, 254, 10373, 26484, 25, 7536, 4731, 17512, 11, 2219, 287, 640, 12, 25076, 1366, 7587]",1.0,401,ml_signal,151,"Date string manipulation, common in time-series data processing",,396,     -------,"[220, 220, 220, 220, 35656]"
"üß† ML Signal: URL construction for data retrieval, indicating web scraping or API usage","[8582, 100, 254, 10373, 26484, 25, 10289, 5103, 329, 1366, 45069, 11, 12739, 3992, 46743, 393, 7824, 8748]",1.0,406,ml_signal,151,"URL construction for data retrieval, indicating web scraping or API usage",,401,     -------,"[220, 220, 220, 220, 35656]"
"üß† ML Signal: Retry pattern, useful for training models on network reliability","[8582, 100, 254, 10373, 26484, 25, 4990, 563, 3912, 11, 4465, 329, 3047, 4981, 319, 3127, 17843]",1.0,473,ml_signal,164,"Retry pattern, useful for training models on network reliability",,406,"            ct.TICK_SRCS[1] : ct.TICK_PRICE_URL_TT % (ct.P_TYPE['http'], ct.DOMAINS['tt'], ct.PAGES['idx'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 51, 11860, 62, 50, 7397, 50, 58, 16, 60, 1058, 269, 83, 13, 51, 11860, 62, 4805, 8476, 62, 21886, 62, 15751, 4064, 357, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 926, 6, 4357, 269, 83, 13, 4537, 48075, 17816, 312, 87, 6, 4357]"
"‚ö†Ô∏è SAST Risk (Low): Potential for high-frequency requests, consider increasing pause","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 1029, 12, 35324, 7007, 11, 2074, 3649, 14985]",1.0,537,sast_risk,166,"Potential for high-frequency requests, consider increasing pause",Low,473,"            ct.TICK_SRCS[2] : ct.TICK_PRICE_URL_NT % (ct.P_TYPE['http'], ct.DOMAINS['163'], date[0:4], ","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 51, 11860, 62, 50, 7397, 50, 58, 17, 60, 1058, 269, 83, 13, 51, 11860, 62, 4805, 8476, 62, 21886, 62, 11251, 4064, 357, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 24136, 6, 4357, 3128, 58, 15, 25, 19, 4357, 220]"
"‚ö†Ô∏è SAST Risk (Medium): Reading from URL without validation, potential for malicious input","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 11725, 422, 10289, 1231, 21201, 11, 2785, 329, 17412, 5128]",1.0,550,sast_risk,170,"Reading from URL without validation, potential for malicious input",Medium,537,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
"‚ö†Ô∏è SAST Risk (Medium): Requesting URL without validation, potential for malicious input","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 19390, 278, 10289, 1231, 21201, 11, 2785, 329, 17412, 5128]",1.0,579,sast_risk,174,"Requesting URL without validation, potential for malicious input",Medium,550,                df.columns = ct.TICK_COLUMNS,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 269, 83, 13, 51, 11860, 62, 25154, 5883, 8035]"
"‚ö†Ô∏è SAST Risk (Medium): Opening URL without validation, potential for malicious input","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 25522, 10289, 1231, 21201, 11, 2785, 329, 17412, 5128]",1.0,602,sast_risk,176,"Opening URL without validation, potential for malicious input",Medium,579,                re = Request(url[src]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 302, 796, 19390, 7, 6371, 58, 10677, 12962]"
"‚ö†Ô∏è SAST Risk (Low): Decoding with specific encoding, potential for encoding issues","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4280, 7656, 351, 2176, 21004, 11, 2785, 329, 21004, 2428]",1.0,628,sast_risk,178,"Decoding with specific encoding, potential for encoding issues",Low,602,                lines = lines.decode('GBK') ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3951, 796, 3951, 13, 12501, 1098, 10786, 4579, 42, 11537, 220]"
"‚ö†Ô∏è SAST Risk (Low): Reading from StringIO without validation, potential for malformed data","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11725, 422, 10903, 9399, 1231, 21201, 11, 2785, 329, 6428, 12214, 1366]",1.0,651,sast_risk,179,"Reading from StringIO without validation, potential for malformed data",Low,628,                if len(lines) < 20:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 6615, 8, 1279, 1160, 25]"
"‚úÖ Best Practice: Logging exceptions instead of printing, for better error tracking","[26486, 227, 6705, 19939, 25, 5972, 2667, 13269, 2427, 286, 13570, 11, 329, 1365, 4049, 9646]",1.0,674,best_practice,179,"Logging exceptions instead of printing, for better error tracking",,651,                if len(lines) < 20:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 6615, 8, 1279, 1160, 25]"
"‚ö†Ô∏è SAST Risk (Low): Raising generic IOError, consider using more specific exception","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 14276, 24418, 12331, 11, 2074, 1262, 517, 2176, 6631]",1.0,708,sast_risk,196,"Raising generic IOError, consider using more specific exception",Low,674,                  ËÇ°Á•®‰ª£Á†Å e.g. 600848,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5525, 224, 94, 163, 98, 101, 47987, 163, 254, 223, 304, 13, 70, 13, 10053, 23, 2780]"
‚úÖ Best Practice: Validate input parameters to ensure they meet expected formats and constraints,"[26486, 227, 6705, 19939, 25, 3254, 20540, 5128, 10007, 284, 4155, 484, 1826, 2938, 17519, 290, 17778]",0.5,742,best_practice,196,Validate input parameters to ensure they meet expected formats and constraints,,708,                  ËÇ°Á•®‰ª£Á†Å e.g. 600848,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5525, 224, 94, 163, 98, 101, 47987, 163, 254, 223, 304, 13, 70, 13, 10053, 23, 2780]"
"üß† ML Signal: Conversion of stock code to symbol, indicating usage of financial data","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4283, 2438, 284, 6194, 11, 12739, 8748, 286, 3176, 1366]",1.0,763,ml_signal,199,"Conversion of stock code to symbol, indicating usage of financial data",,742,"        retry_count : int, ÈªòËÆ§ 3","[220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 1058, 493, 11, 16268, 119, 246, 164, 106, 97, 513]"
"üß† ML Signal: Volume conversion, indicating financial data processing","[8582, 100, 254, 10373, 26484, 25, 14701, 11315, 11, 12739, 3176, 1366, 7587]",1.0,781,ml_signal,201,"Volume conversion, indicating financial data processing",,763,"        pause : int, ÈªòËÆ§ 0","[220, 220, 220, 220, 220, 220, 220, 14985, 1058, 493, 11, 16268, 119, 246, 164, 106, 97, 657]"
‚ö†Ô∏è SAST Risk (Low): Potential for tight loop causing high CPU usage without sufficient pause,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 5381, 9052, 6666, 1029, 9135, 8748, 1231, 6751, 14985]",1.0,786,sast_risk,203,Potential for tight loop causing high CPU usage without sufficient pause,Low,781,     return,"[220, 220, 220, 220, 1441]"
‚ö†Ô∏è SAST Risk (Medium): Potential for URL injection if `ct.SINA_DD` is not properly sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 32480, 329, 10289, 16954, 611, 4600, 310, 13, 50, 28893, 62, 16458, 63, 318, 407, 6105, 5336, 36951]",1.0,790,sast_risk,207,Potential for URL injection if `ct.SINA_DD` is not properly sanitized,Medium,786,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Medium): Network operation without exception handling for specific network errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4905, 1231, 6631, 9041, 329, 2176, 3127, 8563]",1.0,799,sast_risk,209,Network operation without exception handling for specific network errors,Medium,790,        return None,"[220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
"‚ö†Ô∏è SAST Risk (Low): Assumes the response is always encoded in 'GBK', which might not be the case","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 262, 2882, 318, 1464, 30240, 287, 705, 4579, 42, 3256, 543, 1244, 407, 307, 262, 1339]",0.5,812,sast_risk,212,"Assumes the response is always encoded in 'GBK', which might not be the case",Low,799,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
‚ö†Ô∏è SAST Risk (Low): Assumes CSV format is always correct and does not handle parsing errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 44189, 5794, 318, 1464, 3376, 290, 857, 407, 5412, 32096, 8563]",0.5,849,sast_risk,216,Assumes CSV format is always correct and does not handle parsing errors,Low,812,"                                symbol, vol, date))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 11, 2322, 11, 3128, 4008]"
"üß† ML Signal: Mapping function applied to DataFrame, indicating data transformation","[8582, 100, 254, 10373, 26484, 25, 337, 5912, 2163, 5625, 284, 6060, 19778, 11, 12739, 1366, 13389]",0.5,868,ml_signal,219,"Mapping function applied to DataFrame, indicating data transformation",,849,            if len(lines) < 100:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 6615, 8, 1279, 1802, 25]"
"‚ö†Ô∏è SAST Risk (Low): Generic exception handling, which may hide specific errors","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041, 11, 543, 743, 7808, 2176, 8563]",1.0,887,sast_risk,219,"Generic exception handling, which may hide specific errors",Low,868,            if len(lines) < 100:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 6615, 8, 1279, 1802, 25]"
"‚ö†Ô∏è SAST Risk (Medium): Raises a generic IOError, which may not accurately describe the error context","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7567, 2696, 257, 14276, 24418, 12331, 11, 543, 743, 407, 14351, 6901, 262, 4049, 4732]",0.5,918,sast_risk,234,"Raises a generic IOError, which may not accurately describe the error context",Medium,887,        Ëé∑ÂèñÂΩìÊó•ÂàÜÁ¨îÊòéÁªÜÊï∞ÊçÆ,"[220, 220, 220, 220, 220, 220, 220, 5525, 236, 115, 20998, 244, 37605, 241, 33768, 98, 26344, 228, 163, 105, 242, 23626, 236, 163, 119, 228, 46763, 108, 162, 235, 106]"
"üß† ML Signal: Function with multiple parameters, including optional ones with default values","[8582, 100, 254, 10373, 26484, 25, 15553, 351, 3294, 10007, 11, 1390, 11902, 3392, 351, 4277, 3815]",0.5,940,ml_signal,218,"Function with multiple parameters, including optional ones with default values",,918,            lines = lines.decode('GBK') ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3951, 796, 3951, 13, 12501, 1098, 10786, 4579, 42, 11537, 220]"
‚ö†Ô∏è SAST Risk (Low): Potential NoneType dereference if code is None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 6045, 6030, 390, 35790, 611, 2438, 318, 6045]",0.5,944,sast_risk,235,Potential NoneType dereference if code is None,Low,940,    Parameters,"[220, 220, 220, 40117]"
üß† ML Signal: Conversion of stock code to symbol,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4283, 2438, 284, 6194]",0.5,978,ml_signal,238,Conversion of stock code to symbol,,944,                  ËÇ°Á•®‰ª£Á†Å e.g. 600848,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5525, 224, 94, 163, 98, 101, 47987, 163, 254, 223, 304, 13, 70, 13, 10053, 23, 2780]"
üß† ML Signal: Usage of current date in function,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1459, 3128, 287, 2163]",0.5,1028,ml_signal,240,Usage of current date in function,,978,                  Â¶ÇÈÅáÁΩëÁªúÁ≠âÈóÆÈ¢òÈáçÂ§çÊâßË°åÁöÑÊ¨°Êï∞,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10263, 99, 224, 34402, 229, 163, 121, 239, 163, 119, 250, 163, 255, 231, 29785, 106, 165, 95, 246, 34932, 235, 13783, 235, 33699, 100, 26193, 234, 21410, 162, 105, 94, 46763, 108]"
üß† ML Signal: Retry pattern with a loop,"[8582, 100, 254, 10373, 26484, 25, 4990, 563, 3912, 351, 257, 9052]",0.5,1046,ml_signal,241,Retry pattern with a loop,,1028,"        pause : int, ÈªòËÆ§ 0","[220, 220, 220, 220, 220, 220, 220, 14985, 1058, 493, 11, 16268, 119, 246, 164, 106, 97, 657]"
üß† ML Signal: Usage of time.sleep to pause execution,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 640, 13, 42832, 284, 14985, 9706]",0.5,1051,ml_signal,244,Usage of time.sleep to pause execution,,1046,     -------,"[220, 220, 220, 220, 35656]"
üß† ML Signal: Construction of a URL request,"[8582, 100, 254, 10373, 26484, 25, 20395, 286, 257, 10289, 2581]",0.5,1055,ml_signal,247,Construction of a URL request,,1051,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Medium): Network operation without exception handling for specific errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4905, 1231, 6631, 9041, 329, 2176, 8563]",1.0,1064,sast_risk,251,Network operation without exception handling for specific errors,Medium,1055,    date = du.today(),"[220, 220, 220, 3128, 796, 7043, 13, 40838, 3419]"
‚ö†Ô∏è SAST Risk (Low): Assumes data is encoded in 'GBK' without checking,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 1366, 318, 30240, 287, 705, 4579, 42, 6, 1231, 10627]",0.5,1077,sast_risk,253,Assumes data is encoded in 'GBK' without checking,Low,1064,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
‚ö†Ô∏è SAST Risk (High): Use of eval() with untrusted input,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 11922, 2599, 5765, 286, 5418, 3419, 351, 1418, 81, 8459, 5128]",0.5,1128,sast_risk,255,Use of eval() with untrusted input,High,1077,"            request = Request(ct.TODAY_TICKS_PAGE_URL % (ct.P_TYPE['http'], ct.DOMAINS['vsf'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2581, 796, 19390, 7, 310, 13, 51, 3727, 4792, 62, 51, 11860, 50, 62, 4537, 8264, 62, 21886, 4064, 357, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 14259, 69, 6, 4357]"
üß† ML Signal: Conversion between data formats (string to JSON),"[8582, 100, 254, 10373, 26484, 25, 44101, 1022, 1366, 17519, 357, 8841, 284, 19449, 8]",0.5,1154,ml_signal,258,Conversion between data formats (string to JSON),,1128,"            data_str = urlopen(request, timeout=10).read()","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 62, 2536, 796, 19016, 9654, 7, 25927, 11, 26827, 28, 940, 737, 961, 3419]"
üß† ML Signal: Dynamic determination of number of pages,"[8582, 100, 254, 10373, 26484, 25, 26977, 12123, 286, 1271, 286, 5468]",0.5,1211,ml_signal,262,Dynamic determination of number of pages,,1154,"                                           dict(__getitem__ = lambda s, n:n))())","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8633, 7, 834, 1136, 9186, 834, 796, 37456, 264, 11, 299, 25, 77, 4008, 28955]"
üß† ML Signal: Initialization of an empty DataFrame,"[8582, 100, 254, 10373, 26484, 25, 20768, 1634, 286, 281, 6565, 6060, 19778]",0.5,1234,ml_signal,264,Initialization of an empty DataFrame,,1211,            data_str = json.loads(data_str),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 62, 2536, 796, 33918, 13, 46030, 7, 7890, 62, 2536, 8]"
üß† ML Signal: Function call to write headers,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 3551, 24697]",0.5,1253,ml_signal,266,Function call to write headers,,1234,            data = pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 279, 67, 13, 6601, 19778, 3419]"
üß† ML Signal: Looping through pages to append data,"[8582, 100, 254, 10373, 26484, 25, 6706, 15816, 832, 5468, 284, 24443, 1366]",0.5,1271,ml_signal,267,Looping through pages to append data,,1253,            ct._write_head(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13557, 13564, 62, 2256, 3419]"
üß† ML Signal: DataFrame append pattern,"[8582, 100, 254, 10373, 26484, 25, 6060, 19778, 24443, 3912]",0.5,1283,ml_signal,271,DataFrame append pattern,,1271,        except Exception as er:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 1931, 25]"
‚ö†Ô∏è SAST Risk (Low): Generic exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041]",0.5,1292,sast_risk,273,Generic exception handling,Low,1283,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Medium): Raises IOError with a generic error message,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7567, 2696, 24418, 12331, 351, 257, 14276, 4049, 3275]",0.5,1315,sast_risk,278,Raises IOError with a generic error message,Medium,1292,"def _today_ticks(symbol, tdate, pageNo, retry_count, pause):","[4299, 4808, 40838, 62, 83, 3378, 7, 1837, 23650, 11, 256, 4475, 11, 2443, 2949, 11, 1005, 563, 62, 9127, 11, 14985, 2599]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007, 13]",0.5,1339,best_practice,263,Consider adding a docstring to describe the function's purpose and parameters.,,1315,            data_str = json.dumps(data_str),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 62, 2536, 796, 33918, 13, 67, 8142, 7, 7890, 62, 2536, 8]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe URL construction; ensure inputs are sanitized to prevent injection.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 10289, 5103, 26, 4155, 17311, 389, 5336, 36951, 284, 2948, 16954, 13]",0.5,1357,sast_risk,267,Potentially unsafe URL construction; ensure inputs are sanitized to prevent injection.,Medium,1339,            ct._write_head(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13557, 13564, 62, 2256, 3419]"
üß† ML Signal: Conditional logic based on Python version indicates compatibility handling.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11361, 2196, 9217, 17764, 9041, 13]",1.0,1376,ml_signal,275,Conditional logic based on Python version indicates compatibility handling.,,1357,    raise IOError(ct.NETWORK_URL_ERROR_MSG),"[220, 220, 220, 5298, 24418, 12331, 7, 310, 13, 12884, 33249, 62, 21886, 62, 24908, 62, 5653, 38, 8]"
‚ö†Ô∏è SAST Risk (Low): Using StringIO without explicit encoding can lead to issues in Python 2.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 10903, 9399, 1231, 7952, 21004, 460, 1085, 284, 2428, 287, 11361, 362, 13]",0.5,1389,sast_risk,281,Using StringIO without explicit encoding can lead to issues in Python 2.,Low,1376,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
‚ö†Ô∏è SAST Risk (Low): Using lambda for simple string replacement; consider using a named function for clarity.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 37456, 329, 2829, 4731, 9014, 26, 2074, 1262, 257, 3706, 2163, 329, 16287, 13]",0.5,1452,sast_risk,285,Using lambda for simple string replacement; consider using a named function for clarity.,Low,1389,"                                                         symbol, tdate, pageNo","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 11, 256, 4475, 11, 2443, 2949]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide specific errors; consider catching specific exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 2176, 8563, 26, 2074, 16508, 2176, 13269, 13]",0.5,1471,sast_risk,288,Catching broad exceptions can hide specific errors; consider catching specific exceptions.,Low,1452,            if ct.PY3:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 269, 83, 13, 47, 56, 18, 25]"
‚ö†Ô∏è SAST Risk (Low): Raising IOError with a custom message; ensure the message is informative and user-friendly.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 24418, 12331, 351, 257, 2183, 3275, 26, 4155, 262, 3275, 318, 30304, 290, 2836, 12, 13120, 13]",0.5,1505,sast_risk,295,Raising IOError with a custom message; ensure the message is informative and user-friendly.,Low,1471,"            df = pd.read_html(StringIO(sarr), parse_dates=False)[0]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 6494, 7, 10100, 9399, 7, 82, 3258, 828, 21136, 62, 19581, 28, 25101, 38381, 15, 60]"
‚úÖ Best Practice: Consider adding error handling for the function call,"[26486, 227, 6705, 19939, 25, 12642, 4375, 4049, 9041, 329, 262, 2163, 869]",1.0,1539,best_practice,295,Consider adding error handling for the function call,,1505,"            df = pd.read_html(StringIO(sarr), parse_dates=False)[0]","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 279, 67, 13, 961, 62, 6494, 7, 10100, 9399, 7, 82, 3258, 828, 21136, 62, 19581, 28, 25101, 38381, 15, 60]"
‚úÖ Best Practice: Consider adding error handling for the function call,"[26486, 227, 6705, 19939, 25, 12642, 4375, 4049, 9041, 329, 262, 2163, 869]",1.0,1575,best_practice,297,Consider adding error handling for the function call,,1539,"            df['pchange'] = df['pchange'].map(lambda x : x.replace('%', ''))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 17816, 79, 3803, 20520, 796, 47764, 17816, 79, 3803, 6, 4083, 8899, 7, 50033, 2124, 1058, 2124, 13, 33491, 10786, 4, 3256, 10148, 4008]"
‚úÖ Best Practice: Consider adding error handling for the function call,"[26486, 227, 6705, 19939, 25, 12642, 4375, 4049, 9041, 329, 262, 2163, 869]",1.0,1588,best_practice,301,Consider adding error handling for the function call,,1575,            return df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
‚úÖ Best Practice: Use pd.concat instead of append for better performance,"[26486, 227, 6705, 19939, 25, 5765, 279, 67, 13, 1102, 9246, 2427, 286, 24443, 329, 1365, 2854]",0.5,1596,best_practice,303,Use pd.concat instead of append for better performance,,1588,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
‚úÖ Best Practice: Use pd.concat instead of append for better performance,"[26486, 227, 6705, 19939, 25, 5765, 279, 67, 13, 1102, 9246, 2427, 286, 24443, 329, 1365, 2854]",0.5,1603,best_practice,305,Use pd.concat instead of append for better performance,,1596,def get_today_all():,"[4299, 651, 62, 40838, 62, 439, 33529]"
üß† ML Signal: Returns a DataFrame containing stock trading data,"[8582, 100, 254, 10373, 26484, 25, 16409, 257, 6060, 19778, 7268, 4283, 7313, 1366]",0.5,1610,ml_signal,305,Returns a DataFrame containing stock trading data,,1603,def get_today_all():,"[4299, 651, 62, 40838, 62, 439, 33529]"
"üß† ML Signal: Function definition with parameters, useful for understanding function usage patterns","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 10007, 11, 4465, 329, 4547, 2163, 8748, 7572]",0.5,1614,ml_signal,304,"Function definition with parameters, useful for understanding function usage patterns",,1610,    ,"[220, 220, 220, 220]"
‚úÖ Best Practice: Use isinstance for type checking,"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 329, 2099, 10627]",1.0,1656,best_practice,342,Use isinstance for type checking,,1614,            7ÔºöaskÔºåÁ´ûÂçñ‰ª∑ÔºåÂç≥‚ÄúÂçñ‰∏Ä‚ÄùÊä•‰ª∑,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 767, 171, 120, 248, 2093, 171, 120, 234, 44165, 252, 39355, 244, 20015, 115, 171, 120, 234, 39355, 111, 447, 250, 39355, 244, 31660, 447, 251, 162, 232, 98, 20015, 115]"
"üß† ML Signal: Iterating over a collection, common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 4947, 11, 2219, 3912, 287, 1366, 7587]",0.5,1696,ml_signal,345,"Iterating over a collection, common pattern in data processing",,1656,            10Ôºöb1_vÔºåÂßî‰π∞‰∏ÄÔºàÁ¨îÊï∞ bid volumeÔºâ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 838, 171, 120, 248, 65, 16, 62, 85, 171, 120, 234, 34650, 242, 20046, 108, 31660, 171, 120, 230, 163, 105, 242, 46763, 108, 8406, 6115, 171, 120, 231]"
"‚úÖ Best Practice: Avoid magic numbers, use named constants for clarity","[26486, 227, 6705, 19939, 25, 24390, 5536, 3146, 11, 779, 3706, 38491, 329, 16287]",0.5,1725,best_practice,349,"Avoid magic numbers, use named constants for clarity",,1696,            14Ôºöb3_vÔºå‚Äú‰π∞‰∏â‚Äù,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1478, 171, 120, 248, 65, 18, 62, 85, 171, 120, 234, 447, 250, 20046, 108, 49011, 447, 251]"
‚ö†Ô∏è SAST Risk (Medium): Potentially unsafe string formatting in URL construction,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 6902, 3746, 21596, 4731, 33313, 287, 10289, 5103]",1.0,1755,sast_risk,351,Potentially unsafe string formatting in URL construction,Medium,1725,            16Ôºöb4_vÔºå‚Äú‰π∞Âõõ‚Äù,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1467, 171, 120, 248, 65, 19, 62, 85, 171, 120, 234, 447, 250, 20046, 108, 32368, 249, 447, 251]"
‚ö†Ô∏è SAST Risk (Medium): Network operation without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4905, 1231, 6631, 9041]",1.0,1784,sast_risk,354,Network operation without exception handling,Medium,1755,            19Ôºöb5_pÔºå‚Äú‰π∞‰∫î‚Äù,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 678, 171, 120, 248, 65, 20, 62, 79, 171, 120, 234, 447, 250, 20046, 108, 49390, 447, 251]"
"‚ö†Ô∏è SAST Risk (Low): Hardcoded encoding, consider using a more flexible approach","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 21004, 11, 2074, 1262, 257, 517, 12846, 3164]",0.5,1823,sast_risk,356,"Hardcoded encoding, consider using a more flexible approach",Low,1784,            21Ôºöa1_pÔºåÂßîÂçñ‰∏ÄÔºà‰ª∑Ê†º ask priceÔºâ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2310, 171, 120, 248, 64, 16, 62, 79, 171, 120, 234, 34650, 242, 39355, 244, 31660, 171, 120, 230, 20015, 115, 43718, 120, 1265, 2756, 171, 120, 231]"
"üß† ML Signal: Regular expression usage, useful for pattern extraction","[8582, 100, 254, 10373, 26484, 25, 23603, 5408, 8748, 11, 4465, 329, 3912, 22236]",0.5,1849,ml_signal,358,"Regular expression usage, useful for pattern extraction",,1823,            30ÔºödateÔºåÊó•ÊúüÔºõ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1542, 171, 120, 248, 4475, 171, 120, 234, 33768, 98, 17312, 253, 171, 120, 249]"
"üß† ML Signal: Enumerate usage, common pattern for index-value iteration","[8582, 100, 254, 10373, 26484, 25, 2039, 6975, 378, 8748, 11, 2219, 3912, 329, 6376, 12, 8367, 24415]",0.5,1879,ml_signal,364,"Enumerate usage, common pattern for index-value iteration",,1849,"            symbols_list += ct._code_to_symbol(code) + ','","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14354, 62, 4868, 15853, 269, 83, 13557, 8189, 62, 1462, 62, 1837, 23650, 7, 8189, 8, 1343, 705, 4032]"
"üß† ML Signal: List comprehension, common pattern for data transformation","[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 11, 2219, 3912, 329, 1366, 13389]",0.5,1909,ml_signal,368,"List comprehension, common pattern for data transformation",,1879,    symbols_list = symbols_list[:-1] if len(symbols_list) > 8 else symbols_list ,"[220, 220, 220, 14354, 62, 4868, 796, 14354, 62, 4868, 58, 21912, 16, 60, 611, 18896, 7, 1837, 2022, 10220, 62, 4868, 8, 1875, 807, 2073, 14354, 62, 4868, 220]"
"‚úÖ Best Practice: Use of pandas for data manipulation, a common data science practice","[26486, 227, 6705, 19939, 25, 5765, 286, 19798, 292, 329, 1366, 17512, 11, 257, 2219, 1366, 3783, 3357]",0.5,1929,best_practice,373,"Use of pandas for data manipulation, a common data science practice",,1909,"    reg = re.compile(r'\=""(.*?)\"";')","[220, 220, 220, 842, 796, 302, 13, 5589, 576, 7, 81, 6, 59, 2625, 7, 15885, 10091, 7879, 26, 11537]"
‚úÖ Best Practice: Dropping unnecessary columns for cleaner dataframes,"[26486, 227, 6705, 19939, 25, 21045, 2105, 13114, 15180, 329, 21723, 1366, 37805]",0.5,1957,best_practice,375,Dropping unnecessary columns for cleaner dataframes,,1929,    regSym = re.compile(r'(?:sh|sz|gb_)(.*?)\='),"[220, 220, 220, 842, 43094, 796, 302, 13, 5589, 576, 7, 81, 6, 7, 27514, 1477, 91, 82, 89, 91, 22296, 62, 5769, 15885, 10091, 59, 28, 11537]"
üß† ML Signal: List comprehension for column filtering,"[8582, 100, 254, 10373, 26484, 25, 7343, 35915, 329, 5721, 25431]",1.0,1985,ml_signal,375,List comprehension for column filtering,,1957,    regSym = re.compile(r'(?:sh|sz|gb_)(.*?)\='),"[220, 220, 220, 842, 43094, 796, 302, 13, 5589, 576, 7, 81, 6, 7, 27514, 1477, 91, 82, 89, 91, 22296, 62, 5769, 15885, 10091, 59, 28, 11537]"
"üß† ML Signal: Lambda function usage, common in data processing","[8582, 100, 254, 10373, 26484, 25, 21114, 6814, 2163, 8748, 11, 2219, 287, 1366, 7587]",0.5,2013,ml_signal,375,"Lambda function usage, common in data processing",,1985,    regSym = re.compile(r'(?:sh|sz|gb_)(.*?)\='),"[220, 220, 220, 842, 43094, 796, 302, 13, 5589, 576, 7, 81, 6, 7, 27514, 1477, 91, 82, 89, 91, 22296, 62, 5769, 15885, 10091, 59, 28, 11537]"
‚úÖ Best Practice: Use of default values for function parameters improves function usability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 3815, 329, 2163, 10007, 19575, 2163, 42863, 13]",1.0,2047,best_practice,404,Use of default values for function parameters improves function usability.,,2013,                  ËÇ°Á•®‰ª£Á†Å e.g. 600848,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5525, 224, 94, 163, 98, 101, 47987, 163, 254, 223, 304, 13, 70, 13, 10053, 23, 2780]"
‚ö†Ô∏è SAST Risk (Low): Network operations can fail; ensure proper error handling.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7311, 4560, 460, 2038, 26, 4155, 1774, 4049, 9041, 13]",1.0,2056,sast_risk,409,Network operations can fail; ensure proper error handling.,Low,2047,      autype:string,"[220, 220, 220, 220, 220, 1960, 2981, 25, 8841]"
‚ö†Ô∏è SAST Risk (Low): Network operations can fail; ensure proper error handling.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7311, 4560, 460, 2038, 26, 4155, 1774, 4049, 9041, 13]",1.0,2063,sast_risk,419,Network operations can fail; ensure proper error handling.,Low,2056,      DataFrame,"[220, 220, 220, 220, 220, 6060, 19778]"
‚úÖ Best Practice: Use of append method for DataFrame to concatenate data.,"[26486, 227, 6705, 19939, 25, 5765, 286, 24443, 2446, 329, 6060, 19778, 284, 1673, 36686, 378, 1366, 13]",1.0,2080,best_practice,425,Use of append method for DataFrame to concatenate data.,,2063,          volume Êàê‰∫§Èáè,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 6115, 10545, 230, 238, 12859, 97, 34932, 237]"
‚úÖ Best Practice: Use of drop_duplicates to ensure data integrity.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4268, 62, 646, 489, 16856, 284, 4155, 1366, 11540, 13]",1.0,2099,best_practice,429,Use of drop_duplicates to ensure data integrity.,,2080,    start = du.today_last_year() if start is None else start,"[220, 220, 220, 923, 796, 7043, 13, 40838, 62, 12957, 62, 1941, 3419, 611, 923, 318, 6045, 2073, 923]"
‚úÖ Best Practice: Setting 'date' as index for better data manipulation.,"[26486, 227, 6705, 19939, 25, 25700, 705, 4475, 6, 355, 6376, 329, 1365, 1366, 17512, 13]",1.0,2109,best_practice,433,Setting 'date' as index for better data manipulation.,,2099,    ct._write_head(),"[220, 220, 220, 269, 83, 13557, 13564, 62, 2256, 3419]"
‚úÖ Best Practice: Sorting data for consistent output.,"[26486, 227, 6705, 19939, 25, 311, 24707, 1366, 329, 6414, 5072, 13]",1.0,2141,best_practice,435,Sorting data for consistent output.,,2109,"                          retry_count, pause)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 11, 14985, 8]"
‚úÖ Best Practice: Dropping unnecessary columns to optimize data size.,"[26486, 227, 6705, 19939, 25, 21045, 2105, 13114, 15180, 284, 27183, 1366, 2546, 13]",1.0,2160,best_practice,440,Dropping unnecessary columns to optimize data size.,,2141,            qt = qs[d],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10662, 83, 796, 10662, 82, 58, 67, 60]"
‚úÖ Best Practice: Mapping and type conversion for consistent data format.,"[26486, 227, 6705, 19939, 25, 337, 5912, 290, 2099, 11315, 329, 6414, 1366, 5794, 13]",1.0,2201,best_practice,444,Mapping and type conversion for consistent data format.,,2160,            if df is None:  # ÂèØËÉΩdf‰∏∫Á©∫ÔºåÈÄÄÂá∫Âæ™ÁéØ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 47764, 318, 6045, 25, 220, 1303, 10263, 237, 107, 47797, 121, 7568, 10310, 118, 163, 102, 118, 171, 120, 234, 34460, 222, 49035, 118, 36181, 103, 163, 236, 107]"
‚ö†Ô∏è SAST Risk (Low): Network operations can fail; ensure proper error handling.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7311, 4560, 460, 2038, 26, 4155, 1774, 4049, 9041, 13]",1.0,2227,sast_risk,459,Network operations can fail; ensure proper error handling.,Low,2201,        data = data[(data.date >= start) & (data.date <= end)],"[220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 58, 7, 7890, 13, 4475, 18189, 923, 8, 1222, 357, 7890, 13, 4475, 19841, 886, 15437]"
‚úÖ Best Practice: Function name is misspelled; should be _parse_fq_factor for clarity and consistency.,"[26486, 227, 6705, 19939, 25, 15553, 1438, 318, 2051, 15803, 26, 815, 307, 4808, 29572, 62, 69, 80, 62, 31412, 329, 16287, 290, 15794, 13]",0.5,2268,best_practice,484,Function name is misspelled; should be _parse_fq_factor for clarity and consistency.,,2227,                    if (du.get_hour() > 9) & (du.get_hour() < 18):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 357, 646, 13, 1136, 62, 9769, 3419, 1875, 860, 8, 1222, 357, 646, 13, 1136, 62, 9769, 3419, 1279, 1248, 2599]"
üß† ML Signal: Conversion of code to symbol indicates a pattern of data transformation.,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 2438, 284, 6194, 9217, 257, 3912, 286, 1366, 13389, 13]",1.0,2289,ml_signal,486,Conversion of code to symbol indicates a pattern of data transformation.,,2268,                    else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): URL construction with external input can lead to injection if not properly sanitized.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 10289, 5103, 351, 7097, 5128, 460, 1085, 284, 16954, 611, 407, 6105, 5336, 36951, 13]",0.5,2301,sast_risk,488,URL construction with external input can lead to injection if not properly sanitized.,Low,2289,            ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Medium): Network operation without exception handling can lead to unhandled exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 7311, 4905, 1231, 6631, 9041, 460, 1085, 284, 555, 38788, 13269, 13]",1.0,2328,sast_risk,491,Network operation without exception handling can lead to unhandled exceptions.,Medium,2301,"            for label in ['open', 'high', 'low', 'close']:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 6167, 287, 37250, 9654, 3256, 705, 8929, 3256, 705, 9319, 3256, 705, 19836, 6, 5974]"
"‚úÖ Best Practice: Slicing operation is used to remove specific characters, which is efficient.","[26486, 227, 6705, 19939, 25, 311, 677, 278, 4905, 318, 973, 284, 4781, 2176, 3435, 11, 543, 318, 6942, 13]",0.5,2359,best_practice,493,"Slicing operation is used to remove specific characters, which is efficient.",,2328,                data[label] = data[label].map(ct.FORMAT),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 58, 18242, 60, 796, 1366, 58, 18242, 4083, 8899, 7, 310, 13, 21389, 1404, 8]"
‚úÖ Best Practice: Conditional decoding based on Python version ensures compatibility.,"[26486, 227, 6705, 19939, 25, 9724, 1859, 39938, 1912, 319, 11361, 2196, 19047, 17764, 13]",0.5,2380,best_practice,495,Conditional decoding based on Python version ensures compatibility.,,2359,            data = data.set_index('date'),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 2617, 62, 9630, 10786, 4475, 11537]"
‚úÖ Best Practice: Replacing specific patterns in text for JSON compatibility.,"[26486, 227, 6705, 19939, 25, 18407, 4092, 2176, 7572, 287, 2420, 329, 19449, 17764, 13]",0.5,2393,best_practice,497,Replacing specific patterns in text for JSON compatibility.,,2380,            return data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1366]"
‚ö†Ô∏è SAST Risk (Low): Loading JSON data without validation can lead to security risks if data is untrusted.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 12320, 19449, 1366, 1231, 21201, 460, 1085, 284, 2324, 7476, 611, 1366, 318, 1418, 81, 8459, 13]",1.0,2420,sast_risk,504,Loading JSON data without validation can lead to security risks if data is untrusted.,Low,2393,"            for label in ['open', 'high', 'close', 'low']:","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 6167, 287, 37250, 9654, 3256, 705, 8929, 3256, 705, 19836, 3256, 705, 9319, 6, 5974]"
üß† ML Signal: Conversion of JSON data to DataFrame indicates a pattern of data structuring.,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 19449, 1366, 284, 6060, 19778, 9217, 257, 3912, 286, 1366, 2878, 870, 13]",1.0,2441,ml_signal,506,Conversion of JSON data to DataFrame indicates a pattern of data structuring.,,2420,            data = data.set_index('date'),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 2617, 62, 9630, 10786, 4475, 11537]"
‚úÖ Best Practice: Mapping function to handle exceptions during date conversion.,"[26486, 227, 6705, 19939, 25, 337, 5912, 2163, 284, 5412, 13269, 1141, 3128, 11315, 13]",0.5,2465,best_practice,507,Mapping function to handle exceptions during date conversion.,,2441,            data = data.sort_index(ascending = False),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 30619, 62, 9630, 7, 3372, 1571, 796, 10352, 8]"
‚úÖ Best Practice: Checking data type before conversion ensures data integrity.,"[26486, 227, 6705, 19939, 25, 39432, 1366, 2099, 878, 11315, 19047, 1366, 11540, 13]",0.5,2465,best_practice,510,Checking data type before conversion ensures data integrity.,,2465,,[]
‚úÖ Best Practice: Converting date strings to datetime objects for better manipulation.,"[26486, 227, 6705, 19939, 25, 35602, 889, 3128, 13042, 284, 4818, 8079, 5563, 329, 1365, 17512, 13]",0.5,2481,best_practice,512,Converting date strings to datetime objects for better manipulation.,,2465,"def _parase_fq_factor(code, start, end):","[4299, 4808, 1845, 589, 62, 69, 80, 62, 31412, 7, 8189, 11, 923, 11, 886, 2599]"
‚úÖ Best Practice: Dropping duplicates to ensure data uniqueness.,"[26486, 227, 6705, 19939, 25, 21045, 2105, 14184, 16856, 284, 4155, 1366, 49650, 13]",1.0,2512,best_practice,514,Dropping duplicates to ensure data uniqueness.,,2481,"    request = Request(ct.HIST_FQ_FACTOR_URL%(ct.P_TYPE['http'],","[220, 220, 220, 2581, 796, 19390, 7, 310, 13, 39, 8808, 62, 37, 48, 62, 37, 10659, 1581, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357]"
‚úÖ Best Practice: Converting factor to float for numerical operations.,"[26486, 227, 6705, 19939, 25, 35602, 889, 5766, 284, 12178, 329, 29052, 4560, 13]",0.5,2528,best_practice,516,Converting factor to float for numerical operations.,,2512,"    text = urlopen(request, timeout=10).read()","[220, 220, 220, 2420, 796, 19016, 9654, 7, 25927, 11, 26827, 28, 940, 737, 961, 3419]"
üß† ML Signal: Returning a DataFrame suggests a pattern of data processing and output.,"[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 5644, 257, 3912, 286, 1366, 7587, 290, 5072, 13]",0.5,2551,ml_signal,518,Returning a DataFrame suggests a pattern of data processing and output.,,2528,    text = text.decode('utf-8') if ct.PY3 else text,"[220, 220, 220, 2420, 796, 2420, 13, 12501, 1098, 10786, 40477, 12, 23, 11537, 611, 269, 83, 13, 47, 56, 18, 2073, 2420]"
‚úÖ Best Practice: Function name should be descriptive to indicate its purpose,"[26486, 227, 6705, 19939, 25, 15553, 1438, 815, 307, 35644, 284, 7603, 663, 4007]",0.5,2582,best_practice,505,Function name should be descriptive to indicate its purpose,,2551,                data[label] = data[label].map(ct.FORMAT),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 58, 18242, 60, 796, 1366, 58, 18242, 4083, 8899, 7, 310, 13, 21389, 1404, 8]"
‚úÖ Best Practice: Use of len() to check the length of a list or string,"[26486, 227, 6705, 19939, 25, 5765, 286, 18896, 3419, 284, 2198, 262, 4129, 286, 257, 1351, 393, 4731]",0.5,2606,best_practice,507,Use of len() to check the length of a list or string,,2582,            data = data.sort_index(ascending = False),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 30619, 62, 9630, 7, 3372, 1571, 796, 10352, 8]"
üß† ML Signal: Slicing operation on a list or string,"[8582, 100, 254, 10373, 26484, 25, 311, 677, 278, 4905, 319, 257, 1351, 393, 4731]",0.5,2619,ml_signal,509,Slicing operation on a list or string,,2606,            return data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1366]"
üß† ML Signal: Loop with retry pattern for network operations,"[8582, 100, 254, 10373, 26484, 25, 26304, 351, 1005, 563, 3912, 329, 3127, 4560]",1.0,2619,ml_signal,511,Loop with retry pattern for network operations,,2619,,[]
üß† ML Signal: Usage of time.sleep for retry delay,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 640, 13, 42832, 329, 1005, 563, 5711]",0.5,2636,ml_signal,513,Usage of time.sleep for retry delay,,2619,    symbol = ct._code_to_symbol(code),"[220, 220, 220, 6194, 796, 269, 83, 13557, 8189, 62, 1462, 62, 1837, 23650, 7, 8189, 8]"
‚ö†Ô∏è SAST Risk (Medium): URL input not validated or sanitized,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 10289, 5128, 407, 31031, 393, 5336, 36951]",1.0,2652,sast_risk,516,URL input not validated or sanitized,Medium,2636,"    text = urlopen(request, timeout=10).read()","[220, 220, 220, 2420, 796, 19016, 9654, 7, 25927, 11, 26827, 28, 940, 737, 961, 3419]"
‚ö†Ô∏è SAST Risk (Medium): No exception handling for network operations,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 3127, 4560]",1.0,2675,sast_risk,518,No exception handling for network operations,Medium,2652,    text = text.decode('utf-8') if ct.PY3 else text,"[220, 220, 220, 2420, 796, 2420, 13, 12501, 1098, 10786, 40477, 12, 23, 11537, 611, 269, 83, 13, 47, 56, 18, 2073, 2420]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded character encoding,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 2095, 21004]",0.5,2691,sast_risk,520,Hardcoded character encoding,Low,2675,"    text = text.replace('total', '""total""')","[220, 220, 220, 2420, 796, 2420, 13, 33491, 10786, 23350, 3256, 705, 1, 23350, 1, 11537]"
‚ö†Ô∏è SAST Risk (Medium): Parsing HTML without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 23042, 278, 11532, 1231, 21201]",1.0,2706,sast_risk,522,Parsing HTML without validation,Medium,2691,"    text = text.replace(':""', '"":""')","[220, 220, 220, 2420, 796, 2420, 13, 33491, 7, 10354, 1, 3256, 705, 2404, 11537]"
‚ö†Ô∏è SAST Risk (Low): XPath expression could be manipulated if input is not controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11961, 776, 5408, 714, 307, 25036, 611, 5128, 318, 407, 6856]",1.0,2720,sast_risk,524,XPath expression could be manipulated if input is not controlled,Low,2706,"    text = text.replace('_', '-')","[220, 220, 220, 2420, 796, 2420, 13, 33491, 10786, 62, 3256, 705, 12, 11537]"
‚úÖ Best Practice: Use list comprehension for readability,"[26486, 227, 6705, 19939, 25, 5765, 1351, 35915, 329, 1100, 1799]",1.0,2743,best_practice,527,Use list comprehension for readability,,2720,    df['date'] = df['date'].map(_fun_except) # for null case,"[220, 220, 220, 47764, 17816, 4475, 20520, 796, 47764, 17816, 4475, 6, 4083, 8899, 28264, 12543, 62, 16341, 8, 1303, 329, 9242, 1339]"
‚úÖ Best Practice: Use join for string concatenation,"[26486, 227, 6705, 19939, 25, 5765, 4654, 329, 4731, 1673, 36686, 341]",1.0,2758,best_practice,530,Use join for string concatenation,,2743,    df = df.drop_duplicates('date'),"[220, 220, 220, 47764, 796, 47764, 13, 14781, 62, 646, 489, 16856, 10786, 4475, 11537]"
‚ö†Ô∏è SAST Risk (Low): Assumes HTML structure is consistent,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 11532, 4645, 318, 6414]",0.5,2766,sast_risk,535,Assumes HTML structure is consistent,Low,2758,def _fun_except(x):,"[4299, 4808, 12543, 62, 16341, 7, 87, 2599]"
‚ö†Ô∏è SAST Risk (Low): Assumes ct.HIST_FQ_COLS has correct length,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 269, 83, 13, 39, 8808, 62, 37, 48, 62, 25154, 50, 468, 3376, 4129]",0.5,2775,sast_risk,539,Assumes ct.HIST_FQ_COLS has correct length,Low,2766,        return x,"[220, 220, 220, 220, 220, 220, 220, 1441, 2124]"
"‚ö†Ô∏è SAST Risk (Low): np.object is deprecated, use 'object' instead","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 45941, 13, 15252, 318, 39224, 11, 779, 705, 15252, 6, 2427]",1.0,2788,sast_risk,544,"np.object is deprecated, use 'object' instead",Low,2775,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
‚úÖ Best Practice: Use drop_duplicates to ensure unique entries,"[26486, 227, 6705, 19939, 25, 5765, 4268, 62, 646, 489, 16856, 284, 4155, 3748, 12784]",0.5,2801,best_practice,544,Use drop_duplicates to ensure unique entries,,2788,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
‚ö†Ô∏è SAST Risk (Low): Generic exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 42044, 6631, 9041]",1.0,2814,sast_risk,544,Generic exception handling,Low,2801,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
‚ö†Ô∏è SAST Risk (Low): Raises IOError which is deprecated in Python 3,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 2696, 24418, 12331, 543, 318, 39224, 287, 11361, 513]",0.5,2836,sast_risk,560,Raises IOError which is deprecated in Python 3,Low,2814,                return pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 3419]"
"‚ö†Ô∏è SAST Risk (Medium): The URL used in the request is constructed using string formatting, which can lead to injection vulnerabilities if not properly sanitized.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 383, 10289, 973, 287, 262, 2581, 318, 12006, 1262, 4731, 33313, 11, 543, 460, 1085, 284, 16954, 23805, 611, 407, 6105, 5336, 36951, 13]",0.5,2849,sast_risk,543,"The URL used in the request is constructed using string formatting, which can lead to injection vulnerabilities if not properly sanitized.",Medium,2836,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
‚ö†Ô∏è SAST Risk (Medium): The use of urlopen without proper exception handling can lead to unhandled exceptions if the request fails.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 383, 779, 286, 19016, 9654, 1231, 1774, 6631, 9041, 460, 1085, 284, 555, 38788, 13269, 611, 262, 2581, 10143, 13]",0.5,2862,sast_risk,544,The use of urlopen without proper exception handling can lead to unhandled exceptions if the request fails.,Medium,2849,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
‚ö†Ô∏è SAST Risk (Low): Decoding with a specific encoding ('GBK') without handling potential decoding errors can lead to exceptions.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4280, 7656, 351, 257, 2176, 21004, 19203, 4579, 42, 11537, 1231, 9041, 2785, 39938, 8563, 460, 1085, 284, 13269, 13]",0.5,2875,sast_risk,544,Decoding with a specific encoding ('GBK') without handling potential decoding errors can lead to exceptions.,Low,2862,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
‚úÖ Best Practice: Chaining multiple replace calls can be less readable; consider using a loop or a single regex substitution for clarity.,"[26486, 227, 6705, 19939, 25, 609, 1397, 3294, 6330, 3848, 460, 307, 1342, 31744, 26, 2074, 1262, 257, 9052, 393, 257, 2060, 40364, 32097, 329, 16287, 13]",0.5,2888,best_practice,544,Chaining multiple replace calls can be less readable; consider using a loop or a single regex substitution for clarity.,,2875,        time.sleep(pause),"[220, 220, 220, 220, 220, 220, 220, 640, 13, 42832, 7, 32125, 8]"
‚úÖ Best Practice: Use f-strings for better readability and performance in string formatting.,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 37336, 329, 1365, 1100, 1799, 290, 2854, 287, 4731, 33313, 13]",0.5,2910,best_practice,560,Use f-strings for better readability and performance in string formatting.,,2888,                return pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 3419]"
‚ö†Ô∏è SAST Risk (Low): Reading CSV data from a string without validation can lead to parsing errors if the data format is unexpected.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 11725, 44189, 1366, 422, 257, 4731, 1231, 21201, 460, 1085, 284, 32096, 8563, 611, 262, 1366, 5794, 318, 10059, 13]",0.5,2932,sast_risk,560,Reading CSV data from a string without validation can lead to parsing errors if the data format is unexpected.,Low,2910,                return pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 3419]"
üß† ML Signal: Calculating percentage change is a common operation in financial data analysis.,"[8582, 100, 254, 10373, 26484, 25, 27131, 803, 5873, 1487, 318, 257, 2219, 4905, 287, 3176, 1366, 3781, 13]",0.5,2954,ml_signal,560,Calculating percentage change is a common operation in financial data analysis.,,2932,                return pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 3419]"
"üß† ML Signal: Converting amounts to a different unit (e.g., billions) is a common data transformation.","[8582, 100, 254, 10373, 26484, 25, 35602, 889, 6867, 284, 257, 1180, 4326, 357, 68, 13, 70, 1539, 13188, 8, 318, 257, 2219, 1366, 13389, 13]",0.5,2976,ml_signal,560,"Converting amounts to a different unit (e.g., billions) is a common data transformation.",,2954,                return pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 3419]"
üß† ML Signal: Mapping data to a specific format is a common data preprocessing step.,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 1366, 284, 257, 2176, 5794, 318, 257, 2219, 1366, 662, 36948, 2239, 13]",0.5,2998,ml_signal,560,Mapping data to a specific format is a common data preprocessing step.,,2976,                return pd.DataFrame(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 279, 67, 13, 6601, 19778, 3419]"
‚úÖ Best Practice: Ensure that the column order in the DataFrame is explicitly defined for consistency.,"[26486, 227, 6705, 19939, 25, 48987, 326, 262, 5721, 1502, 287, 262, 6060, 19778, 318, 11777, 5447, 329, 15794, 13]",0.5,3029,best_practice,564,Ensure that the column order in the DataFrame is explicitly defined for consistency.,,2998,                df.columns = ct.HIST_FQ_COLS,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 28665, 82, 796, 269, 83, 13, 39, 8808, 62, 37, 48, 62, 25154, 50]"
üß† ML Signal: Padding strings with zeros is a common operation for standardizing code formats.,"[8582, 100, 254, 10373, 26484, 25, 350, 26872, 13042, 351, 1976, 27498, 318, 257, 2219, 4905, 329, 3210, 2890, 2438, 17519, 13]",0.5,3062,ml_signal,566,Padding strings with zeros is a common operation for standardizing code formats.,,3029,                df['date'] = pd.to_datetime(df['date']),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 17816, 4475, 20520, 796, 279, 67, 13, 1462, 62, 19608, 8079, 7, 7568, 17816, 4475, 6, 12962]"
‚úÖ Best Practice: Explicitly converting data types ensures consistency and can prevent unexpected behavior.,"[26486, 227, 6705, 19939, 25, 11884, 306, 23202, 1366, 3858, 19047, 15794, 290, 460, 2948, 10059, 4069, 13]",0.5,3075,best_practice,568,Explicitly converting data types ensures consistency and can prevent unexpected behavior.,,3062,        except ValueError as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 11052, 12331, 355, 304, 25]"
"‚úÖ Best Practice: Always return a consistent data type (e.g., DataFrame) for predictable function behavior.","[26486, 227, 6705, 19939, 25, 16622, 1441, 257, 6414, 1366, 2099, 357, 68, 13, 70, 1539, 6060, 19778, 8, 329, 20039, 2163, 4069, 13]",0.5,3087,best_practice,571,"Always return a consistent data type (e.g., DataFrame) for predictable function behavior.",,3075,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚úÖ Best Practice: Use of descriptive variable names improves code readability.,"[26486, 227, 6705, 19939, 25, 5765, 286, 35644, 7885, 3891, 19575, 2438, 1100, 1799, 13]",0.5,3092,best_practice,578,Use of descriptive variable names improves code readability.,,3087,def get_index():,"[4299, 651, 62, 9630, 33529]"
üß† ML Signal: Conditional logic based on the 'index' parameter indicates a decision point.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 262, 705, 9630, 6, 11507, 9217, 257, 2551, 966, 13]",0.5,3096,ml_signal,579,Conditional logic based on the 'index' parameter indicates a decision point.,,3092,"    """"""","[220, 220, 220, 37227]"
"üß† ML Signal: Alternative path in conditional logic, useful for understanding branching behavior.","[8582, 100, 254, 10373, 26484, 25, 27182, 3108, 287, 26340, 9156, 11, 4465, 329, 4547, 49526, 4069, 13]",0.5,3116,ml_signal,584,"Alternative path in conditional logic, useful for understanding branching behavior.",,3096,          code:ÊåáÊï∞‰ª£Á†Å,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 2438, 25, 162, 234, 229, 46763, 108, 47987, 163, 254, 223]"
‚úÖ Best Practice: Returning a value at the end of the function is a clear and expected pattern.,"[26486, 227, 6705, 19939, 25, 42882, 257, 1988, 379, 262, 886, 286, 262, 2163, 318, 257, 1598, 290, 2938, 3912, 13]",0.5,3137,best_practice,585,Returning a value at the end of the function is a clear and expected pattern.,,3116,          name:ÊåáÊï∞ÂêçÁß∞,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 1438, 25, 162, 234, 229, 46763, 108, 28938, 235, 163, 100, 108]"
‚úÖ Best Practice: Use of ternary operator for concise conditional assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 16237]",1.0,3142,best_practice,621,Use of ternary operator for concise conditional assignment,,3137,    return url,"[220, 220, 220, 1441, 19016]"
‚úÖ Best Practice: Use of ternary operator for concise conditional assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 16237]",1.0,3172,best_practice,625,Use of ternary operator for concise conditional assignment,,3142,"                  ktype='D', autype='qfq', ","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 479, 4906, 11639, 35, 3256, 1960, 2981, 11639, 80, 69, 80, 3256, 220]"
‚úÖ Best Practice: Use of bitwise operator for concise conditional checks,"[26486, 227, 6705, 19939, 25, 5765, 286, 1643, 3083, 10088, 329, 35327, 26340, 8794]",1.0,3196,best_practice,627,Use of bitwise operator for concise conditional checks,,3172,"                  retry_count=3,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 28, 18, 11]"
‚úÖ Best Practice: Use of ternary operator for concise conditional assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 16237]",1.0,3200,best_practice,629,Use of ternary operator for concise conditional assignment,,3196,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Use of membership test for cleaner conditional checks,"[26486, 227, 6705, 19939, 25, 5765, 286, 9931, 1332, 329, 21723, 26340, 8794]",1.0,3204,best_practice,631,Use of membership test for cleaner conditional checks,,3200,    ---------,"[220, 220, 220, 45337]"
‚úÖ Best Practice: Use of ternary operator for concise conditional assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 16237]",1.0,3212,best_practice,633,Use of ternary operator for concise conditional assignment,,3204,      code:string,"[220, 220, 220, 220, 220, 2438, 25, 8841]"
‚úÖ Best Practice: Use of membership test for cleaner conditional checks,"[26486, 227, 6705, 19939, 25, 5765, 286, 9931, 1332, 329, 21723, 26340, 8794]",1.0,3220,best_practice,633,Use of membership test for cleaner conditional checks,,3212,      code:string,"[220, 220, 220, 220, 220, 2438, 25, 8841]"
‚úÖ Best Practice: Use of ternary operator for concise conditional assignment,"[26486, 227, 6705, 19939, 25, 5765, 286, 1059, 77, 560, 10088, 329, 35327, 26340, 16237]",1.0,3279,best_practice,638,Use of ternary operator for concise conditional assignment,,3220,                  ÁªìÊùüÊó•Êúü formatÔºöYYYY-MM-DD ‰∏∫Á©∫Êó∂ÂèñÊúÄËøë‰∏Ä‰∏™‰∫§ÊòìÊó•,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13328, 119, 241, 30266, 253, 33768, 98, 17312, 253, 5794, 171, 120, 248, 26314, 26314, 12, 12038, 12, 16458, 220, 10310, 118, 163, 102, 118, 33768, 114, 20998, 244, 17312, 222, 32573, 239, 31660, 10310, 103, 12859, 97, 23626, 241, 33768, 98]"
‚úÖ Best Practice: Use of bitwise operator for concise conditional checks,"[26486, 227, 6705, 19939, 25, 5765, 286, 1643, 3083, 10088, 329, 35327, 26340, 8794]",1.0,3350,best_practice,640,Use of bitwise operator for concise conditional checks,,3279,                  Â§çÊùÉÁ±ªÂûãÔºåqfq-ÂâçÂ§çÊùÉ hfq-ÂêéÂ§çÊùÉ None-‰∏çÂ§çÊùÉÔºåÈªòËÆ§‰∏∫qfq,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 36469, 235, 30266, 225, 163, 109, 119, 161, 252, 233, 171, 120, 234, 80, 69, 80, 12, 30298, 235, 13783, 235, 30266, 225, 289, 69, 80, 12, 28938, 236, 13783, 235, 30266, 225, 6045, 12, 38834, 13783, 235, 30266, 225, 171, 120, 234, 165, 119, 246, 164, 106, 97, 10310, 118, 80, 69, 80]"
üß† ML Signal: URL pattern generation for data fetching,"[8582, 100, 254, 10373, 26484, 25, 10289, 3912, 5270, 329, 1366, 21207, 278]",1.0,3442,ml_signal,642,URL pattern generation for data fetching,,3350,                  Êï∞ÊçÆÁ±ªÂûãÔºåD=Êó•kÁ∫ø W=Âë® M=Êúà 5=5ÂàÜÈíü 15=15ÂàÜÈíü 30=30ÂàÜÈíü 60=60ÂàÜÈíüÔºåÈªòËÆ§‰∏∫D,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 10545, 243, 108, 162, 235, 106, 163, 109, 119, 161, 252, 233, 171, 120, 234, 35, 28, 33768, 98, 74, 163, 118, 123, 370, 28, 37772, 101, 337, 28, 17312, 230, 642, 28, 20, 26344, 228, 165, 240, 253, 1315, 28, 1314, 26344, 228, 165, 240, 253, 1542, 28, 1270, 26344, 228, 165, 240, 253, 3126, 28, 1899, 26344, 228, 165, 240, 253, 171, 120, 234, 165, 119, 246, 164, 106, 97, 10310, 118, 35]"
üß† ML Signal: Handling of date ranges for data fetching,"[8582, 100, 254, 10373, 26484, 25, 49500, 286, 3128, 16069, 329, 1366, 21207, 278]",1.0,3446,ml_signal,648,Handling of date ranges for data fetching,,3442,    -------,"[220, 220, 220, 35656]"
üß† ML Signal: URL pattern generation for data fetching,"[8582, 100, 254, 10373, 26484, 25, 10289, 3912, 5270, 329, 1366, 21207, 278]",1.0,3463,ml_signal,653,URL pattern generation for data fetching,,3446,          close Êî∂Áõò‰ª∑,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 1969, 10545, 242, 114, 33566, 246, 20015, 115]"
‚úÖ Best Practice: Use of string formatting for cleaner code,"[26486, 227, 6705, 19939, 25, 5765, 286, 4731, 33313, 329, 21723, 2438]",1.0,3483,best_practice,658,Use of string formatting for cleaner code,,3463,          code ËÇ°Á•®‰ª£Á†Å,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 2438, 5525, 224, 94, 163, 98, 101, 47987, 163, 254, 223]"
‚úÖ Best Practice: Use of membership test for cleaner conditional checks,"[26486, 227, 6705, 19939, 25, 5765, 286, 9931, 1332, 329, 21723, 26340, 8794]",1.0,3498,best_practice,663,Use of membership test for cleaner conditional checks,,3483,    autype = '' if autype is None else autype,"[220, 220, 220, 1960, 2981, 796, 10148, 611, 1960, 2981, 318, 6045, 2073, 1960, 2981]"
üß† ML Signal: URL pattern generation for data fetching,"[8582, 100, 254, 10373, 26484, 25, 10289, 3912, 5270, 329, 1366, 21207, 278]",1.0,3514,ml_signal,664,URL pattern generation for data fetching,,3498,    if (start is not None) & (start != ''):,"[220, 220, 220, 611, 357, 9688, 318, 407, 6045, 8, 1222, 357, 9688, 14512, 10148, 2599]"
‚úÖ Best Practice: Use of string formatting for cleaner code,"[26486, 227, 6705, 19939, 25, 5765, 286, 4731, 33313, 329, 21723, 2438]",1.0,3537,best_practice,668,Use of string formatting for cleaner code,,3514,"        if code[:1] in ('1', '5') or index:","[220, 220, 220, 220, 220, 220, 220, 611, 2438, 58, 25, 16, 60, 287, 19203, 16, 3256, 705, 20, 11537, 393, 6376, 25]"
‚ö†Ô∏è SAST Risk (Low): Use of TypeError for input validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 5994, 12331, 329, 5128, 21201]",0.5,3552,sast_risk,669,Use of TypeError for input validation,Low,3537,            fq = '',"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 80, 796, 10148]"
üß† ML Signal: Data fetching with retry mechanism,"[8582, 100, 254, 10373, 26484, 25, 6060, 21207, 278, 351, 1005, 563, 9030]",1.0,3561,ml_signal,676,Data fetching with retry mechanism,,3552,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Use of membership test for cleaner conditional checks,"[26486, 227, 6705, 19939, 25, 5765, 286, 9931, 1332, 329, 21723, 26340, 8794]",1.0,3592,best_practice,681,Use of membership test for cleaner conditional checks,,3561,                enddate = str(year+1) + '-12-31',"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 886, 4475, 796, 965, 7, 1941, 10, 16, 8, 1343, 705, 12, 1065, 12, 3132, 6]"
‚úÖ Best Practice: Use of bitwise operator for concise conditional checks,"[26486, 227, 6705, 19939, 25, 5765, 286, 1643, 3083, 10088, 329, 35327, 26340, 8794]",1.0,3639,best_practice,682,Use of bitwise operator for concise conditional checks,,3592,"                url = ct.KLINE_TT_URL%(ct.P_TYPE['http'], ct.DOMAINS['tt'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19016, 796, 269, 83, 13, 42, 24027, 62, 15751, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 926, 6, 4357]"
‚úÖ Best Practice: Use of explicit comparison for clarity,"[26486, 227, 6705, 19939, 25, 5765, 286, 7952, 7208, 329, 16287]",0.5,3695,best_practice,684,Use of explicit comparison for clarity,,3639,"                                    ct.TT_K_TYPE[ktype.upper()], startdate, enddate,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 15751, 62, 42, 62, 25216, 58, 74, 4906, 13, 45828, 3419, 4357, 923, 4475, 11, 886, 4475, 11]"
üß† ML Signal: Data filtering based on date range,"[8582, 100, 254, 10373, 26484, 25, 6060, 25431, 1912, 319, 3128, 2837]",1.0,3731,ml_signal,687,Data filtering based on date range,,3695,"        dataflag = '%s%s'%(fq, ct.TT_K_TYPE[ktype.upper()])","[220, 220, 220, 220, 220, 220, 220, 1366, 32109, 796, 705, 4, 82, 4, 82, 6, 4, 7, 69, 80, 11, 269, 83, 13, 15751, 62, 42, 62, 25216, 58, 74, 4906, 13, 45828, 3419, 12962]"
‚ö†Ô∏è SAST Risk (Low): Unreachable code due to return statement above,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 791, 16250, 540, 2438, 2233, 284, 1441, 2643, 2029]",1.0,3774,sast_risk,690,Unreachable code due to return statement above,Low,3731,"                                    symbol, ktype, ktype,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 11, 479, 4906, 11, 479, 4906, 11]"
‚úÖ Best Practice: Function parameters should be aligned for better readability.,"[26486, 227, 6705, 19939, 25, 15553, 10007, 815, 307, 19874, 329, 1365, 1100, 1799, 13]",1.0,3789,best_practice,669,Function parameters should be aligned for better readability.,,3774,            fq = '',"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 277, 80, 796, 10148]"
üß† ML Signal: Retry pattern with a loop and pause can be used to train models for network reliability.,"[8582, 100, 254, 10373, 26484, 25, 4990, 563, 3912, 351, 257, 9052, 290, 14985, 460, 307, 973, 284, 4512, 4981, 329, 3127, 17843, 13]",0.5,3812,ml_signal,677,Retry pattern with a loop and pause can be used to train models for network reliability.,,3789,"            years = du.tt_dates(start, end)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 812, 796, 7043, 13, 926, 62, 19581, 7, 9688, 11, 886, 8]"
‚ö†Ô∏è SAST Risk (Low): Using time.sleep can lead to performance issues in asynchronous environments.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 640, 13, 42832, 460, 1085, 284, 2854, 2428, 287, 39354, 12493, 13]",0.5,3828,sast_risk,679,Using time.sleep can lead to performance issues in asynchronous environments.,Low,3812,            for year in years:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 614, 287, 812, 25]"
‚ö†Ô∏è SAST Risk (Medium): No validation or sanitization of the URL before making a request.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 21201, 393, 5336, 270, 1634, 286, 262, 10289, 878, 1642, 257, 2581, 13]",0.5,3875,sast_risk,682,No validation or sanitization of the URL before making a request.,Medium,3828,"                url = ct.KLINE_TT_URL%(ct.P_TYPE['http'], ct.DOMAINS['tt'],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 19016, 796, 269, 83, 13, 42, 24027, 62, 15751, 62, 21886, 4, 7, 310, 13, 47, 62, 25216, 17816, 4023, 6, 4357, 269, 83, 13, 39170, 32, 20913, 17816, 926, 6, 4357]"
‚ö†Ô∏è SAST Risk (Medium): No exception handling for urlopen which can raise URLError or HTTPError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 1400, 6631, 9041, 329, 19016, 9654, 543, 460, 5298, 37902, 2538, 81, 1472, 393, 14626, 12331, 13]",0.5,3931,sast_risk,684,No exception handling for urlopen which can raise URLError or HTTPError.,Medium,3875,"                                    ct.TT_K_TYPE[ktype.upper()], startdate, enddate,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 269, 83, 13, 15751, 62, 42, 62, 25216, 58, 74, 4906, 13, 45828, 3419, 4357, 923, 4475, 11, 886, 4475, 11]"
‚úÖ Best Practice: Magic numbers should be avoided; use a named constant for better readability.,"[26486, 227, 6705, 19939, 25, 6139, 3146, 815, 307, 13941, 26, 779, 257, 3706, 6937, 329, 1365, 1100, 1799, 13]",0.5,3953,best_practice,686,Magic numbers should be avoided; use a named constant for better readability.,,3931,                urls.append(url),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2956, 7278, 13, 33295, 7, 6371, 8]"
‚ö†Ô∏è SAST Risk (Low): Printing exceptions can leak sensitive information.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 13269, 460, 13044, 8564, 1321, 13]",1.0,3996,sast_risk,690,Printing exceptions can leak sensitive information.,Low,3953,"                                    symbol, ktype, ktype,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 11, 479, 4906, 11, 479, 4906, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential compatibility issue with Python 2 and 3.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 17764, 2071, 351, 11361, 362, 290, 513, 13]",0.5,4001,sast_risk,693,Potential compatibility issue with Python 2 and 3.,Low,3996,    else:,"[220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Splitting and accessing list elements without validation can lead to IndexError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 13341, 2535, 290, 22534, 1351, 4847, 1231, 21201, 460, 1085, 284, 12901, 12331, 13]",0.5,4012,sast_risk,695,Splitting and accessing list elements without validation can lead to IndexError.,Low,4001,    data = pd.DataFrame(),"[220, 220, 220, 1366, 796, 279, 67, 13, 6601, 19778, 3419]"
‚ö†Ô∏è SAST Risk (Low): Regular expression usage without validation can lead to ReDoS.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 23603, 5408, 8748, 1231, 21201, 460, 1085, 284, 797, 46498, 13]",0.5,4054,sast_risk,698,Regular expression usage without validation can lead to ReDoS.,Low,4012,"                                       symbol, code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 11, 2438, 11]"
‚ö†Ô∏è SAST Risk (Low): Using re.subn without checking the result can lead to unexpected behavior.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 302, 13, 7266, 77, 1231, 10627, 262, 1255, 460, 1085, 284, 10059, 4069, 13]",1.0,4096,sast_risk,698,Using re.subn without checking the result can lead to unexpected behavior.,Low,4054,"                                       symbol, code,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 11, 2438, 11]"
‚ö†Ô∏è SAST Risk (Medium): json.loads can raise a JSONDecodeError if the input is not valid JSON.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 33918, 13, 46030, 460, 5298, 257, 19449, 10707, 1098, 12331, 611, 262, 5128, 318, 407, 4938, 19449, 13]",0.5,4128,sast_risk,701,json.loads can raise a JSONDecodeError if the input is not valid JSON.,Medium,4096,                           ignore_index=True),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 8856, 62, 9630, 28, 17821, 8]"
‚ö†Ô∏è SAST Risk (Low): Accessing dictionary keys without validation can lead to KeyError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8798, 278, 22155, 8251, 1231, 21201, 460, 1085, 284, 7383, 12331, 13]",0.5,4146,sast_risk,702,Accessing dictionary keys without validation can lead to KeyError.,Low,4128,    if ktype not in ct.K_MIN_LABELS:,"[220, 220, 220, 611, 479, 4906, 407, 287, 269, 83, 13, 42, 62, 23678, 62, 48780, 37142, 25]"
‚ö†Ô∏è SAST Risk (Low): Accessing nested dictionary keys without validation can lead to KeyError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8798, 278, 28376, 22155, 8251, 1231, 21201, 460, 1085, 284, 7383, 12331, 13]",0.5,4180,sast_risk,705,Accessing nested dictionary keys without validation can lead to KeyError.,Low,4146,                data = data[(data.date >= start) & (data.date <= end)],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 58, 7, 7890, 13, 4475, 18189, 923, 8, 1222, 357, 7890, 13, 4475, 19841, 886, 15437]"
‚ö†Ô∏è SAST Risk (Low): Accessing list elements without validation can lead to IndexError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8798, 278, 1351, 4847, 1231, 21201, 460, 1085, 284, 12901, 12331, 13]",0.5,4184,sast_risk,708,Accessing list elements without validation can lead to IndexError.,Low,4180,    ,"[220, 220, 220, 220]"
‚úÖ Best Practice: Use keyword arguments for better readability.,"[26486, 227, 6705, 19939, 25, 5765, 21179, 7159, 329, 1365, 1100, 1799, 13]",0.5,4202,best_practice,711,Use keyword arguments for better readability.,,4184,"                symbol='',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 6194, 11639, 3256]"
‚úÖ Best Practice: Use consistent variable naming and spacing.,"[26486, 227, 6705, 19939, 25, 5765, 6414, 7885, 19264, 290, 31050, 13]",0.5,4223,best_practice,716,Use consistent variable naming and spacing.,,4202,                pause=0.001):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14985, 28, 15, 13, 8298, 2599]"
üß† ML Signal: Date formatting pattern can be used to train models for date parsing.,"[8582, 100, 254, 10373, 26484, 25, 7536, 33313, 3912, 460, 307, 973, 284, 4512, 4981, 329, 3128, 32096, 13]",0.5,4236,ml_signal,717,Date formatting pattern can be used to train models for date parsing.,,4223,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
‚úÖ Best Practice: Consider using a more descriptive variable name than 'col'.,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 517, 35644, 7885, 1438, 621, 705, 4033, 4458]",0.5,4262,best_practice,722,Consider using a more descriptive variable name than 'col'.,,4236,                if len(lines) < 100: #no data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 6615, 8, 1279, 1802, 25, 1303, 3919, 1366]"
‚ö†Ô∏è SAST Risk (Low): Converting data types without validation can lead to ValueError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 35602, 889, 1366, 3858, 1231, 21201, 460, 1085, 284, 11052, 12331, 13]",0.5,4281,sast_risk,725,Converting data types without validation can lead to ValueError.,Low,4262,                print(e),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 68, 8]"
"‚úÖ Best Practice: Check if 'symbols' is a list, set, tuple, or pd.Series for flexibility","[26486, 227, 6705, 19939, 25, 6822, 611, 705, 1837, 2022, 10220, 6, 318, 257, 1351, 11, 900, 11, 46545, 11, 393, 279, 67, 13, 27996, 329, 13688]",1.0,4303,best_practice,715,"Check if 'symbols' is a list, set, tuple, or pd.Series for flexibility",,4281,"                retry_count=3,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1005, 563, 62, 9127, 28, 18, 11]"
üß† ML Signal: Iterating over a collection to fetch data for each item,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 4947, 284, 21207, 1366, 329, 1123, 2378]",1.0,4316,ml_signal,717,Iterating over a collection to fetch data for each item,,4303,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
üß† ML Signal: Adding a new column to a DataFrame,"[8582, 100, 254, 10373, 26484, 25, 18247, 257, 649, 5721, 284, 257, 6060, 19778]",0.5,4342,ml_signal,722,Adding a new column to a DataFrame,,4316,                if len(lines) < 100: #no data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 18896, 7, 6615, 8, 1279, 1802, 25, 1303, 3919, 1366]"
‚ö†Ô∏è SAST Risk (Low): DataFrame.append is inefficient for large datasets; consider using pd.concat,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6060, 19778, 13, 33295, 318, 30904, 329, 1588, 40522, 26, 2074, 1262, 279, 67, 13, 1102, 9246]",1.0,4358,sast_risk,724,DataFrame.append is inefficient for large datasets; consider using pd.concat,Low,4342,            except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚úÖ Best Practice: Return None explicitly if input is not a valid type,"[26486, 227, 6705, 19939, 25, 8229, 6045, 11777, 611, 5128, 318, 407, 257, 4938, 2099]",1.0,4371,best_practice,726,Return None explicitly if input is not a valid type,,4358,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Consider adding type hints for the function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 2099, 20269, 329, 262, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,4390,best_practice,725,Consider adding type hints for the function parameters and return type for better readability and maintainability.,,4371,                print(e),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 68, 8]"
üß† ML Signal: Usage of default parameter values can be a signal for ML models to understand function behavior.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 4277, 11507, 3815, 460, 307, 257, 6737, 329, 10373, 4981, 284, 1833, 2163, 4069, 13]",1.0,4417,ml_signal,746,Usage of default parameter values can be a signal for ML models to understand function behavior.,,4390,                for col in df.columns[1:6]:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 951, 287, 47764, 13, 28665, 82, 58, 16, 25, 21, 5974]"
‚úÖ Best Practice: Consider validating the date format to ensure it matches the expected 'YYYY-MM-DD' format.,"[26486, 227, 6705, 19939, 25, 12642, 4938, 803, 262, 3128, 5794, 284, 4155, 340, 7466, 262, 2938, 705, 26314, 26314, 12, 12038, 12, 16458, 6, 5794, 13]",0.5,4434,best_practice,748,Consider validating the date format to ensure it matches the expected 'YYYY-MM-DD' format.,,4417,                return df,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
‚ö†Ô∏è SAST Risk (Low): Hardcoded date strings can lead to maintenance issues and potential logic errors.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6912, 40976, 3128, 13042, 460, 1085, 284, 9262, 2428, 290, 2785, 9156, 8563, 13]",1.0,4452,sast_risk,750,Hardcoded date strings can lead to maintenance issues and potential logic errors.,Low,4434,"def get_hists(symbols, start=None, end=None,","[4299, 651, 62, 71, 1023, 7, 1837, 2022, 10220, 11, 923, 28, 14202, 11, 886, 28, 14202, 11]"
üß† ML Signal: Conditional logic based on parameter values can be used to infer function behavior patterns.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11507, 3815, 460, 307, 973, 284, 13249, 2163, 4069, 7572, 13]",1.0,4456,ml_signal,753,Conditional logic based on parameter values can be used to infer function behavior patterns.,,4452,"    """"""","[220, 220, 220, 37227]"
‚ö†Ô∏è SAST Risk (Medium): Using external input (date) to construct file paths can lead to path traversal vulnerabilities.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8554, 7097, 5128, 357, 4475, 8, 284, 5678, 2393, 13532, 460, 1085, 284, 3108, 33038, 282, 23805, 13]",0.5,4460,sast_risk,755,Using external input (date) to construct file paths can lead to path traversal vulnerabilities.,Medium,4456,"    """"""","[220, 220, 220, 37227]"
üß† ML Signal: Returning data frames is a common pattern in data processing functions.,"[8582, 100, 254, 10373, 26484, 25, 42882, 1366, 13431, 318, 257, 2219, 3912, 287, 1366, 7587, 5499, 13]",0.5,4490,ml_signal,759,Returning data frames is a common pattern in data processing functions.,,4460,"            data = get_hist_data(symbol, start=start, end=end,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 651, 62, 10034, 62, 7890, 7, 1837, 23650, 11, 923, 28, 9688, 11, 886, 28, 437, 11]"
‚úÖ Best Practice: Consider adding a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,4561,best_practice,754,Consider adding a docstring to describe the function's purpose and parameters,,4490,    ÊâπÈáèËé∑ÂèñÂéÜÂè≤Ë°åÊÉÖÊï∞ÊçÆÔºåÂÖ∑‰ΩìÂèÇÊï∞ÂíåËøîÂõûÊï∞ÊçÆÁ±ªÂûãËØ∑ÂèÇËÄÉget_hist_dataÊé•Âè£,"[220, 220, 220, 10545, 231, 117, 34932, 237, 164, 236, 115, 20998, 244, 43889, 228, 20998, 110, 26193, 234, 46349, 227, 46763, 108, 162, 235, 106, 171, 120, 234, 17739, 115, 19526, 241, 20998, 224, 46763, 108, 161, 240, 234, 32573, 242, 32368, 252, 46763, 108, 162, 235, 106, 163, 109, 119, 161, 252, 233, 46237, 115, 20998, 224, 32003, 225, 1136, 62, 10034, 62, 7890, 162, 236, 98, 20998, 96]"
üß† ML Signal: Conversion of datetime object to string format,"[8582, 100, 254, 10373, 26484, 25, 44101, 286, 4818, 8079, 2134, 284, 4731, 5794]",1.0,4572,ml_signal,756,Conversion of datetime object to string format,,4561,    df = pd.DataFrame(),"[220, 220, 220, 47764, 796, 279, 67, 13, 6601, 19778, 3419]"
‚úÖ Best Practice: Chaining string methods for concise code,"[26486, 227, 6705, 19939, 25, 609, 1397, 4731, 5050, 329, 35327, 2438]",0.5,4584,best_practice,758,Chaining string methods for concise code,,4572,        for symbol in symbols:,"[220, 220, 220, 220, 220, 220, 220, 329, 6194, 287, 14354, 25]"
üß† ML Signal: Function signature with default parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 9877, 351, 4277, 10007]",1.0,4614,ml_signal,759,Function signature with default parameters,,4584,"            data = get_hist_data(symbol, start=start, end=end,","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 651, 62, 10034, 62, 7890, 7, 1837, 23650, 11, 923, 28, 9688, 11, 886, 28, 437, 11]"
‚ö†Ô∏è SAST Risk (Low): Potential for path traversal if filepath is user-controlled,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 3108, 33038, 282, 611, 2393, 6978, 318, 2836, 12, 14401]",0.5,4631,sast_risk,762,Potential for path traversal if filepath is user-controlled,Low,4614,            data['code'] = symbol,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 17816, 8189, 20520, 796, 6194]"
‚ö†Ô∏è SAST Risk (Low): Opening a file without exception handling,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 25522, 257, 2393, 1231, 6631, 9041]",0.5,4640,sast_risk,764,Opening a file without exception handling,Low,4631,        return df,"[220, 220, 220, 220, 220, 220, 220, 1441, 47764]"
‚ö†Ô∏è SAST Risk (Low): Use of deprecated .ix indexer,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 39224, 764, 844, 6376, 263]",1.0,4642,sast_risk,767,Use of deprecated .ix indexer,Low,4640,  ,"[220, 220]"
‚ö†Ô∏è SAST Risk (Low): Use of deprecated .ix indexer,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 39224, 764, 844, 6376, 263]",1.0,4664,sast_risk,771,Use of deprecated .ix indexer,Low,4642,    Ëé∑ÂèñÊØèÊó•Êî∂ÁõòË°åÊÉÖ,"[220, 220, 220, 5525, 236, 115, 20998, 244, 162, 107, 237, 33768, 98, 162, 242, 114, 33566, 246, 26193, 234, 46349, 227]"
üß† ML Signal: Iterating over stock indices,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 4283, 36525]",0.5,4669,ml_signal,777,Iterating over stock indices,,4664,    -------------,"[220, 220, 220, 220, 32501]"
üß† ML Signal: Conditional logic based on frequency,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 8373]",0.5,4700,ml_signal,780,Conditional logic based on frequency,,4669,"    price Áé∞‰ª∑, change Ê∂®Ë∑å, open ‰ªäÂºÄ, high ÊúÄÈ´ò,","[220, 220, 220, 2756, 13328, 236, 108, 20015, 115, 11, 1487, 10545, 114, 101, 164, 115, 234, 11, 1280, 220, 20015, 232, 28156, 222, 11, 1029, 42164, 222, 165, 45865, 11]"
‚úÖ Best Practice: Use a loop or mapping for renaming columns,"[26486, 227, 6705, 19939, 25, 5765, 257, 9052, 393, 16855, 329, 8851, 3723, 15180]",0.5,4735,best_practice,787,Use a loop or mapping for renaming columns,,4700,"    activity Ê¥ªË∑ÉÂ∫¶, avgturnover Á¨îÊç¢Êâã, attack ÊîªÂáªÊ≥¢%,","[220, 220, 220, 3842, 10545, 112, 119, 164, 115, 225, 41753, 99, 11, 1196, 13655, 700, 2502, 13328, 105, 242, 162, 235, 95, 33699, 233, 11, 1368, 10545, 242, 119, 49035, 119, 37345, 95, 7441]"
‚úÖ Best Practice: Use a loop or mapping for type conversion,"[26486, 227, 6705, 19939, 25, 5765, 257, 9052, 393, 16855, 329, 2099, 11315]",1.0,4765,best_practice,794,Use a loop or mapping for type conversion,,4735,    datepre = '' if date is None else wdate[0:4] + wdate[4:6] + '/',"[220, 220, 220, 3128, 3866, 796, 10148, 611, 3128, 318, 6045, 2073, 266, 4475, 58, 15, 25, 19, 60, 1343, 266, 4475, 58, 19, 25, 21, 60, 1343, 31051, 6]"
‚úÖ Best Practice: Use a loop or mapping for repetitive operations,"[26486, 227, 6705, 19939, 25, 5765, 257, 9052, 393, 16855, 329, 28585, 4560]",0.5,4774,best_practice,801,Use a loop or mapping for repetitive operations,,4765,def get_dt_time(t):,"[4299, 651, 62, 28664, 62, 2435, 7, 83, 2599]"
‚úÖ Best Practice: Use a loop or mapping for repetitive assignments,"[26486, 227, 6705, 19939, 25, 5765, 257, 9052, 393, 16855, 329, 28585, 25815]",0.5,4774,best_practice,806,Use a loop or mapping for repetitive assignments,,4774,,[]
üß† ML Signal: Printing dataframes for debugging,"[8582, 100, 254, 10373, 26484, 25, 44118, 1366, 37805, 329, 28769]",0.5,4804,ml_signal,851,Printing dataframes for debugging,,4774,"                df.loc[:,'ASKPRICE7']  = 0","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 17946, 58, 25, 4032, 1921, 42, 4805, 8476, 22, 20520, 220, 796, 657]"
‚ö†Ô∏è SAST Risk (Low): Potential data loss if df is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 1366, 2994, 611, 47764, 318, 407, 6105, 31031]",0.5,4834,sast_risk,851,Potential data loss if df is not properly validated,Low,4804,"                df.loc[:,'ASKPRICE7']  = 0","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 17946, 58, 25, 4032, 1921, 42, 4805, 8476, 22, 20520, 220, 796, 657]"
‚úÖ Best Practice: Strip and normalize the code to uppercase for consistency,"[26486, 227, 6705, 19939, 25, 18508, 290, 3487, 1096, 262, 2438, 284, 334, 39921, 589, 329, 15794]",1.0,4863,best_practice,877,Strip and normalize the code to uppercase for consistency,,4834,"                df.loc[:,'BIDVOL3']  = 0","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 17946, 58, 25, 4032, 33, 2389, 44558, 18, 20520, 220, 796, 657]"
üß† ML Signal: Retry pattern for network operations,"[8582, 100, 254, 10373, 26484, 25, 4990, 563, 3912, 329, 3127, 4560]",1.0,4892,ml_signal,879,Retry pattern for network operations,,4863,"                df.loc[:,'BIDVOL5']  = 0","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 17946, 58, 25, 4032, 33, 2389, 44558, 20, 20520, 220, 796, 657]"
‚ö†Ô∏è SAST Risk (Low): Printing error messages can leak information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 4049, 6218, 460, 13044, 1321]",0.5,4921,sast_risk,883,Printing error messages can leak information,Low,4892,"                df.loc[:,'BIDVOL9']  = 0","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 17946, 58, 25, 4032, 33, 2389, 44558, 24, 20520, 220, 796, 657]"
‚úÖ Best Practice: Unpacking connection tuple for clarity,"[26486, 227, 6705, 19939, 25, 791, 41291, 4637, 46545, 329, 16287]",0.5,4949,best_practice,886,Unpacking connection tuple for clarity,,4921,"                df.loc[:,'VOL30']=0.0","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 17946, 58, 25, 4032, 44558, 1270, 20520, 28, 15, 13, 15]"
‚úÖ Best Practice: Strip and normalize the frequency to uppercase for consistency,"[26486, 227, 6705, 19939, 25, 18508, 290, 3487, 1096, 262, 8373, 284, 334, 39921, 589, 329, 15794]",1.0,4982,best_practice,888,Strip and normalize the frequency to uppercase for consistency,,4949,"                df.loc[:,'TOTAL_TURNOVER']=0.0","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 13, 17946, 58, 25, 4032, 51, 27510, 62, 51, 4261, 15285, 5959, 20520, 28, 15, 13, 15]"
‚úÖ Best Practice: Strip and normalize the asset type to uppercase for consistency,"[26486, 227, 6705, 19939, 25, 18508, 290, 3487, 1096, 262, 11171, 2099, 284, 334, 39921, 589, 329, 15794]",1.0,5001,best_practice,890,Strip and normalize the asset type to uppercase for consistency,,4982,                print(df),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 7568, 8]"
‚úÖ Best Practice: Use a helper function to determine market code,"[26486, 227, 6705, 19939, 25, 5765, 257, 31904, 2163, 284, 5004, 1910, 2438]",1.0,5056,best_practice,892,Use a helper function to determine market code,,5001,"#                 df = bar(stk, conn=cons, start_date=date, end_date=date, freq=freq, market=market, asset=asset)","[2, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 2318, 7, 301, 74, 11, 48260, 28, 5936, 11, 923, 62, 4475, 28, 4475, 11, 886, 62, 4475, 28, 4475, 11, 2030, 80, 28, 19503, 80, 11, 1910, 28, 10728, 11, 11171, 28, 562, 316, 8]"
‚úÖ Best Practice: Use getattr for dynamic function retrieval,"[26486, 227, 6705, 19939, 25, 5765, 651, 35226, 329, 8925, 2163, 45069]",1.0,5060,best_practice,895,Use getattr for dynamic function retrieval,,5056,    ,"[220, 220, 220, 220]"
‚úÖ Best Practice: Adjust ktype for non-standard assets,"[26486, 227, 6705, 19939, 25, 20292, 479, 4906, 329, 1729, 12, 20307, 6798]",0.5,5061,best_practice,898,Adjust ktype for non-standard assets,,5060, ,[220]
üß† ML Signal: Pagination pattern for data retrieval,"[8582, 100, 254, 10373, 26484, 25, 31525, 1883, 3912, 329, 1366, 45069]",1.0,5075,ml_signal,904,Pagination pattern for data retrieval,,5061,"           factors = [],","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 5087, 796, 685, 4357]"
‚úÖ Best Practice: Use append for DataFrame concatenation,"[26486, 227, 6705, 19939, 25, 5765, 24443, 329, 6060, 19778, 1673, 36686, 341]",1.0,5084,best_practice,907,Use append for DataFrame concatenation,,5075,    BARÊï∞ÊçÆ,"[220, 220, 220, 31597, 46763, 108, 162, 235, 106]"
‚úÖ Best Practice: Use lambda for concise datetime formatting,"[26486, 227, 6705, 19939, 25, 5765, 37456, 329, 35327, 4818, 8079, 33313]",1.0,5135,best_practice,910,Use lambda for concise datetime formatting,,5084,"    code:ËØÅÂà∏‰ª£Á†ÅÔºåÊîØÊåÅËÇ°Á•®,ETF/LOF,ÊúüË¥ß/ÊúüÊùÉ,Ê∏ØËÇ°","[220, 220, 220, 2438, 25, 46237, 223, 26344, 116, 47987, 163, 254, 223, 171, 120, 234, 162, 242, 107, 162, 234, 223, 164, 224, 94, 163, 98, 101, 11, 22274, 14, 43, 19238, 11, 17312, 253, 164, 112, 100, 14, 17312, 253, 30266, 225, 11, 162, 116, 107, 164, 224, 94]"
‚úÖ Best Practice: Convert datetime column to datetime type,"[26486, 227, 6705, 19939, 25, 38240, 4818, 8079, 5721, 284, 4818, 8079, 2099]",0.5,5189,best_practice,921,Convert datetime column to datetime type,,5135,        tor:Êç¢ÊâãÁéáÔºåÈªòËÆ§‰∏çËøîÂõûÔºåËøîÂõûÈúÄÊåáÂÆöÔºöfactor=['tor'],"[220, 220, 220, 220, 220, 220, 220, 7332, 25, 162, 235, 95, 33699, 233, 163, 236, 229, 171, 120, 234, 165, 119, 246, 164, 106, 97, 38834, 32573, 242, 32368, 252, 171, 120, 234, 32573, 242, 32368, 252, 165, 250, 222, 162, 234, 229, 22522, 248, 171, 120, 248, 31412, 28, 17816, 13165, 20520]"
‚úÖ Best Practice: Use method chaining for DataFrame operations,"[26486, 227, 6705, 19939, 25, 5765, 2446, 442, 1397, 329, 6060, 19778, 4560]",1.0,5212,best_practice,923,Use method chaining for DataFrame operations,,5189,    retry_count:ÁΩëÁªúÈáçËØïÊ¨°Êï∞,"[220, 220, 220, 1005, 563, 62, 9127, 25, 163, 121, 239, 163, 119, 250, 34932, 235, 46237, 243, 162, 105, 94, 46763, 108]"
‚úÖ Best Practice: Sort data by index for consistency,"[26486, 227, 6705, 19939, 25, 33947, 1366, 416, 6376, 329, 15794]",1.0,5221,best_practice,928,Sort data by index for consistency,,5212,    code:‰ª£Á†Å,"[220, 220, 220, 2438, 25, 47987, 163, 254, 223]"
‚úÖ Best Practice: Adjust volume for specific ktype,"[26486, 227, 6705, 19939, 25, 20292, 6115, 329, 2176, 479, 4906]",1.0,5271,best_practice,932,Adjust volume for specific ktype,,5221,    code/open/close/high/low/avg_priceÔºöÂùá‰ª∑  positionÔºöÊåÅ‰ªìÈáè  volÔºöÊàê‰∫§ÊÄªÈáè,"[220, 220, 220, 2438, 14, 9654, 14, 19836, 14, 8929, 14, 9319, 14, 615, 70, 62, 20888, 171, 120, 248, 161, 251, 229, 20015, 115, 220, 2292, 171, 120, 248, 162, 234, 223, 20015, 241, 34932, 237, 220, 2322, 171, 120, 248, 22755, 238, 12859, 97, 45250, 119, 34932, 237]"
‚úÖ Best Practice: Drop unnecessary columns for clarity,"[26486, 227, 6705, 19939, 25, 14258, 13114, 15180, 329, 16287]",1.0,5292,best_practice,941,Drop unnecessary columns for clarity,,5271,            ktype = freq.strip().upper(),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 479, 4906, 796, 2030, 80, 13, 36311, 22446, 45828, 3419]"
‚úÖ Best Practice: Use a separate function for factor adjustment,"[26486, 227, 6705, 19939, 25, 5765, 257, 4553, 2163, 329, 5766, 15068]",1.0,5305,best_practice,946,Use a separate function for factor adjustment,,5292,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Merge DataFrames for additional data,"[26486, 227, 6705, 19939, 25, 39407, 6060, 35439, 329, 3224, 1366]",0.5,5332,best_practice,949,Merge DataFrames for additional data,,5305,            if ktype in ct.KTYPE_LOW_COLS:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 479, 4906, 287, 269, 83, 13, 42, 25216, 62, 43, 3913, 62, 25154, 50, 25]"
‚úÖ Best Practice: Fill missing values with backfill method,"[26486, 227, 6705, 19939, 25, 27845, 4814, 3815, 351, 736, 20797, 2446]",0.5,5355,best_practice,951,Fill missing values with backfill method,,5332,                for i in range(100): ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 1312, 287, 2837, 7, 3064, 2599, 220]"
"‚ö†Ô∏è SAST Risk (Low): Use of deprecated 'ix' indexer, which can lead to unexpected behavior","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 39224, 705, 844, 6, 6376, 263, 11, 543, 460, 1085, 284, 10059, 4069]",1.0,5368,sast_risk,935,"Use of deprecated 'ix' indexer, which can lead to unexpected behavior",Low,5355,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
üß† ML Signal: Usage of lambda function for mapping,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 37456, 2163, 329, 16855]",0.5,5384,ml_signal,937,Usage of lambda function for mapping,,5368,            if conn is None:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 48260, 318, 6045, 25]"
üß† ML Signal: Conditional logic based on variable 'adj',"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 7885, 705, 41255, 6]",1.0,5401,ml_signal,939,Conditional logic based on variable 'adj',,5384,                return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
üß† ML Signal: Mapping function applied to data column,"[8582, 100, 254, 10373, 26484, 25, 337, 5912, 2163, 5625, 284, 1366, 5721]",1.0,5432,ml_signal,945,Mapping function applied to data column,,5401,"                func = getattr(api, ct.ASSET[asset])","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 25439, 796, 651, 35226, 7, 15042, 11, 269, 83, 13, 10705, 2767, 58, 562, 316, 12962]"
‚úÖ Best Practice: Dropping temporary columns after use to maintain clean data structure,"[26486, 227, 6705, 19939, 25, 21045, 2105, 8584, 15180, 706, 779, 284, 5529, 3424, 1366, 4645]",1.0,5464,best_practice,947,Dropping temporary columns after use to maintain clean data structure,,5432,                ktype = 'XD' if ktype == 'D' else ktype,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 479, 4906, 796, 705, 55, 35, 6, 611, 479, 4906, 6624, 705, 35, 6, 2073, 479, 4906]"
‚úÖ Best Practice: Checking for None and length > 0 before processing,"[26486, 227, 6705, 19939, 25, 39432, 329, 6045, 290, 4129, 1875, 657, 878, 7587]",1.0,5491,best_practice,949,Checking for None and length > 0 before processing,,5464,            if ktype in ct.KTYPE_LOW_COLS:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 479, 4906, 287, 269, 83, 13, 42, 25216, 62, 43, 3913, 62, 25154, 50, 25]"
üß† ML Signal: Checking for specific value in list,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 2176, 1988, 287, 1351]",1.0,5514,ml_signal,951,Checking for specific value in list,,5491,                for i in range(100): ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 1312, 287, 2837, 7, 3064, 2599, 220]"
üß† ML Signal: Conditional logic based on variable 'ktype',"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 7885, 705, 74, 4906, 6]",1.0,5559,ml_signal,954,Conditional logic based on variable 'ktype',,5514,"                    data = data.append(df) if i == 0 else df.append(data,  ignore_index=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 33295, 7, 7568, 8, 611, 1312, 6624, 657, 2073, 47764, 13, 33295, 7, 7890, 11, 220, 8856, 62, 9630, 28, 17821, 8]"
‚úÖ Best Practice: Merging dataframes with index alignment,"[26486, 227, 6705, 19939, 25, 4638, 2667, 1366, 37805, 351, 6376, 19114]",0.5,5583,best_practice,956,Merging dataframes with index alignment,,5559,                        break,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2270]"
‚úÖ Best Practice: Using fillna with method to handle missing data,"[26486, 227, 6705, 19939, 25, 8554, 6070, 2616, 351, 2446, 284, 5412, 4814, 1366]",1.0,5606,best_practice,958,Using fillna with method to handle missing data,,5583,            if ktype in ct.KTYPE_ARR:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 479, 4906, 287, 269, 83, 13, 42, 25216, 62, 26465, 25]"
"‚ö†Ô∏è SAST Risk (Medium): Use of deprecated 'ix' indexer, which can lead to unexpected behavior","[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 5765, 286, 39224, 705, 844, 6, 6376, 263, 11, 543, 460, 1085, 284, 10059, 4069]",1.0,5636,sast_risk,953,"Use of deprecated 'ix' indexer, which can lead to unexpected behavior",Medium,5606,                    df =  api.to_df(ds),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 220, 40391, 13, 1462, 62, 7568, 7, 9310, 8]"
‚úÖ Best Practice: Use string formatting for better readability and maintainability,"[26486, 227, 6705, 19939, 25, 5765, 4731, 33313, 329, 1365, 1100, 1799, 290, 5529, 1799]",0.5,5669,best_practice,968,Use string formatting for better readability and maintainability,,5636,"                .set_index('datetime', drop=True, inplace=False) \","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 764, 2617, 62, 9630, 10786, 19608, 8079, 3256, 4268, 28, 17821, 11, 287, 5372, 28, 25101, 8, 3467]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide errors and make debugging difficult,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 8563, 290, 787, 28769, 2408]",1.0,5698,sast_risk,977,Catching broad exceptions can hide errors and make debugging difficult,Low,5669,                data = data[ct.BAR_X_COLS],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 58, 310, 13, 33, 1503, 62, 55, 62, 25154, 50, 60]"
‚úÖ Best Practice: The 'else' block after 'try' is redundant if 'except' returns,"[26486, 227, 6705, 19939, 25, 383, 705, 17772, 6, 2512, 706, 705, 28311, 6, 318, 30806, 611, 705, 16341, 6, 5860]",0.5,5737,best_practice,980,The 'else' block after 'try' is redundant if 'except' returns,,5698,                    data = data[ct.BAR_X_FUTURE_RL_COLS],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 58, 310, 13, 33, 1503, 62, 55, 62, 37, 3843, 11335, 62, 7836, 62, 25154, 50, 60]"
‚ö†Ô∏è SAST Risk (Low): Raising a generic IOError without context can make error handling difficult,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 257, 14276, 24418, 12331, 1231, 4732, 460, 787, 4049, 9041, 2408]",0.5,5754,sast_risk,984,Raising a generic IOError without context can make error handling difficult,Low,5737,            if asset == 'E':,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 11171, 6624, 705, 36, 10354]"
‚úÖ Best Practice: Consider providing type hints for function parameters and return type for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 12642, 4955, 2099, 20269, 329, 2163, 10007, 290, 1441, 2099, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",0.5,5771,best_practice,981,Consider providing type hints for function parameters and return type for better readability and maintainability.,,5754,                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Conditional logic based on asset type can indicate different processing paths.,"[8582, 100, 254, 10373, 26484, 25, 9724, 1859, 9156, 1912, 319, 11171, 2099, 460, 7603, 1180, 7587, 13532, 13]",0.5,5792,ml_signal,985,Conditional logic based on asset type can indicate different processing paths.,,5771,                if adj is not None:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 9224, 318, 407, 6045, 25]"
üß† ML Signal: Different asset types trigger different function calls.,"[8582, 100, 254, 10373, 26484, 25, 20615, 11171, 3858, 7616, 1180, 2163, 3848, 13]",0.5,5836,ml_signal,988,Different asset types trigger different function calls.,,5792,"                        data = data.merge(df, left_index=True, right_index=True)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 647, 469, 7, 7568, 11, 1364, 62, 9630, 28, 17821, 11, 826, 62, 9630, 28, 17821, 8]"
"‚ö†Ô∏è SAST Risk (Low): Using os.path.exists can be risky if the path is user-controlled, leading to potential path traversal issues.","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 28686, 13, 6978, 13, 1069, 1023, 460, 307, 17564, 611, 262, 3108, 318, 2836, 12, 14401, 11, 3756, 284, 2785, 3108, 33038, 282, 2428, 13]",0.5,5866,sast_risk,991,"Using os.path.exists can be risky if the path is user-controlled, leading to potential path traversal issues.",Low,5836,                        def get_val(day):,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 825, 651, 62, 2100, 7, 820, 2599]"
üß† ML Signal: Use of pandas to read data from a pickle file indicates data processing patterns.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 19798, 292, 284, 1100, 1366, 422, 257, 2298, 293, 2393, 9217, 1366, 7587, 7572, 13]",0.5,5918,ml_signal,993,Use of pandas to read data from a pickle file indicates data processing patterns.,,5866,                        data['adj_factor'] = data.index.map(lambda x: get_val(str(x)[0:10])),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 17816, 41255, 62, 31412, 20520, 796, 1366, 13, 9630, 13, 8899, 7, 50033, 2124, 25, 651, 62, 2100, 7, 2536, 7, 87, 38381, 15, 25, 940, 60, 4008]"
üß† ML Signal: Function call to get_instrument suggests dynamic data retrieval.,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 284, 651, 62, 259, 43872, 5644, 8925, 1366, 45069, 13]",0.5,5961,ml_signal,996,Function call to get_instrument suggests dynamic data retrieval.,,5918,                            data[col] = data[col] * data['adj_factor'],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 58, 4033, 60, 796, 1366, 58, 4033, 60, 1635, 1366, 17816, 41255, 62, 31412, 20520]"
üß† ML Signal: Use of to_pickle indicates data serialization patterns.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 284, 62, 27729, 293, 9217, 1366, 11389, 1634, 7572, 13]",0.5,6004,ml_signal,996,Use of to_pickle indicates data serialization patterns.,,5961,                            data[col] = data[col] * data['adj_factor'],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 58, 4033, 60, 796, 1366, 58, 4033, 60, 1635, 1366, 17816, 41255, 62, 31412, 20520]"
‚ö†Ô∏è SAST Risk (Medium): Accessing DataFrame values without checking if the code exists can lead to IndexError.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 31205, 2599, 8798, 278, 6060, 19778, 3815, 1231, 10627, 611, 262, 2438, 7160, 460, 1085, 284, 12901, 12331, 13]",1.0,6047,sast_risk,996,Accessing DataFrame values without checking if the code exists can lead to IndexError.,Medium,6004,                            data[col] = data[col] * data['adj_factor'],"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 58, 4033, 60, 796, 1366, 58, 4033, 60, 1635, 1366, 17816, 41255, 62, 31412, 20520]"
‚úÖ Best Practice: Convert date to integer for consistent format and easier comparison,"[26486, 227, 6705, 19939, 25, 38240, 3128, 284, 18253, 329, 6414, 5794, 290, 4577, 7208]",0.5,6094,best_practice,1025,Convert date to integer for consistent format and easier comparison,,6047,                        data['ma%s'%a] = data['ma%s'%a].astype(float),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 17816, 2611, 4, 82, 6, 4, 64, 60, 796, 1366, 17816, 2611, 4, 82, 6, 4, 64, 4083, 459, 2981, 7, 22468, 8]"
‚úÖ Best Practice: Convert today's date to integer for consistent format and easier comparison,"[26486, 227, 6705, 19939, 25, 38240, 1909, 338, 3128, 284, 18253, 329, 6414, 5794, 290, 4577, 7208]",0.5,6123,best_practice,1027,Convert today's date to integer for consistent format and easier comparison,,6094,                data[col] = data[col].astype(float),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 58, 4033, 60, 796, 1366, 58, 4033, 4083, 459, 2981, 7, 22468, 8]"
‚ö†Ô∏è SAST Risk (Low): Printing error messages can expose sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 4049, 6218, 460, 15651, 8564, 1321]",1.0,6136,sast_risk,1032,Printing error messages can expose sensitive information,Low,6123,            return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
‚úÖ Best Practice: Use a helper function to determine market code for better readability,"[26486, 227, 6705, 19939, 25, 5765, 257, 31904, 2163, 284, 5004, 1910, 2438, 329, 1365, 1100, 1799]",0.5,6155,best_practice,1037,Use a helper function to determine market code for better readability,,6136,    raise IOError(ct.NETWORK_URL_ERROR_MSG),"[220, 220, 220, 5298, 24418, 12331, 7, 310, 13, 12884, 33249, 62, 21886, 62, 24908, 62, 5653, 38, 8]"
‚úÖ Best Practice: Use appropriate API connection based on asset type,"[26486, 227, 6705, 19939, 25, 5765, 5035, 7824, 4637, 1912, 319, 11171, 2099]",0.5,6155,best_practice,1038,Use appropriate API connection based on asset type,,6155,,[]
üß† ML Signal: Pattern of fetching transaction data for the current date,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 21207, 278, 8611, 1366, 329, 262, 1459, 3128]",0.5,6174,ml_signal,1043,Pattern of fetching transaction data for the current date,,6155,        mkcode = ct._market_code(code),"[220, 220, 220, 220, 220, 220, 220, 33480, 8189, 796, 269, 83, 13557, 10728, 62, 8189, 7, 8189, 8]"
üß† ML Signal: Pattern of fetching historical transaction data,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 21207, 278, 6754, 8611, 1366]",0.5,6179,ml_signal,1046,Pattern of fetching historical transaction data,,6174,    else:,"[220, 220, 220, 2073, 25]"
‚úÖ Best Practice: Convert data to DataFrame for easier manipulation,"[26486, 227, 6705, 19939, 25, 38240, 1366, 284, 6060, 19778, 329, 4577, 17512]",0.5,6210,best_practice,1048,Convert data to DataFrame for easier manipulation,,6179,            mks = pd.read_pickle(ct.INST_PLK_F),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 285, 591, 796, 279, 67, 13, 961, 62, 27729, 293, 7, 310, 13, 38604, 62, 6489, 42, 62, 37, 8]"
‚úÖ Best Practice: Append data to DataFrame in a consistent manner,"[26486, 227, 6705, 19939, 25, 2034, 437, 1366, 284, 6060, 19778, 287, 257, 6414, 5642]",0.5,6232,best_practice,1050,Append data to DataFrame in a consistent manner,,6210,            mks = get_instrument(xapi),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 285, 591, 796, 651, 62, 259, 43872, 7, 87, 15042, 8]"
‚úÖ Best Practice: Use lambda for concise date formatting,"[26486, 227, 6705, 19939, 25, 5765, 37456, 329, 35327, 3128, 33313]",1.0,6236,best_practice,1057,Use lambda for concise date formatting,,6232,"    """"""","[220, 220, 220, 37227]"
‚úÖ Best Practice: Select relevant columns for the final DataFrame,"[26486, 227, 6705, 19939, 25, 9683, 5981, 15180, 329, 262, 2457, 6060, 19778]",0.5,6241,best_practice,1059,Select relevant columns for the final DataFrame,,6236,    Parameters:,"[220, 220, 220, 40117, 25]"
‚úÖ Best Practice: Rename columns for clarity,"[26486, 227, 6705, 19939, 25, 7152, 480, 15180, 329, 16287]",0.5,6292,best_practice,1061,Rename columns for clarity,,6241,"    code:ËØÅÂà∏‰ª£Á†ÅÔºåÊîØÊåÅËÇ°Á•®,ETF/LOF,ÊúüË¥ß/ÊúüÊùÉ,Ê∏ØËÇ°","[220, 220, 220, 2438, 25, 46237, 223, 26344, 116, 47987, 163, 254, 223, 171, 120, 234, 162, 242, 107, 162, 234, 223, 164, 224, 94, 163, 98, 101, 11, 22274, 14, 43, 19238, 11, 17312, 253, 164, 112, 100, 14, 17312, 253, 30266, 225, 11, 162, 116, 107, 164, 224, 94]"
‚úÖ Best Practice: Drop unnecessary columns for the current date,"[26486, 227, 6705, 19939, 25, 14258, 13114, 15180, 329, 262, 1459, 3128]",0.5,6423,best_practice,1067,Drop unnecessary columns for the current date,,6292,                            ‰∏äÊµ∑‰∏™ËÇ°ÊúüÊùÉ         QQ È¶ôÊ∏ØÊåáÊï∞         FH ÈÉëÂ∑ûÂïÜÂìÅ         QZ Â§ßËøûÂïÜÂìÅ         QD ‰∏äÊµ∑ÊúüË¥ß         QS,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 41468, 38184, 115, 10310, 103, 164, 224, 94, 17312, 253, 30266, 225, 220, 220, 220, 220, 220, 220, 220, 220, 1195, 48, 16268, 99, 247, 162, 116, 107, 162, 234, 229, 46763, 108, 220, 220, 220, 220, 220, 220, 220, 220, 376, 39, 16268, 225, 239, 32432, 252, 161, 243, 228, 161, 241, 223, 220, 220, 220, 220, 220, 220, 220, 220, 1195, 57, 36469, 100, 32573, 252, 161, 243, 228, 161, 241, 223, 220, 220, 220, 220, 220, 220, 220, 220, 1195, 35, 220, 41468, 38184, 115, 17312, 253, 164, 112, 100, 220, 220, 220, 220, 220, 220, 220, 220, 1195, 50]"
‚úÖ Best Practice: Drop unnecessary columns for historical data,"[26486, 227, 6705, 19939, 25, 14258, 13114, 15180, 329, 6754, 1366]",0.5,6581,best_practice,1070,Drop unnecessary columns for historical data,,6423,                            ÁæéËÇ°Áü•ÂêçÂÖ¨Âè∏         MG BËÇ°ËΩ¨HËÇ°         HB ËÇ°‰ªΩËΩ¨ËÆ©         SB ËÇ°ÊåáÊúüË¥ß         CZ È¶ôÊ∏ØÂàõ‰∏öÊùø         KG È¶ôÊ∏Ø‰ø°ÊâòÂü∫Èáë         KT,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 13328, 122, 236, 164, 224, 94, 163, 253, 98, 28938, 235, 17739, 105, 20998, 116, 220, 220, 220, 220, 220, 220, 220, 220, 34809, 347, 164, 224, 94, 164, 121, 105, 39, 164, 224, 94, 220, 220, 220, 220, 220, 220, 220, 220, 25997, 5525, 224, 94, 20015, 121, 164, 121, 105, 164, 106, 102, 220, 220, 220, 220, 220, 220, 220, 220, 18056, 5525, 224, 94, 162, 234, 229, 17312, 253, 164, 112, 100, 220, 220, 220, 220, 220, 220, 220, 220, 327, 57, 16268, 99, 247, 162, 116, 107, 26344, 249, 10310, 248, 30266, 123, 220, 220, 220, 220, 220, 220, 220, 220, 509, 38, 16268, 99, 247, 162, 116, 107, 46479, 94, 33699, 246, 161, 253, 118, 34932, 239, 220, 220, 220, 220, 220, 220, 220, 220, 42293]"
‚úÖ Best Practice: Use loc for conditional updates,"[26486, 227, 6705, 19939, 25, 5765, 1179, 329, 26340, 5992]",0.5,6646,best_practice,1072,Use loc for conditional updates,,6581,                              ‰∏≠ËØÅÊåáÊï∞         ZZ Ê∏ØËÇ°ÈÄö         GH,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 40792, 46237, 223, 162, 234, 229, 46763, 108, 220, 220, 220, 220, 220, 220, 220, 220, 1168, 57, 10545, 116, 107, 164, 224, 94, 34460, 248, 220, 220, 220, 220, 220, 220, 220, 220, 24739]"
‚úÖ Best Practice: Sort data by date for consistency,"[26486, 227, 6705, 19939, 25, 33947, 1366, 416, 3128, 329, 15794]",0.5,6650,best_practice,1075,Sort data by date for consistency,,6646,    Return,"[220, 220, 220, 8229]"
‚úÖ Best Practice: Rename columns for clarity,"[26486, 227, 6705, 19939, 25, 7152, 480, 15180, 329, 16287]",0.5,6655,best_practice,1076,Rename columns for clarity,,6650,    ----------,"[220, 220, 220, 24200, 438]"
‚úÖ Best Practice: Drop unnecessary columns for the current date,"[26486, 227, 6705, 19939, 25, 14258, 13114, 15180, 329, 262, 1459, 3128]",0.5,6655,best_practice,1085,Drop unnecessary columns for the current date,,6655,,[]
‚úÖ Best Practice: Drop unnecessary columns for historical data,"[26486, 227, 6705, 19939, 25, 14258, 13114, 15180, 329, 6754, 1366]",0.5,6655,best_practice,1085,Drop unnecessary columns for historical data,,6655,,[]
‚úÖ Best Practice: Rename columns for clarity,"[26486, 227, 6705, 19939, 25, 7152, 480, 15180, 329, 16287]",0.5,6666,best_practice,1087,Rename columns for clarity,,6655,    code = code.strip().upper(),"[220, 220, 220, 2438, 796, 2438, 13, 36311, 22446, 45828, 3419]"
‚úÖ Best Practice: Drop unnecessary columns for other market codes,"[26486, 227, 6705, 19939, 25, 14258, 13114, 15180, 329, 584, 1910, 12416]",0.5,6679,best_practice,1090,Drop unnecessary columns for other market codes,,6666,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
‚ö†Ô∏è SAST Risk (Low): Printing exception messages can expose sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 6631, 6218, 460, 15651, 8564, 1321]",1.0,6707,sast_risk,1093,Printing exception messages can expose sensitive information,Low,6679,                print(ct.MSG_NOT_CONNECTED),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 310, 13, 5653, 38, 62, 11929, 62, 10943, 48842, 1961, 8]"
‚úÖ Best Practice: Add a docstring to describe the function's purpose and parameters,"[26486, 227, 6705, 19939, 25, 3060, 257, 2205, 8841, 284, 6901, 262, 2163, 338, 4007, 290, 10007]",1.0,6712,best_practice,1076,Add a docstring to describe the function's purpose and parameters,,6707,    ----------,"[220, 220, 220, 24200, 438]"
‚ö†Ô∏è SAST Risk (Low): Printing error messages can expose sensitive information,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 4049, 6218, 460, 15651, 8564, 1321]",1.0,6732,sast_risk,1089,Printing error messages can expose sensitive information,Low,6712,"    today = int(str(du.today()).replace('-', ''))","[220, 220, 220, 1909, 796, 493, 7, 2536, 7, 646, 13, 40838, 3419, 737, 33491, 10786, 12, 3256, 10148, 4008]"
‚úÖ Best Practice: Use isinstance for type checking,"[26486, 227, 6705, 19939, 25, 5765, 318, 39098, 329, 2099, 10627]",1.0,6749,best_practice,1094,Use isinstance for type checking,,6732,                return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
‚úÖ Best Practice: Use pd.concat instead of DataFrame.append for better performance,"[26486, 227, 6705, 19939, 25, 5765, 279, 67, 13, 1102, 9246, 2427, 286, 6060, 19778, 13, 33295, 329, 1365, 2854]",1.0,6775,best_practice,1104,Use pd.concat instead of DataFrame.append for better performance,,6749,                df =  api.to_df(ds),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 47764, 796, 220, 40391, 13, 1462, 62, 7568, 7, 9310, 8]"
‚ö†Ô∏è SAST Risk (Low): Catching broad exceptions can hide bugs and make debugging difficult,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 327, 19775, 3154, 13269, 460, 7808, 11316, 290, 787, 28769, 2408]",1.0,6799,sast_risk,1126,Catching broad exceptions can hide bugs and make debugging difficult,Low,6775,                    if date == today:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 3128, 6624, 1909, 25]"
‚ö†Ô∏è SAST Risk (Low): Raising generic IOError without specific context can be misleading,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 7567, 1710, 14276, 24418, 12331, 1231, 2176, 4732, 460, 307, 15850]",1.0,6845,sast_risk,1130,Raising generic IOError without specific context can be misleading,Low,6799,"                        data = data.drop(['hour', 'minute', 'nature', 'direction'], axis=1)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 14781, 7, 17816, 9769, 3256, 705, 11374, 3256, 705, 21353, 3256, 705, 37295, 6, 4357, 16488, 28, 16, 8]"
‚úÖ Best Practice: Initialize variables before using them in a loop,"[26486, 227, 6705, 19939, 25, 20768, 1096, 9633, 878, 1262, 606, 287, 257, 9052]",0.5,6891,best_practice,1130,Initialize variables before using them in a loop,,6845,"                        data = data.drop(['hour', 'minute', 'nature', 'direction'], axis=1)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 14781, 7, 17816, 9769, 3256, 705, 11374, 3256, 705, 21353, 3256, 705, 37295, 6, 4357, 16488, 28, 16, 8]"
üß† ML Signal: Iterating over a range with a fixed step size,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 2837, 351, 257, 5969, 2239, 2546]",1.0,6944,ml_signal,1133,Iterating over a range with a fixed step size,,6891,"                    data = data.drop(['hour', 'minute', 'nature_name', 'zengcang', 'direction', 'nature'], axis=1)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 14781, 7, 17816, 9769, 3256, 705, 11374, 3256, 705, 21353, 62, 3672, 3256, 705, 89, 1516, 66, 648, 3256, 705, 37295, 3256, 705, 21353, 6, 4357, 16488, 28, 16, 8]"
‚úÖ Best Practice: Use list concatenation for readability,"[26486, 227, 6705, 19939, 25, 5765, 1351, 1673, 36686, 341, 329, 1100, 1799]",0.5,6956,best_practice,1135,Use list concatenation for readability,,6944,        except Exception as e:,"[220, 220, 220, 220, 220, 220, 220, 2845, 35528, 355, 304, 25]"
‚ö†Ô∏è SAST Risk (Low): Assumes that the API returns a list with a predictable length,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 2195, 8139, 326, 262, 7824, 5860, 257, 1351, 351, 257, 20039, 4129]",0.5,6965,sast_risk,1137,Assumes that the API returns a list with a predictable length,Low,6956,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Converting data to a DataFrame before returning,"[8582, 100, 254, 10373, 26484, 25, 35602, 889, 1366, 284, 257, 6060, 19778, 878, 8024]",1.0,6965,ml_signal,1139,Converting data to a DataFrame before returning,,6965,,[]
‚úÖ Best Practice: Import statements should be at the top of the file for better readability and maintainability.,"[26486, 227, 6705, 19939, 25, 17267, 6299, 815, 307, 379, 262, 1353, 286, 262, 2393, 329, 1365, 1100, 1799, 290, 5529, 1799, 13]",1.0,6978,best_practice,1138,Import statements should be at the top of the file for better readability and maintainability.,,6965,            return data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1366]"
‚úÖ Best Practice: Use of default parameter values to provide flexibility in function usage.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 3815, 284, 2148, 13688, 287, 2163, 8748, 13]",0.5,7003,best_practice,1142,Use of default parameter values to provide flexibility in function usage.,,6978,"def quotes(symbols, conn=None, asset='E', market=[], retry_count = 3):","[4299, 13386, 7, 1837, 2022, 10220, 11, 48260, 28, 14202, 11, 11171, 11639, 36, 3256, 1910, 41888, 4357, 1005, 563, 62, 9127, 796, 513, 2599]"
üß† ML Signal: Use of default parameter values can indicate optional dependencies or configurations.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4277, 11507, 3815, 460, 7603, 11902, 20086, 393, 25412, 13]",0.5,7028,ml_signal,1142,Use of default parameter values can indicate optional dependencies or configurations.,,7003,"def quotes(symbols, conn=None, asset='E', market=[], retry_count = 3):","[4299, 13386, 7, 1837, 2022, 10220, 11, 48260, 28, 14202, 11, 11171, 11639, 36, 3256, 1910, 41888, 4357, 1005, 563, 62, 9127, 796, 513, 2599]"
"üß† ML Signal: Iterative data fetching pattern, common in data processing tasks.","[8582, 100, 254, 10373, 26484, 25, 40806, 876, 1366, 21207, 278, 3912, 11, 2219, 287, 1366, 7587, 8861, 13]",0.5,7050,ml_signal,1147,"Iterative data fetching pattern, common in data processing tasks.",,7028,"        symbols : string, array-like object (list, tuple, Series).","[220, 220, 220, 220, 220, 220, 220, 14354, 1058, 4731, 11, 7177, 12, 2339, 2134, 357, 4868, 11, 46545, 11, 7171, 737]"
‚ö†Ô∏è SAST Risk (Low): Potential for infinite loop if `get_instrument_info` consistently returns 300 items.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 15541, 9052, 611, 4600, 1136, 62, 259, 43872, 62, 10951, 63, 9835, 5860, 5867, 3709, 13]",0.5,7054,sast_risk,1150,Potential for infinite loop if `get_instrument_info` consistently returns 300 items.,Low,7050,    -------,"[220, 220, 220, 35656]"
"üß† ML Signal: Conversion of data to a DataFrame, indicating data processing or analysis task.","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1366, 284, 257, 6060, 19778, 11, 12739, 1366, 7587, 393, 3781, 4876, 13]",0.5,7063,ml_signal,1154,"Conversion of data to a DataFrame, indicating data processing or analysis task.",,7054,        try:,"[220, 220, 220, 220, 220, 220, 220, 1949, 25]"
‚ö†Ô∏è SAST Risk (Low): Use of pickle for data serialization can lead to security risks if loading untrusted data.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 2298, 293, 329, 1366, 11389, 1634, 460, 1085, 284, 2324, 7476, 611, 11046, 1418, 81, 8459, 1366, 13]",0.5,7080,sast_risk,1157,Use of pickle for data serialization can lead to security risks if loading untrusted data.,Low,7063,                return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
"üß† ML Signal: Returning processed data, common in data transformation functions.","[8582, 100, 254, 10373, 26484, 25, 42882, 13686, 1366, 11, 2219, 287, 1366, 13389, 5499, 13]",0.5,7134,ml_signal,1160,"Returning processed data, common in data transformation functions.",,7080,"            if isinstance(symbols, list) or isinstance(symbols, set) or isinstance(symbols, tuple) or isinstance(symbols, pd.Series):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 1837, 2022, 10220, 11, 1351, 8, 393, 318, 39098, 7, 1837, 2022, 10220, 11, 900, 8, 393, 318, 39098, 7, 1837, 2022, 10220, 11, 46545, 8, 393, 318, 39098, 7, 1837, 2022, 10220, 11, 279, 67, 13, 27996, 2599]"
‚úÖ Best Practice: Import statements should be at the top of the file.,"[26486, 227, 6705, 19939, 25, 17267, 6299, 815, 307, 379, 262, 1353, 286, 262, 2393, 13]",1.0,7147,best_practice,1153,Import statements should be at the top of the file.,,7134,    for _ in range(retry_count):,"[220, 220, 220, 329, 4808, 287, 2837, 7, 1186, 563, 62, 9127, 2599]"
üß† ML Signal: Function with default parameter value indicating optional argument usage.,"[8582, 100, 254, 10373, 26484, 25, 15553, 351, 4277, 11507, 1988, 12739, 11902, 4578, 8748, 13]",0.5,7164,ml_signal,1157,Function with default parameter value indicating optional argument usage.,,7147,                return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
‚úÖ Best Practice: Use of default parameter value to handle optional argument.,"[26486, 227, 6705, 19939, 25, 5765, 286, 4277, 11507, 1988, 284, 5412, 11902, 4578, 13]",0.5,7181,best_practice,1157,Use of default parameter value to handle optional argument.,,7164,                return None,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 6045]"
‚ö†Ô∏è SAST Risk (Low): Potential use of an undefined variable 'ct' if not imported.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 779, 286, 281, 28721, 7885, 705, 310, 6, 611, 407, 17392, 13]",0.5,7235,sast_risk,1160,Potential use of an undefined variable 'ct' if not imported.,Low,7181,"            if isinstance(symbols, list) or isinstance(symbols, set) or isinstance(symbols, tuple) or isinstance(symbols, pd.Series):","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 611, 318, 39098, 7, 1837, 2022, 10220, 11, 1351, 8, 393, 318, 39098, 7, 1837, 2022, 10220, 11, 900, 8, 393, 318, 39098, 7, 1837, 2022, 10220, 11, 46545, 8, 393, 318, 39098, 7, 1837, 2022, 10220, 11, 279, 67, 13, 27996, 2599]"
üß† ML Signal: Use of a loop to process data in chunks.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 9052, 284, 1429, 1366, 287, 22716, 13]",0.5,7262,ml_signal,1165,Use of a loop to process data in chunks.,,7235,                    elif asset == 'INDEX':,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1288, 361, 11171, 6624, 705, 12115, 6369, 10354]"
"üß† ML Signal: Conversion of data to a DataFrame, indicating data processing pattern.","[8582, 100, 254, 10373, 26484, 25, 44101, 286, 1366, 284, 257, 6060, 19778, 11, 12739, 1366, 7587, 3912, 13]",0.5,7301,ml_signal,1171,"Conversion of data to a DataFrame, indicating data processing pattern.",,7262,"                mkcode = _get_mkcode(symbols, asset=asset, xapi=xapi)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 33480, 8189, 796, 4808, 1136, 62, 28015, 8189, 7, 1837, 2022, 10220, 11, 11171, 28, 562, 316, 11, 2124, 15042, 28, 87, 15042, 8]"
‚úÖ Best Practice: Check if xapi is None to avoid calling methods on a NoneType,"[26486, 227, 6705, 19939, 25, 6822, 611, 2124, 15042, 318, 6045, 284, 3368, 4585, 5050, 319, 257, 6045, 6030]",0.5,7324,best_practice,1174,Check if xapi is None to avoid calling methods on a NoneType,,7301,                elif asset == 'INDEX':,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1288, 361, 11171, 6624, 705, 12115, 6369, 10354]"
‚ö†Ô∏è SAST Risk (Low): Printing error messages can expose internal state,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 4049, 6218, 460, 15651, 5387, 1181]",1.0,7341,sast_risk,1176,Printing error messages can expose internal state,Low,7324,                else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Usage of xapi.get_markets() indicates interaction with an API,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 2124, 15042, 13, 1136, 62, 34162, 3419, 9217, 10375, 351, 281, 7824]",0.5,7397,ml_signal,1179,Usage of xapi.get_markets() indicates interaction with an API,,7341,"                data = data.drop(['market', 'active1', 'active2', 'reversed_bytes0', 'reversed_bytes1', 'reversed_bytes2',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 14781, 7, 17816, 10728, 3256, 705, 5275, 16, 3256, 705, 5275, 17, 3256, 705, 260, 690, 276, 62, 33661, 15, 3256, 705, 260, 690, 276, 62, 33661, 16, 3256, 705, 260, 690, 276, 62, 33661, 17, 3256]"
üß† ML Signal: Conversion to DataFrame suggests data processing or analysis,"[8582, 100, 254, 10373, 26484, 25, 44101, 284, 6060, 19778, 5644, 1366, 7587, 393, 3781]",0.5,7438,ml_signal,1181,Conversion to DataFrame suggests data processing or analysis,,7397,"                                  'reversed_bytes4',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 260, 690, 276, 62, 33661, 19, 3256]"
"üß† ML Signal: Function definition with a single parameter, indicating a common pattern for data processing functions","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 2060, 11507, 11, 12739, 257, 2219, 3912, 329, 1366, 7587, 5499]",1.0,7479,ml_signal,1180,"Function definition with a single parameter, indicating a common pattern for data processing functions",,7438,"                                  'reversed_bytes3',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 260, 690, 276, 62, 33661, 18, 3256]"
‚ö†Ô∏è SAST Risk (Low): External URL usage in pd.read_csv can lead to data exposure or injection if not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 34579, 10289, 8748, 287, 279, 67, 13, 961, 62, 40664, 460, 1085, 284, 1366, 7111, 393, 16954, 611, 407, 6105, 31031]",0.5,7520,sast_risk,1181,External URL usage in pd.read_csv can lead to data exposure or injection if not properly validated,Low,7479,"                                  'reversed_bytes4',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 260, 690, 276, 62, 33661, 19, 3256]"
"üß† ML Signal: Setting a DataFrame index, a common operation in data manipulation tasks","[8582, 100, 254, 10373, 26484, 25, 25700, 257, 6060, 19778, 6376, 11, 257, 2219, 4905, 287, 1366, 17512, 8861]",0.5,7561,ml_signal,1185,"Setting a DataFrame index, a common operation in data manipulation tasks",,7520,"                                  'reversed_bytes8',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 260, 690, 276, 62, 33661, 23, 3256]"
"üß† ML Signal: Returning a DataFrame, indicating the function's purpose is data transformation","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 11, 12739, 262, 2163, 338, 4007, 318, 1366, 13389]",0.5,7607,ml_signal,1186,"Returning a DataFrame, indicating the function's purpose is data transformation",,7561,"                                  'reversed_bytes9'], axis=1)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 260, 690, 276, 62, 33661, 24, 6, 4357, 16488, 28, 16, 8]"
"üß† ML Signal: Function definition with a parameter, indicating a reusable component","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 11507, 11, 12739, 257, 42339, 7515]",1.0,7648,ml_signal,1185,"Function definition with a parameter, indicating a reusable component",,7607,"                                  'reversed_bytes8',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 260, 690, 276, 62, 33661, 23, 3256]"
‚ö†Ô∏è SAST Risk (Low): External URL usage can lead to security risks if not validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 34579, 10289, 8748, 460, 1085, 284, 2324, 7476, 611, 407, 31031]",1.0,7694,sast_risk,1186,External URL usage can lead to security risks if not validated,Low,7648,"                                  'reversed_bytes9'], axis=1)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 260, 690, 276, 62, 33661, 24, 6, 4357, 16488, 28, 16, 8]"
"üß† ML Signal: Reading data from a CSV file, indicating data processing","[8582, 100, 254, 10373, 26484, 25, 11725, 1366, 422, 257, 44189, 2393, 11, 12739, 1366, 7587]",1.0,7723,ml_signal,1188,"Reading data from a CSV file, indicating data processing",,7694,"                data = data.drop(['market'], axis=1)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1366, 796, 1366, 13, 14781, 7, 17816, 10728, 6, 4357, 16488, 28, 16, 8]"
‚úÖ Best Practice: Setting 'datetime' as index for better time series handling,"[26486, 227, 6705, 19939, 25, 25700, 705, 19608, 8079, 6, 355, 6376, 329, 1365, 640, 2168, 9041]",1.0,7732,best_practice,1191,Setting 'datetime' as index for better time series handling,,7723,        else:,"[220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"üß† ML Signal: Returning a DataFrame, indicating data transformation","[8582, 100, 254, 10373, 26484, 25, 42882, 257, 6060, 19778, 11, 12739, 1366, 13389]",0.5,7751,ml_signal,1193,"Returning a DataFrame, indicating data transformation",,7732,    raise IOError(ct.NETWORK_URL_ERROR_MSG),"[220, 220, 220, 5298, 24418, 12331, 7, 310, 13, 12884, 33249, 62, 21886, 62, 24908, 62, 5653, 38, 8]"
‚úÖ Best Practice: Use of a leading underscore in the function name indicates it's intended for internal use.,"[26486, 227, 6705, 19939, 25, 5765, 286, 257, 3756, 44810, 287, 262, 2163, 1438, 9217, 340, 338, 5292, 329, 5387, 779, 13]",1.0,7766,best_practice,1190,Use of a leading underscore in the function name indicates it's intended for internal use.,,7751,            print(e),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 68, 8]"
‚úÖ Best Practice: Importing only the required function from a module.,"[26486, 227, 6705, 19939, 25, 17267, 278, 691, 262, 2672, 2163, 422, 257, 8265, 13]",1.0,7779,best_practice,1192,Importing only the required function from a module.,,7766,            return data,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1441, 1366]"
‚úÖ Best Practice: Use of exponentiation for calculating powers of 10.,"[26486, 227, 6705, 19939, 25, 5765, 286, 28622, 3920, 329, 26019, 5635, 286, 838, 13]",0.5,7779,best_practice,1194,Use of exponentiation for calculating powers of 10.,,7779,,[]
üß† ML Signal: Use of random number generation.,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 4738, 1271, 5270, 13]",0.5,7779,ml_signal,1194,Use of random number generation.,,7779,,[]
‚ö†Ô∏è SAST Risk (Low): Predictable random number generation with randint.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 49461, 540, 4738, 1271, 5270, 351, 43720, 600, 13]",0.5,7779,sast_risk,1194,Predictable random number generation with randint.,Low,7779,,[]

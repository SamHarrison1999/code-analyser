[
  {
    "line": 6,
    "text": "import tushare.stock.trading as td",
    "annotation": "\u26a0\ufe0f SAST Risk (Medium): Importing external modules like tushare can introduce security risks if not properly vetted.",
    "confidence": 0.5,
    "tokens": [
      11748,
      256,
      1530,
      533,
      13,
      13578,
      13,
      2213,
      4980,
      355,
      41560
    ],
    "start_token": 0,
    "end_token": 11,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      31205,
      2599,
      17267,
      278,
      7097,
      13103,
      588,
      256,
      1530,
      533,
      460,
      10400,
      2324,
      7476,
      611,
      407,
      6105,
      48383,
      13
    ],
    "label": "sast_risk",
    "severity": "Medium",
    "reason": "Importing external modules like tushare can introduce security risks if not properly vetted."
  },
  {
    "line": 8,
    "text": "class TestTrading(unittest.TestCase):",
    "annotation": "\u2705 Best Practice: Class name should be descriptive and follow CamelCase naming convention",
    "confidence": 0.5,
    "tokens": [
      4871,
      6208,
      2898,
      4980,
      7,
      403,
      715,
      395,
      13,
      14402,
      20448,
      2599
    ],
    "start_token": 11,
    "end_token": 23,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5016,
      1438,
      815,
      307,
      35644,
      290,
      1061,
      43281,
      20448,
      19264,
      9831
    ],
    "label": "best_practice",
    "reason": "Class name should be descriptive and follow CamelCase naming convention"
  },
  {
    "line": 9,
    "text": "",
    "annotation": "\ud83e\udde0 ML Signal: Method setting fixed data values, useful for detecting hardcoded configurations",
    "confidence": 1.0,
    "tokens": [],
    "start_token": 23,
    "end_token": 23,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      4634,
      5969,
      1366,
      3815,
      11,
      4465,
      329,
      31521,
      1327,
      40976,
      25412
    ],
    "label": "ml_signal",
    "reason": "Method setting fixed data values, useful for detecting hardcoded configurations"
  },
  {
    "line": 11,
    "text": "        self.code = '600848'",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded date values, useful for detecting static date ranges",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      8189,
      796,
      705,
      8054,
      23,
      2780,
      6
    ],
    "start_token": 23,
    "end_token": 39,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      3128,
      3815,
      11,
      4465,
      329,
      31521,
      9037,
      3128,
      16069
    ],
    "label": "ml_signal",
    "reason": "Hardcoded date values, useful for detecting static date ranges"
  },
  {
    "line": 13,
    "text": "        self.end = '2014-11-07'",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded date values, useful for detecting static date ranges",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      437,
      796,
      705,
      4967,
      12,
      1157,
      12,
      2998,
      6
    ],
    "start_token": 39,
    "end_token": 57,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      3128,
      3815,
      11,
      4465,
      329,
      31521,
      9037,
      3128,
      16069
    ],
    "label": "ml_signal",
    "reason": "Hardcoded date values, useful for detecting static date ranges"
  },
  {
    "line": 13,
    "text": "        self.end = '2014-11-07'",
    "annotation": "\ud83e\udde0 ML Signal: Method name follows a common test naming pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      437,
      796,
      705,
      4967,
      12,
      1157,
      12,
      2998,
      6
    ],
    "start_token": 57,
    "end_token": 75,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method name follows a common test naming pattern"
  },
  {
    "line": 15,
    "text": "    def test_tickData(self):",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern for setting up test data",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      42298,
      6601,
      7,
      944,
      2599
    ],
    "start_token": 75,
    "end_token": 86,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      329,
      4634,
      510,
      1332,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method call pattern for setting up test data"
  },
  {
    "line": 16,
    "text": "        self.set_data()",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern for fetching tick data with parameters",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      62,
      7890,
      3419
    ],
    "start_token": 86,
    "end_token": 99,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      329,
      21207,
      278,
      4378,
      1366,
      351,
      10007
    ],
    "label": "ml_signal",
    "reason": "Method call pattern for fetching tick data with parameters"
  },
  {
    "line": 16,
    "text": "        self.set_data()",
    "annotation": "\u2705 Best Practice: Standard way to execute unit tests in Python",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      62,
      7890,
      3419
    ],
    "start_token": 99,
    "end_token": 112,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      8997,
      835,
      284,
      12260,
      4326,
      5254,
      287,
      11361
    ],
    "label": "best_practice",
    "reason": "Standard way to execute unit tests in Python"
  }
]
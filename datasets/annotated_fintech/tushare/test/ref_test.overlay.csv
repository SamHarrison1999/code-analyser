annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific modules from a package indicates usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301, 9217, 8748, 7572]",1.0,4,ml_signal,6,Importing specific modules from a package indicates usage patterns,,0,import unittest,"[11748, 555, 715, 395]"
‚ö†Ô∏è SAST Risk (Low): Ensure the imported module is from a trusted source to avoid supply chain risks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 262, 17392, 8265, 318, 422, 257, 13467, 2723, 284, 3368, 5127, 6333, 7476]",0.5,15,sast_risk,7,Ensure the imported module is from a trusted source to avoid supply chain risks,Low,4,from tushare.stock import reference as fd,"[6738, 256, 1530, 533, 13, 13578, 1330, 4941, 355, 277, 67]"
‚úÖ Best Practice: Inheriting from unittest.TestCase to create a test case class,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 555, 715, 395, 13, 14402, 20448, 284, 2251, 257, 1332, 1339, 1398]",1.0,26,best_practice,7,Inheriting from unittest.TestCase to create a test case class,,15,from tushare.stock import reference as fd,"[6738, 256, 1530, 533, 13, 13578, 1330, 4941, 355, 277, 67]"
üß† ML Signal: Method for setting initial configuration or state,"[8582, 100, 254, 10373, 26484, 25, 11789, 329, 4634, 4238, 8398, 393, 1181]",0.5,36,ml_signal,9,Method for setting initial configuration or state,,26,class Test(unittest.TestCase):,"[4871, 6208, 7, 403, 715, 395, 13, 14402, 20448, 2599]"
"üß† ML Signal: Hardcoded stock code, could be used to identify specific stocks","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 4283, 2438, 11, 714, 307, 973, 284, 5911, 2176, 14420]",0.5,46,ml_signal,11,"Hardcoded stock code, could be used to identify specific stocks",,36,    def set_data(self):,"[220, 220, 220, 825, 900, 62, 7890, 7, 944, 2599]"
"üß† ML Signal: Hardcoded start date, could be used to identify time periods of interest","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 923, 3128, 11, 714, 307, 973, 284, 5911, 640, 9574, 286, 1393]",0.5,64,ml_signal,13,"Hardcoded start date, could be used to identify time periods of interest",,46,        self.start = '2015-01-03',"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9688, 796, 705, 4626, 12, 486, 12, 3070, 6]"
"üß† ML Signal: Hardcoded end date, could be used to identify time periods of interest","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 886, 3128, 11, 714, 307, 973, 284, 5911, 640, 9574, 286, 1393]",0.5,76,ml_signal,15,"Hardcoded end date, could be used to identify time periods of interest",,64,        self.year = 2014,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1941, 796, 1946]"
"üß† ML Signal: Hardcoded year, could be used to identify specific years of interest","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 614, 11, 714, 307, 973, 284, 5911, 2176, 812, 286, 1393]",0.5,88,ml_signal,17,"Hardcoded year, could be used to identify specific years of interest",,76,        self.top = 60,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 4852, 796, 3126]"
"üß† ML Signal: Hardcoded quarter, could be used to identify specific quarters of interest","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3860, 11, 714, 307, 973, 284, 5911, 2176, 13620, 286, 1393]",0.5,96,ml_signal,19,"Hardcoded quarter, could be used to identify specific quarters of interest",,88,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
"üß† ML Signal: Hardcoded top value, could be used to identify specific thresholds","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 1353, 1988, 11, 714, 307, 973, 284, 5911, 2176, 40885]",0.5,109,ml_signal,21,"Hardcoded top value, could be used to identify specific thresholds",,96,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
"üß† ML Signal: Boolean flag for display settings, could be used to identify user preferences","[8582, 100, 254, 10373, 26484, 25, 41146, 6056, 329, 3359, 6460, 11, 714, 307, 973, 284, 5911, 2836, 15387]",0.5,117,ml_signal,23,"Boolean flag for display settings, could be used to identify user preferences",,109,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
üß† ML Signal: Method name suggests this is a test function,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 428, 318, 257, 1332, 2163]",0.5,129,ml_signal,16,Method name suggests this is a test function,,117,        self.quarter = 4,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 24385, 796, 604]"
üß† ML Signal: Method call pattern for setting up data,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 4634, 510, 1366]",0.5,143,ml_signal,18,Method call pattern for setting up data,,129,        self.show_content = True,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 12860, 62, 11299, 796, 6407]"
‚ö†Ô∏è SAST Risk (Low): Using print statements for debugging can expose sensitive data,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 3601, 6299, 329, 28769, 460, 15651, 8564, 1366]",0.5,155,sast_risk,20,Using print statements for debugging can expose sensitive data,Low,143,    def test_profit_data(self):,"[220, 220, 220, 825, 1332, 62, 9183, 62, 7890, 7, 944, 2599]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and behavior of the test,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 4069, 286, 262, 1332]",1.0,167,best_practice,20,Consider adding a docstring to describe the purpose and behavior of the test,,155,    def test_profit_data(self):,"[220, 220, 220, 825, 1332, 62, 9183, 62, 7890, 7, 944, 2599]"
‚úÖ Best Practice: Consider using a logging framework instead of print for better control over output,"[26486, 227, 6705, 19939, 25, 12642, 1262, 257, 18931, 9355, 2427, 286, 3601, 329, 1365, 1630, 625, 5072]",0.5,189,best_practice,22,Consider using a logging framework instead of print for better control over output,,167,        print(fd.profit_data(top=self.top)) ,"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 16344, 13, 9183, 62, 7890, 7, 4852, 28, 944, 13, 4852, 4008, 220]"
"üß† ML Signal: Usage of a method from an object, indicating a pattern of object-oriented programming","[8582, 100, 254, 10373, 26484, 25, 29566, 286, 257, 2446, 422, 281, 2134, 11, 12739, 257, 3912, 286, 2134, 12, 17107, 8300]",0.5,202,ml_signal,24,"Usage of a method from an object, indicating a pattern of object-oriented programming",,189,    def test_forecast_data(self):,"[220, 220, 220, 825, 1332, 62, 754, 2701, 62, 7890, 7, 944, 2599]"
‚ö†Ô∏è SAST Risk (Low): Ensure that fd.forecast_data handles inputs safely to prevent potential data leaks or errors,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 326, 277, 67, 13, 754, 2701, 62, 7890, 17105, 17311, 11512, 284, 2948, 2785, 1366, 17316, 393, 8563]",0.5,215,sast_risk,25,Ensure that fd.forecast_data handles inputs safely to prevent potential data leaks or errors,Low,202,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
üß† ML Signal: Method name follows a common test naming pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5679, 257, 2219, 1332, 19264, 3912]",1.0,237,ml_signal,22,Method name follows a common test naming pattern,,215,        print(fd.profit_data(top=self.top)) ,"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 16344, 13, 9183, 62, 7890, 7, 4852, 28, 944, 13, 4852, 4008, 220]"
‚ö†Ô∏è SAST Risk (Low): Using print statements for debugging can expose sensitive data in production,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 3601, 6299, 329, 28769, 460, 15651, 8564, 1366, 287, 3227]",1.0,250,sast_risk,24,Using print statements for debugging can expose sensitive data in production,Low,237,    def test_forecast_data(self):,"[220, 220, 220, 825, 1332, 62, 754, 2701, 62, 7890, 7, 944, 2599]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose and behavior of the test function.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 290, 4069, 286, 262, 1332, 2163, 13]",0.5,263,best_practice,25,Consider adding a docstring to describe the purpose and behavior of the test function.,,250,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
üß† ML Signal: Usage of print statements in test functions can indicate debugging practices.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3601, 6299, 287, 1332, 5499, 460, 7603, 28769, 6593, 13]",0.5,271,ml_signal,27,Usage of print statements in test functions can indicate debugging practices.,,263,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Low): Printing sensitive data can lead to information disclosure in logs.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 8564, 1366, 460, 1085, 284, 1321, 13019, 287, 17259, 13]",0.5,288,sast_risk,29,Printing sensitive data can lead to information disclosure in logs.,Low,271,        print(fd.xsg_data()) ,"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 16344, 13, 34223, 70, 62, 7890, 28955, 220]"
"üß† ML Signal: Function definition with a test prefix, indicating a test case or test function","[8582, 100, 254, 10373, 26484, 25, 15553, 6770, 351, 257, 1332, 21231, 11, 12739, 257, 1332, 1339, 393, 1332, 2163]",1.0,296,ml_signal,27,"Function definition with a test prefix, indicating a test case or test function",,288,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Low): Use of print statements for debugging can expose sensitive information in production,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3601, 6299, 329, 28769, 460, 15651, 8564, 1321, 287, 3227]",1.0,313,sast_risk,29,Use of print statements for debugging can expose sensitive information in production,Low,296,        print(fd.xsg_data()) ,"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 16344, 13, 34223, 70, 62, 7890, 28955, 220]"
‚úÖ Best Practice: Consider using logging instead of print for better control over output,"[26486, 227, 6705, 19939, 25, 12642, 1262, 18931, 2427, 286, 3601, 329, 1365, 1630, 625, 5072]",0.5,321,best_practice,30,Consider using logging instead of print for better control over output,,313,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose of the test.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 286, 262, 1332, 13]",0.5,329,best_practice,30,Consider adding a docstring to describe the purpose of the test.,,321,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
‚úÖ Best Practice: Ensure set_data() initializes all necessary data for the test.,"[26486, 227, 6705, 19939, 25, 48987, 900, 62, 7890, 3419, 4238, 4340, 477, 3306, 1366, 329, 262, 1332, 13]",1.0,342,best_practice,32,Ensure set_data() initializes all necessary data for the test.,,329,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
‚ö†Ô∏è SAST Risk (Low): Printing sensitive data can lead to information leakage.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 8564, 1366, 460, 1085, 284, 1321, 47988, 13]",1.0,347,sast_risk,34,Printing sensitive data can lead to information leakage.,Low,342,     ,"[220, 220, 220, 220, 220]"
üß† ML Signal: Usage of print statements for debugging or logging.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3601, 6299, 329, 28769, 393, 18931, 13]",0.5,360,ml_signal,35,Usage of print statements for debugging or logging.,,347,    def test_new_stocksa(self):,"[220, 220, 220, 825, 1332, 62, 3605, 62, 29522, 64, 7, 944, 2599]"
üß† ML Signal: Method name follows a common test naming pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5679, 257, 2219, 1332, 19264, 3912]",1.0,385,ml_signal,33,Method name follows a common test naming pattern,,360,"        print(fd.fund_holdings(self.year, self.quarter)) ","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 16344, 13, 10990, 62, 2946, 654, 7, 944, 13, 1941, 11, 2116, 13, 24385, 4008, 220]"
üß† ML Signal: Method call pattern that sets up data for testing,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 326, 5621, 510, 1366, 329, 4856]",0.5,398,ml_signal,35,Method call pattern that sets up data for testing,,385,    def test_new_stocksa(self):,"[220, 220, 220, 825, 1332, 62, 3605, 62, 29522, 64, 7, 944, 2599]"
‚ö†Ô∏è SAST Risk (Low): Printing sensitive data could lead to information disclosure,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 44118, 8564, 1366, 714, 1085, 284, 1321, 13019]",0.5,406,sast_risk,37,Printing sensitive data could lead to information disclosure,Low,398,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
üß† ML Signal: Usage of print for output in a test method,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3601, 329, 5072, 287, 257, 1332, 2446]",0.5,410,ml_signal,38,Usage of print for output in a test method,,406,    ,"[220, 220, 220, 220]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose of the test.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 286, 262, 1332, 13]",0.5,427,best_practice,36,Consider adding a docstring to describe the purpose of the test.,,410,        print(fd.new_stocks())  ,"[220, 220, 220, 220, 220, 220, 220, 3601, 7, 16344, 13, 3605, 62, 29522, 28955, 220, 220]"
üß† ML Signal: Usage of print statements in test functions can indicate debugging practices.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3601, 6299, 287, 1332, 5499, 460, 7603, 28769, 6593, 13]",0.5,431,ml_signal,38,Usage of print statements in test functions can indicate debugging practices.,,427,    ,"[220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Low): Using print statements in tests can clutter test output and is not a best practice.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 8554, 3601, 6299, 287, 5254, 460, 45343, 1332, 5072, 290, 318, 407, 257, 1266, 3357, 13]",0.5,445,sast_risk,39,Using print statements in tests can clutter test output and is not a best practice.,Low,431,    def test_sh_margin_details(self):,"[220, 220, 220, 825, 1332, 62, 1477, 62, 36153, 62, 36604, 7, 944, 2599]"
üß† ML Signal: Method name follows a common test naming pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5679, 257, 2219, 1332, 19264, 3912]",0.5,459,ml_signal,39,Method name follows a common test naming pattern,,445,    def test_sh_margin_details(self):,"[220, 220, 220, 825, 1332, 62, 1477, 62, 36153, 62, 36604, 7, 944, 2599]"
‚ö†Ô∏è SAST Risk (Low): Direct print statements in tests can clutter output,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 3601, 6299, 287, 5254, 460, 45343, 5072]",0.5,489,sast_risk,41,Direct print statements in tests can clutter output,Low,459,"        print(fd.sh_margin_details(self.start, self.end, self.code)) ","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 16344, 13, 1477, 62, 36153, 62, 36604, 7, 944, 13, 9688, 11, 2116, 13, 437, 11, 2116, 13, 8189, 4008, 220]"
‚úÖ Best Practice: Use the standard Python idiom for running tests,"[26486, 227, 6705, 19939, 25, 5765, 262, 3210, 11361, 4686, 29005, 329, 2491, 5254]",0.5,504,best_practice,42,Use the standard Python idiom for running tests,,489,               ,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220]"

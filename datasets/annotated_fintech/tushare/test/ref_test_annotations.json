[
  {
    "line": 6,
    "text": "import unittest",
    "annotation": "\ud83e\udde0 ML Signal: Importing specific modules from a package indicates usage patterns",
    "confidence": 1.0,
    "tokens": [
      11748,
      555,
      715,
      395
    ],
    "start_token": 0,
    "end_token": 4,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      17267,
      278,
      2176,
      13103,
      422,
      257,
      5301,
      9217,
      8748,
      7572
    ],
    "label": "ml_signal",
    "reason": "Importing specific modules from a package indicates usage patterns"
  },
  {
    "line": 7,
    "text": "from tushare.stock import reference as fd",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure the imported module is from a trusted source to avoid supply chain risks",
    "confidence": 0.5,
    "tokens": [
      6738,
      256,
      1530,
      533,
      13,
      13578,
      1330,
      4941,
      355,
      277,
      67
    ],
    "start_token": 4,
    "end_token": 15,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      262,
      17392,
      8265,
      318,
      422,
      257,
      13467,
      2723,
      284,
      3368,
      5127,
      6333,
      7476
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure the imported module is from a trusted source to avoid supply chain risks"
  },
  {
    "line": 7,
    "text": "from tushare.stock import reference as fd",
    "annotation": "\u2705 Best Practice: Inheriting from unittest.TestCase to create a test case class",
    "confidence": 1.0,
    "tokens": [
      6738,
      256,
      1530,
      533,
      13,
      13578,
      1330,
      4941,
      355,
      277,
      67
    ],
    "start_token": 15,
    "end_token": 26,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      47025,
      1780,
      422,
      555,
      715,
      395,
      13,
      14402,
      20448,
      284,
      2251,
      257,
      1332,
      1339,
      1398
    ],
    "label": "best_practice",
    "reason": "Inheriting from unittest.TestCase to create a test case class"
  },
  {
    "line": 9,
    "text": "class Test(unittest.TestCase):",
    "annotation": "\ud83e\udde0 ML Signal: Method for setting initial configuration or state",
    "confidence": 0.5,
    "tokens": [
      4871,
      6208,
      7,
      403,
      715,
      395,
      13,
      14402,
      20448,
      2599
    ],
    "start_token": 26,
    "end_token": 36,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      329,
      4634,
      4238,
      8398,
      393,
      1181
    ],
    "label": "ml_signal",
    "reason": "Method for setting initial configuration or state"
  },
  {
    "line": 11,
    "text": "    def set_data(self):",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded stock code, could be used to identify specific stocks",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      900,
      62,
      7890,
      7,
      944,
      2599
    ],
    "start_token": 36,
    "end_token": 46,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      4283,
      2438,
      11,
      714,
      307,
      973,
      284,
      5911,
      2176,
      14420
    ],
    "label": "ml_signal",
    "reason": "Hardcoded stock code, could be used to identify specific stocks"
  },
  {
    "line": 13,
    "text": "        self.start = '2015-01-03'",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded start date, could be used to identify time periods of interest",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      9688,
      796,
      705,
      4626,
      12,
      486,
      12,
      3070,
      6
    ],
    "start_token": 46,
    "end_token": 64,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      923,
      3128,
      11,
      714,
      307,
      973,
      284,
      5911,
      640,
      9574,
      286,
      1393
    ],
    "label": "ml_signal",
    "reason": "Hardcoded start date, could be used to identify time periods of interest"
  },
  {
    "line": 15,
    "text": "        self.year = 2014",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded end date, could be used to identify time periods of interest",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      1941,
      796,
      1946
    ],
    "start_token": 64,
    "end_token": 76,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      886,
      3128,
      11,
      714,
      307,
      973,
      284,
      5911,
      640,
      9574,
      286,
      1393
    ],
    "label": "ml_signal",
    "reason": "Hardcoded end date, could be used to identify time periods of interest"
  },
  {
    "line": 17,
    "text": "        self.top = 60",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded year, could be used to identify specific years of interest",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      4852,
      796,
      3126
    ],
    "start_token": 76,
    "end_token": 88,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      614,
      11,
      714,
      307,
      973,
      284,
      5911,
      2176,
      812,
      286,
      1393
    ],
    "label": "ml_signal",
    "reason": "Hardcoded year, could be used to identify specific years of interest"
  },
  {
    "line": 19,
    "text": "        ",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded quarter, could be used to identify specific quarters of interest",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 88,
    "end_token": 96,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      3860,
      11,
      714,
      307,
      973,
      284,
      5911,
      2176,
      13620,
      286,
      1393
    ],
    "label": "ml_signal",
    "reason": "Hardcoded quarter, could be used to identify specific quarters of interest"
  },
  {
    "line": 21,
    "text": "        self.set_data()",
    "annotation": "\ud83e\udde0 ML Signal: Hardcoded top value, could be used to identify specific thresholds",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      62,
      7890,
      3419
    ],
    "start_token": 96,
    "end_token": 109,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      6912,
      40976,
      1353,
      1988,
      11,
      714,
      307,
      973,
      284,
      5911,
      2176,
      40885
    ],
    "label": "ml_signal",
    "reason": "Hardcoded top value, could be used to identify specific thresholds"
  },
  {
    "line": 23,
    "text": "        ",
    "annotation": "\ud83e\udde0 ML Signal: Boolean flag for display settings, could be used to identify user preferences",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 109,
    "end_token": 117,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      41146,
      6056,
      329,
      3359,
      6460,
      11,
      714,
      307,
      973,
      284,
      5911,
      2836,
      15387
    ],
    "label": "ml_signal",
    "reason": "Boolean flag for display settings, could be used to identify user preferences"
  },
  {
    "line": 16,
    "text": "        self.quarter = 4",
    "annotation": "\ud83e\udde0 ML Signal: Method name suggests this is a test function",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      24385,
      796,
      604
    ],
    "start_token": 117,
    "end_token": 129,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      5644,
      428,
      318,
      257,
      1332,
      2163
    ],
    "label": "ml_signal",
    "reason": "Method name suggests this is a test function"
  },
  {
    "line": 18,
    "text": "        self.show_content = True",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern for setting up data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      12860,
      62,
      11299,
      796,
      6407
    ],
    "start_token": 129,
    "end_token": 143,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      329,
      4634,
      510,
      1366
    ],
    "label": "ml_signal",
    "reason": "Method call pattern for setting up data"
  },
  {
    "line": 20,
    "text": "    def test_profit_data(self):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using print statements for debugging can expose sensitive data",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      9183,
      62,
      7890,
      7,
      944,
      2599
    ],
    "start_token": 143,
    "end_token": 155,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      3601,
      6299,
      329,
      28769,
      460,
      15651,
      8564,
      1366
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using print statements for debugging can expose sensitive data"
  },
  {
    "line": 20,
    "text": "    def test_profit_data(self):",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose and behavior of the test",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      9183,
      62,
      7890,
      7,
      944,
      2599
    ],
    "start_token": 155,
    "end_token": 167,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      4069,
      286,
      262,
      1332
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose and behavior of the test"
  },
  {
    "line": 22,
    "text": "        print(fd.profit_data(top=self.top)) ",
    "annotation": "\u2705 Best Practice: Consider using a logging framework instead of print for better control over output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      16344,
      13,
      9183,
      62,
      7890,
      7,
      4852,
      28,
      944,
      13,
      4852,
      4008,
      220
    ],
    "start_token": 167,
    "end_token": 189,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      257,
      18931,
      9355,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Consider using a logging framework instead of print for better control over output"
  },
  {
    "line": 24,
    "text": "    def test_forecast_data(self):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of a method from an object, indicating a pattern of object-oriented programming",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      754,
      2701,
      62,
      7890,
      7,
      944,
      2599
    ],
    "start_token": 189,
    "end_token": 202,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      257,
      2446,
      422,
      281,
      2134,
      11,
      12739,
      257,
      3912,
      286,
      2134,
      12,
      17107,
      8300
    ],
    "label": "ml_signal",
    "reason": "Usage of a method from an object, indicating a pattern of object-oriented programming"
  },
  {
    "line": 25,
    "text": "        self.set_data()",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Ensure that fd.forecast_data handles inputs safely to prevent potential data leaks or errors",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      62,
      7890,
      3419
    ],
    "start_token": 202,
    "end_token": 215,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      48987,
      326,
      277,
      67,
      13,
      754,
      2701,
      62,
      7890,
      17105,
      17311,
      11512,
      284,
      2948,
      2785,
      1366,
      17316,
      393,
      8563
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Ensure that fd.forecast_data handles inputs safely to prevent potential data leaks or errors"
  },
  {
    "line": 22,
    "text": "        print(fd.profit_data(top=self.top)) ",
    "annotation": "\ud83e\udde0 ML Signal: Method name follows a common test naming pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      16344,
      13,
      9183,
      62,
      7890,
      7,
      4852,
      28,
      944,
      13,
      4852,
      4008,
      220
    ],
    "start_token": 215,
    "end_token": 237,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method name follows a common test naming pattern"
  },
  {
    "line": 24,
    "text": "    def test_forecast_data(self):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using print statements for debugging can expose sensitive data in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      754,
      2701,
      62,
      7890,
      7,
      944,
      2599
    ],
    "start_token": 237,
    "end_token": 250,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      3601,
      6299,
      329,
      28769,
      460,
      15651,
      8564,
      1366,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using print statements for debugging can expose sensitive data in production"
  },
  {
    "line": 25,
    "text": "        self.set_data()",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose and behavior of the test function.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      62,
      7890,
      3419
    ],
    "start_token": 250,
    "end_token": 263,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      290,
      4069,
      286,
      262,
      1332,
      2163,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose and behavior of the test function."
  },
  {
    "line": 27,
    "text": "        ",
    "annotation": "\ud83e\udde0 ML Signal: Usage of print statements in test functions can indicate debugging practices.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 263,
    "end_token": 271,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3601,
      6299,
      287,
      1332,
      5499,
      460,
      7603,
      28769,
      6593,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of print statements in test functions can indicate debugging practices."
  },
  {
    "line": 29,
    "text": "        print(fd.xsg_data()) ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing sensitive data can lead to information disclosure in logs.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      16344,
      13,
      34223,
      70,
      62,
      7890,
      28955,
      220
    ],
    "start_token": 271,
    "end_token": 288,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      8564,
      1366,
      460,
      1085,
      284,
      1321,
      13019,
      287,
      17259,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing sensitive data can lead to information disclosure in logs."
  },
  {
    "line": 27,
    "text": "        ",
    "annotation": "\ud83e\udde0 ML Signal: Function definition with a test prefix, indicating a test case or test function",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 288,
    "end_token": 296,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      15553,
      6770,
      351,
      257,
      1332,
      21231,
      11,
      12739,
      257,
      1332,
      1339,
      393,
      1332,
      2163
    ],
    "label": "ml_signal",
    "reason": "Function definition with a test prefix, indicating a test case or test function"
  },
  {
    "line": 29,
    "text": "        print(fd.xsg_data()) ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Use of print statements for debugging can expose sensitive information in production",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      16344,
      13,
      34223,
      70,
      62,
      7890,
      28955,
      220
    ],
    "start_token": 296,
    "end_token": 313,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      5765,
      286,
      3601,
      6299,
      329,
      28769,
      460,
      15651,
      8564,
      1321,
      287,
      3227
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Use of print statements for debugging can expose sensitive information in production"
  },
  {
    "line": 30,
    "text": "        ",
    "annotation": "\u2705 Best Practice: Consider using logging instead of print for better control over output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 313,
    "end_token": 321,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      1262,
      18931,
      2427,
      286,
      3601,
      329,
      1365,
      1630,
      625,
      5072
    ],
    "label": "best_practice",
    "reason": "Consider using logging instead of print for better control over output"
  },
  {
    "line": 30,
    "text": "        ",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose of the test.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 321,
    "end_token": 329,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      1332,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose of the test."
  },
  {
    "line": 32,
    "text": "        self.set_data()",
    "annotation": "\u2705 Best Practice: Ensure set_data() initializes all necessary data for the test.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      2116,
      13,
      2617,
      62,
      7890,
      3419
    ],
    "start_token": 329,
    "end_token": 342,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      48987,
      900,
      62,
      7890,
      3419,
      4238,
      4340,
      477,
      3306,
      1366,
      329,
      262,
      1332,
      13
    ],
    "label": "best_practice",
    "reason": "Ensure set_data() initializes all necessary data for the test."
  },
  {
    "line": 34,
    "text": "     ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing sensitive data can lead to information leakage.",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 342,
    "end_token": 347,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      8564,
      1366,
      460,
      1085,
      284,
      1321,
      47988,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing sensitive data can lead to information leakage."
  },
  {
    "line": 35,
    "text": "    def test_new_stocksa(self):",
    "annotation": "\ud83e\udde0 ML Signal: Usage of print statements for debugging or logging.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      3605,
      62,
      29522,
      64,
      7,
      944,
      2599
    ],
    "start_token": 347,
    "end_token": 360,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3601,
      6299,
      329,
      28769,
      393,
      18931,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of print statements for debugging or logging."
  },
  {
    "line": 33,
    "text": "        print(fd.fund_holdings(self.year, self.quarter)) ",
    "annotation": "\ud83e\udde0 ML Signal: Method name follows a common test naming pattern",
    "confidence": 1.0,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      16344,
      13,
      10990,
      62,
      2946,
      654,
      7,
      944,
      13,
      1941,
      11,
      2116,
      13,
      24385,
      4008,
      220
    ],
    "start_token": 360,
    "end_token": 385,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method name follows a common test naming pattern"
  },
  {
    "line": 35,
    "text": "    def test_new_stocksa(self):",
    "annotation": "\ud83e\udde0 ML Signal: Method call pattern that sets up data for testing",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      3605,
      62,
      29522,
      64,
      7,
      944,
      2599
    ],
    "start_token": 385,
    "end_token": 398,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      869,
      3912,
      326,
      5621,
      510,
      1366,
      329,
      4856
    ],
    "label": "ml_signal",
    "reason": "Method call pattern that sets up data for testing"
  },
  {
    "line": 37,
    "text": "        ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Printing sensitive data could lead to information disclosure",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 398,
    "end_token": 406,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      44118,
      8564,
      1366,
      714,
      1085,
      284,
      1321,
      13019
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Printing sensitive data could lead to information disclosure"
  },
  {
    "line": 38,
    "text": "    ",
    "annotation": "\ud83e\udde0 ML Signal: Usage of print for output in a test method",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220
    ],
    "start_token": 406,
    "end_token": 410,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3601,
      329,
      5072,
      287,
      257,
      1332,
      2446
    ],
    "label": "ml_signal",
    "reason": "Usage of print for output in a test method"
  },
  {
    "line": 36,
    "text": "        print(fd.new_stocks())  ",
    "annotation": "\u2705 Best Practice: Consider adding a docstring to describe the purpose of the test.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      16344,
      13,
      3605,
      62,
      29522,
      28955,
      220,
      220
    ],
    "start_token": 410,
    "end_token": 427,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      12642,
      4375,
      257,
      2205,
      8841,
      284,
      6901,
      262,
      4007,
      286,
      262,
      1332,
      13
    ],
    "label": "best_practice",
    "reason": "Consider adding a docstring to describe the purpose of the test."
  },
  {
    "line": 38,
    "text": "    ",
    "annotation": "\ud83e\udde0 ML Signal: Usage of print statements in test functions can indicate debugging practices.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220
    ],
    "start_token": 427,
    "end_token": 431,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      29566,
      286,
      3601,
      6299,
      287,
      1332,
      5499,
      460,
      7603,
      28769,
      6593,
      13
    ],
    "label": "ml_signal",
    "reason": "Usage of print statements in test functions can indicate debugging practices."
  },
  {
    "line": 39,
    "text": "    def test_sh_margin_details(self):",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Using print statements in tests can clutter test output and is not a best practice.",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      1477,
      62,
      36153,
      62,
      36604,
      7,
      944,
      2599
    ],
    "start_token": 431,
    "end_token": 445,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      8554,
      3601,
      6299,
      287,
      5254,
      460,
      45343,
      1332,
      5072,
      290,
      318,
      407,
      257,
      1266,
      3357,
      13
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Using print statements in tests can clutter test output and is not a best practice."
  },
  {
    "line": 39,
    "text": "    def test_sh_margin_details(self):",
    "annotation": "\ud83e\udde0 ML Signal: Method name follows a common test naming pattern",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      825,
      1332,
      62,
      1477,
      62,
      36153,
      62,
      36604,
      7,
      944,
      2599
    ],
    "start_token": 445,
    "end_token": 459,
    "annotation_tokens": [
      8582,
      100,
      254,
      10373,
      26484,
      25,
      11789,
      1438,
      5679,
      257,
      2219,
      1332,
      19264,
      3912
    ],
    "label": "ml_signal",
    "reason": "Method name follows a common test naming pattern"
  },
  {
    "line": 41,
    "text": "        print(fd.sh_margin_details(self.start, self.end, self.code)) ",
    "annotation": "\u26a0\ufe0f SAST Risk (Low): Direct print statements in tests can clutter output",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      3601,
      7,
      16344,
      13,
      1477,
      62,
      36153,
      62,
      36604,
      7,
      944,
      13,
      9688,
      11,
      2116,
      13,
      437,
      11,
      2116,
      13,
      8189,
      4008,
      220
    ],
    "start_token": 459,
    "end_token": 489,
    "annotation_tokens": [
      158,
      248,
      254,
      37929,
      311,
      11262,
      19602,
      357,
      20535,
      2599,
      4128,
      3601,
      6299,
      287,
      5254,
      460,
      45343,
      5072
    ],
    "label": "sast_risk",
    "severity": "Low",
    "reason": "Direct print statements in tests can clutter output"
  },
  {
    "line": 42,
    "text": "               ",
    "annotation": "\u2705 Best Practice: Use the standard Python idiom for running tests",
    "confidence": 0.5,
    "tokens": [
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220,
      220
    ],
    "start_token": 489,
    "end_token": 504,
    "annotation_tokens": [
      26486,
      227,
      6705,
      19939,
      25,
      5765,
      262,
      3210,
      11361,
      4686,
      29005,
      329,
      2491,
      5254
    ],
    "label": "best_practice",
    "reason": "Use the standard Python idiom for running tests"
  }
]
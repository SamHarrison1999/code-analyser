annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
"üß† ML Signal: Importing external libraries, indicating dependencies","[8582, 100, 254, 10373, 26484, 25, 17267, 278, 7097, 12782, 11, 12739, 20086]",0.5,4,ml_signal,6,"Importing external libraries, indicating dependencies",,0,import unittest,"[11748, 555, 715, 395]"
‚ö†Ô∏è SAST Risk (Low): Ensure the library is up-to-date to avoid known vulnerabilities,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 262, 5888, 318, 510, 12, 1462, 12, 4475, 284, 3368, 1900, 23805]",0.5,14,sast_risk,7,Ensure the library is up-to-date to avoid known vulnerabilities,Low,4,import tushare.fund.nav as nav,"[11748, 256, 1530, 533, 13, 10990, 13, 28341, 355, 6812]"
‚úÖ Best Practice: Inheriting from unittest.TestCase to create a test case class,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 555, 715, 395, 13, 14402, 20448, 284, 2251, 257, 1332, 1339, 1398]",1.0,24,best_practice,7,Inheriting from unittest.TestCase to create a test case class,,14,import tushare.fund.nav as nav,"[11748, 256, 1530, 533, 13, 10990, 13, 28341, 355, 6812]"
"üß† ML Signal: Method setting fixed data values, useful for detecting hardcoded configurations","[8582, 100, 254, 10373, 26484, 25, 11789, 4634, 5969, 1366, 3815, 11, 4465, 329, 31521, 1327, 40976, 25412]",1.0,24,ml_signal,9,"Method setting fixed data values, useful for detecting hardcoded configurations",,24,,[]
"üß† ML Signal: Hardcoded date values, useful for detecting static time ranges","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3128, 3815, 11, 4465, 329, 31521, 9037, 640, 16069]",1.0,24,ml_signal,11,"Hardcoded date values, useful for detecting static time ranges",,24,,[]
"üß† ML Signal: Hardcoded date values, useful for detecting static time ranges","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3128, 3815, 11, 4465, 329, 31521, 9037, 640, 16069]",1.0,41,ml_signal,13,"Hardcoded date values, useful for detecting static time ranges",,24,        self.symbol = '600848',"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1837, 23650, 796, 705, 8054, 23, 2780, 6]"
"üß† ML Signal: Hardcoded display value, useful for detecting static configurations","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3359, 1988, 11, 4465, 329, 31521, 9037, 25412]",1.0,59,ml_signal,15,"Hardcoded display value, useful for detecting static configurations",,41,        self.end = '2016-02-29',"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 437, 796, 705, 5304, 12, 2999, 12, 1959, 6]"
"üß† ML Signal: Method name suggests a test function, useful for identifying test patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 257, 1332, 2163, 11, 4465, 329, 13720, 1332, 7572]",1.0,77,ml_signal,14,"Method name suggests a test function, useful for identifying test patterns",,59,        self.start = '2014-11-24',"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9688, 796, 705, 4967, 12, 1157, 12, 1731, 6]"
"üß† ML Signal: Use of a list to iterate over categories, indicating a pattern of categorical processing","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1351, 284, 11629, 378, 625, 9376, 11, 12739, 257, 3912, 286, 4253, 12409, 7587]",0.5,90,ml_signal,16,"Use of a list to iterate over categories, indicating a pattern of categorical processing",,77,        self.disp = 5,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 6381, 79, 796, 642]"
"‚úÖ Best Practice: Debugging print statement, consider using logging for better control","[26486, 227, 6705, 19939, 25, 31687, 2667, 3601, 2643, 11, 2074, 1262, 18931, 329, 1365, 1630]",1.0,104,best_practice,18,"Debugging print statement, consider using logging for better control",,90,    def test_get_nav_open(self):,"[220, 220, 220, 825, 1332, 62, 1136, 62, 28341, 62, 9654, 7, 944, 2599]"
"‚úÖ Best Practice: Debugging print statement, consider using logging for better control","[26486, 227, 6705, 19939, 25, 31687, 2667, 3601, 2643, 11, 2074, 1262, 18931, 329, 1365, 1630]",1.0,120,best_practice,21,"Debugging print statement, consider using logging for better control",,104,        print('get nav open................\n'),"[220, 220, 220, 220, 220, 220, 220, 3601, 10786, 1136, 6812, 1280, 4181, 59, 77, 11537]"
"üß† ML Signal: Calling a function with a category, useful for learning function usage patterns","[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2163, 351, 257, 6536, 11, 4465, 329, 4673, 2163, 8748, 7572]",0.5,148,ml_signal,23,"Calling a function with a category, useful for learning function usage patterns",,120,            print('=============\nget %s nav\n=============' % item),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 25609, 28, 59, 782, 316, 4064, 82, 6812, 59, 77, 25609, 11639, 4064, 2378, 8]"
"üß† ML Signal: Printing the length of a DataFrame, common pattern in data processing","[8582, 100, 254, 10373, 26484, 25, 44118, 262, 4129, 286, 257, 6060, 19778, 11, 2219, 3912, 287, 1366, 7587]",0.5,175,ml_signal,25,"Printing the length of a DataFrame, common pattern in data processing",,148,            print('\nnums=%d' % len(fund_df)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 20471, 5700, 28, 4, 67, 6, 4064, 18896, 7, 10990, 62, 7568, 4008]"
"‚úÖ Best Practice: Debugging print statement, consider using logging for better control","[26486, 227, 6705, 19939, 25, 31687, 2667, 3601, 2643, 11, 2074, 1262, 18931, 329, 1365, 1630]",1.0,198,best_practice,26,"Debugging print statement, consider using logging for better control",,175,            print(fund_df[:self.disp]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 10990, 62, 7568, 58, 25, 944, 13, 6381, 79, 12962]"
"üß† ML Signal: Slicing a DataFrame for display, indicates data inspection pattern","[8582, 100, 254, 10373, 26484, 25, 311, 677, 278, 257, 6060, 19778, 329, 3359, 11, 9217, 1366, 15210, 3912]",0.5,212,ml_signal,28,"Slicing a DataFrame for display, indicates data inspection pattern",,198,    def test_get_nav_close(self):,"[220, 220, 220, 825, 1332, 62, 1136, 62, 28341, 62, 19836, 7, 944, 2599]"
"‚úÖ Best Practice: Debugging print statement, consider using logging for better control","[26486, 227, 6705, 19939, 25, 31687, 2667, 3601, 2643, 11, 2074, 1262, 18931, 329, 1365, 1630]",1.0,225,best_practice,29,"Debugging print statement, consider using logging for better control",,212,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
üß† ML Signal: Usage of hardcoded lists for types and categories,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1327, 40976, 8341, 329, 3858, 290, 9376]",1.0,250,ml_signal,24,Usage of hardcoded lists for types and categories,,225,            fund_df = nav.get_nav_open(item),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1814, 62, 7568, 796, 6812, 13, 1136, 62, 28341, 62, 9654, 7, 9186, 8]"
üß† ML Signal: Usage of hardcoded lists for types and categories,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1327, 40976, 8341, 329, 3858, 290, 9376]",1.0,273,ml_signal,26,Usage of hardcoded lists for types and categories,,250,            print(fund_df[:self.disp]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 10990, 62, 7568, 58, 25, 944, 13, 6381, 79, 12962]"
üß† ML Signal: Usage of hardcoded lists for types and categories,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 1327, 40976, 8341, 329, 3858, 290, 9376]",1.0,287,ml_signal,28,Usage of hardcoded lists for types and categories,,273,    def test_get_nav_close(self):,"[220, 220, 220, 825, 1332, 62, 1136, 62, 28341, 62, 19836, 7, 944, 2599]"
‚úÖ Best Practice: Use of formatted strings for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 39559, 13042, 329, 1100, 1799]",1.0,299,best_practice,35,Use of formatted strings for readability,,287,        fund_df = None,"[220, 220, 220, 220, 220, 220, 220, 1814, 62, 7568, 796, 6045]"
üß† ML Signal: Function call pattern with parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 351, 10007]",0.5,325,ml_signal,38,Function call pattern with parameters,,299,                for t3i in qy_t3:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 329, 256, 18, 72, 287, 10662, 88, 62, 83, 18, 25]"
üß† ML Signal: Pattern of printing data length,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 13570, 1366, 4129]",0.5,364,ml_signal,39,Pattern of printing data length,,325,                    print('\n=============\nget %s-%s nav\n=============' %,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 77, 25609, 28, 59, 782, 316, 4064, 82, 12, 4, 82, 6812, 59, 77, 25609, 11639, 4064]"
üß† ML Signal: Pattern of slicing data for display,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 49289, 1366, 329, 3359]",0.5,399,ml_signal,42,Pattern of slicing data for display,,364,                    print('\nnums=%d' % len(fund_df)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 20471, 5700, 28, 4, 67, 6, 4064, 18896, 7, 10990, 62, 7568, 4008]"
‚úÖ Best Practice: Use of formatted strings for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 39559, 13042, 329, 1100, 1799]",1.0,438,best_practice,46,Use of formatted strings for readability,,399,                    print('\n=============\nget %s-%s nav\n=============' %,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 77, 25609, 28, 59, 782, 316, 4064, 82, 12, 4, 82, 6812, 59, 77, 25609, 11639, 4064]"
üß† ML Signal: Function call pattern with parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 351, 10007]",0.5,473,ml_signal,49,Function call pattern with parameters,,438,                    print('\nnums=%d' % len(fund_df)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 20471, 5700, 28, 4, 67, 6, 4064, 18896, 7, 10990, 62, 7568, 4008]"
üß† ML Signal: Pattern of printing data length,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 13570, 1366, 4129]",0.5,486,ml_signal,51,Pattern of printing data length,,473,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
üß† ML Signal: Pattern of slicing data for display,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 49289, 1366, 329, 3359]",0.5,520,ml_signal,52,Pattern of slicing data for display,,486,                print('\n=============\nget %s nav\n=============' % item),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 77, 25609, 28, 59, 782, 316, 4064, 82, 6812, 59, 77, 25609, 11639, 4064, 2378, 8]"
‚úÖ Best Practice: Use of formatted strings for readability,"[26486, 227, 6705, 19939, 25, 5765, 286, 39559, 13042, 329, 1100, 1799]",1.0,520,best_practice,56,Use of formatted strings for readability,,520,,[]
üß† ML Signal: Function call pattern with parameters,"[8582, 100, 254, 10373, 26484, 25, 15553, 869, 3912, 351, 10007]",0.5,533,ml_signal,58,Function call pattern with parameters,,520,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
üß† ML Signal: Pattern of printing data length,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 13570, 1366, 4129]",0.5,565,ml_signal,60,Pattern of printing data length,,533,"        t3 = {'all': '0', 'wjzq': '13', 'gp': '14',","[220, 220, 220, 220, 220, 220, 220, 256, 18, 796, 1391, 6, 439, 10354, 705, 15, 3256, 705, 86, 73, 89, 80, 10354, 705, 1485, 3256, 705, 31197, 10354, 705, 1415, 3256]"
üß† ML Signal: Pattern of slicing data for display,"[8582, 100, 254, 10373, 26484, 25, 23939, 286, 49289, 1366, 329, 3359]",0.5,602,ml_signal,61,Pattern of slicing data for display,,565,"              'zs': '15', 'czzq': '16', 'jjzq': '17'}","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 89, 82, 10354, 705, 1314, 3256, 705, 66, 3019, 80, 10354, 705, 1433, 3256, 705, 41098, 89, 80, 10354, 705, 1558, 6, 92]"
"üß† ML Signal: Method name suggests a test function, useful for identifying test patterns","[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5644, 257, 1332, 2163, 11, 4465, 329, 13720, 1332, 7572]",0.5,633,ml_signal,50,"Method name suggests a test function, useful for identifying test patterns",,602,                    print(fund_df[:self.disp]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 10990, 62, 7568, 58, 25, 944, 13, 6381, 79, 12962]"
üß† ML Signal: Usage of lists and dictionaries for configuration or test data,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 8341, 290, 48589, 3166, 329, 8398, 393, 1332, 1366]",0.5,667,ml_signal,52,Usage of lists and dictionaries for configuration or test data,,633,                print('\n=============\nget %s nav\n=============' % item),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 77, 25609, 28, 59, 782, 316, 4064, 82, 6812, 59, 77, 25609, 11639, 4064, 2378, 8]"
‚úÖ Best Practice: Use of print statements for debugging or logging,"[26486, 227, 6705, 19939, 25, 5765, 286, 3601, 6299, 329, 28769, 393, 18931]",0.5,667,best_practice,56,Use of print statements for debugging or logging,,667,,[]
‚úÖ Best Practice: Clear and descriptive print statements for debugging,"[26486, 227, 6705, 19939, 25, 11459, 290, 35644, 3601, 6299, 329, 28769]",0.5,704,best_practice,61,Clear and descriptive print statements for debugging,,667,"              'zs': '15', 'czzq': '16', 'jjzq': '17'}","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 89, 82, 10354, 705, 1314, 3256, 705, 66, 3019, 80, 10354, 705, 1433, 3256, 705, 41098, 89, 80, 10354, 705, 1558, 6, 92]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if nav.get_nav_grading is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 6812, 13, 1136, 62, 28341, 62, 29247, 318, 407, 6105, 31031]",0.5,722,sast_risk,63,Potential risk if nav.get_nav_grading is not properly validated,Low,704,        print('\nget nav grading................\n'),"[220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 782, 316, 6812, 43165, 4181, 59, 77, 11537]"
‚úÖ Best Practice: Logging the length of the dataframe for verification,"[26486, 227, 6705, 19939, 25, 5972, 2667, 262, 4129, 286, 262, 1366, 14535, 329, 19637]",0.5,734,best_practice,64,Logging the length of the dataframe for verification,,722,        fund_df = None,"[220, 220, 220, 220, 220, 220, 220, 1814, 62, 7568, 796, 6045]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if fund_df is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 1814, 62, 7568, 318, 407, 6105, 31031]",0.5,768,sast_risk,67,Potential risk if fund_df is not properly validated,Low,734,                print('\n=============\nget %s nav\n=============' % item),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 77, 25609, 28, 59, 782, 316, 4064, 82, 6812, 59, 77, 25609, 11639, 4064, 2378, 8]"
‚úÖ Best Practice: Clear and descriptive print statements for debugging,"[26486, 227, 6705, 19939, 25, 11459, 290, 35644, 3601, 6299, 329, 28769]",0.5,781,best_practice,71,Clear and descriptive print statements for debugging,,768,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if nav.get_nav_grading is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 6812, 13, 1136, 62, 28341, 62, 29247, 318, 407, 6105, 31031]",0.5,813,sast_risk,74,Potential risk if nav.get_nav_grading is not properly validated,Low,781,"                          (item, t3i))","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 357, 9186, 11, 256, 18, 72, 4008]"
‚úÖ Best Practice: Logging the length of the dataframe for verification,"[26486, 227, 6705, 19939, 25, 5972, 2667, 262, 4129, 286, 262, 1366, 14535, 329, 19637]",0.5,848,best_practice,76,Logging the length of the dataframe for verification,,813,                    print('\nnums=%d' % len(fund_df)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 20471, 5700, 28, 4, 67, 6, 4064, 18896, 7, 10990, 62, 7568, 4008]"
‚ö†Ô∏è SAST Risk (Low): Potential risk if fund_df is not properly validated,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 2526, 611, 1814, 62, 7568, 318, 407, 6105, 31031]",0.5,848,sast_risk,78,Potential risk if fund_df is not properly validated,Low,848,,[]
"üß† ML Signal: Method that sets up data, indicating a setup pattern for tests","[8582, 100, 254, 10373, 26484, 25, 11789, 326, 5621, 510, 1366, 11, 12739, 257, 9058, 3912, 329, 5254]",1.0,875,ml_signal,70,"Method that sets up data, indicating a setup pattern for tests",,848,                print(fund_df[:self.disp]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 10990, 62, 7568, 58, 25, 944, 13, 6381, 79, 12962]"
"üß† ML Signal: Use of a hardcoded list, indicating a fixed dataset for testing","[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1327, 40976, 1351, 11, 12739, 257, 5969, 27039, 329, 4856]",0.5,888,ml_signal,71,"Use of a hardcoded list, indicating a fixed dataset for testing",,875,            else:,"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 2073, 25]"
"üß† ML Signal: Iterating over a list with enumerate, common pattern in Python","[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 351, 27056, 378, 11, 2219, 3912, 287, 11361]",1.0,923,ml_signal,76,"Iterating over a list with enumerate, common pattern in Python",,888,                    print('\nnums=%d' % len(fund_df)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 20471, 5700, 28, 4, 67, 6, 4064, 18896, 7, 10990, 62, 7568, 4008]"
"‚ö†Ô∏è SAST Risk (Low): Use of print statements for debugging, could expose sensitive data","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3601, 6299, 329, 28769, 11, 714, 15651, 8564, 1366]",1.0,923,sast_risk,78,"Use of print statements for debugging, could expose sensitive data",Low,923,,[]
"üß† ML Signal: Calling a function with parameters, indicating a pattern of function usage","[8582, 100, 254, 10373, 26484, 25, 32677, 257, 2163, 351, 10007, 11, 12739, 257, 3912, 286, 2163, 8748]",1.0,936,ml_signal,80,"Calling a function with parameters, indicating a pattern of function usage",,923,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
‚úÖ Best Practice: Checking if a variable is not None before proceeding,"[26486, 227, 6705, 19939, 25, 39432, 611, 257, 7885, 318, 407, 6045, 878, 18788]",1.0,977,best_practice,82,Checking if a variable is not None before proceeding,,936,"               '184721', '165519', '164302', '519749', '150275', '150305',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 1507, 2857, 2481, 3256, 705, 1433, 2816, 1129, 3256, 705, 23237, 22709, 3256, 705, 20, 24991, 2920, 3256, 705, 8628, 23195, 3256, 705, 8628, 22515, 3256]"
"‚ö†Ô∏è SAST Risk (Low): Use of print statements for debugging, could expose sensitive data","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3601, 6299, 329, 28769, 11, 714, 15651, 8564, 1366]",1.0,1007,sast_risk,85,"Use of print statements for debugging, could expose sensitive data",Low,977,            print('\n=============\nget %s nav\n=============' % item),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 77, 25609, 28, 59, 782, 316, 4064, 82, 6812, 59, 77, 25609, 11639, 4064, 2378, 8]"
"‚ö†Ô∏è SAST Risk (Low): Use of print statements for debugging, could expose sensitive data","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3601, 6299, 329, 28769, 11, 714, 15651, 8564, 1366]",1.0,1040,sast_risk,86,"Use of print statements for debugging, could expose sensitive data",Low,1007,"            fund_df = nav.get_nav_history(item, self.start, self.end)","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1814, 62, 7568, 796, 6812, 13, 1136, 62, 28341, 62, 23569, 7, 9186, 11, 2116, 13, 9688, 11, 2116, 13, 437, 8]"
üß† ML Signal: Use of a test function indicates a testing pattern,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1332, 2163, 9217, 257, 4856, 3912]",0.5,1079,ml_signal,81,Use of a test function indicates a testing pattern,,1040,"        lst = ['164905', '161005', '380007', '000733', '159920', '164902',","[220, 220, 220, 220, 220, 220, 220, 300, 301, 796, 37250, 1433, 2920, 2713, 3256, 705, 1433, 3064, 20, 3256, 705, 2548, 830, 22, 3256, 705, 830, 49995, 3256, 705, 1314, 2079, 1238, 3256, 705, 1433, 2920, 2999, 3256]"
üß† ML Signal: Use of a list to store fund IDs,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 257, 1351, 284, 3650, 1814, 32373]",0.5,1120,ml_signal,82,Use of a list to store fund IDs,,1079,"               '184721', '165519', '164302', '519749', '150275', '150305',","[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 705, 1507, 2857, 2481, 3256, 705, 1433, 2816, 1129, 3256, 705, 23237, 22709, 3256, 705, 20, 24991, 2920, 3256, 705, 8628, 23195, 3256, 705, 8628, 22515, 3256]"
üß† ML Signal: Iterating over a list of fund IDs,"[8582, 100, 254, 10373, 26484, 25, 40806, 803, 625, 257, 1351, 286, 1814, 32373]",0.5,1151,ml_signal,88,Iterating over a list of fund IDs,,1120,                print('\nnums=%d' % len(fund_df)),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 10786, 59, 20471, 5700, 28, 4, 67, 6, 4064, 18896, 7, 10990, 62, 7568, 4008]"
‚úÖ Best Practice: Use f-string for better readability,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 8841, 329, 1365, 1100, 1799]",0.5,1178,best_practice,89,Use f-string for better readability,,1151,                print(fund_df[:self.disp]),"[220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 3601, 7, 10990, 62, 7568, 58, 25, 944, 13, 6381, 79, 12962]"
‚ö†Ô∏è SAST Risk (Low): Potentially unsafe use of external function without validation,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 6902, 3746, 21596, 779, 286, 7097, 2163, 1231, 21201]",0.5,1192,sast_risk,91,Potentially unsafe use of external function without validation,Low,1178,    def test_get_fund_info(self):,"[220, 220, 220, 825, 1332, 62, 1136, 62, 10990, 62, 10951, 7, 944, 2599]"
üß† ML Signal: Checking for None before proceeding,"[8582, 100, 254, 10373, 26484, 25, 39432, 329, 6045, 878, 18788]",0.5,1205,ml_signal,92,Checking for None before proceeding,,1192,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
‚úÖ Best Practice: Use f-string for better readability,"[26486, 227, 6705, 19939, 25, 5765, 277, 12, 8841, 329, 1365, 1100, 1799]",0.5,1218,best_practice,92,Use f-string for better readability,,1205,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
üß† ML Signal: Use of unittest framework for testing,"[8582, 100, 254, 10373, 26484, 25, 5765, 286, 555, 715, 395, 9355, 329, 4856]",0.5,1231,ml_signal,92,Use of unittest framework for testing,,1218,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"

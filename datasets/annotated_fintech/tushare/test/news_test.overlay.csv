annotation,annotation_tokens,confidence,end_token,label,line,reason,severity,start_token,text,tokens
üß† ML Signal: Importing specific modules from a package indicates usage patterns,"[8582, 100, 254, 10373, 26484, 25, 17267, 278, 2176, 13103, 422, 257, 5301, 9217, 8748, 7572]",0.5,4,ml_signal,6,Importing specific modules from a package indicates usage patterns,,0,import unittest,"[11748, 555, 715, 395]"
‚ö†Ô∏è SAST Risk (Low): Ensure the imported module is from a trusted source to avoid supply chain risks,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 48987, 262, 17392, 8265, 318, 422, 257, 13467, 2723, 284, 3368, 5127, 6333, 7476]",0.5,17,sast_risk,7,Ensure the imported module is from a trusted source to avoid supply chain risks,Low,4,import tushare.stock.newsevent as fd,"[11748, 256, 1530, 533, 13, 13578, 13, 3605, 325, 1151, 355, 277, 67]"
‚úÖ Best Practice: Inheriting from unittest.TestCase to create a test case class,"[26486, 227, 6705, 19939, 25, 47025, 1780, 422, 555, 715, 395, 13, 14402, 20448, 284, 2251, 257, 1332, 1339, 1398]",1.0,30,best_practice,7,Inheriting from unittest.TestCase to create a test case class,,17,import tushare.stock.newsevent as fd,"[11748, 256, 1530, 533, 13, 13578, 13, 3605, 325, 1151, 355, 277, 67]"
"üß† ML Signal: Method setting multiple attributes, indicating a pattern of data initialization","[8582, 100, 254, 10373, 26484, 25, 11789, 4634, 3294, 12608, 11, 12739, 257, 3912, 286, 1366, 37588]",0.5,40,ml_signal,9,"Method setting multiple attributes, indicating a pattern of data initialization",,30,class Test(unittest.TestCase):,"[4871, 6208, 7, 403, 715, 395, 13, 14402, 20448, 2599]"
"üß† ML Signal: Hardcoded values for attributes, indicating a pattern of static configuration","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3815, 329, 12608, 11, 12739, 257, 3912, 286, 9037, 8398]",0.5,50,ml_signal,11,"Hardcoded values for attributes, indicating a pattern of static configuration",,40,    def set_data(self):,"[220, 220, 220, 825, 900, 62, 7890, 7, 944, 2599]"
"üß† ML Signal: Hardcoded values for attributes, indicating a pattern of static configuration","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3815, 329, 12608, 11, 12739, 257, 3912, 286, 9037, 8398]",0.5,68,ml_signal,13,"Hardcoded values for attributes, indicating a pattern of static configuration",,50,        self.start = '2015-01-03',"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 9688, 796, 705, 4626, 12, 486, 12, 3070, 6]"
"üß† ML Signal: Hardcoded values for attributes, indicating a pattern of static configuration","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3815, 329, 12608, 11, 12739, 257, 3912, 286, 9037, 8398]",0.5,80,ml_signal,15,"Hardcoded values for attributes, indicating a pattern of static configuration",,68,        self.year = 2014,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 1941, 796, 1946]"
"üß† ML Signal: Hardcoded values for attributes, indicating a pattern of static configuration","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3815, 329, 12608, 11, 12739, 257, 3912, 286, 9037, 8398]",0.5,92,ml_signal,17,"Hardcoded values for attributes, indicating a pattern of static configuration",,80,        self.top = 60,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 4852, 796, 3126]"
"üß† ML Signal: Hardcoded values for attributes, indicating a pattern of static configuration","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3815, 329, 12608, 11, 12739, 257, 3912, 286, 9037, 8398]",0.5,97,ml_signal,19,"Hardcoded values for attributes, indicating a pattern of static configuration",,92,     ,"[220, 220, 220, 220, 220]"
"üß† ML Signal: Hardcoded values for attributes, indicating a pattern of static configuration","[8582, 100, 254, 10373, 26484, 25, 6912, 40976, 3815, 329, 12608, 11, 12739, 257, 3912, 286, 9037, 8398]",0.5,111,ml_signal,21,"Hardcoded values for attributes, indicating a pattern of static configuration",,97,    def test_get_latest_news(self):,"[220, 220, 220, 825, 1332, 62, 1136, 62, 42861, 62, 10827, 7, 944, 2599]"
üß† ML Signal: Boolean flag indicating a pattern of conditional behavior,"[8582, 100, 254, 10373, 26484, 25, 41146, 6056, 12739, 257, 3912, 286, 26340, 4069]",0.5,139,ml_signal,23,Boolean flag indicating a pattern of conditional behavior,,111,"        print(fd.get_latest_news(self.top, self.show_content)) ","[220, 220, 220, 220, 220, 220, 220, 3601, 7, 16344, 13, 1136, 62, 42861, 62, 10827, 7, 944, 13, 4852, 11, 2116, 13, 12860, 62, 11299, 4008, 220]"
üß† ML Signal: Method name follows a common test naming pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5679, 257, 2219, 1332, 19264, 3912]",0.5,151,ml_signal,17,Method name follows a common test naming pattern,,139,        self.top = 60,"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 4852, 796, 3126]"
‚ö†Ô∏è SAST Risk (Low): Use of print statements in test code can clutter output,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 3601, 6299, 287, 1332, 2438, 460, 45343, 5072]",1.0,156,sast_risk,19,Use of print statements in test code can clutter output,Low,151,     ,"[220, 220, 220, 220, 220]"
‚úÖ Best Practice: Consider using assertions instead of print for testing,"[26486, 227, 6705, 19939, 25, 12642, 1262, 29965, 2427, 286, 3601, 329, 4856]",1.0,161,best_practice,20,Consider using assertions instead of print for testing,,156,     ,"[220, 220, 220, 220, 220]"
üß† ML Signal: Method name follows a common test naming pattern,"[8582, 100, 254, 10373, 26484, 25, 11789, 1438, 5679, 257, 2219, 1332, 19264, 3912]",1.0,166,ml_signal,20,Method name follows a common test naming pattern,,161,     ,"[220, 220, 220, 220, 220]"
üß† ML Signal: Method call pattern for setting up test data,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 4634, 510, 1332, 1366]",1.0,179,ml_signal,22,Method call pattern for setting up test data,,166,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
üß† ML Signal: Method call pattern for fetching notices,"[8582, 100, 254, 10373, 26484, 25, 11789, 869, 3912, 329, 21207, 278, 19748]",1.0,187,ml_signal,24,Method call pattern for fetching notices,,179,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
‚ö†Ô∏è SAST Risk (Low): Potential for NoneType if fd.get_notices returns None,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 32480, 329, 6045, 6030, 611, 277, 67, 13, 1136, 62, 1662, 1063, 5860, 6045]",1.0,195,sast_risk,25,Potential for NoneType if fd.get_notices returns None,Low,187,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
"‚ö†Ô∏è SAST Risk (Low): Use of deprecated .ix indexer, which can lead to unexpected behavior","[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 5765, 286, 39224, 764, 844, 6376, 263, 11, 543, 460, 1085, 284, 10059, 4069]",1.0,208,sast_risk,27,"Use of deprecated .ix indexer, which can lead to unexpected behavior",Low,195,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
‚úÖ Best Practice: Consider using .iloc or .loc for indexing DataFrames,"[26486, 227, 6705, 19939, 25, 12642, 1262, 764, 346, 420, 393, 764, 17946, 329, 6376, 278, 6060, 35439]",1.0,221,best_practice,27,Consider using .iloc or .loc for indexing DataFrames,,208,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
üß† ML Signal: Accessing DataFrame content using index,"[8582, 100, 254, 10373, 26484, 25, 8798, 278, 6060, 19778, 2695, 1262, 6376]",0.5,234,ml_signal,27,Accessing DataFrame content using index,,221,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
‚úÖ Best Practice: Consider adding a docstring to describe the purpose of the test case.,"[26486, 227, 6705, 19939, 25, 12642, 4375, 257, 2205, 8841, 284, 6901, 262, 4007, 286, 262, 1332, 1339, 13]",1.0,242,best_practice,24,Consider adding a docstring to describe the purpose of the test case.,,234,        ,"[220, 220, 220, 220, 220, 220, 220, 220]"
üß† ML Signal: Usage of print statements in test functions can indicate debugging practices.,"[8582, 100, 254, 10373, 26484, 25, 29566, 286, 3601, 6299, 287, 1332, 5499, 460, 7603, 28769, 6593, 13]",1.0,255,ml_signal,26,Usage of print statements in test functions can indicate debugging practices.,,242,    def test_get_notices(self):,"[220, 220, 220, 825, 1332, 62, 1136, 62, 1662, 1063, 7, 944, 2599]"
‚ö†Ô∏è SAST Risk (Low): Direct execution of unittest.main() without argument control can lead to unintended test discovery.,"[158, 248, 254, 37929, 311, 11262, 19602, 357, 20535, 2599, 4128, 9706, 286, 555, 715, 395, 13, 12417, 3419, 1231, 4578, 1630, 460, 1085, 284, 30261, 1332, 9412, 13]",0.5,268,sast_risk,27,Direct execution of unittest.main() without argument control can lead to unintended test discovery.,Low,255,        self.set_data(),"[220, 220, 220, 220, 220, 220, 220, 2116, 13, 2617, 62, 7890, 3419]"
